/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1alpha1.model;

/**
 * ReplicationCycle contains information about the current replication cycle status.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReplicationCycle extends com.google.api.client.json.GenericJson {

  /**
   * The cycle's ordinal number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cycleNumber;

  /**
   * The time the replication cycle has ended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * Provides details on the state of the cycle in case of an error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status error;

  /**
   * The identifier of the ReplicationCycle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The current progress in percentage of this cycle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer progress;

  /**
   * The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks
   * down the cycle progression more accurately.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer progressPercent;

  /**
   * The time the replication cycle has started.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * State of the ReplicationCycle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The cycle's steps list representing its progress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CycleStep> steps;

  static {
    // hack to force ProGuard to consider CycleStep used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CycleStep.class);
  }

  /**
   * The accumulated duration the replication cycle was paused.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String totalPauseDuration;

  /**
   * Output only. Warnings that occurred during the cycle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MigrationWarning> warnings;

  static {
    // hack to force ProGuard to consider MigrationWarning used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MigrationWarning.class);
  }

  /**
   * The cycle's ordinal number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCycleNumber() {
    return cycleNumber;
  }

  /**
   * The cycle's ordinal number.
   * @param cycleNumber cycleNumber or {@code null} for none
   */
  public ReplicationCycle setCycleNumber(java.lang.Integer cycleNumber) {
    this.cycleNumber = cycleNumber;
    return this;
  }

  /**
   * The time the replication cycle has ended.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * The time the replication cycle has ended.
   * @param endTime endTime or {@code null} for none
   */
  public ReplicationCycle setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Provides details on the state of the cycle in case of an error.
   * @return value or {@code null} for none
   */
  public Status getError() {
    return error;
  }

  /**
   * Provides details on the state of the cycle in case of an error.
   * @param error error or {@code null} for none
   */
  public ReplicationCycle setError(Status error) {
    this.error = error;
    return this;
  }

  /**
   * The identifier of the ReplicationCycle.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The identifier of the ReplicationCycle.
   * @param name name or {@code null} for none
   */
  public ReplicationCycle setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The current progress in percentage of this cycle.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getProgress() {
    return progress;
  }

  /**
   * The current progress in percentage of this cycle.
   * @param progress progress or {@code null} for none
   */
  public ReplicationCycle setProgress(java.lang.Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks
   * down the cycle progression more accurately.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getProgressPercent() {
    return progressPercent;
  }

  /**
   * The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks
   * down the cycle progression more accurately.
   * @param progressPercent progressPercent or {@code null} for none
   */
  public ReplicationCycle setProgressPercent(java.lang.Integer progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * The time the replication cycle has started.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * The time the replication cycle has started.
   * @param startTime startTime or {@code null} for none
   */
  public ReplicationCycle setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * State of the ReplicationCycle.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * State of the ReplicationCycle.
   * @param state state or {@code null} for none
   */
  public ReplicationCycle setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * The cycle's steps list representing its progress.
   * @return value or {@code null} for none
   */
  public java.util.List<CycleStep> getSteps() {
    return steps;
  }

  /**
   * The cycle's steps list representing its progress.
   * @param steps steps or {@code null} for none
   */
  public ReplicationCycle setSteps(java.util.List<CycleStep> steps) {
    this.steps = steps;
    return this;
  }

  /**
   * The accumulated duration the replication cycle was paused.
   * @return value or {@code null} for none
   */
  public String getTotalPauseDuration() {
    return totalPauseDuration;
  }

  /**
   * The accumulated duration the replication cycle was paused.
   * @param totalPauseDuration totalPauseDuration or {@code null} for none
   */
  public ReplicationCycle setTotalPauseDuration(String totalPauseDuration) {
    this.totalPauseDuration = totalPauseDuration;
    return this;
  }

  /**
   * Output only. Warnings that occurred during the cycle.
   * @return value or {@code null} for none
   */
  public java.util.List<MigrationWarning> getWarnings() {
    return warnings;
  }

  /**
   * Output only. Warnings that occurred during the cycle.
   * @param warnings warnings or {@code null} for none
   */
  public ReplicationCycle setWarnings(java.util.List<MigrationWarning> warnings) {
    this.warnings = warnings;
    return this;
  }

  @Override
  public ReplicationCycle set(String fieldName, Object value) {
    return (ReplicationCycle) super.set(fieldName, value);
  }

  @Override
  public ReplicationCycle clone() {
    return (ReplicationCycle) super.clone();
  }

}
