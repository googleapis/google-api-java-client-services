/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for GeostoreTimeIntervalProto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreTimeIntervalProto extends com.google.api.client.json.GenericJson {

  /**
   * Begin and end are used to specify a range of times: [begin, end). If one is present, the other
   * must be present as well. Additionally, both must have matching time granularities - all fields
   * specified in the begin TimeEndpointProto must be present in the end TimeEndpointProto and vice-
   * versa. Hours are not allowed to wrap (begin.hour() <= end.hour()).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreTimeEndpointProto begin;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreTimeEndpointProto end;

  /**
   * If true, then this interval actually encodes the complement of the specified occasion or range.
   * For example, the following TimeIntervalProto encodes all times other than the month of May.
   * TimeIntervalProto[ type = TYPE_RANGE inverted = true begin = TimeEndpointProto[ month = MAY ]
   * end = TimeEndpointProto[ month = JUNE ] ]
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean inverted;

  /**
   * clang-format on
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String occasion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Begin and end are used to specify a range of times: [begin, end). If one is present, the other
   * must be present as well. Additionally, both must have matching time granularities - all fields
   * specified in the begin TimeEndpointProto must be present in the end TimeEndpointProto and vice-
   * versa. Hours are not allowed to wrap (begin.hour() <= end.hour()).
   * @return value or {@code null} for none
   */
  public GeostoreTimeEndpointProto getBegin() {
    return begin;
  }

  /**
   * Begin and end are used to specify a range of times: [begin, end). If one is present, the other
   * must be present as well. Additionally, both must have matching time granularities - all fields
   * specified in the begin TimeEndpointProto must be present in the end TimeEndpointProto and vice-
   * versa. Hours are not allowed to wrap (begin.hour() <= end.hour()).
   * @param begin begin or {@code null} for none
   */
  public GeostoreTimeIntervalProto setBegin(GeostoreTimeEndpointProto begin) {
    this.begin = begin;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GeostoreTimeEndpointProto getEnd() {
    return end;
  }

  /**
   * @param end end or {@code null} for none
   */
  public GeostoreTimeIntervalProto setEnd(GeostoreTimeEndpointProto end) {
    this.end = end;
    return this;
  }

  /**
   * If true, then this interval actually encodes the complement of the specified occasion or range.
   * For example, the following TimeIntervalProto encodes all times other than the month of May.
   * TimeIntervalProto[ type = TYPE_RANGE inverted = true begin = TimeEndpointProto[ month = MAY ]
   * end = TimeEndpointProto[ month = JUNE ] ]
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getInverted() {
    return inverted;
  }

  /**
   * If true, then this interval actually encodes the complement of the specified occasion or range.
   * For example, the following TimeIntervalProto encodes all times other than the month of May.
   * TimeIntervalProto[ type = TYPE_RANGE inverted = true begin = TimeEndpointProto[ month = MAY ]
   * end = TimeEndpointProto[ month = JUNE ] ]
   * @param inverted inverted or {@code null} for none
   */
  public GeostoreTimeIntervalProto setInverted(java.lang.Boolean inverted) {
    this.inverted = inverted;
    return this;
  }

  /**
   * clang-format on
   * @return value or {@code null} for none
   */
  public java.lang.String getOccasion() {
    return occasion;
  }

  /**
   * clang-format on
   * @param occasion occasion or {@code null} for none
   */
  public GeostoreTimeIntervalProto setOccasion(java.lang.String occasion) {
    this.occasion = occasion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public GeostoreTimeIntervalProto setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GeostoreTimeIntervalProto set(String fieldName, Object value) {
    return (GeostoreTimeIntervalProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreTimeIntervalProto clone() {
    return (GeostoreTimeIntervalProto) super.clone();
  }

}
