/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkservices.v1beta1.model;

/**
 * A single immutable version of a `WasmPlugin` resource. Defines the Wasm module used and
 * optionally its runtime config.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Services API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WasmPluginVersion extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. A human-readable description of the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Output only. The resolved digest for the image specified in the `image` field. The digest is
   * resolved during the creation of `WasmPluginVersion` resource. This field holds the digest
   * value, regardless of whether a tag or digest was originally specified in the `image` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageDigest;

  /**
   * Optional. URI of the container image containing the plugin, stored in the Artifact Registry.
   * When a new `WasmPluginVersion` resource is created, the digest of the container image is saved
   * in the `image_digest` field. When downloading an image, the digest value is used instead of an
   * image tag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageUri;

  /**
   * Optional. Set of labels associated with the `WasmPluginVersion` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. Name of the `WasmPluginVersion` resource in the following format:
   * `projects/{project}/locations/{location}/wasmPlugins/{wasm_plugin}/
   * versions/{wasm_plugin_version}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Configuration for the plugin. The configuration is provided to the plugin at runtime through
   * the `ON_CONFIGURE` callback. When a new `WasmPluginVersion` resource is created, the digest of
   * the contents is saved in the `plugin_config_digest` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pluginConfigData;

  /**
   * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
   * The value is calculated based on the contents of `plugin_config_data` or the container image
   * defined by the `plugin_config_uri` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pluginConfigDigest;

  /**
   * URI of the plugin configuration stored in the Artifact Registry. The configuration is provided
   * to the plugin at runtime through the `ON_CONFIGURE` callback. The container image must contain
   * only a single file with the name `plugin.config`. When a new `WasmPluginVersion` resource is
   * created, the digest of the container image is saved in the `plugin_config_digest` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pluginConfigUri;

  /**
   * Output only. The timestamp when the resource was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public WasmPluginVersion setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. A human-readable description of the resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. A human-readable description of the resource.
   * @param description description or {@code null} for none
   */
  public WasmPluginVersion setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Output only. The resolved digest for the image specified in the `image` field. The digest is
   * resolved during the creation of `WasmPluginVersion` resource. This field holds the digest
   * value, regardless of whether a tag or digest was originally specified in the `image` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageDigest() {
    return imageDigest;
  }

  /**
   * Output only. The resolved digest for the image specified in the `image` field. The digest is
   * resolved during the creation of `WasmPluginVersion` resource. This field holds the digest
   * value, regardless of whether a tag or digest was originally specified in the `image` field.
   * @param imageDigest imageDigest or {@code null} for none
   */
  public WasmPluginVersion setImageDigest(java.lang.String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Optional. URI of the container image containing the plugin, stored in the Artifact Registry.
   * When a new `WasmPluginVersion` resource is created, the digest of the container image is saved
   * in the `image_digest` field. When downloading an image, the digest value is used instead of an
   * image tag.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageUri() {
    return imageUri;
  }

  /**
   * Optional. URI of the container image containing the plugin, stored in the Artifact Registry.
   * When a new `WasmPluginVersion` resource is created, the digest of the container image is saved
   * in the `image_digest` field. When downloading an image, the digest value is used instead of an
   * image tag.
   * @param imageUri imageUri or {@code null} for none
   */
  public WasmPluginVersion setImageUri(java.lang.String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Optional. Set of labels associated with the `WasmPluginVersion` resource.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Set of labels associated with the `WasmPluginVersion` resource.
   * @param labels labels or {@code null} for none
   */
  public WasmPluginVersion setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. Name of the `WasmPluginVersion` resource in the following format:
   * `projects/{project}/locations/{location}/wasmPlugins/{wasm_plugin}/
   * versions/{wasm_plugin_version}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. Name of the `WasmPluginVersion` resource in the following format:
   * `projects/{project}/locations/{location}/wasmPlugins/{wasm_plugin}/
   * versions/{wasm_plugin_version}`.
   * @param name name or {@code null} for none
   */
  public WasmPluginVersion setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Configuration for the plugin. The configuration is provided to the plugin at runtime through
   * the `ON_CONFIGURE` callback. When a new `WasmPluginVersion` resource is created, the digest of
   * the contents is saved in the `plugin_config_digest` field.
   * @see #decodePluginConfigData()
   * @return value or {@code null} for none
   */
  public java.lang.String getPluginConfigData() {
    return pluginConfigData;
  }

  /**
   * Configuration for the plugin. The configuration is provided to the plugin at runtime through
   * the `ON_CONFIGURE` callback. When a new `WasmPluginVersion` resource is created, the digest of
   * the contents is saved in the `plugin_config_digest` field.
   * @see #getPluginConfigData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodePluginConfigData() {
    return com.google.api.client.util.Base64.decodeBase64(pluginConfigData);
  }

  /**
   * Configuration for the plugin. The configuration is provided to the plugin at runtime through
   * the `ON_CONFIGURE` callback. When a new `WasmPluginVersion` resource is created, the digest of
   * the contents is saved in the `plugin_config_digest` field.
   * @see #encodePluginConfigData()
   * @param pluginConfigData pluginConfigData or {@code null} for none
   */
  public WasmPluginVersion setPluginConfigData(java.lang.String pluginConfigData) {
    this.pluginConfigData = pluginConfigData;
    return this;
  }

  /**
   * Configuration for the plugin. The configuration is provided to the plugin at runtime through
   * the `ON_CONFIGURE` callback. When a new `WasmPluginVersion` resource is created, the digest of
   * the contents is saved in the `plugin_config_digest` field.
   * @see #setPluginConfigData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public WasmPluginVersion encodePluginConfigData(byte[] pluginConfigData) {
    this.pluginConfigData = com.google.api.client.util.Base64.encodeBase64URLSafeString(pluginConfigData);
    return this;
  }

  /**
   * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
   * The value is calculated based on the contents of `plugin_config_data` or the container image
   * defined by the `plugin_config_uri` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getPluginConfigDigest() {
    return pluginConfigDigest;
  }

  /**
   * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
   * The value is calculated based on the contents of `plugin_config_data` or the container image
   * defined by the `plugin_config_uri` field.
   * @param pluginConfigDigest pluginConfigDigest or {@code null} for none
   */
  public WasmPluginVersion setPluginConfigDigest(java.lang.String pluginConfigDigest) {
    this.pluginConfigDigest = pluginConfigDigest;
    return this;
  }

  /**
   * URI of the plugin configuration stored in the Artifact Registry. The configuration is provided
   * to the plugin at runtime through the `ON_CONFIGURE` callback. The container image must contain
   * only a single file with the name `plugin.config`. When a new `WasmPluginVersion` resource is
   * created, the digest of the container image is saved in the `plugin_config_digest` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getPluginConfigUri() {
    return pluginConfigUri;
  }

  /**
   * URI of the plugin configuration stored in the Artifact Registry. The configuration is provided
   * to the plugin at runtime through the `ON_CONFIGURE` callback. The container image must contain
   * only a single file with the name `plugin.config`. When a new `WasmPluginVersion` resource is
   * created, the digest of the container image is saved in the `plugin_config_digest` field.
   * @param pluginConfigUri pluginConfigUri or {@code null} for none
   */
  public WasmPluginVersion setPluginConfigUri(java.lang.String pluginConfigUri) {
    this.pluginConfigUri = pluginConfigUri;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public WasmPluginVersion setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public WasmPluginVersion set(String fieldName, Object value) {
    return (WasmPluginVersion) super.set(fieldName, value);
  }

  @Override
  public WasmPluginVersion clone() {
    return (WasmPluginVersion) super.clone();
  }

}
