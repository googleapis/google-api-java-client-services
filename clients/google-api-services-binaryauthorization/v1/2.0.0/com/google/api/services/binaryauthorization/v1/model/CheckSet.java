/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.binaryauthorization.v1.model;

/**
 * A conjunction of policy checks, scoped to a particular namespace or Kubernetes service account.
 * In order for evaluation of a `CheckSet` to return "allowed" for a given image in a given Pod, one
 * of the following conditions must be satisfied: * The image is explicitly exempted by an entry in
 * `image_allowlist`, OR * ALL of the `checks` evaluate to "allowed".
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Binary Authorization API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CheckSet extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The checks to apply. The ultimate result of evaluating the check set will be "allow"
   * if and only if every check in `checks` evaluates to "allow". If `checks` is empty, the default
   * behavior is "always allow".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Check> checks;

  static {
    // hack to force ProGuard to consider Check used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Check.class);
  }

  /**
   * Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy
   * evaluation behavior except to improve readability of messages in evaluation results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Optional. Images exempted from this `CheckSet`. If any of the patterns match the image being
   * evaluated, no checks in the `CheckSet` will be evaluated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageAllowlist imageAllowlist;

  /**
   * Optional. The scope to which this `CheckSet` applies. If unset or an empty string (the
   * default), applies to all namespaces and service accounts. See the `Scope` message documentation
   * for details on scoping rules.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Scope scope;

  /**
   * Optional. The checks to apply. The ultimate result of evaluating the check set will be "allow"
   * if and only if every check in `checks` evaluates to "allow". If `checks` is empty, the default
   * behavior is "always allow".
   * @return value or {@code null} for none
   */
  public java.util.List<Check> getChecks() {
    return checks;
  }

  /**
   * Optional. The checks to apply. The ultimate result of evaluating the check set will be "allow"
   * if and only if every check in `checks` evaluates to "allow". If `checks` is empty, the default
   * behavior is "always allow".
   * @param checks checks or {@code null} for none
   */
  public CheckSet setChecks(java.util.List<Check> checks) {
    this.checks = checks;
    return this;
  }

  /**
   * Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy
   * evaluation behavior except to improve readability of messages in evaluation results.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy
   * evaluation behavior except to improve readability of messages in evaluation results.
   * @param displayName displayName or {@code null} for none
   */
  public CheckSet setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Images exempted from this `CheckSet`. If any of the patterns match the image being
   * evaluated, no checks in the `CheckSet` will be evaluated.
   * @return value or {@code null} for none
   */
  public ImageAllowlist getImageAllowlist() {
    return imageAllowlist;
  }

  /**
   * Optional. Images exempted from this `CheckSet`. If any of the patterns match the image being
   * evaluated, no checks in the `CheckSet` will be evaluated.
   * @param imageAllowlist imageAllowlist or {@code null} for none
   */
  public CheckSet setImageAllowlist(ImageAllowlist imageAllowlist) {
    this.imageAllowlist = imageAllowlist;
    return this;
  }

  /**
   * Optional. The scope to which this `CheckSet` applies. If unset or an empty string (the
   * default), applies to all namespaces and service accounts. See the `Scope` message documentation
   * for details on scoping rules.
   * @return value or {@code null} for none
   */
  public Scope getScope() {
    return scope;
  }

  /**
   * Optional. The scope to which this `CheckSet` applies. If unset or an empty string (the
   * default), applies to all namespaces and service accounts. See the `Scope` message documentation
   * for details on scoping rules.
   * @param scope scope or {@code null} for none
   */
  public CheckSet setScope(Scope scope) {
    this.scope = scope;
    return this;
  }

  @Override
  public CheckSet set(String fieldName, Object value) {
    return (CheckSet) super.set(fieldName, value);
  }

  @Override
  public CheckSet clone() {
    return (CheckSet) super.clone();
  }

}
