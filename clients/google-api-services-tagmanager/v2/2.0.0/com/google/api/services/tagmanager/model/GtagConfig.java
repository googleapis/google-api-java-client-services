/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.tagmanager.model;

/**
 * Represents a Google tag configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Tag Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GtagConfig extends com.google.api.client.json.GenericJson {

  /**
   * Google tag account ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String accountId;

  /**
   * Google tag container ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String containerId;

  /**
   * The fingerprint of the Google tag config as computed at storage time. This value is recomputed
   * whenever the config is modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fingerprint;

  /**
   * The ID uniquely identifies the Google tag config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gtagConfigId;

  /**
   * The Google tag config's parameters. @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Parameter> parameter;

  /**
   * Google tag config's API relative path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * Auto generated link to the tag manager UI
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tagManagerUrl;

  /**
   * Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create
   * @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workspaceId;

  /**
   * Google tag account ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getAccountId() {
    return accountId;
  }

  /**
   * Google tag account ID.
   * @param accountId accountId or {@code null} for none
   */
  public GtagConfig setAccountId(java.lang.String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Google tag container ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getContainerId() {
    return containerId;
  }

  /**
   * Google tag container ID.
   * @param containerId containerId or {@code null} for none
   */
  public GtagConfig setContainerId(java.lang.String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * The fingerprint of the Google tag config as computed at storage time. This value is recomputed
   * whenever the config is modified.
   * @return value or {@code null} for none
   */
  public java.lang.String getFingerprint() {
    return fingerprint;
  }

  /**
   * The fingerprint of the Google tag config as computed at storage time. This value is recomputed
   * whenever the config is modified.
   * @param fingerprint fingerprint or {@code null} for none
   */
  public GtagConfig setFingerprint(java.lang.String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The ID uniquely identifies the Google tag config.
   * @return value or {@code null} for none
   */
  public java.lang.String getGtagConfigId() {
    return gtagConfigId;
  }

  /**
   * The ID uniquely identifies the Google tag config.
   * @param gtagConfigId gtagConfigId or {@code null} for none
   */
  public GtagConfig setGtagConfigId(java.lang.String gtagConfigId) {
    this.gtagConfigId = gtagConfigId;
    return this;
  }

  /**
   * The Google tag config's parameters. @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * @return value or {@code null} for none
   */
  public java.util.List<Parameter> getParameter() {
    return parameter;
  }

  /**
   * The Google tag config's parameters. @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * @param parameter parameter or {@code null} for none
   */
  public GtagConfig setParameter(java.util.List<Parameter> parameter) {
    this.parameter = parameter;
    return this;
  }

  /**
   * Google tag config's API relative path.
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * Google tag config's API relative path.
   * @param path path or {@code null} for none
   */
  public GtagConfig setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return value or {@code null} for none
   */
  public java.lang.String getTagManagerUrl() {
    return tagManagerUrl;
  }

  /**
   * Auto generated link to the tag manager UI
   * @param tagManagerUrl tagManagerUrl or {@code null} for none
   */
  public GtagConfig setTagManagerUrl(java.lang.String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create
   * @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create
   * @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.create @mutable
   * tagmanager.accounts.containers.workspaces.gtag_config.update
   * @param type type or {@code null} for none
   */
  public GtagConfig setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkspaceId() {
    return workspaceId;
  }

  /**
   * Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
   * @param workspaceId workspaceId or {@code null} for none
   */
  public GtagConfig setWorkspaceId(java.lang.String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  @Override
  public GtagConfig set(String fieldName, Object value) {
    return (GtagConfig) super.set(fieldName, value);
  }

  @Override
  public GtagConfig clone() {
    return (GtagConfig) super.clone();
  }

}
