/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.sasportal.v1alpha1.model;

/**
 * Information about the device installation parameters.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the SAS Portal API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SasPortalInstallationParams extends com.google.api.client.json.GenericJson {

  /**
   * Boresight direction of the horizontal plane of the antenna in degrees with respect to true
   * north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A
   * value of 0 degrees means true north; a value of 90 degrees means east. This parameter is
   * optional for Category A devices and conditional for Category B devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer antennaAzimuth;

  /**
   * 3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an
   * unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for
   * Category A devices and conditional for Category B devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer antennaBeamwidth;

  /**
   * Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a
   * negative value means the antenna is tilted up (above horizontal). This parameter is optional
   * for Category A devices and conditional for Category B devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer antennaDowntilt;

  /**
   * Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi)
   * inclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer antennaGain;

  /**
   * If an external antenna is used, the antenna model is optionally provided in this field. The
   * string has a maximum length of 128 octets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String antennaModel;

  /**
   * If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean cpeCbsdIndication;

  /**
   * This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value
   * between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum
   * allowable EIRP in units of dBm/10MHz for device category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer eirpCapability;

  /**
   * Device antenna height in meters. When the `heightType` parameter value is "AGL", the antenna
   * height should be given relative to ground level. When the `heightType` parameter value is
   * "AMSL", it is given with respect to WGS84 datum.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double height;

  /**
   * Specifies how the height is measured.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String heightType;

  /**
   * A positive number in meters to indicate accuracy of the device antenna horizontal location.
   * This optional parameter should only be present if its value is less than the FCC requirement of
   * 50 meters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double horizontalAccuracy;

  /**
   * Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean indoorDeployment;

  /**
   * Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -90.000000 to +90.000000. Positive values represent latitudes north of the
   * equator; negative values south of the equator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latitude;

  /**
   * Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -180.000000 to +180.000000. Positive values represent longitudes east of the
   * prime meridian; negative values west of the prime meridian.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double longitude;

  /**
   * A positive number in meters to indicate accuracy of the device antenna vertical location. This
   * optional parameter should only be present if its value is less than the FCC requirement of 3
   * meters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double verticalAccuracy;

  /**
   * Boresight direction of the horizontal plane of the antenna in degrees with respect to true
   * north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A
   * value of 0 degrees means true north; a value of 90 degrees means east. This parameter is
   * optional for Category A devices and conditional for Category B devices.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAntennaAzimuth() {
    return antennaAzimuth;
  }

  /**
   * Boresight direction of the horizontal plane of the antenna in degrees with respect to true
   * north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A
   * value of 0 degrees means true north; a value of 90 degrees means east. This parameter is
   * optional for Category A devices and conditional for Category B devices.
   * @param antennaAzimuth antennaAzimuth or {@code null} for none
   */
  public SasPortalInstallationParams setAntennaAzimuth(java.lang.Integer antennaAzimuth) {
    this.antennaAzimuth = antennaAzimuth;
    return this;
  }

  /**
   * 3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an
   * unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for
   * Category A devices and conditional for Category B devices.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAntennaBeamwidth() {
    return antennaBeamwidth;
  }

  /**
   * 3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an
   * unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for
   * Category A devices and conditional for Category B devices.
   * @param antennaBeamwidth antennaBeamwidth or {@code null} for none
   */
  public SasPortalInstallationParams setAntennaBeamwidth(java.lang.Integer antennaBeamwidth) {
    this.antennaBeamwidth = antennaBeamwidth;
    return this;
  }

  /**
   * Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a
   * negative value means the antenna is tilted up (above horizontal). This parameter is optional
   * for Category A devices and conditional for Category B devices.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAntennaDowntilt() {
    return antennaDowntilt;
  }

  /**
   * Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a
   * negative value means the antenna is tilted up (above horizontal). This parameter is optional
   * for Category A devices and conditional for Category B devices.
   * @param antennaDowntilt antennaDowntilt or {@code null} for none
   */
  public SasPortalInstallationParams setAntennaDowntilt(java.lang.Integer antennaDowntilt) {
    this.antennaDowntilt = antennaDowntilt;
    return this;
  }

  /**
   * Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi)
   * inclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAntennaGain() {
    return antennaGain;
  }

  /**
   * Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi)
   * inclusive.
   * @param antennaGain antennaGain or {@code null} for none
   */
  public SasPortalInstallationParams setAntennaGain(java.lang.Integer antennaGain) {
    this.antennaGain = antennaGain;
    return this;
  }

  /**
   * If an external antenna is used, the antenna model is optionally provided in this field. The
   * string has a maximum length of 128 octets.
   * @return value or {@code null} for none
   */
  public java.lang.String getAntennaModel() {
    return antennaModel;
  }

  /**
   * If an external antenna is used, the antenna model is optionally provided in this field. The
   * string has a maximum length of 128 octets.
   * @param antennaModel antennaModel or {@code null} for none
   */
  public SasPortalInstallationParams setAntennaModel(java.lang.String antennaModel) {
    this.antennaModel = antennaModel;
    return this;
  }

  /**
   * If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCpeCbsdIndication() {
    return cpeCbsdIndication;
  }

  /**
   * If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.
   * @param cpeCbsdIndication cpeCbsdIndication or {@code null} for none
   */
  public SasPortalInstallationParams setCpeCbsdIndication(java.lang.Boolean cpeCbsdIndication) {
    this.cpeCbsdIndication = cpeCbsdIndication;
    return this;
  }

  /**
   * This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value
   * between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum
   * allowable EIRP in units of dBm/10MHz for device category.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEirpCapability() {
    return eirpCapability;
  }

  /**
   * This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value
   * between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum
   * allowable EIRP in units of dBm/10MHz for device category.
   * @param eirpCapability eirpCapability or {@code null} for none
   */
  public SasPortalInstallationParams setEirpCapability(java.lang.Integer eirpCapability) {
    this.eirpCapability = eirpCapability;
    return this;
  }

  /**
   * Device antenna height in meters. When the `heightType` parameter value is "AGL", the antenna
   * height should be given relative to ground level. When the `heightType` parameter value is
   * "AMSL", it is given with respect to WGS84 datum.
   * @return value or {@code null} for none
   */
  public java.lang.Double getHeight() {
    return height;
  }

  /**
   * Device antenna height in meters. When the `heightType` parameter value is "AGL", the antenna
   * height should be given relative to ground level. When the `heightType` parameter value is
   * "AMSL", it is given with respect to WGS84 datum.
   * @param height height or {@code null} for none
   */
  public SasPortalInstallationParams setHeight(java.lang.Double height) {
    this.height = height;
    return this;
  }

  /**
   * Specifies how the height is measured.
   * @return value or {@code null} for none
   */
  public java.lang.String getHeightType() {
    return heightType;
  }

  /**
   * Specifies how the height is measured.
   * @param heightType heightType or {@code null} for none
   */
  public SasPortalInstallationParams setHeightType(java.lang.String heightType) {
    this.heightType = heightType;
    return this;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna horizontal location.
   * This optional parameter should only be present if its value is less than the FCC requirement of
   * 50 meters.
   * @return value or {@code null} for none
   */
  public java.lang.Double getHorizontalAccuracy() {
    return horizontalAccuracy;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna horizontal location.
   * This optional parameter should only be present if its value is less than the FCC requirement of
   * 50 meters.
   * @param horizontalAccuracy horizontalAccuracy or {@code null} for none
   */
  public SasPortalInstallationParams setHorizontalAccuracy(java.lang.Double horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
    return this;
  }

  /**
   * Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIndoorDeployment() {
    return indoorDeployment;
  }

  /**
   * Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.
   * @param indoorDeployment indoorDeployment or {@code null} for none
   */
  public SasPortalInstallationParams setIndoorDeployment(java.lang.Boolean indoorDeployment) {
    this.indoorDeployment = indoorDeployment;
    return this;
  }

  /**
   * Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -90.000000 to +90.000000. Positive values represent latitudes north of the
   * equator; negative values south of the equator.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -90.000000 to +90.000000. Positive values represent latitudes north of the
   * equator; negative values south of the equator.
   * @param latitude latitude or {@code null} for none
   */
  public SasPortalInstallationParams setLatitude(java.lang.Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -180.000000 to +180.000000. Positive values represent longitudes east of the
   * prime meridian; negative values west of the prime meridian.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed
   * range is from -180.000000 to +180.000000. Positive values represent longitudes east of the
   * prime meridian; negative values west of the prime meridian.
   * @param longitude longitude or {@code null} for none
   */
  public SasPortalInstallationParams setLongitude(java.lang.Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna vertical location. This
   * optional parameter should only be present if its value is less than the FCC requirement of 3
   * meters.
   * @return value or {@code null} for none
   */
  public java.lang.Double getVerticalAccuracy() {
    return verticalAccuracy;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna vertical location. This
   * optional parameter should only be present if its value is less than the FCC requirement of 3
   * meters.
   * @param verticalAccuracy verticalAccuracy or {@code null} for none
   */
  public SasPortalInstallationParams setVerticalAccuracy(java.lang.Double verticalAccuracy) {
    this.verticalAccuracy = verticalAccuracy;
    return this;
  }

  @Override
  public SasPortalInstallationParams set(String fieldName, Object value) {
    return (SasPortalInstallationParams) super.set(fieldName, value);
  }

  @Override
  public SasPortalInstallationParams clone() {
    return (SasPortalInstallationParams) super.clone();
  }

}
