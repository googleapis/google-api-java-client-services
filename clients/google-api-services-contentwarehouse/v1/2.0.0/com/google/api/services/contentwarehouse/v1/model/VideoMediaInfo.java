/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Feel free to ignore this lint warning if only the trivia (e.g., comments) is is changed.
 * LINT.IfChange
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoMediaInfo extends com.google.api.client.json.GenericJson {

  /**
   * Each entry corresponds to one audio stream in the original media file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VideoAudioStream> audioStream;

  static {
    // hack to force ProGuard to consider VideoAudioStream used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(VideoAudioStream.class);
  }

  /**
   * Container type of the file, e.g. FLV, H264, MP3. Uses the numeric value corresponding to the
   * ContainerId enum objects, in order to avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:ContainerId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer containerId;

  /**
   * Media file size in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long fileSize;

  /**
   * This is a high-level description of the media. It does not contain PII.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoMediaOverview overview;

  /**
   * Each entry corresponds to one video stream (usually just one) in the original media file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VideoVideoStream> videoStream;

  /**
   * Each entry corresponds to one audio stream in the original media file.
   * @return value or {@code null} for none
   */
  public java.util.List<VideoAudioStream> getAudioStream() {
    return audioStream;
  }

  /**
   * Each entry corresponds to one audio stream in the original media file.
   * @param audioStream audioStream or {@code null} for none
   */
  public VideoMediaInfo setAudioStream(java.util.List<VideoAudioStream> audioStream) {
    this.audioStream = audioStream;
    return this;
  }

  /**
   * Container type of the file, e.g. FLV, H264, MP3. Uses the numeric value corresponding to the
   * ContainerId enum objects, in order to avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:ContainerId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContainerId() {
    return containerId;
  }

  /**
   * Container type of the file, e.g. FLV, H264, MP3. Uses the numeric value corresponding to the
   * ContainerId enum objects, in order to avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:ContainerId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @param containerId containerId or {@code null} for none
   */
  public VideoMediaInfo setContainerId(java.lang.Integer containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Media file size in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFileSize() {
    return fileSize;
  }

  /**
   * Media file size in bytes.
   * @param fileSize fileSize or {@code null} for none
   */
  public VideoMediaInfo setFileSize(java.lang.Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * This is a high-level description of the media. It does not contain PII.
   * @return value or {@code null} for none
   */
  public VideoMediaOverview getOverview() {
    return overview;
  }

  /**
   * This is a high-level description of the media. It does not contain PII.
   * @param overview overview or {@code null} for none
   */
  public VideoMediaInfo setOverview(VideoMediaOverview overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Each entry corresponds to one video stream (usually just one) in the original media file.
   * @return value or {@code null} for none
   */
  public java.util.List<VideoVideoStream> getVideoStream() {
    return videoStream;
  }

  /**
   * Each entry corresponds to one video stream (usually just one) in the original media file.
   * @param videoStream videoStream or {@code null} for none
   */
  public VideoMediaInfo setVideoStream(java.util.List<VideoVideoStream> videoStream) {
    this.videoStream = videoStream;
    return this;
  }

  @Override
  public VideoMediaInfo set(String fieldName, Object value) {
    return (VideoMediaInfo) super.set(fieldName, value);
  }

  @Override
  public VideoMediaInfo clone() {
    return (VideoMediaInfo) super.clone();
  }

}
