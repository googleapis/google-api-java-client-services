/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Information about the state of the device. This contains any state that Assistant may need to
 * know about in order to fulfill requests, for example which timers and alarms are set. Next ID: 9
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAssistantAccessoryV1DeviceState extends com.google.api.client.json.GenericJson {

  /**
   * *Optional* Information about on-device alarms. For devices that support alarms, all on-device
   * alarms must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantEmbeddedV1Alarms alarmState;

  /**
   * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams
   * message in serialized binary proto format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contextParams;

  /**
   * A timestamp of the current device time when the request was made. This field is required if
   * your device supports alarms or timers. This ensures that requests are fulfilled relative to the
   * current device time and regardless of any clock skew between the client and the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deviceTime;

  /**
   * The time zone where the device is currently located. This helps the Assistant answer time-
   * related queries relative to the device's time zone. Generally speaking, mobile devices that
   * support alarms or timers should supply device_time_zone. This field is required if your device
   * supports alarms or timers and the device's location cannot reliably be determined. (See the
   * comment above google.assistant.embedded.v1.DeviceLocation for a description of how the device's
   * location is determined.) If the time zone cannot be determined, some queries for creating or
   * modifying timers or alarms may fail with a generic error such as, "Sorry, I don't know how to
   * help with that."
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeTimeZone deviceTimeZone;

  /**
   * Indicate whether do not disturb mode is turned on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean doNotDisturb;

  /**
   * Information about on-device fitness activities. For devices that support fitness activities,
   * all on-device fitness activities must be sent up with the DeviceState in order for Assistant
   * Server to be able to perform operations on them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantEmbeddedV1FitnessActivities fitnessActivitiesState;

  /**
   * *Optional* Information about on-device timers. For devices that support timers, all on-device
   * timers must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantEmbeddedV1Timers timerState;

  /**
   * *Optional* Information about on-device alarms. For devices that support alarms, all on-device
   * alarms must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * @return value or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarms getAlarmState() {
    return alarmState;
  }

  /**
   * *Optional* Information about on-device alarms. For devices that support alarms, all on-device
   * alarms must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * @param alarmState alarmState or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setAlarmState(GoogleAssistantEmbeddedV1Alarms alarmState) {
    this.alarmState = alarmState;
    return this;
  }

  /**
   * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams
   * message in serialized binary proto format.
   * @see #decodeContextParams()
   * @return value or {@code null} for none
   */
  public java.lang.String getContextParams() {
    return contextParams;
  }

  /**
   * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams
   * message in serialized binary proto format.
   * @see #getContextParams()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeContextParams() {
    return com.google.api.client.util.Base64.decodeBase64(contextParams);
  }

  /**
   * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams
   * message in serialized binary proto format.
   * @see #encodeContextParams()
   * @param contextParams contextParams or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setContextParams(java.lang.String contextParams) {
    this.contextParams = contextParams;
    return this;
  }

  /**
   * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams
   * message in serialized binary proto format.
   * @see #setContextParams()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleAssistantAccessoryV1DeviceState encodeContextParams(byte[] contextParams) {
    this.contextParams = com.google.api.client.util.Base64.encodeBase64URLSafeString(contextParams);
    return this;
  }

  /**
   * A timestamp of the current device time when the request was made. This field is required if
   * your device supports alarms or timers. This ensures that requests are fulfilled relative to the
   * current device time and regardless of any clock skew between the client and the server.
   * @return value or {@code null} for none
   */
  public String getDeviceTime() {
    return deviceTime;
  }

  /**
   * A timestamp of the current device time when the request was made. This field is required if
   * your device supports alarms or timers. This ensures that requests are fulfilled relative to the
   * current device time and regardless of any clock skew between the client and the server.
   * @param deviceTime deviceTime or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setDeviceTime(String deviceTime) {
    this.deviceTime = deviceTime;
    return this;
  }

  /**
   * The time zone where the device is currently located. This helps the Assistant answer time-
   * related queries relative to the device's time zone. Generally speaking, mobile devices that
   * support alarms or timers should supply device_time_zone. This field is required if your device
   * supports alarms or timers and the device's location cannot reliably be determined. (See the
   * comment above google.assistant.embedded.v1.DeviceLocation for a description of how the device's
   * location is determined.) If the time zone cannot be determined, some queries for creating or
   * modifying timers or alarms may fail with a generic error such as, "Sorry, I don't know how to
   * help with that."
   * @return value or {@code null} for none
   */
  public GoogleTypeTimeZone getDeviceTimeZone() {
    return deviceTimeZone;
  }

  /**
   * The time zone where the device is currently located. This helps the Assistant answer time-
   * related queries relative to the device's time zone. Generally speaking, mobile devices that
   * support alarms or timers should supply device_time_zone. This field is required if your device
   * supports alarms or timers and the device's location cannot reliably be determined. (See the
   * comment above google.assistant.embedded.v1.DeviceLocation for a description of how the device's
   * location is determined.) If the time zone cannot be determined, some queries for creating or
   * modifying timers or alarms may fail with a generic error such as, "Sorry, I don't know how to
   * help with that."
   * @param deviceTimeZone deviceTimeZone or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setDeviceTimeZone(GoogleTypeTimeZone deviceTimeZone) {
    this.deviceTimeZone = deviceTimeZone;
    return this;
  }

  /**
   * Indicate whether do not disturb mode is turned on.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDoNotDisturb() {
    return doNotDisturb;
  }

  /**
   * Indicate whether do not disturb mode is turned on.
   * @param doNotDisturb doNotDisturb or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setDoNotDisturb(java.lang.Boolean doNotDisturb) {
    this.doNotDisturb = doNotDisturb;
    return this;
  }

  /**
   * Information about on-device fitness activities. For devices that support fitness activities,
   * all on-device fitness activities must be sent up with the DeviceState in order for Assistant
   * Server to be able to perform operations on them.
   * @return value or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1FitnessActivities getFitnessActivitiesState() {
    return fitnessActivitiesState;
  }

  /**
   * Information about on-device fitness activities. For devices that support fitness activities,
   * all on-device fitness activities must be sent up with the DeviceState in order for Assistant
   * Server to be able to perform operations on them.
   * @param fitnessActivitiesState fitnessActivitiesState or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setFitnessActivitiesState(GoogleAssistantEmbeddedV1FitnessActivities fitnessActivitiesState) {
    this.fitnessActivitiesState = fitnessActivitiesState;
    return this;
  }

  /**
   * *Optional* Information about on-device timers. For devices that support timers, all on-device
   * timers must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * @return value or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timers getTimerState() {
    return timerState;
  }

  /**
   * *Optional* Information about on-device timers. For devices that support timers, all on-device
   * timers must be sent up with the DeviceState in order for Assistant Server to be able to perform
   * operations on them.
   * @param timerState timerState or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState setTimerState(GoogleAssistantEmbeddedV1Timers timerState) {
    this.timerState = timerState;
    return this;
  }

  @Override
  public GoogleAssistantAccessoryV1DeviceState set(String fieldName, Object value) {
    return (GoogleAssistantAccessoryV1DeviceState) super.set(fieldName, value);
  }

  @Override
  public GoogleAssistantAccessoryV1DeviceState clone() {
    return (GoogleAssistantAccessoryV1DeviceState) super.clone();
  }

}
