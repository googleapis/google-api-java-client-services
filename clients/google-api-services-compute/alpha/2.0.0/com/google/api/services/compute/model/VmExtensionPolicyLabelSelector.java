/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * A LabelSelector is applied to a VM only if it matches all the specified labels.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmExtensionPolicyLabelSelector extends com.google.api.client.json.GenericJson {

  /**
   * Optional. A map of key-value pairs representing VM labels. VMs must have all of the labels
   * specified in this map to be selected (logical AND). e.g. If the `inclusion_labels` are
   * {("key1", "value1"), ("key2", "value2")}, the VM labels must contain both ("key1", "value1")
   * and ("key2", "value2") to be selected. If the VM labels are ("key1", "value1") and
   * ("something", "else"), it will not be selected. If the map is empty, it's considered a match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> inclusionLabels;

  /**
   * Optional. A map of key-value pairs representing VM labels. VMs must have all of the labels
   * specified in this map to be selected (logical AND). e.g. If the `inclusion_labels` are
   * {("key1", "value1"), ("key2", "value2")}, the VM labels must contain both ("key1", "value1")
   * and ("key2", "value2") to be selected. If the VM labels are ("key1", "value1") and
   * ("something", "else"), it will not be selected. If the map is empty, it's considered a match.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getInclusionLabels() {
    return inclusionLabels;
  }

  /**
   * Optional. A map of key-value pairs representing VM labels. VMs must have all of the labels
   * specified in this map to be selected (logical AND). e.g. If the `inclusion_labels` are
   * {("key1", "value1"), ("key2", "value2")}, the VM labels must contain both ("key1", "value1")
   * and ("key2", "value2") to be selected. If the VM labels are ("key1", "value1") and
   * ("something", "else"), it will not be selected. If the map is empty, it's considered a match.
   * @param inclusionLabels inclusionLabels or {@code null} for none
   */
  public VmExtensionPolicyLabelSelector setInclusionLabels(java.util.Map<String, java.lang.String> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
    return this;
  }

  @Override
  public VmExtensionPolicyLabelSelector set(String fieldName, Object value) {
    return (VmExtensionPolicyLabelSelector) super.set(fieldName, value);
  }

  @Override
  public VmExtensionPolicyLabelSelector clone() {
    return (VmExtensionPolicyLabelSelector) super.clone();
  }

}
