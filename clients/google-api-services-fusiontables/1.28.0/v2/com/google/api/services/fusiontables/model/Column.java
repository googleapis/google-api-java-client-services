/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.fusiontables.model;

/**
 * Specifies the details of a column in a table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Fusion Tables API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Column extends com.google.api.client.json.GenericJson {

  /**
   * Identifier of the base column. If present, this column is derived from the specified base
   * column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BaseColumn baseColumn;

  /**
   * Identifier for the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer columnId;

  /**
   * JSON schema for interpreting JSON in this column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String columnJsonSchema;

  /**
   * JSON object containing custom column properties.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String columnPropertiesJson;

  /**
   * Column description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Format pattern. Acceptable values are DT_DATE_MEDIUMe.g Dec 24, 2008 DT_DATE_SHORTfor example
   * 12/24/08 DT_DATE_TIME_MEDIUMfor example Dec 24, 2008 8:30:45 PM DT_DATE_TIME_SHORTfor example
   * 12/24/08 8:30 PM DT_DAY_MONTH_2_DIGIT_YEARfor example 24/12/08
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIMEfor example 24/12/08 20:30
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/08 8:30 PM
   * DT_DAY_MONTH_4_DIGIT_YEARfor example 24/12/2008 DT_DAY_MONTH_4_DIGIT_YEAR_TIMEfor example
   * 24/12/2008 20:30 DT_DAY_MONTH_4_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/2008 8:30 PM
   * DT_ISO_YEAR_MONTH_DAYfor example 2008-12-24 DT_ISO_YEAR_MONTH_DAY_TIMEfor example 2008-12-24
   * 20:30:45 DT_MONTH_DAY_4_DIGIT_YEARfor example 12/24/2008 DT_TIME_LONGfor example 8:30:45 PM
   * UTC-6 DT_TIME_MEDIUMfor example 8:30:45 PM DT_TIME_SHORTfor example 8:30 PM DT_YEAR_ONLYfor
   * example 2008 HIGHLIGHT_UNTYPED_CELLSHighlight cell data that does not match the data type
   * NONENo formatting (default) NUMBER_CURRENCYfor example $1234.56 NUMBER_DEFAULTfor example
   * 1,234.56 NUMBER_INTEGERfor example 1235 NUMBER_NO_SEPARATORfor example 1234.56
   * NUMBER_PERCENTfor example 123,456% NUMBER_SCIENTIFICfor example 1E3
   * STRING_EIGHT_LINE_IMAGEDisplays thumbnail images as tall as eight lines of text
   * STRING_FOUR_LINE_IMAGEDisplays thumbnail images as tall as four lines of text
   * STRING_JSON_TEXTAllows editing of text as JSON in UI STRING_JSON_LISTAllows editing of text as
   * a JSON list in UI STRING_LINKTreats cell as a link (must start with http:// or https://)
   * STRING_ONE_LINE_IMAGEDisplays thumbnail images as tall as one line of text
   * STRING_VIDEO_OR_MAPDisplay a video or map thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String formatPattern;

  /**
   * Column graph predicate. Used to map table to graph data model (subject,predicate,object) See
   * W3C Graph-based Data Model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String graphPredicate;

  /**
   * The kind of item this is. For a column, this is always fusiontables#column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Name of the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Type of the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * List of valid values used to validate data and supply a drop-down list of values in the web
   * application.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> validValues;

  /**
   * If true, data entered via the web application is validated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean validateData;

  /**
   * Identifier of the base column. If present, this column is derived from the specified base
   * column.
   * @return value or {@code null} for none
   */
  public BaseColumn getBaseColumn() {
    return baseColumn;
  }

  /**
   * Identifier of the base column. If present, this column is derived from the specified base
   * column.
   * @param baseColumn baseColumn or {@code null} for none
   */
  public Column setBaseColumn(BaseColumn baseColumn) {
    this.baseColumn = baseColumn;
    return this;
  }

  /**
   * Identifier for the column.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColumnId() {
    return columnId;
  }

  /**
   * Identifier for the column.
   * @param columnId columnId or {@code null} for none
   */
  public Column setColumnId(java.lang.Integer columnId) {
    this.columnId = columnId;
    return this;
  }

  /**
   * JSON schema for interpreting JSON in this column.
   * @return value or {@code null} for none
   */
  public java.lang.String getColumnJsonSchema() {
    return columnJsonSchema;
  }

  /**
   * JSON schema for interpreting JSON in this column.
   * @param columnJsonSchema columnJsonSchema or {@code null} for none
   */
  public Column setColumnJsonSchema(java.lang.String columnJsonSchema) {
    this.columnJsonSchema = columnJsonSchema;
    return this;
  }

  /**
   * JSON object containing custom column properties.
   * @return value or {@code null} for none
   */
  public java.lang.String getColumnPropertiesJson() {
    return columnPropertiesJson;
  }

  /**
   * JSON object containing custom column properties.
   * @param columnPropertiesJson columnPropertiesJson or {@code null} for none
   */
  public Column setColumnPropertiesJson(java.lang.String columnPropertiesJson) {
    this.columnPropertiesJson = columnPropertiesJson;
    return this;
  }

  /**
   * Column description.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Column description.
   * @param description description or {@code null} for none
   */
  public Column setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Format pattern. Acceptable values are DT_DATE_MEDIUMe.g Dec 24, 2008 DT_DATE_SHORTfor example
   * 12/24/08 DT_DATE_TIME_MEDIUMfor example Dec 24, 2008 8:30:45 PM DT_DATE_TIME_SHORTfor example
   * 12/24/08 8:30 PM DT_DAY_MONTH_2_DIGIT_YEARfor example 24/12/08
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIMEfor example 24/12/08 20:30
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/08 8:30 PM
   * DT_DAY_MONTH_4_DIGIT_YEARfor example 24/12/2008 DT_DAY_MONTH_4_DIGIT_YEAR_TIMEfor example
   * 24/12/2008 20:30 DT_DAY_MONTH_4_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/2008 8:30 PM
   * DT_ISO_YEAR_MONTH_DAYfor example 2008-12-24 DT_ISO_YEAR_MONTH_DAY_TIMEfor example 2008-12-24
   * 20:30:45 DT_MONTH_DAY_4_DIGIT_YEARfor example 12/24/2008 DT_TIME_LONGfor example 8:30:45 PM
   * UTC-6 DT_TIME_MEDIUMfor example 8:30:45 PM DT_TIME_SHORTfor example 8:30 PM DT_YEAR_ONLYfor
   * example 2008 HIGHLIGHT_UNTYPED_CELLSHighlight cell data that does not match the data type
   * NONENo formatting (default) NUMBER_CURRENCYfor example $1234.56 NUMBER_DEFAULTfor example
   * 1,234.56 NUMBER_INTEGERfor example 1235 NUMBER_NO_SEPARATORfor example 1234.56
   * NUMBER_PERCENTfor example 123,456% NUMBER_SCIENTIFICfor example 1E3
   * STRING_EIGHT_LINE_IMAGEDisplays thumbnail images as tall as eight lines of text
   * STRING_FOUR_LINE_IMAGEDisplays thumbnail images as tall as four lines of text
   * STRING_JSON_TEXTAllows editing of text as JSON in UI STRING_JSON_LISTAllows editing of text as
   * a JSON list in UI STRING_LINKTreats cell as a link (must start with http:// or https://)
   * STRING_ONE_LINE_IMAGEDisplays thumbnail images as tall as one line of text
   * STRING_VIDEO_OR_MAPDisplay a video or map thumbnail
   * @return value or {@code null} for none
   */
  public java.lang.String getFormatPattern() {
    return formatPattern;
  }

  /**
   * Format pattern. Acceptable values are DT_DATE_MEDIUMe.g Dec 24, 2008 DT_DATE_SHORTfor example
   * 12/24/08 DT_DATE_TIME_MEDIUMfor example Dec 24, 2008 8:30:45 PM DT_DATE_TIME_SHORTfor example
   * 12/24/08 8:30 PM DT_DAY_MONTH_2_DIGIT_YEARfor example 24/12/08
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIMEfor example 24/12/08 20:30
   * DT_DAY_MONTH_2_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/08 8:30 PM
   * DT_DAY_MONTH_4_DIGIT_YEARfor example 24/12/2008 DT_DAY_MONTH_4_DIGIT_YEAR_TIMEfor example
   * 24/12/2008 20:30 DT_DAY_MONTH_4_DIGIT_YEAR_TIME_MERIDIANfor example 24/12/2008 8:30 PM
   * DT_ISO_YEAR_MONTH_DAYfor example 2008-12-24 DT_ISO_YEAR_MONTH_DAY_TIMEfor example 2008-12-24
   * 20:30:45 DT_MONTH_DAY_4_DIGIT_YEARfor example 12/24/2008 DT_TIME_LONGfor example 8:30:45 PM
   * UTC-6 DT_TIME_MEDIUMfor example 8:30:45 PM DT_TIME_SHORTfor example 8:30 PM DT_YEAR_ONLYfor
   * example 2008 HIGHLIGHT_UNTYPED_CELLSHighlight cell data that does not match the data type
   * NONENo formatting (default) NUMBER_CURRENCYfor example $1234.56 NUMBER_DEFAULTfor example
   * 1,234.56 NUMBER_INTEGERfor example 1235 NUMBER_NO_SEPARATORfor example 1234.56
   * NUMBER_PERCENTfor example 123,456% NUMBER_SCIENTIFICfor example 1E3
   * STRING_EIGHT_LINE_IMAGEDisplays thumbnail images as tall as eight lines of text
   * STRING_FOUR_LINE_IMAGEDisplays thumbnail images as tall as four lines of text
   * STRING_JSON_TEXTAllows editing of text as JSON in UI STRING_JSON_LISTAllows editing of text as
   * a JSON list in UI STRING_LINKTreats cell as a link (must start with http:// or https://)
   * STRING_ONE_LINE_IMAGEDisplays thumbnail images as tall as one line of text
   * STRING_VIDEO_OR_MAPDisplay a video or map thumbnail
   * @param formatPattern formatPattern or {@code null} for none
   */
  public Column setFormatPattern(java.lang.String formatPattern) {
    this.formatPattern = formatPattern;
    return this;
  }

  /**
   * Column graph predicate. Used to map table to graph data model (subject,predicate,object) See
   * W3C Graph-based Data Model.
   * @return value or {@code null} for none
   */
  public java.lang.String getGraphPredicate() {
    return graphPredicate;
  }

  /**
   * Column graph predicate. Used to map table to graph data model (subject,predicate,object) See
   * W3C Graph-based Data Model.
   * @param graphPredicate graphPredicate or {@code null} for none
   */
  public Column setGraphPredicate(java.lang.String graphPredicate) {
    this.graphPredicate = graphPredicate;
    return this;
  }

  /**
   * The kind of item this is. For a column, this is always fusiontables#column.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The kind of item this is. For a column, this is always fusiontables#column.
   * @param kind kind or {@code null} for none
   */
  public Column setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Name of the column.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the column.
   * @param name name or {@code null} for none
   */
  public Column setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Type of the column.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of the column.
   * @param type type or {@code null} for none
   */
  public Column setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * List of valid values used to validate data and supply a drop-down list of values in the web
   * application.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getValidValues() {
    return validValues;
  }

  /**
   * List of valid values used to validate data and supply a drop-down list of values in the web
   * application.
   * @param validValues validValues or {@code null} for none
   */
  public Column setValidValues(java.util.List<java.lang.String> validValues) {
    this.validValues = validValues;
    return this;
  }

  /**
   * If true, data entered via the web application is validated.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getValidateData() {
    return validateData;
  }

  /**
   * If true, data entered via the web application is validated.
   * @param validateData validateData or {@code null} for none
   */
  public Column setValidateData(java.lang.Boolean validateData) {
    this.validateData = validateData;
    return this;
  }

  @Override
  public Column set(String fieldName, Object value) {
    return (Column) super.set(fieldName, value);
  }

  @Override
  public Column clone() {
    return (Column) super.clone();
  }

  /**
   * Identifier of the base column. If present, this column is derived from the specified base column.
   */
  public static final class BaseColumn extends com.google.api.client.json.GenericJson {

    /**
     * The id of the column in the base table from which this column is derived.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Integer columnId;

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Integer tableIndex;

    /**
     * The id of the column in the base table from which this column is derived.
     * @return value or {@code null} for none
     */
    public java.lang.Integer getColumnId() {
      return columnId;
    }

    /**
     * The id of the column in the base table from which this column is derived.
     * @param columnId columnId or {@code null} for none
     */
    public BaseColumn setColumnId(java.lang.Integer columnId) {
      this.columnId = columnId;
      return this;
    }

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * @return value or {@code null} for none
     */
    public java.lang.Integer getTableIndex() {
      return tableIndex;
    }

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * @param tableIndex tableIndex or {@code null} for none
     */
    public BaseColumn setTableIndex(java.lang.Integer tableIndex) {
      this.tableIndex = tableIndex;
      return this;
    }

    @Override
    public BaseColumn set(String fieldName, Object value) {
      return (BaseColumn) super.set(fieldName, value);
    }

    @Override
    public BaseColumn clone() {
      return (BaseColumn) super.clone();
    }

  }

}
