/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinessverifications.v1.model;

/**
 * Response message for VoiceOfMerchant.GetVoiceOfMerchantState.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Verifications API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VoiceOfMerchantState extends com.google.api.client.json.GenericJson {

  /**
   * The location fails to comply with our
   * [guidelines](https://support.google.com/business/answer/3038177) and requires additional steps
   * for reinstatement. To fix this issue, consult the [Help Center
   * Article](https://support.google.com/business/answer/4569145).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ComplyWithGuidelines complyWithGuidelines;

  /**
   * Indicates whether the location has the authority (ownership) over the business on Google. If
   * true, another location cannot take over and become the dominant listing on Maps. However, edits
   * will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasBusinessAuthority;

  /**
   * Indicates whether the location is in good standing and has control over the business on Google.
   * Any edits made to the location will propagate to Maps after passing the review phase.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasVoiceOfMerchant;

  /**
   * This location duplicates another location that is in good standing. If you have access to the
   * location in good standing, use that location's id to perform operations. Otherwise, request
   * access from the current owner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResolveOwnershipConflict resolveOwnershipConflict;

  /**
   * Start or continue the verification process.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Verify verify;

  /**
   * Wait to gain Voice of Merchant. The location is under review for quality purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private WaitForVoiceOfMerchant waitForVoiceOfMerchant;

  /**
   * The location fails to comply with our
   * [guidelines](https://support.google.com/business/answer/3038177) and requires additional steps
   * for reinstatement. To fix this issue, consult the [Help Center
   * Article](https://support.google.com/business/answer/4569145).
   * @return value or {@code null} for none
   */
  public ComplyWithGuidelines getComplyWithGuidelines() {
    return complyWithGuidelines;
  }

  /**
   * The location fails to comply with our
   * [guidelines](https://support.google.com/business/answer/3038177) and requires additional steps
   * for reinstatement. To fix this issue, consult the [Help Center
   * Article](https://support.google.com/business/answer/4569145).
   * @param complyWithGuidelines complyWithGuidelines or {@code null} for none
   */
  public VoiceOfMerchantState setComplyWithGuidelines(ComplyWithGuidelines complyWithGuidelines) {
    this.complyWithGuidelines = complyWithGuidelines;
    return this;
  }

  /**
   * Indicates whether the location has the authority (ownership) over the business on Google. If
   * true, another location cannot take over and become the dominant listing on Maps. However, edits
   * will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasBusinessAuthority() {
    return hasBusinessAuthority;
  }

  /**
   * Indicates whether the location has the authority (ownership) over the business on Google. If
   * true, another location cannot take over and become the dominant listing on Maps. However, edits
   * will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).
   * @param hasBusinessAuthority hasBusinessAuthority or {@code null} for none
   */
  public VoiceOfMerchantState setHasBusinessAuthority(java.lang.Boolean hasBusinessAuthority) {
    this.hasBusinessAuthority = hasBusinessAuthority;
    return this;
  }

  /**
   * Indicates whether the location is in good standing and has control over the business on Google.
   * Any edits made to the location will propagate to Maps after passing the review phase.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasVoiceOfMerchant() {
    return hasVoiceOfMerchant;
  }

  /**
   * Indicates whether the location is in good standing and has control over the business on Google.
   * Any edits made to the location will propagate to Maps after passing the review phase.
   * @param hasVoiceOfMerchant hasVoiceOfMerchant or {@code null} for none
   */
  public VoiceOfMerchantState setHasVoiceOfMerchant(java.lang.Boolean hasVoiceOfMerchant) {
    this.hasVoiceOfMerchant = hasVoiceOfMerchant;
    return this;
  }

  /**
   * This location duplicates another location that is in good standing. If you have access to the
   * location in good standing, use that location's id to perform operations. Otherwise, request
   * access from the current owner.
   * @return value or {@code null} for none
   */
  public ResolveOwnershipConflict getResolveOwnershipConflict() {
    return resolveOwnershipConflict;
  }

  /**
   * This location duplicates another location that is in good standing. If you have access to the
   * location in good standing, use that location's id to perform operations. Otherwise, request
   * access from the current owner.
   * @param resolveOwnershipConflict resolveOwnershipConflict or {@code null} for none
   */
  public VoiceOfMerchantState setResolveOwnershipConflict(ResolveOwnershipConflict resolveOwnershipConflict) {
    this.resolveOwnershipConflict = resolveOwnershipConflict;
    return this;
  }

  /**
   * Start or continue the verification process.
   * @return value or {@code null} for none
   */
  public Verify getVerify() {
    return verify;
  }

  /**
   * Start or continue the verification process.
   * @param verify verify or {@code null} for none
   */
  public VoiceOfMerchantState setVerify(Verify verify) {
    this.verify = verify;
    return this;
  }

  /**
   * Wait to gain Voice of Merchant. The location is under review for quality purposes.
   * @return value or {@code null} for none
   */
  public WaitForVoiceOfMerchant getWaitForVoiceOfMerchant() {
    return waitForVoiceOfMerchant;
  }

  /**
   * Wait to gain Voice of Merchant. The location is under review for quality purposes.
   * @param waitForVoiceOfMerchant waitForVoiceOfMerchant or {@code null} for none
   */
  public VoiceOfMerchantState setWaitForVoiceOfMerchant(WaitForVoiceOfMerchant waitForVoiceOfMerchant) {
    this.waitForVoiceOfMerchant = waitForVoiceOfMerchant;
    return this;
  }

  @Override
  public VoiceOfMerchantState set(String fieldName, Object value) {
    return (VoiceOfMerchantState) super.set(fieldName, value);
  }

  @Override
  public VoiceOfMerchantState clone() {
    return (VoiceOfMerchantState) super.clone();
  }

}
