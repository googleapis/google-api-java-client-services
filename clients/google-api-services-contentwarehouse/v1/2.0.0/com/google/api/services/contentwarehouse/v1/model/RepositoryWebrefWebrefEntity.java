/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * All information about a single entity available to WebRef. Next available tag: 7
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefWebrefEntity extends com.google.api.client.json.GenericJson {

  /**
   * Information about links (e.g. implications) between the annotated entities.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefWebrefEntityRelationship> annotatedRelationship;

  /**
   * All annotations of this entity on the given document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefEntityAnnotations annotations;

  /**
   * Information about the collections of this entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefEntityCollections collections;

  /**
   * Metadata and raw signals used by the annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefEntityJoin entityJoin;

  /**
   * An identifier (usually a MID) for the entity. Consider using GetWebrefEntityMid() in the
   * adjacent webref-entities-util.h to read this.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefEntityId id;

  /**
   * MRF equivalent representations of this entity as a compound, one for each unique MRF
   * representation. Populated for compounds. Each MRF expression contains a minimum FunctionCall
   * structure wrapped in a nameless Argument without signals and range data. This is not meant to
   * be directly usable as MRF, use QueryJoinToMeaningStructConverter to expand it into a usable
   * form. References to entities are made as component_reference ArgumentValue. Each compound
   * Mention of this entity (not all of its mentions need be compounds, some may be plain entity
   * mentions) have one or more compound_value fields claiming these MRF expressions via their
   * mrf_index. The compound_value has nested components, one for each unique
   * component_reference.index in the MRF expression. The processing expectation is that each
   * ArgumentValue which has a component_reference has its contents discarded and replaced with the
   * MRF for the target entity and mention named by the compound_value.component. If the target is
   * not a compound, the ArgumentValue becomes a simple mid value and the signals are taken from the
   * entity and the mention. If the target is a compound itself, the expansion continues
   * recursively. If the target is a compound with multiple MRFs, a cartesian product of recursive
   * expansions may need to be produced. Along with the component_reference we also emit an example
   * value, but this is purely for human consumption so it's easier to understand what the full
   * compound is like. The processing expectation remains that the ArgumentValue containing a
   * component_reference is completely discarded and rebuilt with the reference target value. If the
   * target has more than one MRF expression, it's not specified which one will be used as an
   * example, except that the choice is guaranteed to be deterministic from run to run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<KnowledgeAnswersIntentQueryArgument> mrf;

  static {
    // hack to force ProGuard to consider KnowledgeAnswersIntentQueryArgument used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(KnowledgeAnswersIntentQueryArgument.class);
  }

  /**
   * Information about links (e.g. implications) between the annotated entities.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefWebrefEntityRelationship> getAnnotatedRelationship() {
    return annotatedRelationship;
  }

  /**
   * Information about links (e.g. implications) between the annotated entities.
   * @param annotatedRelationship annotatedRelationship or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setAnnotatedRelationship(java.util.List<RepositoryWebrefWebrefEntityRelationship> annotatedRelationship) {
    this.annotatedRelationship = annotatedRelationship;
    return this;
  }

  /**
   * All annotations of this entity on the given document.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefEntityAnnotations getAnnotations() {
    return annotations;
  }

  /**
   * All annotations of this entity on the given document.
   * @param annotations annotations or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setAnnotations(RepositoryWebrefEntityAnnotations annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Information about the collections of this entity.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefEntityCollections getCollections() {
    return collections;
  }

  /**
   * Information about the collections of this entity.
   * @param collections collections or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setCollections(RepositoryWebrefWebrefEntityCollections collections) {
    this.collections = collections;
    return this;
  }

  /**
   * Metadata and raw signals used by the annotator.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefEntityJoin getEntityJoin() {
    return entityJoin;
  }

  /**
   * Metadata and raw signals used by the annotator.
   * @param entityJoin entityJoin or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setEntityJoin(RepositoryWebrefEntityJoin entityJoin) {
    this.entityJoin = entityJoin;
    return this;
  }

  /**
   * An identifier (usually a MID) for the entity. Consider using GetWebrefEntityMid() in the
   * adjacent webref-entities-util.h to read this.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefEntityId getId() {
    return id;
  }

  /**
   * An identifier (usually a MID) for the entity. Consider using GetWebrefEntityMid() in the
   * adjacent webref-entities-util.h to read this.
   * @param id id or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setId(RepositoryWebrefWebrefEntityId id) {
    this.id = id;
    return this;
  }

  /**
   * MRF equivalent representations of this entity as a compound, one for each unique MRF
   * representation. Populated for compounds. Each MRF expression contains a minimum FunctionCall
   * structure wrapped in a nameless Argument without signals and range data. This is not meant to
   * be directly usable as MRF, use QueryJoinToMeaningStructConverter to expand it into a usable
   * form. References to entities are made as component_reference ArgumentValue. Each compound
   * Mention of this entity (not all of its mentions need be compounds, some may be plain entity
   * mentions) have one or more compound_value fields claiming these MRF expressions via their
   * mrf_index. The compound_value has nested components, one for each unique
   * component_reference.index in the MRF expression. The processing expectation is that each
   * ArgumentValue which has a component_reference has its contents discarded and replaced with the
   * MRF for the target entity and mention named by the compound_value.component. If the target is
   * not a compound, the ArgumentValue becomes a simple mid value and the signals are taken from the
   * entity and the mention. If the target is a compound itself, the expansion continues
   * recursively. If the target is a compound with multiple MRFs, a cartesian product of recursive
   * expansions may need to be produced. Along with the component_reference we also emit an example
   * value, but this is purely for human consumption so it's easier to understand what the full
   * compound is like. The processing expectation remains that the ArgumentValue containing a
   * component_reference is completely discarded and rebuilt with the reference target value. If the
   * target has more than one MRF expression, it's not specified which one will be used as an
   * example, except that the choice is guaranteed to be deterministic from run to run.
   * @return value or {@code null} for none
   */
  public java.util.List<KnowledgeAnswersIntentQueryArgument> getMrf() {
    return mrf;
  }

  /**
   * MRF equivalent representations of this entity as a compound, one for each unique MRF
   * representation. Populated for compounds. Each MRF expression contains a minimum FunctionCall
   * structure wrapped in a nameless Argument without signals and range data. This is not meant to
   * be directly usable as MRF, use QueryJoinToMeaningStructConverter to expand it into a usable
   * form. References to entities are made as component_reference ArgumentValue. Each compound
   * Mention of this entity (not all of its mentions need be compounds, some may be plain entity
   * mentions) have one or more compound_value fields claiming these MRF expressions via their
   * mrf_index. The compound_value has nested components, one for each unique
   * component_reference.index in the MRF expression. The processing expectation is that each
   * ArgumentValue which has a component_reference has its contents discarded and replaced with the
   * MRF for the target entity and mention named by the compound_value.component. If the target is
   * not a compound, the ArgumentValue becomes a simple mid value and the signals are taken from the
   * entity and the mention. If the target is a compound itself, the expansion continues
   * recursively. If the target is a compound with multiple MRFs, a cartesian product of recursive
   * expansions may need to be produced. Along with the component_reference we also emit an example
   * value, but this is purely for human consumption so it's easier to understand what the full
   * compound is like. The processing expectation remains that the ArgumentValue containing a
   * component_reference is completely discarded and rebuilt with the reference target value. If the
   * target has more than one MRF expression, it's not specified which one will be used as an
   * example, except that the choice is guaranteed to be deterministic from run to run.
   * @param mrf mrf or {@code null} for none
   */
  public RepositoryWebrefWebrefEntity setMrf(java.util.List<KnowledgeAnswersIntentQueryArgument> mrf) {
    this.mrf = mrf;
    return this;
  }

  @Override
  public RepositoryWebrefWebrefEntity set(String fieldName, Object value) {
    return (RepositoryWebrefWebrefEntity) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefWebrefEntity clone() {
    return (RepositoryWebrefWebrefEntity) super.clone();
  }

}
