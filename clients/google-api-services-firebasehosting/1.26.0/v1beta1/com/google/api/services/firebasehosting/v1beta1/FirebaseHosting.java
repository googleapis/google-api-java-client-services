/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1;

/**
 * Service definition for FirebaseHosting (v1beta1).
 *
 * <p>
 * The Firebase Hosting REST API enables programmatic and customizable deployments to your Firebase-hosted sites. Use this REST API to deploy new or updated hosting configurations and content files.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/hosting/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseHostingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseHosting extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.26.0 of the Firebase Hosting API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebasehosting.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseHosting(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseHosting(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Sites collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
   *   {@code FirebaseHosting.Sites.List request = firebasehosting.sites().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Sites sites() {
    return new Sites();
  }

  /**
   * The "sites" collection of methods.
   */
  public class Sites {

    /**
     * Gets the Hosting metadata for a specific site.
     *
     * Create a request for the method "sites.getConfig".
     *
     * This request holds the parameters needed by the firebasehosting server.  After setting any
     * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
     *
     * @param name Required. The site for which to get the SiteConfig, in the format:
    sites/site-name/config
     * @return the request
     */
    public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
      GetConfig result = new GetConfig(name);
      initialize(result);
      return result;
    }

    public class GetConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^sites/[^/]+/config$");

      /**
       * Gets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.getConfig".
       *
       * This request holds the parameters needed by the the firebasehosting server.  After setting any
       * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The site for which to get the SiteConfig, in the format:
    sites/site-name/config
       * @since 1.13
       */
      protected GetConfig(java.lang.String name) {
        super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetConfig set$Xgafv(java.lang.String $Xgafv) {
        return (GetConfig) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetConfig setAccessToken(java.lang.String accessToken) {
        return (GetConfig) super.setAccessToken(accessToken);
      }

      @Override
      public GetConfig setAlt(java.lang.String alt) {
        return (GetConfig) super.setAlt(alt);
      }

      @Override
      public GetConfig setCallback(java.lang.String callback) {
        return (GetConfig) super.setCallback(callback);
      }

      @Override
      public GetConfig setFields(java.lang.String fields) {
        return (GetConfig) super.setFields(fields);
      }

      @Override
      public GetConfig setKey(java.lang.String key) {
        return (GetConfig) super.setKey(key);
      }

      @Override
      public GetConfig setOauthToken(java.lang.String oauthToken) {
        return (GetConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetConfig setQuotaUser(java.lang.String quotaUser) {
        return (GetConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetConfig setUploadType(java.lang.String uploadType) {
        return (GetConfig) super.setUploadType(uploadType);
      }

      @Override
      public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetConfig) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The site for which to get the SiteConfig, in the format: sites/site-name/config
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The site for which to get the SiteConfig, in the format: sites/site-name/config
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The site for which to get the SiteConfig, in the format: sites/site-name/config
       */
      public GetConfig setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetConfig set(String parameterName, Object value) {
        return (GetConfig) super.set(parameterName, value);
      }
    }
    /**
     * Sets the Hosting metadata for a specific site.
     *
     * Create a request for the method "sites.updateConfig".
     *
     * This request holds the parameters needed by the firebasehosting server.  After setting any
     * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
     * operation.
     *
     * @param name Required. The site for which to update the SiteConfig, in the format:
    sites/site-name/config
     * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
     * @return the request
     */
    public UpdateConfig updateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) throws java.io.IOException {
      UpdateConfig result = new UpdateConfig(name, content);
      initialize(result);
      return result;
    }

    public class UpdateConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^sites/[^/]+/config$");

      /**
       * Sets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.updateConfig".
       *
       * This request holds the parameters needed by the the firebasehosting server.  After setting any
       * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdateConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The site for which to update the SiteConfig, in the format:
    sites/site-name/config
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
       * @since 1.13
       */
      protected UpdateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) {
        super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
      }

      @Override
      public UpdateConfig set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateConfig) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateConfig setAccessToken(java.lang.String accessToken) {
        return (UpdateConfig) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateConfig setAlt(java.lang.String alt) {
        return (UpdateConfig) super.setAlt(alt);
      }

      @Override
      public UpdateConfig setCallback(java.lang.String callback) {
        return (UpdateConfig) super.setCallback(callback);
      }

      @Override
      public UpdateConfig setFields(java.lang.String fields) {
        return (UpdateConfig) super.setFields(fields);
      }

      @Override
      public UpdateConfig setKey(java.lang.String key) {
        return (UpdateConfig) super.setKey(key);
      }

      @Override
      public UpdateConfig setOauthToken(java.lang.String oauthToken) {
        return (UpdateConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateConfig setQuotaUser(java.lang.String quotaUser) {
        return (UpdateConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateConfig setUploadType(java.lang.String uploadType) {
        return (UpdateConfig) super.setUploadType(uploadType);
      }

      @Override
      public UpdateConfig setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateConfig) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The site for which to update the SiteConfig, in the format: sites/site-
       * name/config
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The site for which to update the SiteConfig, in the format: sites/site-name/config
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The site for which to update the SiteConfig, in the format: sites/site-
       * name/config
       */
      public UpdateConfig setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
        this.name = name;
        return this;
      }

      /**
       * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
       * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
       * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
       * will be used.
       */
      @com.google.api.client.util.Key
      private String updateMask;

      /** A set of field names from your [site configuration](../sites.SiteConfig) that you want to update. A
     field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a
     default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /**
       * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
       * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
       * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
       * will be used.
       */
      public UpdateConfig setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateConfig set(String parameterName, Object value) {
        return (UpdateConfig) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Domains collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Domains.List request = firebasehosting.domains().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Domains domains() {
      return new Domains();
    }

    /**
     * The "domains" collection of methods.
     */
    public class Domains {

      /**
       * Creates a domain mapping on the specified site.
       *
       * Create a request for the method "domains.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent to create the domain association for, in the format:
      sites/site-name
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+parent}/domains";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a domain mapping on the specified site.
         *
         * Create a request for the method "domains.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent to create the domain association for, in the format:
      sites/site-name
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent to create the domain association for, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent to create the domain association for, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent to create the domain association for, in the format: sites/site-name
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the existing domain mapping on the specified site.
       *
       * Create a request for the method "domains.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain association to delete.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Deletes the existing domain mapping on the specified site.
         *
         * Create a request for the method "domains.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain association to delete.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the domain association to delete. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain association to delete.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the domain association to delete. */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets a domain mapping on the specified site.
       *
       * Create a request for the method "domains.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain configuration to get.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Gets a domain mapping on the specified site.
         *
         * Create a request for the method "domains.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain configuration to get.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the domain configuration to get. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain configuration to get.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the domain configuration to get. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the domains for the specified site.
       *
       * Create a request for the method "domains.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent for which to list domains, in the format:
      sites/site-name
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/domains";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the domains for the specified site.
         *
         * Create a request for the method "domains.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent for which to list domains, in the format:
      sites/site-name
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent for which to list domains, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent for which to list domains, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent for which to list domains, in the format: sites/site-name
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The page size to return. Defaults to 50. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The page size to return. Defaults to 50.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The page size to return. Defaults to 50. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The next_page_token from a previous request, if provided. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The next_page_token from a previous request, if provided.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The next_page_token from a previous request, if provided. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the specified domain mapping, creating the mapping as if it does not exist.
       *
       * Create a request for the method "domains.update".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain association to update or create, if an
      association doesn't already
       *        exist.
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
       * @return the request
       */
      public Update update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
        Update result = new Update(name, content);
        initialize(result);
        return result;
      }

      public class Update extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Updates the specified domain mapping, creating the mapping as if it does not exist.
         *
         * Create a request for the method "domains.update".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         * <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain association to update or create, if an
      association doesn't already
       *        exist.
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @since 1.13
         */
        protected Update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
          super(FirebaseHosting.this, "PUT", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public Update set$Xgafv(java.lang.String $Xgafv) {
          return (Update) super.set$Xgafv($Xgafv);
        }

        @Override
        public Update setAccessToken(java.lang.String accessToken) {
          return (Update) super.setAccessToken(accessToken);
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setCallback(java.lang.String callback) {
          return (Update) super.setCallback(callback);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUploadType(java.lang.String uploadType) {
          return (Update) super.setUploadType(uploadType);
        }

        @Override
        public Update setUploadProtocol(java.lang.String uploadProtocol) {
          return (Update) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the domain association to update or create, if an association
         * doesn't already exist.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain association to update or create, if an association doesn't already
       exist.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the domain association to update or create, if an association
         * doesn't already exist.
         */
        public Update setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Releases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Releases.List request = firebasehosting.releases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Releases releases() {
      return new Releases();
    }

    /**
     * The "releases" collection of methods.
     */
    public class Releases {

      /**
       * Creates a new release which makes the content of the specified version actively display on the
       * site.
       *
       * Create a request for the method "releases.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent The site that the release belongs to, in the format:
      sites/site-name
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

        private static final String REST_PATH = "v1beta1/{+parent}/releases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new release which makes the content of the specified version actively display on the
         * site.
         *
         * Create a request for the method "releases.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The site that the release belongs to, in the format:
      sites/site-name
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The site that the release belongs to, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The site that the release belongs to, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The site that the release belongs to, in the format: sites/site-name
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The unique identifier for a version, in the format: /sites/site-name/versions/versionID
         * The site-name in this version identifier must match the site-name in the `parent`
         * parameter.
         *
         * This query parameter must be empty if the `type` field in the request body is
         * `SITE_DISABLE`.
         */
        @com.google.api.client.util.Key
        private java.lang.String versionName;

        /** The unique identifier for a version, in the format: /sites/site-name/versions/versionID The site-
       name in this version identifier must match the site-name in the `parent` parameter.

       This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`.
         */
        public java.lang.String getVersionName() {
          return versionName;
        }

        /**
         * The unique identifier for a version, in the format: /sites/site-name/versions/versionID
         * The site-name in this version identifier must match the site-name in the `parent`
         * parameter.
         *
         * This query parameter must be empty if the `type` field in the request body is
         * `SITE_DISABLE`.
         */
        public Create setVersionName(java.lang.String versionName) {
          this.versionName = versionName;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Lists the releases that have been created on the specified site.
       *
       * Create a request for the method "releases.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent for which to list files, in the format:
      sites/site-name
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/releases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the releases that have been created on the specified site.
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent for which to list files, in the format:
      sites/site-name
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent for which to list files, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent for which to list files, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent for which to list files, in the format: sites/site-name
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The page size to return. Defaults to 100. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The page size to return. Defaults to 100.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The page size to return. Defaults to 100. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The next_page_token from a previous request, if provided. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The next_page_token from a previous request, if provided.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The next_page_token from a previous request, if provided. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Versions collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Versions.List request = firebasehosting.versions().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Versions versions() {
      return new Versions();
    }

    /**
     * The "versions" collection of methods.
     */
    public class Versions {

      /**
       * Creates a new version for a site.
       *
       * Create a request for the method "versions.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent to create the version for, in the format:
      sites/site-name
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

        private static final String REST_PATH = "v1beta1/{+parent}/versions";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new version for a site.
         *
         * Create a request for the method "versions.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent to create the version for, in the format:
      sites/site-name
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent to create the version for, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent to create the version for, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent to create the version for, in the format: sites/site-name
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The self-reported size of the version. This value is used for a pre-emptive quota check
         * for legacy version uploads.
         */
        @com.google.api.client.util.Key
        private java.lang.Long sizeBytes;

        /** The self-reported size of the version. This value is used for a pre-emptive quota check for legacy
       version uploads.
         */
        public java.lang.Long getSizeBytes() {
          return sizeBytes;
        }

        /**
         * The self-reported size of the version. This value is used for a pre-emptive quota check
         * for legacy version uploads.
         */
        public Create setSizeBytes(java.lang.Long sizeBytes) {
          this.sizeBytes = sizeBytes;
          return this;
        }

        /**
         * A unique id for the new version. This is only specified for legacy version creations.
         */
        @com.google.api.client.util.Key
        private java.lang.String versionId;

        /** A unique id for the new version. This is only specified for legacy version creations.
         */
        public java.lang.String getVersionId() {
          return versionId;
        }

        /**
         * A unique id for the new version. This is only specified for legacy version creations.
         */
        public Create setVersionId(java.lang.String versionId) {
          this.versionId = versionId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the specified version.
       *
       * Create a request for the method "versions.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the version to be deleted, in the format:
      sites/site-name/versions/versionID
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Deletes the specified version.
         *
         * Create a request for the method "versions.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the version to be deleted, in the format:
      sites/site-name/versions/versionID
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the version to be deleted, in the format: sites/site-
         * name/versions/versionID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the version to be deleted, in the format: sites/site-name/versions/versionID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the version to be deleted, in the format: sites/site-
         * name/versions/versionID
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Updates the specified metadata for a version. Note that this method will fail with
       * `FAILED_PRECONDITION` in the event of an invalid state transition. The only valid transition for
       * a version is currently from a `CREATED` status to a `FINALIZED` status. Use
       * [`DeleteVersion`](../sites.versions/delete) to set the status of a version to `DELETED`.
       *
       * Create a request for the method "versions.patch".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The unique identifier for a version, in the format:
      sites/site-name/versions/versionID
      This name is
       *        provided in the response body when you call the
       *        [`CreateVersion`](../sites.versions/create) endpoint.
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Updates the specified metadata for a version. Note that this method will fail with
         * `FAILED_PRECONDITION` in the event of an invalid state transition. The only valid transition
         * for a version is currently from a `CREATED` status to a `FINALIZED` status. Use
         * [`DeleteVersion`](../sites.versions/delete) to set the status of a version to `DELETED`.
         *
         * Create a request for the method "versions.patch".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The unique identifier for a version, in the format:
      sites/site-name/versions/versionID
      This name is
       *        provided in the response body when you call the
       *        [`CreateVersion`](../sites.versions/create) endpoint.
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
          super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The unique identifier for a version, in the format: sites/site-name/versions/versionID
         * This name is provided in the response body when you call the
         * [`CreateVersion`](../sites.versions/create) endpoint.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The unique identifier for a version, in the format: sites/site-name/versions/versionID This name is
       provided in the response body when you call the [`CreateVersion`](../sites.versions/create)
       endpoint.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The unique identifier for a version, in the format: sites/site-name/versions/versionID
         * This name is provided in the response body when you call the
         * [`CreateVersion`](../sites.versions/create) endpoint.
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A set of field names from your [version](../sites.versions) that you want to update. A
         * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
         * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
         * used.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** A set of field names from your [version](../sites.versions) that you want to update. A field will
       be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of
       only [`status`](../sites.versions#Version.FIELDS.status) will be used.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * A set of field names from your [version](../sites.versions) that you want to update. A
         * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
         * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
         * used.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Adds content files to a version.
       *
       * Create a request for the method "versions.populateFiles".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
       * operation.
       *
       * @param parent Required. The version to add files to, in the format:
      sites/site-name/versions/versionID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
       * @return the request
       */
      public PopulateFiles populateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) throws java.io.IOException {
        PopulateFiles result = new PopulateFiles(parent, content);
        initialize(result);
        return result;
      }

      public class PopulateFiles extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}:populateFiles";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Adds content files to a version.
         *
         * Create a request for the method "versions.populateFiles".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
         * operation. <p> {@link PopulateFiles#initialize(com.google.api.client.googleapis.services.Abstra
         * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param parent Required. The version to add files to, in the format:
      sites/site-name/versions/versionID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
         * @since 1.13
         */
        protected PopulateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public PopulateFiles set$Xgafv(java.lang.String $Xgafv) {
          return (PopulateFiles) super.set$Xgafv($Xgafv);
        }

        @Override
        public PopulateFiles setAccessToken(java.lang.String accessToken) {
          return (PopulateFiles) super.setAccessToken(accessToken);
        }

        @Override
        public PopulateFiles setAlt(java.lang.String alt) {
          return (PopulateFiles) super.setAlt(alt);
        }

        @Override
        public PopulateFiles setCallback(java.lang.String callback) {
          return (PopulateFiles) super.setCallback(callback);
        }

        @Override
        public PopulateFiles setFields(java.lang.String fields) {
          return (PopulateFiles) super.setFields(fields);
        }

        @Override
        public PopulateFiles setKey(java.lang.String key) {
          return (PopulateFiles) super.setKey(key);
        }

        @Override
        public PopulateFiles setOauthToken(java.lang.String oauthToken) {
          return (PopulateFiles) super.setOauthToken(oauthToken);
        }

        @Override
        public PopulateFiles setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (PopulateFiles) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public PopulateFiles setQuotaUser(java.lang.String quotaUser) {
          return (PopulateFiles) super.setQuotaUser(quotaUser);
        }

        @Override
        public PopulateFiles setUploadType(java.lang.String uploadType) {
          return (PopulateFiles) super.setUploadType(uploadType);
        }

        @Override
        public PopulateFiles setUploadProtocol(java.lang.String uploadProtocol) {
          return (PopulateFiles) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The version to add files to, in the format: sites/site-name/versions/versionID
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The version to add files to, in the format: sites/site-name/versions/versionID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The version to add files to, in the format: sites/site-name/versions/versionID
         */
        public PopulateFiles setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public PopulateFiles set(String parameterName, Object value) {
          return (PopulateFiles) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Files collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Files.List request = firebasehosting.files().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Files files() {
        return new Files();
      }

      /**
       * The "files" collection of methods.
       */
      public class Files {

        /**
         * Lists the remaining files to be uploaded for the specified version.
         *
         * Create a request for the method "files.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent to list files for, in the format:
        sites/site-name/versions/versionID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/files";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

          /**
           * Lists the remaining files to be uploaded for the specified version.
           *
           * Create a request for the method "files.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent to list files for, in the format:
        sites/site-name/versions/versionID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent to list files for, in the format: sites/site-
           * name/versions/versionID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent to list files for, in the format: sites/site-name/versions/versionID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent to list files for, in the format: sites/site-
           * name/versions/versionID
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/versions/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** The page size to return. Defaults to 1000. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The page size to return. Defaults to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The page size to return. Defaults to 1000. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * The next_page_token from a previous request, if provided. This will be the encoded
           * version of a firebase.hosting.proto.metadata.ListFilesPageToken.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The next_page_token from a previous request, if provided. This will be the encoded version of a
         firebase.hosting.proto.metadata.ListFilesPageToken.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * The next_page_token from a previous request, if provided. This will be the encoded
           * version of a firebase.hosting.proto.metadata.ListFilesPageToken.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /** The type of files in the version that should be listed. */
          @com.google.api.client.util.Key
          private java.lang.String status;

          /** The type of files in the version that should be listed.
           */
          public java.lang.String getStatus() {
            return status;
          }

          /** The type of files in the version that should be listed. */
          public List setStatus(java.lang.String status) {
            this.status = status;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link FirebaseHosting}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseHosting}. */
    @Override
    public FirebaseHosting build() {
      return new FirebaseHosting(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseHostingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseHostingRequestInitializer(
        FirebaseHostingRequestInitializer firebasehostingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebasehostingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
