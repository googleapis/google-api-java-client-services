/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.content;

/**
 * Service definition for ShoppingContent (v2.1).
 *
 * <p>
 * Manage your product listings and accounts for Google Shopping
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/shopping-content/v2/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ShoppingContentRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ShoppingContent extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Content API for Shopping library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://shoppingcontent.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://shoppingcontent.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ShoppingContent(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ShoppingContent(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accounts.List request = content.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounts accounts() {
    return new Accounts();
  }

  /**
   * The "accounts" collection of methods.
   */
  public class Accounts {

    /**
     * Returns information about the authenticated user.
     *
     * Create a request for the method "accounts.authinfo".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Authinfo#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Authinfo authinfo() throws java.io.IOException {
      Authinfo result = new Authinfo();
      initialize(result);
      return result;
    }

    public class Authinfo extends ShoppingContentRequest<com.google.api.services.content.model.AccountsAuthInfoResponse> {

      private static final String REST_PATH = "content/v2.1/accounts/authinfo";

      /**
       * Returns information about the authenticated user.
       *
       * Create a request for the method "accounts.authinfo".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Authinfo#execute()} method to invoke the remote operation. <p>
       * {@link
       * Authinfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Authinfo() {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountsAuthInfoResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Authinfo set$Xgafv(java.lang.String $Xgafv) {
        return (Authinfo) super.set$Xgafv($Xgafv);
      }

      @Override
      public Authinfo setAccessToken(java.lang.String accessToken) {
        return (Authinfo) super.setAccessToken(accessToken);
      }

      @Override
      public Authinfo setAlt(java.lang.String alt) {
        return (Authinfo) super.setAlt(alt);
      }

      @Override
      public Authinfo setCallback(java.lang.String callback) {
        return (Authinfo) super.setCallback(callback);
      }

      @Override
      public Authinfo setFields(java.lang.String fields) {
        return (Authinfo) super.setFields(fields);
      }

      @Override
      public Authinfo setKey(java.lang.String key) {
        return (Authinfo) super.setKey(key);
      }

      @Override
      public Authinfo setOauthToken(java.lang.String oauthToken) {
        return (Authinfo) super.setOauthToken(oauthToken);
      }

      @Override
      public Authinfo setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Authinfo) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Authinfo setQuotaUser(java.lang.String quotaUser) {
        return (Authinfo) super.setQuotaUser(quotaUser);
      }

      @Override
      public Authinfo setUploadType(java.lang.String uploadType) {
        return (Authinfo) super.setUploadType(uploadType);
      }

      @Override
      public Authinfo setUploadProtocol(java.lang.String uploadProtocol) {
        return (Authinfo) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Authinfo set(String parameterName, Object value) {
        return (Authinfo) super.set(parameterName, value);
      }
    }
    /**
     * Claims the website of a Merchant Center sub-account.
     *
     * Create a request for the method "accounts.claimwebsite".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Claimwebsite#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account whose website is claimed.
     * @return the request
     */
    public Claimwebsite claimwebsite(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Claimwebsite result = new Claimwebsite(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Claimwebsite extends ShoppingContentRequest<com.google.api.services.content.model.AccountsClaimWebsiteResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}/claimwebsite";

      /**
       * Claims the website of a Merchant Center sub-account.
       *
       * Create a request for the method "accounts.claimwebsite".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Claimwebsite#execute()} method to invoke the remote operation. <p>
       * {@link
       * Claimwebsite#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account whose website is claimed.
       * @since 1.13
       */
      protected Claimwebsite(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.AccountsClaimWebsiteResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Claimwebsite set$Xgafv(java.lang.String $Xgafv) {
        return (Claimwebsite) super.set$Xgafv($Xgafv);
      }

      @Override
      public Claimwebsite setAccessToken(java.lang.String accessToken) {
        return (Claimwebsite) super.setAccessToken(accessToken);
      }

      @Override
      public Claimwebsite setAlt(java.lang.String alt) {
        return (Claimwebsite) super.setAlt(alt);
      }

      @Override
      public Claimwebsite setCallback(java.lang.String callback) {
        return (Claimwebsite) super.setCallback(callback);
      }

      @Override
      public Claimwebsite setFields(java.lang.String fields) {
        return (Claimwebsite) super.setFields(fields);
      }

      @Override
      public Claimwebsite setKey(java.lang.String key) {
        return (Claimwebsite) super.setKey(key);
      }

      @Override
      public Claimwebsite setOauthToken(java.lang.String oauthToken) {
        return (Claimwebsite) super.setOauthToken(oauthToken);
      }

      @Override
      public Claimwebsite setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Claimwebsite) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Claimwebsite setQuotaUser(java.lang.String quotaUser) {
        return (Claimwebsite) super.setQuotaUser(quotaUser);
      }

      @Override
      public Claimwebsite setUploadType(java.lang.String uploadType) {
        return (Claimwebsite) super.setUploadType(uploadType);
      }

      @Override
      public Claimwebsite setUploadProtocol(java.lang.String uploadProtocol) {
        return (Claimwebsite) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Claimwebsite setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account whose website is claimed. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account whose website is claimed.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account whose website is claimed. */
      public Claimwebsite setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /**
       * Only available to selected merchants. When set to `True`, this flag removes any existing
       * claim on the requested website by another account and replaces it with a claim from this
       * account.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean overwrite;

      /** Only available to selected merchants. When set to `True`, this flag removes any existing claim on
     the requested website by another account and replaces it with a claim from this account.
       */
      public java.lang.Boolean getOverwrite() {
        return overwrite;
      }

      /**
       * Only available to selected merchants. When set to `True`, this flag removes any existing
       * claim on the requested website by another account and replaces it with a claim from this
       * account.
       */
      public Claimwebsite setOverwrite(java.lang.Boolean overwrite) {
        this.overwrite = overwrite;
        return this;
      }

      @Override
      public Claimwebsite set(String parameterName, Object value) {
        return (Claimwebsite) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single
     * request.
     *
     * Create a request for the method "accounts.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccountsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.AccountsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccountsCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/accounts/batch";

      /**
       * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single
       * request.
       *
       * Create a request for the method "accounts.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccountsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.AccountsCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountsCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a Merchant Center sub-account.
     *
     * Create a request for the method "accounts.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account, and accountId must be the ID of
     *        a sub-account of this account.
     * @param accountId The ID of the account.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Delete result = new Delete(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}";

      /**
       * Deletes a Merchant Center sub-account.
       *
       * Create a request for the method "accounts.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account, and accountId must be the ID of
     *        a sub-account of this account.
       * @param accountId The ID of the account.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. This must be a multi-client account, and accountId must be
       * the ID of a sub-account of this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account, and accountId must be the ID
     of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. This must be a multi-client account, and accountId must be
       * the ID of a sub-account of this account.
       */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account. */
      public Delete setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** Flag to delete sub-accounts with products. The default value is false. */
      @com.google.api.client.util.Key
      private java.lang.Boolean force;

      /** Flag to delete sub-accounts with products. The default value is false. [default: false]
       */
      public java.lang.Boolean getForce() {
        return force;
      }

      /** Flag to delete sub-accounts with products. The default value is false. */
      public Delete setForce(java.lang.Boolean force) {
        this.force = force;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Flag to delete sub-accounts with products. The default value is false.
       * </p>
       */
      public boolean isForce() {
        if (force == null || force == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return false;
        }
        return force;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a Merchant Center account.
     *
     * Create a request for the method "accounts.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}";

      /**
       * Retrieves a Merchant Center account.
       *
       * Create a request for the method "accounts.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account. */
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /**
       * Controls which fields will be populated. Acceptable values are: "merchant" and "css". The
       * default value is "merchant".
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Controls which fields will be populated. Acceptable values are: "merchant" and "css". The default
     value is "merchant".
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Controls which fields will be populated. Acceptable values are: "merchant" and "css". The
       * default value is "merchant".
       */
      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Creates a Merchant Center sub-account.
     *
     * Create a request for the method "accounts.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @param content the {@link com.google.api.services.content.model.Account}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Account content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts";

      /**
       * Creates a Merchant Center sub-account.
       *
       * Create a request for the method "accounts.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @param content the {@link com.google.api.services.content.model.Account}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Account content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Performs an action on a link between two Merchant Center accounts, namely accountId and
     * linkedAccountId.
     *
     * Create a request for the method "accounts.link".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Link#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account that should be linked.
     * @param content the {@link com.google.api.services.content.model.AccountsLinkRequest}
     * @return the request
     */
    public Link link(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountsLinkRequest content) throws java.io.IOException {
      Link result = new Link(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Link extends ShoppingContentRequest<com.google.api.services.content.model.AccountsLinkResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}/link";

      /**
       * Performs an action on a link between two Merchant Center accounts, namely accountId and
       * linkedAccountId.
       *
       * Create a request for the method "accounts.link".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Link#execute()} method to invoke the remote operation. <p> {@link
       * Link#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account that should be linked.
       * @param content the {@link com.google.api.services.content.model.AccountsLinkRequest}
       * @since 1.13
       */
      protected Link(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountsLinkRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountsLinkResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Link set$Xgafv(java.lang.String $Xgafv) {
        return (Link) super.set$Xgafv($Xgafv);
      }

      @Override
      public Link setAccessToken(java.lang.String accessToken) {
        return (Link) super.setAccessToken(accessToken);
      }

      @Override
      public Link setAlt(java.lang.String alt) {
        return (Link) super.setAlt(alt);
      }

      @Override
      public Link setCallback(java.lang.String callback) {
        return (Link) super.setCallback(callback);
      }

      @Override
      public Link setFields(java.lang.String fields) {
        return (Link) super.setFields(fields);
      }

      @Override
      public Link setKey(java.lang.String key) {
        return (Link) super.setKey(key);
      }

      @Override
      public Link setOauthToken(java.lang.String oauthToken) {
        return (Link) super.setOauthToken(oauthToken);
      }

      @Override
      public Link setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Link) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Link setQuotaUser(java.lang.String quotaUser) {
        return (Link) super.setQuotaUser(quotaUser);
      }

      @Override
      public Link setUploadType(java.lang.String uploadType) {
        return (Link) super.setUploadType(uploadType);
      }

      @Override
      public Link setUploadProtocol(java.lang.String uploadProtocol) {
        return (Link) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Link setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account that should be linked. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account that should be linked.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account that should be linked. */
      public Link setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Link set(String parameterName, Object value) {
        return (Link) super.set(parameterName, value);
      }
    }
    /**
     * Lists the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accounts.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccountsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts";

      /**
       * Lists the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accounts.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** If view is set to "css", only return accounts that are assigned label with given ID. */
      @com.google.api.client.util.Key
      private java.math.BigInteger label;

      /** If view is set to "css", only return accounts that are assigned label with given ID.
       */
      public java.math.BigInteger getLabel() {
        return label;
      }

      /** If view is set to "css", only return accounts that are assigned label with given ID. */
      public List setLabel(java.math.BigInteger label) {
        this.label = label;
        return this;
      }

      /** The maximum number of accounts to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of accounts to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of accounts to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Controls which fields will be populated. Acceptable values are: "merchant" and "css". The
       * default value is "merchant".
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Controls which fields will be populated. Acceptable values are: "merchant" and "css". The default
     value is "merchant".
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Controls which fields will be populated. Acceptable values are: "merchant" and "css". The
       * default value is "merchant".
       */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Returns the list of accounts linked to your Merchant Center account.
     *
     * Create a request for the method "accounts.listlinks".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Listlinks#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to list links.
     * @return the request
     */
    public Listlinks listlinks(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Listlinks result = new Listlinks(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Listlinks extends ShoppingContentRequest<com.google.api.services.content.model.AccountsListLinksResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}/listlinks";

      /**
       * Returns the list of accounts linked to your Merchant Center account.
       *
       * Create a request for the method "accounts.listlinks".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Listlinks#execute()} method to invoke the remote operation. <p>
       * {@link
       * Listlinks#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to list links.
       * @since 1.13
       */
      protected Listlinks(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountsListLinksResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listlinks set$Xgafv(java.lang.String $Xgafv) {
        return (Listlinks) super.set$Xgafv($Xgafv);
      }

      @Override
      public Listlinks setAccessToken(java.lang.String accessToken) {
        return (Listlinks) super.setAccessToken(accessToken);
      }

      @Override
      public Listlinks setAlt(java.lang.String alt) {
        return (Listlinks) super.setAlt(alt);
      }

      @Override
      public Listlinks setCallback(java.lang.String callback) {
        return (Listlinks) super.setCallback(callback);
      }

      @Override
      public Listlinks setFields(java.lang.String fields) {
        return (Listlinks) super.setFields(fields);
      }

      @Override
      public Listlinks setKey(java.lang.String key) {
        return (Listlinks) super.setKey(key);
      }

      @Override
      public Listlinks setOauthToken(java.lang.String oauthToken) {
        return (Listlinks) super.setOauthToken(oauthToken);
      }

      @Override
      public Listlinks setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listlinks) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listlinks setQuotaUser(java.lang.String quotaUser) {
        return (Listlinks) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listlinks setUploadType(java.lang.String uploadType) {
        return (Listlinks) super.setUploadType(uploadType);
      }

      @Override
      public Listlinks setUploadProtocol(java.lang.String uploadProtocol) {
        return (Listlinks) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Listlinks setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to list links. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to list links.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to list links. */
      public Listlinks setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The maximum number of links to return in the response, used for pagination. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of links to return in the response, used for pagination.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of links to return in the response, used for pagination. */
      public Listlinks setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public Listlinks setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public Listlinks set(String parameterName, Object value) {
        return (Listlinks) super.set(parameterName, value);
      }
    }
    /**
     * Updates a Merchant Center account. Any fields that are not provided are deleted from the
     * resource.
     *
     * Create a request for the method "accounts.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account.
     * @param content the {@link com.google.api.services.content.model.Account}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.Account> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}";

      /**
       * Updates a Merchant Center account. Any fields that are not provided are deleted from the
       * resource.
       *
       * Create a request for the method "accounts.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account.
       * @param content the {@link com.google.api.services.content.model.Account}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.Account content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.Account.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account. */
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }
    /**
     * Updates labels that are assigned to the Merchant Center account by CSS user.
     *
     * Create a request for the method "accounts.updatelabels".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updatelabels#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account.
     * @param accountId The ID of the account whose labels are updated.
     * @param content the {@link com.google.api.services.content.model.AccountsUpdateLabelsRequest}
     * @return the request
     */
    public Updatelabels updatelabels(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountsUpdateLabelsRequest content) throws java.io.IOException {
      Updatelabels result = new Updatelabels(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Updatelabels extends ShoppingContentRequest<com.google.api.services.content.model.AccountsUpdateLabelsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounts/{accountId}/updatelabels";

      /**
       * Updates labels that are assigned to the Merchant Center account by CSS user.
       *
       * Create a request for the method "accounts.updatelabels".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updatelabels#execute()} method to invoke the remote operation. <p>
       * {@link
       * Updatelabels#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account.
       * @param accountId The ID of the account whose labels are updated.
       * @param content the {@link com.google.api.services.content.model.AccountsUpdateLabelsRequest}
       * @since 1.13
       */
      protected Updatelabels(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountsUpdateLabelsRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountsUpdateLabelsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Updatelabels set$Xgafv(java.lang.String $Xgafv) {
        return (Updatelabels) super.set$Xgafv($Xgafv);
      }

      @Override
      public Updatelabels setAccessToken(java.lang.String accessToken) {
        return (Updatelabels) super.setAccessToken(accessToken);
      }

      @Override
      public Updatelabels setAlt(java.lang.String alt) {
        return (Updatelabels) super.setAlt(alt);
      }

      @Override
      public Updatelabels setCallback(java.lang.String callback) {
        return (Updatelabels) super.setCallback(callback);
      }

      @Override
      public Updatelabels setFields(java.lang.String fields) {
        return (Updatelabels) super.setFields(fields);
      }

      @Override
      public Updatelabels setKey(java.lang.String key) {
        return (Updatelabels) super.setKey(key);
      }

      @Override
      public Updatelabels setOauthToken(java.lang.String oauthToken) {
        return (Updatelabels) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatelabels setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatelabels) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatelabels setQuotaUser(java.lang.String quotaUser) {
        return (Updatelabels) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatelabels setUploadType(java.lang.String uploadType) {
        return (Updatelabels) super.setUploadType(uploadType);
      }

      @Override
      public Updatelabels setUploadProtocol(java.lang.String uploadProtocol) {
        return (Updatelabels) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. */
      public Updatelabels setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account whose labels are updated. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account whose labels are updated.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account whose labels are updated. */
      public Updatelabels setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Updatelabels set(String parameterName, Object value) {
        return (Updatelabels) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Labels collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ShoppingContent content = new ShoppingContent(...);}
     *   {@code ShoppingContent.Labels.List request = content.labels().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Labels labels() {
      return new Labels();
    }

    /**
     * The "labels" collection of methods.
     */
    public class Labels {

      /**
       * Creates a new label, not assigned to any account.
       *
       * Create a request for the method "labels.create".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param accountId Required. The id of the account this label belongs to.
       * @param content the {@link com.google.api.services.content.model.AccountLabel}
       * @return the request
       */
      public Create create(java.lang.Long accountId, com.google.api.services.content.model.AccountLabel content) throws java.io.IOException {
        Create result = new Create(accountId, content);
        initialize(result);
        return result;
      }

      public class Create extends ShoppingContentRequest<com.google.api.services.content.model.AccountLabel> {

        private static final String REST_PATH = "content/v2.1/accounts/{accountId}/labels";

        /**
         * Creates a new label, not assigned to any account.
         *
         * Create a request for the method "labels.create".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Required. The id of the account this label belongs to.
         * @param content the {@link com.google.api.services.content.model.AccountLabel}
         * @since 1.13
         */
        protected Create(java.lang.Long accountId, com.google.api.services.content.model.AccountLabel content) {
          super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountLabel.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The id of the account this label belongs to. */
        @com.google.api.client.util.Key
        private java.lang.Long accountId;

        /** Required. The id of the account this label belongs to.
         */
        public java.lang.Long getAccountId() {
          return accountId;
        }

        /** Required. The id of the account this label belongs to. */
        public Create setAccountId(java.lang.Long accountId) {
          this.accountId = accountId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a label and removes it from all accounts to which it was assigned.
       *
       * Create a request for the method "labels.delete".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param accountId Required. The id of the account that owns the label.
       * @param labelId Required. The id of the label to delete.
       * @return the request
       */
      public Delete delete(java.lang.Long accountId, java.lang.Long labelId) throws java.io.IOException {
        Delete result = new Delete(accountId, labelId);
        initialize(result);
        return result;
      }

      public class Delete extends ShoppingContentRequest<Void> {

        private static final String REST_PATH = "content/v2.1/accounts/{accountId}/labels/{labelId}";

        /**
         * Deletes a label and removes it from all accounts to which it was assigned.
         *
         * Create a request for the method "labels.delete".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Required. The id of the account that owns the label.
         * @param labelId Required. The id of the label to delete.
         * @since 1.13
         */
        protected Delete(java.lang.Long accountId, java.lang.Long labelId) {
          super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.labelId = com.google.api.client.util.Preconditions.checkNotNull(labelId, "Required parameter labelId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The id of the account that owns the label. */
        @com.google.api.client.util.Key
        private java.lang.Long accountId;

        /** Required. The id of the account that owns the label.
         */
        public java.lang.Long getAccountId() {
          return accountId;
        }

        /** Required. The id of the account that owns the label. */
        public Delete setAccountId(java.lang.Long accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Required. The id of the label to delete. */
        @com.google.api.client.util.Key
        private java.lang.Long labelId;

        /** Required. The id of the label to delete.
         */
        public java.lang.Long getLabelId() {
          return labelId;
        }

        /** Required. The id of the label to delete. */
        public Delete setLabelId(java.lang.Long labelId) {
          this.labelId = labelId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Lists the labels assigned to an account.
       *
       * Create a request for the method "labels.list".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param accountId Required. The account id for whose labels are to be listed.
       * @return the request
       */
      public List list(java.lang.Long accountId) throws java.io.IOException {
        List result = new List(accountId);
        initialize(result);
        return result;
      }

      public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListAccountLabelsResponse> {

        private static final String REST_PATH = "content/v2.1/accounts/{accountId}/labels";

        /**
         * Lists the labels assigned to an account.
         *
         * Create a request for the method "labels.list".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Required. The account id for whose labels are to be listed.
         * @since 1.13
         */
        protected List(java.lang.Long accountId) {
          super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListAccountLabelsResponse.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The account id for whose labels are to be listed. */
        @com.google.api.client.util.Key
        private java.lang.Long accountId;

        /** Required. The account id for whose labels are to be listed.
         */
        public java.lang.Long getAccountId() {
          return accountId;
        }

        /** Required. The account id for whose labels are to be listed. */
        public List setAccountId(java.lang.Long accountId) {
          this.accountId = accountId;
          return this;
        }

        /**
         * The maximum number of labels to return. The service may return fewer than this value. If
         * unspecified, at most 50 labels will be returned. The maximum value is 1000; values above
         * 1000 will be coerced to 1000.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of labels to return. The service may return fewer than this value. If
       unspecified, at most 50 labels will be returned. The maximum value is 1000; values above 1000 will
       be coerced to 1000.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of labels to return. The service may return fewer than this value. If
         * unspecified, at most 50 labels will be returned. The maximum value is 1000; values above
         * 1000 will be coerced to 1000.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token, received from a previous `ListAccountLabels` call. Provide this to retrieve
         * the subsequent page. When paginating, all other parameters provided to
         * `ListAccountLabels` must match the call that provided the page token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token, received from a previous `ListAccountLabels` call. Provide this to retrieve the
       subsequent page. When paginating, all other parameters provided to `ListAccountLabels` must match
       the call that provided the page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token, received from a previous `ListAccountLabels` call. Provide this to retrieve
         * the subsequent page. When paginating, all other parameters provided to
         * `ListAccountLabels` must match the call that provided the page token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates a label.
       *
       * Create a request for the method "labels.patch".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param accountId Required. The id of the account this label belongs to.
       * @param labelId Required. The id of the label to update.
       * @param content the {@link com.google.api.services.content.model.AccountLabel}
       * @return the request
       */
      public Patch patch(java.lang.Long accountId, java.lang.Long labelId, com.google.api.services.content.model.AccountLabel content) throws java.io.IOException {
        Patch result = new Patch(accountId, labelId, content);
        initialize(result);
        return result;
      }

      public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.AccountLabel> {

        private static final String REST_PATH = "content/v2.1/accounts/{accountId}/labels/{labelId}";

        /**
         * Updates a label.
         *
         * Create a request for the method "labels.patch".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Required. The id of the account this label belongs to.
         * @param labelId Required. The id of the label to update.
         * @param content the {@link com.google.api.services.content.model.AccountLabel}
         * @since 1.13
         */
        protected Patch(java.lang.Long accountId, java.lang.Long labelId, com.google.api.services.content.model.AccountLabel content) {
          super(ShoppingContent.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.AccountLabel.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.labelId = com.google.api.client.util.Preconditions.checkNotNull(labelId, "Required parameter labelId must be specified.");
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The id of the account this label belongs to. */
        @com.google.api.client.util.Key
        private java.lang.Long accountId;

        /** Required. The id of the account this label belongs to.
         */
        public java.lang.Long getAccountId() {
          return accountId;
        }

        /** Required. The id of the account this label belongs to. */
        public Patch setAccountId(java.lang.Long accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Required. The id of the label to update. */
        @com.google.api.client.util.Key
        private java.lang.Long labelId;

        /** Required. The id of the label to update.
         */
        public java.lang.Long getLabelId() {
          return labelId;
        }

        /** Required. The id of the label to update. */
        public Patch setLabelId(java.lang.Long labelId) {
          this.labelId = labelId;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Accountstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accountstatuses.List request = content.accountstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accountstatuses accountstatuses() {
    return new Accountstatuses();
  }

  /**
   * The "accountstatuses" collection of methods.
   */
  public class Accountstatuses {

    /**
     * Retrieves multiple Merchant Center account statuses in a single request.
     *
     * Create a request for the method "accountstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccountstatusesCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.AccountstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccountstatusesCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/accountstatuses/batch";

      /**
       * Retrieves multiple Merchant Center account statuses in a single request.
       *
       * Create a request for the method "accountstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccountstatusesCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.AccountstatusesCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccountstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-
     * client accounts.
     *
     * Create a request for the method "accountstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.AccountStatus> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accountstatuses/{accountId}";

      /**
       * Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-
       * client accounts.
       *
       * Create a request for the method "accountstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account. */
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> destinations;

      /** If set, only issues for the specified destinations are returned, otherwise only issues for the
     Shopping destination.
       */
      public java.util.List<java.lang.String> getDestinations() {
        return destinations;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      public Get setDestinations(java.util.List<java.lang.String> destinations) {
        this.destinations = destinations;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the statuses of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accountstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccountstatusesListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accountstatuses";

      /**
       * Lists the statuses of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accountstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> destinations;

      /** If set, only issues for the specified destinations are returned, otherwise only issues for the
     Shopping destination.
       */
      public java.util.List<java.lang.String> getDestinations() {
        return destinations;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      public List setDestinations(java.util.List<java.lang.String> destinations) {
        this.destinations = destinations;
        return this;
      }

      /** The maximum number of account statuses to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of account statuses to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of account statuses to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Accounttax collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Accounttax.List request = content.accounttax().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounttax accounttax() {
    return new Accounttax();
  }

  /**
   * The "accounttax" collection of methods.
   */
  public class Accounttax {

    /**
     * Retrieves and updates tax settings of multiple accounts in a single request.
     *
     * Create a request for the method "accounttax.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.AccounttaxCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.AccounttaxCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.AccounttaxCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/accounttax/batch";

      /**
       * Retrieves and updates tax settings of multiple accounts in a single request.
       *
       * Create a request for the method "accounttax.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.AccounttaxCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.AccounttaxCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.AccounttaxCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the tax settings of the account.
     *
     * Create a request for the method "accounttax.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get/update account tax settings.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.AccountTax> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounttax/{accountId}";

      /**
       * Retrieves the tax settings of the account.
       *
       * Create a request for the method "accounttax.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get/update account tax settings.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccountTax.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get/update account tax settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get/update account tax settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get/update account tax settings. */
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the tax settings of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "accounttax.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.AccounttaxListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounttax";

      /**
       * Lists the tax settings of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "accounttax.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.AccounttaxListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of tax settings to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of tax settings to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of tax settings to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the tax settings of the account. Any fields that are not provided are deleted from the
     * resource.
     *
     * Create a request for the method "accounttax.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get/update account tax settings.
     * @param content the {@link com.google.api.services.content.model.AccountTax}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.AccountTax> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/accounttax/{accountId}";

      /**
       * Updates the tax settings of the account. Any fields that are not provided are deleted from the
       * resource.
       *
       * Create a request for the method "accounttax.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get/update account tax settings.
       * @param content the {@link com.google.api.services.content.model.AccountTax}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.AccountTax content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.AccountTax.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get/update account tax settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get/update account tax settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get/update account tax settings. */
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Csses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Csses.List request = content.csses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Csses csses() {
    return new Csses();
  }

  /**
   * The "csses" collection of methods.
   */
  public class Csses {

    /**
     * Retrieves a single CSS domain by ID.
     *
     * Create a request for the method "csses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param cssGroupId Required. The ID of the managing account. If this parameter is not the same as
     *        [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be
     *        the ID of a CSS domain affiliated with this group.
     * @param cssDomainId Required. The ID of the CSS domain to return.
     * @return the request
     */
    public Get get(java.lang.Long cssGroupId, java.lang.Long cssDomainId) throws java.io.IOException {
      Get result = new Get(cssGroupId, cssDomainId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Css> {

      private static final String REST_PATH = "content/v2.1/{cssGroupId}/csses/{cssDomainId}";

      /**
       * Retrieves a single CSS domain by ID.
       *
       * Create a request for the method "csses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param cssGroupId Required. The ID of the managing account. If this parameter is not the same as
     *        [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be
     *        the ID of a CSS domain affiliated with this group.
       * @param cssDomainId Required. The ID of the CSS domain to return.
       * @since 1.13
       */
      protected Get(java.lang.Long cssGroupId, java.lang.Long cssDomainId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Css.class);
        this.cssGroupId = com.google.api.client.util.Preconditions.checkNotNull(cssGroupId, "Required parameter cssGroupId must be specified.");
        this.cssDomainId = com.google.api.client.util.Preconditions.checkNotNull(cssDomainId, "Required parameter cssDomainId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The ID of the managing account. If this parameter is not the same as
       * [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be
       * the ID of a CSS domain affiliated with this group.
       */
      @com.google.api.client.util.Key
      private java.lang.Long cssGroupId;

      /** Required. The ID of the managing account. If this parameter is not the same as
     [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be the ID
     of a CSS domain affiliated with this group.
       */
      public java.lang.Long getCssGroupId() {
        return cssGroupId;
      }

      /**
       * Required. The ID of the managing account. If this parameter is not the same as
       * [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be
       * the ID of a CSS domain affiliated with this group.
       */
      public Get setCssGroupId(java.lang.Long cssGroupId) {
        this.cssGroupId = cssGroupId;
        return this;
      }

      /** Required. The ID of the CSS domain to return. */
      @com.google.api.client.util.Key
      private java.lang.Long cssDomainId;

      /** Required. The ID of the CSS domain to return.
       */
      public java.lang.Long getCssDomainId() {
        return cssDomainId;
      }

      /** Required. The ID of the CSS domain to return. */
      public Get setCssDomainId(java.lang.Long cssDomainId) {
        this.cssDomainId = cssDomainId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists CSS domains affiliated with a CSS group.
     *
     * Create a request for the method "csses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param cssGroupId Required. The CSS group ID of CSS domains to be listed.
     * @return the request
     */
    public List list(java.lang.Long cssGroupId) throws java.io.IOException {
      List result = new List(cssGroupId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListCssesResponse> {

      private static final String REST_PATH = "content/v2.1/{cssGroupId}/csses";

      /**
       * Lists CSS domains affiliated with a CSS group.
       *
       * Create a request for the method "csses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param cssGroupId Required. The CSS group ID of CSS domains to be listed.
       * @since 1.13
       */
      protected List(java.lang.Long cssGroupId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListCssesResponse.class);
        this.cssGroupId = com.google.api.client.util.Preconditions.checkNotNull(cssGroupId, "Required parameter cssGroupId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The CSS group ID of CSS domains to be listed. */
      @com.google.api.client.util.Key
      private java.lang.Long cssGroupId;

      /** Required. The CSS group ID of CSS domains to be listed.
       */
      public java.lang.Long getCssGroupId() {
        return cssGroupId;
      }

      /** Required. The CSS group ID of CSS domains to be listed. */
      public List setCssGroupId(java.lang.Long cssGroupId) {
        this.cssGroupId = cssGroupId;
        return this;
      }

      /**
       * The maximum number of CSS domains to return. The service may return fewer than this value.
       * If unspecified, at most 50 CSS domains will be returned. The maximum value is 1000; values
       * above 1000 will be coerced to 1000.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of CSS domains to return. The service may return fewer than this value. If
     unspecified, at most 50 CSS domains will be returned. The maximum value is 1000; values above 1000
     will be coerced to 1000.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of CSS domains to return. The service may return fewer than this value.
       * If unspecified, at most 50 CSS domains will be returned. The maximum value is 1000; values
       * above 1000 will be coerced to 1000.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * A page token, received from a previous `ListCsses` call. Provide this to retrieve the
       * subsequent page. When paginating, all other parameters provided to `ListCsses` must match
       * the call that provided the page token.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A page token, received from a previous `ListCsses` call. Provide this to retrieve the subsequent
     page. When paginating, all other parameters provided to `ListCsses` must match the call that
     provided the page token.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A page token, received from a previous `ListCsses` call. Provide this to retrieve the
       * subsequent page. When paginating, all other parameters provided to `ListCsses` must match
       * the call that provided the page token.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates labels that are assigned to a CSS domain by its CSS group.
     *
     * Create a request for the method "csses.updatelabels".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updatelabels#execute()} method to invoke the remote operation.
     *
     * @param cssGroupId Required. The CSS group ID of the updated CSS domain.
     * @param cssDomainId Required. The ID of the updated CSS domain.
     * @param content the {@link com.google.api.services.content.model.LabelIds}
     * @return the request
     */
    public Updatelabels updatelabels(java.lang.Long cssGroupId, java.lang.Long cssDomainId, com.google.api.services.content.model.LabelIds content) throws java.io.IOException {
      Updatelabels result = new Updatelabels(cssGroupId, cssDomainId, content);
      initialize(result);
      return result;
    }

    public class Updatelabels extends ShoppingContentRequest<com.google.api.services.content.model.Css> {

      private static final String REST_PATH = "content/v2.1/{cssGroupId}/csses/{cssDomainId}/updatelabels";

      /**
       * Updates labels that are assigned to a CSS domain by its CSS group.
       *
       * Create a request for the method "csses.updatelabels".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updatelabels#execute()} method to invoke the remote operation. <p>
       * {@link
       * Updatelabels#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param cssGroupId Required. The CSS group ID of the updated CSS domain.
       * @param cssDomainId Required. The ID of the updated CSS domain.
       * @param content the {@link com.google.api.services.content.model.LabelIds}
       * @since 1.13
       */
      protected Updatelabels(java.lang.Long cssGroupId, java.lang.Long cssDomainId, com.google.api.services.content.model.LabelIds content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.Css.class);
        this.cssGroupId = com.google.api.client.util.Preconditions.checkNotNull(cssGroupId, "Required parameter cssGroupId must be specified.");
        this.cssDomainId = com.google.api.client.util.Preconditions.checkNotNull(cssDomainId, "Required parameter cssDomainId must be specified.");
      }

      @Override
      public Updatelabels set$Xgafv(java.lang.String $Xgafv) {
        return (Updatelabels) super.set$Xgafv($Xgafv);
      }

      @Override
      public Updatelabels setAccessToken(java.lang.String accessToken) {
        return (Updatelabels) super.setAccessToken(accessToken);
      }

      @Override
      public Updatelabels setAlt(java.lang.String alt) {
        return (Updatelabels) super.setAlt(alt);
      }

      @Override
      public Updatelabels setCallback(java.lang.String callback) {
        return (Updatelabels) super.setCallback(callback);
      }

      @Override
      public Updatelabels setFields(java.lang.String fields) {
        return (Updatelabels) super.setFields(fields);
      }

      @Override
      public Updatelabels setKey(java.lang.String key) {
        return (Updatelabels) super.setKey(key);
      }

      @Override
      public Updatelabels setOauthToken(java.lang.String oauthToken) {
        return (Updatelabels) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatelabels setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatelabels) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatelabels setQuotaUser(java.lang.String quotaUser) {
        return (Updatelabels) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatelabels setUploadType(java.lang.String uploadType) {
        return (Updatelabels) super.setUploadType(uploadType);
      }

      @Override
      public Updatelabels setUploadProtocol(java.lang.String uploadProtocol) {
        return (Updatelabels) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The CSS group ID of the updated CSS domain. */
      @com.google.api.client.util.Key
      private java.lang.Long cssGroupId;

      /** Required. The CSS group ID of the updated CSS domain.
       */
      public java.lang.Long getCssGroupId() {
        return cssGroupId;
      }

      /** Required. The CSS group ID of the updated CSS domain. */
      public Updatelabels setCssGroupId(java.lang.Long cssGroupId) {
        this.cssGroupId = cssGroupId;
        return this;
      }

      /** Required. The ID of the updated CSS domain. */
      @com.google.api.client.util.Key
      private java.lang.Long cssDomainId;

      /** Required. The ID of the updated CSS domain.
       */
      public java.lang.Long getCssDomainId() {
        return cssDomainId;
      }

      /** Required. The ID of the updated CSS domain. */
      public Updatelabels setCssDomainId(java.lang.Long cssDomainId) {
        this.cssDomainId = cssDomainId;
        return this;
      }

      @Override
      public Updatelabels set(String parameterName, Object value) {
        return (Updatelabels) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Datafeeds collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Datafeeds.List request = content.datafeeds().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Datafeeds datafeeds() {
    return new Datafeeds();
  }

  /**
   * The "datafeeds" collection of methods.
   */
  public class Datafeeds {

    /**
     * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
     *
     * Create a request for the method "datafeeds.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.DatafeedsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.DatafeedsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedsCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/datafeeds/batch";

      /**
       * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
       *
       * Create a request for the method "datafeeds.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.DatafeedsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.DatafeedsCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.DatafeedsCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a datafeed configuration from your Merchant Center account.
     *
     * Create a request for the method "datafeeds.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param datafeedId The ID of the datafeed.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Delete result = new Delete(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds/{datafeedId}";

      /**
       * Deletes a datafeed configuration from your Merchant Center account.
       *
       * Create a request for the method "datafeeds.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param datafeedId The ID of the datafeed.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the datafeed. */
      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      /** The ID of the datafeed.
       */
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      /** The ID of the datafeed. */
      public Delete setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method
     * more than once per day, we recommend you use the Products service to update your product data.
     *
     * Create a request for the method "datafeeds.fetchnow".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Fetchnow#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param datafeedId The ID of the datafeed to be fetched.
     * @return the request
     */
    public Fetchnow fetchnow(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Fetchnow result = new Fetchnow(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Fetchnow extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedsFetchNowResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds/{datafeedId}/fetchNow";

      /**
       * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this
       * method more than once per day, we recommend you use the Products service to update your product
       * data.
       *
       * Create a request for the method "datafeeds.fetchnow".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Fetchnow#execute()} method to invoke the remote operation. <p>
       * {@link
       * Fetchnow#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param datafeedId The ID of the datafeed to be fetched.
       * @since 1.13
       */
      protected Fetchnow(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.DatafeedsFetchNowResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public Fetchnow set$Xgafv(java.lang.String $Xgafv) {
        return (Fetchnow) super.set$Xgafv($Xgafv);
      }

      @Override
      public Fetchnow setAccessToken(java.lang.String accessToken) {
        return (Fetchnow) super.setAccessToken(accessToken);
      }

      @Override
      public Fetchnow setAlt(java.lang.String alt) {
        return (Fetchnow) super.setAlt(alt);
      }

      @Override
      public Fetchnow setCallback(java.lang.String callback) {
        return (Fetchnow) super.setCallback(callback);
      }

      @Override
      public Fetchnow setFields(java.lang.String fields) {
        return (Fetchnow) super.setFields(fields);
      }

      @Override
      public Fetchnow setKey(java.lang.String key) {
        return (Fetchnow) super.setKey(key);
      }

      @Override
      public Fetchnow setOauthToken(java.lang.String oauthToken) {
        return (Fetchnow) super.setOauthToken(oauthToken);
      }

      @Override
      public Fetchnow setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Fetchnow) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Fetchnow setQuotaUser(java.lang.String quotaUser) {
        return (Fetchnow) super.setQuotaUser(quotaUser);
      }

      @Override
      public Fetchnow setUploadType(java.lang.String uploadType) {
        return (Fetchnow) super.setUploadType(uploadType);
      }

      @Override
      public Fetchnow setUploadProtocol(java.lang.String uploadProtocol) {
        return (Fetchnow) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Fetchnow setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the datafeed to be fetched. */
      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      /** The ID of the datafeed to be fetched.
       */
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      /** The ID of the datafeed to be fetched. */
      public Fetchnow setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Fetchnow set(String parameterName, Object value) {
        return (Fetchnow) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a datafeed configuration from your Merchant Center account.
     *
     * Create a request for the method "datafeeds.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param datafeedId The ID of the datafeed.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Get result = new Get(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds/{datafeedId}";

      /**
       * Retrieves a datafeed configuration from your Merchant Center account.
       *
       * Create a request for the method "datafeeds.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param datafeedId The ID of the datafeed.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the datafeed. */
      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      /** The ID of the datafeed.
       */
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      /** The ID of the datafeed. */
      public Get setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Registers a datafeed configuration with your Merchant Center account.
     *
     * Create a request for the method "datafeeds.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param content the {@link com.google.api.services.content.model.Datafeed}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Datafeed content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds";

      /**
       * Registers a datafeed configuration with your Merchant Center account.
       *
       * Create a request for the method "datafeeds.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param content the {@link com.google.api.services.content.model.Datafeed}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Datafeed content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists the configurations for datafeeds in your Merchant Center account.
     *
     * Create a request for the method "datafeeds.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds";

      /**
       * Lists the configurations for datafeeds in your Merchant Center account.
       *
       * Create a request for the method "datafeeds.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeeds. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeeds. This account cannot be a multi-client
       * account.
       */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of products to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of products to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of products to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates a datafeed configuration of your Merchant Center account. Any fields that are not
     * provided are deleted from the resource.
     *
     * Create a request for the method "datafeeds.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param datafeedId The ID of the datafeed.
     * @param content the {@link com.google.api.services.content.model.Datafeed}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) throws java.io.IOException {
      Update result = new Update(merchantId, datafeedId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.Datafeed> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeeds/{datafeedId}";

      /**
       * Updates a datafeed configuration of your Merchant Center account. Any fields that are not
       * provided are deleted from the resource.
       *
       * Create a request for the method "datafeeds.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param datafeedId The ID of the datafeed.
       * @param content the {@link com.google.api.services.content.model.Datafeed}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger datafeedId, com.google.api.services.content.model.Datafeed content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.Datafeed.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the datafeed. */
      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      /** The ID of the datafeed.
       */
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      /** The ID of the datafeed. */
      public Update setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Datafeedstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Datafeedstatuses.List request = content.datafeedstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Datafeedstatuses datafeedstatuses() {
    return new Datafeedstatuses();
  }

  /**
   * The "datafeedstatuses" collection of methods.
   */
  public class Datafeedstatuses {

    /**
     * Gets multiple Merchant Center datafeed statuses in a single request.
     *
     * Create a request for the method "datafeedstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedstatusesCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/datafeedstatuses/batch";

      /**
       * Gets multiple Merchant Center datafeed statuses in a single request.
       *
       * Create a request for the method "datafeedstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.DatafeedstatusesCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.DatafeedstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the status of a datafeed from your Merchant Center account.
     *
     * Create a request for the method "datafeedstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param datafeedId The ID of the datafeed.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) throws java.io.IOException {
      Get result = new Get(merchantId, datafeedId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedStatus> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeedstatuses/{datafeedId}";

      /**
       * Retrieves the status of a datafeed from your Merchant Center account.
       *
       * Create a request for the method "datafeedstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       * @param datafeedId The ID of the datafeed.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger datafeedId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.datafeedId = com.google.api.client.util.Preconditions.checkNotNull(datafeedId, "Required parameter datafeedId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeed. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeed. This account cannot be a multi-client
       * account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the datafeed. */
      @com.google.api.client.util.Key
      private java.math.BigInteger datafeedId;

      /** The ID of the datafeed.
       */
      public java.math.BigInteger getDatafeedId() {
        return datafeedId;
      }

      /** The ID of the datafeed. */
      public Get setDatafeedId(java.math.BigInteger datafeedId) {
        this.datafeedId = datafeedId;
        return this;
      }

      /**
       * The country for which to get the datafeed status. If this parameter is provided then
       * language must also be provided. Note that this parameter is required for feeds targeting
       * multiple countries and languages, since a feed may have a different status for each target.
       */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** The country for which to get the datafeed status. If this parameter is provided then language must
     also be provided. Note that this parameter is required for feeds targeting multiple countries and
     languages, since a feed may have a different status for each target.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /**
       * The country for which to get the datafeed status. If this parameter is provided then
       * language must also be provided. Note that this parameter is required for feeds targeting
       * multiple countries and languages, since a feed may have a different status for each target.
       */
      public Get setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      /**
       * The language for which to get the datafeed status. If this parameter is provided then
       * country must also be provided. Note that this parameter is required for feeds targeting
       * multiple countries and languages, since a feed may have a different status for each target.
       */
      @com.google.api.client.util.Key
      private java.lang.String language;

      /** The language for which to get the datafeed status. If this parameter is provided then country must
     also be provided. Note that this parameter is required for feeds targeting multiple countries and
     languages, since a feed may have a different status for each target.
       */
      public java.lang.String getLanguage() {
        return language;
      }

      /**
       * The language for which to get the datafeed status. If this parameter is provided then
       * country must also be provided. Note that this parameter is required for feeds targeting
       * multiple countries and languages, since a feed may have a different status for each target.
       */
      public Get setLanguage(java.lang.String language) {
        this.language = language;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the statuses of the datafeeds in your Merchant Center account.
     *
     * Create a request for the method "datafeedstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.DatafeedstatusesListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/datafeedstatuses";

      /**
       * Lists the statuses of the datafeeds in your Merchant Center account.
       *
       * Create a request for the method "datafeedstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.DatafeedstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that manages the datafeeds. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that manages the datafeeds. This account cannot be a multi-client
       * account.
       */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of products to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of products to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of products to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Liasettings collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Liasettings.List request = content.liasettings().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Liasettings liasettings() {
    return new Liasettings();
  }

  /**
   * The "liasettings" collection of methods.
   */
  public class Liasettings {

    /**
     * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
     *
     * Create a request for the method "liasettings.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.LiasettingsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.LiasettingsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/liasettings/batch";

      /**
       * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
       *
       * Create a request for the method "liasettings.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.LiasettingsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.LiasettingsCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.LiasettingsCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the LIA settings of the account.
     *
     * Create a request for the method "liasettings.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get or update LIA settings.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.LiaSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}";

      /**
       * Retrieves the LIA settings of the account.
       *
       * Create a request for the method "liasettings.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get or update LIA settings.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.LiaSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get or update LIA settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get or update LIA settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get or update LIA settings. */
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the list of accessible Google My Business accounts.
     *
     * Create a request for the method "liasettings.getaccessiblegmbaccounts".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getaccessiblegmbaccounts#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to retrieve accessible Google My Business accounts.
     * @return the request
     */
    public Getaccessiblegmbaccounts getaccessiblegmbaccounts(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Getaccessiblegmbaccounts result = new Getaccessiblegmbaccounts(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Getaccessiblegmbaccounts extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsGetAccessibleGmbAccountsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts";

      /**
       * Retrieves the list of accessible Google My Business accounts.
       *
       * Create a request for the method "liasettings.getaccessiblegmbaccounts".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getaccessiblegmbaccounts#execute()} method to invoke the remote
       * operation. <p> {@link Getaccessiblegmbaccounts#initialize(com.google.api.client.googleapis.serv
       * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to retrieve accessible Google My Business accounts.
       * @since 1.13
       */
      protected Getaccessiblegmbaccounts(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.LiasettingsGetAccessibleGmbAccountsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getaccessiblegmbaccounts set$Xgafv(java.lang.String $Xgafv) {
        return (Getaccessiblegmbaccounts) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getaccessiblegmbaccounts setAccessToken(java.lang.String accessToken) {
        return (Getaccessiblegmbaccounts) super.setAccessToken(accessToken);
      }

      @Override
      public Getaccessiblegmbaccounts setAlt(java.lang.String alt) {
        return (Getaccessiblegmbaccounts) super.setAlt(alt);
      }

      @Override
      public Getaccessiblegmbaccounts setCallback(java.lang.String callback) {
        return (Getaccessiblegmbaccounts) super.setCallback(callback);
      }

      @Override
      public Getaccessiblegmbaccounts setFields(java.lang.String fields) {
        return (Getaccessiblegmbaccounts) super.setFields(fields);
      }

      @Override
      public Getaccessiblegmbaccounts setKey(java.lang.String key) {
        return (Getaccessiblegmbaccounts) super.setKey(key);
      }

      @Override
      public Getaccessiblegmbaccounts setOauthToken(java.lang.String oauthToken) {
        return (Getaccessiblegmbaccounts) super.setOauthToken(oauthToken);
      }

      @Override
      public Getaccessiblegmbaccounts setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getaccessiblegmbaccounts) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getaccessiblegmbaccounts setQuotaUser(java.lang.String quotaUser) {
        return (Getaccessiblegmbaccounts) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getaccessiblegmbaccounts setUploadType(java.lang.String uploadType) {
        return (Getaccessiblegmbaccounts) super.setUploadType(uploadType);
      }

      @Override
      public Getaccessiblegmbaccounts setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getaccessiblegmbaccounts) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Getaccessiblegmbaccounts setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to retrieve accessible Google My Business accounts. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to retrieve accessible Google My Business accounts.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to retrieve accessible Google My Business accounts. */
      public Getaccessiblegmbaccounts setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Getaccessiblegmbaccounts set(String parameterName, Object value) {
        return (Getaccessiblegmbaccounts) super.set(parameterName, value);
      }
    }
    /**
     * Lists the LIA settings of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "liasettings.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings";

      /**
       * Lists the LIA settings of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "liasettings.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.LiasettingsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of LIA settings to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of LIA settings to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of LIA settings to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the list of POS data providers that have active settings for the all eiligible
     * countries.
     *
     * Create a request for the method "liasettings.listposdataproviders".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Listposdataproviders#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public Listposdataproviders listposdataproviders() throws java.io.IOException {
      Listposdataproviders result = new Listposdataproviders();
      initialize(result);
      return result;
    }

    public class Listposdataproviders extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsListPosDataProvidersResponse> {

      private static final String REST_PATH = "content/v2.1/liasettings/posdataproviders";

      /**
       * Retrieves the list of POS data providers that have active settings for the all eiligible
       * countries.
       *
       * Create a request for the method "liasettings.listposdataproviders".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Listposdataproviders#execute()} method to invoke the remote
       * operation. <p> {@link Listposdataproviders#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Listposdataproviders() {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.LiasettingsListPosDataProvidersResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listposdataproviders set$Xgafv(java.lang.String $Xgafv) {
        return (Listposdataproviders) super.set$Xgafv($Xgafv);
      }

      @Override
      public Listposdataproviders setAccessToken(java.lang.String accessToken) {
        return (Listposdataproviders) super.setAccessToken(accessToken);
      }

      @Override
      public Listposdataproviders setAlt(java.lang.String alt) {
        return (Listposdataproviders) super.setAlt(alt);
      }

      @Override
      public Listposdataproviders setCallback(java.lang.String callback) {
        return (Listposdataproviders) super.setCallback(callback);
      }

      @Override
      public Listposdataproviders setFields(java.lang.String fields) {
        return (Listposdataproviders) super.setFields(fields);
      }

      @Override
      public Listposdataproviders setKey(java.lang.String key) {
        return (Listposdataproviders) super.setKey(key);
      }

      @Override
      public Listposdataproviders setOauthToken(java.lang.String oauthToken) {
        return (Listposdataproviders) super.setOauthToken(oauthToken);
      }

      @Override
      public Listposdataproviders setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listposdataproviders) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listposdataproviders setQuotaUser(java.lang.String quotaUser) {
        return (Listposdataproviders) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listposdataproviders setUploadType(java.lang.String uploadType) {
        return (Listposdataproviders) super.setUploadType(uploadType);
      }

      @Override
      public Listposdataproviders setUploadProtocol(java.lang.String uploadProtocol) {
        return (Listposdataproviders) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Listposdataproviders set(String parameterName, Object value) {
        return (Listposdataproviders) super.set(parameterName, value);
      }
    }
    /**
     * Requests access to a specified Google My Business account.
     *
     * Create a request for the method "liasettings.requestgmbaccess".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Requestgmbaccess#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which GMB access is requested.
     * @param gmbEmail The email of the Google My Business account.
     * @return the request
     */
    public Requestgmbaccess requestgmbaccess(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String gmbEmail) throws java.io.IOException {
      Requestgmbaccess result = new Requestgmbaccess(merchantId, accountId, gmbEmail);
      initialize(result);
      return result;
    }

    public class Requestgmbaccess extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsRequestGmbAccessResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}/requestgmbaccess";

      /**
       * Requests access to a specified Google My Business account.
       *
       * Create a request for the method "liasettings.requestgmbaccess".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Requestgmbaccess#execute()} method to invoke the remote operation.
       * <p> {@link Requestgmbaccess#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which GMB access is requested.
       * @param gmbEmail The email of the Google My Business account.
       * @since 1.13
       */
      protected Requestgmbaccess(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String gmbEmail) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.LiasettingsRequestGmbAccessResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.gmbEmail = com.google.api.client.util.Preconditions.checkNotNull(gmbEmail, "Required parameter gmbEmail must be specified.");
      }

      @Override
      public Requestgmbaccess set$Xgafv(java.lang.String $Xgafv) {
        return (Requestgmbaccess) super.set$Xgafv($Xgafv);
      }

      @Override
      public Requestgmbaccess setAccessToken(java.lang.String accessToken) {
        return (Requestgmbaccess) super.setAccessToken(accessToken);
      }

      @Override
      public Requestgmbaccess setAlt(java.lang.String alt) {
        return (Requestgmbaccess) super.setAlt(alt);
      }

      @Override
      public Requestgmbaccess setCallback(java.lang.String callback) {
        return (Requestgmbaccess) super.setCallback(callback);
      }

      @Override
      public Requestgmbaccess setFields(java.lang.String fields) {
        return (Requestgmbaccess) super.setFields(fields);
      }

      @Override
      public Requestgmbaccess setKey(java.lang.String key) {
        return (Requestgmbaccess) super.setKey(key);
      }

      @Override
      public Requestgmbaccess setOauthToken(java.lang.String oauthToken) {
        return (Requestgmbaccess) super.setOauthToken(oauthToken);
      }

      @Override
      public Requestgmbaccess setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Requestgmbaccess) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Requestgmbaccess setQuotaUser(java.lang.String quotaUser) {
        return (Requestgmbaccess) super.setQuotaUser(quotaUser);
      }

      @Override
      public Requestgmbaccess setUploadType(java.lang.String uploadType) {
        return (Requestgmbaccess) super.setUploadType(uploadType);
      }

      @Override
      public Requestgmbaccess setUploadProtocol(java.lang.String uploadProtocol) {
        return (Requestgmbaccess) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Requestgmbaccess setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which GMB access is requested. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which GMB access is requested.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which GMB access is requested. */
      public Requestgmbaccess setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The email of the Google My Business account. */
      @com.google.api.client.util.Key
      private java.lang.String gmbEmail;

      /** The email of the Google My Business account.
       */
      public java.lang.String getGmbEmail() {
        return gmbEmail;
      }

      /** The email of the Google My Business account. */
      public Requestgmbaccess setGmbEmail(java.lang.String gmbEmail) {
        this.gmbEmail = gmbEmail;
        return this;
      }

      @Override
      public Requestgmbaccess set(String parameterName, Object value) {
        return (Requestgmbaccess) super.set(parameterName, value);
      }
    }
    /**
     * Requests inventory validation for the specified country.
     *
     * Create a request for the method "liasettings.requestinventoryverification".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Requestinventoryverification#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param country The country for which inventory validation is requested.
     * @return the request
     */
    public Requestinventoryverification requestinventoryverification(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country) throws java.io.IOException {
      Requestinventoryverification result = new Requestinventoryverification(merchantId, accountId, country);
      initialize(result);
      return result;
    }

    public class Requestinventoryverification extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsRequestInventoryVerificationResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}";

      /**
       * Requests inventory validation for the specified country.
       *
       * Create a request for the method "liasettings.requestinventoryverification".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Requestinventoryverification#execute()} method to invoke the remote
       * operation. <p> {@link Requestinventoryverification#initialize(com.google.api.client.googleapis.
       * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param country The country for which inventory validation is requested.
       * @since 1.13
       */
      protected Requestinventoryverification(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.LiasettingsRequestInventoryVerificationResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.country = com.google.api.client.util.Preconditions.checkNotNull(country, "Required parameter country must be specified.");
      }

      @Override
      public Requestinventoryverification set$Xgafv(java.lang.String $Xgafv) {
        return (Requestinventoryverification) super.set$Xgafv($Xgafv);
      }

      @Override
      public Requestinventoryverification setAccessToken(java.lang.String accessToken) {
        return (Requestinventoryverification) super.setAccessToken(accessToken);
      }

      @Override
      public Requestinventoryverification setAlt(java.lang.String alt) {
        return (Requestinventoryverification) super.setAlt(alt);
      }

      @Override
      public Requestinventoryverification setCallback(java.lang.String callback) {
        return (Requestinventoryverification) super.setCallback(callback);
      }

      @Override
      public Requestinventoryverification setFields(java.lang.String fields) {
        return (Requestinventoryverification) super.setFields(fields);
      }

      @Override
      public Requestinventoryverification setKey(java.lang.String key) {
        return (Requestinventoryverification) super.setKey(key);
      }

      @Override
      public Requestinventoryverification setOauthToken(java.lang.String oauthToken) {
        return (Requestinventoryverification) super.setOauthToken(oauthToken);
      }

      @Override
      public Requestinventoryverification setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Requestinventoryverification) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Requestinventoryverification setQuotaUser(java.lang.String quotaUser) {
        return (Requestinventoryverification) super.setQuotaUser(quotaUser);
      }

      @Override
      public Requestinventoryverification setUploadType(java.lang.String uploadType) {
        return (Requestinventoryverification) super.setUploadType(uploadType);
      }

      @Override
      public Requestinventoryverification setUploadProtocol(java.lang.String uploadProtocol) {
        return (Requestinventoryverification) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Requestinventoryverification setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Requestinventoryverification setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The country for which inventory validation is requested. */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** The country for which inventory validation is requested.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /** The country for which inventory validation is requested. */
      public Requestinventoryverification setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      @Override
      public Requestinventoryverification set(String parameterName, Object value) {
        return (Requestinventoryverification) super.set(parameterName, value);
      }
    }
    /**
     * Sets the inventory verification contract for the specified country.
     *
     * Create a request for the method "liasettings.setinventoryverificationcontact".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Setinventoryverificationcontact#execute()} method to invoke the
     * remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param country The country for which inventory verification is requested.
     * @param language The language for which inventory verification is requested.
     * @param contactName The name of the inventory verification contact.
     * @param contactEmail The email of the inventory verification contact.
     * @return the request
     */
    public Setinventoryverificationcontact setinventoryverificationcontact(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country, java.lang.String language, java.lang.String contactName, java.lang.String contactEmail) throws java.io.IOException {
      Setinventoryverificationcontact result = new Setinventoryverificationcontact(merchantId, accountId, country, language, contactName, contactEmail);
      initialize(result);
      return result;
    }

    public class Setinventoryverificationcontact extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsSetInventoryVerificationContactResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact";

      /**
       * Sets the inventory verification contract for the specified country.
       *
       * Create a request for the method "liasettings.setinventoryverificationcontact".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Setinventoryverificationcontact#execute()} method to invoke the
       * remote operation. <p> {@link Setinventoryverificationcontact#initialize(com.google.api.client.g
       * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param country The country for which inventory verification is requested.
       * @param language The language for which inventory verification is requested.
       * @param contactName The name of the inventory verification contact.
       * @param contactEmail The email of the inventory verification contact.
       * @since 1.13
       */
      protected Setinventoryverificationcontact(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country, java.lang.String language, java.lang.String contactName, java.lang.String contactEmail) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.LiasettingsSetInventoryVerificationContactResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.country = com.google.api.client.util.Preconditions.checkNotNull(country, "Required parameter country must be specified.");
        this.language = com.google.api.client.util.Preconditions.checkNotNull(language, "Required parameter language must be specified.");
        this.contactName = com.google.api.client.util.Preconditions.checkNotNull(contactName, "Required parameter contactName must be specified.");
        this.contactEmail = com.google.api.client.util.Preconditions.checkNotNull(contactEmail, "Required parameter contactEmail must be specified.");
      }

      @Override
      public Setinventoryverificationcontact set$Xgafv(java.lang.String $Xgafv) {
        return (Setinventoryverificationcontact) super.set$Xgafv($Xgafv);
      }

      @Override
      public Setinventoryverificationcontact setAccessToken(java.lang.String accessToken) {
        return (Setinventoryverificationcontact) super.setAccessToken(accessToken);
      }

      @Override
      public Setinventoryverificationcontact setAlt(java.lang.String alt) {
        return (Setinventoryverificationcontact) super.setAlt(alt);
      }

      @Override
      public Setinventoryverificationcontact setCallback(java.lang.String callback) {
        return (Setinventoryverificationcontact) super.setCallback(callback);
      }

      @Override
      public Setinventoryverificationcontact setFields(java.lang.String fields) {
        return (Setinventoryverificationcontact) super.setFields(fields);
      }

      @Override
      public Setinventoryverificationcontact setKey(java.lang.String key) {
        return (Setinventoryverificationcontact) super.setKey(key);
      }

      @Override
      public Setinventoryverificationcontact setOauthToken(java.lang.String oauthToken) {
        return (Setinventoryverificationcontact) super.setOauthToken(oauthToken);
      }

      @Override
      public Setinventoryverificationcontact setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Setinventoryverificationcontact) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Setinventoryverificationcontact setQuotaUser(java.lang.String quotaUser) {
        return (Setinventoryverificationcontact) super.setQuotaUser(quotaUser);
      }

      @Override
      public Setinventoryverificationcontact setUploadType(java.lang.String uploadType) {
        return (Setinventoryverificationcontact) super.setUploadType(uploadType);
      }

      @Override
      public Setinventoryverificationcontact setUploadProtocol(java.lang.String uploadProtocol) {
        return (Setinventoryverificationcontact) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Setinventoryverificationcontact setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Setinventoryverificationcontact setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The country for which inventory verification is requested. */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** The country for which inventory verification is requested.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /** The country for which inventory verification is requested. */
      public Setinventoryverificationcontact setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      /** The language for which inventory verification is requested. */
      @com.google.api.client.util.Key
      private java.lang.String language;

      /** The language for which inventory verification is requested.
       */
      public java.lang.String getLanguage() {
        return language;
      }

      /** The language for which inventory verification is requested. */
      public Setinventoryverificationcontact setLanguage(java.lang.String language) {
        this.language = language;
        return this;
      }

      /** The name of the inventory verification contact. */
      @com.google.api.client.util.Key
      private java.lang.String contactName;

      /** The name of the inventory verification contact.
       */
      public java.lang.String getContactName() {
        return contactName;
      }

      /** The name of the inventory verification contact. */
      public Setinventoryverificationcontact setContactName(java.lang.String contactName) {
        this.contactName = contactName;
        return this;
      }

      /** The email of the inventory verification contact. */
      @com.google.api.client.util.Key
      private java.lang.String contactEmail;

      /** The email of the inventory verification contact.
       */
      public java.lang.String getContactEmail() {
        return contactEmail;
      }

      /** The email of the inventory verification contact. */
      public Setinventoryverificationcontact setContactEmail(java.lang.String contactEmail) {
        this.contactEmail = contactEmail;
        return this;
      }

      @Override
      public Setinventoryverificationcontact set(String parameterName, Object value) {
        return (Setinventoryverificationcontact) super.set(parameterName, value);
      }
    }
    /**
     * Sets the POS data provider for the specified country.
     *
     * Create a request for the method "liasettings.setposdataprovider".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Setposdataprovider#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to retrieve accessible Google My Business accounts.
     * @param country The country for which the POS data provider is selected.
     * @return the request
     */
    public Setposdataprovider setposdataprovider(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country) throws java.io.IOException {
      Setposdataprovider result = new Setposdataprovider(merchantId, accountId, country);
      initialize(result);
      return result;
    }

    public class Setposdataprovider extends ShoppingContentRequest<com.google.api.services.content.model.LiasettingsSetPosDataProviderResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}/setposdataprovider";

      /**
       * Sets the POS data provider for the specified country.
       *
       * Create a request for the method "liasettings.setposdataprovider".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Setposdataprovider#execute()} method to invoke the remote
       * operation. <p> {@link Setposdataprovider#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to retrieve accessible Google My Business accounts.
       * @param country The country for which the POS data provider is selected.
       * @since 1.13
       */
      protected Setposdataprovider(java.math.BigInteger merchantId, java.math.BigInteger accountId, java.lang.String country) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.LiasettingsSetPosDataProviderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.country = com.google.api.client.util.Preconditions.checkNotNull(country, "Required parameter country must be specified.");
      }

      @Override
      public Setposdataprovider set$Xgafv(java.lang.String $Xgafv) {
        return (Setposdataprovider) super.set$Xgafv($Xgafv);
      }

      @Override
      public Setposdataprovider setAccessToken(java.lang.String accessToken) {
        return (Setposdataprovider) super.setAccessToken(accessToken);
      }

      @Override
      public Setposdataprovider setAlt(java.lang.String alt) {
        return (Setposdataprovider) super.setAlt(alt);
      }

      @Override
      public Setposdataprovider setCallback(java.lang.String callback) {
        return (Setposdataprovider) super.setCallback(callback);
      }

      @Override
      public Setposdataprovider setFields(java.lang.String fields) {
        return (Setposdataprovider) super.setFields(fields);
      }

      @Override
      public Setposdataprovider setKey(java.lang.String key) {
        return (Setposdataprovider) super.setKey(key);
      }

      @Override
      public Setposdataprovider setOauthToken(java.lang.String oauthToken) {
        return (Setposdataprovider) super.setOauthToken(oauthToken);
      }

      @Override
      public Setposdataprovider setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Setposdataprovider) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Setposdataprovider setQuotaUser(java.lang.String quotaUser) {
        return (Setposdataprovider) super.setQuotaUser(quotaUser);
      }

      @Override
      public Setposdataprovider setUploadType(java.lang.String uploadType) {
        return (Setposdataprovider) super.setUploadType(uploadType);
      }

      @Override
      public Setposdataprovider setUploadProtocol(java.lang.String uploadProtocol) {
        return (Setposdataprovider) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Setposdataprovider setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to retrieve accessible Google My Business accounts. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to retrieve accessible Google My Business accounts.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to retrieve accessible Google My Business accounts. */
      public Setposdataprovider setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The country for which the POS data provider is selected. */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** The country for which the POS data provider is selected.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /** The country for which the POS data provider is selected. */
      public Setposdataprovider setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      /** The ID of POS data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger posDataProviderId;

      /** The ID of POS data provider.
       */
      public java.math.BigInteger getPosDataProviderId() {
        return posDataProviderId;
      }

      /** The ID of POS data provider. */
      public Setposdataprovider setPosDataProviderId(java.math.BigInteger posDataProviderId) {
        this.posDataProviderId = posDataProviderId;
        return this;
      }

      /** The account ID by which this merchant is known to the POS data provider. */
      @com.google.api.client.util.Key
      private java.lang.String posExternalAccountId;

      /** The account ID by which this merchant is known to the POS data provider.
       */
      public java.lang.String getPosExternalAccountId() {
        return posExternalAccountId;
      }

      /** The account ID by which this merchant is known to the POS data provider. */
      public Setposdataprovider setPosExternalAccountId(java.lang.String posExternalAccountId) {
        this.posExternalAccountId = posExternalAccountId;
        return this;
      }

      @Override
      public Setposdataprovider set(String parameterName, Object value) {
        return (Setposdataprovider) super.set(parameterName, value);
      }
    }
    /**
     * Updates the LIA settings of the account. Any fields that are not provided are deleted from the
     * resource.
     *
     * Create a request for the method "liasettings.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get or update LIA settings.
     * @param content the {@link com.google.api.services.content.model.LiaSettings}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.LiaSettings content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.LiaSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/liasettings/{accountId}";

      /**
       * Updates the LIA settings of the account. Any fields that are not provided are deleted from the
       * resource.
       *
       * Create a request for the method "liasettings.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get or update LIA settings.
       * @param content the {@link com.google.api.services.content.model.LiaSettings}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.LiaSettings content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.LiaSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get or update LIA settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get or update LIA settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get or update LIA settings. */
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Localinventory collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Localinventory.List request = content.localinventory().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Localinventory localinventory() {
    return new Localinventory();
  }

  /**
   * The "localinventory" collection of methods.
   */
  public class Localinventory {

    /**
     * Updates local inventory for multiple products or stores in a single request.
     *
     * Create a request for the method "localinventory.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.LocalinventoryCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.LocalinventoryCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.LocalinventoryCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/localinventory/batch";

      /**
       * Updates local inventory for multiple products or stores in a single request.
       *
       * Create a request for the method "localinventory.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.LocalinventoryCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.LocalinventoryCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.LocalinventoryCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Updates the local inventory of a product in your Merchant Center account.
     *
     * Create a request for the method "localinventory.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param productId The REST ID of the product for which to update local inventory.
     * @param content the {@link com.google.api.services.content.model.LocalInventory}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, java.lang.String productId, com.google.api.services.content.model.LocalInventory content) throws java.io.IOException {
      Insert result = new Insert(merchantId, productId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.LocalInventory> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products/{productId}/localinventory";

      /**
       * Updates the local inventory of a product in your Merchant Center account.
       *
       * Create a request for the method "localinventory.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param productId The REST ID of the product for which to update local inventory.
       * @param content the {@link com.google.api.services.content.model.LocalInventory}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, java.lang.String productId, com.google.api.services.content.model.LocalInventory content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.LocalInventory.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The REST ID of the product for which to update local inventory. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The REST ID of the product for which to update local inventory.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The REST ID of the product for which to update local inventory. */
      public Insert setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Orderinvoices collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Orderinvoices.List request = content.orderinvoices().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Orderinvoices orderinvoices() {
    return new Orderinvoices();
  }

  /**
   * The "orderinvoices" collection of methods.
   */
  public class Orderinvoices {

    /**
     * Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice
     * enabled orders.
     *
     * Create a request for the method "orderinvoices.createchargeinvoice".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createchargeinvoice#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceRequest}
     * @return the request
     */
    public Createchargeinvoice createchargeinvoice(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceRequest content) throws java.io.IOException {
      Createchargeinvoice result = new Createchargeinvoice(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Createchargeinvoice extends ShoppingContentRequest<com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderinvoices/{orderId}/createChargeInvoice";

      /**
       * Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice
       * enabled orders.
       *
       * Create a request for the method "orderinvoices.createchargeinvoice".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createchargeinvoice#execute()} method to invoke the remote
       * operation. <p> {@link Createchargeinvoice#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceRequest}
       * @since 1.13
       */
      protected Createchargeinvoice(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderinvoicesCreateChargeInvoiceResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Createchargeinvoice set$Xgafv(java.lang.String $Xgafv) {
        return (Createchargeinvoice) super.set$Xgafv($Xgafv);
      }

      @Override
      public Createchargeinvoice setAccessToken(java.lang.String accessToken) {
        return (Createchargeinvoice) super.setAccessToken(accessToken);
      }

      @Override
      public Createchargeinvoice setAlt(java.lang.String alt) {
        return (Createchargeinvoice) super.setAlt(alt);
      }

      @Override
      public Createchargeinvoice setCallback(java.lang.String callback) {
        return (Createchargeinvoice) super.setCallback(callback);
      }

      @Override
      public Createchargeinvoice setFields(java.lang.String fields) {
        return (Createchargeinvoice) super.setFields(fields);
      }

      @Override
      public Createchargeinvoice setKey(java.lang.String key) {
        return (Createchargeinvoice) super.setKey(key);
      }

      @Override
      public Createchargeinvoice setOauthToken(java.lang.String oauthToken) {
        return (Createchargeinvoice) super.setOauthToken(oauthToken);
      }

      @Override
      public Createchargeinvoice setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createchargeinvoice) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createchargeinvoice setQuotaUser(java.lang.String quotaUser) {
        return (Createchargeinvoice) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createchargeinvoice setUploadType(java.lang.String uploadType) {
        return (Createchargeinvoice) super.setUploadType(uploadType);
      }

      @Override
      public Createchargeinvoice setUploadProtocol(java.lang.String uploadProtocol) {
        return (Createchargeinvoice) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Createchargeinvoice setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Createchargeinvoice setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Createchargeinvoice set(String parameterName, Object value) {
        return (Createchargeinvoice) super.set(parameterName, value);
      }
    }
    /**
     * Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice
     * enabled orders. This can only be used for line items that have previously been charged using
     * `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the
     * previous invoice.
     *
     * Create a request for the method "orderinvoices.createrefundinvoice".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createrefundinvoice#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceRequest}
     * @return the request
     */
    public Createrefundinvoice createrefundinvoice(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceRequest content) throws java.io.IOException {
      Createrefundinvoice result = new Createrefundinvoice(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Createrefundinvoice extends ShoppingContentRequest<com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderinvoices/{orderId}/createRefundInvoice";

      /**
       * Creates a refund invoice for one or more shipment groups, and triggers a refund for
       * orderinvoice enabled orders. This can only be used for line items that have previously been
       * charged using `createChargeInvoice`. All amounts (except for the summary) are incremental with
       * respect to the previous invoice.
       *
       * Create a request for the method "orderinvoices.createrefundinvoice".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createrefundinvoice#execute()} method to invoke the remote
       * operation. <p> {@link Createrefundinvoice#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceRequest}
       * @since 1.13
       */
      protected Createrefundinvoice(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderinvoicesCreateRefundInvoiceResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Createrefundinvoice set$Xgafv(java.lang.String $Xgafv) {
        return (Createrefundinvoice) super.set$Xgafv($Xgafv);
      }

      @Override
      public Createrefundinvoice setAccessToken(java.lang.String accessToken) {
        return (Createrefundinvoice) super.setAccessToken(accessToken);
      }

      @Override
      public Createrefundinvoice setAlt(java.lang.String alt) {
        return (Createrefundinvoice) super.setAlt(alt);
      }

      @Override
      public Createrefundinvoice setCallback(java.lang.String callback) {
        return (Createrefundinvoice) super.setCallback(callback);
      }

      @Override
      public Createrefundinvoice setFields(java.lang.String fields) {
        return (Createrefundinvoice) super.setFields(fields);
      }

      @Override
      public Createrefundinvoice setKey(java.lang.String key) {
        return (Createrefundinvoice) super.setKey(key);
      }

      @Override
      public Createrefundinvoice setOauthToken(java.lang.String oauthToken) {
        return (Createrefundinvoice) super.setOauthToken(oauthToken);
      }

      @Override
      public Createrefundinvoice setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createrefundinvoice) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createrefundinvoice setQuotaUser(java.lang.String quotaUser) {
        return (Createrefundinvoice) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createrefundinvoice setUploadType(java.lang.String uploadType) {
        return (Createrefundinvoice) super.setUploadType(uploadType);
      }

      @Override
      public Createrefundinvoice setUploadProtocol(java.lang.String uploadProtocol) {
        return (Createrefundinvoice) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Createrefundinvoice setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Createrefundinvoice setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Createrefundinvoice set(String parameterName, Object value) {
        return (Createrefundinvoice) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Orderreports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Orderreports.List request = content.orderreports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Orderreports orderreports() {
    return new Orderreports();
  }

  /**
   * The "orderreports" collection of methods.
   */
  public class Orderreports {

    /**
     * Retrieves a report for disbursements from your Merchant Center account.
     *
     * Create a request for the method "orderreports.listdisbursements".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Listdisbursements#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @return the request
     */
    public Listdisbursements listdisbursements(java.math.BigInteger merchantId) throws java.io.IOException {
      Listdisbursements result = new Listdisbursements(merchantId);
      initialize(result);
      return result;
    }

    public class Listdisbursements extends ShoppingContentRequest<com.google.api.services.content.model.OrderreportsListDisbursementsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreports/disbursements";

      /**
       * Retrieves a report for disbursements from your Merchant Center account.
       *
       * Create a request for the method "orderreports.listdisbursements".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Listdisbursements#execute()} method to invoke the remote operation.
       * <p> {@link Listdisbursements#initialize(com.google.api.client.googleapis.services.AbstractGoogl
       * eClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @since 1.13
       */
      protected Listdisbursements(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrderreportsListDisbursementsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listdisbursements set$Xgafv(java.lang.String $Xgafv) {
        return (Listdisbursements) super.set$Xgafv($Xgafv);
      }

      @Override
      public Listdisbursements setAccessToken(java.lang.String accessToken) {
        return (Listdisbursements) super.setAccessToken(accessToken);
      }

      @Override
      public Listdisbursements setAlt(java.lang.String alt) {
        return (Listdisbursements) super.setAlt(alt);
      }

      @Override
      public Listdisbursements setCallback(java.lang.String callback) {
        return (Listdisbursements) super.setCallback(callback);
      }

      @Override
      public Listdisbursements setFields(java.lang.String fields) {
        return (Listdisbursements) super.setFields(fields);
      }

      @Override
      public Listdisbursements setKey(java.lang.String key) {
        return (Listdisbursements) super.setKey(key);
      }

      @Override
      public Listdisbursements setOauthToken(java.lang.String oauthToken) {
        return (Listdisbursements) super.setOauthToken(oauthToken);
      }

      @Override
      public Listdisbursements setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listdisbursements) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listdisbursements setQuotaUser(java.lang.String quotaUser) {
        return (Listdisbursements) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listdisbursements setUploadType(java.lang.String uploadType) {
        return (Listdisbursements) super.setUploadType(uploadType);
      }

      @Override
      public Listdisbursements setUploadProtocol(java.lang.String uploadProtocol) {
        return (Listdisbursements) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Listdisbursements setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The last date which disbursements occurred. In ISO 8601 format. Default: current date. */
      @com.google.api.client.util.Key
      private java.lang.String disbursementEndDate;

      /** The last date which disbursements occurred. In ISO 8601 format. Default: current date.
       */
      public java.lang.String getDisbursementEndDate() {
        return disbursementEndDate;
      }

      /** The last date which disbursements occurred. In ISO 8601 format. Default: current date. */
      public Listdisbursements setDisbursementEndDate(java.lang.String disbursementEndDate) {
        this.disbursementEndDate = disbursementEndDate;
        return this;
      }

      /** The first date which disbursements occurred. In ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String disbursementStartDate;

      /** The first date which disbursements occurred. In ISO 8601 format.
       */
      public java.lang.String getDisbursementStartDate() {
        return disbursementStartDate;
      }

      /** The first date which disbursements occurred. In ISO 8601 format. */
      public Listdisbursements setDisbursementStartDate(java.lang.String disbursementStartDate) {
        this.disbursementStartDate = disbursementStartDate;
        return this;
      }

      /** The maximum number of disbursements to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of disbursements to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of disbursements to return in the response, used for paging. */
      public Listdisbursements setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public Listdisbursements setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public Listdisbursements set(String parameterName, Object value) {
        return (Listdisbursements) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of transactions for a disbursement from your Merchant Center account.
     *
     * Create a request for the method "orderreports.listtransactions".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Listtransactions#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param disbursementId The Google-provided ID of the disbursement (found in Wallet).
     * @return the request
     */
    public Listtransactions listtransactions(java.math.BigInteger merchantId, java.lang.String disbursementId) throws java.io.IOException {
      Listtransactions result = new Listtransactions(merchantId, disbursementId);
      initialize(result);
      return result;
    }

    public class Listtransactions extends ShoppingContentRequest<com.google.api.services.content.model.OrderreportsListTransactionsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreports/disbursements/{disbursementId}/transactions";

      /**
       * Retrieves a list of transactions for a disbursement from your Merchant Center account.
       *
       * Create a request for the method "orderreports.listtransactions".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Listtransactions#execute()} method to invoke the remote operation.
       * <p> {@link Listtransactions#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param disbursementId The Google-provided ID of the disbursement (found in Wallet).
       * @since 1.13
       */
      protected Listtransactions(java.math.BigInteger merchantId, java.lang.String disbursementId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrderreportsListTransactionsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.disbursementId = com.google.api.client.util.Preconditions.checkNotNull(disbursementId, "Required parameter disbursementId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listtransactions set$Xgafv(java.lang.String $Xgafv) {
        return (Listtransactions) super.set$Xgafv($Xgafv);
      }

      @Override
      public Listtransactions setAccessToken(java.lang.String accessToken) {
        return (Listtransactions) super.setAccessToken(accessToken);
      }

      @Override
      public Listtransactions setAlt(java.lang.String alt) {
        return (Listtransactions) super.setAlt(alt);
      }

      @Override
      public Listtransactions setCallback(java.lang.String callback) {
        return (Listtransactions) super.setCallback(callback);
      }

      @Override
      public Listtransactions setFields(java.lang.String fields) {
        return (Listtransactions) super.setFields(fields);
      }

      @Override
      public Listtransactions setKey(java.lang.String key) {
        return (Listtransactions) super.setKey(key);
      }

      @Override
      public Listtransactions setOauthToken(java.lang.String oauthToken) {
        return (Listtransactions) super.setOauthToken(oauthToken);
      }

      @Override
      public Listtransactions setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listtransactions) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listtransactions setQuotaUser(java.lang.String quotaUser) {
        return (Listtransactions) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listtransactions setUploadType(java.lang.String uploadType) {
        return (Listtransactions) super.setUploadType(uploadType);
      }

      @Override
      public Listtransactions setUploadProtocol(java.lang.String uploadProtocol) {
        return (Listtransactions) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Listtransactions setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The Google-provided ID of the disbursement (found in Wallet). */
      @com.google.api.client.util.Key
      private java.lang.String disbursementId;

      /** The Google-provided ID of the disbursement (found in Wallet).
       */
      public java.lang.String getDisbursementId() {
        return disbursementId;
      }

      /** The Google-provided ID of the disbursement (found in Wallet). */
      public Listtransactions setDisbursementId(java.lang.String disbursementId) {
        this.disbursementId = disbursementId;
        return this;
      }

      /** The maximum number of disbursements to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of disbursements to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of disbursements to return in the response, used for paging. */
      public Listtransactions setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public Listtransactions setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * The last date in which transaction occurred. In ISO 8601 format. Default: current date.
       */
      @com.google.api.client.util.Key
      private java.lang.String transactionEndDate;

      /** The last date in which transaction occurred. In ISO 8601 format. Default: current date.
       */
      public java.lang.String getTransactionEndDate() {
        return transactionEndDate;
      }

      /**
       * The last date in which transaction occurred. In ISO 8601 format. Default: current date.
       */
      public Listtransactions setTransactionEndDate(java.lang.String transactionEndDate) {
        this.transactionEndDate = transactionEndDate;
        return this;
      }

      /** The first date in which transaction occurred. In ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String transactionStartDate;

      /** The first date in which transaction occurred. In ISO 8601 format.
       */
      public java.lang.String getTransactionStartDate() {
        return transactionStartDate;
      }

      /** The first date in which transaction occurred. In ISO 8601 format. */
      public Listtransactions setTransactionStartDate(java.lang.String transactionStartDate) {
        this.transactionStartDate = transactionStartDate;
        return this;
      }

      @Override
      public Listtransactions set(String parameterName, Object value) {
        return (Listtransactions) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Orderreturns collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Orderreturns.List request = content.orderreturns().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Orderreturns orderreturns() {
    return new Orderreturns();
  }

  /**
   * The "orderreturns" collection of methods.
   */
  public class Orderreturns {

    /**
     * Acks an order return in your Merchant Center account.
     *
     * Create a request for the method "orderreturns.acknowledge".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param returnId The ID of the return.
     * @param content the {@link com.google.api.services.content.model.OrderreturnsAcknowledgeRequest}
     * @return the request
     */
    public Acknowledge acknowledge(java.math.BigInteger merchantId, java.lang.String returnId, com.google.api.services.content.model.OrderreturnsAcknowledgeRequest content) throws java.io.IOException {
      Acknowledge result = new Acknowledge(merchantId, returnId, content);
      initialize(result);
      return result;
    }

    public class Acknowledge extends ShoppingContentRequest<com.google.api.services.content.model.OrderreturnsAcknowledgeResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreturns/{returnId}/acknowledge";

      /**
       * Acks an order return in your Merchant Center account.
       *
       * Create a request for the method "orderreturns.acknowledge".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation. <p>
       * {@link
       * Acknowledge#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param returnId The ID of the return.
       * @param content the {@link com.google.api.services.content.model.OrderreturnsAcknowledgeRequest}
       * @since 1.13
       */
      protected Acknowledge(java.math.BigInteger merchantId, java.lang.String returnId, com.google.api.services.content.model.OrderreturnsAcknowledgeRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderreturnsAcknowledgeResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnId = com.google.api.client.util.Preconditions.checkNotNull(returnId, "Required parameter returnId must be specified.");
      }

      @Override
      public Acknowledge set$Xgafv(java.lang.String $Xgafv) {
        return (Acknowledge) super.set$Xgafv($Xgafv);
      }

      @Override
      public Acknowledge setAccessToken(java.lang.String accessToken) {
        return (Acknowledge) super.setAccessToken(accessToken);
      }

      @Override
      public Acknowledge setAlt(java.lang.String alt) {
        return (Acknowledge) super.setAlt(alt);
      }

      @Override
      public Acknowledge setCallback(java.lang.String callback) {
        return (Acknowledge) super.setCallback(callback);
      }

      @Override
      public Acknowledge setFields(java.lang.String fields) {
        return (Acknowledge) super.setFields(fields);
      }

      @Override
      public Acknowledge setKey(java.lang.String key) {
        return (Acknowledge) super.setKey(key);
      }

      @Override
      public Acknowledge setOauthToken(java.lang.String oauthToken) {
        return (Acknowledge) super.setOauthToken(oauthToken);
      }

      @Override
      public Acknowledge setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Acknowledge) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Acknowledge setQuotaUser(java.lang.String quotaUser) {
        return (Acknowledge) super.setQuotaUser(quotaUser);
      }

      @Override
      public Acknowledge setUploadType(java.lang.String uploadType) {
        return (Acknowledge) super.setUploadType(uploadType);
      }

      @Override
      public Acknowledge setUploadProtocol(java.lang.String uploadProtocol) {
        return (Acknowledge) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Acknowledge setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the return. */
      @com.google.api.client.util.Key
      private java.lang.String returnId;

      /** The ID of the return.
       */
      public java.lang.String getReturnId() {
        return returnId;
      }

      /** The ID of the return. */
      public Acknowledge setReturnId(java.lang.String returnId) {
        this.returnId = returnId;
        return this;
      }

      @Override
      public Acknowledge set(String parameterName, Object value) {
        return (Acknowledge) super.set(parameterName, value);
      }
    }
    /**
     * Create return in your Merchant Center account.
     *
     * Create a request for the method "orderreturns.createorderreturn".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createorderreturn#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param content the {@link com.google.api.services.content.model.OrderreturnsCreateOrderReturnRequest}
     * @return the request
     */
    public Createorderreturn createorderreturn(java.math.BigInteger merchantId, com.google.api.services.content.model.OrderreturnsCreateOrderReturnRequest content) throws java.io.IOException {
      Createorderreturn result = new Createorderreturn(merchantId, content);
      initialize(result);
      return result;
    }

    public class Createorderreturn extends ShoppingContentRequest<com.google.api.services.content.model.OrderreturnsCreateOrderReturnResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreturns/createOrderReturn";

      /**
       * Create return in your Merchant Center account.
       *
       * Create a request for the method "orderreturns.createorderreturn".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createorderreturn#execute()} method to invoke the remote operation.
       * <p> {@link Createorderreturn#initialize(com.google.api.client.googleapis.services.AbstractGoogl
       * eClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param content the {@link com.google.api.services.content.model.OrderreturnsCreateOrderReturnRequest}
       * @since 1.13
       */
      protected Createorderreturn(java.math.BigInteger merchantId, com.google.api.services.content.model.OrderreturnsCreateOrderReturnRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderreturnsCreateOrderReturnResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Createorderreturn set$Xgafv(java.lang.String $Xgafv) {
        return (Createorderreturn) super.set$Xgafv($Xgafv);
      }

      @Override
      public Createorderreturn setAccessToken(java.lang.String accessToken) {
        return (Createorderreturn) super.setAccessToken(accessToken);
      }

      @Override
      public Createorderreturn setAlt(java.lang.String alt) {
        return (Createorderreturn) super.setAlt(alt);
      }

      @Override
      public Createorderreturn setCallback(java.lang.String callback) {
        return (Createorderreturn) super.setCallback(callback);
      }

      @Override
      public Createorderreturn setFields(java.lang.String fields) {
        return (Createorderreturn) super.setFields(fields);
      }

      @Override
      public Createorderreturn setKey(java.lang.String key) {
        return (Createorderreturn) super.setKey(key);
      }

      @Override
      public Createorderreturn setOauthToken(java.lang.String oauthToken) {
        return (Createorderreturn) super.setOauthToken(oauthToken);
      }

      @Override
      public Createorderreturn setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createorderreturn) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createorderreturn setQuotaUser(java.lang.String quotaUser) {
        return (Createorderreturn) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createorderreturn setUploadType(java.lang.String uploadType) {
        return (Createorderreturn) super.setUploadType(uploadType);
      }

      @Override
      public Createorderreturn setUploadProtocol(java.lang.String uploadProtocol) {
        return (Createorderreturn) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Createorderreturn setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Createorderreturn set(String parameterName, Object value) {
        return (Createorderreturn) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves an order return from your Merchant Center account.
     *
     * Create a request for the method "orderreturns.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param returnId Merchant order return ID generated by Google.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String returnId) throws java.io.IOException {
      Get result = new Get(merchantId, returnId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.MerchantOrderReturn> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreturns/{returnId}";

      /**
       * Retrieves an order return from your Merchant Center account.
       *
       * Create a request for the method "orderreturns.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param returnId Merchant order return ID generated by Google.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String returnId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.MerchantOrderReturn.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnId = com.google.api.client.util.Preconditions.checkNotNull(returnId, "Required parameter returnId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Merchant order return ID generated by Google. */
      @com.google.api.client.util.Key
      private java.lang.String returnId;

      /** Merchant order return ID generated by Google.
       */
      public java.lang.String getReturnId() {
        return returnId;
      }

      /** Merchant order return ID generated by Google. */
      public Get setReturnId(java.lang.String returnId) {
        this.returnId = returnId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists order returns in your Merchant Center account.
     *
     * Create a request for the method "orderreturns.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.OrderreturnsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreturns";

      /**
       * Lists order returns in your Merchant Center account.
       *
       * Create a request for the method "orderreturns.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrderreturnsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * Obtains order returns that match the acknowledgement status. When set to true, obtains
       * order returns that have been acknowledged. When false, obtains order returns that have not
       * been acknowledged. When not provided, obtains order returns regardless of their
       * acknowledgement status. We recommend using this filter set to `false`, in conjunction with
       * the `acknowledge` call, such that only un-acknowledged order returns are returned.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean acknowledged;

      /** Obtains order returns that match the acknowledgement status. When set to true, obtains order
     returns that have been acknowledged. When false, obtains order returns that have not been
     acknowledged. When not provided, obtains order returns regardless of their acknowledgement status.
     We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such
     that only un-acknowledged order returns are returned.
       */
      public java.lang.Boolean getAcknowledged() {
        return acknowledged;
      }

      /**
       * Obtains order returns that match the acknowledgement status. When set to true, obtains
       * order returns that have been acknowledged. When false, obtains order returns that have not
       * been acknowledged. When not provided, obtains order returns regardless of their
       * acknowledgement status. We recommend using this filter set to `false`, in conjunction with
       * the `acknowledge` call, such that only un-acknowledged order returns are returned.
       */
      public List setAcknowledged(java.lang.Boolean acknowledged) {
        this.acknowledged = acknowledged;
        return this;
      }

      /** Obtains order returns created before this date (inclusively), in ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String createdEndDate;

      /** Obtains order returns created before this date (inclusively), in ISO 8601 format.
       */
      public java.lang.String getCreatedEndDate() {
        return createdEndDate;
      }

      /** Obtains order returns created before this date (inclusively), in ISO 8601 format. */
      public List setCreatedEndDate(java.lang.String createdEndDate) {
        this.createdEndDate = createdEndDate;
        return this;
      }

      /** Obtains order returns created after this date (inclusively), in ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String createdStartDate;

      /** Obtains order returns created after this date (inclusively), in ISO 8601 format.
       */
      public java.lang.String getCreatedStartDate() {
        return createdStartDate;
      }

      /** Obtains order returns created after this date (inclusively), in ISO 8601 format. */
      public List setCreatedStartDate(java.lang.String createdStartDate) {
        this.createdStartDate = createdStartDate;
        return this;
      }

      /**
       * Obtains order returns with the specified order ids. If this parameter is provided,
       * createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and
       * acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber
       * parameters are provided, the obtained results will include all order returns that either
       * match the specified order id or the specified tracking number.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> googleOrderIds;

      /** Obtains order returns with the specified order ids. If this parameter is provided,
     createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged
     parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are
     provided, the obtained results will include all order returns that either match the specified order
     id or the specified tracking number.
       */
      public java.util.List<java.lang.String> getGoogleOrderIds() {
        return googleOrderIds;
      }

      /**
       * Obtains order returns with the specified order ids. If this parameter is provided,
       * createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and
       * acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber
       * parameters are provided, the obtained results will include all order returns that either
       * match the specified order id or the specified tracking number.
       */
      public List setGoogleOrderIds(java.util.List<java.lang.String> googleOrderIds) {
        this.googleOrderIds = googleOrderIds;
        return this;
      }

      /**
       * The maximum number of order returns to return in the response, used for paging. The default
       * value is 25 returns per page, and the maximum allowed value is 250 returns per page.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of order returns to return in the response, used for paging. The default value
     is 25 returns per page, and the maximum allowed value is 250 returns per page.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of order returns to return in the response, used for paging. The default
       * value is 25 returns per page, and the maximum allowed value is 250 returns per page.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Return the results in the specified order. */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Return the results in the specified order.
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** Return the results in the specified order. */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Obtains order returns that match any shipment state provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment states.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> shipmentStates;

      /** Obtains order returns that match any shipment state provided in this parameter. When this parameter
     is not provided, order returns are obtained regardless of their shipment states.
       */
      public java.util.List<java.lang.String> getShipmentStates() {
        return shipmentStates;
      }

      /**
       * Obtains order returns that match any shipment state provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment states.
       */
      public List setShipmentStates(java.util.List<java.lang.String> shipmentStates) {
        this.shipmentStates = shipmentStates;
        return this;
      }

      /**
       * Obtains order returns that match any shipment status provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment
       * statuses.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> shipmentStatus;

      /** Obtains order returns that match any shipment status provided in this parameter. When this
     parameter is not provided, order returns are obtained regardless of their shipment statuses.
       */
      public java.util.List<java.lang.String> getShipmentStatus() {
        return shipmentStatus;
      }

      /**
       * Obtains order returns that match any shipment status provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment
       * statuses.
       */
      public List setShipmentStatus(java.util.List<java.lang.String> shipmentStatus) {
        this.shipmentStatus = shipmentStatus;
        return this;
      }

      /**
       * Obtains order returns with the specified tracking numbers. If this parameter is provided,
       * createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and
       * acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber
       * parameters are provided, the obtained results will include all order returns that either
       * match the specified order id or the specified tracking number.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> shipmentTrackingNumbers;

      /** Obtains order returns with the specified tracking numbers. If this parameter is provided,
     createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged
     parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are
     provided, the obtained results will include all order returns that either match the specified order
     id or the specified tracking number.
       */
      public java.util.List<java.lang.String> getShipmentTrackingNumbers() {
        return shipmentTrackingNumbers;
      }

      /**
       * Obtains order returns with the specified tracking numbers. If this parameter is provided,
       * createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and
       * acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber
       * parameters are provided, the obtained results will include all order returns that either
       * match the specified order id or the specified tracking number.
       */
      public List setShipmentTrackingNumbers(java.util.List<java.lang.String> shipmentTrackingNumbers) {
        this.shipmentTrackingNumbers = shipmentTrackingNumbers;
        return this;
      }

      /**
       * Obtains order returns that match any shipment type provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment types.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> shipmentTypes;

      /** Obtains order returns that match any shipment type provided in this parameter. When this parameter
     is not provided, order returns are obtained regardless of their shipment types.
       */
      public java.util.List<java.lang.String> getShipmentTypes() {
        return shipmentTypes;
      }

      /**
       * Obtains order returns that match any shipment type provided in this parameter. When this
       * parameter is not provided, order returns are obtained regardless of their shipment types.
       */
      public List setShipmentTypes(java.util.List<java.lang.String> shipmentTypes) {
        this.shipmentTypes = shipmentTypes;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Processes return in your Merchant Center account.
     *
     * Create a request for the method "orderreturns.process".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Process#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param returnId The ID of the return.
     * @param content the {@link com.google.api.services.content.model.OrderreturnsProcessRequest}
     * @return the request
     */
    public Process process(java.math.BigInteger merchantId, java.lang.String returnId, com.google.api.services.content.model.OrderreturnsProcessRequest content) throws java.io.IOException {
      Process result = new Process(merchantId, returnId, content);
      initialize(result);
      return result;
    }

    public class Process extends ShoppingContentRequest<com.google.api.services.content.model.OrderreturnsProcessResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orderreturns/{returnId}/process";

      /**
       * Processes return in your Merchant Center account.
       *
       * Create a request for the method "orderreturns.process".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Process#execute()} method to invoke the remote operation. <p>
       * {@link
       * Process#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param returnId The ID of the return.
       * @param content the {@link com.google.api.services.content.model.OrderreturnsProcessRequest}
       * @since 1.13
       */
      protected Process(java.math.BigInteger merchantId, java.lang.String returnId, com.google.api.services.content.model.OrderreturnsProcessRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderreturnsProcessResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnId = com.google.api.client.util.Preconditions.checkNotNull(returnId, "Required parameter returnId must be specified.");
      }

      @Override
      public Process set$Xgafv(java.lang.String $Xgafv) {
        return (Process) super.set$Xgafv($Xgafv);
      }

      @Override
      public Process setAccessToken(java.lang.String accessToken) {
        return (Process) super.setAccessToken(accessToken);
      }

      @Override
      public Process setAlt(java.lang.String alt) {
        return (Process) super.setAlt(alt);
      }

      @Override
      public Process setCallback(java.lang.String callback) {
        return (Process) super.setCallback(callback);
      }

      @Override
      public Process setFields(java.lang.String fields) {
        return (Process) super.setFields(fields);
      }

      @Override
      public Process setKey(java.lang.String key) {
        return (Process) super.setKey(key);
      }

      @Override
      public Process setOauthToken(java.lang.String oauthToken) {
        return (Process) super.setOauthToken(oauthToken);
      }

      @Override
      public Process setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Process) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Process setQuotaUser(java.lang.String quotaUser) {
        return (Process) super.setQuotaUser(quotaUser);
      }

      @Override
      public Process setUploadType(java.lang.String uploadType) {
        return (Process) super.setUploadType(uploadType);
      }

      @Override
      public Process setUploadProtocol(java.lang.String uploadProtocol) {
        return (Process) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Process setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the return. */
      @com.google.api.client.util.Key
      private java.lang.String returnId;

      /** The ID of the return.
       */
      public java.lang.String getReturnId() {
        return returnId;
      }

      /** The ID of the return. */
      public Process setReturnId(java.lang.String returnId) {
        this.returnId = returnId;
        return this;
      }

      @Override
      public Process set(String parameterName, Object value) {
        return (Process) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Orders collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Orders.List request = content.orders().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Orders orders() {
    return new Orders();
  }

  /**
   * The "orders" collection of methods.
   */
  public class Orders {

    /**
     * Marks an order as acknowledged.
     *
     * Create a request for the method "orders.acknowledge".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersAcknowledgeRequest}
     * @return the request
     */
    public Acknowledge acknowledge(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersAcknowledgeRequest content) throws java.io.IOException {
      Acknowledge result = new Acknowledge(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Acknowledge extends ShoppingContentRequest<com.google.api.services.content.model.OrdersAcknowledgeResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/acknowledge";

      /**
       * Marks an order as acknowledged.
       *
       * Create a request for the method "orders.acknowledge".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Acknowledge#execute()} method to invoke the remote operation. <p>
       * {@link
       * Acknowledge#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersAcknowledgeRequest}
       * @since 1.13
       */
      protected Acknowledge(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersAcknowledgeRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersAcknowledgeResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Acknowledge set$Xgafv(java.lang.String $Xgafv) {
        return (Acknowledge) super.set$Xgafv($Xgafv);
      }

      @Override
      public Acknowledge setAccessToken(java.lang.String accessToken) {
        return (Acknowledge) super.setAccessToken(accessToken);
      }

      @Override
      public Acknowledge setAlt(java.lang.String alt) {
        return (Acknowledge) super.setAlt(alt);
      }

      @Override
      public Acknowledge setCallback(java.lang.String callback) {
        return (Acknowledge) super.setCallback(callback);
      }

      @Override
      public Acknowledge setFields(java.lang.String fields) {
        return (Acknowledge) super.setFields(fields);
      }

      @Override
      public Acknowledge setKey(java.lang.String key) {
        return (Acknowledge) super.setKey(key);
      }

      @Override
      public Acknowledge setOauthToken(java.lang.String oauthToken) {
        return (Acknowledge) super.setOauthToken(oauthToken);
      }

      @Override
      public Acknowledge setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Acknowledge) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Acknowledge setQuotaUser(java.lang.String quotaUser) {
        return (Acknowledge) super.setQuotaUser(quotaUser);
      }

      @Override
      public Acknowledge setUploadType(java.lang.String uploadType) {
        return (Acknowledge) super.setUploadType(uploadType);
      }

      @Override
      public Acknowledge setUploadProtocol(java.lang.String uploadProtocol) {
        return (Acknowledge) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Acknowledge setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Acknowledge setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Acknowledge set(String parameterName, Object value) {
        return (Acknowledge) super.set(parameterName, value);
      }
    }
    /**
     * Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`".
     *
     * Create a request for the method "orders.advancetestorder".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Advancetestorder#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the test order to modify.
     * @return the request
     */
    public Advancetestorder advancetestorder(java.math.BigInteger merchantId, java.lang.String orderId) throws java.io.IOException {
      Advancetestorder result = new Advancetestorder(merchantId, orderId);
      initialize(result);
      return result;
    }

    public class Advancetestorder extends ShoppingContentRequest<com.google.api.services.content.model.OrdersAdvanceTestOrderResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/testorders/{orderId}/advance";

      /**
       * Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`".
       *
       * Create a request for the method "orders.advancetestorder".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Advancetestorder#execute()} method to invoke the remote operation.
       * <p> {@link Advancetestorder#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the test order to modify.
       * @since 1.13
       */
      protected Advancetestorder(java.math.BigInteger merchantId, java.lang.String orderId) {
        super(ShoppingContent.this, "POST", REST_PATH, null, com.google.api.services.content.model.OrdersAdvanceTestOrderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Advancetestorder set$Xgafv(java.lang.String $Xgafv) {
        return (Advancetestorder) super.set$Xgafv($Xgafv);
      }

      @Override
      public Advancetestorder setAccessToken(java.lang.String accessToken) {
        return (Advancetestorder) super.setAccessToken(accessToken);
      }

      @Override
      public Advancetestorder setAlt(java.lang.String alt) {
        return (Advancetestorder) super.setAlt(alt);
      }

      @Override
      public Advancetestorder setCallback(java.lang.String callback) {
        return (Advancetestorder) super.setCallback(callback);
      }

      @Override
      public Advancetestorder setFields(java.lang.String fields) {
        return (Advancetestorder) super.setFields(fields);
      }

      @Override
      public Advancetestorder setKey(java.lang.String key) {
        return (Advancetestorder) super.setKey(key);
      }

      @Override
      public Advancetestorder setOauthToken(java.lang.String oauthToken) {
        return (Advancetestorder) super.setOauthToken(oauthToken);
      }

      @Override
      public Advancetestorder setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Advancetestorder) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Advancetestorder setQuotaUser(java.lang.String quotaUser) {
        return (Advancetestorder) super.setQuotaUser(quotaUser);
      }

      @Override
      public Advancetestorder setUploadType(java.lang.String uploadType) {
        return (Advancetestorder) super.setUploadType(uploadType);
      }

      @Override
      public Advancetestorder setUploadProtocol(java.lang.String uploadProtocol) {
        return (Advancetestorder) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Advancetestorder setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the test order to modify. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the test order to modify.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the test order to modify. */
      public Advancetestorder setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Advancetestorder set(String parameterName, Object value) {
        return (Advancetestorder) super.set(parameterName, value);
      }
    }
    /**
     * Cancels all line items in an order, making a full refund.
     *
     * Create a request for the method "orders.cancel".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order to cancel.
     * @param content the {@link com.google.api.services.content.model.OrdersCancelRequest}
     * @return the request
     */
    public Cancel cancel(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelRequest content) throws java.io.IOException {
      Cancel result = new Cancel(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Cancel extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCancelResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/cancel";

      /**
       * Cancels all line items in an order, making a full refund.
       *
       * Create a request for the method "orders.cancel".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
       * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order to cancel.
       * @param content the {@link com.google.api.services.content.model.OrdersCancelRequest}
       * @since 1.13
       */
      protected Cancel(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCancelResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Cancel set$Xgafv(java.lang.String $Xgafv) {
        return (Cancel) super.set$Xgafv($Xgafv);
      }

      @Override
      public Cancel setAccessToken(java.lang.String accessToken) {
        return (Cancel) super.setAccessToken(accessToken);
      }

      @Override
      public Cancel setAlt(java.lang.String alt) {
        return (Cancel) super.setAlt(alt);
      }

      @Override
      public Cancel setCallback(java.lang.String callback) {
        return (Cancel) super.setCallback(callback);
      }

      @Override
      public Cancel setFields(java.lang.String fields) {
        return (Cancel) super.setFields(fields);
      }

      @Override
      public Cancel setKey(java.lang.String key) {
        return (Cancel) super.setKey(key);
      }

      @Override
      public Cancel setOauthToken(java.lang.String oauthToken) {
        return (Cancel) super.setOauthToken(oauthToken);
      }

      @Override
      public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Cancel) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Cancel setQuotaUser(java.lang.String quotaUser) {
        return (Cancel) super.setQuotaUser(quotaUser);
      }

      @Override
      public Cancel setUploadType(java.lang.String uploadType) {
        return (Cancel) super.setUploadType(uploadType);
      }

      @Override
      public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
        return (Cancel) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Cancel setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order to cancel. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order to cancel.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order to cancel. */
      public Cancel setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Cancel set(String parameterName, Object value) {
        return (Cancel) super.set(parameterName, value);
      }
    }
    /**
     * Cancels a line item, making a full refund.
     *
     * Create a request for the method "orders.cancellineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Cancellineitem#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersCancelLineItemRequest}
     * @return the request
     */
    public Cancellineitem cancellineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelLineItemRequest content) throws java.io.IOException {
      Cancellineitem result = new Cancellineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Cancellineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCancelLineItemResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/cancelLineItem";

      /**
       * Cancels a line item, making a full refund.
       *
       * Create a request for the method "orders.cancellineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Cancellineitem#execute()} method to invoke the remote operation.
       * <p> {@link Cancellineitem#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersCancelLineItemRequest}
       * @since 1.13
       */
      protected Cancellineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelLineItemRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCancelLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Cancellineitem set$Xgafv(java.lang.String $Xgafv) {
        return (Cancellineitem) super.set$Xgafv($Xgafv);
      }

      @Override
      public Cancellineitem setAccessToken(java.lang.String accessToken) {
        return (Cancellineitem) super.setAccessToken(accessToken);
      }

      @Override
      public Cancellineitem setAlt(java.lang.String alt) {
        return (Cancellineitem) super.setAlt(alt);
      }

      @Override
      public Cancellineitem setCallback(java.lang.String callback) {
        return (Cancellineitem) super.setCallback(callback);
      }

      @Override
      public Cancellineitem setFields(java.lang.String fields) {
        return (Cancellineitem) super.setFields(fields);
      }

      @Override
      public Cancellineitem setKey(java.lang.String key) {
        return (Cancellineitem) super.setKey(key);
      }

      @Override
      public Cancellineitem setOauthToken(java.lang.String oauthToken) {
        return (Cancellineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Cancellineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Cancellineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Cancellineitem setQuotaUser(java.lang.String quotaUser) {
        return (Cancellineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Cancellineitem setUploadType(java.lang.String uploadType) {
        return (Cancellineitem) super.setUploadType(uploadType);
      }

      @Override
      public Cancellineitem setUploadProtocol(java.lang.String uploadProtocol) {
        return (Cancellineitem) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Cancellineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Cancellineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Cancellineitem set(String parameterName, Object value) {
        return (Cancellineitem) super.set(parameterName, value);
      }
    }
    /**
     * Sandbox only. Cancels a test order for customer-initiated cancellation.
     *
     * Create a request for the method "orders.canceltestorderbycustomer".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Canceltestorderbycustomer#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the test order to cancel.
     * @param content the {@link com.google.api.services.content.model.OrdersCancelTestOrderByCustomerRequest}
     * @return the request
     */
    public Canceltestorderbycustomer canceltestorderbycustomer(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelTestOrderByCustomerRequest content) throws java.io.IOException {
      Canceltestorderbycustomer result = new Canceltestorderbycustomer(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Canceltestorderbycustomer extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCancelTestOrderByCustomerResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/testorders/{orderId}/cancelByCustomer";

      /**
       * Sandbox only. Cancels a test order for customer-initiated cancellation.
       *
       * Create a request for the method "orders.canceltestorderbycustomer".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Canceltestorderbycustomer#execute()} method to invoke the remote
       * operation. <p> {@link Canceltestorderbycustomer#initialize(com.google.api.client.googleapis.ser
       * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the test order to cancel.
       * @param content the {@link com.google.api.services.content.model.OrdersCancelTestOrderByCustomerRequest}
       * @since 1.13
       */
      protected Canceltestorderbycustomer(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCancelTestOrderByCustomerRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCancelTestOrderByCustomerResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Canceltestorderbycustomer set$Xgafv(java.lang.String $Xgafv) {
        return (Canceltestorderbycustomer) super.set$Xgafv($Xgafv);
      }

      @Override
      public Canceltestorderbycustomer setAccessToken(java.lang.String accessToken) {
        return (Canceltestorderbycustomer) super.setAccessToken(accessToken);
      }

      @Override
      public Canceltestorderbycustomer setAlt(java.lang.String alt) {
        return (Canceltestorderbycustomer) super.setAlt(alt);
      }

      @Override
      public Canceltestorderbycustomer setCallback(java.lang.String callback) {
        return (Canceltestorderbycustomer) super.setCallback(callback);
      }

      @Override
      public Canceltestorderbycustomer setFields(java.lang.String fields) {
        return (Canceltestorderbycustomer) super.setFields(fields);
      }

      @Override
      public Canceltestorderbycustomer setKey(java.lang.String key) {
        return (Canceltestorderbycustomer) super.setKey(key);
      }

      @Override
      public Canceltestorderbycustomer setOauthToken(java.lang.String oauthToken) {
        return (Canceltestorderbycustomer) super.setOauthToken(oauthToken);
      }

      @Override
      public Canceltestorderbycustomer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Canceltestorderbycustomer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Canceltestorderbycustomer setQuotaUser(java.lang.String quotaUser) {
        return (Canceltestorderbycustomer) super.setQuotaUser(quotaUser);
      }

      @Override
      public Canceltestorderbycustomer setUploadType(java.lang.String uploadType) {
        return (Canceltestorderbycustomer) super.setUploadType(uploadType);
      }

      @Override
      public Canceltestorderbycustomer setUploadProtocol(java.lang.String uploadProtocol) {
        return (Canceltestorderbycustomer) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Canceltestorderbycustomer setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the test order to cancel. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the test order to cancel.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the test order to cancel. */
      public Canceltestorderbycustomer setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Canceltestorderbycustomer set(String parameterName, Object value) {
        return (Canceltestorderbycustomer) super.set(parameterName, value);
      }
    }
    /**
     * Sandbox only. Creates a test order.
     *
     * Create a request for the method "orders.createtestorder".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createtestorder#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
     * @param content the {@link com.google.api.services.content.model.OrdersCreateTestOrderRequest}
     * @return the request
     */
    public Createtestorder createtestorder(java.math.BigInteger merchantId, com.google.api.services.content.model.OrdersCreateTestOrderRequest content) throws java.io.IOException {
      Createtestorder result = new Createtestorder(merchantId, content);
      initialize(result);
      return result;
    }

    public class Createtestorder extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCreateTestOrderResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/testorders";

      /**
       * Sandbox only. Creates a test order.
       *
       * Create a request for the method "orders.createtestorder".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createtestorder#execute()} method to invoke the remote operation.
       * <p> {@link Createtestorder#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
       * @param content the {@link com.google.api.services.content.model.OrdersCreateTestOrderRequest}
       * @since 1.13
       */
      protected Createtestorder(java.math.BigInteger merchantId, com.google.api.services.content.model.OrdersCreateTestOrderRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCreateTestOrderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Createtestorder set$Xgafv(java.lang.String $Xgafv) {
        return (Createtestorder) super.set$Xgafv($Xgafv);
      }

      @Override
      public Createtestorder setAccessToken(java.lang.String accessToken) {
        return (Createtestorder) super.setAccessToken(accessToken);
      }

      @Override
      public Createtestorder setAlt(java.lang.String alt) {
        return (Createtestorder) super.setAlt(alt);
      }

      @Override
      public Createtestorder setCallback(java.lang.String callback) {
        return (Createtestorder) super.setCallback(callback);
      }

      @Override
      public Createtestorder setFields(java.lang.String fields) {
        return (Createtestorder) super.setFields(fields);
      }

      @Override
      public Createtestorder setKey(java.lang.String key) {
        return (Createtestorder) super.setKey(key);
      }

      @Override
      public Createtestorder setOauthToken(java.lang.String oauthToken) {
        return (Createtestorder) super.setOauthToken(oauthToken);
      }

      @Override
      public Createtestorder setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createtestorder) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createtestorder setQuotaUser(java.lang.String quotaUser) {
        return (Createtestorder) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createtestorder setUploadType(java.lang.String uploadType) {
        return (Createtestorder) super.setUploadType(uploadType);
      }

      @Override
      public Createtestorder setUploadProtocol(java.lang.String uploadProtocol) {
        return (Createtestorder) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      public Createtestorder setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Createtestorder set(String parameterName, Object value) {
        return (Createtestorder) super.set(parameterName, value);
      }
    }
    /**
     * Sandbox only. Creates a test return.
     *
     * Create a request for the method "orders.createtestreturn".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Createtestreturn#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersCreateTestReturnRequest}
     * @return the request
     */
    public Createtestreturn createtestreturn(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCreateTestReturnRequest content) throws java.io.IOException {
      Createtestreturn result = new Createtestreturn(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Createtestreturn extends ShoppingContentRequest<com.google.api.services.content.model.OrdersCreateTestReturnResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/testreturn";

      /**
       * Sandbox only. Creates a test return.
       *
       * Create a request for the method "orders.createtestreturn".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Createtestreturn#execute()} method to invoke the remote operation.
       * <p> {@link Createtestreturn#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersCreateTestReturnRequest}
       * @since 1.13
       */
      protected Createtestreturn(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersCreateTestReturnRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersCreateTestReturnResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Createtestreturn set$Xgafv(java.lang.String $Xgafv) {
        return (Createtestreturn) super.set$Xgafv($Xgafv);
      }

      @Override
      public Createtestreturn setAccessToken(java.lang.String accessToken) {
        return (Createtestreturn) super.setAccessToken(accessToken);
      }

      @Override
      public Createtestreturn setAlt(java.lang.String alt) {
        return (Createtestreturn) super.setAlt(alt);
      }

      @Override
      public Createtestreturn setCallback(java.lang.String callback) {
        return (Createtestreturn) super.setCallback(callback);
      }

      @Override
      public Createtestreturn setFields(java.lang.String fields) {
        return (Createtestreturn) super.setFields(fields);
      }

      @Override
      public Createtestreturn setKey(java.lang.String key) {
        return (Createtestreturn) super.setKey(key);
      }

      @Override
      public Createtestreturn setOauthToken(java.lang.String oauthToken) {
        return (Createtestreturn) super.setOauthToken(oauthToken);
      }

      @Override
      public Createtestreturn setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createtestreturn) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createtestreturn setQuotaUser(java.lang.String quotaUser) {
        return (Createtestreturn) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createtestreturn setUploadType(java.lang.String uploadType) {
        return (Createtestreturn) super.setUploadType(uploadType);
      }

      @Override
      public Createtestreturn setUploadProtocol(java.lang.String uploadProtocol) {
        return (Createtestreturn) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Createtestreturn setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Createtestreturn setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Createtestreturn set(String parameterName, Object value) {
        return (Createtestreturn) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves an order from your Merchant Center account.
     *
     * Create a request for the method "orders.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String orderId) throws java.io.IOException {
      Get result = new Get(merchantId, orderId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Order> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}";

      /**
       * Retrieves an order from your Merchant Center account.
       *
       * Create a request for the method "orders.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String orderId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Order.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Get setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves an order using merchant order ID.
     *
     * Create a request for the method "orders.getbymerchantorderid".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getbymerchantorderid#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param merchantOrderId The merchant order ID to be looked for.
     * @return the request
     */
    public Getbymerchantorderid getbymerchantorderid(java.math.BigInteger merchantId, java.lang.String merchantOrderId) throws java.io.IOException {
      Getbymerchantorderid result = new Getbymerchantorderid(merchantId, merchantOrderId);
      initialize(result);
      return result;
    }

    public class Getbymerchantorderid extends ShoppingContentRequest<com.google.api.services.content.model.OrdersGetByMerchantOrderIdResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/ordersbymerchantid/{merchantOrderId}";

      /**
       * Retrieves an order using merchant order ID.
       *
       * Create a request for the method "orders.getbymerchantorderid".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getbymerchantorderid#execute()} method to invoke the remote
       * operation. <p> {@link Getbymerchantorderid#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param merchantOrderId The merchant order ID to be looked for.
       * @since 1.13
       */
      protected Getbymerchantorderid(java.math.BigInteger merchantId, java.lang.String merchantOrderId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersGetByMerchantOrderIdResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.merchantOrderId = com.google.api.client.util.Preconditions.checkNotNull(merchantOrderId, "Required parameter merchantOrderId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getbymerchantorderid set$Xgafv(java.lang.String $Xgafv) {
        return (Getbymerchantorderid) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getbymerchantorderid setAccessToken(java.lang.String accessToken) {
        return (Getbymerchantorderid) super.setAccessToken(accessToken);
      }

      @Override
      public Getbymerchantorderid setAlt(java.lang.String alt) {
        return (Getbymerchantorderid) super.setAlt(alt);
      }

      @Override
      public Getbymerchantorderid setCallback(java.lang.String callback) {
        return (Getbymerchantorderid) super.setCallback(callback);
      }

      @Override
      public Getbymerchantorderid setFields(java.lang.String fields) {
        return (Getbymerchantorderid) super.setFields(fields);
      }

      @Override
      public Getbymerchantorderid setKey(java.lang.String key) {
        return (Getbymerchantorderid) super.setKey(key);
      }

      @Override
      public Getbymerchantorderid setOauthToken(java.lang.String oauthToken) {
        return (Getbymerchantorderid) super.setOauthToken(oauthToken);
      }

      @Override
      public Getbymerchantorderid setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getbymerchantorderid) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getbymerchantorderid setQuotaUser(java.lang.String quotaUser) {
        return (Getbymerchantorderid) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getbymerchantorderid setUploadType(java.lang.String uploadType) {
        return (Getbymerchantorderid) super.setUploadType(uploadType);
      }

      @Override
      public Getbymerchantorderid setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getbymerchantorderid) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Getbymerchantorderid setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The merchant order ID to be looked for. */
      @com.google.api.client.util.Key
      private java.lang.String merchantOrderId;

      /** The merchant order ID to be looked for.
       */
      public java.lang.String getMerchantOrderId() {
        return merchantOrderId;
      }

      /** The merchant order ID to be looked for. */
      public Getbymerchantorderid setMerchantOrderId(java.lang.String merchantOrderId) {
        this.merchantOrderId = merchantOrderId;
        return this;
      }

      @Override
      public Getbymerchantorderid set(String parameterName, Object value) {
        return (Getbymerchantorderid) super.set(parameterName, value);
      }
    }
    /**
     * Sandbox only. Retrieves an order template that can be used to quickly create a new order in
     * sandbox.
     *
     * Create a request for the method "orders.gettestordertemplate".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Gettestordertemplate#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
     * @param templateName The name of the template to retrieve.
     * @return the request
     */
    public Gettestordertemplate gettestordertemplate(java.math.BigInteger merchantId, java.lang.String templateName) throws java.io.IOException {
      Gettestordertemplate result = new Gettestordertemplate(merchantId, templateName);
      initialize(result);
      return result;
    }

    public class Gettestordertemplate extends ShoppingContentRequest<com.google.api.services.content.model.OrdersGetTestOrderTemplateResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/testordertemplates/{templateName}";

      /**
       * Sandbox only. Retrieves an order template that can be used to quickly create a new order in
       * sandbox.
       *
       * Create a request for the method "orders.gettestordertemplate".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Gettestordertemplate#execute()} method to invoke the remote
       * operation. <p> {@link Gettestordertemplate#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
       * @param templateName The name of the template to retrieve.
       * @since 1.13
       */
      protected Gettestordertemplate(java.math.BigInteger merchantId, java.lang.String templateName) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersGetTestOrderTemplateResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.templateName = com.google.api.client.util.Preconditions.checkNotNull(templateName, "Required parameter templateName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Gettestordertemplate set$Xgafv(java.lang.String $Xgafv) {
        return (Gettestordertemplate) super.set$Xgafv($Xgafv);
      }

      @Override
      public Gettestordertemplate setAccessToken(java.lang.String accessToken) {
        return (Gettestordertemplate) super.setAccessToken(accessToken);
      }

      @Override
      public Gettestordertemplate setAlt(java.lang.String alt) {
        return (Gettestordertemplate) super.setAlt(alt);
      }

      @Override
      public Gettestordertemplate setCallback(java.lang.String callback) {
        return (Gettestordertemplate) super.setCallback(callback);
      }

      @Override
      public Gettestordertemplate setFields(java.lang.String fields) {
        return (Gettestordertemplate) super.setFields(fields);
      }

      @Override
      public Gettestordertemplate setKey(java.lang.String key) {
        return (Gettestordertemplate) super.setKey(key);
      }

      @Override
      public Gettestordertemplate setOauthToken(java.lang.String oauthToken) {
        return (Gettestordertemplate) super.setOauthToken(oauthToken);
      }

      @Override
      public Gettestordertemplate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Gettestordertemplate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Gettestordertemplate setQuotaUser(java.lang.String quotaUser) {
        return (Gettestordertemplate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Gettestordertemplate setUploadType(java.lang.String uploadType) {
        return (Gettestordertemplate) super.setUploadType(uploadType);
      }

      @Override
      public Gettestordertemplate setUploadProtocol(java.lang.String uploadProtocol) {
        return (Gettestordertemplate) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that should manage the order. This cannot be a multi-client account.
       */
      public Gettestordertemplate setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The name of the template to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String templateName;

      /** The name of the template to retrieve.
       */
      public java.lang.String getTemplateName() {
        return templateName;
      }

      /** The name of the template to retrieve. */
      public Gettestordertemplate setTemplateName(java.lang.String templateName) {
        this.templateName = templateName;
        return this;
      }

      /** The country of the template to retrieve. Defaults to `US`. */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** The country of the template to retrieve. Defaults to `US`.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /** The country of the template to retrieve. Defaults to `US`. */
      public Gettestordertemplate setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      @Override
      public Gettestordertemplate set(String parameterName, Object value) {
        return (Gettestordertemplate) super.set(parameterName, value);
      }
    }
    /**
     * Deprecated. Notifies that item return and refund was handled directly by merchant outside of
     * Google payments processing (e.g. cash refund done in store). Note: We recommend calling the
     * returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the
     * customer. This helps to prevent possible differences arising between merchant and Google
     * transaction records. We also recommend having the point of sale system communicate with Google to
     * ensure that customers do not receive a double refund by first refunding via Google then via an
     * in-store return.
     *
     * Create a request for the method "orders.instorerefundlineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Instorerefundlineitem#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersInStoreRefundLineItemRequest}
     * @return the request
     */
    public Instorerefundlineitem instorerefundlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersInStoreRefundLineItemRequest content) throws java.io.IOException {
      Instorerefundlineitem result = new Instorerefundlineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Instorerefundlineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersInStoreRefundLineItemResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/inStoreRefundLineItem";

      /**
       * Deprecated. Notifies that item return and refund was handled directly by merchant outside of
       * Google payments processing (e.g. cash refund done in store). Note: We recommend calling the
       * returnrefundlineitem method to refund in-store returns. We will issue the refund directly to
       * the customer. This helps to prevent possible differences arising between merchant and Google
       * transaction records. We also recommend having the point of sale system communicate with Google
       * to ensure that customers do not receive a double refund by first refunding via Google then via
       * an in-store return.
       *
       * Create a request for the method "orders.instorerefundlineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Instorerefundlineitem#execute()} method to invoke the remote
       * operation. <p> {@link Instorerefundlineitem#initialize(com.google.api.client.googleapis.service
       * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersInStoreRefundLineItemRequest}
       * @since 1.13
       */
      protected Instorerefundlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersInStoreRefundLineItemRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersInStoreRefundLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Instorerefundlineitem set$Xgafv(java.lang.String $Xgafv) {
        return (Instorerefundlineitem) super.set$Xgafv($Xgafv);
      }

      @Override
      public Instorerefundlineitem setAccessToken(java.lang.String accessToken) {
        return (Instorerefundlineitem) super.setAccessToken(accessToken);
      }

      @Override
      public Instorerefundlineitem setAlt(java.lang.String alt) {
        return (Instorerefundlineitem) super.setAlt(alt);
      }

      @Override
      public Instorerefundlineitem setCallback(java.lang.String callback) {
        return (Instorerefundlineitem) super.setCallback(callback);
      }

      @Override
      public Instorerefundlineitem setFields(java.lang.String fields) {
        return (Instorerefundlineitem) super.setFields(fields);
      }

      @Override
      public Instorerefundlineitem setKey(java.lang.String key) {
        return (Instorerefundlineitem) super.setKey(key);
      }

      @Override
      public Instorerefundlineitem setOauthToken(java.lang.String oauthToken) {
        return (Instorerefundlineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Instorerefundlineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Instorerefundlineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Instorerefundlineitem setQuotaUser(java.lang.String quotaUser) {
        return (Instorerefundlineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Instorerefundlineitem setUploadType(java.lang.String uploadType) {
        return (Instorerefundlineitem) super.setUploadType(uploadType);
      }

      @Override
      public Instorerefundlineitem setUploadProtocol(java.lang.String uploadProtocol) {
        return (Instorerefundlineitem) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Instorerefundlineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Instorerefundlineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Instorerefundlineitem set(String parameterName, Object value) {
        return (Instorerefundlineitem) super.set(parameterName, value);
      }
    }
    /**
     * Lists the orders in your Merchant Center account.
     *
     * Create a request for the method "orders.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.OrdersListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders";

      /**
       * Lists the orders in your Merchant Center account.
       *
       * Create a request for the method "orders.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.OrdersListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * Obtains orders that match the acknowledgement status. When set to true, obtains orders that
       * have been acknowledged. When false, obtains orders that have not been acknowledged. We
       * recommend using this filter set to `false`, in conjunction with the `acknowledge` call,
       * such that only un-acknowledged orders are returned.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean acknowledged;

      /** Obtains orders that match the acknowledgement status. When set to true, obtains orders that have
     been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using
     this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-
     acknowledged orders are returned.
       */
      public java.lang.Boolean getAcknowledged() {
        return acknowledged;
      }

      /**
       * Obtains orders that match the acknowledgement status. When set to true, obtains orders that
       * have been acknowledged. When false, obtains orders that have not been acknowledged. We
       * recommend using this filter set to `false`, in conjunction with the `acknowledge` call,
       * such that only un-acknowledged orders are returned.
       */
      public List setAcknowledged(java.lang.Boolean acknowledged) {
        this.acknowledged = acknowledged;
        return this;
      }

      /**
       * The maximum number of orders to return in the response, used for paging. The default value
       * is 25 orders per page, and the maximum allowed value is 250 orders per page.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of orders to return in the response, used for paging. The default value is 25
     orders per page, and the maximum allowed value is 250 orders per page.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of orders to return in the response, used for paging. The default value
       * is 25 orders per page, and the maximum allowed value is 250 orders per page.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * Order results by placement date in descending or ascending order. Acceptable values are: -
       * placedDateAsc - placedDateDesc
       */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Order results by placement date in descending or ascending order. Acceptable values are: -
     placedDateAsc - placedDateDesc
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /**
       * Order results by placement date in descending or ascending order. Acceptable values are: -
       * placedDateAsc - placedDateDesc
       */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Obtains orders placed before this date (exclusively), in ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String placedDateEnd;

      /** Obtains orders placed before this date (exclusively), in ISO 8601 format.
       */
      public java.lang.String getPlacedDateEnd() {
        return placedDateEnd;
      }

      /** Obtains orders placed before this date (exclusively), in ISO 8601 format. */
      public List setPlacedDateEnd(java.lang.String placedDateEnd) {
        this.placedDateEnd = placedDateEnd;
        return this;
      }

      /** Obtains orders placed after this date (inclusively), in ISO 8601 format. */
      @com.google.api.client.util.Key
      private java.lang.String placedDateStart;

      /** Obtains orders placed after this date (inclusively), in ISO 8601 format.
       */
      public java.lang.String getPlacedDateStart() {
        return placedDateStart;
      }

      /** Obtains orders placed after this date (inclusively), in ISO 8601 format. */
      public List setPlacedDateStart(java.lang.String placedDateStart) {
        this.placedDateStart = placedDateStart;
        return this;
      }

      /**
       * Obtains orders that match any of the specified statuses. Please note that `active` is a
       * shortcut for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for
       * `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and
       * `canceled`.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> statuses;

      /** Obtains orders that match any of the specified statuses. Please note that `active` is a shortcut
     for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for `shipped`,
     `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and `canceled`.
       */
      public java.util.List<java.lang.String> getStatuses() {
        return statuses;
      }

      /**
       * Obtains orders that match any of the specified statuses. Please note that `active` is a
       * shortcut for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for
       * `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and
       * `canceled`.
       */
      public List setStatuses(java.util.List<java.lang.String> statuses) {
        this.statuses = statuses;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Issues a partial or total refund for items and shipment.
     *
     * Create a request for the method "orders.refunditem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Refunditem#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order to refund.
     * @param content the {@link com.google.api.services.content.model.OrdersRefundItemRequest}
     * @return the request
     */
    public Refunditem refunditem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundItemRequest content) throws java.io.IOException {
      Refunditem result = new Refunditem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Refunditem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersRefundItemResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/refunditem";

      /**
       * Issues a partial or total refund for items and shipment.
       *
       * Create a request for the method "orders.refunditem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Refunditem#execute()} method to invoke the remote operation. <p>
       * {@link
       * Refunditem#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order to refund.
       * @param content the {@link com.google.api.services.content.model.OrdersRefundItemRequest}
       * @since 1.13
       */
      protected Refunditem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundItemRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersRefundItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Refunditem set$Xgafv(java.lang.String $Xgafv) {
        return (Refunditem) super.set$Xgafv($Xgafv);
      }

      @Override
      public Refunditem setAccessToken(java.lang.String accessToken) {
        return (Refunditem) super.setAccessToken(accessToken);
      }

      @Override
      public Refunditem setAlt(java.lang.String alt) {
        return (Refunditem) super.setAlt(alt);
      }

      @Override
      public Refunditem setCallback(java.lang.String callback) {
        return (Refunditem) super.setCallback(callback);
      }

      @Override
      public Refunditem setFields(java.lang.String fields) {
        return (Refunditem) super.setFields(fields);
      }

      @Override
      public Refunditem setKey(java.lang.String key) {
        return (Refunditem) super.setKey(key);
      }

      @Override
      public Refunditem setOauthToken(java.lang.String oauthToken) {
        return (Refunditem) super.setOauthToken(oauthToken);
      }

      @Override
      public Refunditem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Refunditem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Refunditem setQuotaUser(java.lang.String quotaUser) {
        return (Refunditem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Refunditem setUploadType(java.lang.String uploadType) {
        return (Refunditem) super.setUploadType(uploadType);
      }

      @Override
      public Refunditem setUploadProtocol(java.lang.String uploadProtocol) {
        return (Refunditem) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Refunditem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order to refund. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order to refund.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order to refund. */
      public Refunditem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Refunditem set(String parameterName, Object value) {
        return (Refunditem) super.set(parameterName, value);
      }
    }
    /**
     * Issues a partial or total refund for an order.
     *
     * Create a request for the method "orders.refundorder".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Refundorder#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order to refund.
     * @param content the {@link com.google.api.services.content.model.OrdersRefundOrderRequest}
     * @return the request
     */
    public Refundorder refundorder(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundOrderRequest content) throws java.io.IOException {
      Refundorder result = new Refundorder(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Refundorder extends ShoppingContentRequest<com.google.api.services.content.model.OrdersRefundOrderResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/refundorder";

      /**
       * Issues a partial or total refund for an order.
       *
       * Create a request for the method "orders.refundorder".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Refundorder#execute()} method to invoke the remote operation. <p>
       * {@link
       * Refundorder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order to refund.
       * @param content the {@link com.google.api.services.content.model.OrdersRefundOrderRequest}
       * @since 1.13
       */
      protected Refundorder(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRefundOrderRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersRefundOrderResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Refundorder set$Xgafv(java.lang.String $Xgafv) {
        return (Refundorder) super.set$Xgafv($Xgafv);
      }

      @Override
      public Refundorder setAccessToken(java.lang.String accessToken) {
        return (Refundorder) super.setAccessToken(accessToken);
      }

      @Override
      public Refundorder setAlt(java.lang.String alt) {
        return (Refundorder) super.setAlt(alt);
      }

      @Override
      public Refundorder setCallback(java.lang.String callback) {
        return (Refundorder) super.setCallback(callback);
      }

      @Override
      public Refundorder setFields(java.lang.String fields) {
        return (Refundorder) super.setFields(fields);
      }

      @Override
      public Refundorder setKey(java.lang.String key) {
        return (Refundorder) super.setKey(key);
      }

      @Override
      public Refundorder setOauthToken(java.lang.String oauthToken) {
        return (Refundorder) super.setOauthToken(oauthToken);
      }

      @Override
      public Refundorder setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Refundorder) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Refundorder setQuotaUser(java.lang.String quotaUser) {
        return (Refundorder) super.setQuotaUser(quotaUser);
      }

      @Override
      public Refundorder setUploadType(java.lang.String uploadType) {
        return (Refundorder) super.setUploadType(uploadType);
      }

      @Override
      public Refundorder setUploadProtocol(java.lang.String uploadProtocol) {
        return (Refundorder) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Refundorder setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order to refund. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order to refund.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order to refund. */
      public Refundorder setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Refundorder set(String parameterName, Object value) {
        return (Refundorder) super.set(parameterName, value);
      }
    }
    /**
     * Rejects return on an line item.
     *
     * Create a request for the method "orders.rejectreturnlineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Rejectreturnlineitem#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersRejectReturnLineItemRequest}
     * @return the request
     */
    public Rejectreturnlineitem rejectreturnlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRejectReturnLineItemRequest content) throws java.io.IOException {
      Rejectreturnlineitem result = new Rejectreturnlineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Rejectreturnlineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersRejectReturnLineItemResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/rejectReturnLineItem";

      /**
       * Rejects return on an line item.
       *
       * Create a request for the method "orders.rejectreturnlineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Rejectreturnlineitem#execute()} method to invoke the remote
       * operation. <p> {@link Rejectreturnlineitem#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersRejectReturnLineItemRequest}
       * @since 1.13
       */
      protected Rejectreturnlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersRejectReturnLineItemRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersRejectReturnLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Rejectreturnlineitem set$Xgafv(java.lang.String $Xgafv) {
        return (Rejectreturnlineitem) super.set$Xgafv($Xgafv);
      }

      @Override
      public Rejectreturnlineitem setAccessToken(java.lang.String accessToken) {
        return (Rejectreturnlineitem) super.setAccessToken(accessToken);
      }

      @Override
      public Rejectreturnlineitem setAlt(java.lang.String alt) {
        return (Rejectreturnlineitem) super.setAlt(alt);
      }

      @Override
      public Rejectreturnlineitem setCallback(java.lang.String callback) {
        return (Rejectreturnlineitem) super.setCallback(callback);
      }

      @Override
      public Rejectreturnlineitem setFields(java.lang.String fields) {
        return (Rejectreturnlineitem) super.setFields(fields);
      }

      @Override
      public Rejectreturnlineitem setKey(java.lang.String key) {
        return (Rejectreturnlineitem) super.setKey(key);
      }

      @Override
      public Rejectreturnlineitem setOauthToken(java.lang.String oauthToken) {
        return (Rejectreturnlineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Rejectreturnlineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Rejectreturnlineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Rejectreturnlineitem setQuotaUser(java.lang.String quotaUser) {
        return (Rejectreturnlineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Rejectreturnlineitem setUploadType(java.lang.String uploadType) {
        return (Rejectreturnlineitem) super.setUploadType(uploadType);
      }

      @Override
      public Rejectreturnlineitem setUploadProtocol(java.lang.String uploadProtocol) {
        return (Rejectreturnlineitem) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Rejectreturnlineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Rejectreturnlineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Rejectreturnlineitem set(String parameterName, Object value) {
        return (Rejectreturnlineitem) super.set(parameterName, value);
      }
    }
    /**
     * Returns and refunds a line item. Note that this method can only be called on fully shipped
     * orders. Please also note that the Orderreturns API is the preferred way to handle returns after
     * you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search
     * for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot
     * be found, then we recommend using this API to issue a refund.
     *
     * Create a request for the method "orders.returnrefundlineitem".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Returnrefundlineitem#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersReturnRefundLineItemRequest}
     * @return the request
     */
    public Returnrefundlineitem returnrefundlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersReturnRefundLineItemRequest content) throws java.io.IOException {
      Returnrefundlineitem result = new Returnrefundlineitem(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Returnrefundlineitem extends ShoppingContentRequest<com.google.api.services.content.model.OrdersReturnRefundLineItemResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/returnRefundLineItem";

      /**
       * Returns and refunds a line item. Note that this method can only be called on fully shipped
       * orders. Please also note that the Orderreturns API is the preferred way to handle returns after
       * you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to
       * search for the return, and then use Orderreturns.processreturn to issue the refund. If the
       * return cannot be found, then we recommend using this API to issue a refund.
       *
       * Create a request for the method "orders.returnrefundlineitem".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Returnrefundlineitem#execute()} method to invoke the remote
       * operation. <p> {@link Returnrefundlineitem#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersReturnRefundLineItemRequest}
       * @since 1.13
       */
      protected Returnrefundlineitem(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersReturnRefundLineItemRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersReturnRefundLineItemResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Returnrefundlineitem set$Xgafv(java.lang.String $Xgafv) {
        return (Returnrefundlineitem) super.set$Xgafv($Xgafv);
      }

      @Override
      public Returnrefundlineitem setAccessToken(java.lang.String accessToken) {
        return (Returnrefundlineitem) super.setAccessToken(accessToken);
      }

      @Override
      public Returnrefundlineitem setAlt(java.lang.String alt) {
        return (Returnrefundlineitem) super.setAlt(alt);
      }

      @Override
      public Returnrefundlineitem setCallback(java.lang.String callback) {
        return (Returnrefundlineitem) super.setCallback(callback);
      }

      @Override
      public Returnrefundlineitem setFields(java.lang.String fields) {
        return (Returnrefundlineitem) super.setFields(fields);
      }

      @Override
      public Returnrefundlineitem setKey(java.lang.String key) {
        return (Returnrefundlineitem) super.setKey(key);
      }

      @Override
      public Returnrefundlineitem setOauthToken(java.lang.String oauthToken) {
        return (Returnrefundlineitem) super.setOauthToken(oauthToken);
      }

      @Override
      public Returnrefundlineitem setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Returnrefundlineitem) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Returnrefundlineitem setQuotaUser(java.lang.String quotaUser) {
        return (Returnrefundlineitem) super.setQuotaUser(quotaUser);
      }

      @Override
      public Returnrefundlineitem setUploadType(java.lang.String uploadType) {
        return (Returnrefundlineitem) super.setUploadType(uploadType);
      }

      @Override
      public Returnrefundlineitem setUploadProtocol(java.lang.String uploadProtocol) {
        return (Returnrefundlineitem) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Returnrefundlineitem setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Returnrefundlineitem setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Returnrefundlineitem set(String parameterName, Object value) {
        return (Returnrefundlineitem) super.set(parameterName, value);
      }
    }
    /**
     * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value
     * pairs. A common use case would be to supply us with additional structured information about a
     * line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved
     * as part of the orders resource.
     *
     * Create a request for the method "orders.setlineitemmetadata".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Setlineitemmetadata#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersSetLineItemMetadataRequest}
     * @return the request
     */
    public Setlineitemmetadata setlineitemmetadata(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersSetLineItemMetadataRequest content) throws java.io.IOException {
      Setlineitemmetadata result = new Setlineitemmetadata(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Setlineitemmetadata extends ShoppingContentRequest<com.google.api.services.content.model.OrdersSetLineItemMetadataResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/setLineItemMetadata";

      /**
       * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value
       * pairs. A common use case would be to supply us with additional structured information about a
       * line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved
       * as part of the orders resource.
       *
       * Create a request for the method "orders.setlineitemmetadata".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Setlineitemmetadata#execute()} method to invoke the remote
       * operation. <p> {@link Setlineitemmetadata#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersSetLineItemMetadataRequest}
       * @since 1.13
       */
      protected Setlineitemmetadata(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersSetLineItemMetadataRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersSetLineItemMetadataResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Setlineitemmetadata set$Xgafv(java.lang.String $Xgafv) {
        return (Setlineitemmetadata) super.set$Xgafv($Xgafv);
      }

      @Override
      public Setlineitemmetadata setAccessToken(java.lang.String accessToken) {
        return (Setlineitemmetadata) super.setAccessToken(accessToken);
      }

      @Override
      public Setlineitemmetadata setAlt(java.lang.String alt) {
        return (Setlineitemmetadata) super.setAlt(alt);
      }

      @Override
      public Setlineitemmetadata setCallback(java.lang.String callback) {
        return (Setlineitemmetadata) super.setCallback(callback);
      }

      @Override
      public Setlineitemmetadata setFields(java.lang.String fields) {
        return (Setlineitemmetadata) super.setFields(fields);
      }

      @Override
      public Setlineitemmetadata setKey(java.lang.String key) {
        return (Setlineitemmetadata) super.setKey(key);
      }

      @Override
      public Setlineitemmetadata setOauthToken(java.lang.String oauthToken) {
        return (Setlineitemmetadata) super.setOauthToken(oauthToken);
      }

      @Override
      public Setlineitemmetadata setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Setlineitemmetadata) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Setlineitemmetadata setQuotaUser(java.lang.String quotaUser) {
        return (Setlineitemmetadata) super.setQuotaUser(quotaUser);
      }

      @Override
      public Setlineitemmetadata setUploadType(java.lang.String uploadType) {
        return (Setlineitemmetadata) super.setUploadType(uploadType);
      }

      @Override
      public Setlineitemmetadata setUploadProtocol(java.lang.String uploadProtocol) {
        return (Setlineitemmetadata) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Setlineitemmetadata setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Setlineitemmetadata setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Setlineitemmetadata set(String parameterName, Object value) {
        return (Setlineitemmetadata) super.set(parameterName, value);
      }
    }
    /**
     * Marks line item(s) as shipped.
     *
     * Create a request for the method "orders.shiplineitems".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Shiplineitems#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersShipLineItemsRequest}
     * @return the request
     */
    public Shiplineitems shiplineitems(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersShipLineItemsRequest content) throws java.io.IOException {
      Shiplineitems result = new Shiplineitems(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Shiplineitems extends ShoppingContentRequest<com.google.api.services.content.model.OrdersShipLineItemsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/shipLineItems";

      /**
       * Marks line item(s) as shipped.
       *
       * Create a request for the method "orders.shiplineitems".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Shiplineitems#execute()} method to invoke the remote operation. <p>
       * {@link Shiplineitems#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersShipLineItemsRequest}
       * @since 1.13
       */
      protected Shiplineitems(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersShipLineItemsRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersShipLineItemsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Shiplineitems set$Xgafv(java.lang.String $Xgafv) {
        return (Shiplineitems) super.set$Xgafv($Xgafv);
      }

      @Override
      public Shiplineitems setAccessToken(java.lang.String accessToken) {
        return (Shiplineitems) super.setAccessToken(accessToken);
      }

      @Override
      public Shiplineitems setAlt(java.lang.String alt) {
        return (Shiplineitems) super.setAlt(alt);
      }

      @Override
      public Shiplineitems setCallback(java.lang.String callback) {
        return (Shiplineitems) super.setCallback(callback);
      }

      @Override
      public Shiplineitems setFields(java.lang.String fields) {
        return (Shiplineitems) super.setFields(fields);
      }

      @Override
      public Shiplineitems setKey(java.lang.String key) {
        return (Shiplineitems) super.setKey(key);
      }

      @Override
      public Shiplineitems setOauthToken(java.lang.String oauthToken) {
        return (Shiplineitems) super.setOauthToken(oauthToken);
      }

      @Override
      public Shiplineitems setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Shiplineitems) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Shiplineitems setQuotaUser(java.lang.String quotaUser) {
        return (Shiplineitems) super.setQuotaUser(quotaUser);
      }

      @Override
      public Shiplineitems setUploadType(java.lang.String uploadType) {
        return (Shiplineitems) super.setUploadType(uploadType);
      }

      @Override
      public Shiplineitems setUploadProtocol(java.lang.String uploadProtocol) {
        return (Shiplineitems) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Shiplineitems setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Shiplineitems setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Shiplineitems set(String parameterName, Object value) {
        return (Shiplineitems) super.set(parameterName, value);
      }
    }
    /**
     * Updates ship by and delivery by dates for a line item.
     *
     * Create a request for the method "orders.updatelineitemshippingdetails".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updatelineitemshippingdetails#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsRequest}
     * @return the request
     */
    public Updatelineitemshippingdetails updatelineitemshippingdetails(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsRequest content) throws java.io.IOException {
      Updatelineitemshippingdetails result = new Updatelineitemshippingdetails(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Updatelineitemshippingdetails extends ShoppingContentRequest<com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/updateLineItemShippingDetails";

      /**
       * Updates ship by and delivery by dates for a line item.
       *
       * Create a request for the method "orders.updatelineitemshippingdetails".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updatelineitemshippingdetails#execute()} method to invoke the
       * remote operation. <p> {@link Updatelineitemshippingdetails#initialize(com.google.api.client.goo
       * gleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsRequest}
       * @since 1.13
       */
      protected Updatelineitemshippingdetails(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersUpdateLineItemShippingDetailsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Updatelineitemshippingdetails set$Xgafv(java.lang.String $Xgafv) {
        return (Updatelineitemshippingdetails) super.set$Xgafv($Xgafv);
      }

      @Override
      public Updatelineitemshippingdetails setAccessToken(java.lang.String accessToken) {
        return (Updatelineitemshippingdetails) super.setAccessToken(accessToken);
      }

      @Override
      public Updatelineitemshippingdetails setAlt(java.lang.String alt) {
        return (Updatelineitemshippingdetails) super.setAlt(alt);
      }

      @Override
      public Updatelineitemshippingdetails setCallback(java.lang.String callback) {
        return (Updatelineitemshippingdetails) super.setCallback(callback);
      }

      @Override
      public Updatelineitemshippingdetails setFields(java.lang.String fields) {
        return (Updatelineitemshippingdetails) super.setFields(fields);
      }

      @Override
      public Updatelineitemshippingdetails setKey(java.lang.String key) {
        return (Updatelineitemshippingdetails) super.setKey(key);
      }

      @Override
      public Updatelineitemshippingdetails setOauthToken(java.lang.String oauthToken) {
        return (Updatelineitemshippingdetails) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatelineitemshippingdetails setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatelineitemshippingdetails) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatelineitemshippingdetails setQuotaUser(java.lang.String quotaUser) {
        return (Updatelineitemshippingdetails) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatelineitemshippingdetails setUploadType(java.lang.String uploadType) {
        return (Updatelineitemshippingdetails) super.setUploadType(uploadType);
      }

      @Override
      public Updatelineitemshippingdetails setUploadProtocol(java.lang.String uploadProtocol) {
        return (Updatelineitemshippingdetails) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Updatelineitemshippingdetails setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Updatelineitemshippingdetails setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Updatelineitemshippingdetails set(String parameterName, Object value) {
        return (Updatelineitemshippingdetails) super.set(parameterName, value);
      }
    }
    /**
     * Updates the merchant order ID for a given order.
     *
     * Create a request for the method "orders.updatemerchantorderid".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updatemerchantorderid#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest}
     * @return the request
     */
    public Updatemerchantorderid updatemerchantorderid(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest content) throws java.io.IOException {
      Updatemerchantorderid result = new Updatemerchantorderid(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Updatemerchantorderid extends ShoppingContentRequest<com.google.api.services.content.model.OrdersUpdateMerchantOrderIdResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/updateMerchantOrderId";

      /**
       * Updates the merchant order ID for a given order.
       *
       * Create a request for the method "orders.updatemerchantorderid".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updatemerchantorderid#execute()} method to invoke the remote
       * operation. <p> {@link Updatemerchantorderid#initialize(com.google.api.client.googleapis.service
       * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest}
       * @since 1.13
       */
      protected Updatemerchantorderid(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersUpdateMerchantOrderIdResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Updatemerchantorderid set$Xgafv(java.lang.String $Xgafv) {
        return (Updatemerchantorderid) super.set$Xgafv($Xgafv);
      }

      @Override
      public Updatemerchantorderid setAccessToken(java.lang.String accessToken) {
        return (Updatemerchantorderid) super.setAccessToken(accessToken);
      }

      @Override
      public Updatemerchantorderid setAlt(java.lang.String alt) {
        return (Updatemerchantorderid) super.setAlt(alt);
      }

      @Override
      public Updatemerchantorderid setCallback(java.lang.String callback) {
        return (Updatemerchantorderid) super.setCallback(callback);
      }

      @Override
      public Updatemerchantorderid setFields(java.lang.String fields) {
        return (Updatemerchantorderid) super.setFields(fields);
      }

      @Override
      public Updatemerchantorderid setKey(java.lang.String key) {
        return (Updatemerchantorderid) super.setKey(key);
      }

      @Override
      public Updatemerchantorderid setOauthToken(java.lang.String oauthToken) {
        return (Updatemerchantorderid) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatemerchantorderid setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatemerchantorderid) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatemerchantorderid setQuotaUser(java.lang.String quotaUser) {
        return (Updatemerchantorderid) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatemerchantorderid setUploadType(java.lang.String uploadType) {
        return (Updatemerchantorderid) super.setUploadType(uploadType);
      }

      @Override
      public Updatemerchantorderid setUploadProtocol(java.lang.String uploadProtocol) {
        return (Updatemerchantorderid) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Updatemerchantorderid setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Updatemerchantorderid setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Updatemerchantorderid set(String parameterName, Object value) {
        return (Updatemerchantorderid) super.set(parameterName, value);
      }
    }
    /**
     * Updates a shipment's status, carrier, and/or tracking ID.
     *
     * Create a request for the method "orders.updateshipment".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Updateshipment#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param orderId The ID of the order.
     * @param content the {@link com.google.api.services.content.model.OrdersUpdateShipmentRequest}
     * @return the request
     */
    public Updateshipment updateshipment(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateShipmentRequest content) throws java.io.IOException {
      Updateshipment result = new Updateshipment(merchantId, orderId, content);
      initialize(result);
      return result;
    }

    public class Updateshipment extends ShoppingContentRequest<com.google.api.services.content.model.OrdersUpdateShipmentResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/orders/{orderId}/updateShipment";

      /**
       * Updates a shipment's status, carrier, and/or tracking ID.
       *
       * Create a request for the method "orders.updateshipment".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Updateshipment#execute()} method to invoke the remote operation.
       * <p> {@link Updateshipment#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param merchantId The ID of the account that manages the order. This cannot be a multi-client account.
       * @param orderId The ID of the order.
       * @param content the {@link com.google.api.services.content.model.OrdersUpdateShipmentRequest}
       * @since 1.13
       */
      protected Updateshipment(java.math.BigInteger merchantId, java.lang.String orderId, com.google.api.services.content.model.OrdersUpdateShipmentRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrdersUpdateShipmentResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.orderId = com.google.api.client.util.Preconditions.checkNotNull(orderId, "Required parameter orderId must be specified.");
      }

      @Override
      public Updateshipment set$Xgafv(java.lang.String $Xgafv) {
        return (Updateshipment) super.set$Xgafv($Xgafv);
      }

      @Override
      public Updateshipment setAccessToken(java.lang.String accessToken) {
        return (Updateshipment) super.setAccessToken(accessToken);
      }

      @Override
      public Updateshipment setAlt(java.lang.String alt) {
        return (Updateshipment) super.setAlt(alt);
      }

      @Override
      public Updateshipment setCallback(java.lang.String callback) {
        return (Updateshipment) super.setCallback(callback);
      }

      @Override
      public Updateshipment setFields(java.lang.String fields) {
        return (Updateshipment) super.setFields(fields);
      }

      @Override
      public Updateshipment setKey(java.lang.String key) {
        return (Updateshipment) super.setKey(key);
      }

      @Override
      public Updateshipment setOauthToken(java.lang.String oauthToken) {
        return (Updateshipment) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateshipment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateshipment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateshipment setQuotaUser(java.lang.String quotaUser) {
        return (Updateshipment) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateshipment setUploadType(java.lang.String uploadType) {
        return (Updateshipment) super.setUploadType(uploadType);
      }

      @Override
      public Updateshipment setUploadProtocol(java.lang.String uploadProtocol) {
        return (Updateshipment) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that manages the order. This cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account that manages the order. This cannot be a multi-client account. */
      public Updateshipment setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the order. */
      @com.google.api.client.util.Key
      private java.lang.String orderId;

      /** The ID of the order.
       */
      public java.lang.String getOrderId() {
        return orderId;
      }

      /** The ID of the order. */
      public Updateshipment setOrderId(java.lang.String orderId) {
        this.orderId = orderId;
        return this;
      }

      @Override
      public Updateshipment set(String parameterName, Object value) {
        return (Updateshipment) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Ordertrackingsignals collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Ordertrackingsignals.List request = content.ordertrackingsignals().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Ordertrackingsignals ordertrackingsignals() {
    return new Ordertrackingsignals();
  }

  /**
   * The "ordertrackingsignals" collection of methods.
   */
  public class Ordertrackingsignals {

    /**
     * Creates new order tracking signal.
     *
     * Create a request for the method "ordertrackingsignals.create".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the merchant for which the order signal is created.
     * @param content the {@link com.google.api.services.content.model.OrderTrackingSignal}
     * @return the request
     */
    public Create create(java.lang.Long merchantId, com.google.api.services.content.model.OrderTrackingSignal content) throws java.io.IOException {
      Create result = new Create(merchantId, content);
      initialize(result);
      return result;
    }

    public class Create extends ShoppingContentRequest<com.google.api.services.content.model.OrderTrackingSignal> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/ordertrackingsignals";

      /**
       * Creates new order tracking signal.
       *
       * Create a request for the method "ordertrackingsignals.create".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the merchant for which the order signal is created.
       * @param content the {@link com.google.api.services.content.model.OrderTrackingSignal}
       * @since 1.13
       */
      protected Create(java.lang.Long merchantId, com.google.api.services.content.model.OrderTrackingSignal content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.OrderTrackingSignal.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the merchant for which the order signal is created. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** The ID of the merchant for which the order signal is created.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** The ID of the merchant for which the order signal is created. */
      public Create setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Pos collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Pos.List request = content.pos().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pos pos() {
    return new Pos();
  }

  /**
   * The "pos" collection of methods.
   */
  public class Pos {

    /**
     * Batches multiple POS-related calls in a single request.
     *
     * Create a request for the method "pos.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.PosCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.PosCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.PosCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/pos/batch";

      /**
       * Batches multiple POS-related calls in a single request.
       *
       * Create a request for the method "pos.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.PosCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.PosCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.PosCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a store for the given merchant.
     *
     * Create a request for the method "pos.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @param storeCode A store code that is unique per merchant.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, java.lang.String storeCode) throws java.io.IOException {
      Delete result = new Delete(merchantId, targetMerchantId, storeCode);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}";

      /**
       * Deletes a store for the given merchant.
       *
       * Create a request for the method "pos.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @param storeCode A store code that is unique per merchant.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, java.lang.String storeCode) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
        this.storeCode = com.google.api.client.util.Preconditions.checkNotNull(storeCode, "Required parameter storeCode must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public Delete setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      /** A store code that is unique per merchant. */
      @com.google.api.client.util.Key
      private java.lang.String storeCode;

      /** A store code that is unique per merchant.
       */
      public java.lang.String getStoreCode() {
        return storeCode;
      }

      /** A store code that is unique per merchant. */
      public Delete setStoreCode(java.lang.String storeCode) {
        this.storeCode = storeCode;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves information about the given store.
     *
     * Create a request for the method "pos.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @param storeCode A store code that is unique per merchant.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, java.lang.String storeCode) throws java.io.IOException {
      Get result = new Get(merchantId, targetMerchantId, storeCode);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.PosStore> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}";

      /**
       * Retrieves information about the given store.
       *
       * Create a request for the method "pos.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @param storeCode A store code that is unique per merchant.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, java.lang.String storeCode) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.PosStore.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
        this.storeCode = com.google.api.client.util.Preconditions.checkNotNull(storeCode, "Required parameter storeCode must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public Get setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      /** A store code that is unique per merchant. */
      @com.google.api.client.util.Key
      private java.lang.String storeCode;

      /** A store code that is unique per merchant.
       */
      public java.lang.String getStoreCode() {
        return storeCode;
      }

      /** A store code that is unique per merchant. */
      public Get setStoreCode(java.lang.String storeCode) {
        this.storeCode = storeCode;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Creates a store for the given merchant.
     *
     * Create a request for the method "pos.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @param content the {@link com.google.api.services.content.model.PosStore}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosStore content) throws java.io.IOException {
      Insert result = new Insert(merchantId, targetMerchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.PosStore> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/store";

      /**
       * Creates a store for the given merchant.
       *
       * Create a request for the method "pos.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @param content the {@link com.google.api.services.content.model.PosStore}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosStore content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.PosStore.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public Insert setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Submit inventory for the given merchant.
     *
     * Create a request for the method "pos.inventory".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Inventory#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @param content the {@link com.google.api.services.content.model.PosInventoryRequest}
     * @return the request
     */
    public Inventory inventory(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosInventoryRequest content) throws java.io.IOException {
      Inventory result = new Inventory(merchantId, targetMerchantId, content);
      initialize(result);
      return result;
    }

    public class Inventory extends ShoppingContentRequest<com.google.api.services.content.model.PosInventoryResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/inventory";

      /**
       * Submit inventory for the given merchant.
       *
       * Create a request for the method "pos.inventory".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Inventory#execute()} method to invoke the remote operation. <p>
       * {@link
       * Inventory#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @param content the {@link com.google.api.services.content.model.PosInventoryRequest}
       * @since 1.13
       */
      protected Inventory(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosInventoryRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.PosInventoryResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
      }

      @Override
      public Inventory set$Xgafv(java.lang.String $Xgafv) {
        return (Inventory) super.set$Xgafv($Xgafv);
      }

      @Override
      public Inventory setAccessToken(java.lang.String accessToken) {
        return (Inventory) super.setAccessToken(accessToken);
      }

      @Override
      public Inventory setAlt(java.lang.String alt) {
        return (Inventory) super.setAlt(alt);
      }

      @Override
      public Inventory setCallback(java.lang.String callback) {
        return (Inventory) super.setCallback(callback);
      }

      @Override
      public Inventory setFields(java.lang.String fields) {
        return (Inventory) super.setFields(fields);
      }

      @Override
      public Inventory setKey(java.lang.String key) {
        return (Inventory) super.setKey(key);
      }

      @Override
      public Inventory setOauthToken(java.lang.String oauthToken) {
        return (Inventory) super.setOauthToken(oauthToken);
      }

      @Override
      public Inventory setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Inventory) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Inventory setQuotaUser(java.lang.String quotaUser) {
        return (Inventory) super.setQuotaUser(quotaUser);
      }

      @Override
      public Inventory setUploadType(java.lang.String uploadType) {
        return (Inventory) super.setUploadType(uploadType);
      }

      @Override
      public Inventory setUploadProtocol(java.lang.String uploadProtocol) {
        return (Inventory) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public Inventory setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public Inventory setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      @Override
      public Inventory set(String parameterName, Object value) {
        return (Inventory) super.set(parameterName, value);
      }
    }
    /**
     * Lists the stores of the target merchant.
     *
     * Create a request for the method "pos.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId) throws java.io.IOException {
      List result = new List(merchantId, targetMerchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.PosListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/store";

      /**
       * Lists the stores of the target merchant.
       *
       * Create a request for the method "pos.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.PosListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public List setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Submit a sale event for the given merchant.
     *
     * Create a request for the method "pos.sale".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Sale#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the POS or inventory data provider.
     * @param targetMerchantId The ID of the target merchant.
     * @param content the {@link com.google.api.services.content.model.PosSaleRequest}
     * @return the request
     */
    public Sale sale(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosSaleRequest content) throws java.io.IOException {
      Sale result = new Sale(merchantId, targetMerchantId, content);
      initialize(result);
      return result;
    }

    public class Sale extends ShoppingContentRequest<com.google.api.services.content.model.PosSaleResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pos/{targetMerchantId}/sale";

      /**
       * Submit a sale event for the given merchant.
       *
       * Create a request for the method "pos.sale".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Sale#execute()} method to invoke the remote operation. <p> {@link
       * Sale#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the POS or inventory data provider.
       * @param targetMerchantId The ID of the target merchant.
       * @param content the {@link com.google.api.services.content.model.PosSaleRequest}
       * @since 1.13
       */
      protected Sale(java.math.BigInteger merchantId, java.math.BigInteger targetMerchantId, com.google.api.services.content.model.PosSaleRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.PosSaleResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.targetMerchantId = com.google.api.client.util.Preconditions.checkNotNull(targetMerchantId, "Required parameter targetMerchantId must be specified.");
      }

      @Override
      public Sale set$Xgafv(java.lang.String $Xgafv) {
        return (Sale) super.set$Xgafv($Xgafv);
      }

      @Override
      public Sale setAccessToken(java.lang.String accessToken) {
        return (Sale) super.setAccessToken(accessToken);
      }

      @Override
      public Sale setAlt(java.lang.String alt) {
        return (Sale) super.setAlt(alt);
      }

      @Override
      public Sale setCallback(java.lang.String callback) {
        return (Sale) super.setCallback(callback);
      }

      @Override
      public Sale setFields(java.lang.String fields) {
        return (Sale) super.setFields(fields);
      }

      @Override
      public Sale setKey(java.lang.String key) {
        return (Sale) super.setKey(key);
      }

      @Override
      public Sale setOauthToken(java.lang.String oauthToken) {
        return (Sale) super.setOauthToken(oauthToken);
      }

      @Override
      public Sale setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Sale) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Sale setQuotaUser(java.lang.String quotaUser) {
        return (Sale) super.setQuotaUser(quotaUser);
      }

      @Override
      public Sale setUploadType(java.lang.String uploadType) {
        return (Sale) super.setUploadType(uploadType);
      }

      @Override
      public Sale setUploadProtocol(java.lang.String uploadProtocol) {
        return (Sale) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the POS or inventory data provider. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the POS or inventory data provider.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the POS or inventory data provider. */
      public Sale setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the target merchant. */
      @com.google.api.client.util.Key
      private java.math.BigInteger targetMerchantId;

      /** The ID of the target merchant.
       */
      public java.math.BigInteger getTargetMerchantId() {
        return targetMerchantId;
      }

      /** The ID of the target merchant. */
      public Sale setTargetMerchantId(java.math.BigInteger targetMerchantId) {
        this.targetMerchantId = targetMerchantId;
        return this;
      }

      @Override
      public Sale set(String parameterName, Object value) {
        return (Sale) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Products collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Products.List request = content.products().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Products products() {
    return new Products();
  }

  /**
   * The "products" collection of methods.
   */
  public class Products {

    /**
     * Retrieves, inserts, and deletes multiple products in a single request.
     *
     * Create a request for the method "products.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ProductsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ProductsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ProductsCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/products/batch";

      /**
       * Retrieves, inserts, and deletes multiple products in a single request.
       *
       * Create a request for the method "products.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ProductsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ProductsCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ProductsCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a product from your Merchant Center account.
     *
     * Create a request for the method "products.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param productId The REST ID of the product.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Delete result = new Delete(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products/{productId}";

      /**
       * Deletes a product from your Merchant Center account.
       *
       * Create a request for the method "products.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param productId The REST ID of the product.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The REST ID of the product. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The REST ID of the product.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The REST ID of the product. */
      public Delete setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      /** The Content API Supplemental Feed ID. */
      @com.google.api.client.util.Key
      private java.math.BigInteger feedId;

      /** The Content API Supplemental Feed ID.
       */
      public java.math.BigInteger getFeedId() {
        return feedId;
      }

      /** The Content API Supplemental Feed ID. */
      public Delete setFeedId(java.math.BigInteger feedId) {
        this.feedId = feedId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a product from your Merchant Center account.
     *
     * Create a request for the method "products.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param productId The REST ID of the product.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Get result = new Get(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Product> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products/{productId}";

      /**
       * Retrieves a product from your Merchant Center account.
       *
       * Create a request for the method "products.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param productId The REST ID of the product.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Product.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The REST ID of the product. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The REST ID of the product.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The REST ID of the product. */
      public Get setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Uploads a product to your Merchant Center account. If an item with the same channel,
     * contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
     *
     * Create a request for the method "products.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param content the {@link com.google.api.services.content.model.Product}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Product content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.Product> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products";

      /**
       * Uploads a product to your Merchant Center account. If an item with the same channel,
       * contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
       *
       * Create a request for the method "products.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param content the {@link com.google.api.services.content.model.Product}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.Product content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.Product.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The Content API Supplemental Feed ID. */
      @com.google.api.client.util.Key
      private java.math.BigInteger feedId;

      /** The Content API Supplemental Feed ID.
       */
      public java.math.BigInteger getFeedId() {
        return feedId;
      }

      /** The Content API Supplemental Feed ID. */
      public Insert setFeedId(java.math.BigInteger feedId) {
        this.feedId = feedId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists the products in your Merchant Center account. The response might contain fewer items than
     * specified by maxResults. Rely on nextPageToken to determine if there are more items to be
     * requested.
     *
     * Create a request for the method "products.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the products. This account cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ProductsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products";

      /**
       * Lists the products in your Merchant Center account. The response might contain fewer items than
       * specified by maxResults. Rely on nextPageToken to determine if there are more items to be
       * requested.
       *
       * Create a request for the method "products.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the products. This account cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the products. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the products. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the products. This account cannot be a multi-client
       * account.
       */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of products to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of products to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of products to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Productstatuses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Productstatuses.List request = content.productstatuses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Productstatuses productstatuses() {
    return new Productstatuses();
  }

  /**
   * The "productstatuses" collection of methods.
   */
  public class Productstatuses {

    /**
     * Gets the statuses of multiple products in a single request.
     *
     * Create a request for the method "productstatuses.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ProductstatusesCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ProductstatusesCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ProductstatusesCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/productstatuses/batch";

      /**
       * Gets the statuses of multiple products in a single request.
       *
       * Create a request for the method "productstatuses.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ProductstatusesCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ProductstatusesCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ProductstatusesCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Gets the status of a product from your Merchant Center account.
     *
     * Create a request for the method "productstatuses.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param productId The REST ID of the product.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String productId) throws java.io.IOException {
      Get result = new Get(merchantId, productId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.ProductStatus> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/productstatuses/{productId}";

      /**
       * Gets the status of a product from your Merchant Center account.
       *
       * Create a request for the method "productstatuses.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param productId The REST ID of the product.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String productId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductStatus.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The REST ID of the product. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The REST ID of the product.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The REST ID of the product. */
      public Get setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> destinations;

      /** If set, only issues for the specified destinations are returned, otherwise only issues for the
     Shopping destination.
       */
      public java.util.List<java.lang.String> getDestinations() {
        return destinations;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      public Get setDestinations(java.util.List<java.lang.String> destinations) {
        this.destinations = destinations;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the statuses of the products in your Merchant Center account.
     *
     * Create a request for the method "productstatuses.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the products. This account cannot be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ProductstatusesListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/productstatuses";

      /**
       * Lists the statuses of the products in your Merchant Center account.
       *
       * Create a request for the method "productstatuses.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the products. This account cannot be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ProductstatusesListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the products. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the products. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the products. This account cannot be a multi-client
       * account.
       */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> destinations;

      /** If set, only issues for the specified destinations are returned, otherwise only issues for the
     Shopping destination.
       */
      public java.util.List<java.lang.String> getDestinations() {
        return destinations;
      }

      /**
       * If set, only issues for the specified destinations are returned, otherwise only issues for
       * the Shopping destination.
       */
      public List setDestinations(java.util.List<java.lang.String> destinations) {
        this.destinations = destinations;
        return this;
      }

      /** The maximum number of product statuses to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of product statuses to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of product statuses to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Repricingreports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ShoppingContent content = new ShoppingContent(...);}
     *   {@code ShoppingContent.Repricingreports.List request = content.repricingreports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Repricingreports repricingreports() {
      return new Repricingreports();
    }

    /**
     * The "repricingreports" collection of methods.
     */
    public class Repricingreports {

      /**
       * Lists the metrics report for a given Repricing product. Reports of the last 3 days may not be
       * complete.
       *
       * Create a request for the method "repricingreports.list".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param merchantId Required. Id of the merchant who owns the Repricing rule.
       * @param productId Required. Id of the Repricing product. Also known as the [REST_ID](https://developers.google.com
       *        /shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
       * @return the request
       */
      public List list(java.lang.Long merchantId, java.lang.String productId) throws java.io.IOException {
        List result = new List(merchantId, productId);
        initialize(result);
        return result;
      }

      public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListRepricingProductReportsResponse> {

        private static final String REST_PATH = "content/v2.1/{merchantId}/productstatuses/{productId}/repricingreports";

        /**
         * Lists the metrics report for a given Repricing product. Reports of the last 3 days may not be
         * complete.
         *
         * Create a request for the method "repricingreports.list".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param merchantId Required. Id of the merchant who owns the Repricing rule.
         * @param productId Required. Id of the Repricing product. Also known as the [REST_ID](https://developers.google.com
       *        /shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
         * @since 1.13
         */
        protected List(java.lang.Long merchantId, java.lang.String productId) {
          super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListRepricingProductReportsResponse.class);
          this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
          this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. Id of the merchant who owns the Repricing rule. */
        @com.google.api.client.util.Key
        private java.lang.Long merchantId;

        /** Required. Id of the merchant who owns the Repricing rule.
         */
        public java.lang.Long getMerchantId() {
          return merchantId;
        }

        /** Required. Id of the merchant who owns the Repricing rule. */
        public List setMerchantId(java.lang.Long merchantId) {
          this.merchantId = merchantId;
          return this;
        }

        /**
         * Required. Id of the Repricing product. Also known as the
         * [REST_ID](https://developers.google.com/shopping-
         * content/reference/rest/v2.1/products#Product.FIELDS.id)
         */
        @com.google.api.client.util.Key
        private java.lang.String productId;

        /** Required. Id of the Repricing product. Also known as the [REST_ID](https://developers.google.com
       /shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
         */
        public java.lang.String getProductId() {
          return productId;
        }

        /**
         * Required. Id of the Repricing product. Also known as the
         * [REST_ID](https://developers.google.com/shopping-
         * content/reference/rest/v2.1/products#Product.FIELDS.id)
         */
        public List setProductId(java.lang.String productId) {
          this.productId = productId;
          return this;
        }

        /**
         * Gets Repricing reports on and before this date in the merchant's timezone. You can only
         * retrieve data up to 3 days ago (default) or earlier. Format is YYYY-MM-DD.
         */
        @com.google.api.client.util.Key
        private java.lang.String endDate;

        /** Gets Repricing reports on and before this date in the merchant's timezone. You can only retrieve
       data up to 3 days ago (default) or earlier. Format is YYYY-MM-DD.
         */
        public java.lang.String getEndDate() {
          return endDate;
        }

        /**
         * Gets Repricing reports on and before this date in the merchant's timezone. You can only
         * retrieve data up to 3 days ago (default) or earlier. Format is YYYY-MM-DD.
         */
        public List setEndDate(java.lang.String endDate) {
          this.endDate = endDate;
          return this;
        }

        /**
         * Maximum number of days of reports to return. There can be more than one rule report
         * returned per day. For example, if 3 rule types got applied to the same product within a
         * 24-hour period, then a page_size of 1 will return 3 rule reports. The page size defaults
         * to 50 and values above 1000 are coerced to 1000. This service may return fewer days of
         * reports than this value, for example, if the time between your start and end date is less
         * than the page size.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of days of reports to return. There can be more than one rule report returned per
       day. For example, if 3 rule types got applied to the same product within a 24-hour period, then a
       page_size of 1 will return 3 rule reports. The page size defaults to 50 and values above 1000 are
       coerced to 1000. This service may return fewer days of reports than this value, for example, if the
       time between your start and end date is less than the page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of days of reports to return. There can be more than one rule report
         * returned per day. For example, if 3 rule types got applied to the same product within a
         * 24-hour period, then a page_size of 1 will return 3 rule reports. The page size defaults
         * to 50 and values above 1000 are coerced to 1000. This service may return fewer days of
         * reports than this value, for example, if the time between your start and end date is less
         * than the page size.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token (if provided) to retrieve the subsequent page. All other parameters must match the
         * original call that provided the page token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token (if provided) to retrieve the subsequent page. All other parameters must match the original
       call that provided the page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token (if provided) to retrieve the subsequent page. All other parameters must match the
         * original call that provided the page token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /** Id of the Repricing rule. If specified, only gets this rule's reports. */
        @com.google.api.client.util.Key
        private java.lang.String ruleId;

        /** Id of the Repricing rule. If specified, only gets this rule's reports.
         */
        public java.lang.String getRuleId() {
          return ruleId;
        }

        /** Id of the Repricing rule. If specified, only gets this rule's reports. */
        public List setRuleId(java.lang.String ruleId) {
          this.ruleId = ruleId;
          return this;
        }

        /**
         * Gets Repricing reports on and after this date in the merchant's timezone, up to one year
         * ago. Do not use a start date later than 3 days ago (default). Format is YYYY-MM-DD.
         */
        @com.google.api.client.util.Key
        private java.lang.String startDate;

        /** Gets Repricing reports on and after this date in the merchant's timezone, up to one year ago. Do
       not use a start date later than 3 days ago (default). Format is YYYY-MM-DD.
         */
        public java.lang.String getStartDate() {
          return startDate;
        }

        /**
         * Gets Repricing reports on and after this date in the merchant's timezone, up to one year
         * ago. Do not use a start date later than 3 days ago (default). Format is YYYY-MM-DD.
         */
        public List setStartDate(java.lang.String startDate) {
          this.startDate = startDate;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Pubsubnotificationsettings collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Pubsubnotificationsettings.List request = content.pubsubnotificationsettings().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pubsubnotificationsettings pubsubnotificationsettings() {
    return new Pubsubnotificationsettings();
  }

  /**
   * The "pubsubnotificationsettings" collection of methods.
   */
  public class Pubsubnotificationsettings {

    /**
     * Retrieves a Merchant Center account's pubsub notification settings.
     *
     * Create a request for the method "pubsubnotificationsettings.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account for which to get pubsub notification settings.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId) throws java.io.IOException {
      Get result = new Get(merchantId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.PubsubNotificationSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pubsubnotificationsettings";

      /**
       * Retrieves a Merchant Center account's pubsub notification settings.
       *
       * Create a request for the method "pubsubnotificationsettings.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account for which to get pubsub notification settings.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.PubsubNotificationSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account for which to get pubsub notification settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account for which to get pubsub notification settings.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account for which to get pubsub notification settings. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Register a Merchant Center account for pubsub notifications. Note that cloud topic name should
     * not be provided as part of the request.
     *
     * Create a request for the method "pubsubnotificationsettings.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account.
     * @param content the {@link com.google.api.services.content.model.PubsubNotificationSettings}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, com.google.api.services.content.model.PubsubNotificationSettings content) throws java.io.IOException {
      Update result = new Update(merchantId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.PubsubNotificationSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/pubsubnotificationsettings";

      /**
       * Register a Merchant Center account for pubsub notifications. Note that cloud topic name should
       * not be provided as part of the request.
       *
       * Create a request for the method "pubsubnotificationsettings.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account.
       * @param content the {@link com.google.api.services.content.model.PubsubNotificationSettings}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, com.google.api.services.content.model.PubsubNotificationSettings content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.PubsubNotificationSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account. */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Regionalinventory collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Regionalinventory.List request = content.regionalinventory().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Regionalinventory regionalinventory() {
    return new Regionalinventory();
  }

  /**
   * The "regionalinventory" collection of methods.
   */
  public class Regionalinventory {

    /**
     * Updates regional inventory for multiple products or regions in a single request.
     *
     * Create a request for the method "regionalinventory.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.RegionalinventoryCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.RegionalinventoryCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.RegionalinventoryCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/regionalinventory/batch";

      /**
       * Updates regional inventory for multiple products or regions in a single request.
       *
       * Create a request for the method "regionalinventory.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.RegionalinventoryCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.RegionalinventoryCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.RegionalinventoryCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Update the regional inventory of a product in your Merchant Center account. If a regional
     * inventory with the same region ID already exists, this method updates that entry.
     *
     * Create a request for the method "regionalinventory.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param productId The REST ID of the product for which to update the regional inventory.
     * @param content the {@link com.google.api.services.content.model.RegionalInventory}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, java.lang.String productId, com.google.api.services.content.model.RegionalInventory content) throws java.io.IOException {
      Insert result = new Insert(merchantId, productId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.RegionalInventory> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/products/{productId}/regionalinventory";

      /**
       * Update the regional inventory of a product in your Merchant Center account. If a regional
       * inventory with the same region ID already exists, this method updates that entry.
       *
       * Create a request for the method "regionalinventory.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
       * @param productId The REST ID of the product for which to update the regional inventory.
       * @param content the {@link com.google.api.services.content.model.RegionalInventory}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, java.lang.String productId, com.google.api.services.content.model.RegionalInventory content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.RegionalInventory.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account that contains the product. This account cannot be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the account that contains the product. This account cannot be a multi-client
       * account.
       */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The REST ID of the product for which to update the regional inventory. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The REST ID of the product for which to update the regional inventory.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The REST ID of the product for which to update the regional inventory. */
      public Insert setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Regions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Regions.List request = content.regions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Regions regions() {
    return new Regions();
  }

  /**
   * The "regions" collection of methods.
   */
  public class Regions {

    /**
     * Creates a region definition in your Merchant Center account.
     *
     * Create a request for the method "regions.create".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant for which to create region definition.
     * @param content the {@link com.google.api.services.content.model.Region}
     * @return the request
     */
    public Create create(java.lang.Long merchantId, com.google.api.services.content.model.Region content) throws java.io.IOException {
      Create result = new Create(merchantId, content);
      initialize(result);
      return result;
    }

    public class Create extends ShoppingContentRequest<com.google.api.services.content.model.Region> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/regions";

      /**
       * Creates a region definition in your Merchant Center account.
       *
       * Create a request for the method "regions.create".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant for which to create region definition.
       * @param content the {@link com.google.api.services.content.model.Region}
       * @since 1.13
       */
      protected Create(java.lang.Long merchantId, com.google.api.services.content.model.Region content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.Region.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant for which to create region definition. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant for which to create region definition.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant for which to create region definition. */
      public Create setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the region to create. */
      @com.google.api.client.util.Key
      private java.lang.String regionId;

      /** Required. The id of the region to create.
       */
      public java.lang.String getRegionId() {
        return regionId;
      }

      /** Required. The id of the region to create. */
      public Create setRegionId(java.lang.String regionId) {
        this.regionId = regionId;
        return this;
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a region definition from your Merchant Center account.
     *
     * Create a request for the method "regions.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant for which to delete region definition.
     * @param regionId Required. The id of the region to delete.
     * @return the request
     */
    public Delete delete(java.lang.Long merchantId, java.lang.String regionId) throws java.io.IOException {
      Delete result = new Delete(merchantId, regionId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/regions/{regionId}";

      /**
       * Deletes a region definition from your Merchant Center account.
       *
       * Create a request for the method "regions.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant for which to delete region definition.
       * @param regionId Required. The id of the region to delete.
       * @since 1.13
       */
      protected Delete(java.lang.Long merchantId, java.lang.String regionId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.regionId = com.google.api.client.util.Preconditions.checkNotNull(regionId, "Required parameter regionId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant for which to delete region definition. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant for which to delete region definition.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant for which to delete region definition. */
      public Delete setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the region to delete. */
      @com.google.api.client.util.Key
      private java.lang.String regionId;

      /** Required. The id of the region to delete.
       */
      public java.lang.String getRegionId() {
        return regionId;
      }

      /** Required. The id of the region to delete. */
      public Delete setRegionId(java.lang.String regionId) {
        this.regionId = regionId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a region defined in your Merchant Center account.
     *
     * Create a request for the method "regions.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant for which to retrieve region definition.
     * @param regionId Required. The id of the region to retrieve.
     * @return the request
     */
    public Get get(java.lang.Long merchantId, java.lang.String regionId) throws java.io.IOException {
      Get result = new Get(merchantId, regionId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.Region> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/regions/{regionId}";

      /**
       * Retrieves a region defined in your Merchant Center account.
       *
       * Create a request for the method "regions.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant for which to retrieve region definition.
       * @param regionId Required. The id of the region to retrieve.
       * @since 1.13
       */
      protected Get(java.lang.Long merchantId, java.lang.String regionId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.Region.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.regionId = com.google.api.client.util.Preconditions.checkNotNull(regionId, "Required parameter regionId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant for which to retrieve region definition. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant for which to retrieve region definition.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant for which to retrieve region definition. */
      public Get setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the region to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String regionId;

      /** Required. The id of the region to retrieve.
       */
      public java.lang.String getRegionId() {
        return regionId;
      }

      /** Required. The id of the region to retrieve. */
      public Get setRegionId(java.lang.String regionId) {
        this.regionId = regionId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the regions in your Merchant Center account.
     *
     * Create a request for the method "regions.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant for which to list region definitions.
     * @return the request
     */
    public List list(java.lang.Long merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListRegionsResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/regions";

      /**
       * Lists the regions in your Merchant Center account.
       *
       * Create a request for the method "regions.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant for which to list region definitions.
       * @since 1.13
       */
      protected List(java.lang.Long merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListRegionsResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant for which to list region definitions. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant for which to list region definitions.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant for which to list region definitions. */
      public List setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * The maximum number of regions to return. The service may return fewer than this value. If
       * unspecified, at most 50 rules will be returned. The maximum value is 1000; values above
       * 1000 will be coerced to 1000.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of regions to return. The service may return fewer than this value. If
     unspecified, at most 50 rules will be returned. The maximum value is 1000; values above 1000 will
     be coerced to 1000.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of regions to return. The service may return fewer than this value. If
       * unspecified, at most 50 rules will be returned. The maximum value is 1000; values above
       * 1000 will be coerced to 1000.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * A page token, received from a previous `ListRegions` call. Provide this to retrieve the
       * subsequent page. When paginating, all other parameters provided to `ListRegions` must match
       * the call that provided the page token.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A page token, received from a previous `ListRegions` call. Provide this to retrieve the subsequent
     page. When paginating, all other parameters provided to `ListRegions` must match the call that
     provided the page token.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A page token, received from a previous `ListRegions` call. Provide this to retrieve the
       * subsequent page. When paginating, all other parameters provided to `ListRegions` must match
       * the call that provided the page token.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates a region definition in your Merchant Center account.
     *
     * Create a request for the method "regions.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant for which to update region definition.
     * @param regionId Required. The id of the region to update.
     * @param content the {@link com.google.api.services.content.model.Region}
     * @return the request
     */
    public Patch patch(java.lang.Long merchantId, java.lang.String regionId, com.google.api.services.content.model.Region content) throws java.io.IOException {
      Patch result = new Patch(merchantId, regionId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.Region> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/regions/{regionId}";

      /**
       * Updates a region definition in your Merchant Center account.
       *
       * Create a request for the method "regions.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant for which to update region definition.
       * @param regionId Required. The id of the region to update.
       * @param content the {@link com.google.api.services.content.model.Region}
       * @since 1.13
       */
      protected Patch(java.lang.Long merchantId, java.lang.String regionId, com.google.api.services.content.model.Region content) {
        super(ShoppingContent.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.Region.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.regionId = com.google.api.client.util.Preconditions.checkNotNull(regionId, "Required parameter regionId must be specified.");
      }

      @Override
      public Patch set$Xgafv(java.lang.String $Xgafv) {
        return (Patch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Patch setAccessToken(java.lang.String accessToken) {
        return (Patch) super.setAccessToken(accessToken);
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setCallback(java.lang.String callback) {
        return (Patch) super.setCallback(callback);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUploadType(java.lang.String uploadType) {
        return (Patch) super.setUploadType(uploadType);
      }

      @Override
      public Patch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Patch) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant for which to update region definition. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant for which to update region definition.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant for which to update region definition. */
      public Patch setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the region to update. */
      @com.google.api.client.util.Key
      private java.lang.String regionId;

      /** Required. The id of the region to update.
       */
      public java.lang.String getRegionId() {
        return regionId;
      }

      /** Required. The id of the region to update. */
      public Patch setRegionId(java.lang.String regionId) {
        this.regionId = regionId;
        return this;
      }

      /** Optional. The field mask indicating the fields to update. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** Optional. The field mask indicating the fields to update.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** Optional. The field mask indicating the fields to update. */
      public Patch setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Repricingrules collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Repricingrules.List request = content.repricingrules().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Repricingrules repricingrules() {
    return new Repricingrules();
  }

  /**
   * The "repricingrules" collection of methods.
   */
  public class Repricingrules {

    /**
     * Creates a repricing rule for your Merchant Center account.
     *
     * Create a request for the method "repricingrules.create".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant who owns the repricing rule.
     * @param content the {@link com.google.api.services.content.model.RepricingRule}
     * @return the request
     */
    public Create create(java.lang.Long merchantId, com.google.api.services.content.model.RepricingRule content) throws java.io.IOException {
      Create result = new Create(merchantId, content);
      initialize(result);
      return result;
    }

    public class Create extends ShoppingContentRequest<com.google.api.services.content.model.RepricingRule> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules";

      /**
       * Creates a repricing rule for your Merchant Center account.
       *
       * Create a request for the method "repricingrules.create".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant who owns the repricing rule.
       * @param content the {@link com.google.api.services.content.model.RepricingRule}
       * @since 1.13
       */
      protected Create(java.lang.Long merchantId, com.google.api.services.content.model.RepricingRule content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.RepricingRule.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant who owns the repricing rule.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      public Create setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the rule to create. */
      @com.google.api.client.util.Key
      private java.lang.String ruleId;

      /** Required. The id of the rule to create.
       */
      public java.lang.String getRuleId() {
        return ruleId;
      }

      /** Required. The id of the rule to create. */
      public Create setRuleId(java.lang.String ruleId) {
        this.ruleId = ruleId;
        return this;
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a repricing rule in your Merchant Center account.
     *
     * Create a request for the method "repricingrules.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant who owns the repricing rule.
     * @param ruleId Required. The id of the rule to Delete.
     * @return the request
     */
    public Delete delete(java.lang.Long merchantId, java.lang.String ruleId) throws java.io.IOException {
      Delete result = new Delete(merchantId, ruleId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules/{ruleId}";

      /**
       * Deletes a repricing rule in your Merchant Center account.
       *
       * Create a request for the method "repricingrules.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant who owns the repricing rule.
       * @param ruleId Required. The id of the rule to Delete.
       * @since 1.13
       */
      protected Delete(java.lang.Long merchantId, java.lang.String ruleId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.ruleId = com.google.api.client.util.Preconditions.checkNotNull(ruleId, "Required parameter ruleId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant who owns the repricing rule.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      public Delete setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the rule to Delete. */
      @com.google.api.client.util.Key
      private java.lang.String ruleId;

      /** Required. The id of the rule to Delete.
       */
      public java.lang.String getRuleId() {
        return ruleId;
      }

      /** Required. The id of the rule to Delete. */
      public Delete setRuleId(java.lang.String ruleId) {
        this.ruleId = ruleId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a repricing rule from your Merchant Center account.
     *
     * Create a request for the method "repricingrules.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant who owns the repricing rule.
     * @param ruleId Required. The id of the rule to retrieve.
     * @return the request
     */
    public Get get(java.lang.Long merchantId, java.lang.String ruleId) throws java.io.IOException {
      Get result = new Get(merchantId, ruleId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.RepricingRule> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules/{ruleId}";

      /**
       * Retrieves a repricing rule from your Merchant Center account.
       *
       * Create a request for the method "repricingrules.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant who owns the repricing rule.
       * @param ruleId Required. The id of the rule to retrieve.
       * @since 1.13
       */
      protected Get(java.lang.Long merchantId, java.lang.String ruleId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.RepricingRule.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.ruleId = com.google.api.client.util.Preconditions.checkNotNull(ruleId, "Required parameter ruleId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant who owns the repricing rule.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      public Get setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the rule to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String ruleId;

      /** Required. The id of the rule to retrieve.
       */
      public java.lang.String getRuleId() {
        return ruleId;
      }

      /** Required. The id of the rule to retrieve. */
      public Get setRuleId(java.lang.String ruleId) {
        this.ruleId = ruleId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists the repricing rules in your Merchant Center account.
     *
     * Create a request for the method "repricingrules.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant who owns the repricing rule.
     * @return the request
     */
    public List list(java.lang.Long merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListRepricingRulesResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules";

      /**
       * Lists the repricing rules in your Merchant Center account.
       *
       * Create a request for the method "repricingrules.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant who owns the repricing rule.
       * @since 1.13
       */
      protected List(java.lang.Long merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListRepricingRulesResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant who owns the repricing rule.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      public List setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** CLDR country code (e.g. "US"), used as a filter on repricing rules. */
      @com.google.api.client.util.Key
      private java.lang.String countryCode;

      /** CLDR country code (e.g. "US"), used as a filter on repricing rules.
       */
      public java.lang.String getCountryCode() {
        return countryCode;
      }

      /** CLDR country code (e.g. "US"), used as a filter on repricing rules. */
      public List setCountryCode(java.lang.String countryCode) {
        this.countryCode = countryCode;
        return this;
      }

      /**
       * The two-letter ISO 639-1 language code associated with the repricing rule, used as a
       * filter.
       */
      @com.google.api.client.util.Key
      private java.lang.String languageCode;

      /** The two-letter ISO 639-1 language code associated with the repricing rule, used as a filter.
       */
      public java.lang.String getLanguageCode() {
        return languageCode;
      }

      /**
       * The two-letter ISO 639-1 language code associated with the repricing rule, used as a
       * filter.
       */
      public List setLanguageCode(java.lang.String languageCode) {
        this.languageCode = languageCode;
        return this;
      }

      /**
       * The maximum number of repricing rules to return. The service may return fewer than this
       * value. If unspecified, at most 50 rules will be returned. The maximum value is 1000; values
       * above 1000 will be coerced to 1000.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of repricing rules to return. The service may return fewer than this value. If
     unspecified, at most 50 rules will be returned. The maximum value is 1000; values above 1000 will
     be coerced to 1000.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of repricing rules to return. The service may return fewer than this
       * value. If unspecified, at most 50 rules will be returned. The maximum value is 1000; values
       * above 1000 will be coerced to 1000.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * A page token, received from a previous `ListRepricingRules` call. Provide this to retrieve
       * the subsequent page. When paginating, all other parameters provided to `ListRepricingRules`
       * must match the call that provided the page token.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A page token, received from a previous `ListRepricingRules` call. Provide this to retrieve the
     subsequent page. When paginating, all other parameters provided to `ListRepricingRules` must match
     the call that provided the page token.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A page token, received from a previous `ListRepricingRules` call. Provide this to retrieve
       * the subsequent page. When paginating, all other parameters provided to `ListRepricingRules`
       * must match the call that provided the page token.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates a repricing rule in your Merchant Center account. All mutable fields will be overwritten
     * in each update request. In each update, you must provide all required mutable fields, or an error
     * will be thrown. If you do not provide an optional field in the update request, if that field
     * currently exists, it will be deleted from the rule.
     *
     * Create a request for the method "repricingrules.patch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param merchantId Required. The id of the merchant who owns the repricing rule.
     * @param ruleId Required. The id of the rule to update.
     * @param content the {@link com.google.api.services.content.model.RepricingRule}
     * @return the request
     */
    public Patch patch(java.lang.Long merchantId, java.lang.String ruleId, com.google.api.services.content.model.RepricingRule content) throws java.io.IOException {
      Patch result = new Patch(merchantId, ruleId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ShoppingContentRequest<com.google.api.services.content.model.RepricingRule> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules/{ruleId}";

      /**
       * Updates a repricing rule in your Merchant Center account. All mutable fields will be
       * overwritten in each update request. In each update, you must provide all required mutable
       * fields, or an error will be thrown. If you do not provide an optional field in the update
       * request, if that field currently exists, it will be deleted from the rule.
       *
       * Create a request for the method "repricingrules.patch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId Required. The id of the merchant who owns the repricing rule.
       * @param ruleId Required. The id of the rule to update.
       * @param content the {@link com.google.api.services.content.model.RepricingRule}
       * @since 1.13
       */
      protected Patch(java.lang.Long merchantId, java.lang.String ruleId, com.google.api.services.content.model.RepricingRule content) {
        super(ShoppingContent.this, "PATCH", REST_PATH, content, com.google.api.services.content.model.RepricingRule.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.ruleId = com.google.api.client.util.Preconditions.checkNotNull(ruleId, "Required parameter ruleId must be specified.");
      }

      @Override
      public Patch set$Xgafv(java.lang.String $Xgafv) {
        return (Patch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Patch setAccessToken(java.lang.String accessToken) {
        return (Patch) super.setAccessToken(accessToken);
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setCallback(java.lang.String callback) {
        return (Patch) super.setCallback(callback);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUploadType(java.lang.String uploadType) {
        return (Patch) super.setUploadType(uploadType);
      }

      @Override
      public Patch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Patch) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      @com.google.api.client.util.Key
      private java.lang.Long merchantId;

      /** Required. The id of the merchant who owns the repricing rule.
       */
      public java.lang.Long getMerchantId() {
        return merchantId;
      }

      /** Required. The id of the merchant who owns the repricing rule. */
      public Patch setMerchantId(java.lang.Long merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Required. The id of the rule to update. */
      @com.google.api.client.util.Key
      private java.lang.String ruleId;

      /** Required. The id of the rule to update.
       */
      public java.lang.String getRuleId() {
        return ruleId;
      }

      /** Required. The id of the rule to update. */
      public Patch setRuleId(java.lang.String ruleId) {
        this.ruleId = ruleId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Repricingreports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ShoppingContent content = new ShoppingContent(...);}
     *   {@code ShoppingContent.Repricingreports.List request = content.repricingreports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Repricingreports repricingreports() {
      return new Repricingreports();
    }

    /**
     * The "repricingreports" collection of methods.
     */
    public class Repricingreports {

      /**
       * Lists the metrics report for a given Repricing rule. Reports of the last 3 days may not be
       * complete.
       *
       * Create a request for the method "repricingreports.list".
       *
       * This request holds the parameters needed by the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param merchantId Required. Id of the merchant who owns the Repricing rule.
       * @param ruleId Required. Id of the Repricing rule.
       * @return the request
       */
      public List list(java.lang.Long merchantId, java.lang.String ruleId) throws java.io.IOException {
        List result = new List(merchantId, ruleId);
        initialize(result);
        return result;
      }

      public class List extends ShoppingContentRequest<com.google.api.services.content.model.ListRepricingRuleReportsResponse> {

        private static final String REST_PATH = "content/v2.1/{merchantId}/repricingrules/{ruleId}/repricingreports";

        /**
         * Lists the metrics report for a given Repricing rule. Reports of the last 3 days may not be
         * complete.
         *
         * Create a request for the method "repricingreports.list".
         *
         * This request holds the parameters needed by the the content server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param merchantId Required. Id of the merchant who owns the Repricing rule.
         * @param ruleId Required. Id of the Repricing rule.
         * @since 1.13
         */
        protected List(java.lang.Long merchantId, java.lang.String ruleId) {
          super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ListRepricingRuleReportsResponse.class);
          this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
          this.ruleId = com.google.api.client.util.Preconditions.checkNotNull(ruleId, "Required parameter ruleId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. Id of the merchant who owns the Repricing rule. */
        @com.google.api.client.util.Key
        private java.lang.Long merchantId;

        /** Required. Id of the merchant who owns the Repricing rule.
         */
        public java.lang.Long getMerchantId() {
          return merchantId;
        }

        /** Required. Id of the merchant who owns the Repricing rule. */
        public List setMerchantId(java.lang.Long merchantId) {
          this.merchantId = merchantId;
          return this;
        }

        /** Required. Id of the Repricing rule. */
        @com.google.api.client.util.Key
        private java.lang.String ruleId;

        /** Required. Id of the Repricing rule.
         */
        public java.lang.String getRuleId() {
          return ruleId;
        }

        /** Required. Id of the Repricing rule. */
        public List setRuleId(java.lang.String ruleId) {
          this.ruleId = ruleId;
          return this;
        }

        /**
         * Gets Repricing reports on and before this date in the merchant's timezone. You can only
         * retrieve data up to 3 days ago (default) or earlier. Format: YYYY-MM-DD.
         */
        @com.google.api.client.util.Key
        private java.lang.String endDate;

        /** Gets Repricing reports on and before this date in the merchant's timezone. You can only retrieve
       data up to 3 days ago (default) or earlier. Format: YYYY-MM-DD.
         */
        public java.lang.String getEndDate() {
          return endDate;
        }

        /**
         * Gets Repricing reports on and before this date in the merchant's timezone. You can only
         * retrieve data up to 3 days ago (default) or earlier. Format: YYYY-MM-DD.
         */
        public List setEndDate(java.lang.String endDate) {
          this.endDate = endDate;
          return this;
        }

        /**
         * Maximum number of daily reports to return. Each report includes data from a single
         * 24-hour period. The page size defaults to 50 and values above 1000 are coerced to 1000.
         * This service may return fewer days than this value, for example, if the time between your
         * start and end date is less than page size.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of daily reports to return. Each report includes data from a single 24-hour period.
       The page size defaults to 50 and values above 1000 are coerced to 1000. This service may return
       fewer days than this value, for example, if the time between your start and end date is less than
       page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of daily reports to return. Each report includes data from a single
         * 24-hour period. The page size defaults to 50 and values above 1000 are coerced to 1000.
         * This service may return fewer days than this value, for example, if the time between your
         * start and end date is less than page size.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token (if provided) to retrieve the subsequent page. All other parameters must match the
         * original call that provided the page token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token (if provided) to retrieve the subsequent page. All other parameters must match the original
       call that provided the page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token (if provided) to retrieve the subsequent page. All other parameters must match the
         * original call that provided the page token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /**
         * Gets Repricing reports on and after this date in the merchant's timezone, up to one year
         * ago. Do not use a start date later than 3 days ago (default). Format: YYYY-MM-DD.
         */
        @com.google.api.client.util.Key
        private java.lang.String startDate;

        /** Gets Repricing reports on and after this date in the merchant's timezone, up to one year ago. Do
       not use a start date later than 3 days ago (default). Format: YYYY-MM-DD.
         */
        public java.lang.String getStartDate() {
          return startDate;
        }

        /**
         * Gets Repricing reports on and after this date in the merchant's timezone, up to one year
         * ago. Do not use a start date later than 3 days ago (default). Format: YYYY-MM-DD.
         */
        public List setStartDate(java.lang.String startDate) {
          this.startDate = startDate;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Returnaddress collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Returnaddress.List request = content.returnaddress().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Returnaddress returnaddress() {
    return new Returnaddress();
  }

  /**
   * The "returnaddress" collection of methods.
   */
  public class Returnaddress {

    /**
     * Batches multiple return address related calls in a single request.
     *
     * Create a request for the method "returnaddress.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ReturnaddressCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ReturnaddressCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ReturnaddressCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/returnaddress/batch";

      /**
       * Batches multiple return address related calls in a single request.
       *
       * Create a request for the method "returnaddress.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ReturnaddressCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ReturnaddressCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ReturnaddressCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a return address for the given Merchant Center account.
     *
     * Create a request for the method "returnaddress.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account from which to delete the given return address.
     * @param returnAddressId Return address ID generated by Google.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.lang.String returnAddressId) throws java.io.IOException {
      Delete result = new Delete(merchantId, returnAddressId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnaddress/{returnAddressId}";

      /**
       * Deletes a return address for the given Merchant Center account.
       *
       * Create a request for the method "returnaddress.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account from which to delete the given return address.
       * @param returnAddressId Return address ID generated by Google.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.lang.String returnAddressId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnAddressId = com.google.api.client.util.Preconditions.checkNotNull(returnAddressId, "Required parameter returnAddressId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account from which to delete the given return address. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account from which to delete the given return address.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account from which to delete the given return address. */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Return address ID generated by Google. */
      @com.google.api.client.util.Key
      private java.lang.String returnAddressId;

      /** Return address ID generated by Google.
       */
      public java.lang.String getReturnAddressId() {
        return returnAddressId;
      }

      /** Return address ID generated by Google. */
      public Delete setReturnAddressId(java.lang.String returnAddressId) {
        this.returnAddressId = returnAddressId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a return address of the Merchant Center account.
     *
     * Create a request for the method "returnaddress.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to get a return address for.
     * @param returnAddressId Return address ID generated by Google.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String returnAddressId) throws java.io.IOException {
      Get result = new Get(merchantId, returnAddressId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.ReturnAddress> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnaddress/{returnAddressId}";

      /**
       * Gets a return address of the Merchant Center account.
       *
       * Create a request for the method "returnaddress.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to get a return address for.
       * @param returnAddressId Return address ID generated by Google.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String returnAddressId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ReturnAddress.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnAddressId = com.google.api.client.util.Preconditions.checkNotNull(returnAddressId, "Required parameter returnAddressId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to get a return address for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to get a return address for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to get a return address for. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Return address ID generated by Google. */
      @com.google.api.client.util.Key
      private java.lang.String returnAddressId;

      /** Return address ID generated by Google.
       */
      public java.lang.String getReturnAddressId() {
        return returnAddressId;
      }

      /** Return address ID generated by Google. */
      public Get setReturnAddressId(java.lang.String returnAddressId) {
        this.returnAddressId = returnAddressId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a return address for the Merchant Center account.
     *
     * Create a request for the method "returnaddress.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to insert a return address for.
     * @param content the {@link com.google.api.services.content.model.ReturnAddress}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.ReturnAddress content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.ReturnAddress> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnaddress";

      /**
       * Inserts a return address for the Merchant Center account.
       *
       * Create a request for the method "returnaddress.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to insert a return address for.
       * @param content the {@link com.google.api.services.content.model.ReturnAddress}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.ReturnAddress content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ReturnAddress.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to insert a return address for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to insert a return address for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to insert a return address for. */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists the return addresses of the Merchant Center account.
     *
     * Create a request for the method "returnaddress.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to list return addresses for.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ReturnaddressListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnaddress";

      /**
       * Lists the return addresses of the Merchant Center account.
       *
       * Create a request for the method "returnaddress.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to list return addresses for.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ReturnaddressListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to list return addresses for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to list return addresses for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to list return addresses for. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * List only return addresses applicable to the given country of sale. When omitted, all
       * return addresses are listed.
       */
      @com.google.api.client.util.Key
      private java.lang.String country;

      /** List only return addresses applicable to the given country of sale. When omitted, all return
     addresses are listed.
       */
      public java.lang.String getCountry() {
        return country;
      }

      /**
       * List only return addresses applicable to the given country of sale. When omitted, all
       * return addresses are listed.
       */
      public List setCountry(java.lang.String country) {
        this.country = country;
        return this;
      }

      /** The maximum number of addresses in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of addresses in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of addresses in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Returnpolicy collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Returnpolicy.List request = content.returnpolicy().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Returnpolicy returnpolicy() {
    return new Returnpolicy();
  }

  /**
   * The "returnpolicy" collection of methods.
   */
  public class Returnpolicy {

    /**
     * Batches multiple return policy related calls in a single request.
     *
     * Create a request for the method "returnpolicy.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ReturnpolicyCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ReturnpolicyCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ReturnpolicyCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/returnpolicy/batch";

      /**
       * Batches multiple return policy related calls in a single request.
       *
       * Create a request for the method "returnpolicy.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ReturnpolicyCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ReturnpolicyCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ReturnpolicyCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a return policy for the given Merchant Center account.
     *
     * Create a request for the method "returnpolicy.delete".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account from which to delete the given return policy.
     * @param returnPolicyId Return policy ID generated by Google.
     * @return the request
     */
    public Delete delete(java.math.BigInteger merchantId, java.lang.String returnPolicyId) throws java.io.IOException {
      Delete result = new Delete(merchantId, returnPolicyId);
      initialize(result);
      return result;
    }

    public class Delete extends ShoppingContentRequest<Void> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}";

      /**
       * Deletes a return policy for the given Merchant Center account.
       *
       * Create a request for the method "returnpolicy.delete".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account from which to delete the given return policy.
       * @param returnPolicyId Return policy ID generated by Google.
       * @since 1.13
       */
      protected Delete(java.math.BigInteger merchantId, java.lang.String returnPolicyId) {
        super(ShoppingContent.this, "DELETE", REST_PATH, null, Void.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnPolicyId = com.google.api.client.util.Preconditions.checkNotNull(returnPolicyId, "Required parameter returnPolicyId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account from which to delete the given return policy. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account from which to delete the given return policy.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account from which to delete the given return policy. */
      public Delete setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Return policy ID generated by Google. */
      @com.google.api.client.util.Key
      private java.lang.String returnPolicyId;

      /** Return policy ID generated by Google.
       */
      public java.lang.String getReturnPolicyId() {
        return returnPolicyId;
      }

      /** Return policy ID generated by Google. */
      public Delete setReturnPolicyId(java.lang.String returnPolicyId) {
        this.returnPolicyId = returnPolicyId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a return policy of the Merchant Center account.
     *
     * Create a request for the method "returnpolicy.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to get a return policy for.
     * @param returnPolicyId Return policy ID generated by Google.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String returnPolicyId) throws java.io.IOException {
      Get result = new Get(merchantId, returnPolicyId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.ReturnPolicy> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}";

      /**
       * Gets a return policy of the Merchant Center account.
       *
       * Create a request for the method "returnpolicy.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to get a return policy for.
       * @param returnPolicyId Return policy ID generated by Google.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String returnPolicyId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ReturnPolicy.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.returnPolicyId = com.google.api.client.util.Preconditions.checkNotNull(returnPolicyId, "Required parameter returnPolicyId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to get a return policy for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to get a return policy for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to get a return policy for. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** Return policy ID generated by Google. */
      @com.google.api.client.util.Key
      private java.lang.String returnPolicyId;

      /** Return policy ID generated by Google.
       */
      public java.lang.String getReturnPolicyId() {
        return returnPolicyId;
      }

      /** Return policy ID generated by Google. */
      public Get setReturnPolicyId(java.lang.String returnPolicyId) {
        this.returnPolicyId = returnPolicyId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a return policy for the Merchant Center account.
     *
     * Create a request for the method "returnpolicy.insert".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to insert a return policy for.
     * @param content the {@link com.google.api.services.content.model.ReturnPolicy}
     * @return the request
     */
    public Insert insert(java.math.BigInteger merchantId, com.google.api.services.content.model.ReturnPolicy content) throws java.io.IOException {
      Insert result = new Insert(merchantId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ShoppingContentRequest<com.google.api.services.content.model.ReturnPolicy> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnpolicy";

      /**
       * Inserts a return policy for the Merchant Center account.
       *
       * Create a request for the method "returnpolicy.insert".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to insert a return policy for.
       * @param content the {@link com.google.api.services.content.model.ReturnPolicy}
       * @since 1.13
       */
      protected Insert(java.math.BigInteger merchantId, com.google.api.services.content.model.ReturnPolicy content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ReturnPolicy.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to insert a return policy for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to insert a return policy for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to insert a return policy for. */
      public Insert setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists the return policies of the Merchant Center account.
     *
     * Create a request for the method "returnpolicy.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to list return policies for.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ReturnpolicyListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/returnpolicy";

      /**
       * Lists the return policies of the Merchant Center account.
       *
       * Create a request for the method "returnpolicy.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to list return policies for.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ReturnpolicyListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to list return policies for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to list return policies for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to list return policies for. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Settlementreports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Settlementreports.List request = content.settlementreports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Settlementreports settlementreports() {
    return new Settlementreports();
  }

  /**
   * The "settlementreports" collection of methods.
   */
  public class Settlementreports {

    /**
     * Retrieves a settlement report from your Merchant Center account.
     *
     * Create a request for the method "settlementreports.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account of the settlement report.
     * @param settlementId The Google-provided ID of the settlement.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.lang.String settlementId) throws java.io.IOException {
      Get result = new Get(merchantId, settlementId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.SettlementReport> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/settlementreports/{settlementId}";

      /**
       * Retrieves a settlement report from your Merchant Center account.
       *
       * Create a request for the method "settlementreports.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account of the settlement report.
       * @param settlementId The Google-provided ID of the settlement.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.lang.String settlementId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.SettlementReport.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.settlementId = com.google.api.client.util.Preconditions.checkNotNull(settlementId, "Required parameter settlementId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account of the settlement report. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account of the settlement report.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account of the settlement report. */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The Google-provided ID of the settlement. */
      @com.google.api.client.util.Key
      private java.lang.String settlementId;

      /** The Google-provided ID of the settlement.
       */
      public java.lang.String getSettlementId() {
        return settlementId;
      }

      /** The Google-provided ID of the settlement. */
      public Get setSettlementId(java.lang.String settlementId) {
        this.settlementId = settlementId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of settlement reports from your Merchant Center account.
     *
     * Create a request for the method "settlementreports.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to list settlements for.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.SettlementreportsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/settlementreports";

      /**
       * Retrieves a list of settlement reports from your Merchant Center account.
       *
       * Create a request for the method "settlementreports.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to list settlements for.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.SettlementreportsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to list settlements for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to list settlements for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to list settlements for. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /**
       * The maximum number of settlements to return in the response, used for paging. The default
       * value is 200 returns per page, and the maximum allowed value is 5000 returns per page.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of settlements to return in the response, used for paging. The default value is
     200 returns per page, and the maximum allowed value is 5000 returns per page.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of settlements to return in the response, used for paging. The default
       * value is 200 returns per page, and the maximum allowed value is 5000 returns per page.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Obtains settlements which have transactions before this date (inclusively), in ISO 8601
       * format.
       */
      @com.google.api.client.util.Key
      private java.lang.String transferEndDate;

      /** Obtains settlements which have transactions before this date (inclusively), in ISO 8601 format.
       */
      public java.lang.String getTransferEndDate() {
        return transferEndDate;
      }

      /**
       * Obtains settlements which have transactions before this date (inclusively), in ISO 8601
       * format.
       */
      public List setTransferEndDate(java.lang.String transferEndDate) {
        this.transferEndDate = transferEndDate;
        return this;
      }

      /**
       * Obtains settlements which have transactions after this date (inclusively), in ISO 8601
       * format.
       */
      @com.google.api.client.util.Key
      private java.lang.String transferStartDate;

      /** Obtains settlements which have transactions after this date (inclusively), in ISO 8601 format.
       */
      public java.lang.String getTransferStartDate() {
        return transferStartDate;
      }

      /**
       * Obtains settlements which have transactions after this date (inclusively), in ISO 8601
       * format.
       */
      public List setTransferStartDate(java.lang.String transferStartDate) {
        this.transferStartDate = transferStartDate;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Settlementtransactions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Settlementtransactions.List request = content.settlementtransactions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Settlementtransactions settlementtransactions() {
    return new Settlementtransactions();
  }

  /**
   * The "settlementtransactions" collection of methods.
   */
  public class Settlementtransactions {

    /**
     * Retrieves a list of transactions for the settlement.
     *
     * Create a request for the method "settlementtransactions.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The Merchant Center account to list transactions for.
     * @param settlementId The Google-provided ID of the settlement.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId, java.lang.String settlementId) throws java.io.IOException {
      List result = new List(merchantId, settlementId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.SettlementtransactionsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/settlementreports/{settlementId}/transactions";

      /**
       * Retrieves a list of transactions for the settlement.
       *
       * Create a request for the method "settlementtransactions.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The Merchant Center account to list transactions for.
       * @param settlementId The Google-provided ID of the settlement.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId, java.lang.String settlementId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.SettlementtransactionsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.settlementId = com.google.api.client.util.Preconditions.checkNotNull(settlementId, "Required parameter settlementId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The Merchant Center account to list transactions for. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The Merchant Center account to list transactions for.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The Merchant Center account to list transactions for. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The Google-provided ID of the settlement. */
      @com.google.api.client.util.Key
      private java.lang.String settlementId;

      /** The Google-provided ID of the settlement.
       */
      public java.lang.String getSettlementId() {
        return settlementId;
      }

      /** The Google-provided ID of the settlement. */
      public List setSettlementId(java.lang.String settlementId) {
        this.settlementId = settlementId;
        return this;
      }

      /**
       * The maximum number of transactions to return in the response, used for paging. The default
       * value is 200 transactions per page, and the maximum allowed value is 5000 transactions per
       * page.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of transactions to return in the response, used for paging. The default value is
     200 transactions per page, and the maximum allowed value is 5000 transactions per page.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of transactions to return in the response, used for paging. The default
       * value is 200 transactions per page, and the maximum allowed value is 5000 transactions per
       * page.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** The list of transactions to return. If not set, all transactions will be returned. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> transactionIds;

      /** The list of transactions to return. If not set, all transactions will be returned.
       */
      public java.util.List<java.lang.String> getTransactionIds() {
        return transactionIds;
      }

      /** The list of transactions to return. If not set, all transactions will be returned. */
      public List setTransactionIds(java.util.List<java.lang.String> transactionIds) {
        this.transactionIds = transactionIds;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Shippingsettings collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ShoppingContent content = new ShoppingContent(...);}
   *   {@code ShoppingContent.Shippingsettings.List request = content.shippingsettings().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Shippingsettings shippingsettings() {
    return new Shippingsettings();
  }

  /**
   * The "shippingsettings" collection of methods.
   */
  public class Shippingsettings {

    /**
     * Retrieves and updates the shipping settings of multiple accounts in a single request.
     *
     * Create a request for the method "shippingsettings.custombatch".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.content.model.ShippingsettingsCustomBatchRequest}
     * @return the request
     */
    public Custombatch custombatch(com.google.api.services.content.model.ShippingsettingsCustomBatchRequest content) throws java.io.IOException {
      Custombatch result = new Custombatch(content);
      initialize(result);
      return result;
    }

    public class Custombatch extends ShoppingContentRequest<com.google.api.services.content.model.ShippingsettingsCustomBatchResponse> {

      private static final String REST_PATH = "content/v2.1/shippingsettings/batch";

      /**
       * Retrieves and updates the shipping settings of multiple accounts in a single request.
       *
       * Create a request for the method "shippingsettings.custombatch".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Custombatch#execute()} method to invoke the remote operation. <p>
       * {@link
       * Custombatch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.content.model.ShippingsettingsCustomBatchRequest}
       * @since 1.13
       */
      protected Custombatch(com.google.api.services.content.model.ShippingsettingsCustomBatchRequest content) {
        super(ShoppingContent.this, "POST", REST_PATH, content, com.google.api.services.content.model.ShippingsettingsCustomBatchResponse.class);
      }

      @Override
      public Custombatch set$Xgafv(java.lang.String $Xgafv) {
        return (Custombatch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Custombatch setAccessToken(java.lang.String accessToken) {
        return (Custombatch) super.setAccessToken(accessToken);
      }

      @Override
      public Custombatch setAlt(java.lang.String alt) {
        return (Custombatch) super.setAlt(alt);
      }

      @Override
      public Custombatch setCallback(java.lang.String callback) {
        return (Custombatch) super.setCallback(callback);
      }

      @Override
      public Custombatch setFields(java.lang.String fields) {
        return (Custombatch) super.setFields(fields);
      }

      @Override
      public Custombatch setKey(java.lang.String key) {
        return (Custombatch) super.setKey(key);
      }

      @Override
      public Custombatch setOauthToken(java.lang.String oauthToken) {
        return (Custombatch) super.setOauthToken(oauthToken);
      }

      @Override
      public Custombatch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Custombatch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Custombatch setQuotaUser(java.lang.String quotaUser) {
        return (Custombatch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Custombatch setUploadType(java.lang.String uploadType) {
        return (Custombatch) super.setUploadType(uploadType);
      }

      @Override
      public Custombatch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Custombatch) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Custombatch set(String parameterName, Object value) {
        return (Custombatch) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the shipping settings of the account.
     *
     * Create a request for the method "shippingsettings.get".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get/update shipping settings.
     * @return the request
     */
    public Get get(java.math.BigInteger merchantId, java.math.BigInteger accountId) throws java.io.IOException {
      Get result = new Get(merchantId, accountId);
      initialize(result);
      return result;
    }

    public class Get extends ShoppingContentRequest<com.google.api.services.content.model.ShippingSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/shippingsettings/{accountId}";

      /**
       * Retrieves the shipping settings of the account.
       *
       * Create a request for the method "shippingsettings.get".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get/update shipping settings.
       * @since 1.13
       */
      protected Get(java.math.BigInteger merchantId, java.math.BigInteger accountId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ShippingSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Get setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get/update shipping settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get/update shipping settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get/update shipping settings. */
      public Get setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves supported carriers and carrier services for an account.
     *
     * Create a request for the method "shippingsettings.getsupportedcarriers".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getsupportedcarriers#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account for which to retrieve the supported carriers.
     * @return the request
     */
    public Getsupportedcarriers getsupportedcarriers(java.math.BigInteger merchantId) throws java.io.IOException {
      Getsupportedcarriers result = new Getsupportedcarriers(merchantId);
      initialize(result);
      return result;
    }

    public class Getsupportedcarriers extends ShoppingContentRequest<com.google.api.services.content.model.ShippingsettingsGetSupportedCarriersResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/supportedCarriers";

      /**
       * Retrieves supported carriers and carrier services for an account.
       *
       * Create a request for the method "shippingsettings.getsupportedcarriers".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getsupportedcarriers#execute()} method to invoke the remote
       * operation. <p> {@link Getsupportedcarriers#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account for which to retrieve the supported carriers.
       * @since 1.13
       */
      protected Getsupportedcarriers(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ShippingsettingsGetSupportedCarriersResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getsupportedcarriers set$Xgafv(java.lang.String $Xgafv) {
        return (Getsupportedcarriers) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getsupportedcarriers setAccessToken(java.lang.String accessToken) {
        return (Getsupportedcarriers) super.setAccessToken(accessToken);
      }

      @Override
      public Getsupportedcarriers setAlt(java.lang.String alt) {
        return (Getsupportedcarriers) super.setAlt(alt);
      }

      @Override
      public Getsupportedcarriers setCallback(java.lang.String callback) {
        return (Getsupportedcarriers) super.setCallback(callback);
      }

      @Override
      public Getsupportedcarriers setFields(java.lang.String fields) {
        return (Getsupportedcarriers) super.setFields(fields);
      }

      @Override
      public Getsupportedcarriers setKey(java.lang.String key) {
        return (Getsupportedcarriers) super.setKey(key);
      }

      @Override
      public Getsupportedcarriers setOauthToken(java.lang.String oauthToken) {
        return (Getsupportedcarriers) super.setOauthToken(oauthToken);
      }

      @Override
      public Getsupportedcarriers setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getsupportedcarriers) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getsupportedcarriers setQuotaUser(java.lang.String quotaUser) {
        return (Getsupportedcarriers) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getsupportedcarriers setUploadType(java.lang.String uploadType) {
        return (Getsupportedcarriers) super.setUploadType(uploadType);
      }

      @Override
      public Getsupportedcarriers setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getsupportedcarriers) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account for which to retrieve the supported carriers. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account for which to retrieve the supported carriers.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account for which to retrieve the supported carriers. */
      public Getsupportedcarriers setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Getsupportedcarriers set(String parameterName, Object value) {
        return (Getsupportedcarriers) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves supported holidays for an account.
     *
     * Create a request for the method "shippingsettings.getsupportedholidays".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getsupportedholidays#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account for which to retrieve the supported holidays.
     * @return the request
     */
    public Getsupportedholidays getsupportedholidays(java.math.BigInteger merchantId) throws java.io.IOException {
      Getsupportedholidays result = new Getsupportedholidays(merchantId);
      initialize(result);
      return result;
    }

    public class Getsupportedholidays extends ShoppingContentRequest<com.google.api.services.content.model.ShippingsettingsGetSupportedHolidaysResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/supportedHolidays";

      /**
       * Retrieves supported holidays for an account.
       *
       * Create a request for the method "shippingsettings.getsupportedholidays".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getsupportedholidays#execute()} method to invoke the remote
       * operation. <p> {@link Getsupportedholidays#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param merchantId The ID of the account for which to retrieve the supported holidays.
       * @since 1.13
       */
      protected Getsupportedholidays(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ShippingsettingsGetSupportedHolidaysResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getsupportedholidays set$Xgafv(java.lang.String $Xgafv) {
        return (Getsupportedholidays) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getsupportedholidays setAccessToken(java.lang.String accessToken) {
        return (Getsupportedholidays) super.setAccessToken(accessToken);
      }

      @Override
      public Getsupportedholidays setAlt(java.lang.String alt) {
        return (Getsupportedholidays) super.setAlt(alt);
      }

      @Override
      public Getsupportedholidays setCallback(java.lang.String callback) {
        return (Getsupportedholidays) super.setCallback(callback);
      }

      @Override
      public Getsupportedholidays setFields(java.lang.String fields) {
        return (Getsupportedholidays) super.setFields(fields);
      }

      @Override
      public Getsupportedholidays setKey(java.lang.String key) {
        return (Getsupportedholidays) super.setKey(key);
      }

      @Override
      public Getsupportedholidays setOauthToken(java.lang.String oauthToken) {
        return (Getsupportedholidays) super.setOauthToken(oauthToken);
      }

      @Override
      public Getsupportedholidays setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getsupportedholidays) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getsupportedholidays setQuotaUser(java.lang.String quotaUser) {
        return (Getsupportedholidays) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getsupportedholidays setUploadType(java.lang.String uploadType) {
        return (Getsupportedholidays) super.setUploadType(uploadType);
      }

      @Override
      public Getsupportedholidays setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getsupportedholidays) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account for which to retrieve the supported holidays. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account for which to retrieve the supported holidays.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account for which to retrieve the supported holidays. */
      public Getsupportedholidays setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Getsupportedholidays set(String parameterName, Object value) {
        return (Getsupportedholidays) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves supported pickup services for an account.
     *
     * Create a request for the method "shippingsettings.getsupportedpickupservices".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Getsupportedpickupservices#execute()} method to invoke the remote
     * operation.
     *
     * @param merchantId The ID of the account for which to retrieve the supported pickup services.
     * @return the request
     */
    public Getsupportedpickupservices getsupportedpickupservices(java.math.BigInteger merchantId) throws java.io.IOException {
      Getsupportedpickupservices result = new Getsupportedpickupservices(merchantId);
      initialize(result);
      return result;
    }

    public class Getsupportedpickupservices extends ShoppingContentRequest<com.google.api.services.content.model.ShippingsettingsGetSupportedPickupServicesResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/supportedPickupServices";

      /**
       * Retrieves supported pickup services for an account.
       *
       * Create a request for the method "shippingsettings.getsupportedpickupservices".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Getsupportedpickupservices#execute()} method to invoke the remote
       * operation. <p> {@link Getsupportedpickupservices#initialize(com.google.api.client.googleapis.se
       * rvices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param merchantId The ID of the account for which to retrieve the supported pickup services.
       * @since 1.13
       */
      protected Getsupportedpickupservices(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ShippingsettingsGetSupportedPickupServicesResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getsupportedpickupservices set$Xgafv(java.lang.String $Xgafv) {
        return (Getsupportedpickupservices) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getsupportedpickupservices setAccessToken(java.lang.String accessToken) {
        return (Getsupportedpickupservices) super.setAccessToken(accessToken);
      }

      @Override
      public Getsupportedpickupservices setAlt(java.lang.String alt) {
        return (Getsupportedpickupservices) super.setAlt(alt);
      }

      @Override
      public Getsupportedpickupservices setCallback(java.lang.String callback) {
        return (Getsupportedpickupservices) super.setCallback(callback);
      }

      @Override
      public Getsupportedpickupservices setFields(java.lang.String fields) {
        return (Getsupportedpickupservices) super.setFields(fields);
      }

      @Override
      public Getsupportedpickupservices setKey(java.lang.String key) {
        return (Getsupportedpickupservices) super.setKey(key);
      }

      @Override
      public Getsupportedpickupservices setOauthToken(java.lang.String oauthToken) {
        return (Getsupportedpickupservices) super.setOauthToken(oauthToken);
      }

      @Override
      public Getsupportedpickupservices setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getsupportedpickupservices) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getsupportedpickupservices setQuotaUser(java.lang.String quotaUser) {
        return (Getsupportedpickupservices) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getsupportedpickupservices setUploadType(java.lang.String uploadType) {
        return (Getsupportedpickupservices) super.setUploadType(uploadType);
      }

      @Override
      public Getsupportedpickupservices setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getsupportedpickupservices) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the account for which to retrieve the supported pickup services. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the account for which to retrieve the supported pickup services.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the account for which to retrieve the supported pickup services. */
      public Getsupportedpickupservices setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      @Override
      public Getsupportedpickupservices set(String parameterName, Object value) {
        return (Getsupportedpickupservices) super.set(parameterName, value);
      }
    }
    /**
     * Lists the shipping settings of the sub-accounts in your Merchant Center account.
     *
     * Create a request for the method "shippingsettings.list".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. This must be a multi-client account.
     * @return the request
     */
    public List list(java.math.BigInteger merchantId) throws java.io.IOException {
      List result = new List(merchantId);
      initialize(result);
      return result;
    }

    public class List extends ShoppingContentRequest<com.google.api.services.content.model.ShippingsettingsListResponse> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/shippingsettings";

      /**
       * Lists the shipping settings of the sub-accounts in your Merchant Center account.
       *
       * Create a request for the method "shippingsettings.list".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. This must be a multi-client account.
       * @since 1.13
       */
      protected List(java.math.BigInteger merchantId) {
        super(ShoppingContent.this, "GET", REST_PATH, null, com.google.api.services.content.model.ShippingsettingsListResponse.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the managing account. This must be a multi-client account. */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. This must be a multi-client account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /** The ID of the managing account. This must be a multi-client account. */
      public List setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The maximum number of shipping settings to return in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of shipping settings to return in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of shipping settings to return in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the shipping settings of the account. Any fields that are not provided are deleted from
     * the resource.
     *
     * Create a request for the method "shippingsettings.update".
     *
     * This request holds the parameters needed by the content server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
     * @param accountId The ID of the account for which to get/update shipping settings.
     * @param content the {@link com.google.api.services.content.model.ShippingSettings}
     * @return the request
     */
    public Update update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.ShippingSettings content) throws java.io.IOException {
      Update result = new Update(merchantId, accountId, content);
      initialize(result);
      return result;
    }

    public class Update extends ShoppingContentRequest<com.google.api.services.content.model.ShippingSettings> {

      private static final String REST_PATH = "content/v2.1/{merchantId}/shippingsettings/{accountId}";

      /**
       * Updates the shipping settings of the account. Any fields that are not provided are deleted from
       * the resource.
       *
       * Create a request for the method "shippingsettings.update".
       *
       * This request holds the parameters needed by the the content server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account
     *        must be a multi-client account and `accountId` must be the ID of a sub-account of this
     *        account.
       * @param accountId The ID of the account for which to get/update shipping settings.
       * @param content the {@link com.google.api.services.content.model.ShippingSettings}
       * @since 1.13
       */
      protected Update(java.math.BigInteger merchantId, java.math.BigInteger accountId, com.google.api.services.content.model.ShippingSettings content) {
        super(ShoppingContent.this, "PUT", REST_PATH, content, com.google.api.services.content.model.ShippingSettings.class);
        this.merchantId = com.google.api.client.util.Preconditions.checkNotNull(merchantId, "Required parameter merchantId must be specified.");
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      @com.google.api.client.util.Key
      private java.math.BigInteger merchantId;

      /** The ID of the managing account. If this parameter is not the same as accountId, then this account
     must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
       */
      public java.math.BigInteger getMerchantId() {
        return merchantId;
      }

      /**
       * The ID of the managing account. If this parameter is not the same as accountId, then this
       * account must be a multi-client account and `accountId` must be the ID of a sub-account of
       * this account.
       */
      public Update setMerchantId(java.math.BigInteger merchantId) {
        this.merchantId = merchantId;
        return this;
      }

      /** The ID of the account for which to get/update shipping settings. */
      @com.google.api.client.util.Key
      private java.math.BigInteger accountId;

      /** The ID of the account for which to get/update shipping settings.
       */
      public java.math.BigInteger getAccountId() {
        return accountId;
      }

      /** The ID of the account for which to get/update shipping settings. */
      public Update setAccountId(java.math.BigInteger accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link ShoppingContent}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link ShoppingContent}. */
    @Override
    public ShoppingContent build() {
      return new ShoppingContent(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ShoppingContentRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setShoppingContentRequestInitializer(
        ShoppingContentRequestInitializer shoppingcontentRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(shoppingcontentRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
