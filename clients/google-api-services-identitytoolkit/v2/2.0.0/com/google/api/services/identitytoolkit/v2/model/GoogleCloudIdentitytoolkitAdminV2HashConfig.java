/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.identitytoolkit.v2.model;

/**
 * History information of the hash algorithm and key. Different accounts' passwords may be generated
 * by different version.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity Toolkit API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudIdentitytoolkitAdminV2HashConfig extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String algorithm;

  /**
   * Output only. Memory cost for hash calculation. Used by scrypt and other similar password
   * derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryCost;

  /**
   * Output only. How many rounds for hash calculation. Used by scrypt and other similar password
   * derivation algorithms.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rounds;

  /**
   * Output only. Non-printable character to be inserted between the salt and plain text password in
   * base64.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String saltSeparator;

  /**
   * Output only. Signer key in base64.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signerKey;

  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   * @return value or {@code null} for none
   */
  public java.lang.String getAlgorithm() {
    return algorithm;
  }

  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   * @param algorithm algorithm or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2HashConfig setAlgorithm(java.lang.String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Output only. Memory cost for hash calculation. Used by scrypt and other similar password
   * derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryCost() {
    return memoryCost;
  }

  /**
   * Output only. Memory cost for hash calculation. Used by scrypt and other similar password
   * derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
   * @param memoryCost memoryCost or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2HashConfig setMemoryCost(java.lang.Integer memoryCost) {
    this.memoryCost = memoryCost;
    return this;
  }

  /**
   * Output only. How many rounds for hash calculation. Used by scrypt and other similar password
   * derivation algorithms.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRounds() {
    return rounds;
  }

  /**
   * Output only. How many rounds for hash calculation. Used by scrypt and other similar password
   * derivation algorithms.
   * @param rounds rounds or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2HashConfig setRounds(java.lang.Integer rounds) {
    this.rounds = rounds;
    return this;
  }

  /**
   * Output only. Non-printable character to be inserted between the salt and plain text password in
   * base64.
   * @return value or {@code null} for none
   */
  public java.lang.String getSaltSeparator() {
    return saltSeparator;
  }

  /**
   * Output only. Non-printable character to be inserted between the salt and plain text password in
   * base64.
   * @param saltSeparator saltSeparator or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2HashConfig setSaltSeparator(java.lang.String saltSeparator) {
    this.saltSeparator = saltSeparator;
    return this;
  }

  /**
   * Output only. Signer key in base64.
   * @return value or {@code null} for none
   */
  public java.lang.String getSignerKey() {
    return signerKey;
  }

  /**
   * Output only. Signer key in base64.
   * @param signerKey signerKey or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2HashConfig setSignerKey(java.lang.String signerKey) {
    this.signerKey = signerKey;
    return this;
  }

  @Override
  public GoogleCloudIdentitytoolkitAdminV2HashConfig set(String fieldName, Object value) {
    return (GoogleCloudIdentitytoolkitAdminV2HashConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudIdentitytoolkitAdminV2HashConfig clone() {
    return (GoogleCloudIdentitytoolkitAdminV2HashConfig) super.clone();
  }

}
