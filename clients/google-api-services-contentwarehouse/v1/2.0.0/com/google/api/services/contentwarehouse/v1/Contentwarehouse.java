/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1;

/**
 * Service definition for Contentwarehouse (v1).
 *
 * <p>
 * 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/document-warehouse" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ContentwarehouseRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Contentwarehouse extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the contentwarehouse API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://contentwarehouse.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://contentwarehouse.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Contentwarehouse(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Contentwarehouse(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
   *   {@code Contentwarehouse.Projects.List request = contentwarehouse.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not
     * exist. Returns an empty policy if the resource exists but does not have a policy set.
     *
     * Create a request for the method "projects.fetchAcl".
     *
     * This request holds the parameters needed by the contentwarehouse server.  After setting any
     * optional parameters, call the {@link FetchAcl#execute()} method to invoke the remote operation.
     *
     * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
     *        project: projects/{project_number}.
     * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest}
     * @return the request
     */
    public FetchAcl fetchAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest content) throws java.io.IOException {
      FetchAcl result = new FetchAcl(resource, content);
      initialize(result);
      return result;
    }

    public class FetchAcl extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclResponse> {

      private static final String REST_PATH = "v1/{+resource}:fetchAcl";

      private final java.util.regex.Pattern RESOURCE_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not
       * exist. Returns an empty policy if the resource exists but does not have a policy set.
       *
       * Create a request for the method "projects.fetchAcl".
       *
       * This request holds the parameters needed by the the contentwarehouse server.  After setting any
       * optional parameters, call the {@link FetchAcl#execute()} method to invoke the remote operation.
       * <p> {@link
       * FetchAcl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
     *        project: projects/{project_number}.
       * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest}
       * @since 1.13
       */
      protected FetchAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest content) {
        super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclResponse.class);
        this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
              "Parameter resource must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public FetchAcl set$Xgafv(java.lang.String $Xgafv) {
        return (FetchAcl) super.set$Xgafv($Xgafv);
      }

      @Override
      public FetchAcl setAccessToken(java.lang.String accessToken) {
        return (FetchAcl) super.setAccessToken(accessToken);
      }

      @Override
      public FetchAcl setAlt(java.lang.String alt) {
        return (FetchAcl) super.setAlt(alt);
      }

      @Override
      public FetchAcl setCallback(java.lang.String callback) {
        return (FetchAcl) super.setCallback(callback);
      }

      @Override
      public FetchAcl setFields(java.lang.String fields) {
        return (FetchAcl) super.setFields(fields);
      }

      @Override
      public FetchAcl setKey(java.lang.String key) {
        return (FetchAcl) super.setKey(key);
      }

      @Override
      public FetchAcl setOauthToken(java.lang.String oauthToken) {
        return (FetchAcl) super.setOauthToken(oauthToken);
      }

      @Override
      public FetchAcl setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (FetchAcl) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public FetchAcl setQuotaUser(java.lang.String quotaUser) {
        return (FetchAcl) super.setQuotaUser(quotaUser);
      }

      @Override
      public FetchAcl setUploadType(java.lang.String uploadType) {
        return (FetchAcl) super.setUploadType(uploadType);
      }

      @Override
      public FetchAcl setUploadProtocol(java.lang.String uploadProtocol) {
        return (FetchAcl) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. REQUIRED: The resource for which the policy is being requested. Format for
       * document: projects/{project_number}/locations/{location}/documents/{document_id}. Format
       * for project: projects/{project_number}.
       */
      @com.google.api.client.util.Key
      private java.lang.String resource;

      /** Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     projects/{project_number}/locations/{location}/documents/{document_id}. Format for project:
     projects/{project_number}.
       */
      public java.lang.String getResource() {
        return resource;
      }

      /**
       * Required. REQUIRED: The resource for which the policy is being requested. Format for
       * document: projects/{project_number}/locations/{location}/documents/{document_id}. Format
       * for project: projects/{project_number}.
       */
      public FetchAcl setResource(java.lang.String resource) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
              "Parameter resource must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.resource = resource;
        return this;
      }

      @Override
      public FetchAcl set(String parameterName, Object value) {
        return (FetchAcl) super.set(parameterName, value);
      }
    }
    /**
     * Sets the access control policy for a resource. Replaces any existing policy.
     *
     * Create a request for the method "projects.setAcl".
     *
     * This request holds the parameters needed by the contentwarehouse server.  After setting any
     * optional parameters, call the {@link SetAcl#execute()} method to invoke the remote operation.
     *
     * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
     *        project: projects/{project_number}.
     * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest}
     * @return the request
     */
    public SetAcl setAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest content) throws java.io.IOException {
      SetAcl result = new SetAcl(resource, content);
      initialize(result);
      return result;
    }

    public class SetAcl extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclResponse> {

      private static final String REST_PATH = "v1/{+resource}:setAcl";

      private final java.util.regex.Pattern RESOURCE_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Sets the access control policy for a resource. Replaces any existing policy.
       *
       * Create a request for the method "projects.setAcl".
       *
       * This request holds the parameters needed by the the contentwarehouse server.  After setting any
       * optional parameters, call the {@link SetAcl#execute()} method to invoke the remote operation.
       * <p> {@link
       * SetAcl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
     *        project: projects/{project_number}.
       * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest}
       * @since 1.13
       */
      protected SetAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest content) {
        super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclResponse.class);
        this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
              "Parameter resource must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public SetAcl set$Xgafv(java.lang.String $Xgafv) {
        return (SetAcl) super.set$Xgafv($Xgafv);
      }

      @Override
      public SetAcl setAccessToken(java.lang.String accessToken) {
        return (SetAcl) super.setAccessToken(accessToken);
      }

      @Override
      public SetAcl setAlt(java.lang.String alt) {
        return (SetAcl) super.setAlt(alt);
      }

      @Override
      public SetAcl setCallback(java.lang.String callback) {
        return (SetAcl) super.setCallback(callback);
      }

      @Override
      public SetAcl setFields(java.lang.String fields) {
        return (SetAcl) super.setFields(fields);
      }

      @Override
      public SetAcl setKey(java.lang.String key) {
        return (SetAcl) super.setKey(key);
      }

      @Override
      public SetAcl setOauthToken(java.lang.String oauthToken) {
        return (SetAcl) super.setOauthToken(oauthToken);
      }

      @Override
      public SetAcl setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SetAcl) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SetAcl setQuotaUser(java.lang.String quotaUser) {
        return (SetAcl) super.setQuotaUser(quotaUser);
      }

      @Override
      public SetAcl setUploadType(java.lang.String uploadType) {
        return (SetAcl) super.setUploadType(uploadType);
      }

      @Override
      public SetAcl setUploadProtocol(java.lang.String uploadProtocol) {
        return (SetAcl) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. REQUIRED: The resource for which the policy is being requested. Format for
       * document: projects/{project_number}/locations/{location}/documents/{document_id}. Format
       * for project: projects/{project_number}.
       */
      @com.google.api.client.util.Key
      private java.lang.String resource;

      /** Required. REQUIRED: The resource for which the policy is being requested. Format for document:
     projects/{project_number}/locations/{location}/documents/{document_id}. Format for project:
     projects/{project_number}.
       */
      public java.lang.String getResource() {
        return resource;
      }

      /**
       * Required. REQUIRED: The resource for which the policy is being requested. Format for
       * document: projects/{project_number}/locations/{location}/documents/{document_id}. Format
       * for project: projects/{project_number}.
       */
      public SetAcl setResource(java.lang.String resource) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
              "Parameter resource must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.resource = resource;
        return this;
      }

      @Override
      public SetAcl set(String parameterName, Object value) {
        return (SetAcl) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
     *   {@code Contentwarehouse.Locations.List request = contentwarehouse.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Provisions resources for given tenant project. Returns a long running operation.
       *
       * Create a request for the method "locations.initialize".
       *
       * This request holds the parameters needed by the contentwarehouse server.  After setting any
       * optional parameters, call the {@link Initialize#execute()} method to invoke the remote operation.
       *
       * @param location Required. The location to be initialized Format: projects/{project_number}/locations/{location}.
       * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1InitializeProjectRequest}
       * @return the request
       */
      public Initialize initialize(java.lang.String location, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1InitializeProjectRequest content) throws java.io.IOException {
        Initialize result = new Initialize(location, content);
        initialize(result);
        return result;
      }

      public class Initialize extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+location}:initialize";

        private final java.util.regex.Pattern LOCATION_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Provisions resources for given tenant project. Returns a long running operation.
         *
         * Create a request for the method "locations.initialize".
         *
         * This request holds the parameters needed by the the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Initialize#execute()} method to invoke the remote
         * operation. <p> {@link
         * Initialize#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param location Required. The location to be initialized Format: projects/{project_number}/locations/{location}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1InitializeProjectRequest}
         * @since 1.13
         */
        protected Initialize(java.lang.String location, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1InitializeProjectRequest content) {
          super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleLongrunningOperation.class);
          this.location = com.google.api.client.util.Preconditions.checkNotNull(location, "Required parameter location must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(LOCATION_PATTERN.matcher(location).matches(),
                "Parameter location must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public Initialize set$Xgafv(java.lang.String $Xgafv) {
          return (Initialize) super.set$Xgafv($Xgafv);
        }

        @Override
        public Initialize setAccessToken(java.lang.String accessToken) {
          return (Initialize) super.setAccessToken(accessToken);
        }

        @Override
        public Initialize setAlt(java.lang.String alt) {
          return (Initialize) super.setAlt(alt);
        }

        @Override
        public Initialize setCallback(java.lang.String callback) {
          return (Initialize) super.setCallback(callback);
        }

        @Override
        public Initialize setFields(java.lang.String fields) {
          return (Initialize) super.setFields(fields);
        }

        @Override
        public Initialize setKey(java.lang.String key) {
          return (Initialize) super.setKey(key);
        }

        @Override
        public Initialize setOauthToken(java.lang.String oauthToken) {
          return (Initialize) super.setOauthToken(oauthToken);
        }

        @Override
        public Initialize setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Initialize) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Initialize setQuotaUser(java.lang.String quotaUser) {
          return (Initialize) super.setQuotaUser(quotaUser);
        }

        @Override
        public Initialize setUploadType(java.lang.String uploadType) {
          return (Initialize) super.setUploadType(uploadType);
        }

        @Override
        public Initialize setUploadProtocol(java.lang.String uploadProtocol) {
          return (Initialize) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The location to be initialized Format:
         * projects/{project_number}/locations/{location}.
         */
        @com.google.api.client.util.Key
        private java.lang.String location;

        /** Required. The location to be initialized Format: projects/{project_number}/locations/{location}.
         */
        public java.lang.String getLocation() {
          return location;
        }

        /**
         * Required. The location to be initialized Format:
         * projects/{project_number}/locations/{location}.
         */
        public Initialize setLocation(java.lang.String location) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(LOCATION_PATTERN.matcher(location).matches(),
                "Parameter location must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.location = location;
          return this;
        }

        @Override
        public Initialize set(String parameterName, Object value) {
          return (Initialize) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the DocumentSchemas collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
       *   {@code Contentwarehouse.DocumentSchemas.List request = contentwarehouse.documentSchemas().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public DocumentSchemas documentSchemas() {
        return new DocumentSchemas();
      }

      /**
       * The "documentSchemas" collection of methods.
       */
      public class DocumentSchemas {

        /**
         * Creates a document schema.
         *
         * Create a request for the method "documentSchemas.create".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent name.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema> {

          private static final String REST_PATH = "v1/{+parent}/documentSchemas";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a document schema.
           *
           * Create a request for the method "documentSchemas.create".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent name.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent name. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent name.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent name. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a document schema. Returns NOT_FOUND if the document schema does not exist.
         *
         * Create a request for the method "documentSchemas.delete".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document schema to delete.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");

          /**
           * Deletes a document schema. Returns NOT_FOUND if the document schema does not exist.
           *
           * Create a request for the method "documentSchemas.delete".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document schema to delete.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Contentwarehouse.this, "DELETE", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the document schema to delete. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document schema to delete.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the document schema to delete. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
         *
         * Create a request for the method "documentSchemas.get".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document schema to retrieve.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");

          /**
           * Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
           *
           * Create a request for the method "documentSchemas.get".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document schema to retrieve.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the document schema to retrieve. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document schema to retrieve.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the document schema to retrieve. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists document schemas.
         *
         * Create a request for the method "documentSchemas.list".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns this collection of document schemas. Format:
         *        projects/{project_number}/locations/{location}.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListDocumentSchemasResponse> {

          private static final String REST_PATH = "v1/{+parent}/documentSchemas";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists document schemas.
           *
           * Create a request for the method "documentSchemas.list".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns this collection of document schemas. Format:
         *        projects/{project_number}/locations/{location}.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListDocumentSchemasResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns this collection of document schemas. Format:
           * projects/{project_number}/locations/{location}.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns this collection of document schemas. Format:
         projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns this collection of document schemas. Format:
           * projects/{project_number}/locations/{location}.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of document schemas to return. The service may return fewer than
           * this value. If unspecified, at most 50 document schemas will be returned. The maximum
           * value is 1000; values above 1000 will be coerced to 1000.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of document schemas to return. The service may return fewer than this value. If
         unspecified, at most 50 document schemas will be returned. The maximum value is 1000; values above
         1000 will be coerced to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of document schemas to return. The service may return fewer than
           * this value. If unspecified, at most 50 document schemas will be returned. The maximum
           * value is 1000; values above 1000 will be coerced to 1000.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A page token, received from a previous `ListDocumentSchemas` call. Provide this to
           * retrieve the subsequent page. When paginating, all other parameters provided to
           * `ListDocumentSchemas` must match the call that provided the page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A page token, received from a previous `ListDocumentSchemas` call. Provide this to retrieve the
         subsequent page. When paginating, all other parameters provided to `ListDocumentSchemas` must match
         the call that provided the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A page token, received from a previous `ListDocumentSchemas` call. Provide this to
           * retrieve the subsequent page. When paginating, all other parameters provided to
           * `ListDocumentSchemas` must match the call that provided the page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the Document Schema is non-
         * empty and does not equal the existing name. Supports only appending new properties and updating
         * existing properties will result into INVALID_ARGUMENT.
         *
         * Create a request for the method "documentSchemas.patch".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document schema to update. Format:
         *        projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");

          /**
           * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the Document Schema is non-
           * empty and does not equal the existing name. Supports only appending new properties and updating
           * existing properties will result into INVALID_ARGUMENT.
           *
           * Create a request for the method "documentSchemas.patch".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document schema to update. Format:
         *        projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest content) {
            super(Contentwarehouse.this, "PATCH", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentSchema.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document schema to update. Format:
           * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document schema to update. Format:
         projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the document schema to update. Format:
           * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documentSchemas/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Documents collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
       *   {@code Contentwarehouse.Documents.List request = contentwarehouse.documents().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Documents documents() {
        return new Documents();
      }

      /**
       * The "documents" collection of methods.
       */
      public class Documents {

        /**
         * Creates a document.
         *
         * Create a request for the method "documents.create".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentRequest}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentRequest content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentResponse> {

          private static final String REST_PATH = "v1/{+parent}/documents";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a document.
           *
           * Create a request for the method "documents.create".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentRequest}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a document. Returns NOT_FOUND if the document does not exist.
         *
         * Create a request for the method "documents.delete".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document to delete. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest}
         * @return the request
         */
        public Delete delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest content) throws java.io.IOException {
          Delete result = new Delete(name, content);
          initialize(result);
          return result;
        }

        public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+name}:delete";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Deletes a document. Returns NOT_FOUND if the document does not exist.
           *
           * Create a request for the method "documents.delete".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document to delete. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest}
           * @since 1.13
           */
          protected Delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document to delete. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document to delete. Format:
         projects/{project_number}/locations/{location}/documents/{document_id} or
         projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the document to delete. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not
         * exist. Returns an empty policy if the resource exists but does not have a policy set.
         *
         * Create a request for the method "documents.fetchAcl".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link FetchAcl#execute()} method to invoke the remote operation.
         *
         * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
         *        project: projects/{project_number}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest}
         * @return the request
         */
        public FetchAcl fetchAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest content) throws java.io.IOException {
          FetchAcl result = new FetchAcl(resource, content);
          initialize(result);
          return result;
        }

        public class FetchAcl extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclResponse> {

          private static final String REST_PATH = "v1/{+resource}:fetchAcl";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not
           * exist. Returns an empty policy if the resource exists but does not have a policy set.
           *
           * Create a request for the method "documents.fetchAcl".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link FetchAcl#execute()} method to invoke the remote operation.
           * <p> {@link
           * FetchAcl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
         *        project: projects/{project_number}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest}
           * @since 1.13
           */
          protected FetchAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1FetchAclResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public FetchAcl set$Xgafv(java.lang.String $Xgafv) {
            return (FetchAcl) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchAcl setAccessToken(java.lang.String accessToken) {
            return (FetchAcl) super.setAccessToken(accessToken);
          }

          @Override
          public FetchAcl setAlt(java.lang.String alt) {
            return (FetchAcl) super.setAlt(alt);
          }

          @Override
          public FetchAcl setCallback(java.lang.String callback) {
            return (FetchAcl) super.setCallback(callback);
          }

          @Override
          public FetchAcl setFields(java.lang.String fields) {
            return (FetchAcl) super.setFields(fields);
          }

          @Override
          public FetchAcl setKey(java.lang.String key) {
            return (FetchAcl) super.setKey(key);
          }

          @Override
          public FetchAcl setOauthToken(java.lang.String oauthToken) {
            return (FetchAcl) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchAcl setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchAcl) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchAcl setQuotaUser(java.lang.String quotaUser) {
            return (FetchAcl) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchAcl setUploadType(java.lang.String uploadType) {
            return (FetchAcl) super.setUploadType(uploadType);
          }

          @Override
          public FetchAcl setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchAcl) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. REQUIRED: The resource for which the policy is being requested. Format for
           * document: projects/{project_number}/locations/{location}/documents/{document_id}.
           * Format for project: projects/{project_number}.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         projects/{project_number}/locations/{location}/documents/{document_id}. Format for project:
         projects/{project_number}.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * Required. REQUIRED: The resource for which the policy is being requested. Format for
           * document: projects/{project_number}/locations/{location}/documents/{document_id}.
           * Format for project: projects/{project_number}.
           */
          public FetchAcl setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public FetchAcl set(String parameterName, Object value) {
            return (FetchAcl) super.set(parameterName, value);
          }
        }
        /**
         * Gets a document. Returns NOT_FOUND if the document does not exist.
         *
         * Create a request for the method "documents.get".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document to retrieve. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest}
         * @return the request
         */
        public Get get(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest content) throws java.io.IOException {
          Get result = new Get(name, content);
          initialize(result);
          return result;
        }

        public class Get extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1Document> {

          private static final String REST_PATH = "v1/{+name}:get";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Gets a document. Returns NOT_FOUND if the document does not exist.
           *
           * Create a request for the method "documents.get".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document to retrieve. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest}
           * @since 1.13
           */
          protected Get(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1Document.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document to retrieve. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document to retrieve. Format:
         projects/{project_number}/locations/{location}/documents/{document_id} or
         projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the document to retrieve. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Return all source document-links from the document.
         *
         * Create a request for the method "documents.linkedSources".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link LinkedSources#execute()} method to invoke the remote
         * operation.
         *
         * @param parent Required. The name of the document, for which all source links are returned. Format:
         *        projects/{project_number}/locations/{location}/documents/{source_document_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesRequest}
         * @return the request
         */
        public LinkedSources linkedSources(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesRequest content) throws java.io.IOException {
          LinkedSources result = new LinkedSources(parent, content);
          initialize(result);
          return result;
        }

        public class LinkedSources extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesResponse> {

          private static final String REST_PATH = "v1/{+parent}/linkedSources";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Return all source document-links from the document.
           *
           * Create a request for the method "documents.linkedSources".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link LinkedSources#execute()} method to invoke the remote
           * operation. <p> {@link LinkedSources#initialize(com.google.api.client.googleapis.services.Abstra
           * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The name of the document, for which all source links are returned. Format:
         *        projects/{project_number}/locations/{location}/documents/{source_document_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesRequest}
           * @since 1.13
           */
          protected LinkedSources(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedSourcesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public LinkedSources set$Xgafv(java.lang.String $Xgafv) {
            return (LinkedSources) super.set$Xgafv($Xgafv);
          }

          @Override
          public LinkedSources setAccessToken(java.lang.String accessToken) {
            return (LinkedSources) super.setAccessToken(accessToken);
          }

          @Override
          public LinkedSources setAlt(java.lang.String alt) {
            return (LinkedSources) super.setAlt(alt);
          }

          @Override
          public LinkedSources setCallback(java.lang.String callback) {
            return (LinkedSources) super.setCallback(callback);
          }

          @Override
          public LinkedSources setFields(java.lang.String fields) {
            return (LinkedSources) super.setFields(fields);
          }

          @Override
          public LinkedSources setKey(java.lang.String key) {
            return (LinkedSources) super.setKey(key);
          }

          @Override
          public LinkedSources setOauthToken(java.lang.String oauthToken) {
            return (LinkedSources) super.setOauthToken(oauthToken);
          }

          @Override
          public LinkedSources setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (LinkedSources) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public LinkedSources setQuotaUser(java.lang.String quotaUser) {
            return (LinkedSources) super.setQuotaUser(quotaUser);
          }

          @Override
          public LinkedSources setUploadType(java.lang.String uploadType) {
            return (LinkedSources) super.setUploadType(uploadType);
          }

          @Override
          public LinkedSources setUploadProtocol(java.lang.String uploadProtocol) {
            return (LinkedSources) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document, for which all source links are returned. Format:
           * projects/{project_number}/locations/{location}/documents/{source_document_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The name of the document, for which all source links are returned. Format:
         projects/{project_number}/locations/{location}/documents/{source_document_id}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The name of the document, for which all source links are returned. Format:
           * projects/{project_number}/locations/{location}/documents/{source_document_id}.
           */
          public LinkedSources setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public LinkedSources set(String parameterName, Object value) {
            return (LinkedSources) super.set(parameterName, value);
          }
        }
        /**
         * Return all target document-links from the document.
         *
         * Create a request for the method "documents.linkedTargets".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link LinkedTargets#execute()} method to invoke the remote
         * operation.
         *
         * @param parent Required. The name of the document, for which all target links are returned. Format:
         *        projects/{project_number}/locations/{location}/documents/{target_document_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsRequest}
         * @return the request
         */
        public LinkedTargets linkedTargets(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsRequest content) throws java.io.IOException {
          LinkedTargets result = new LinkedTargets(parent, content);
          initialize(result);
          return result;
        }

        public class LinkedTargets extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsResponse> {

          private static final String REST_PATH = "v1/{+parent}/linkedTargets";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Return all target document-links from the document.
           *
           * Create a request for the method "documents.linkedTargets".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link LinkedTargets#execute()} method to invoke the remote
           * operation. <p> {@link LinkedTargets#initialize(com.google.api.client.googleapis.services.Abstra
           * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The name of the document, for which all target links are returned. Format:
         *        projects/{project_number}/locations/{location}/documents/{target_document_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsRequest}
           * @since 1.13
           */
          protected LinkedTargets(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListLinkedTargetsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public LinkedTargets set$Xgafv(java.lang.String $Xgafv) {
            return (LinkedTargets) super.set$Xgafv($Xgafv);
          }

          @Override
          public LinkedTargets setAccessToken(java.lang.String accessToken) {
            return (LinkedTargets) super.setAccessToken(accessToken);
          }

          @Override
          public LinkedTargets setAlt(java.lang.String alt) {
            return (LinkedTargets) super.setAlt(alt);
          }

          @Override
          public LinkedTargets setCallback(java.lang.String callback) {
            return (LinkedTargets) super.setCallback(callback);
          }

          @Override
          public LinkedTargets setFields(java.lang.String fields) {
            return (LinkedTargets) super.setFields(fields);
          }

          @Override
          public LinkedTargets setKey(java.lang.String key) {
            return (LinkedTargets) super.setKey(key);
          }

          @Override
          public LinkedTargets setOauthToken(java.lang.String oauthToken) {
            return (LinkedTargets) super.setOauthToken(oauthToken);
          }

          @Override
          public LinkedTargets setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (LinkedTargets) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public LinkedTargets setQuotaUser(java.lang.String quotaUser) {
            return (LinkedTargets) super.setQuotaUser(quotaUser);
          }

          @Override
          public LinkedTargets setUploadType(java.lang.String uploadType) {
            return (LinkedTargets) super.setUploadType(uploadType);
          }

          @Override
          public LinkedTargets setUploadProtocol(java.lang.String uploadProtocol) {
            return (LinkedTargets) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document, for which all target links are returned. Format:
           * projects/{project_number}/locations/{location}/documents/{target_document_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The name of the document, for which all target links are returned. Format:
         projects/{project_number}/locations/{location}/documents/{target_document_id}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The name of the document, for which all target links are returned. Format:
           * projects/{project_number}/locations/{location}/documents/{target_document_id}.
           */
          public LinkedTargets setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public LinkedTargets set(String parameterName, Object value) {
            return (LinkedTargets) super.set(parameterName, value);
          }
        }
        /**
         * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does
         * not equal the existing name.
         *
         * Create a request for the method "documents.patch".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the document to update. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentResponse> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does
           * not equal the existing name.
           *
           * Create a request for the method "documents.patch".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the document to update. Format:
         *        projects/{project_number}/locations/{location}/documents/{document_id} or
         *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest content) {
            super(Contentwarehouse.this, "PATCH", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the document to update. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the document to update. Format:
         projects/{project_number}/locations/{location}/documents/{document_id} or
         projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the document to update. Format:
           * projects/{project_number}/locations/{location}/documents/{document_id} or
           * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Searches for documents using provided SearchDocumentsRequest. This call only returns documents
         * that the caller has permission to search against.
         *
         * Create a request for the method "documents.search".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns this collection of documents. Format:
         *        projects/{project_number}/locations/{location}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsRequest}
         * @return the request
         */
        public Search search(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsRequest content) throws java.io.IOException {
          Search result = new Search(parent, content);
          initialize(result);
          return result;
        }

        public class Search extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsResponse> {

          private static final String REST_PATH = "v1/{+parent}/documents:search";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Searches for documents using provided SearchDocumentsRequest. This call only returns documents
           * that the caller has permission to search against.
           *
           * Create a request for the method "documents.search".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
           * <p> {@link
           * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns this collection of documents. Format:
         *        projects/{project_number}/locations/{location}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsRequest}
           * @since 1.13
           */
          protected Search(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SearchDocumentsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Search set$Xgafv(java.lang.String $Xgafv) {
            return (Search) super.set$Xgafv($Xgafv);
          }

          @Override
          public Search setAccessToken(java.lang.String accessToken) {
            return (Search) super.setAccessToken(accessToken);
          }

          @Override
          public Search setAlt(java.lang.String alt) {
            return (Search) super.setAlt(alt);
          }

          @Override
          public Search setCallback(java.lang.String callback) {
            return (Search) super.setCallback(callback);
          }

          @Override
          public Search setFields(java.lang.String fields) {
            return (Search) super.setFields(fields);
          }

          @Override
          public Search setKey(java.lang.String key) {
            return (Search) super.setKey(key);
          }

          @Override
          public Search setOauthToken(java.lang.String oauthToken) {
            return (Search) super.setOauthToken(oauthToken);
          }

          @Override
          public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Search) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Search setQuotaUser(java.lang.String quotaUser) {
            return (Search) super.setQuotaUser(quotaUser);
          }

          @Override
          public Search setUploadType(java.lang.String uploadType) {
            return (Search) super.setUploadType(uploadType);
          }

          @Override
          public Search setUploadProtocol(java.lang.String uploadProtocol) {
            return (Search) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns this collection of documents. Format:
           * projects/{project_number}/locations/{location}.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns this collection of documents. Format:
         projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns this collection of documents. Format:
           * projects/{project_number}/locations/{location}.
           */
          public Search setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Search set(String parameterName, Object value) {
            return (Search) super.set(parameterName, value);
          }
        }
        /**
         * Sets the access control policy for a resource. Replaces any existing policy.
         *
         * Create a request for the method "documents.setAcl".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link SetAcl#execute()} method to invoke the remote operation.
         *
         * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
         *        project: projects/{project_number}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest}
         * @return the request
         */
        public SetAcl setAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest content) throws java.io.IOException {
          SetAcl result = new SetAcl(resource, content);
          initialize(result);
          return result;
        }

        public class SetAcl extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclResponse> {

          private static final String REST_PATH = "v1/{+resource}:setAcl";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

          /**
           * Sets the access control policy for a resource. Replaces any existing policy.
           *
           * Create a request for the method "documents.setAcl".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link SetAcl#execute()} method to invoke the remote operation.
           * <p> {@link
           * SetAcl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         *        projects/{project_number}/locations/{location}/documents/{document_id}. Format for
         *        project: projects/{project_number}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest}
           * @since 1.13
           */
          protected SetAcl(java.lang.String resource, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclRequest content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SetAclResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
          }

          @Override
          public SetAcl set$Xgafv(java.lang.String $Xgafv) {
            return (SetAcl) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetAcl setAccessToken(java.lang.String accessToken) {
            return (SetAcl) super.setAccessToken(accessToken);
          }

          @Override
          public SetAcl setAlt(java.lang.String alt) {
            return (SetAcl) super.setAlt(alt);
          }

          @Override
          public SetAcl setCallback(java.lang.String callback) {
            return (SetAcl) super.setCallback(callback);
          }

          @Override
          public SetAcl setFields(java.lang.String fields) {
            return (SetAcl) super.setFields(fields);
          }

          @Override
          public SetAcl setKey(java.lang.String key) {
            return (SetAcl) super.setKey(key);
          }

          @Override
          public SetAcl setOauthToken(java.lang.String oauthToken) {
            return (SetAcl) super.setOauthToken(oauthToken);
          }

          @Override
          public SetAcl setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetAcl) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetAcl setQuotaUser(java.lang.String quotaUser) {
            return (SetAcl) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetAcl setUploadType(java.lang.String uploadType) {
            return (SetAcl) super.setUploadType(uploadType);
          }

          @Override
          public SetAcl setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetAcl) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. REQUIRED: The resource for which the policy is being requested. Format for
           * document: projects/{project_number}/locations/{location}/documents/{document_id}.
           * Format for project: projects/{project_number}.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** Required. REQUIRED: The resource for which the policy is being requested. Format for document:
         projects/{project_number}/locations/{location}/documents/{document_id}. Format for project:
         projects/{project_number}.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * Required. REQUIRED: The resource for which the policy is being requested. Format for
           * document: projects/{project_number}/locations/{location}/documents/{document_id}.
           * Format for project: projects/{project_number}.
           */
          public SetAcl setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetAcl set(String parameterName, Object value) {
            return (SetAcl) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the DocumentLinks collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
         *   {@code Contentwarehouse.DocumentLinks.List request = contentwarehouse.documentLinks().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public DocumentLinks documentLinks() {
          return new DocumentLinks();
        }

        /**
         * The "documentLinks" collection of methods.
         */
        public class DocumentLinks {

          /**
           * Create a link between a source document and a target document.
           *
           * Create a request for the method "documentLinks.create".
           *
           * This request holds the parameters needed by the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Parent of the document-link to be created. parent of document-link should be a document.
           *        Format: projects/{project_number}/locations/{location}/documents/{source_document_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentLinkRequest}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentLinkRequest content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentLink> {

            private static final String REST_PATH = "v1/{+parent}/documentLinks";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+$");

            /**
             * Create a link between a source document and a target document.
             *
             * Create a request for the method "documentLinks.create".
             *
             * This request holds the parameters needed by the the contentwarehouse server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Parent of the document-link to be created. parent of document-link should be a document.
           *        Format: projects/{project_number}/locations/{location}/documents/{source_document_id}.
             * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentLinkRequest}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1CreateDocumentLinkRequest content) {
              super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DocumentLink.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Parent of the document-link to be created. parent of document-link should
             * be a document. Format:
             * projects/{project_number}/locations/{location}/documents/{source_document_id}.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Parent of the document-link to be created. parent of document-link should be a document.
           Format: projects/{project_number}/locations/{location}/documents/{source_document_id}.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. Parent of the document-link to be created. parent of document-link should
             * be a document. Format:
             * projects/{project_number}/locations/{location}/documents/{source_document_id}.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Remove the link between the source and target documents.
           *
           * Create a request for the method "documentLinks.delete".
           *
           * This request holds the parameters needed by the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the document-link to be deleted. Format: projects/{project_number}/locations/{
           *        location}/documents/{source_document_id}/documentLinks/{document_link_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest}
           * @return the request
           */
          public Delete delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest content) throws java.io.IOException {
            Delete result = new Delete(name, content);
            initialize(result);
            return result;
          }

          public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

            private static final String REST_PATH = "v1/{+name}:delete";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/[^/]+/documentLinks/[^/]+$");

            /**
             * Remove the link between the source and target documents.
             *
             * Create a request for the method "documentLinks.delete".
             *
             * This request holds the parameters needed by the the contentwarehouse server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the document-link to be deleted. Format: projects/{project_number}/locations/{
           *        location}/documents/{source_document_id}/documentLinks/{document_link_id}.
             * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest}
             * @since 1.13
             */
            protected Delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest content) {
              super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/[^/]+/documentLinks/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the document-link to be deleted. Format: projects/{project_numb
             * er}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_
             * id}.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the document-link to be deleted. Format: projects/{project_number}/locations/
           {location}/documents/{source_document_id}/documentLinks/{document_link_id}.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the document-link to be deleted. Format: projects/{project_numb
             * er}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_
             * id}.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/[^/]+/documentLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the ReferenceId collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
         *   {@code Contentwarehouse.ReferenceId.List request = contentwarehouse.referenceId().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public ReferenceId referenceId() {
          return new ReferenceId();
        }

        /**
         * The "referenceId" collection of methods.
         */
        public class ReferenceId {

          /**
           * Deletes a document. Returns NOT_FOUND if the document does not exist.
           *
           * Create a request for the method "referenceId.delete".
           *
           * This request holds the parameters needed by the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the document to delete. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest}
           * @return the request
           */
          public Delete delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest content) throws java.io.IOException {
            Delete result = new Delete(name, content);
            initialize(result);
            return result;
          }

          public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

            private static final String REST_PATH = "v1/{+name}:delete";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");

            /**
             * Deletes a document. Returns NOT_FOUND if the document does not exist.
             *
             * Create a request for the method "referenceId.delete".
             *
             * This request holds the parameters needed by the the contentwarehouse server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the document to delete. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest}
             * @since 1.13
             */
            protected Delete(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1DeleteDocumentRequest content) {
              super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the document to delete. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the document to delete. Format:
           projects/{project_number}/locations/{location}/documents/{document_id} or
           projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the document to delete. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a document. Returns NOT_FOUND if the document does not exist.
           *
           * Create a request for the method "referenceId.get".
           *
           * This request holds the parameters needed by the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the document to retrieve. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest}
           * @return the request
           */
          public Get get(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest content) throws java.io.IOException {
            Get result = new Get(name, content);
            initialize(result);
            return result;
          }

          public class Get extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1Document> {

            private static final String REST_PATH = "v1/{+name}:get";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");

            /**
             * Gets a document. Returns NOT_FOUND if the document does not exist.
             *
             * Create a request for the method "referenceId.get".
             *
             * This request holds the parameters needed by the the contentwarehouse server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the document to retrieve. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest}
             * @since 1.13
             */
            protected Get(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1GetDocumentRequest content) {
              super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1Document.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the document to retrieve. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the document to retrieve. Format:
           projects/{project_number}/locations/{location}/documents/{document_id} or
           projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the document to retrieve. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does
           * not equal the existing name.
           *
           * Create a request for the method "referenceId.patch".
           *
           * This request holds the parameters needed by the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the document to update. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentResponse> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");

            /**
             * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does
             * not equal the existing name.
             *
             * Create a request for the method "referenceId.patch".
             *
             * This request holds the parameters needed by the the contentwarehouse server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the document to update. Format:
           *        projects/{project_number}/locations/{location}/documents/{document_id} or
           *        projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentRequest content) {
              super(Contentwarehouse.this, "PATCH", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateDocumentResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the document to update. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the document to update. Format:
           projects/{project_number}/locations/{location}/documents/{document_id} or
           projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the document to update. Format:
             * projects/{project_number}/locations/{location}/documents/{document_id} or
             * projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/documents/referenceId/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the RuleSets collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
       *   {@code Contentwarehouse.RuleSets.List request = contentwarehouse.ruleSets().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public RuleSets ruleSets() {
        return new RuleSets();
      }

      /**
       * The "ruleSets" collection of methods.
       */
      public class RuleSets {

        /**
         * Creates a ruleset.
         *
         * Create a request for the method "ruleSets.create".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet> {

          private static final String REST_PATH = "v1/{+parent}/ruleSets";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a ruleset.
           *
           * Create a request for the method "ruleSets.create".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
         *
         * Create a request for the method "ruleSets.delete".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the rule set to delete. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");

          /**
           * Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
           *
           * Create a request for the method "ruleSets.delete".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the rule set to delete. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Contentwarehouse.this, "DELETE", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the rule set to delete. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the rule set to delete. Format:
         projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the rule set to delete. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
         *
         * Create a request for the method "ruleSets.get".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the rule set to retrieve. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");

          /**
           * Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
           *
           * Create a request for the method "ruleSets.get".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the rule set to retrieve. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the rule set to retrieve. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the rule set to retrieve. Format:
         projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the rule set to retrieve. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists rulesets.
         *
         * Create a request for the method "ruleSets.list".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns this collection of document. Format:
         *        projects/{project_number}/locations/{location}.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListRuleSetsResponse> {

          private static final String REST_PATH = "v1/{+parent}/ruleSets";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists rulesets.
           *
           * Create a request for the method "ruleSets.list".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns this collection of document. Format:
         *        projects/{project_number}/locations/{location}.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListRuleSetsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns this collection of document. Format:
           * projects/{project_number}/locations/{location}.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns this collection of document. Format:
         projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns this collection of document. Format:
           * projects/{project_number}/locations/{location}.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of rule sets to return. The service may return fewer than this
           * value. If unspecified, at most 50 rule sets will be returned. The maximum value is
           * 1000; values above 1000 will be coerced to 1000.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of rule sets to return. The service may return fewer than this value. If
         unspecified, at most 50 rule sets will be returned. The maximum value is 1000; values above 1000
         will be coerced to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of rule sets to return. The service may return fewer than this
           * value. If unspecified, at most 50 rule sets will be returned. The maximum value is
           * 1000; values above 1000 will be coerced to 1000.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A page token, received from a previous `ListRuleSets` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to `ListRuleSets`
           * must match the call that provided the page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A page token, received from a previous `ListRuleSets` call. Provide this to retrieve the subsequent
         page. When paginating, all other parameters provided to `ListRuleSets` must match the call that
         provided the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A page token, received from a previous `ListRuleSets` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to `ListRuleSets`
           * must match the call that provided the page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is non-empty and does not
         * equal the existing name.
         *
         * Create a request for the method "ruleSets.patch".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the rule set to update. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateRuleSetRequest}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateRuleSetRequest content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");

          /**
           * Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is non-empty and does
           * not equal the existing name.
           *
           * Create a request for the method "ruleSets.patch".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the rule set to update. Format:
         *        projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateRuleSetRequest}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1UpdateRuleSetRequest content) {
            super(Contentwarehouse.this, "PATCH", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1RuleSet.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the rule set to update. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the rule set to update. Format:
         projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the rule set to update. Format:
           * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/ruleSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the SynonymSets collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Contentwarehouse contentwarehouse = new Contentwarehouse(...);}
       *   {@code Contentwarehouse.SynonymSets.List request = contentwarehouse.synonymSets().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public SynonymSets synonymSets() {
        return new SynonymSets();
      }

      /**
       * The "synonymSets" collection of methods.
       */
      public class SynonymSets {

        /**
         * Creates a SynonymSet for a single context. Throws an ALREADY_EXISTS exception if a synonymset
         * already exists for the context.
         *
         * Create a request for the method "synonymSets.create".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet> {

          private static final String REST_PATH = "v1/{+parent}/synonymSets";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a SynonymSet for a single context. Throws an ALREADY_EXISTS exception if a synonymset
           * already exists for the context.
           *
           * Create a request for the method "synonymSets.create".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet content) {
            super(Contentwarehouse.this, "POST", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a SynonymSet for a given context. Throws a NOT_FOUND exception if the SynonymSet is not
         * found.
         *
         * Create a request for the method "synonymSets.delete".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the synonymSet to delete Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");

          /**
           * Deletes a SynonymSet for a given context. Throws a NOT_FOUND exception if the SynonymSet is not
           * found.
           *
           * Create a request for the method "synonymSets.delete".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the synonymSet to delete Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Contentwarehouse.this, "DELETE", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleProtobufEmpty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the synonymSet to delete Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the synonymSet to delete Format:
         projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the synonymSet to delete Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a SynonymSet for a particular context. Throws a NOT_FOUND exception if the Synonymset does
         * not exist
         *
         * Create a request for the method "synonymSets.get".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the synonymSet to retrieve Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");

          /**
           * Gets a SynonymSet for a particular context. Throws a NOT_FOUND exception if the Synonymset does
           * not exist
           *
           * Create a request for the method "synonymSets.get".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the synonymSet to retrieve Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the synonymSet to retrieve Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the synonymSet to retrieve Format:
         projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the synonymSet to retrieve Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Returns all SynonymSets (for all contexts) for the specified location.
         *
         * Create a request for the method "synonymSets.list".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListSynonymSetsResponse> {

          private static final String REST_PATH = "v1/{+parent}/synonymSets";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Returns all SynonymSets (for all contexts) for the specified location.
           *
           * Create a request for the method "synonymSets.list".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent name. Format: projects/{project_number}/locations/{location}.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Contentwarehouse.this, "GET", REST_PATH, null, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1ListSynonymSetsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent name. Format: projects/{project_number}/locations/{location}. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of synonymSets to return. The service may return fewer than this
           * value. If unspecified, at most 50 rule sets will be returned. The maximum value is
           * 1000; values above 1000 will be coerced to 1000.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of synonymSets to return. The service may return fewer than this value. If
         unspecified, at most 50 rule sets will be returned. The maximum value is 1000; values above 1000
         will be coerced to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of synonymSets to return. The service may return fewer than this
           * value. If unspecified, at most 50 rule sets will be returned. The maximum value is
           * 1000; values above 1000 will be coerced to 1000.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A page token, received from a previous `ListSynonymSets` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to
           * `ListSynonymSets` must match the call that provided the page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A page token, received from a previous `ListSynonymSets` call. Provide this to retrieve the
         subsequent page. When paginating, all other parameters provided to `ListSynonymSets` must match the
         call that provided the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A page token, received from a previous `ListSynonymSets` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to
           * `ListSynonymSets` must match the call that provided the page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Remove the existing SynonymSet for the context and replaces it with a new one. Throws a NOT_FOUND
         * exception if the SynonymSet is not found.
         *
         * Create a request for the method "synonymSets.patch".
         *
         * This request holds the parameters needed by the contentwarehouse server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the synonymSet to update Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
         * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ContentwarehouseRequest<com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");

          /**
           * Remove the existing SynonymSet for the context and replaces it with a new one. Throws a
           * NOT_FOUND exception if the SynonymSet is not found.
           *
           * Create a request for the method "synonymSets.patch".
           *
           * This request holds the parameters needed by the the contentwarehouse server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the synonymSet to update Format:
         *        projects/{project_number}/locations/{location}/synonymSets/{context}.
           * @param content the {@link com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet content) {
            super(Contentwarehouse.this, "PATCH", REST_PATH, content, com.google.api.services.contentwarehouse.v1.model.GoogleCloudContentwarehouseV1SynonymSet.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the synonymSet to update Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the synonymSet to update Format:
         projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the synonymSet to update Format:
           * projects/{project_number}/locations/{location}/synonymSets/{context}.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/synonymSets/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link Contentwarehouse}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Contentwarehouse}. */
    @Override
    public Contentwarehouse build() {
      return new Contentwarehouse(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ContentwarehouseRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setContentwarehouseRequestInitializer(
        ContentwarehouseRequestInitializer contentwarehouseRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(contentwarehouseRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
