/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1beta1.model;

/**
 * Specifies details on how to handle (and presumably, fix) a vulnerability.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Remediation extends com.google.api.client.json.GenericJson {

  /**
   * Contains a comprehensive human-readable discussion of the remediation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String details;

  /**
   * Contains the date from which the remediation is available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String remediationTime;

  /**
   * The type of remediation that can be applied.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String remediationType;

  /**
   * Contains the URL where to obtain the remediation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RelatedUrl remediationUri;

  /**
   * Contains a comprehensive human-readable discussion of the remediation.
   * @return value or {@code null} for none
   */
  public java.lang.String getDetails() {
    return details;
  }

  /**
   * Contains a comprehensive human-readable discussion of the remediation.
   * @param details details or {@code null} for none
   */
  public Remediation setDetails(java.lang.String details) {
    this.details = details;
    return this;
  }

  /**
   * Contains the date from which the remediation is available.
   * @return value or {@code null} for none
   */
  public String getRemediationTime() {
    return remediationTime;
  }

  /**
   * Contains the date from which the remediation is available.
   * @param remediationTime remediationTime or {@code null} for none
   */
  public Remediation setRemediationTime(String remediationTime) {
    this.remediationTime = remediationTime;
    return this;
  }

  /**
   * The type of remediation that can be applied.
   * @return value or {@code null} for none
   */
  public java.lang.String getRemediationType() {
    return remediationType;
  }

  /**
   * The type of remediation that can be applied.
   * @param remediationType remediationType or {@code null} for none
   */
  public Remediation setRemediationType(java.lang.String remediationType) {
    this.remediationType = remediationType;
    return this;
  }

  /**
   * Contains the URL where to obtain the remediation.
   * @return value or {@code null} for none
   */
  public RelatedUrl getRemediationUri() {
    return remediationUri;
  }

  /**
   * Contains the URL where to obtain the remediation.
   * @param remediationUri remediationUri or {@code null} for none
   */
  public Remediation setRemediationUri(RelatedUrl remediationUri) {
    this.remediationUri = remediationUri;
    return this;
  }

  @Override
  public Remediation set(String fieldName, Object value) {
    return (Remediation) super.set(fieldName, value);
  }

  @Override
  public Remediation clone() {
    return (Remediation) super.clone();
  }

}
