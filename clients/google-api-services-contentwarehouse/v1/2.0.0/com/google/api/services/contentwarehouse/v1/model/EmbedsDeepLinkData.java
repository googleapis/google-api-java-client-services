/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Deep-linking data is used to construct a deep-link URI for an activity or frame's embed, such
 * that on click, the user is taken to the right place in a mobile app. If the app is not installed,
 * the user is taken to the app store. If not on mobile, an analogous web uri is used.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EmbedsDeepLinkData extends com.google.api.client.json.GenericJson {

  /**
   * Application ID (or project ID) from Google API Console.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long appId;

  /**
   * The data for a Google API Console client is entered by a developer during client registration
   * and is stored in PackagingService.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EmbedsPackagingServiceClient> client;

  /**
   * The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native
   * mobile experience if supported. In the case of no web presence, instead of setting the "url"
   * field of an embed, such developers will set this field and other content fields, e.g.
   * thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note
   * that the native experience is preferred over the web link and the web link is used as a
   * fallback.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deepLinkId;

  /**
   * Analogous web presence. Used as desktop fallback or when no native link data is present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Application ID (or project ID) from Google API Console.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAppId() {
    return appId;
  }

  /**
   * Application ID (or project ID) from Google API Console.
   * @param appId appId or {@code null} for none
   */
  public EmbedsDeepLinkData setAppId(java.lang.Long appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The data for a Google API Console client is entered by a developer during client registration
   * and is stored in PackagingService.
   * @return value or {@code null} for none
   */
  public java.util.List<EmbedsPackagingServiceClient> getClient() {
    return client;
  }

  /**
   * The data for a Google API Console client is entered by a developer during client registration
   * and is stored in PackagingService.
   * @param client client or {@code null} for none
   */
  public EmbedsDeepLinkData setClient(java.util.List<EmbedsPackagingServiceClient> client) {
    this.client = client;
    return this;
  }

  /**
   * The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native
   * mobile experience if supported. In the case of no web presence, instead of setting the "url"
   * field of an embed, such developers will set this field and other content fields, e.g.
   * thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note
   * that the native experience is preferred over the web link and the web link is used as a
   * fallback.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeepLinkId() {
    return deepLinkId;
  }

  /**
   * The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native
   * mobile experience if supported. In the case of no web presence, instead of setting the "url"
   * field of an embed, such developers will set this field and other content fields, e.g.
   * thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note
   * that the native experience is preferred over the web link and the web link is used as a
   * fallback.
   * @param deepLinkId deepLinkId or {@code null} for none
   */
  public EmbedsDeepLinkData setDeepLinkId(java.lang.String deepLinkId) {
    this.deepLinkId = deepLinkId;
    return this;
  }

  /**
   * Analogous web presence. Used as desktop fallback or when no native link data is present.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Analogous web presence. Used as desktop fallback or when no native link data is present.
   * @param url url or {@code null} for none
   */
  public EmbedsDeepLinkData setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public EmbedsDeepLinkData set(String fieldName, Object value) {
    return (EmbedsDeepLinkData) super.set(fieldName, value);
  }

  @Override
  public EmbedsDeepLinkData clone() {
    return (EmbedsDeepLinkData) super.clone();
  }

}
