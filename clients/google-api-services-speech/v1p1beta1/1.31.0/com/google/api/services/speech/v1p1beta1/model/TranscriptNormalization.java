/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.speech.v1p1beta1.model;

/**
 * Transcription normalization configuration. Use transcription normalization to automatically
 * replace parts of the transcript with phrases of your choosing. For StreamingRecognize, this
 * normalization only applies to stable partial transcripts (stability > 0.8) and final transcripts.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Speech-to-Text API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TranscriptNormalization extends com.google.api.client.json.GenericJson {

  /**
   * A list of replacement entries. We will perform replacement with one entry at a time. For
   * example, the second entry in ["cat" => "dog", "mountain cat" => "mountain dog"] will never be
   * applied because we will always process the first entry before it. At most 100 entries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SpeechEntry entries;

  /**
   * A list of replacement entries. We will perform replacement with one entry at a time. For
   * example, the second entry in ["cat" => "dog", "mountain cat" => "mountain dog"] will never be
   * applied because we will always process the first entry before it. At most 100 entries.
   * @return value or {@code null} for none
   */
  public SpeechEntry getEntries() {
    return entries;
  }

  /**
   * A list of replacement entries. We will perform replacement with one entry at a time. For
   * example, the second entry in ["cat" => "dog", "mountain cat" => "mountain dog"] will never be
   * applied because we will always process the first entry before it. At most 100 entries.
   * @param entries entries or {@code null} for none
   */
  public TranscriptNormalization setEntries(SpeechEntry entries) {
    this.entries = entries;
    return this;
  }

  @Override
  public TranscriptNormalization set(String fieldName, Object value) {
    return (TranscriptNormalization) super.set(fieldName, value);
  }

  @Override
  public TranscriptNormalization clone() {
    return (TranscriptNormalization) super.clone();
  }

}
