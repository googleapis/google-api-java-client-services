/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1beta1.model;

/**
 * Message encapsulating the signature of the verified build.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildSignature extends com.google.api.client.json.GenericJson {

  /**
   * An ID for the key used to sign. This could be either an ID for the key stored in `public_key`
   * (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an
   * external key (such as a reference to a key in Cloud Key Management Service).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyId;

  /**
   * The type of the key, either stored in `public_key` or referenced in `key_id`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyType;

  /**
   * Public key of the builder which can be used to verify that the related findings are valid and
   * unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.
   *
   * This field may be empty if `key_id` references an external key.
   *
   * For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build
   * signature, place the contents of this field into a file (public.pem). The signature field is
   * base64-decoded into its binary representation in signature.bin, and the provenance bytes from
   * `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then
   * verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publicKey;

  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signature;

  /**
   * An ID for the key used to sign. This could be either an ID for the key stored in `public_key`
   * (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an
   * external key (such as a reference to a key in Cloud Key Management Service).
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyId() {
    return keyId;
  }

  /**
   * An ID for the key used to sign. This could be either an ID for the key stored in `public_key`
   * (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an
   * external key (such as a reference to a key in Cloud Key Management Service).
   * @param keyId keyId or {@code null} for none
   */
  public BuildSignature setKeyId(java.lang.String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * The type of the key, either stored in `public_key` or referenced in `key_id`.
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyType() {
    return keyType;
  }

  /**
   * The type of the key, either stored in `public_key` or referenced in `key_id`.
   * @param keyType keyType or {@code null} for none
   */
  public BuildSignature setKeyType(java.lang.String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * Public key of the builder which can be used to verify that the related findings are valid and
   * unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.
   *
   * This field may be empty if `key_id` references an external key.
   *
   * For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build
   * signature, place the contents of this field into a file (public.pem). The signature field is
   * base64-decoded into its binary representation in signature.bin, and the provenance bytes from
   * `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then
   * verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
   * @return value or {@code null} for none
   */
  public java.lang.String getPublicKey() {
    return publicKey;
  }

  /**
   * Public key of the builder which can be used to verify that the related findings are valid and
   * unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.
   *
   * This field may be empty if `key_id` references an external key.
   *
   * For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build
   * signature, place the contents of this field into a file (public.pem). The signature field is
   * base64-decoded into its binary representation in signature.bin, and the provenance bytes from
   * `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then
   * verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
   * @param publicKey publicKey or {@code null} for none
   */
  public BuildSignature setPublicKey(java.lang.String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
   * @see #decodeSignature()
   * @return value or {@code null} for none
   */
  public java.lang.String getSignature() {
    return signature;
  }

  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
   * @see #getSignature()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSignature() {
    return com.google.api.client.util.Base64.decodeBase64(signature);
  }

  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
   * @see #encodeSignature()
   * @param signature signature or {@code null} for none
   */
  public BuildSignature setSignature(java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
   * @see #setSignature()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public BuildSignature encodeSignature(byte[] signature) {
    this.signature = com.google.api.client.util.Base64.encodeBase64URLSafeString(signature);
    return this;
  }

  @Override
  public BuildSignature set(String fieldName, Object value) {
    return (BuildSignature) super.set(fieldName, value);
  }

  @Override
  public BuildSignature clone() {
    return (BuildSignature) super.clone();
  }

}
