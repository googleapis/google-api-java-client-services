/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.replicapool;

/**
 * Service definition for Replicapool (v1beta1).
 *
 * <p>
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/compute/docs/replica-pool/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ReplicapoolRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Replicapool extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Replica Pool API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "replicapool/v1beta1/projects/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/replicapool/v1beta1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Replicapool(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Replicapool(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Pools collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Replicapool replicapool = new Replicapool(...);}
   *   {@code Replicapool.Pools.List request = replicapool.pools().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pools pools() {
    return new Pools();
  }

  /**
   * The "pools" collection of methods.
   */
  public class Pools {

    /**
     * Deletes a replica pool.
     *
     * Create a request for the method "pools.delete".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this replica pool.
     * @param zone The zone for this replica pool.
     * @param poolName The name of the replica pool for this request.
     * @param content the {@link com.google.api.services.replicapool.model.PoolsDeleteRequest}
     * @return the request
     */
    public Delete delete(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, com.google.api.services.replicapool.model.PoolsDeleteRequest content) throws java.io.IOException {
      Delete result = new Delete(projectName, zone, poolName, content);
      initialize(result);
      return result;
    }

    public class Delete extends ReplicapoolRequest<Void> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}";

      /**
       * Deletes a replica pool.
       *
       * Create a request for the method "pools.delete".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this replica pool.
       * @param zone The zone for this replica pool.
       * @param poolName The name of the replica pool for this request.
       * @param content the {@link com.google.api.services.replicapool.model.PoolsDeleteRequest}
       * @since 1.13
       */
      protected Delete(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, com.google.api.services.replicapool.model.PoolsDeleteRequest content) {
        super(Replicapool.this, "POST", REST_PATH, content, Void.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The project ID for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this replica pool.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this replica pool. */
      public Delete setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public Delete setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The name of the replica pool for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The name of the replica pool for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The name of the replica pool for this request. */
      public Delete setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets information about a single replica pool.
     *
     * Create a request for the method "pools.get".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this replica pool.
     * @param zone The zone for this replica pool.
     * @param poolName The name of the replica pool for this request.
     * @return the request
     */
    public Get get(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) throws java.io.IOException {
      Get result = new Get(projectName, zone, poolName);
      initialize(result);
      return result;
    }

    public class Get extends ReplicapoolRequest<com.google.api.services.replicapool.model.Pool> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}";

      /**
       * Gets information about a single replica pool.
       *
       * Create a request for the method "pools.get".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this replica pool.
       * @param zone The zone for this replica pool.
       * @param poolName The name of the replica pool for this request.
       * @since 1.13
       */
      protected Get(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) {
        super(Replicapool.this, "GET", REST_PATH, null, com.google.api.services.replicapool.model.Pool.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The project ID for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this replica pool.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this replica pool. */
      public Get setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public Get setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The name of the replica pool for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The name of the replica pool for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The name of the replica pool for this request. */
      public Get setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a new replica pool.
     *
     * Create a request for the method "pools.insert".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this replica pool.
     * @param zone The zone for this replica pool.
     * @param content the {@link com.google.api.services.replicapool.model.Pool}
     * @return the request
     */
    public Insert insert(java.lang.String projectName, java.lang.String zone, com.google.api.services.replicapool.model.Pool content) throws java.io.IOException {
      Insert result = new Insert(projectName, zone, content);
      initialize(result);
      return result;
    }

    public class Insert extends ReplicapoolRequest<com.google.api.services.replicapool.model.Pool> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools";

      /**
       * Inserts a new replica pool.
       *
       * Create a request for the method "pools.insert".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this replica pool.
       * @param zone The zone for this replica pool.
       * @param content the {@link com.google.api.services.replicapool.model.Pool}
       * @since 1.13
       */
      protected Insert(java.lang.String projectName, java.lang.String zone, com.google.api.services.replicapool.model.Pool content) {
        super(Replicapool.this, "POST", REST_PATH, content, com.google.api.services.replicapool.model.Pool.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The project ID for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this replica pool.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this replica pool. */
      public Insert setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public Insert setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all replica pools.
     *
     * Create a request for the method "pools.list".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this request.
     * @param zone The zone for this replica pool.
     * @return the request
     */
    public List list(java.lang.String projectName, java.lang.String zone) throws java.io.IOException {
      List result = new List(projectName, zone);
      initialize(result);
      return result;
    }

    public class List extends ReplicapoolRequest<com.google.api.services.replicapool.model.PoolsListResponse> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools";

      /**
       * List all replica pools.
       *
       * Create a request for the method "pools.list".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this request.
       * @param zone The zone for this replica pool.
       * @since 1.13
       */
      protected List(java.lang.String projectName, java.lang.String zone) {
        super(Replicapool.this, "GET", REST_PATH, null, com.google.api.services.replicapool.model.PoolsListResponse.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The project ID for this request. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this request.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this request. */
      public List setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public List setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /**
       * Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive.
       * (Default: 50)
       */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
     [default: 500] [minimum: 0] [maximum: 1000]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /**
       * Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive.
       * (Default: 50)
       */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * Set this to the nextPageToken value returned by a previous list request to obtain the next
       * page of results from the previous list request.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Set this to the nextPageToken value returned by a previous list request to obtain the next page of
     results from the previous list request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * Set this to the nextPageToken value returned by a previous list request to obtain the next
       * page of results from the previous list request.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be
     * made. Replica Pools will use the information from the last resize request.
     *
     * Create a request for the method "pools.resize".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Resize#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this replica pool.
     * @param zone The zone for this replica pool.
     * @param poolName The name of the replica pool for this request.
     * @return the request
     */
    public Resize resize(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) throws java.io.IOException {
      Resize result = new Resize(projectName, zone, poolName);
      initialize(result);
      return result;
    }

    public class Resize extends ReplicapoolRequest<com.google.api.services.replicapool.model.Pool> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/resize";

      /**
       * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can
       * be made. Replica Pools will use the information from the last resize request.
       *
       * Create a request for the method "pools.resize".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Resize#execute()} method to invoke the remote operation.
       * <p> {@link
       * Resize#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this replica pool.
       * @param zone The zone for this replica pool.
       * @param poolName The name of the replica pool for this request.
       * @since 1.13
       */
      protected Resize(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) {
        super(Replicapool.this, "POST", REST_PATH, null, com.google.api.services.replicapool.model.Pool.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
      }

      @Override
      public Resize setAlt(java.lang.String alt) {
        return (Resize) super.setAlt(alt);
      }

      @Override
      public Resize setFields(java.lang.String fields) {
        return (Resize) super.setFields(fields);
      }

      @Override
      public Resize setKey(java.lang.String key) {
        return (Resize) super.setKey(key);
      }

      @Override
      public Resize setOauthToken(java.lang.String oauthToken) {
        return (Resize) super.setOauthToken(oauthToken);
      }

      @Override
      public Resize setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Resize) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Resize setQuotaUser(java.lang.String quotaUser) {
        return (Resize) super.setQuotaUser(quotaUser);
      }

      @Override
      public Resize setUserIp(java.lang.String userIp) {
        return (Resize) super.setUserIp(userIp);
      }

      /** The project ID for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this replica pool.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this replica pool. */
      public Resize setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public Resize setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The name of the replica pool for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The name of the replica pool for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The name of the replica pool for this request. */
      public Resize setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      /**
       * The desired number of replicas to resize to. If this number is larger than the existing
       * number of replicas, new replicas will be added. If the number is smaller, then existing
       * replicas will be deleted.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer numReplicas;

      /** The desired number of replicas to resize to. If this number is larger than the existing number of
     replicas, new replicas will be added. If the number is smaller, then existing replicas will be
     deleted.
       */
      public java.lang.Integer getNumReplicas() {
        return numReplicas;
      }

      /**
       * The desired number of replicas to resize to. If this number is larger than the existing
       * number of replicas, new replicas will be added. If the number is smaller, then existing
       * replicas will be deleted.
       */
      public Resize setNumReplicas(java.lang.Integer numReplicas) {
        this.numReplicas = numReplicas;
        return this;
      }

      @Override
      public Resize set(String parameterName, Object value) {
        return (Resize) super.set(parameterName, value);
      }
    }
    /**
     * Update the template used by the pool.
     *
     * Create a request for the method "pools.updatetemplate".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Updatetemplate#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this replica pool.
     * @param zone The zone for this replica pool.
     * @param poolName The name of the replica pool for this request.
     * @param content the {@link com.google.api.services.replicapool.model.Template}
     * @return the request
     */
    public Updatetemplate updatetemplate(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, com.google.api.services.replicapool.model.Template content) throws java.io.IOException {
      Updatetemplate result = new Updatetemplate(projectName, zone, poolName, content);
      initialize(result);
      return result;
    }

    public class Updatetemplate extends ReplicapoolRequest<Void> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/updateTemplate";

      /**
       * Update the template used by the pool.
       *
       * Create a request for the method "pools.updatetemplate".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Updatetemplate#execute()} method to invoke the remote
       * operation. <p> {@link Updatetemplate#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param projectName The project ID for this replica pool.
       * @param zone The zone for this replica pool.
       * @param poolName The name of the replica pool for this request.
       * @param content the {@link com.google.api.services.replicapool.model.Template}
       * @since 1.13
       */
      protected Updatetemplate(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, com.google.api.services.replicapool.model.Template content) {
        super(Replicapool.this, "POST", REST_PATH, content, Void.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
      }

      @Override
      public Updatetemplate setAlt(java.lang.String alt) {
        return (Updatetemplate) super.setAlt(alt);
      }

      @Override
      public Updatetemplate setFields(java.lang.String fields) {
        return (Updatetemplate) super.setFields(fields);
      }

      @Override
      public Updatetemplate setKey(java.lang.String key) {
        return (Updatetemplate) super.setKey(key);
      }

      @Override
      public Updatetemplate setOauthToken(java.lang.String oauthToken) {
        return (Updatetemplate) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatetemplate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatetemplate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatetemplate setQuotaUser(java.lang.String quotaUser) {
        return (Updatetemplate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatetemplate setUserIp(java.lang.String userIp) {
        return (Updatetemplate) super.setUserIp(userIp);
      }

      /** The project ID for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this replica pool.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this replica pool. */
      public Updatetemplate setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone for this replica pool. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone for this replica pool.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone for this replica pool. */
      public Updatetemplate setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The name of the replica pool for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The name of the replica pool for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The name of the replica pool for this request. */
      public Updatetemplate setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      @Override
      public Updatetemplate set(String parameterName, Object value) {
        return (Updatetemplate) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Replicas collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Replicapool replicapool = new Replicapool(...);}
   *   {@code Replicapool.Replicas.List request = replicapool.replicas().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Replicas replicas() {
    return new Replicas();
  }

  /**
   * The "replicas" collection of methods.
   */
  public class Replicas {

    /**
     * Deletes a replica from the pool.
     *
     * Create a request for the method "replicas.delete".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this request.
     * @param zone The zone where the replica lives.
     * @param poolName The replica pool name for this request.
     * @param replicaName The name of the replica for this request.
     * @param content the {@link com.google.api.services.replicapool.model.ReplicasDeleteRequest}
     * @return the request
     */
    public Delete delete(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName, com.google.api.services.replicapool.model.ReplicasDeleteRequest content) throws java.io.IOException {
      Delete result = new Delete(projectName, zone, poolName, replicaName, content);
      initialize(result);
      return result;
    }

    public class Delete extends ReplicapoolRequest<com.google.api.services.replicapool.model.Replica> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}";

      /**
       * Deletes a replica from the pool.
       *
       * Create a request for the method "replicas.delete".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this request.
       * @param zone The zone where the replica lives.
       * @param poolName The replica pool name for this request.
       * @param replicaName The name of the replica for this request.
       * @param content the {@link com.google.api.services.replicapool.model.ReplicasDeleteRequest}
       * @since 1.13
       */
      protected Delete(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName, com.google.api.services.replicapool.model.ReplicasDeleteRequest content) {
        super(Replicapool.this, "POST", REST_PATH, content, com.google.api.services.replicapool.model.Replica.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
        this.replicaName = com.google.api.client.util.Preconditions.checkNotNull(replicaName, "Required parameter replicaName must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The project ID for this request. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this request.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this request. */
      public Delete setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone where the replica lives. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone where the replica lives.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone where the replica lives. */
      public Delete setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The replica pool name for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The replica pool name for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The replica pool name for this request. */
      public Delete setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      /** The name of the replica for this request. */
      @com.google.api.client.util.Key
      private java.lang.String replicaName;

      /** The name of the replica for this request.
       */
      public java.lang.String getReplicaName() {
        return replicaName;
      }

      /** The name of the replica for this request. */
      public Delete setReplicaName(java.lang.String replicaName) {
        this.replicaName = replicaName;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets information about a specific replica.
     *
     * Create a request for the method "replicas.get".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this request.
     * @param zone The zone where the replica lives.
     * @param poolName The replica pool name for this request.
     * @param replicaName The name of the replica for this request.
     * @return the request
     */
    public Get get(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName) throws java.io.IOException {
      Get result = new Get(projectName, zone, poolName, replicaName);
      initialize(result);
      return result;
    }

    public class Get extends ReplicapoolRequest<com.google.api.services.replicapool.model.Replica> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}";

      /**
       * Gets information about a specific replica.
       *
       * Create a request for the method "replicas.get".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this request.
       * @param zone The zone where the replica lives.
       * @param poolName The replica pool name for this request.
       * @param replicaName The name of the replica for this request.
       * @since 1.13
       */
      protected Get(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName) {
        super(Replicapool.this, "GET", REST_PATH, null, com.google.api.services.replicapool.model.Replica.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
        this.replicaName = com.google.api.client.util.Preconditions.checkNotNull(replicaName, "Required parameter replicaName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The project ID for this request. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this request.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this request. */
      public Get setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone where the replica lives. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone where the replica lives.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone where the replica lives. */
      public Get setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The replica pool name for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The replica pool name for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The replica pool name for this request. */
      public Get setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      /** The name of the replica for this request. */
      @com.google.api.client.util.Key
      private java.lang.String replicaName;

      /** The name of the replica for this request.
       */
      public java.lang.String getReplicaName() {
        return replicaName;
      }

      /** The name of the replica for this request. */
      public Get setReplicaName(java.lang.String replicaName) {
        this.replicaName = replicaName;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists all replicas in a pool.
     *
     * Create a request for the method "replicas.list".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this request.
     * @param zone The zone where the replica pool lives.
     * @param poolName The replica pool name for this request.
     * @return the request
     */
    public List list(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) throws java.io.IOException {
      List result = new List(projectName, zone, poolName);
      initialize(result);
      return result;
    }

    public class List extends ReplicapoolRequest<com.google.api.services.replicapool.model.ReplicasListResponse> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/replicas";

      /**
       * Lists all replicas in a pool.
       *
       * Create a request for the method "replicas.list".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this request.
       * @param zone The zone where the replica pool lives.
       * @param poolName The replica pool name for this request.
       * @since 1.13
       */
      protected List(java.lang.String projectName, java.lang.String zone, java.lang.String poolName) {
        super(Replicapool.this, "GET", REST_PATH, null, com.google.api.services.replicapool.model.ReplicasListResponse.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The project ID for this request. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this request.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this request. */
      public List setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone where the replica pool lives. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone where the replica pool lives.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone where the replica pool lives. */
      public List setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The replica pool name for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The replica pool name for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The replica pool name for this request. */
      public List setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      /**
       * Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive.
       * (Default: 50)
       */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
     [default: 500] [minimum: 0] [maximum: 1000]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /**
       * Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive.
       * (Default: 50)
       */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * Set this to the nextPageToken value returned by a previous list request to obtain the next
       * page of results from the previous list request.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Set this to the nextPageToken value returned by a previous list request to obtain the next page of
     results from the previous list request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * Set this to the nextPageToken value returned by a previous list request to obtain the next
       * page of results from the previous list request.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Restarts a replica in a pool.
     *
     * Create a request for the method "replicas.restart".
     *
     * This request holds the parameters needed by the replicapool server.  After setting any optional
     * parameters, call the {@link Restart#execute()} method to invoke the remote operation.
     *
     * @param projectName The project ID for this request.
     * @param zone The zone where the replica lives.
     * @param poolName The replica pool name for this request.
     * @param replicaName The name of the replica for this request.
     * @return the request
     */
    public Restart restart(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName) throws java.io.IOException {
      Restart result = new Restart(projectName, zone, poolName, replicaName);
      initialize(result);
      return result;
    }

    public class Restart extends ReplicapoolRequest<com.google.api.services.replicapool.model.Replica> {

      private static final String REST_PATH = "{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart";

      /**
       * Restarts a replica in a pool.
       *
       * Create a request for the method "replicas.restart".
       *
       * This request holds the parameters needed by the the replicapool server.  After setting any
       * optional parameters, call the {@link Restart#execute()} method to invoke the remote operation.
       * <p> {@link
       * Restart#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectName The project ID for this request.
       * @param zone The zone where the replica lives.
       * @param poolName The replica pool name for this request.
       * @param replicaName The name of the replica for this request.
       * @since 1.13
       */
      protected Restart(java.lang.String projectName, java.lang.String zone, java.lang.String poolName, java.lang.String replicaName) {
        super(Replicapool.this, "POST", REST_PATH, null, com.google.api.services.replicapool.model.Replica.class);
        this.projectName = com.google.api.client.util.Preconditions.checkNotNull(projectName, "Required parameter projectName must be specified.");
        this.zone = com.google.api.client.util.Preconditions.checkNotNull(zone, "Required parameter zone must be specified.");
        this.poolName = com.google.api.client.util.Preconditions.checkNotNull(poolName, "Required parameter poolName must be specified.");
        this.replicaName = com.google.api.client.util.Preconditions.checkNotNull(replicaName, "Required parameter replicaName must be specified.");
      }

      @Override
      public Restart setAlt(java.lang.String alt) {
        return (Restart) super.setAlt(alt);
      }

      @Override
      public Restart setFields(java.lang.String fields) {
        return (Restart) super.setFields(fields);
      }

      @Override
      public Restart setKey(java.lang.String key) {
        return (Restart) super.setKey(key);
      }

      @Override
      public Restart setOauthToken(java.lang.String oauthToken) {
        return (Restart) super.setOauthToken(oauthToken);
      }

      @Override
      public Restart setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Restart) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Restart setQuotaUser(java.lang.String quotaUser) {
        return (Restart) super.setQuotaUser(quotaUser);
      }

      @Override
      public Restart setUserIp(java.lang.String userIp) {
        return (Restart) super.setUserIp(userIp);
      }

      /** The project ID for this request. */
      @com.google.api.client.util.Key
      private java.lang.String projectName;

      /** The project ID for this request.
       */
      public java.lang.String getProjectName() {
        return projectName;
      }

      /** The project ID for this request. */
      public Restart setProjectName(java.lang.String projectName) {
        this.projectName = projectName;
        return this;
      }

      /** The zone where the replica lives. */
      @com.google.api.client.util.Key
      private java.lang.String zone;

      /** The zone where the replica lives.
       */
      public java.lang.String getZone() {
        return zone;
      }

      /** The zone where the replica lives. */
      public Restart setZone(java.lang.String zone) {
        this.zone = zone;
        return this;
      }

      /** The replica pool name for this request. */
      @com.google.api.client.util.Key
      private java.lang.String poolName;

      /** The replica pool name for this request.
       */
      public java.lang.String getPoolName() {
        return poolName;
      }

      /** The replica pool name for this request. */
      public Restart setPoolName(java.lang.String poolName) {
        this.poolName = poolName;
        return this;
      }

      /** The name of the replica for this request. */
      @com.google.api.client.util.Key
      private java.lang.String replicaName;

      /** The name of the replica for this request.
       */
      public java.lang.String getReplicaName() {
        return replicaName;
      }

      /** The name of the replica for this request. */
      public Restart setReplicaName(java.lang.String replicaName) {
        this.replicaName = replicaName;
        return this;
      }

      @Override
      public Restart set(String parameterName, Object value) {
        return (Restart) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Replicapool}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Replicapool}. */
    @Override
    public Replicapool build() {
      return new Replicapool(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ReplicapoolRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setReplicapoolRequestInitializer(
        ReplicapoolRequestInitializer replicapoolRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(replicapoolRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
