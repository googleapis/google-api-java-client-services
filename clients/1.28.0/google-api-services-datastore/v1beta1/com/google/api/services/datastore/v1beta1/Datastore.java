/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1beta1;

/**
 * Service definition for Datastore (v1beta1).
 *
 * <p>
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/datastore/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DatastoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Datastore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Datastore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://datastore.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Datastore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Datastore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Datastore datastore = new Datastore(...);}
   *   {@code Datastore.Projects.List request = datastore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage
     * system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the
     * export. The export occurs in the background and its progress can be monitored and managed via the
     * Operation resource that is created. The output of an export may only be used once the associated
     * operation is done. If an export operation is cancelled before completion it may leave partial
     * data behind in Google Cloud Storage.
     *
     * Create a request for the method "projects.export".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Export#execute()} method to invoke the remote operation.
     *
     * @param projectId Project ID against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ExportEntitiesRequest}
     * @return the request
     */
    public Export export(java.lang.String projectId, com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ExportEntitiesRequest content) throws java.io.IOException {
      Export result = new Export(projectId, content);
      initialize(result);
      return result;
    }

    public class Export extends DatastoreRequest<com.google.api.services.datastore.v1beta1.model.GoogleLongrunningOperation> {

      private static final String REST_PATH = "v1beta1/projects/{projectId}:export";

      /**
       * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage
       * system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the
       * export. The export occurs in the background and its progress can be monitored and managed via
       * the Operation resource that is created. The output of an export may only be used once the
       * associated operation is done. If an export operation is cancelled before completion it may
       * leave partial data behind in Google Cloud Storage.
       *
       * Create a request for the method "projects.export".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Export#execute()} method to invoke the remote operation.
       * <p> {@link
       * Export#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId Project ID against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ExportEntitiesRequest}
       * @since 1.13
       */
      protected Export(java.lang.String projectId, com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ExportEntitiesRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta1.model.GoogleLongrunningOperation.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Export set$Xgafv(java.lang.String $Xgafv) {
        return (Export) super.set$Xgafv($Xgafv);
      }

      @Override
      public Export setAccessToken(java.lang.String accessToken) {
        return (Export) super.setAccessToken(accessToken);
      }

      @Override
      public Export setAlt(java.lang.String alt) {
        return (Export) super.setAlt(alt);
      }

      @Override
      public Export setCallback(java.lang.String callback) {
        return (Export) super.setCallback(callback);
      }

      @Override
      public Export setFields(java.lang.String fields) {
        return (Export) super.setFields(fields);
      }

      @Override
      public Export setKey(java.lang.String key) {
        return (Export) super.setKey(key);
      }

      @Override
      public Export setOauthToken(java.lang.String oauthToken) {
        return (Export) super.setOauthToken(oauthToken);
      }

      @Override
      public Export setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Export) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Export setQuotaUser(java.lang.String quotaUser) {
        return (Export) super.setQuotaUser(quotaUser);
      }

      @Override
      public Export setUploadType(java.lang.String uploadType) {
        return (Export) super.setUploadType(uploadType);
      }

      @Override
      public Export setUploadProtocol(java.lang.String uploadProtocol) {
        return (Export) super.setUploadProtocol(uploadProtocol);
      }

      /** Project ID against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** Project ID against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** Project ID against which to make the request. */
      public Export setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Export set(String parameterName, Object value) {
        return (Export) super.set(parameterName, value);
      }
    }
    /**
     * Imports entities into Google Cloud Datastore. Existing entities with the same key are
     * overwritten. The import occurs in the background and its progress can be monitored and managed
     * via the Operation resource that is created. If an ImportEntities operation is cancelled, it is
     * possible that a subset of the data has already been imported to Cloud Datastore.
     *
     * Create a request for the method "projects.import".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link DatastoreImport#execute()} method to invoke the remote operation.
     *
     * @param projectId Project ID against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ImportEntitiesRequest}
     * @return the request
     */
    public DatastoreImport datastoreImport(java.lang.String projectId, com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ImportEntitiesRequest content) throws java.io.IOException {
      DatastoreImport result = new DatastoreImport(projectId, content);
      initialize(result);
      return result;
    }

    public class DatastoreImport extends DatastoreRequest<com.google.api.services.datastore.v1beta1.model.GoogleLongrunningOperation> {

      private static final String REST_PATH = "v1beta1/projects/{projectId}:import";

      /**
       * Imports entities into Google Cloud Datastore. Existing entities with the same key are
       * overwritten. The import occurs in the background and its progress can be monitored and managed
       * via the Operation resource that is created. If an ImportEntities operation is cancelled, it is
       * possible that a subset of the data has already been imported to Cloud Datastore.
       *
       * Create a request for the method "projects.import".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link DatastoreImport#execute()} method to invoke the remote
       * operation. <p> {@link DatastoreImport#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param projectId Project ID against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ImportEntitiesRequest}
       * @since 1.13
       */
      protected DatastoreImport(java.lang.String projectId, com.google.api.services.datastore.v1beta1.model.GoogleDatastoreAdminV1beta1ImportEntitiesRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta1.model.GoogleLongrunningOperation.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public DatastoreImport set$Xgafv(java.lang.String $Xgafv) {
        return (DatastoreImport) super.set$Xgafv($Xgafv);
      }

      @Override
      public DatastoreImport setAccessToken(java.lang.String accessToken) {
        return (DatastoreImport) super.setAccessToken(accessToken);
      }

      @Override
      public DatastoreImport setAlt(java.lang.String alt) {
        return (DatastoreImport) super.setAlt(alt);
      }

      @Override
      public DatastoreImport setCallback(java.lang.String callback) {
        return (DatastoreImport) super.setCallback(callback);
      }

      @Override
      public DatastoreImport setFields(java.lang.String fields) {
        return (DatastoreImport) super.setFields(fields);
      }

      @Override
      public DatastoreImport setKey(java.lang.String key) {
        return (DatastoreImport) super.setKey(key);
      }

      @Override
      public DatastoreImport setOauthToken(java.lang.String oauthToken) {
        return (DatastoreImport) super.setOauthToken(oauthToken);
      }

      @Override
      public DatastoreImport setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DatastoreImport) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DatastoreImport setQuotaUser(java.lang.String quotaUser) {
        return (DatastoreImport) super.setQuotaUser(quotaUser);
      }

      @Override
      public DatastoreImport setUploadType(java.lang.String uploadType) {
        return (DatastoreImport) super.setUploadType(uploadType);
      }

      @Override
      public DatastoreImport setUploadProtocol(java.lang.String uploadProtocol) {
        return (DatastoreImport) super.setUploadProtocol(uploadProtocol);
      }

      /** Project ID against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** Project ID against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** Project ID against which to make the request. */
      public DatastoreImport setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public DatastoreImport set(String parameterName, Object value) {
        return (DatastoreImport) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Datastore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Datastore}. */
    @Override
    public Datastore build() {
      return new Datastore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DatastoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDatastoreRequestInitializer(
        DatastoreRequestInitializer datastoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(datastoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
