/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1.model;

/**
 * Basic landmark information and the landmark's relationship with the target location. Landmarks
 * are prominent places that can be used to describe a location.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places API (New). For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlacesV1AddressDescriptorLandmark extends com.google.api.client.json.GenericJson {

  /**
   * The landmark's display name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLocalizedText displayName;

  /**
   * The landmark's resource name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The landmark's place id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String placeId;

  /**
   * Defines the spatial relationship between the target location and the landmark.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spatialRelationship;

  /**
   * The straight line distance, in meters, between the center point of the target and the center
   * point of the landmark. In some situations, this value can be longer than
   * `travel_distance_meters`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float straightLineDistanceMeters;

  /**
   * The travel distance, in meters, along the road network from the target to the landmark, if
   * known. This value does not take into account the mode of transportation, such as walking,
   * driving, or biking.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float travelDistanceMeters;

  /**
   * A set of type tags for this landmark. For a complete list of possible values, see
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> types;

  /**
   * The landmark's display name.
   * @return value or {@code null} for none
   */
  public GoogleTypeLocalizedText getDisplayName() {
    return displayName;
  }

  /**
   * The landmark's display name.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setDisplayName(GoogleTypeLocalizedText displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The landmark's resource name.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The landmark's resource name.
   * @param name name or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The landmark's place id.
   * @return value or {@code null} for none
   */
  public java.lang.String getPlaceId() {
    return placeId;
  }

  /**
   * The landmark's place id.
   * @param placeId placeId or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setPlaceId(java.lang.String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * Defines the spatial relationship between the target location and the landmark.
   * @return value or {@code null} for none
   */
  public java.lang.String getSpatialRelationship() {
    return spatialRelationship;
  }

  /**
   * Defines the spatial relationship between the target location and the landmark.
   * @param spatialRelationship spatialRelationship or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setSpatialRelationship(java.lang.String spatialRelationship) {
    this.spatialRelationship = spatialRelationship;
    return this;
  }

  /**
   * The straight line distance, in meters, between the center point of the target and the center
   * point of the landmark. In some situations, this value can be longer than
   * `travel_distance_meters`.
   * @return value or {@code null} for none
   */
  public java.lang.Float getStraightLineDistanceMeters() {
    return straightLineDistanceMeters;
  }

  /**
   * The straight line distance, in meters, between the center point of the target and the center
   * point of the landmark. In some situations, this value can be longer than
   * `travel_distance_meters`.
   * @param straightLineDistanceMeters straightLineDistanceMeters or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setStraightLineDistanceMeters(java.lang.Float straightLineDistanceMeters) {
    this.straightLineDistanceMeters = straightLineDistanceMeters;
    return this;
  }

  /**
   * The travel distance, in meters, along the road network from the target to the landmark, if
   * known. This value does not take into account the mode of transportation, such as walking,
   * driving, or biking.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTravelDistanceMeters() {
    return travelDistanceMeters;
  }

  /**
   * The travel distance, in meters, along the road network from the target to the landmark, if
   * known. This value does not take into account the mode of transportation, such as walking,
   * driving, or biking.
   * @param travelDistanceMeters travelDistanceMeters or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setTravelDistanceMeters(java.lang.Float travelDistanceMeters) {
    this.travelDistanceMeters = travelDistanceMeters;
    return this;
  }

  /**
   * A set of type tags for this landmark. For a complete list of possible values, see
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTypes() {
    return types;
  }

  /**
   * A set of type tags for this landmark. For a complete list of possible values, see
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   * @param types types or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptorLandmark setTypes(java.util.List<java.lang.String> types) {
    this.types = types;
    return this;
  }

  @Override
  public GoogleMapsPlacesV1AddressDescriptorLandmark set(String fieldName, Object value) {
    return (GoogleMapsPlacesV1AddressDescriptorLandmark) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlacesV1AddressDescriptorLandmark clone() {
    return (GoogleMapsPlacesV1AddressDescriptorLandmark) super.clone();
  }

}
