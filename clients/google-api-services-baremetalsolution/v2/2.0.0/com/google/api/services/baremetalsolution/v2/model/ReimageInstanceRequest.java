/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.baremetalsolution.v2.model;

/**
 * Message requesting to perform reimage operation on a server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Bare Metal Solution API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReimageInstanceRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has
   * to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings
   * /{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kmsKeyVersion;

  /**
   * Required. The OS image code of the image which will be used in the reimage operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String osImage;

  /**
   * Optional. List of SSH Keys used during reimaging an instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sshKeys;

  /**
   * Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has
   * to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings
   * /{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getKmsKeyVersion() {
    return kmsKeyVersion;
  }

  /**
   * Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has
   * to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings
   * /{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
   * @param kmsKeyVersion kmsKeyVersion or {@code null} for none
   */
  public ReimageInstanceRequest setKmsKeyVersion(java.lang.String kmsKeyVersion) {
    this.kmsKeyVersion = kmsKeyVersion;
    return this;
  }

  /**
   * Required. The OS image code of the image which will be used in the reimage operation.
   * @return value or {@code null} for none
   */
  public java.lang.String getOsImage() {
    return osImage;
  }

  /**
   * Required. The OS image code of the image which will be used in the reimage operation.
   * @param osImage osImage or {@code null} for none
   */
  public ReimageInstanceRequest setOsImage(java.lang.String osImage) {
    this.osImage = osImage;
    return this;
  }

  /**
   * Optional. List of SSH Keys used during reimaging an instance.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSshKeys() {
    return sshKeys;
  }

  /**
   * Optional. List of SSH Keys used during reimaging an instance.
   * @param sshKeys sshKeys or {@code null} for none
   */
  public ReimageInstanceRequest setSshKeys(java.util.List<java.lang.String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  @Override
  public ReimageInstanceRequest set(String fieldName, Object value) {
    return (ReimageInstanceRequest) super.set(fieldName, value);
  }

  @Override
  public ReimageInstanceRequest clone() {
    return (ReimageInstanceRequest) super.clone();
  }

}
