/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1.model;

/**
 * The accessor scope that describes who can access, for what purpose, in which environment.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConsentAccessorScope extends com.google.api.client.json.GenericJson {

  /**
   * An individual, group, or access role that identifies the accessor or a characteristic of the
   * accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This
   * value must be present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String actor;

  /**
   * An abstract identifier that describes the environment or conditions under which the accessor is
   * acting. Can be "*" if it applies to all environments.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String environment;

  /**
   * The intent of data use. Can be "*" if it applies to all purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String purpose;

  /**
   * An individual, group, or access role that identifies the accessor or a characteristic of the
   * accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This
   * value must be present.
   * @return value or {@code null} for none
   */
  public java.lang.String getActor() {
    return actor;
  }

  /**
   * An individual, group, or access role that identifies the accessor or a characteristic of the
   * accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This
   * value must be present.
   * @param actor actor or {@code null} for none
   */
  public ConsentAccessorScope setActor(java.lang.String actor) {
    this.actor = actor;
    return this;
  }

  /**
   * An abstract identifier that describes the environment or conditions under which the accessor is
   * acting. Can be "*" if it applies to all environments.
   * @return value or {@code null} for none
   */
  public java.lang.String getEnvironment() {
    return environment;
  }

  /**
   * An abstract identifier that describes the environment or conditions under which the accessor is
   * acting. Can be "*" if it applies to all environments.
   * @param environment environment or {@code null} for none
   */
  public ConsentAccessorScope setEnvironment(java.lang.String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * The intent of data use. Can be "*" if it applies to all purposes.
   * @return value or {@code null} for none
   */
  public java.lang.String getPurpose() {
    return purpose;
  }

  /**
   * The intent of data use. Can be "*" if it applies to all purposes.
   * @param purpose purpose or {@code null} for none
   */
  public ConsentAccessorScope setPurpose(java.lang.String purpose) {
    this.purpose = purpose;
    return this;
  }

  @Override
  public ConsentAccessorScope set(String fieldName, Object value) {
    return (ConsentAccessorScope) super.set(fieldName, value);
  }

  @Override
  public ConsentAccessorScope clone() {
    return (ConsentAccessorScope) super.clone();
  }

}
