/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Message type to initiate a read-write transaction. Currently this transaction type has no
 * options.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReadWrite extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Clients should pass the transaction ID of the previous transaction attempt that was
   * aborted if this transaction is being executed on a multiplexed session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String multiplexedSessionPreviousTransactionId;

  /**
   * Read lock mode for the transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String readLockMode;

  /**
   * Optional. Clients should pass the transaction ID of the previous transaction attempt that was
   * aborted if this transaction is being executed on a multiplexed session.
   * @see #decodeMultiplexedSessionPreviousTransactionId()
   * @return value or {@code null} for none
   */
  public java.lang.String getMultiplexedSessionPreviousTransactionId() {
    return multiplexedSessionPreviousTransactionId;
  }

  /**
   * Optional. Clients should pass the transaction ID of the previous transaction attempt that was
   * aborted if this transaction is being executed on a multiplexed session.
   * @see #getMultiplexedSessionPreviousTransactionId()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeMultiplexedSessionPreviousTransactionId() {
    return com.google.api.client.util.Base64.decodeBase64(multiplexedSessionPreviousTransactionId);
  }

  /**
   * Optional. Clients should pass the transaction ID of the previous transaction attempt that was
   * aborted if this transaction is being executed on a multiplexed session.
   * @see #encodeMultiplexedSessionPreviousTransactionId()
   * @param multiplexedSessionPreviousTransactionId multiplexedSessionPreviousTransactionId or {@code null} for none
   */
  public ReadWrite setMultiplexedSessionPreviousTransactionId(java.lang.String multiplexedSessionPreviousTransactionId) {
    this.multiplexedSessionPreviousTransactionId = multiplexedSessionPreviousTransactionId;
    return this;
  }

  /**
   * Optional. Clients should pass the transaction ID of the previous transaction attempt that was
   * aborted if this transaction is being executed on a multiplexed session.
   * @see #setMultiplexedSessionPreviousTransactionId()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ReadWrite encodeMultiplexedSessionPreviousTransactionId(byte[] multiplexedSessionPreviousTransactionId) {
    this.multiplexedSessionPreviousTransactionId = com.google.api.client.util.Base64.encodeBase64URLSafeString(multiplexedSessionPreviousTransactionId);
    return this;
  }

  /**
   * Read lock mode for the transaction.
   * @return value or {@code null} for none
   */
  public java.lang.String getReadLockMode() {
    return readLockMode;
  }

  /**
   * Read lock mode for the transaction.
   * @param readLockMode readLockMode or {@code null} for none
   */
  public ReadWrite setReadLockMode(java.lang.String readLockMode) {
    this.readLockMode = readLockMode;
    return this;
  }

  @Override
  public ReadWrite set(String fieldName, Object value) {
    return (ReadWrite) super.set(fieldName, value);
  }

  @Override
  public ReadWrite clone() {
    return (ReadWrite) super.clone();
  }

}
