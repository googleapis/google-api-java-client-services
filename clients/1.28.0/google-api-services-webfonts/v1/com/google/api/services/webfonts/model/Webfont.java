/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.webfonts.model;

/**
 * Model definition for Webfont.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Fonts Developer API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Webfont extends com.google.api.client.json.GenericJson {

  /**
   * The category of the font.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * The name of the font.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String family;

  /**
   * The font files (with all supported scripts) for each one of the available variants, as a key :
   * value map.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> files;

  /**
   * This kind represents a webfont object in the webfonts service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The date (format "yyyy-MM-dd") the font was modified for the last time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private com.google.api.client.util.DateTime lastModified;

  /**
   * The scripts supported by the font.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> subsets;

  /**
   * The available variants for the font.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> variants;

  /**
   * The font version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String version;

  /**
   * The category of the font.
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * The category of the font.
   * @param category category or {@code null} for none
   */
  public Webfont setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * The name of the font.
   * @return value or {@code null} for none
   */
  public java.lang.String getFamily() {
    return family;
  }

  /**
   * The name of the font.
   * @param family family or {@code null} for none
   */
  public Webfont setFamily(java.lang.String family) {
    this.family = family;
    return this;
  }

  /**
   * The font files (with all supported scripts) for each one of the available variants, as a key :
   * value map.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getFiles() {
    return files;
  }

  /**
   * The font files (with all supported scripts) for each one of the available variants, as a key :
   * value map.
   * @param files files or {@code null} for none
   */
  public Webfont setFiles(java.util.Map<String, java.lang.String> files) {
    this.files = files;
    return this;
  }

  /**
   * This kind represents a webfont object in the webfonts service.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * This kind represents a webfont object in the webfonts service.
   * @param kind kind or {@code null} for none
   */
  public Webfont setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The date (format "yyyy-MM-dd") the font was modified for the last time.
   * @return value or {@code null} for none
   */
  public com.google.api.client.util.DateTime getLastModified() {
    return lastModified;
  }

  /**
   * The date (format "yyyy-MM-dd") the font was modified for the last time.
   * @param lastModified lastModified or {@code null} for none
   */
  public Webfont setLastModified(com.google.api.client.util.DateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The scripts supported by the font.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSubsets() {
    return subsets;
  }

  /**
   * The scripts supported by the font.
   * @param subsets subsets or {@code null} for none
   */
  public Webfont setSubsets(java.util.List<java.lang.String> subsets) {
    this.subsets = subsets;
    return this;
  }

  /**
   * The available variants for the font.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVariants() {
    return variants;
  }

  /**
   * The available variants for the font.
   * @param variants variants or {@code null} for none
   */
  public Webfont setVariants(java.util.List<java.lang.String> variants) {
    this.variants = variants;
    return this;
  }

  /**
   * The font version.
   * @return value or {@code null} for none
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * The font version.
   * @param version version or {@code null} for none
   */
  public Webfont setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  @Override
  public Webfont set(String fieldName, Object value) {
    return (Webfont) super.set(fieldName, value);
  }

  @Override
  public Webfont clone() {
    return (Webfont) super.clone();
  }

}
