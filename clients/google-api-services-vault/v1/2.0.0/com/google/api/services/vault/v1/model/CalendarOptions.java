/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vault.v1.model;

/**
 * Additional options for Calendar search
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Vault API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CalendarOptions extends com.google.api.client.json.GenericJson {

  /**
   * Matches only those events whose location contains all of the words in the given set. If the
   * string contains quoted phrases, this method only matches those events whose location contain
   * the exact phrase. Entries in the set are considered in "and". Word splitting example: ["New
   * Zealand"] vs ["New","Zealand"] "New Zealand": matched by both "New and better Zealand": only
   * matched by the later
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locationQuery;

  /**
   * Matches only those events that do not contain any of the words in the given set in title,
   * description, location, or attendees. Entries in the set are considered in "or".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> minusWords;

  /**
   * Matches only those events whose attendees contain all of the words in the given set. Entries in
   * the set are considered in "and".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> peopleQuery;

  /**
   * Matches only events for which the custodian gave one of these responses. If the set is empty or
   * contains ATTENDEE_RESPONSE_UNSPECIFIED there will be no filtering on responses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> responseStatuses;

  /**
   * Search the current version of the Calendar event, but export the contents of the last version
   * saved before 12:00 AM UTC on the specified date. Enter the date in UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String versionDate;

  /**
   * Matches only those events whose location contains all of the words in the given set. If the
   * string contains quoted phrases, this method only matches those events whose location contain
   * the exact phrase. Entries in the set are considered in "and". Word splitting example: ["New
   * Zealand"] vs ["New","Zealand"] "New Zealand": matched by both "New and better Zealand": only
   * matched by the later
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocationQuery() {
    return locationQuery;
  }

  /**
   * Matches only those events whose location contains all of the words in the given set. If the
   * string contains quoted phrases, this method only matches those events whose location contain
   * the exact phrase. Entries in the set are considered in "and". Word splitting example: ["New
   * Zealand"] vs ["New","Zealand"] "New Zealand": matched by both "New and better Zealand": only
   * matched by the later
   * @param locationQuery locationQuery or {@code null} for none
   */
  public CalendarOptions setLocationQuery(java.util.List<java.lang.String> locationQuery) {
    this.locationQuery = locationQuery;
    return this;
  }

  /**
   * Matches only those events that do not contain any of the words in the given set in title,
   * description, location, or attendees. Entries in the set are considered in "or".
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMinusWords() {
    return minusWords;
  }

  /**
   * Matches only those events that do not contain any of the words in the given set in title,
   * description, location, or attendees. Entries in the set are considered in "or".
   * @param minusWords minusWords or {@code null} for none
   */
  public CalendarOptions setMinusWords(java.util.List<java.lang.String> minusWords) {
    this.minusWords = minusWords;
    return this;
  }

  /**
   * Matches only those events whose attendees contain all of the words in the given set. Entries in
   * the set are considered in "and".
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPeopleQuery() {
    return peopleQuery;
  }

  /**
   * Matches only those events whose attendees contain all of the words in the given set. Entries in
   * the set are considered in "and".
   * @param peopleQuery peopleQuery or {@code null} for none
   */
  public CalendarOptions setPeopleQuery(java.util.List<java.lang.String> peopleQuery) {
    this.peopleQuery = peopleQuery;
    return this;
  }

  /**
   * Matches only events for which the custodian gave one of these responses. If the set is empty or
   * contains ATTENDEE_RESPONSE_UNSPECIFIED there will be no filtering on responses.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getResponseStatuses() {
    return responseStatuses;
  }

  /**
   * Matches only events for which the custodian gave one of these responses. If the set is empty or
   * contains ATTENDEE_RESPONSE_UNSPECIFIED there will be no filtering on responses.
   * @param responseStatuses responseStatuses or {@code null} for none
   */
  public CalendarOptions setResponseStatuses(java.util.List<java.lang.String> responseStatuses) {
    this.responseStatuses = responseStatuses;
    return this;
  }

  /**
   * Search the current version of the Calendar event, but export the contents of the last version
   * saved before 12:00 AM UTC on the specified date. Enter the date in UTC.
   * @return value or {@code null} for none
   */
  public String getVersionDate() {
    return versionDate;
  }

  /**
   * Search the current version of the Calendar event, but export the contents of the last version
   * saved before 12:00 AM UTC on the specified date. Enter the date in UTC.
   * @param versionDate versionDate or {@code null} for none
   */
  public CalendarOptions setVersionDate(String versionDate) {
    this.versionDate = versionDate;
    return this;
  }

  @Override
  public CalendarOptions set(String fieldName, Object value) {
    return (CalendarOptions) super.set(fieldName, value);
  }

  @Override
  public CalendarOptions clone() {
    return (CalendarOptions) super.clone();
  }

}
