/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1.model;

/**
 * The request for Datastore.RunAggregationQuery.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RunAggregationQueryRequest extends com.google.api.client.json.GenericJson {

  /**
   * The query to run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AggregationQuery aggregationQuery;

  /**
   * The ID of the database against which to make the request. '(default)' is not allowed; please
   * use empty string '' to refer the default database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseId;

  /**
   * The GQL query to run. This query must be an aggregation query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GqlQuery gqlQuery;

  /**
   * Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a
   * single partition. This partition ID is normalized with the standard default context partition
   * ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PartitionId partitionId;

  /**
   * The options for this query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReadOptions readOptions;

  /**
   * The query to run.
   * @return value or {@code null} for none
   */
  public AggregationQuery getAggregationQuery() {
    return aggregationQuery;
  }

  /**
   * The query to run.
   * @param aggregationQuery aggregationQuery or {@code null} for none
   */
  public RunAggregationQueryRequest setAggregationQuery(AggregationQuery aggregationQuery) {
    this.aggregationQuery = aggregationQuery;
    return this;
  }

  /**
   * The ID of the database against which to make the request. '(default)' is not allowed; please
   * use empty string '' to refer the default database.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseId() {
    return databaseId;
  }

  /**
   * The ID of the database against which to make the request. '(default)' is not allowed; please
   * use empty string '' to refer the default database.
   * @param databaseId databaseId or {@code null} for none
   */
  public RunAggregationQueryRequest setDatabaseId(java.lang.String databaseId) {
    this.databaseId = databaseId;
    return this;
  }

  /**
   * The GQL query to run. This query must be an aggregation query.
   * @return value or {@code null} for none
   */
  public GqlQuery getGqlQuery() {
    return gqlQuery;
  }

  /**
   * The GQL query to run. This query must be an aggregation query.
   * @param gqlQuery gqlQuery or {@code null} for none
   */
  public RunAggregationQueryRequest setGqlQuery(GqlQuery gqlQuery) {
    this.gqlQuery = gqlQuery;
    return this;
  }

  /**
   * Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a
   * single partition. This partition ID is normalized with the standard default context partition
   * ID.
   * @return value or {@code null} for none
   */
  public PartitionId getPartitionId() {
    return partitionId;
  }

  /**
   * Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a
   * single partition. This partition ID is normalized with the standard default context partition
   * ID.
   * @param partitionId partitionId or {@code null} for none
   */
  public RunAggregationQueryRequest setPartitionId(PartitionId partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * The options for this query.
   * @return value or {@code null} for none
   */
  public ReadOptions getReadOptions() {
    return readOptions;
  }

  /**
   * The options for this query.
   * @param readOptions readOptions or {@code null} for none
   */
  public RunAggregationQueryRequest setReadOptions(ReadOptions readOptions) {
    this.readOptions = readOptions;
    return this;
  }

  @Override
  public RunAggregationQueryRequest set(String fieldName, Object value) {
    return (RunAggregationQueryRequest) super.set(fieldName, value);
  }

  @Override
  public RunAggregationQueryRequest clone() {
    return (RunAggregationQueryRequest) super.clone();
  }

}
