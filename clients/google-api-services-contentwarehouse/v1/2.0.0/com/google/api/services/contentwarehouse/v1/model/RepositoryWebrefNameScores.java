/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents some name-specific scores. (Unlike EntityNameScore, these scores are independent of
 * the entities the name is associated with). These scores are available for each name as well as
 * for each name/source. Next available tag: 31.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefNameScores extends com.google.api.client.json.GenericJson {

  /**
   * Approximates volume of this name including entities we don't have in our set. This is useful to
   * estimate the size of the "open world". For example, this field can be equal to the total number
   * of clicks for the query. Note that for now, we ignore the number of clicks but just use the idf
   * if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float completeWorldVolume;

  /**
   * The fringe score in [0, 1] for this context name. This is only populated for full-query context
   * names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float contextFringeScore;

  /**
   * The amount of evidence available for this context name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float contextWeight;

  /**
   * The idf of this name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float idfScore;

  /**
   * 'Raw' open world is computed based on ngram count data. For some names however, we modify the
   * open world based on entities associated with them. This field contains the additive open world
   * modifier. open_world_volume = raw open world + open_world_volume_modifier
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float openWorldVolumeModifier;

  /**
   * The total score of that name/source. It describes how much data we have for that name/source.
   * It can for example be the sum of all the entity scores for this name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float totalScore;

  /**
   * Approximates volume of this name including entities we don't have in our set. This is useful to
   * estimate the size of the "open world". For example, this field can be equal to the total number
   * of clicks for the query. Note that for now, we ignore the number of clicks but just use the idf
   * if available.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCompleteWorldVolume() {
    return completeWorldVolume;
  }

  /**
   * Approximates volume of this name including entities we don't have in our set. This is useful to
   * estimate the size of the "open world". For example, this field can be equal to the total number
   * of clicks for the query. Note that for now, we ignore the number of clicks but just use the idf
   * if available.
   * @param completeWorldVolume completeWorldVolume or {@code null} for none
   */
  public RepositoryWebrefNameScores setCompleteWorldVolume(java.lang.Float completeWorldVolume) {
    this.completeWorldVolume = completeWorldVolume;
    return this;
  }

  /**
   * The fringe score in [0, 1] for this context name. This is only populated for full-query context
   * names.
   * @return value or {@code null} for none
   */
  public java.lang.Float getContextFringeScore() {
    return contextFringeScore;
  }

  /**
   * The fringe score in [0, 1] for this context name. This is only populated for full-query context
   * names.
   * @param contextFringeScore contextFringeScore or {@code null} for none
   */
  public RepositoryWebrefNameScores setContextFringeScore(java.lang.Float contextFringeScore) {
    this.contextFringeScore = contextFringeScore;
    return this;
  }

  /**
   * The amount of evidence available for this context name.
   * @return value or {@code null} for none
   */
  public java.lang.Float getContextWeight() {
    return contextWeight;
  }

  /**
   * The amount of evidence available for this context name.
   * @param contextWeight contextWeight or {@code null} for none
   */
  public RepositoryWebrefNameScores setContextWeight(java.lang.Float contextWeight) {
    this.contextWeight = contextWeight;
    return this;
  }

  /**
   * The idf of this name.
   * @return value or {@code null} for none
   */
  public java.lang.Float getIdfScore() {
    return idfScore;
  }

  /**
   * The idf of this name.
   * @param idfScore idfScore or {@code null} for none
   */
  public RepositoryWebrefNameScores setIdfScore(java.lang.Float idfScore) {
    this.idfScore = idfScore;
    return this;
  }

  /**
   * 'Raw' open world is computed based on ngram count data. For some names however, we modify the
   * open world based on entities associated with them. This field contains the additive open world
   * modifier. open_world_volume = raw open world + open_world_volume_modifier
   * @return value or {@code null} for none
   */
  public java.lang.Float getOpenWorldVolumeModifier() {
    return openWorldVolumeModifier;
  }

  /**
   * 'Raw' open world is computed based on ngram count data. For some names however, we modify the
   * open world based on entities associated with them. This field contains the additive open world
   * modifier. open_world_volume = raw open world + open_world_volume_modifier
   * @param openWorldVolumeModifier openWorldVolumeModifier or {@code null} for none
   */
  public RepositoryWebrefNameScores setOpenWorldVolumeModifier(java.lang.Float openWorldVolumeModifier) {
    this.openWorldVolumeModifier = openWorldVolumeModifier;
    return this;
  }

  /**
   * The total score of that name/source. It describes how much data we have for that name/source.
   * It can for example be the sum of all the entity scores for this name.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalScore() {
    return totalScore;
  }

  /**
   * The total score of that name/source. It describes how much data we have for that name/source.
   * It can for example be the sum of all the entity scores for this name.
   * @param totalScore totalScore or {@code null} for none
   */
  public RepositoryWebrefNameScores setTotalScore(java.lang.Float totalScore) {
    this.totalScore = totalScore;
    return this;
  }

  @Override
  public RepositoryWebrefNameScores set(String fieldName, Object value) {
    return (RepositoryWebrefNameScores) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefNameScores clone() {
    return (RepositoryWebrefNameScores) super.clone();
  }

}
