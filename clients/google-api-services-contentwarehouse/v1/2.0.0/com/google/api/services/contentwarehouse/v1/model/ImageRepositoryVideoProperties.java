/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for ImageRepositoryVideoProperties.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageRepositoryVideoProperties extends com.google.api.client.json.GenericJson {

  /**
   * Both audio- and audio-video-files are treated as videos during indexing (whether they share a
   * container format, like .mp4, or not, like .mp3). This bool indicates that there's no video
   * track, just an audio track.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean audioOnly;

  /**
   * Information derived from fetched video bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryContentBasedVideoMetadata contentBasedMetadata;

  /**
   * The raw crawl state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageMoosedogCrawlState crawlState;

  /**
   * Timestamp of the first time that the video was successfully crawled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long firstCrawlTimestampSec;

  /**
   * Timestamp when this video's videoProperties is populated for the first time, measured in
   * seconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long firstProcessingTimestampSec;

  /**
   * DEPRECATED: please use content_based_metadata.inline_playback. Metadata related to Inline
   * playback on the Interest Feed
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoCrawlVideoInlinePlaybackMetadata inlinePlayback;

  /**
   * Timestamp when this video's last crawling is requested, measured in seconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long lastCrawlRequestTimestampSec;

  /**
   * Last timestamp when this video's videoProperties is populated, measured in seconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long lastProcessingTimestampSec;

  /**
   * This is the video url taken from the key of the Amarna references table row corresponding to
   * this message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Both audio- and audio-video-files are treated as videos during indexing (whether they share a
   * container format, like .mp4, or not, like .mp3). This bool indicates that there's no video
   * track, just an audio track.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAudioOnly() {
    return audioOnly;
  }

  /**
   * Both audio- and audio-video-files are treated as videos during indexing (whether they share a
   * container format, like .mp4, or not, like .mp3). This bool indicates that there's no video
   * track, just an audio track.
   * @param audioOnly audioOnly or {@code null} for none
   */
  public ImageRepositoryVideoProperties setAudioOnly(java.lang.Boolean audioOnly) {
    this.audioOnly = audioOnly;
    return this;
  }

  /**
   * Information derived from fetched video bytes.
   * @return value or {@code null} for none
   */
  public ImageRepositoryContentBasedVideoMetadata getContentBasedMetadata() {
    return contentBasedMetadata;
  }

  /**
   * Information derived from fetched video bytes.
   * @param contentBasedMetadata contentBasedMetadata or {@code null} for none
   */
  public ImageRepositoryVideoProperties setContentBasedMetadata(ImageRepositoryContentBasedVideoMetadata contentBasedMetadata) {
    this.contentBasedMetadata = contentBasedMetadata;
    return this;
  }

  /**
   * The raw crawl state.
   * @return value or {@code null} for none
   */
  public ImageMoosedogCrawlState getCrawlState() {
    return crawlState;
  }

  /**
   * The raw crawl state.
   * @param crawlState crawlState or {@code null} for none
   */
  public ImageRepositoryVideoProperties setCrawlState(ImageMoosedogCrawlState crawlState) {
    this.crawlState = crawlState;
    return this;
  }

  /**
   * Timestamp of the first time that the video was successfully crawled.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFirstCrawlTimestampSec() {
    return firstCrawlTimestampSec;
  }

  /**
   * Timestamp of the first time that the video was successfully crawled.
   * @param firstCrawlTimestampSec firstCrawlTimestampSec or {@code null} for none
   */
  public ImageRepositoryVideoProperties setFirstCrawlTimestampSec(java.lang.Long firstCrawlTimestampSec) {
    this.firstCrawlTimestampSec = firstCrawlTimestampSec;
    return this;
  }

  /**
   * Timestamp when this video's videoProperties is populated for the first time, measured in
   * seconds since epoch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFirstProcessingTimestampSec() {
    return firstProcessingTimestampSec;
  }

  /**
   * Timestamp when this video's videoProperties is populated for the first time, measured in
   * seconds since epoch.
   * @param firstProcessingTimestampSec firstProcessingTimestampSec or {@code null} for none
   */
  public ImageRepositoryVideoProperties setFirstProcessingTimestampSec(java.lang.Long firstProcessingTimestampSec) {
    this.firstProcessingTimestampSec = firstProcessingTimestampSec;
    return this;
  }

  /**
   * DEPRECATED: please use content_based_metadata.inline_playback. Metadata related to Inline
   * playback on the Interest Feed
   * @return value or {@code null} for none
   */
  public VideoCrawlVideoInlinePlaybackMetadata getInlinePlayback() {
    return inlinePlayback;
  }

  /**
   * DEPRECATED: please use content_based_metadata.inline_playback. Metadata related to Inline
   * playback on the Interest Feed
   * @param inlinePlayback inlinePlayback or {@code null} for none
   */
  public ImageRepositoryVideoProperties setInlinePlayback(VideoCrawlVideoInlinePlaybackMetadata inlinePlayback) {
    this.inlinePlayback = inlinePlayback;
    return this;
  }

  /**
   * Timestamp when this video's last crawling is requested, measured in seconds since epoch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastCrawlRequestTimestampSec() {
    return lastCrawlRequestTimestampSec;
  }

  /**
   * Timestamp when this video's last crawling is requested, measured in seconds since epoch.
   * @param lastCrawlRequestTimestampSec lastCrawlRequestTimestampSec or {@code null} for none
   */
  public ImageRepositoryVideoProperties setLastCrawlRequestTimestampSec(java.lang.Long lastCrawlRequestTimestampSec) {
    this.lastCrawlRequestTimestampSec = lastCrawlRequestTimestampSec;
    return this;
  }

  /**
   * Last timestamp when this video's videoProperties is populated, measured in seconds since epoch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastProcessingTimestampSec() {
    return lastProcessingTimestampSec;
  }

  /**
   * Last timestamp when this video's videoProperties is populated, measured in seconds since epoch.
   * @param lastProcessingTimestampSec lastProcessingTimestampSec or {@code null} for none
   */
  public ImageRepositoryVideoProperties setLastProcessingTimestampSec(java.lang.Long lastProcessingTimestampSec) {
    this.lastProcessingTimestampSec = lastProcessingTimestampSec;
    return this;
  }

  /**
   * This is the video url taken from the key of the Amarna references table row corresponding to
   * this message.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * This is the video url taken from the key of the Amarna references table row corresponding to
   * this message.
   * @param url url or {@code null} for none
   */
  public ImageRepositoryVideoProperties setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public ImageRepositoryVideoProperties set(String fieldName, Object value) {
    return (ImageRepositoryVideoProperties) super.set(fieldName, value);
  }

  @Override
  public ImageRepositoryVideoProperties clone() {
    return (ImageRepositoryVideoProperties) super.clone();
  }

}
