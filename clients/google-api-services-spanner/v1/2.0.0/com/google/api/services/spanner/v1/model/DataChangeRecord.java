/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * A data change record contains a set of changes to a table with the same modification type
 * (insert, update, or delete) committed at the same commit timestamp in one change stream partition
 * for the same transaction. Multiple data change records can be returned for the same transaction
 * across multiple change stream partitions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DataChangeRecord extends com.google.api.client.json.GenericJson {

  /**
   * Provides metadata describing the columns associated with the mods listed below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ColumnMetadata> columnMetadata;

  static {
    // hack to force ProGuard to consider ColumnMetadata used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ColumnMetadata.class);
  }

  /**
   * Indicates the timestamp in which the change was committed. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String commitTimestamp;

  /**
   * Indicates whether this is the last record for a transaction in the current partition. Clients
   * can use this field to determine when all records for a transaction in the current partition
   * have been received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLastRecordInTransactionInPartition;

  /**
   * Indicates whether the transaction is a system transaction. System transactions include those
   * issued by time-to-live (TTL), column backfill, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSystemTransaction;

  /**
   * Describes the type of change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modType;

  /**
   * Describes the changes that were made.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Mod> mods;

  /**
   * Indicates the number of partitions that return data change records for this transaction. This
   * value can be helpful in assembling all records associated with a particular transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfPartitionsInTransaction;

  /**
   * Indicates the number of data change records that are part of this transaction across all change
   * stream partitions. This value can be used to assemble all the records associated with a
   * particular transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfRecordsInTransaction;

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition. The record sequence
   * number ordering across partitions is only meaningful in the context of a specific transaction.
   * Record sequence numbers are unique across partitions for a specific transaction. Sort the
   * DataChangeRecords for the same server_transaction_id by record_sequence to reconstruct the
   * ordering of the changes within the transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordSequence;

  /**
   * Provides a globally unique string that represents the transaction in which the change was
   * committed. Multiple transactions can have the same commit timestamp, but each transaction has a
   * unique server_transaction_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serverTransactionId;

  /**
   * Name of the table affected by the change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String table;

  /**
   * Indicates the transaction tag associated with this transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transactionTag;

  /**
   * Describes the value capture type that was specified in the change stream configuration when
   * this change was captured.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueCaptureType;

  /**
   * Provides metadata describing the columns associated with the mods listed below.
   * @return value or {@code null} for none
   */
  public java.util.List<ColumnMetadata> getColumnMetadata() {
    return columnMetadata;
  }

  /**
   * Provides metadata describing the columns associated with the mods listed below.
   * @param columnMetadata columnMetadata or {@code null} for none
   */
  public DataChangeRecord setColumnMetadata(java.util.List<ColumnMetadata> columnMetadata) {
    this.columnMetadata = columnMetadata;
    return this;
  }

  /**
   * Indicates the timestamp in which the change was committed. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * @return value or {@code null} for none
   */
  public String getCommitTimestamp() {
    return commitTimestamp;
  }

  /**
   * Indicates the timestamp in which the change was committed. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * @param commitTimestamp commitTimestamp or {@code null} for none
   */
  public DataChangeRecord setCommitTimestamp(String commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
    return this;
  }

  /**
   * Indicates whether this is the last record for a transaction in the current partition. Clients
   * can use this field to determine when all records for a transaction in the current partition
   * have been received.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLastRecordInTransactionInPartition() {
    return isLastRecordInTransactionInPartition;
  }

  /**
   * Indicates whether this is the last record for a transaction in the current partition. Clients
   * can use this field to determine when all records for a transaction in the current partition
   * have been received.
   * @param isLastRecordInTransactionInPartition isLastRecordInTransactionInPartition or {@code null} for none
   */
  public DataChangeRecord setIsLastRecordInTransactionInPartition(java.lang.Boolean isLastRecordInTransactionInPartition) {
    this.isLastRecordInTransactionInPartition = isLastRecordInTransactionInPartition;
    return this;
  }

  /**
   * Indicates whether the transaction is a system transaction. System transactions include those
   * issued by time-to-live (TTL), column backfill, etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSystemTransaction() {
    return isSystemTransaction;
  }

  /**
   * Indicates whether the transaction is a system transaction. System transactions include those
   * issued by time-to-live (TTL), column backfill, etc.
   * @param isSystemTransaction isSystemTransaction or {@code null} for none
   */
  public DataChangeRecord setIsSystemTransaction(java.lang.Boolean isSystemTransaction) {
    this.isSystemTransaction = isSystemTransaction;
    return this;
  }

  /**
   * Describes the type of change.
   * @return value or {@code null} for none
   */
  public java.lang.String getModType() {
    return modType;
  }

  /**
   * Describes the type of change.
   * @param modType modType or {@code null} for none
   */
  public DataChangeRecord setModType(java.lang.String modType) {
    this.modType = modType;
    return this;
  }

  /**
   * Describes the changes that were made.
   * @return value or {@code null} for none
   */
  public java.util.List<Mod> getMods() {
    return mods;
  }

  /**
   * Describes the changes that were made.
   * @param mods mods or {@code null} for none
   */
  public DataChangeRecord setMods(java.util.List<Mod> mods) {
    this.mods = mods;
    return this;
  }

  /**
   * Indicates the number of partitions that return data change records for this transaction. This
   * value can be helpful in assembling all records associated with a particular transaction.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfPartitionsInTransaction() {
    return numberOfPartitionsInTransaction;
  }

  /**
   * Indicates the number of partitions that return data change records for this transaction. This
   * value can be helpful in assembling all records associated with a particular transaction.
   * @param numberOfPartitionsInTransaction numberOfPartitionsInTransaction or {@code null} for none
   */
  public DataChangeRecord setNumberOfPartitionsInTransaction(java.lang.Integer numberOfPartitionsInTransaction) {
    this.numberOfPartitionsInTransaction = numberOfPartitionsInTransaction;
    return this;
  }

  /**
   * Indicates the number of data change records that are part of this transaction across all change
   * stream partitions. This value can be used to assemble all the records associated with a
   * particular transaction.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfRecordsInTransaction() {
    return numberOfRecordsInTransaction;
  }

  /**
   * Indicates the number of data change records that are part of this transaction across all change
   * stream partitions. This value can be used to assemble all the records associated with a
   * particular transaction.
   * @param numberOfRecordsInTransaction numberOfRecordsInTransaction or {@code null} for none
   */
  public DataChangeRecord setNumberOfRecordsInTransaction(java.lang.Integer numberOfRecordsInTransaction) {
    this.numberOfRecordsInTransaction = numberOfRecordsInTransaction;
    return this;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition. The record sequence
   * number ordering across partitions is only meaningful in the context of a specific transaction.
   * Record sequence numbers are unique across partitions for a specific transaction. Sort the
   * DataChangeRecords for the same server_transaction_id by record_sequence to reconstruct the
   * ordering of the changes within the transaction.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordSequence() {
    return recordSequence;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition. The record sequence
   * number ordering across partitions is only meaningful in the context of a specific transaction.
   * Record sequence numbers are unique across partitions for a specific transaction. Sort the
   * DataChangeRecords for the same server_transaction_id by record_sequence to reconstruct the
   * ordering of the changes within the transaction.
   * @param recordSequence recordSequence or {@code null} for none
   */
  public DataChangeRecord setRecordSequence(java.lang.String recordSequence) {
    this.recordSequence = recordSequence;
    return this;
  }

  /**
   * Provides a globally unique string that represents the transaction in which the change was
   * committed. Multiple transactions can have the same commit timestamp, but each transaction has a
   * unique server_transaction_id.
   * @return value or {@code null} for none
   */
  public java.lang.String getServerTransactionId() {
    return serverTransactionId;
  }

  /**
   * Provides a globally unique string that represents the transaction in which the change was
   * committed. Multiple transactions can have the same commit timestamp, but each transaction has a
   * unique server_transaction_id.
   * @param serverTransactionId serverTransactionId or {@code null} for none
   */
  public DataChangeRecord setServerTransactionId(java.lang.String serverTransactionId) {
    this.serverTransactionId = serverTransactionId;
    return this;
  }

  /**
   * Name of the table affected by the change.
   * @return value or {@code null} for none
   */
  public java.lang.String getTable() {
    return table;
  }

  /**
   * Name of the table affected by the change.
   * @param table table or {@code null} for none
   */
  public DataChangeRecord setTable(java.lang.String table) {
    this.table = table;
    return this;
  }

  /**
   * Indicates the transaction tag associated with this transaction.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransactionTag() {
    return transactionTag;
  }

  /**
   * Indicates the transaction tag associated with this transaction.
   * @param transactionTag transactionTag or {@code null} for none
   */
  public DataChangeRecord setTransactionTag(java.lang.String transactionTag) {
    this.transactionTag = transactionTag;
    return this;
  }

  /**
   * Describes the value capture type that was specified in the change stream configuration when
   * this change was captured.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueCaptureType() {
    return valueCaptureType;
  }

  /**
   * Describes the value capture type that was specified in the change stream configuration when
   * this change was captured.
   * @param valueCaptureType valueCaptureType or {@code null} for none
   */
  public DataChangeRecord setValueCaptureType(java.lang.String valueCaptureType) {
    this.valueCaptureType = valueCaptureType;
    return this;
  }

  @Override
  public DataChangeRecord set(String fieldName, Object value) {
    return (DataChangeRecord) super.set(fieldName, value);
  }

  @Override
  public DataChangeRecord clone() {
    return (DataChangeRecord) super.clone();
  }

}
