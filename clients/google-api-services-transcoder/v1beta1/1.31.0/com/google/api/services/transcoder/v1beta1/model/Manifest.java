/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.transcoder.v1beta1.model;

/**
 * Manifest configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Transcoder API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Manifest extends com.google.api.client.json.GenericJson {

  /**
   * The name of the generated file. The default is `"manifest"` with the extension suffix
   * corresponding to the `Manifest.type`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fileName;

  /**
   * Required. List of user given `MuxStream.key`s that should appear in this manifest. When
   * `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is
   * generated for each element of the `Manifest.mux_streams`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> muxStreams;

  /**
   * Required. Type of the manifest, can be "HLS" or "DASH".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The name of the generated file. The default is `"manifest"` with the extension suffix
   * corresponding to the `Manifest.type`.
   * @return value or {@code null} for none
   */
  public java.lang.String getFileName() {
    return fileName;
  }

  /**
   * The name of the generated file. The default is `"manifest"` with the extension suffix
   * corresponding to the `Manifest.type`.
   * @param fileName fileName or {@code null} for none
   */
  public Manifest setFileName(java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Required. List of user given `MuxStream.key`s that should appear in this manifest. When
   * `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is
   * generated for each element of the `Manifest.mux_streams`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMuxStreams() {
    return muxStreams;
  }

  /**
   * Required. List of user given `MuxStream.key`s that should appear in this manifest. When
   * `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is
   * generated for each element of the `Manifest.mux_streams`.
   * @param muxStreams muxStreams or {@code null} for none
   */
  public Manifest setMuxStreams(java.util.List<java.lang.String> muxStreams) {
    this.muxStreams = muxStreams;
    return this;
  }

  /**
   * Required. Type of the manifest, can be "HLS" or "DASH".
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Required. Type of the manifest, can be "HLS" or "DASH".
   * @param type type or {@code null} for none
   */
  public Manifest setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public Manifest set(String fieldName, Object value) {
    return (Manifest) super.set(fieldName, value);
  }

  @Override
  public Manifest clone() {
    return (Manifest) super.clone();
  }

}
