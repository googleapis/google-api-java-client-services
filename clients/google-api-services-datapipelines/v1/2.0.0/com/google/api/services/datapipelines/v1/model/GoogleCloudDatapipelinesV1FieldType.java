/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datapipelines.v1.model;

/**
 * Type info about a field.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Data pipelines API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDatapipelinesV1FieldType extends com.google.api.client.json.GenericJson {

  /**
   * If `type` is an array or iterable, this is the type contained in that array or iterable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatapipelinesV1FieldType collectionElementType;

  /**
   * If `type` is a logical type, this is the info for the specific logical type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatapipelinesV1LogicalType logicalType;

  /**
   * If `type` is a map, this is the key and value types for that map.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatapipelinesV1MapType mapType;

  /**
   * Whether or not this field is nullable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean nullable;

  /**
   * If `type` is a row, this is the schema of that row.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatapipelinesV1Schema rowSchema;

  /**
   * Specific type of the field. For non-atomic types, the corresponding type info for that non-
   * atomic must be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * If `type` is an array or iterable, this is the type contained in that array or iterable.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType getCollectionElementType() {
    return collectionElementType;
  }

  /**
   * If `type` is an array or iterable, this is the type contained in that array or iterable.
   * @param collectionElementType collectionElementType or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setCollectionElementType(GoogleCloudDatapipelinesV1FieldType collectionElementType) {
    this.collectionElementType = collectionElementType;
    return this;
  }

  /**
   * If `type` is a logical type, this is the info for the specific logical type.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1LogicalType getLogicalType() {
    return logicalType;
  }

  /**
   * If `type` is a logical type, this is the info for the specific logical type.
   * @param logicalType logicalType or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setLogicalType(GoogleCloudDatapipelinesV1LogicalType logicalType) {
    this.logicalType = logicalType;
    return this;
  }

  /**
   * If `type` is a map, this is the key and value types for that map.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1MapType getMapType() {
    return mapType;
  }

  /**
   * If `type` is a map, this is the key and value types for that map.
   * @param mapType mapType or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setMapType(GoogleCloudDatapipelinesV1MapType mapType) {
    this.mapType = mapType;
    return this;
  }

  /**
   * Whether or not this field is nullable.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNullable() {
    return nullable;
  }

  /**
   * Whether or not this field is nullable.
   * @param nullable nullable or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setNullable(java.lang.Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

  /**
   * If `type` is a row, this is the schema of that row.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1Schema getRowSchema() {
    return rowSchema;
  }

  /**
   * If `type` is a row, this is the schema of that row.
   * @param rowSchema rowSchema or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setRowSchema(GoogleCloudDatapipelinesV1Schema rowSchema) {
    this.rowSchema = rowSchema;
    return this;
  }

  /**
   * Specific type of the field. For non-atomic types, the corresponding type info for that non-
   * atomic must be set.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Specific type of the field. For non-atomic types, the corresponding type info for that non-
   * atomic must be set.
   * @param type type or {@code null} for none
   */
  public GoogleCloudDatapipelinesV1FieldType setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GoogleCloudDatapipelinesV1FieldType set(String fieldName, Object value) {
    return (GoogleCloudDatapipelinesV1FieldType) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDatapipelinesV1FieldType clone() {
    return (GoogleCloudDatapipelinesV1FieldType) super.clone();
  }

}
