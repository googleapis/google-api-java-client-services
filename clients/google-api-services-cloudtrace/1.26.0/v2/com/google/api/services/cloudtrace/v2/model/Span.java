/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudtrace.v2.model;

/**
 * A span represents a single operation within a trace. Spans can be nested to form a trace tree.
 * Often, a trace contains a root span that describes the end-to-end latency, and one or more
 * subspans for its sub-operations. A trace can also contain multiple root spans, or none at all.
 * Spans do not need to be contiguousthere may be gaps or overlaps between spans in a trace.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Stackdriver Trace API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Span extends com.google.api.client.json.GenericJson {

  /**
   * A set of attributes on the span. You can have up to 32 attributes per span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Attributes attributes;

  /**
   * An optional number of child spans that were generated while this span was active. If set,
   * allows implementation to detect missing child spans.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer childSpanCount;

  /**
   * A description of the span's operation (up to 128 bytes). Stackdriver Trace displays the
   * description in the Google Cloud Platform Console. For example, the display name can be a
   * qualified method name or a file name and a line number where the operation is called. A best
   * practice is to use the same display name within an application and at the same call point. This
   * makes it easier to correlate spans in different traces.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TruncatableString displayName;

  /**
   * The end time of the span. On the client side, this is the time kept by the local machine where
   * the span execution ends. On the server side, this is the time when the server application
   * handler stops running.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * Links associated with the span. You can have up to 128 links per Span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Links links;

  /**
   * The resource name of the span in the following format:
   *
   *     projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace
   * within a project; it is a 32-character hexadecimal encoding of a 16-byte array.
   *
   * [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal
   * encoding of an 8-byte array.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be
   * empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parentSpanId;

  /**
   * (Optional) Set this parameter to indicate whether this span is in the same process as its
   * parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this
   * helpful information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sameProcessAsParentSpan;

  /**
   * The [SPAN_ID] portion of the span's resource name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spanId;

  /**
   * Stack trace captured at the start of the span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StackTrace stackTrace;

  /**
   * The start time of the span. On the client side, this is the time kept by the local machine
   * where the span execution starts. On the server side, this is the time when the server's
   * application handler starts running.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * An optional final status for this span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status status;

  /**
   * A set of time events. You can have up to 32 annotations and 128 message events per span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeEvents timeEvents;

  /**
   * A set of attributes on the span. You can have up to 32 attributes per span.
   * @return value or {@code null} for none
   */
  public Attributes getAttributes() {
    return attributes;
  }

  /**
   * A set of attributes on the span. You can have up to 32 attributes per span.
   * @param attributes attributes or {@code null} for none
   */
  public Span setAttributes(Attributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * An optional number of child spans that were generated while this span was active. If set,
   * allows implementation to detect missing child spans.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getChildSpanCount() {
    return childSpanCount;
  }

  /**
   * An optional number of child spans that were generated while this span was active. If set,
   * allows implementation to detect missing child spans.
   * @param childSpanCount childSpanCount or {@code null} for none
   */
  public Span setChildSpanCount(java.lang.Integer childSpanCount) {
    this.childSpanCount = childSpanCount;
    return this;
  }

  /**
   * A description of the span's operation (up to 128 bytes). Stackdriver Trace displays the
   * description in the Google Cloud Platform Console. For example, the display name can be a
   * qualified method name or a file name and a line number where the operation is called. A best
   * practice is to use the same display name within an application and at the same call point. This
   * makes it easier to correlate spans in different traces.
   * @return value or {@code null} for none
   */
  public TruncatableString getDisplayName() {
    return displayName;
  }

  /**
   * A description of the span's operation (up to 128 bytes). Stackdriver Trace displays the
   * description in the Google Cloud Platform Console. For example, the display name can be a
   * qualified method name or a file name and a line number where the operation is called. A best
   * practice is to use the same display name within an application and at the same call point. This
   * makes it easier to correlate spans in different traces.
   * @param displayName displayName or {@code null} for none
   */
  public Span setDisplayName(TruncatableString displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The end time of the span. On the client side, this is the time kept by the local machine where
   * the span execution ends. On the server side, this is the time when the server application
   * handler stops running.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * The end time of the span. On the client side, this is the time kept by the local machine where
   * the span execution ends. On the server side, this is the time when the server application
   * handler stops running.
   * @param endTime endTime or {@code null} for none
   */
  public Span setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Links associated with the span. You can have up to 128 links per Span.
   * @return value or {@code null} for none
   */
  public Links getLinks() {
    return links;
  }

  /**
   * Links associated with the span. You can have up to 128 links per Span.
   * @param links links or {@code null} for none
   */
  public Span setLinks(Links links) {
    this.links = links;
    return this;
  }

  /**
   * The resource name of the span in the following format:
   *
   *     projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace
   * within a project; it is a 32-character hexadecimal encoding of a 16-byte array.
   *
   * [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal
   * encoding of an 8-byte array.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the span in the following format:
   *
   *     projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace
   * within a project; it is a 32-character hexadecimal encoding of a 16-byte array.
   *
   * [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal
   * encoding of an 8-byte array.
   * @param name name or {@code null} for none
   */
  public Span setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be
   * empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getParentSpanId() {
    return parentSpanId;
  }

  /**
   * The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be
   * empty.
   * @param parentSpanId parentSpanId or {@code null} for none
   */
  public Span setParentSpanId(java.lang.String parentSpanId) {
    this.parentSpanId = parentSpanId;
    return this;
  }

  /**
   * (Optional) Set this parameter to indicate whether this span is in the same process as its
   * parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this
   * helpful information.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSameProcessAsParentSpan() {
    return sameProcessAsParentSpan;
  }

  /**
   * (Optional) Set this parameter to indicate whether this span is in the same process as its
   * parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this
   * helpful information.
   * @param sameProcessAsParentSpan sameProcessAsParentSpan or {@code null} for none
   */
  public Span setSameProcessAsParentSpan(java.lang.Boolean sameProcessAsParentSpan) {
    this.sameProcessAsParentSpan = sameProcessAsParentSpan;
    return this;
  }

  /**
   * The [SPAN_ID] portion of the span's resource name.
   * @return value or {@code null} for none
   */
  public java.lang.String getSpanId() {
    return spanId;
  }

  /**
   * The [SPAN_ID] portion of the span's resource name.
   * @param spanId spanId or {@code null} for none
   */
  public Span setSpanId(java.lang.String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * Stack trace captured at the start of the span.
   * @return value or {@code null} for none
   */
  public StackTrace getStackTrace() {
    return stackTrace;
  }

  /**
   * Stack trace captured at the start of the span.
   * @param stackTrace stackTrace or {@code null} for none
   */
  public Span setStackTrace(StackTrace stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  /**
   * The start time of the span. On the client side, this is the time kept by the local machine
   * where the span execution starts. On the server side, this is the time when the server's
   * application handler starts running.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * The start time of the span. On the client side, this is the time kept by the local machine
   * where the span execution starts. On the server side, this is the time when the server's
   * application handler starts running.
   * @param startTime startTime or {@code null} for none
   */
  public Span setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * An optional final status for this span.
   * @return value or {@code null} for none
   */
  public Status getStatus() {
    return status;
  }

  /**
   * An optional final status for this span.
   * @param status status or {@code null} for none
   */
  public Span setStatus(Status status) {
    this.status = status;
    return this;
  }

  /**
   * A set of time events. You can have up to 32 annotations and 128 message events per span.
   * @return value or {@code null} for none
   */
  public TimeEvents getTimeEvents() {
    return timeEvents;
  }

  /**
   * A set of time events. You can have up to 32 annotations and 128 message events per span.
   * @param timeEvents timeEvents or {@code null} for none
   */
  public Span setTimeEvents(TimeEvents timeEvents) {
    this.timeEvents = timeEvents;
    return this;
  }

  @Override
  public Span set(String fieldName, Object value) {
    return (Span) super.set(fieldName, value);
  }

  @Override
  public Span clone() {
    return (Span) super.clone();
  }

}
