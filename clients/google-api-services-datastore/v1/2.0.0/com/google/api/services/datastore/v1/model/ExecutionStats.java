/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1.model;

/**
 * Execution statistics for the query.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExecutionStats extends com.google.api.client.json.GenericJson {

  /**
   * Debugging statistics from the execution of the query. Note that the debugging stats are subject
   * to change as Firestore evolves. It could include: { "indexes_entries_scanned": "1000",
   * "documents_scanned": "20", "billing_details" : { "documents_billable": "20",
   * "index_entries_billable": "1000", "min_query_cost": "0" } }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> debugStats;

  /**
   * Total time to execute the query in the backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String executionDuration;

  /**
   * Total billable read operations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long readOperations;

  /**
   * Total number of results returned, including documents, projections, aggregation results, keys.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long resultsReturned;

  /**
   * Debugging statistics from the execution of the query. Note that the debugging stats are subject
   * to change as Firestore evolves. It could include: { "indexes_entries_scanned": "1000",
   * "documents_scanned": "20", "billing_details" : { "documents_billable": "20",
   * "index_entries_billable": "1000", "min_query_cost": "0" } }
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getDebugStats() {
    return debugStats;
  }

  /**
   * Debugging statistics from the execution of the query. Note that the debugging stats are subject
   * to change as Firestore evolves. It could include: { "indexes_entries_scanned": "1000",
   * "documents_scanned": "20", "billing_details" : { "documents_billable": "20",
   * "index_entries_billable": "1000", "min_query_cost": "0" } }
   * @param debugStats debugStats or {@code null} for none
   */
  public ExecutionStats setDebugStats(java.util.Map<String, java.lang.Object> debugStats) {
    this.debugStats = debugStats;
    return this;
  }

  /**
   * Total time to execute the query in the backend.
   * @return value or {@code null} for none
   */
  public String getExecutionDuration() {
    return executionDuration;
  }

  /**
   * Total time to execute the query in the backend.
   * @param executionDuration executionDuration or {@code null} for none
   */
  public ExecutionStats setExecutionDuration(String executionDuration) {
    this.executionDuration = executionDuration;
    return this;
  }

  /**
   * Total billable read operations.
   * @return value or {@code null} for none
   */
  public java.lang.Long getReadOperations() {
    return readOperations;
  }

  /**
   * Total billable read operations.
   * @param readOperations readOperations or {@code null} for none
   */
  public ExecutionStats setReadOperations(java.lang.Long readOperations) {
    this.readOperations = readOperations;
    return this;
  }

  /**
   * Total number of results returned, including documents, projections, aggregation results, keys.
   * @return value or {@code null} for none
   */
  public java.lang.Long getResultsReturned() {
    return resultsReturned;
  }

  /**
   * Total number of results returned, including documents, projections, aggregation results, keys.
   * @param resultsReturned resultsReturned or {@code null} for none
   */
  public ExecutionStats setResultsReturned(java.lang.Long resultsReturned) {
    this.resultsReturned = resultsReturned;
    return this;
  }

  @Override
  public ExecutionStats set(String fieldName, Object value) {
    return (ExecutionStats) super.set(fieldName, value);
  }

  @Override
  public ExecutionStats clone() {
    return (ExecutionStats) super.clone();
  }

}
