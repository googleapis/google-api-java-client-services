/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.recaptchaenterprise.v1.model;

/**
 * Describes an event in the lifecycle of a payment transaction.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the reCAPTCHA Enterprise API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRecaptchaenterpriseV1TransactionEvent extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of
   * the API call.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String eventTime;

  /**
   * Optional. The type of this transaction event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventType;

  /**
   * Optional. The reason or standardized code which corresponds with this transaction event, if one
   * exists. E.g. a CHARGEBACK Event with code 4553.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reason;

  /**
   * Optional. The value that corresponds with this transaction event, if one exists. E.g. A refund
   * event where $5.00 was refunded. Currency is obtained from the original transaction data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double value;

  /**
   * Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of
   * the API call.
   * @return value or {@code null} for none
   */
  public String getEventTime() {
    return eventTime;
  }

  /**
   * Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of
   * the API call.
   * @param eventTime eventTime or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent setEventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Optional. The type of this transaction event.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Optional. The type of this transaction event.
   * @param eventType eventType or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent setEventType(java.lang.String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Optional. The reason or standardized code which corresponds with this transaction event, if one
   * exists. E.g. a CHARGEBACK Event with code 4553.
   * @return value or {@code null} for none
   */
  public java.lang.String getReason() {
    return reason;
  }

  /**
   * Optional. The reason or standardized code which corresponds with this transaction event, if one
   * exists. E.g. a CHARGEBACK Event with code 4553.
   * @param reason reason or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent setReason(java.lang.String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Optional. The value that corresponds with this transaction event, if one exists. E.g. A refund
   * event where $5.00 was refunded. Currency is obtained from the original transaction data.
   * @return value or {@code null} for none
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Optional. The value that corresponds with this transaction event, if one exists. E.g. A refund
   * event where $5.00 was refunded. Currency is obtained from the original transaction data.
   * @param value value or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent setValue(java.lang.Double value) {
    this.value = value;
    return this;
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent set(String fieldName, Object value) {
    return (GoogleCloudRecaptchaenterpriseV1TransactionEvent) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent clone() {
    return (GoogleCloudRecaptchaenterpriseV1TransactionEvent) super.clone();
  }

}
