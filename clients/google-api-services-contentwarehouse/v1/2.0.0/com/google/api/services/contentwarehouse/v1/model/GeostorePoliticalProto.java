/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protocol buffer is included from feature.proto as an optional message. Political features
 * represent the different ways that people are divided into geographical regions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostorePoliticalProto extends com.google.api.client.json.GenericJson {

  /**
   * Many political regions have a conceptual center (capitals of a country or a top-level division
   * are examples). If set, the target feature must be a TYPE_LOCALITY feature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto capital;

  /**
   * The Gross Domestic Product of the political region measured in millions of current United
   * States dollars. It must not be negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double grossDomesticProductUsdMillions;

  /**
   * Percentage of population that are literate within a political region. It must be between 0 and
   * 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float literacyPercent;

  /**
   * The number of people in this political region. This field is intended to store accurate
   * population, not an estimation such as representative value for population range. It must not be
   * negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long population;

  /**
   * Many political regions have a conceptual center (capitals of a country or a top-level division
   * are examples). If set, the target feature must be a TYPE_LOCALITY feature.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getCapital() {
    return capital;
  }

  /**
   * Many political regions have a conceptual center (capitals of a country or a top-level division
   * are examples). If set, the target feature must be a TYPE_LOCALITY feature.
   * @param capital capital or {@code null} for none
   */
  public GeostorePoliticalProto setCapital(GeostoreFeatureIdProto capital) {
    this.capital = capital;
    return this;
  }

  /**
   * The Gross Domestic Product of the political region measured in millions of current United
   * States dollars. It must not be negative.
   * @return value or {@code null} for none
   */
  public java.lang.Double getGrossDomesticProductUsdMillions() {
    return grossDomesticProductUsdMillions;
  }

  /**
   * The Gross Domestic Product of the political region measured in millions of current United
   * States dollars. It must not be negative.
   * @param grossDomesticProductUsdMillions grossDomesticProductUsdMillions or {@code null} for none
   */
  public GeostorePoliticalProto setGrossDomesticProductUsdMillions(java.lang.Double grossDomesticProductUsdMillions) {
    this.grossDomesticProductUsdMillions = grossDomesticProductUsdMillions;
    return this;
  }

  /**
   * Percentage of population that are literate within a political region. It must be between 0 and
   * 100.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLiteracyPercent() {
    return literacyPercent;
  }

  /**
   * Percentage of population that are literate within a political region. It must be between 0 and
   * 100.
   * @param literacyPercent literacyPercent or {@code null} for none
   */
  public GeostorePoliticalProto setLiteracyPercent(java.lang.Float literacyPercent) {
    this.literacyPercent = literacyPercent;
    return this;
  }

  /**
   * The number of people in this political region. This field is intended to store accurate
   * population, not an estimation such as representative value for population range. It must not be
   * negative.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPopulation() {
    return population;
  }

  /**
   * The number of people in this political region. This field is intended to store accurate
   * population, not an estimation such as representative value for population range. It must not be
   * negative.
   * @param population population or {@code null} for none
   */
  public GeostorePoliticalProto setPopulation(java.lang.Long population) {
    this.population = population;
    return this;
  }

  @Override
  public GeostorePoliticalProto set(String fieldName, Object value) {
    return (GeostorePoliticalProto) super.set(fieldName, value);
  }

  @Override
  public GeostorePoliticalProto clone() {
    return (GeostorePoliticalProto) super.clone();
  }

}
