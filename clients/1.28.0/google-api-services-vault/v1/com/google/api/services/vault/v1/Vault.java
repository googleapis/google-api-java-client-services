/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vault.v1;

/**
 * Service definition for Vault (v1).
 *
 * <p>
 * Archiving and eDiscovery for G Suite.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/vault" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link VaultRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Vault extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the G Suite Vault API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://vault.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Vault(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Vault(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Matters collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Vault vault = new Vault(...);}
   *   {@code Vault.Matters.List request = vault.matters().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Matters matters() {
    return new Matters();
  }

  /**
   * The "matters" collection of methods.
   */
  public class Matters {

    /**
     * Adds an account as a matter collaborator.
     *
     * Create a request for the method "matters.addPermissions".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link AddPermissions#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.AddMatterPermissionsRequest}
     * @return the request
     */
    public AddPermissions addPermissions(java.lang.String matterId, com.google.api.services.vault.v1.model.AddMatterPermissionsRequest content) throws java.io.IOException {
      AddPermissions result = new AddPermissions(matterId, content);
      initialize(result);
      return result;
    }

    public class AddPermissions extends VaultRequest<com.google.api.services.vault.v1.model.MatterPermission> {

      private static final String REST_PATH = "v1/matters/{matterId}:addPermissions";

      /**
       * Adds an account as a matter collaborator.
       *
       * Create a request for the method "matters.addPermissions".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link AddPermissions#execute()} method to invoke the remote operation.
       * <p> {@link AddPermissions#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.AddMatterPermissionsRequest}
       * @since 1.13
       */
      protected AddPermissions(java.lang.String matterId, com.google.api.services.vault.v1.model.AddMatterPermissionsRequest content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.MatterPermission.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public AddPermissions set$Xgafv(java.lang.String $Xgafv) {
        return (AddPermissions) super.set$Xgafv($Xgafv);
      }

      @Override
      public AddPermissions setAccessToken(java.lang.String accessToken) {
        return (AddPermissions) super.setAccessToken(accessToken);
      }

      @Override
      public AddPermissions setAlt(java.lang.String alt) {
        return (AddPermissions) super.setAlt(alt);
      }

      @Override
      public AddPermissions setCallback(java.lang.String callback) {
        return (AddPermissions) super.setCallback(callback);
      }

      @Override
      public AddPermissions setFields(java.lang.String fields) {
        return (AddPermissions) super.setFields(fields);
      }

      @Override
      public AddPermissions setKey(java.lang.String key) {
        return (AddPermissions) super.setKey(key);
      }

      @Override
      public AddPermissions setOauthToken(java.lang.String oauthToken) {
        return (AddPermissions) super.setOauthToken(oauthToken);
      }

      @Override
      public AddPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddPermissions) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddPermissions setQuotaUser(java.lang.String quotaUser) {
        return (AddPermissions) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddPermissions setUploadType(java.lang.String uploadType) {
        return (AddPermissions) super.setUploadType(uploadType);
      }

      @Override
      public AddPermissions setUploadProtocol(java.lang.String uploadProtocol) {
        return (AddPermissions) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public AddPermissions setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public AddPermissions set(String parameterName, Object value) {
        return (AddPermissions) super.set(parameterName, value);
      }
    }
    /**
     * Closes the specified matter. Returns matter with updated state.
     *
     * Create a request for the method "matters.close".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Close#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.CloseMatterRequest}
     * @return the request
     */
    public Close close(java.lang.String matterId, com.google.api.services.vault.v1.model.CloseMatterRequest content) throws java.io.IOException {
      Close result = new Close(matterId, content);
      initialize(result);
      return result;
    }

    public class Close extends VaultRequest<com.google.api.services.vault.v1.model.CloseMatterResponse> {

      private static final String REST_PATH = "v1/matters/{matterId}:close";

      /**
       * Closes the specified matter. Returns matter with updated state.
       *
       * Create a request for the method "matters.close".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Close#execute()} method to invoke the remote operation. <p> {@link
       * Close#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.CloseMatterRequest}
       * @since 1.13
       */
      protected Close(java.lang.String matterId, com.google.api.services.vault.v1.model.CloseMatterRequest content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.CloseMatterResponse.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public Close set$Xgafv(java.lang.String $Xgafv) {
        return (Close) super.set$Xgafv($Xgafv);
      }

      @Override
      public Close setAccessToken(java.lang.String accessToken) {
        return (Close) super.setAccessToken(accessToken);
      }

      @Override
      public Close setAlt(java.lang.String alt) {
        return (Close) super.setAlt(alt);
      }

      @Override
      public Close setCallback(java.lang.String callback) {
        return (Close) super.setCallback(callback);
      }

      @Override
      public Close setFields(java.lang.String fields) {
        return (Close) super.setFields(fields);
      }

      @Override
      public Close setKey(java.lang.String key) {
        return (Close) super.setKey(key);
      }

      @Override
      public Close setOauthToken(java.lang.String oauthToken) {
        return (Close) super.setOauthToken(oauthToken);
      }

      @Override
      public Close setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Close) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Close setQuotaUser(java.lang.String quotaUser) {
        return (Close) super.setQuotaUser(quotaUser);
      }

      @Override
      public Close setUploadType(java.lang.String uploadType) {
        return (Close) super.setUploadType(uploadType);
      }

      @Override
      public Close setUploadProtocol(java.lang.String uploadProtocol) {
        return (Close) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public Close setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public Close set(String parameterName, Object value) {
        return (Close) super.set(parameterName, value);
      }
    }
    /**
     * Creates a new matter with the given name and description. The initial state is open, and the
     * owner is the method caller. Returns the created matter with default view.
     *
     * Create a request for the method "matters.create".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.vault.v1.model.Matter}
     * @return the request
     */
    public Create create(com.google.api.services.vault.v1.model.Matter content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends VaultRequest<com.google.api.services.vault.v1.model.Matter> {

      private static final String REST_PATH = "v1/matters";

      /**
       * Creates a new matter with the given name and description. The initial state is open, and the
       * owner is the method caller. Returns the created matter with default view.
       *
       * Create a request for the method "matters.create".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.vault.v1.model.Matter}
       * @since 1.13
       */
      protected Create(com.google.api.services.vault.v1.model.Matter content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.Matter.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes the specified matter. Returns matter with updated state.
     *
     * Create a request for the method "matters.delete".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID
     * @return the request
     */
    public Delete delete(java.lang.String matterId) throws java.io.IOException {
      Delete result = new Delete(matterId);
      initialize(result);
      return result;
    }

    public class Delete extends VaultRequest<com.google.api.services.vault.v1.model.Matter> {

      private static final String REST_PATH = "v1/matters/{matterId}";

      /**
       * Deletes the specified matter. Returns matter with updated state.
       *
       * Create a request for the method "matters.delete".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID
       * @since 1.13
       */
      protected Delete(java.lang.String matterId) {
        super(Vault.this, "DELETE", REST_PATH, null, com.google.api.services.vault.v1.model.Matter.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID */
      public Delete setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets the specified matter.
     *
     * Create a request for the method "matters.get".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @return the request
     */
    public Get get(java.lang.String matterId) throws java.io.IOException {
      Get result = new Get(matterId);
      initialize(result);
      return result;
    }

    public class Get extends VaultRequest<com.google.api.services.vault.v1.model.Matter> {

      private static final String REST_PATH = "v1/matters/{matterId}";

      /**
       * Gets the specified matter.
       *
       * Create a request for the method "matters.get".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID.
       * @since 1.13
       */
      protected Get(java.lang.String matterId) {
        super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.Matter.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public Get setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      /** Specifies which parts of the Matter to return in the response. */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Specifies which parts of the Matter to return in the response.
       */
      public java.lang.String getView() {
        return view;
      }

      /** Specifies which parts of the Matter to return in the response. */
      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists matters the user has access to.
     *
     * Create a request for the method "matters.list".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends VaultRequest<com.google.api.services.vault.v1.model.ListMattersResponse> {

      private static final String REST_PATH = "v1/matters";

      /**
       * Lists matters the user has access to.
       *
       * Create a request for the method "matters.list".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.ListMattersResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The number of matters to return in the response. Default and maximum are 100.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The number of matters to return in the response. Default and maximum are 100.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The number of matters to return in the response. Default and maximum are 100.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /** The pagination token as returned in the response. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The pagination token as returned in the response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The pagination token as returned in the response. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * If set, list only matters with that specific state. The default is listing matters of all
       * states.
       */
      @com.google.api.client.util.Key
      private java.lang.String state;

      /** If set, list only matters with that specific state. The default is listing matters of all states.
       */
      public java.lang.String getState() {
        return state;
      }

      /**
       * If set, list only matters with that specific state. The default is listing matters of all
       * states.
       */
      public List setState(java.lang.String state) {
        this.state = state;
        return this;
      }

      /** Specifies which parts of the matter to return in response. */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Specifies which parts of the matter to return in response.
       */
      public java.lang.String getView() {
        return view;
      }

      /** Specifies which parts of the matter to return in response. */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Removes an account as a matter collaborator.
     *
     * Create a request for the method "matters.removePermissions".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link RemovePermissions#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.RemoveMatterPermissionsRequest}
     * @return the request
     */
    public RemovePermissions removePermissions(java.lang.String matterId, com.google.api.services.vault.v1.model.RemoveMatterPermissionsRequest content) throws java.io.IOException {
      RemovePermissions result = new RemovePermissions(matterId, content);
      initialize(result);
      return result;
    }

    public class RemovePermissions extends VaultRequest<com.google.api.services.vault.v1.model.Empty> {

      private static final String REST_PATH = "v1/matters/{matterId}:removePermissions";

      /**
       * Removes an account as a matter collaborator.
       *
       * Create a request for the method "matters.removePermissions".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link RemovePermissions#execute()} method to invoke the remote operation.
       * <p> {@link RemovePermissions#initialize(com.google.api.client.googleapis.services.AbstractGoogl
       * eClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.RemoveMatterPermissionsRequest}
       * @since 1.13
       */
      protected RemovePermissions(java.lang.String matterId, com.google.api.services.vault.v1.model.RemoveMatterPermissionsRequest content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.Empty.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public RemovePermissions set$Xgafv(java.lang.String $Xgafv) {
        return (RemovePermissions) super.set$Xgafv($Xgafv);
      }

      @Override
      public RemovePermissions setAccessToken(java.lang.String accessToken) {
        return (RemovePermissions) super.setAccessToken(accessToken);
      }

      @Override
      public RemovePermissions setAlt(java.lang.String alt) {
        return (RemovePermissions) super.setAlt(alt);
      }

      @Override
      public RemovePermissions setCallback(java.lang.String callback) {
        return (RemovePermissions) super.setCallback(callback);
      }

      @Override
      public RemovePermissions setFields(java.lang.String fields) {
        return (RemovePermissions) super.setFields(fields);
      }

      @Override
      public RemovePermissions setKey(java.lang.String key) {
        return (RemovePermissions) super.setKey(key);
      }

      @Override
      public RemovePermissions setOauthToken(java.lang.String oauthToken) {
        return (RemovePermissions) super.setOauthToken(oauthToken);
      }

      @Override
      public RemovePermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemovePermissions) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemovePermissions setQuotaUser(java.lang.String quotaUser) {
        return (RemovePermissions) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemovePermissions setUploadType(java.lang.String uploadType) {
        return (RemovePermissions) super.setUploadType(uploadType);
      }

      @Override
      public RemovePermissions setUploadProtocol(java.lang.String uploadProtocol) {
        return (RemovePermissions) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public RemovePermissions setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public RemovePermissions set(String parameterName, Object value) {
        return (RemovePermissions) super.set(parameterName, value);
      }
    }
    /**
     * Reopens the specified matter. Returns matter with updated state.
     *
     * Create a request for the method "matters.reopen".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Reopen#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.ReopenMatterRequest}
     * @return the request
     */
    public Reopen reopen(java.lang.String matterId, com.google.api.services.vault.v1.model.ReopenMatterRequest content) throws java.io.IOException {
      Reopen result = new Reopen(matterId, content);
      initialize(result);
      return result;
    }

    public class Reopen extends VaultRequest<com.google.api.services.vault.v1.model.ReopenMatterResponse> {

      private static final String REST_PATH = "v1/matters/{matterId}:reopen";

      /**
       * Reopens the specified matter. Returns matter with updated state.
       *
       * Create a request for the method "matters.reopen".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Reopen#execute()} method to invoke the remote operation. <p> {@link
       * Reopen#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.ReopenMatterRequest}
       * @since 1.13
       */
      protected Reopen(java.lang.String matterId, com.google.api.services.vault.v1.model.ReopenMatterRequest content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.ReopenMatterResponse.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public Reopen set$Xgafv(java.lang.String $Xgafv) {
        return (Reopen) super.set$Xgafv($Xgafv);
      }

      @Override
      public Reopen setAccessToken(java.lang.String accessToken) {
        return (Reopen) super.setAccessToken(accessToken);
      }

      @Override
      public Reopen setAlt(java.lang.String alt) {
        return (Reopen) super.setAlt(alt);
      }

      @Override
      public Reopen setCallback(java.lang.String callback) {
        return (Reopen) super.setCallback(callback);
      }

      @Override
      public Reopen setFields(java.lang.String fields) {
        return (Reopen) super.setFields(fields);
      }

      @Override
      public Reopen setKey(java.lang.String key) {
        return (Reopen) super.setKey(key);
      }

      @Override
      public Reopen setOauthToken(java.lang.String oauthToken) {
        return (Reopen) super.setOauthToken(oauthToken);
      }

      @Override
      public Reopen setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Reopen) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Reopen setQuotaUser(java.lang.String quotaUser) {
        return (Reopen) super.setQuotaUser(quotaUser);
      }

      @Override
      public Reopen setUploadType(java.lang.String uploadType) {
        return (Reopen) super.setUploadType(uploadType);
      }

      @Override
      public Reopen setUploadProtocol(java.lang.String uploadProtocol) {
        return (Reopen) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public Reopen setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public Reopen set(String parameterName, Object value) {
        return (Reopen) super.set(parameterName, value);
      }
    }
    /**
     * Undeletes the specified matter. Returns matter with updated state.
     *
     * Create a request for the method "matters.undelete".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Undelete#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.UndeleteMatterRequest}
     * @return the request
     */
    public Undelete undelete(java.lang.String matterId, com.google.api.services.vault.v1.model.UndeleteMatterRequest content) throws java.io.IOException {
      Undelete result = new Undelete(matterId, content);
      initialize(result);
      return result;
    }

    public class Undelete extends VaultRequest<com.google.api.services.vault.v1.model.Matter> {

      private static final String REST_PATH = "v1/matters/{matterId}:undelete";

      /**
       * Undeletes the specified matter. Returns matter with updated state.
       *
       * Create a request for the method "matters.undelete".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Undelete#execute()} method to invoke the remote operation. <p>
       * {@link
       * Undelete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.UndeleteMatterRequest}
       * @since 1.13
       */
      protected Undelete(java.lang.String matterId, com.google.api.services.vault.v1.model.UndeleteMatterRequest content) {
        super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.Matter.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public Undelete set$Xgafv(java.lang.String $Xgafv) {
        return (Undelete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Undelete setAccessToken(java.lang.String accessToken) {
        return (Undelete) super.setAccessToken(accessToken);
      }

      @Override
      public Undelete setAlt(java.lang.String alt) {
        return (Undelete) super.setAlt(alt);
      }

      @Override
      public Undelete setCallback(java.lang.String callback) {
        return (Undelete) super.setCallback(callback);
      }

      @Override
      public Undelete setFields(java.lang.String fields) {
        return (Undelete) super.setFields(fields);
      }

      @Override
      public Undelete setKey(java.lang.String key) {
        return (Undelete) super.setKey(key);
      }

      @Override
      public Undelete setOauthToken(java.lang.String oauthToken) {
        return (Undelete) super.setOauthToken(oauthToken);
      }

      @Override
      public Undelete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Undelete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Undelete setQuotaUser(java.lang.String quotaUser) {
        return (Undelete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Undelete setUploadType(java.lang.String uploadType) {
        return (Undelete) super.setUploadType(uploadType);
      }

      @Override
      public Undelete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Undelete) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public Undelete setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public Undelete set(String parameterName, Object value) {
        return (Undelete) super.set(parameterName, value);
      }
    }
    /**
     * Updates the specified matter. This updates only the name and description of the matter,
     * identified by matter id. Changes to any other fields are ignored. Returns the default view of the
     * matter.
     *
     * Create a request for the method "matters.update".
     *
     * This request holds the parameters needed by the vault server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param matterId The matter ID.
     * @param content the {@link com.google.api.services.vault.v1.model.Matter}
     * @return the request
     */
    public Update update(java.lang.String matterId, com.google.api.services.vault.v1.model.Matter content) throws java.io.IOException {
      Update result = new Update(matterId, content);
      initialize(result);
      return result;
    }

    public class Update extends VaultRequest<com.google.api.services.vault.v1.model.Matter> {

      private static final String REST_PATH = "v1/matters/{matterId}";

      /**
       * Updates the specified matter. This updates only the name and description of the matter,
       * identified by matter id. Changes to any other fields are ignored. Returns the default view of
       * the matter.
       *
       * Create a request for the method "matters.update".
       *
       * This request holds the parameters needed by the the vault server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.Matter}
       * @since 1.13
       */
      protected Update(java.lang.String matterId, com.google.api.services.vault.v1.model.Matter content) {
        super(Vault.this, "PUT", REST_PATH, content, com.google.api.services.vault.v1.model.Matter.class);
        this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /** The matter ID. */
      @com.google.api.client.util.Key
      private java.lang.String matterId;

      /** The matter ID.
       */
      public java.lang.String getMatterId() {
        return matterId;
      }

      /** The matter ID. */
      public Update setMatterId(java.lang.String matterId) {
        this.matterId = matterId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Exports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Vault vault = new Vault(...);}
     *   {@code Vault.Exports.List request = vault.exports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Exports exports() {
      return new Exports();
    }

    /**
     * The "exports" collection of methods.
     */
    public class Exports {

      /**
       * Creates an Export.
       *
       * Create a request for the method "exports.create".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.Export}
       * @return the request
       */
      public Create create(java.lang.String matterId, com.google.api.services.vault.v1.model.Export content) throws java.io.IOException {
        Create result = new Create(matterId, content);
        initialize(result);
        return result;
      }

      public class Create extends VaultRequest<com.google.api.services.vault.v1.model.Export> {

        private static final String REST_PATH = "v1/matters/{matterId}/exports";

        /**
         * Creates an Export.
         *
         * Create a request for the method "exports.create".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param content the {@link com.google.api.services.vault.v1.model.Export}
         * @since 1.13
         */
        protected Create(java.lang.String matterId, com.google.api.services.vault.v1.model.Export content) {
          super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.Export.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Create setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes an Export.
       *
       * Create a request for the method "exports.delete".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param exportId The export ID.
       * @return the request
       */
      public Delete delete(java.lang.String matterId, java.lang.String exportId) throws java.io.IOException {
        Delete result = new Delete(matterId, exportId);
        initialize(result);
        return result;
      }

      public class Delete extends VaultRequest<com.google.api.services.vault.v1.model.Empty> {

        private static final String REST_PATH = "v1/matters/{matterId}/exports/{exportId}";

        /**
         * Deletes an Export.
         *
         * Create a request for the method "exports.delete".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param exportId The export ID.
         * @since 1.13
         */
        protected Delete(java.lang.String matterId, java.lang.String exportId) {
          super(Vault.this, "DELETE", REST_PATH, null, com.google.api.services.vault.v1.model.Empty.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.exportId = com.google.api.client.util.Preconditions.checkNotNull(exportId, "Required parameter exportId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Delete setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The export ID. */
        @com.google.api.client.util.Key
        private java.lang.String exportId;

        /** The export ID.
         */
        public java.lang.String getExportId() {
          return exportId;
        }

        /** The export ID. */
        public Delete setExportId(java.lang.String exportId) {
          this.exportId = exportId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets an Export.
       *
       * Create a request for the method "exports.get".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param exportId The export ID.
       * @return the request
       */
      public Get get(java.lang.String matterId, java.lang.String exportId) throws java.io.IOException {
        Get result = new Get(matterId, exportId);
        initialize(result);
        return result;
      }

      public class Get extends VaultRequest<com.google.api.services.vault.v1.model.Export> {

        private static final String REST_PATH = "v1/matters/{matterId}/exports/{exportId}";

        /**
         * Gets an Export.
         *
         * Create a request for the method "exports.get".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param exportId The export ID.
         * @since 1.13
         */
        protected Get(java.lang.String matterId, java.lang.String exportId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.Export.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.exportId = com.google.api.client.util.Preconditions.checkNotNull(exportId, "Required parameter exportId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Get setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The export ID. */
        @com.google.api.client.util.Key
        private java.lang.String exportId;

        /** The export ID.
         */
        public java.lang.String getExportId() {
          return exportId;
        }

        /** The export ID. */
        public Get setExportId(java.lang.String exportId) {
          this.exportId = exportId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists Exports.
       *
       * Create a request for the method "exports.list".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @return the request
       */
      public List list(java.lang.String matterId) throws java.io.IOException {
        List result = new List(matterId);
        initialize(result);
        return result;
      }

      public class List extends VaultRequest<com.google.api.services.vault.v1.model.ListExportsResponse> {

        private static final String REST_PATH = "v1/matters/{matterId}/exports";

        /**
         * Lists Exports.
         *
         * Create a request for the method "exports.list".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @since 1.13
         */
        protected List(java.lang.String matterId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.ListExportsResponse.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public List setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The number of exports to return in the response. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The number of exports to return in the response.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The number of exports to return in the response. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The pagination token as returned in the response. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The pagination token as returned in the response.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The pagination token as returned in the response. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Holds collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Vault vault = new Vault(...);}
     *   {@code Vault.Holds.List request = vault.holds().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Holds holds() {
      return new Holds();
    }

    /**
     * The "holds" collection of methods.
     */
    public class Holds {

      /**
       * Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added.
       * Accounts can only be added to an existing account-based hold.
       *
       * Create a request for the method "holds.addHeldAccounts".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link AddHeldAccounts#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param holdId The hold ID.
       * @param content the {@link com.google.api.services.vault.v1.model.AddHeldAccountsRequest}
       * @return the request
       */
      public AddHeldAccounts addHeldAccounts(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.AddHeldAccountsRequest content) throws java.io.IOException {
        AddHeldAccounts result = new AddHeldAccounts(matterId, holdId, content);
        initialize(result);
        return result;
      }

      public class AddHeldAccounts extends VaultRequest<com.google.api.services.vault.v1.model.AddHeldAccountsResponse> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}:addHeldAccounts";

        /**
         * Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added.
         * Accounts can only be added to an existing account-based hold.
         *
         * Create a request for the method "holds.addHeldAccounts".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link AddHeldAccounts#execute()} method to invoke the remote operation.
         * <p> {@link AddHeldAccounts#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
         * lientRequest)} must be called to initialize this instance immediately after invoking the
         * constructor. </p>
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @param content the {@link com.google.api.services.vault.v1.model.AddHeldAccountsRequest}
         * @since 1.13
         */
        protected AddHeldAccounts(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.AddHeldAccountsRequest content) {
          super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.AddHeldAccountsResponse.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
        }

        @Override
        public AddHeldAccounts set$Xgafv(java.lang.String $Xgafv) {
          return (AddHeldAccounts) super.set$Xgafv($Xgafv);
        }

        @Override
        public AddHeldAccounts setAccessToken(java.lang.String accessToken) {
          return (AddHeldAccounts) super.setAccessToken(accessToken);
        }

        @Override
        public AddHeldAccounts setAlt(java.lang.String alt) {
          return (AddHeldAccounts) super.setAlt(alt);
        }

        @Override
        public AddHeldAccounts setCallback(java.lang.String callback) {
          return (AddHeldAccounts) super.setCallback(callback);
        }

        @Override
        public AddHeldAccounts setFields(java.lang.String fields) {
          return (AddHeldAccounts) super.setFields(fields);
        }

        @Override
        public AddHeldAccounts setKey(java.lang.String key) {
          return (AddHeldAccounts) super.setKey(key);
        }

        @Override
        public AddHeldAccounts setOauthToken(java.lang.String oauthToken) {
          return (AddHeldAccounts) super.setOauthToken(oauthToken);
        }

        @Override
        public AddHeldAccounts setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (AddHeldAccounts) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public AddHeldAccounts setQuotaUser(java.lang.String quotaUser) {
          return (AddHeldAccounts) super.setQuotaUser(quotaUser);
        }

        @Override
        public AddHeldAccounts setUploadType(java.lang.String uploadType) {
          return (AddHeldAccounts) super.setUploadType(uploadType);
        }

        @Override
        public AddHeldAccounts setUploadProtocol(java.lang.String uploadProtocol) {
          return (AddHeldAccounts) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public AddHeldAccounts setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The hold ID. */
        @com.google.api.client.util.Key
        private java.lang.String holdId;

        /** The hold ID.
         */
        public java.lang.String getHoldId() {
          return holdId;
        }

        /** The hold ID. */
        public AddHeldAccounts setHoldId(java.lang.String holdId) {
          this.holdId = holdId;
          return this;
        }

        @Override
        public AddHeldAccounts set(String parameterName, Object value) {
          return (AddHeldAccounts) super.set(parameterName, value);
        }
      }
      /**
       * Creates a hold in the given matter.
       *
       * Create a request for the method "holds.create".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param content the {@link com.google.api.services.vault.v1.model.Hold}
       * @return the request
       */
      public Create create(java.lang.String matterId, com.google.api.services.vault.v1.model.Hold content) throws java.io.IOException {
        Create result = new Create(matterId, content);
        initialize(result);
        return result;
      }

      public class Create extends VaultRequest<com.google.api.services.vault.v1.model.Hold> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds";

        /**
         * Creates a hold in the given matter.
         *
         * Create a request for the method "holds.create".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param content the {@link com.google.api.services.vault.v1.model.Hold}
         * @since 1.13
         */
        protected Create(java.lang.String matterId, com.google.api.services.vault.v1.model.Hold content) {
          super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.Hold.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Create setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Removes a hold by ID. This will release any HeldAccounts on this Hold.
       *
       * Create a request for the method "holds.delete".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param holdId The hold ID.
       * @return the request
       */
      public Delete delete(java.lang.String matterId, java.lang.String holdId) throws java.io.IOException {
        Delete result = new Delete(matterId, holdId);
        initialize(result);
        return result;
      }

      public class Delete extends VaultRequest<com.google.api.services.vault.v1.model.Empty> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}";

        /**
         * Removes a hold by ID. This will release any HeldAccounts on this Hold.
         *
         * Create a request for the method "holds.delete".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @since 1.13
         */
        protected Delete(java.lang.String matterId, java.lang.String holdId) {
          super(Vault.this, "DELETE", REST_PATH, null, com.google.api.services.vault.v1.model.Empty.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Delete setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The hold ID. */
        @com.google.api.client.util.Key
        private java.lang.String holdId;

        /** The hold ID.
         */
        public java.lang.String getHoldId() {
          return holdId;
        }

        /** The hold ID. */
        public Delete setHoldId(java.lang.String holdId) {
          this.holdId = holdId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets a hold by ID.
       *
       * Create a request for the method "holds.get".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param holdId The hold ID.
       * @return the request
       */
      public Get get(java.lang.String matterId, java.lang.String holdId) throws java.io.IOException {
        Get result = new Get(matterId, holdId);
        initialize(result);
        return result;
      }

      public class Get extends VaultRequest<com.google.api.services.vault.v1.model.Hold> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}";

        /**
         * Gets a hold by ID.
         *
         * Create a request for the method "holds.get".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @since 1.13
         */
        protected Get(java.lang.String matterId, java.lang.String holdId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.Hold.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Get setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The hold ID. */
        @com.google.api.client.util.Key
        private java.lang.String holdId;

        /** The hold ID.
         */
        public java.lang.String getHoldId() {
          return holdId;
        }

        /** The hold ID. */
        public Get setHoldId(java.lang.String holdId) {
          this.holdId = holdId;
          return this;
        }

        /** Specifies which parts of the Hold to return. */
        @com.google.api.client.util.Key
        private java.lang.String view;

        /** Specifies which parts of the Hold to return.
         */
        public java.lang.String getView() {
          return view;
        }

        /** Specifies which parts of the Hold to return. */
        public Get setView(java.lang.String view) {
          this.view = view;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to
       * list.
       *
       * Create a request for the method "holds.list".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @return the request
       */
      public List list(java.lang.String matterId) throws java.io.IOException {
        List result = new List(matterId);
        initialize(result);
        return result;
      }

      public class List extends VaultRequest<com.google.api.services.vault.v1.model.ListHoldsResponse> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds";

        /**
         * Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to
         * list.
         *
         * Create a request for the method "holds.list".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @since 1.13
         */
        protected List(java.lang.String matterId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.ListHoldsResponse.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public List setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /**
         * The number of holds to return in the response, between 0 and 100 inclusive. Leaving this
         * empty, or as 0, is the same as page_size = 100.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The number of holds to return in the response, between 0 and 100 inclusive. Leaving this empty, or
       as 0, is the same as page_size = 100.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The number of holds to return in the response, between 0 and 100 inclusive. Leaving this
         * empty, or as 0, is the same as page_size = 100.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * The pagination token as returned in the response. An empty token means start from the
         * beginning.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The pagination token as returned in the response. An empty token means start from the beginning.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * The pagination token as returned in the response. An empty token means start from the
         * beginning.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /** Specifies which parts of the Hold to return. */
        @com.google.api.client.util.Key
        private java.lang.String view;

        /** Specifies which parts of the Hold to return.
         */
        public java.lang.String getView() {
          return view;
        }

        /** Specifies which parts of the Hold to return. */
        public List setView(java.lang.String view) {
          this.view = view;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If
       * this request leaves the hold with no held accounts, the hold will not apply to any accounts.
       *
       * Create a request for the method "holds.removeHeldAccounts".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link RemoveHeldAccounts#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param holdId The hold ID.
       * @param content the {@link com.google.api.services.vault.v1.model.RemoveHeldAccountsRequest}
       * @return the request
       */
      public RemoveHeldAccounts removeHeldAccounts(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.RemoveHeldAccountsRequest content) throws java.io.IOException {
        RemoveHeldAccounts result = new RemoveHeldAccounts(matterId, holdId, content);
        initialize(result);
        return result;
      }

      public class RemoveHeldAccounts extends VaultRequest<com.google.api.services.vault.v1.model.RemoveHeldAccountsResponse> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}:removeHeldAccounts";

        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request.
         * If this request leaves the hold with no held accounts, the hold will not apply to any accounts.
         *
         * Create a request for the method "holds.removeHeldAccounts".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link RemoveHeldAccounts#execute()} method to invoke the remote
         * operation. <p> {@link RemoveHeldAccounts#initialize(com.google.api.client.googleapis.services.A
         * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @param content the {@link com.google.api.services.vault.v1.model.RemoveHeldAccountsRequest}
         * @since 1.13
         */
        protected RemoveHeldAccounts(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.RemoveHeldAccountsRequest content) {
          super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.RemoveHeldAccountsResponse.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
        }

        @Override
        public RemoveHeldAccounts set$Xgafv(java.lang.String $Xgafv) {
          return (RemoveHeldAccounts) super.set$Xgafv($Xgafv);
        }

        @Override
        public RemoveHeldAccounts setAccessToken(java.lang.String accessToken) {
          return (RemoveHeldAccounts) super.setAccessToken(accessToken);
        }

        @Override
        public RemoveHeldAccounts setAlt(java.lang.String alt) {
          return (RemoveHeldAccounts) super.setAlt(alt);
        }

        @Override
        public RemoveHeldAccounts setCallback(java.lang.String callback) {
          return (RemoveHeldAccounts) super.setCallback(callback);
        }

        @Override
        public RemoveHeldAccounts setFields(java.lang.String fields) {
          return (RemoveHeldAccounts) super.setFields(fields);
        }

        @Override
        public RemoveHeldAccounts setKey(java.lang.String key) {
          return (RemoveHeldAccounts) super.setKey(key);
        }

        @Override
        public RemoveHeldAccounts setOauthToken(java.lang.String oauthToken) {
          return (RemoveHeldAccounts) super.setOauthToken(oauthToken);
        }

        @Override
        public RemoveHeldAccounts setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (RemoveHeldAccounts) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public RemoveHeldAccounts setQuotaUser(java.lang.String quotaUser) {
          return (RemoveHeldAccounts) super.setQuotaUser(quotaUser);
        }

        @Override
        public RemoveHeldAccounts setUploadType(java.lang.String uploadType) {
          return (RemoveHeldAccounts) super.setUploadType(uploadType);
        }

        @Override
        public RemoveHeldAccounts setUploadProtocol(java.lang.String uploadProtocol) {
          return (RemoveHeldAccounts) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public RemoveHeldAccounts setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The hold ID. */
        @com.google.api.client.util.Key
        private java.lang.String holdId;

        /** The hold ID.
         */
        public java.lang.String getHoldId() {
          return holdId;
        }

        /** The hold ID. */
        public RemoveHeldAccounts setHoldId(java.lang.String holdId) {
          this.holdId = holdId;
          return this;
        }

        @Override
        public RemoveHeldAccounts set(String parameterName, Object value) {
          return (RemoveHeldAccounts) super.set(parameterName, value);
        }
      }
      /**
       * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers
       * an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in the hold
       * will be ignored.
       *
       * Create a request for the method "holds.update".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter ID.
       * @param holdId The ID of the hold.
       * @param content the {@link com.google.api.services.vault.v1.model.Hold}
       * @return the request
       */
      public Update update(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.Hold content) throws java.io.IOException {
        Update result = new Update(matterId, holdId, content);
        initialize(result);
        return result;
      }

      public class Update extends VaultRequest<com.google.api.services.vault.v1.model.Hold> {

        private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}";

        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers
         * an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in the
         * hold will be ignored.
         *
         * Create a request for the method "holds.update".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter ID.
         * @param holdId The ID of the hold.
         * @param content the {@link com.google.api.services.vault.v1.model.Hold}
         * @since 1.13
         */
        protected Update(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.Hold content) {
          super(Vault.this, "PUT", REST_PATH, content, com.google.api.services.vault.v1.model.Hold.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
        }

        @Override
        public Update set$Xgafv(java.lang.String $Xgafv) {
          return (Update) super.set$Xgafv($Xgafv);
        }

        @Override
        public Update setAccessToken(java.lang.String accessToken) {
          return (Update) super.setAccessToken(accessToken);
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setCallback(java.lang.String callback) {
          return (Update) super.setCallback(callback);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUploadType(java.lang.String uploadType) {
          return (Update) super.setUploadType(uploadType);
        }

        @Override
        public Update setUploadProtocol(java.lang.String uploadProtocol) {
          return (Update) super.setUploadProtocol(uploadProtocol);
        }

        /** The matter ID. */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter ID.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /** The matter ID. */
        public Update setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The ID of the hold. */
        @com.google.api.client.util.Key
        private java.lang.String holdId;

        /** The ID of the hold.
         */
        public java.lang.String getHoldId() {
          return holdId;
        }

        /** The ID of the hold. */
        public Update setHoldId(java.lang.String holdId) {
          this.holdId = holdId;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Accounts collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Vault vault = new Vault(...);}
       *   {@code Vault.Accounts.List request = vault.accounts().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Accounts accounts() {
        return new Accounts();
      }

      /**
       * The "accounts" collection of methods.
       */
      public class Accounts {

        /**
         * Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set.
         * Attempting to add an account to an OU-based hold will result in an error.
         *
         * Create a request for the method "accounts.create".
         *
         * This request holds the parameters needed by the vault server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @param content the {@link com.google.api.services.vault.v1.model.HeldAccount}
         * @return the request
         */
        public Create create(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.HeldAccount content) throws java.io.IOException {
          Create result = new Create(matterId, holdId, content);
          initialize(result);
          return result;
        }

        public class Create extends VaultRequest<com.google.api.services.vault.v1.model.HeldAccount> {

          private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}/accounts";

          /**
           * Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit
           * set. Attempting to add an account to an OU-based hold will result in an error.
           *
           * Create a request for the method "accounts.create".
           *
           * This request holds the parameters needed by the the vault server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param matterId The matter ID.
           * @param holdId The hold ID.
           * @param content the {@link com.google.api.services.vault.v1.model.HeldAccount}
           * @since 1.13
           */
          protected Create(java.lang.String matterId, java.lang.String holdId, com.google.api.services.vault.v1.model.HeldAccount content) {
            super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.HeldAccount.class);
            this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
            this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** The matter ID. */
          @com.google.api.client.util.Key
          private java.lang.String matterId;

          /** The matter ID.
           */
          public java.lang.String getMatterId() {
            return matterId;
          }

          /** The matter ID. */
          public Create setMatterId(java.lang.String matterId) {
            this.matterId = matterId;
            return this;
          }

          /** The hold ID. */
          @com.google.api.client.util.Key
          private java.lang.String holdId;

          /** The hold ID.
           */
          public java.lang.String getHoldId() {
            return holdId;
          }

          /** The hold ID. */
          public Create setHoldId(java.lang.String holdId) {
            this.holdId = holdId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the
         * hold will not apply to any accounts.
         *
         * Create a request for the method "accounts.delete".
         *
         * This request holds the parameters needed by the vault server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @param accountId The ID of the account to remove from the hold.
         * @return the request
         */
        public Delete delete(java.lang.String matterId, java.lang.String holdId, java.lang.String accountId) throws java.io.IOException {
          Delete result = new Delete(matterId, holdId, accountId);
          initialize(result);
          return result;
        }

        public class Delete extends VaultRequest<com.google.api.services.vault.v1.model.Empty> {

          private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}";

          /**
           * Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the
           * hold will not apply to any accounts.
           *
           * Create a request for the method "accounts.delete".
           *
           * This request holds the parameters needed by the the vault server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param matterId The matter ID.
           * @param holdId The hold ID.
           * @param accountId The ID of the account to remove from the hold.
           * @since 1.13
           */
          protected Delete(java.lang.String matterId, java.lang.String holdId, java.lang.String accountId) {
            super(Vault.this, "DELETE", REST_PATH, null, com.google.api.services.vault.v1.model.Empty.class);
            this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
            this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
            this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The matter ID. */
          @com.google.api.client.util.Key
          private java.lang.String matterId;

          /** The matter ID.
           */
          public java.lang.String getMatterId() {
            return matterId;
          }

          /** The matter ID. */
          public Delete setMatterId(java.lang.String matterId) {
            this.matterId = matterId;
            return this;
          }

          /** The hold ID. */
          @com.google.api.client.util.Key
          private java.lang.String holdId;

          /** The hold ID.
           */
          public java.lang.String getHoldId() {
            return holdId;
          }

          /** The hold ID. */
          public Delete setHoldId(java.lang.String holdId) {
            this.holdId = holdId;
            return this;
          }

          /** The ID of the account to remove from the hold. */
          @com.google.api.client.util.Key
          private java.lang.String accountId;

          /** The ID of the account to remove from the hold.
           */
          public java.lang.String getAccountId() {
            return accountId;
          }

          /** The ID of the account to remove from the hold. */
          public Delete setAccountId(java.lang.String accountId) {
            this.accountId = accountId;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the
         * hold is on an OU, then use Admin SDK to enumerate its members.
         *
         * Create a request for the method "accounts.list".
         *
         * This request holds the parameters needed by the vault server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param matterId The matter ID.
         * @param holdId The hold ID.
         * @return the request
         */
        public List list(java.lang.String matterId, java.lang.String holdId) throws java.io.IOException {
          List result = new List(matterId, holdId);
          initialize(result);
          return result;
        }

        public class List extends VaultRequest<com.google.api.services.vault.v1.model.ListHeldAccountsResponse> {

          private static final String REST_PATH = "v1/matters/{matterId}/holds/{holdId}/accounts";

          /**
           * Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the
           * hold is on an OU, then use Admin SDK to enumerate its members.
           *
           * Create a request for the method "accounts.list".
           *
           * This request holds the parameters needed by the the vault server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param matterId The matter ID.
           * @param holdId The hold ID.
           * @since 1.13
           */
          protected List(java.lang.String matterId, java.lang.String holdId) {
            super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.ListHeldAccountsResponse.class);
            this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
            this.holdId = com.google.api.client.util.Preconditions.checkNotNull(holdId, "Required parameter holdId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The matter ID. */
          @com.google.api.client.util.Key
          private java.lang.String matterId;

          /** The matter ID.
           */
          public java.lang.String getMatterId() {
            return matterId;
          }

          /** The matter ID. */
          public List setMatterId(java.lang.String matterId) {
            this.matterId = matterId;
            return this;
          }

          /** The hold ID. */
          @com.google.api.client.util.Key
          private java.lang.String holdId;

          /** The hold ID.
           */
          public java.lang.String getHoldId() {
            return holdId;
          }

          /** The hold ID. */
          public List setHoldId(java.lang.String holdId) {
            this.holdId = holdId;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the SavedQueries collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Vault vault = new Vault(...);}
     *   {@code Vault.SavedQueries.List request = vault.savedQueries().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public SavedQueries savedQueries() {
      return new SavedQueries();
    }

    /**
     * The "savedQueries" collection of methods.
     */
    public class SavedQueries {

      /**
       * Creates a saved query.
       *
       * Create a request for the method "savedQueries.create".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter id of the parent matter for which the saved query is to be
      created.
       * @param content the {@link com.google.api.services.vault.v1.model.SavedQuery}
       * @return the request
       */
      public Create create(java.lang.String matterId, com.google.api.services.vault.v1.model.SavedQuery content) throws java.io.IOException {
        Create result = new Create(matterId, content);
        initialize(result);
        return result;
      }

      public class Create extends VaultRequest<com.google.api.services.vault.v1.model.SavedQuery> {

        private static final String REST_PATH = "v1/matters/{matterId}/savedQueries";

        /**
         * Creates a saved query.
         *
         * Create a request for the method "savedQueries.create".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter id of the parent matter for which the saved query is to be
      created.
         * @param content the {@link com.google.api.services.vault.v1.model.SavedQuery}
         * @since 1.13
         */
        protected Create(java.lang.String matterId, com.google.api.services.vault.v1.model.SavedQuery content) {
          super(Vault.this, "POST", REST_PATH, content, com.google.api.services.vault.v1.model.SavedQuery.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The matter id of the parent matter for which the saved query is to be created.
         */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter id of the parent matter for which the saved query is to be created.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /**
         * The matter id of the parent matter for which the saved query is to be created.
         */
        public Create setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a saved query by Id.
       *
       * Create a request for the method "savedQueries.delete".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter id of the parent matter for which the saved query is to be
      deleted.
       * @param savedQueryId Id of the saved query to be deleted.
       * @return the request
       */
      public Delete delete(java.lang.String matterId, java.lang.String savedQueryId) throws java.io.IOException {
        Delete result = new Delete(matterId, savedQueryId);
        initialize(result);
        return result;
      }

      public class Delete extends VaultRequest<com.google.api.services.vault.v1.model.Empty> {

        private static final String REST_PATH = "v1/matters/{matterId}/savedQueries/{savedQueryId}";

        /**
         * Deletes a saved query by Id.
         *
         * Create a request for the method "savedQueries.delete".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter id of the parent matter for which the saved query is to be
      deleted.
         * @param savedQueryId Id of the saved query to be deleted.
         * @since 1.13
         */
        protected Delete(java.lang.String matterId, java.lang.String savedQueryId) {
          super(Vault.this, "DELETE", REST_PATH, null, com.google.api.services.vault.v1.model.Empty.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.savedQueryId = com.google.api.client.util.Preconditions.checkNotNull(savedQueryId, "Required parameter savedQueryId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The matter id of the parent matter for which the saved query is to be deleted.
         */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter id of the parent matter for which the saved query is to be deleted.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /**
         * The matter id of the parent matter for which the saved query is to be deleted.
         */
        public Delete setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** Id of the saved query to be deleted. */
        @com.google.api.client.util.Key
        private java.lang.String savedQueryId;

        /** Id of the saved query to be deleted.
         */
        public java.lang.String getSavedQueryId() {
          return savedQueryId;
        }

        /** Id of the saved query to be deleted. */
        public Delete setSavedQueryId(java.lang.String savedQueryId) {
          this.savedQueryId = savedQueryId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves a saved query by Id.
       *
       * Create a request for the method "savedQueries.get".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter id of the parent matter for which the saved query is to be
      retrieved.
       * @param savedQueryId Id of the saved query to be retrieved.
       * @return the request
       */
      public Get get(java.lang.String matterId, java.lang.String savedQueryId) throws java.io.IOException {
        Get result = new Get(matterId, savedQueryId);
        initialize(result);
        return result;
      }

      public class Get extends VaultRequest<com.google.api.services.vault.v1.model.SavedQuery> {

        private static final String REST_PATH = "v1/matters/{matterId}/savedQueries/{savedQueryId}";

        /**
         * Retrieves a saved query by Id.
         *
         * Create a request for the method "savedQueries.get".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter id of the parent matter for which the saved query is to be
      retrieved.
         * @param savedQueryId Id of the saved query to be retrieved.
         * @since 1.13
         */
        protected Get(java.lang.String matterId, java.lang.String savedQueryId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.SavedQuery.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
          this.savedQueryId = com.google.api.client.util.Preconditions.checkNotNull(savedQueryId, "Required parameter savedQueryId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The matter id of the parent matter for which the saved query is to be retrieved.
         */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter id of the parent matter for which the saved query is to be retrieved.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /**
         * The matter id of the parent matter for which the saved query is to be retrieved.
         */
        public Get setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** Id of the saved query to be retrieved. */
        @com.google.api.client.util.Key
        private java.lang.String savedQueryId;

        /** Id of the saved query to be retrieved.
         */
        public java.lang.String getSavedQueryId() {
          return savedQueryId;
        }

        /** Id of the saved query to be retrieved. */
        public Get setSavedQueryId(java.lang.String savedQueryId) {
          this.savedQueryId = savedQueryId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no
       * more saved queries to list.
       *
       * Create a request for the method "savedQueries.list".
       *
       * This request holds the parameters needed by the vault server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param matterId The matter id of the parent matter for which the saved queries are to be
      retrieved.
       * @return the request
       */
      public List list(java.lang.String matterId) throws java.io.IOException {
        List result = new List(matterId);
        initialize(result);
        return result;
      }

      public class List extends VaultRequest<com.google.api.services.vault.v1.model.ListSavedQueriesResponse> {

        private static final String REST_PATH = "v1/matters/{matterId}/savedQueries";

        /**
         * Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no
         * more saved queries to list.
         *
         * Create a request for the method "savedQueries.list".
         *
         * This request holds the parameters needed by the the vault server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param matterId The matter id of the parent matter for which the saved queries are to be
      retrieved.
         * @since 1.13
         */
        protected List(java.lang.String matterId) {
          super(Vault.this, "GET", REST_PATH, null, com.google.api.services.vault.v1.model.ListSavedQueriesResponse.class);
          this.matterId = com.google.api.client.util.Preconditions.checkNotNull(matterId, "Required parameter matterId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The matter id of the parent matter for which the saved queries are to be retrieved.
         */
        @com.google.api.client.util.Key
        private java.lang.String matterId;

        /** The matter id of the parent matter for which the saved queries are to be retrieved.
         */
        public java.lang.String getMatterId() {
          return matterId;
        }

        /**
         * The matter id of the parent matter for which the saved queries are to be retrieved.
         */
        public List setMatterId(java.lang.String matterId) {
          this.matterId = matterId;
          return this;
        }

        /** The maximum number of saved queries to return. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of saved queries to return.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of saved queries to return. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * The pagination token as returned in the previous response. An empty token means start
         * from the beginning.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The pagination token as returned in the previous response. An empty token means start from the
       beginning.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * The pagination token as returned in the previous response. An empty token means start
         * from the beginning.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Vault}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Vault}. */
    @Override
    public Vault build() {
      return new Vault(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link VaultRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setVaultRequestInitializer(
        VaultRequestInitializer vaultRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(vaultRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
