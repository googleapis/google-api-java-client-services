/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.documentai.v1beta3.model;

/**
 * The image chunk field in the chunk.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Document AI API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField extends com.google.api.client.json.GenericJson {

  /**
   * Annotation of the image chunk field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDocumentaiV1beta3DocumentAnnotations annotations;

  /**
   * Optional. Asset id of the inline image. If set, find the image content in the blob_assets
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String blobAssetId;

  /**
   * Optional. Data uri of the image. It is composed of four parts: a prefix (data:), a MIME type
   * indicating the type of data, an optional base64 token if non-textual, and the data itself:
   * data:,
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataUri;

  /**
   * Optional. Google Cloud Storage uri of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcsUri;

  /**
   * Annotation of the image chunk field.
   * @return value or {@code null} for none
   */
  public GoogleCloudDocumentaiV1beta3DocumentAnnotations getAnnotations() {
    return annotations;
  }

  /**
   * Annotation of the image chunk field.
   * @param annotations annotations or {@code null} for none
   */
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField setAnnotations(GoogleCloudDocumentaiV1beta3DocumentAnnotations annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. Asset id of the inline image. If set, find the image content in the blob_assets
   * field.
   * @return value or {@code null} for none
   */
  public java.lang.String getBlobAssetId() {
    return blobAssetId;
  }

  /**
   * Optional. Asset id of the inline image. If set, find the image content in the blob_assets
   * field.
   * @param blobAssetId blobAssetId or {@code null} for none
   */
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField setBlobAssetId(java.lang.String blobAssetId) {
    this.blobAssetId = blobAssetId;
    return this;
  }

  /**
   * Optional. Data uri of the image. It is composed of four parts: a prefix (data:), a MIME type
   * indicating the type of data, an optional base64 token if non-textual, and the data itself:
   * data:,
   * @return value or {@code null} for none
   */
  public java.lang.String getDataUri() {
    return dataUri;
  }

  /**
   * Optional. Data uri of the image. It is composed of four parts: a prefix (data:), a MIME type
   * indicating the type of data, an optional base64 token if non-textual, and the data itself:
   * data:,
   * @param dataUri dataUri or {@code null} for none
   */
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField setDataUri(java.lang.String dataUri) {
    this.dataUri = dataUri;
    return this;
  }

  /**
   * Optional. Google Cloud Storage uri of the image.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcsUri() {
    return gcsUri;
  }

  /**
   * Optional. Google Cloud Storage uri of the image.
   * @param gcsUri gcsUri or {@code null} for none
   */
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField setGcsUri(java.lang.String gcsUri) {
    this.gcsUri = gcsUri;
    return this;
  }

  @Override
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField set(String fieldName, Object value) {
    return (GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField clone() {
    return (GoogleCloudDocumentaiV1beta3DocumentChunkedDocumentChunkImageChunkField) super.clone();
  }

}
