/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Data and associated metadata for a scholarly pdf article.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScienceSearchScholarlyArticle extends com.google.api.client.json.GenericJson {

  /**
   * Proto containing all of the Scholar Metadata for this article.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ScienceCitation citation;

  /**
   * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String figureOrTableImage;

  /**
   * Contains the text (as detected by OCR) contained inside the image of the figure or table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String figureOrTableOcrText;

  /**
   * The url of the landing page for the scholarly article.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String landingPageUrl;

  /**
   * The page number where the table and figure is located in the original pdf document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageNumber;

  /**
   * The url where the pdf file is located for the scholarly article.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pdfDownloadUrl;

  /**
   * Proto containing all of the Scholar Metadata for this article.
   * @return value or {@code null} for none
   */
  public ScienceCitation getCitation() {
    return citation;
  }

  /**
   * Proto containing all of the Scholar Metadata for this article.
   * @param citation citation or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setCitation(ScienceCitation citation) {
    this.citation = citation;
    return this;
  }

  /**
   * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
   * @see #decodeFigureOrTableImage()
   * @return value or {@code null} for none
   */
  public java.lang.String getFigureOrTableImage() {
    return figureOrTableImage;
  }

  /**
   * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
   * @see #getFigureOrTableImage()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeFigureOrTableImage() {
    return com.google.api.client.util.Base64.decodeBase64(figureOrTableImage);
  }

  /**
   * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
   * @see #encodeFigureOrTableImage()
   * @param figureOrTableImage figureOrTableImage or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setFigureOrTableImage(java.lang.String figureOrTableImage) {
    this.figureOrTableImage = figureOrTableImage;
    return this;
  }

  /**
   * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
   * @see #setFigureOrTableImage()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ResearchScienceSearchScholarlyArticle encodeFigureOrTableImage(byte[] figureOrTableImage) {
    this.figureOrTableImage = com.google.api.client.util.Base64.encodeBase64URLSafeString(figureOrTableImage);
    return this;
  }

  /**
   * Contains the text (as detected by OCR) contained inside the image of the figure or table.
   * @return value or {@code null} for none
   */
  public java.lang.String getFigureOrTableOcrText() {
    return figureOrTableOcrText;
  }

  /**
   * Contains the text (as detected by OCR) contained inside the image of the figure or table.
   * @param figureOrTableOcrText figureOrTableOcrText or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setFigureOrTableOcrText(java.lang.String figureOrTableOcrText) {
    this.figureOrTableOcrText = figureOrTableOcrText;
    return this;
  }

  /**
   * The url of the landing page for the scholarly article.
   * @return value or {@code null} for none
   */
  public java.lang.String getLandingPageUrl() {
    return landingPageUrl;
  }

  /**
   * The url of the landing page for the scholarly article.
   * @param landingPageUrl landingPageUrl or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setLandingPageUrl(java.lang.String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
    return this;
  }

  /**
   * The page number where the table and figure is located in the original pdf document.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageNumber() {
    return pageNumber;
  }

  /**
   * The page number where the table and figure is located in the original pdf document.
   * @param pageNumber pageNumber or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setPageNumber(java.lang.Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * The url where the pdf file is located for the scholarly article.
   * @return value or {@code null} for none
   */
  public java.lang.String getPdfDownloadUrl() {
    return pdfDownloadUrl;
  }

  /**
   * The url where the pdf file is located for the scholarly article.
   * @param pdfDownloadUrl pdfDownloadUrl or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle setPdfDownloadUrl(java.lang.String pdfDownloadUrl) {
    this.pdfDownloadUrl = pdfDownloadUrl;
    return this;
  }

  @Override
  public ResearchScienceSearchScholarlyArticle set(String fieldName, Object value) {
    return (ResearchScienceSearchScholarlyArticle) super.set(fieldName, value);
  }

  @Override
  public ResearchScienceSearchScholarlyArticle clone() {
    return (ResearchScienceSearchScholarlyArticle) super.clone();
  }

}
