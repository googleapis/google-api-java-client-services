{
  "batchPath": "batch",
  "canonicalName": "Firestore",
  "version": "v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "baseUrl": "https://firestore.googleapis.com/",
  "schemas": {
    "DocumentsTarget": {
      "properties": {
        "documents": {
          "description": "The names of the documents to retrieve. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nThe request will fail if any of the document is not a child resource of\nthe given `database`. Duplicate names will be elided.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "A target specified by a set of documents names.",
      "id": "DocumentsTarget"
    },
    "QueryTarget": {
      "type": "object",
      "id": "QueryTarget",
      "description": "A target specified by a query.",
      "properties": {
        "structuredQuery": {
          "description": "A structured query.",
          "$ref": "StructuredQuery"
        },
        "parent": {
          "type": "string",
          "description": "The parent resource name. In the format:\n`projects/{project_id}/databases/{database_id}/documents` or\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nFor example:\n`projects/my-project/databases/my-database/documents` or\n`projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`"
        }
      }
    },
    "TargetChange": {
      "properties": {
        "targetChangeType": {
          "enumDescriptions": [
            "No change has occurred. Used only to send an updated `resume_token`.",
            "The targets have been added.",
            "The targets have been removed.",
            "The targets reflect all changes committed before the targets were added\nto the stream.\n\nThis will be sent after or with a `read_time` that is greater than or\nequal to the time at which the targets were added.\n\nListeners can wait for this change if read-after-write semantics\nare desired.",
            "The targets have been reset, and a new initial state for the targets\nwill be returned in subsequent changes.\n\nAfter the initial state is complete, `CURRENT` will be returned even\nif the target was previously indicated to be `CURRENT`."
          ],
          "type": "string",
          "description": "The type of change that occurred.",
          "enum": [
            "NO_CHANGE",
            "ADD",
            "REMOVE",
            "CURRENT",
            "RESET"
          ]
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The consistent `read_time` for the given `target_ids` (omitted when the\ntarget_ids are not at a consistent snapshot).\n\nThe stream is guaranteed to send a `read_time` with `target_ids` empty\nwhenever the entire stream reaches a new consistent snapshot. ADD,\nCURRENT, and RESET messages are guaranteed to (eventually) result in a\nnew consistent snapshot (while NO_CHANGE and REMOVE messages are not).\n\nFor a given stream, `read_time` is guaranteed to be monotonically\nincreasing."
        },
        "targetIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "The target IDs of targets that have changed.\n\nIf empty, the change applies to all targets.\n\nThe order of the target IDs is not defined."
        },
        "resumeToken": {
          "description": "A token that can be used to resume the stream for the given `target_ids`,\nor all targets if `target_ids` is empty.\n\nNot set on every target change.",
          "format": "byte",
          "type": "string"
        },
        "cause": {
          "$ref": "Status",
          "description": "The error that resulted in this change, if applicable."
        }
      },
      "type": "object",
      "description": "Targets being watched have changed.",
      "id": "TargetChange"
    },
    "GoogleFirestoreAdminV1IndexConfigDelta": {
      "description": "Information about an index configuration change.",
      "id": "GoogleFirestoreAdminV1IndexConfigDelta",
      "type": "object",
      "properties": {
        "changeType": {
          "enum": [
            "CHANGE_TYPE_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "type": "string",
          "description": "Specifies how the index is changing.",
          "enumDescriptions": [
            "The type of change is not specified or known.",
            "The single field index is being added.",
            "The single field index is being removed."
          ]
        },
        "index": {
          "description": "The index being changed.",
          "$ref": "GoogleFirestoreAdminV1Index"
        }
      }
    },
    "DocumentDelete": {
      "id": "DocumentDelete",
      "description": "A Document has been deleted.\n\nMay be the result of multiple writes, including updates, the\nlast of which deleted the Document.\n\nMultiple DocumentDelete messages may be returned for the same logical\ndelete, if multiple targets are affected.",
      "type": "object",
      "properties": {
        "readTime": {
          "description": "The read timestamp at which the delete was observed.\n\nGreater or equal to the `commit_time` of the delete.",
          "type": "string",
          "format": "google-datetime"
        },
        "document": {
          "description": "The resource name of the Document that was deleted.",
          "type": "string"
        },
        "removedTargetIds": {
          "type": "array",
          "description": "A set of target IDs for targets that previously matched this entity.",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "DocumentRemove": {
      "id": "DocumentRemove",
      "type": "object",
      "description": "A Document has been removed from the view of the targets.\n\nSent if the document is no longer relevant to a target and is out of view.\nCan be sent instead of a DocumentDelete or a DocumentChange if the server\ncan not send the new value of the document.\n\nMultiple DocumentRemove messages may be returned for the same logical\nwrite or delete, if multiple targets are affected.",
      "properties": {
        "removedTargetIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "A set of target IDs for targets that previously matched this document.",
          "type": "array"
        },
        "document": {
          "description": "The resource name of the Document that has gone out of view.",
          "type": "string"
        },
        "readTime": {
          "type": "string",
          "description": "The read timestamp at which the remove was observed.\n\nGreater or equal to the `commit_time` of the change/delete/remove.",
          "format": "google-datetime"
        }
      }
    },
    "LatLng": {
      "id": "LatLng",
      "type": "object",
      "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n\u003ca href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\"\u003eWGS84\nstandard\u003c/a\u003e. Values must be within normalized ranges.",
      "properties": {
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        }
      }
    },
    "Document": {
      "properties": {
        "name": {
          "description": "The resource name of the document, for example\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time at which the document was last changed.\n\nThis value is initially set to the `create_time` then increases\nmonotonically with each change to the document. It can also be\ncompared to values from other documents and the `read_time` of a query.",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Output only. The time at which the document was created.\n\nThis value increases monotonically when a document is deleted then\nrecreated. It can also be compared to values from other documents and\nthe `read_time` of a query.",
          "format": "google-datetime",
          "type": "string"
        },
        "fields": {
          "type": "object",
          "description": "The document's fields.\n\nThe map keys represent field names.\n\nA simple field name contains only characters `a` to `z`, `A` to `Z`,\n`0` to `9`, or `_`, and must not start with `0` to `9`. For example,\n`foo_bar_17`.\n\nField names matching the regular expression `__.*__` are reserved. Reserved\nfield names are forbidden except in certain documented contexts. The map\nkeys, represented as UTF-8, must not exceed 1,500 bytes and cannot be\nempty.\n\nField paths may be used in other contexts to refer to structured fields\ndefined here. For `map_value`, the field path is represented by the simple\nor quoted field names of the containing fields, delimited by `.`. For\nexample, the structured field\n`\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be\nrepresented by the field path `foo.x&y`.\n\nWithin a field path, a quoted field name starts and ends with `` ` `` and\nmay contain any character. Some characters, including `` ` ``, must be\nescaped using a `\\`. For example, `` `x&y` `` represents `x&y` and\n`` `bak\\`tik` `` represents `` bak`tik ``.",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      },
      "type": "object",
      "id": "Document",
      "description": "A Firestore document.\n\nMust not exceed 1 MiB - 4 bytes."
    },
    "GoogleLongrunningOperation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "id": "GoogleLongrunningOperation",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      }
    },
    "Value": {
      "id": "Value",
      "properties": {
        "referenceValue": {
          "type": "string",
          "description": "A reference to a document. For example:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        },
        "booleanValue": {
          "type": "boolean",
          "description": "A boolean value."
        },
        "doubleValue": {
          "type": "number",
          "format": "double",
          "description": "A double value."
        },
        "mapValue": {
          "$ref": "MapValue",
          "description": "A map value."
        },
        "bytesValue": {
          "format": "byte",
          "type": "string",
          "description": "A bytes value.\n\nMust not exceed 1 MiB - 89 bytes.\nOnly the first 1,500 bytes are considered by queries."
        },
        "timestampValue": {
          "type": "string",
          "format": "google-datetime",
          "description": "A timestamp value.\n\nPrecise only to microseconds. When stored, any additional precision is\nrounded down."
        },
        "geoPointValue": {
          "$ref": "LatLng",
          "description": "A geo point value representing a point on the surface of Earth."
        },
        "nullValue": {
          "enumDescriptions": [
            "Null value."
          ],
          "description": "A null value.",
          "type": "string",
          "enum": [
            "NULL_VALUE"
          ]
        },
        "arrayValue": {
          "description": "An array value.\n\nCannot directly contain another array value, though can contain an\nmap which contains another array.",
          "$ref": "ArrayValue"
        },
        "stringValue": {
          "type": "string",
          "description": "A string value.\n\nThe string, represented as UTF-8, must not exceed 1 MiB - 89 bytes.\nOnly the first 1,500 bytes of the UTF-8 representation are considered by\nqueries."
        },
        "integerValue": {
          "description": "An integer value.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "A message that can hold any of the supported value types.",
      "type": "object"
    },
    "CommitRequest": {
      "type": "object",
      "id": "CommitRequest",
      "description": "The request for Firestore.Commit.",
      "properties": {
        "writes": {
          "description": "The writes to apply.\n\nAlways executed atomically and in order.",
          "items": {
            "$ref": "Write"
          },
          "type": "array"
        },
        "transaction": {
          "format": "byte",
          "description": "If set, applies all writes in this transaction, and commits it.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1IndexOperationMetadata": {
      "id": "GoogleFirestoreAdminV1IndexOperationMetadata",
      "type": "object",
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.CreateIndex.",
      "properties": {
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "endTime": {
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime"
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "state": {
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string",
          "description": "The state of the operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ]
        },
        "startTime": {
          "type": "string",
          "description": "The time this operation started.",
          "format": "google-datetime"
        },
        "index": {
          "type": "string",
          "description": "The index resource that this operation is acting on. For example:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`"
        }
      }
    },
    "WriteRequest": {
      "description": "The request for Firestore.Write.\n\nThe first request creates a stream, or resumes an existing one from a token.\n\nWhen creating a new stream, the server replies with a response containing\nonly an ID and a token, to use in the next request.\n\nWhen resuming a stream, the server first streams any responses later than the\ngiven token, then a response containing only an up-to-date token, to use in\nthe next request.",
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "description": "Labels associated with this write request.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "streamToken": {
          "description": "A stream token that was previously sent by the server.\n\nThe client should set this field to the token from the most recent\nWriteResponse it has received. This acknowledges that the client has\nreceived responses up to this token. After sending this token, earlier\ntokens may not be used anymore.\n\nThe server may close the stream if there are too many unacknowledged\nresponses.\n\nLeave this field unset when creating a new stream. To resume a stream at\na specific point, set this field and the `stream_id` field.\n\nLeave this field unset when creating a new stream.",
          "format": "byte",
          "type": "string"
        },
        "streamId": {
          "type": "string",
          "description": "The ID of the write stream to resume.\nThis may only be set in the first message. When left empty, a new write\nstream will be created."
        },
        "writes": {
          "description": "The writes to apply.\n\nAlways executed atomically and in order.\nThis must be empty on the first request.\nThis may be empty on the last request.\nThis must not be empty on all other requests.",
          "items": {
            "$ref": "Write"
          },
          "type": "array"
        }
      },
      "id": "WriteRequest"
    },
    "GoogleFirestoreAdminV1ExportDocumentsMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.ExportDocuments.",
      "type": "object",
      "id": "GoogleFirestoreAdminV1ExportDocumentsMetadata",
      "properties": {
        "operationState": {
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the export operation.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ]
        },
        "startTime": {
          "type": "string",
          "description": "The time this operation started.",
          "format": "google-datetime"
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in\nprogress."
        },
        "outputUriPrefix": {
          "type": "string",
          "description": "Where the entities are being exported to."
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in documents, of this operation."
        },
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "collectionIds": {
          "items": {
            "type": "string"
          },
          "description": "Which collection ids are being exported.",
          "type": "array"
        }
      }
    },
    "DocumentMask": {
      "description": "A set of field paths on a document.\nUsed to restrict a get or update operation on a document to a subset of its\nfields.\nThis is different from standard field masks, as this is always scoped to a\nDocument, and takes in account the dynamic nature of Value.",
      "id": "DocumentMask",
      "type": "object",
      "properties": {
        "fieldPaths": {
          "items": {
            "type": "string"
          },
          "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference.",
          "type": "array"
        }
      }
    },
    "GoogleFirestoreAdminV1ListIndexesResponse": {
      "description": "The response for FirestoreAdmin.ListIndexes.",
      "id": "GoogleFirestoreAdminV1ListIndexesResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A page token that may be used to request another page of results. If blank,\nthis is the last page.",
          "type": "string"
        },
        "indexes": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Index"
          },
          "description": "The requested indexes.",
          "type": "array"
        }
      }
    },
    "GoogleFirestoreAdminV1Index": {
      "id": "GoogleFirestoreAdminV1Index",
      "properties": {
        "name": {
          "description": "Output only. A server defined name for this index.\nThe form of this name for composite indexes will be:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`\nFor single field indexes, this field will be empty.",
          "type": "string"
        },
        "queryScope": {
          "type": "string",
          "enum": [
            "QUERY_SCOPE_UNSPECIFIED",
            "COLLECTION",
            "COLLECTION_GROUP"
          ],
          "description": "Indexes with a collection query scope specified allow queries\nagainst a collection that is the child of a specific document, specified at\nquery time, and that has the same collection id.\n\nIndexes with a collection group query scope specified allow queries against\nall collections descended from a specific document, specified at query\ntime, and that have the same collection id as this index.",
          "enumDescriptions": [
            "The query scope is unspecified. Not a valid option.",
            "Indexes with a collection query scope specified allow queries\nagainst a collection that is the child of a specific document, specified\nat query time, and that has the collection id specified by the index.",
            "Indexes with a collection group query scope specified allow queries\nagainst all collections that has the collection id specified by the\nindex."
          ]
        },
        "state": {
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created.\nThere is an active long-running operation for the index.\nThe index is updated when writing a document.\nSome index data may exist.",
            "The index is ready to be used.\nThe index is updated when writing a document.\nThe index is fully populated from all stored documents it applies to.",
            "The index was being created, but something went wrong.\nThere is no active long-running operation for the index,\nand the most recently finished long-running operation failed.\nThe index is not updated when writing a document.\nSome index data may exist.\nUse the google.longrunning.Operations API to determine why the operation\nthat last attempted to create this index failed, then re-create the\nindex."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "NEEDS_REPAIR"
          ],
          "description": "Output only. The serving state of the index."
        },
        "fields": {
          "type": "array",
          "description": "The fields supported by this index.\n\nFor composite indexes, this is always 2 or more fields.\nThe last field entry is always for the field path `__name__`. If, on\ncreation, `__name__` was not specified as the last field, it will be added\nautomatically with the same direction as that of the last field defined. If\nthe final field in a composite index is not directional, the `__name__`\nwill be ordered ASCENDING (unless explicitly specified).\n\nFor single field indexes, this will always be exactly one entry with a\nfield path equal to the field path of the associated field.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1IndexField"
          }
        }
      },
      "description": "Cloud Firestore indexes enable simple and complex queries against\ndocuments in a database.",
      "type": "object"
    },
    "FieldReference": {
      "properties": {
        "fieldPath": {
          "type": "string"
        }
      },
      "id": "FieldReference",
      "description": "A reference to a field, such as `max(messages.time) as max_time`.",
      "type": "object"
    },
    "Order": {
      "properties": {
        "field": {
          "$ref": "FieldReference",
          "description": "The field to order by."
        },
        "direction": {
          "type": "string",
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "enumDescriptions": [
            "Unspecified.",
            "Ascending.",
            "Descending."
          ],
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ]
        }
      },
      "description": "An order on a field.",
      "type": "object",
      "id": "Order"
    },
    "RollbackRequest": {
      "properties": {
        "transaction": {
          "format": "byte",
          "type": "string",
          "description": "Required. The transaction to roll back."
        }
      },
      "description": "The request for Firestore.Rollback.",
      "type": "object",
      "id": "RollbackRequest"
    },
    "ReadOnly": {
      "properties": {
        "readTime": {
          "format": "google-datetime",
          "description": "Reads documents at the given time.\nThis may not be older than 60 seconds.",
          "type": "string"
        }
      },
      "description": "Options for a transaction that can only be used to read documents.",
      "type": "object",
      "id": "ReadOnly"
    },
    "Filter": {
      "id": "Filter",
      "description": "A filter.",
      "type": "object",
      "properties": {
        "unaryFilter": {
          "$ref": "UnaryFilter",
          "description": "A filter that takes exactly one argument."
        },
        "compositeFilter": {
          "description": "A composite filter.",
          "$ref": "CompositeFilter"
        },
        "fieldFilter": {
          "$ref": "FieldFilter",
          "description": "A filter on a document field."
        }
      }
    },
    "CommitResponse": {
      "id": "CommitResponse",
      "description": "The response for Firestore.Commit.",
      "type": "object",
      "properties": {
        "writeResults": {
          "items": {
            "$ref": "WriteResult"
          },
          "type": "array",
          "description": "The result of applying the writes.\n\nThis i-th write result corresponds to the i-th write in the\nrequest."
        },
        "commitTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the commit occurred. Any read with an equal or greater\n`read_time` is guaranteed to see the effects of the commit."
        }
      }
    },
    "TransactionOptions": {
      "properties": {
        "readWrite": {
          "description": "The transaction can be used for both read and write operations.",
          "$ref": "ReadWrite"
        },
        "readOnly": {
          "$ref": "ReadOnly",
          "description": "The transaction can only be used for read operations."
        }
      },
      "description": "Options for creating a new transaction.",
      "type": "object",
      "id": "TransactionOptions"
    },
    "ExistenceFilter": {
      "description": "A digest of all the documents that match a given target.",
      "id": "ExistenceFilter",
      "properties": {
        "targetId": {
          "format": "int32",
          "description": "The target ID to which this filter applies.",
          "type": "integer"
        },
        "count": {
          "format": "int32",
          "type": "integer",
          "description": "The total count of documents that match target_id.\n\nIf different from the count of documents in the client that match, the\nclient must manually determine which documents no longer match the target."
        }
      },
      "type": "object"
    },
    "BatchGetDocumentsRequest": {
      "properties": {
        "documents": {
          "type": "array",
          "description": "The names of the documents to retrieve. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nThe request will fail if any of the document is not a child resource of the\ngiven `database`. Duplicate names will be elided.",
          "items": {
            "type": "string"
          }
        },
        "readTime": {
          "description": "Reads documents as they were at the given time.\nThis may not be older than 270 seconds.",
          "type": "string",
          "format": "google-datetime"
        },
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "Reads documents in a transaction."
        },
        "newTransaction": {
          "$ref": "TransactionOptions",
          "description": "Starts a new transaction and reads the documents.\nDefaults to a read-only transaction.\nThe new transaction ID will be returned as the first response in the\nstream."
        },
        "mask": {
          "description": "The fields to return. If not set, returns all fields.\n\nIf a document has a field that is not present in this mask, that field will\nnot be returned in the response.",
          "$ref": "DocumentMask"
        }
      },
      "id": "BatchGetDocumentsRequest",
      "description": "The request for Firestore.BatchGetDocuments.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1ExportDocumentsRequest": {
      "description": "The request for FirestoreAdmin.ExportDocuments.",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids to export. Unspecified means all collections.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outputUriPrefix": {
          "type": "string",
          "description": "The output URI. Currently only supports Google Cloud Storage URIs of the\nform: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\nof the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\nGoogle Cloud Storage namespace path. When\nchoosing a name, be sure to consider Google Cloud Storage naming\nguidelines: https://cloud.google.com/storage/docs/naming.\nIf the URI is a bucket (without a namespace path), a prefix will be\ngenerated based on the start time."
        }
      },
      "id": "GoogleFirestoreAdminV1ExportDocumentsRequest",
      "type": "object"
    },
    "Location": {
      "type": "object",
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations.\nFor example: `\"projects/example-project/locations/us-east1\"`"
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given\nlocation.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name.\nFor example, \"Tokyo\".",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example\n\n    {\"cloud.googleapis.com/region\": \"us-east1\"}"
        }
      }
    },
    "Projection": {
      "id": "Projection",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields to return.\n\nIf empty, all fields are returned. To only return the name\nof the document, use `['__name__']`.",
          "items": {
            "$ref": "FieldReference"
          },
          "type": "array"
        }
      },
      "description": "The projection of document's fields to return."
    },
    "RunQueryResponse": {
      "properties": {
        "transaction": {
          "type": "string",
          "description": "The transaction that was started as part of this request.\nCan only be set in the first response, and only if\nRunQueryRequest.new_transaction was set in the request.\nIf set, no other fields will be set in this response.",
          "format": "byte"
        },
        "document": {
          "$ref": "Document",
          "description": "A query result.\nNot set when reporting partial progress."
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the document was read. This may be monotonically\nincreasing; in this case, the previous documents in the result stream are\nguaranteed not to have changed between their `read_time` and this one.\n\nIf the query returns no results, a response with `read_time` and no\n`document` will be sent, and this represents the time at which the query\nwas run."
        },
        "skippedResults": {
          "format": "int32",
          "description": "The number of results that have been skipped due to an offset between\nthe last response and the current response.",
          "type": "integer"
        }
      },
      "description": "The response for Firestore.RunQuery.",
      "type": "object",
      "id": "RunQueryResponse"
    },
    "GoogleFirestoreAdminV1Field": {
      "description": "Represents a single field in the database.\n\nFields are grouped by their \"Collection Group\", which represent all\ncollections in the database with the same id.",
      "type": "object",
      "id": "GoogleFirestoreAdminV1Field",
      "properties": {
        "indexConfig": {
          "description": "The index configuration for this field. If unset, field indexing will\nrevert to the configuration defined by the `ancestor_field`. To\nexplicitly remove all indexes for this field, specify an index config\nwith an empty list of indexes.",
          "$ref": "GoogleFirestoreAdminV1IndexConfig"
        },
        "name": {
          "description": "A field name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`\n\nA field path may be a simple field name, e.g. `address` or a path to fields\nwithin map_value , e.g. `address.city`,\nor a special field path. The only valid special field is `*`, which\nrepresents any field.\n\nField paths may be quoted using ` (backtick). The only character that needs\nto be escaped within a quoted field path is the backtick character itself,\nescaped using a backslash. Special characters in field paths that\nmust be quoted include: `*`, `.`,\n``` (backtick), `[`, `]`, as well as any ascii symbolic characters.\n\nExamples:\n(Note: Comments here are written in markdown syntax, so there is an\n additional layer of backticks to represent a code block)\n`\\`address.city\\`` represents a field named `address.city`, not the map key\n`city` in the field `address`.\n`\\`*\\`` represents a field named `*`, not any field.\n\nA special `Field` contains the default indexing settings for all fields.\nThis field's resource name is:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`\nIndexes defined on this `Field` will be applied to all fields which do not\nhave their own `Field` index configuration.",
          "type": "string"
        }
      }
    },
    "BeginTransactionResponse": {
      "description": "The response for Firestore.BeginTransaction.",
      "type": "object",
      "id": "BeginTransactionResponse",
      "properties": {
        "transaction": {
          "format": "byte",
          "description": "The transaction that was started.",
          "type": "string"
        }
      }
    },
    "FieldTransform": {
      "properties": {
        "appendMissingElements": {
          "$ref": "ArrayValue",
          "description": "Append the given elements in order if they are not already present in\nthe current field value.\nIf the field is not an array, or if the field does not yet exist, it is\nfirst set to the empty array.\n\nEquivalent numbers of different types (e.g. 3L and 3.0) are\nconsidered equal when checking if a value is missing.\nNaN is equal to NaN, and Null is equal to Null.\nIf the input contains multiple equivalent values, only the first will\nbe considered.\n\nThe corresponding transform_result will be the null value."
        },
        "minimum": {
          "description": "Sets the field to the minimum of its current value and the given value.\n\nThis must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the input value.\nIf a minimum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the smaller operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and\nzero input value is always the stored value.\nThe minimum of any numeric value x and NaN is NaN.",
          "$ref": "Value"
        },
        "maximum": {
          "description": "Sets the field to the maximum of its current value and the given value.\n\nThis must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf a maximum operation is applied where the field and the input value\nare of mixed types (that is - one is an integer and one is a double)\nthe field takes on the type of the larger operand. If the operands are\nequivalent (e.g. 3 and 3.0), the field does not change.\n0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and\nzero input value is always the stored value.\nThe maximum of any numeric value x and NaN is NaN.",
          "$ref": "Value"
        },
        "removeAllFromArray": {
          "$ref": "ArrayValue",
          "description": "Remove all of the given elements from the array in the field.\nIf the field is not an array, or if the field does not yet exist, it is\nset to the empty array.\n\nEquivalent numbers of the different types (e.g. 3L and 3.0) are\nconsidered equal when deciding whether an element should be removed.\nNaN is equal to NaN, and Null is equal to Null.\nThis will remove all equivalent values if there are duplicates.\n\nThe corresponding transform_result will be the null value."
        },
        "setToServerValue": {
          "type": "string",
          "enum": [
            "SERVER_VALUE_UNSPECIFIED",
            "REQUEST_TIME"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The time at which the server processed the request, with millisecond\nprecision."
          ],
          "description": "Sets the field to the given server value."
        },
        "fieldPath": {
          "description": "The path of the field. See Document.fields for the field path syntax\nreference.",
          "type": "string"
        },
        "increment": {
          "description": "Adds the given value to the field's current value.\n\nThis must be an integer or a double value.\nIf the field is not an integer or double, or if the field does not yet\nexist, the transformation will set the field to the given value.\nIf either of the given value or the current field value are doubles,\nboth values will be interpreted as doubles. Double arithmetic and\nrepresentation of double values follow IEEE 754 semantics.\nIf there is positive/negative integer overflow, the field is resolved\nto the largest magnitude positive/negative integer.",
          "$ref": "Value"
        }
      },
      "id": "FieldTransform",
      "type": "object",
      "description": "A transformation of a field of the document."
    },
    "GoogleFirestoreAdminV1IndexConfig": {
      "type": "object",
      "id": "GoogleFirestoreAdminV1IndexConfig",
      "description": "The index configuration for this field.",
      "properties": {
        "indexes": {
          "type": "array",
          "description": "The indexes supported for this field.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1Index"
          }
        },
        "usesAncestorConfig": {
          "description": "Output only. When true, the `Field`'s index configuration is set from the\nconfiguration specified by the `ancestor_field`.\nWhen false, the `Field`'s index configuration is defined explicitly.",
          "type": "boolean"
        },
        "ancestorField": {
          "description": "Output only. Specifies the resource name of the `Field` from which this field's\nindex configuration is set (when `uses_ancestor_config` is true),\nor from which it *would* be set if this field had no index configuration\n(when `uses_ancestor_config` is false).",
          "type": "string"
        },
        "reverting": {
          "description": "Output only\nWhen true, the `Field`'s index configuration is in the process of being\nreverted. Once complete, the index config will transition to the same\nstate as the field specified by `ancestor_field`, at which point\n`uses_ancestor_config` will be `true` and `reverting` will be `false`.",
          "type": "boolean"
        }
      }
    },
    "ReadWrite": {
      "id": "ReadWrite",
      "properties": {
        "retryTransaction": {
          "format": "byte",
          "type": "string",
          "description": "An optional transaction to retry."
        }
      },
      "description": "Options for a transaction that can be used to read and write documents.",
      "type": "object"
    },
    "Cursor": {
      "description": "A position in a query result set.",
      "properties": {
        "values": {
          "description": "The values that represent a position, in the order they appear in\nthe order by clause of a query.\n\nCan contain fewer values than specified in the order by clause.",
          "items": {
            "$ref": "Value"
          },
          "type": "array"
        },
        "before": {
          "description": "If the position is just before or just after the given values, relative\nto the sort order defined by the query.",
          "type": "boolean"
        }
      },
      "id": "Cursor",
      "type": "object"
    },
    "DocumentTransform": {
      "description": "A transformation of a document.",
      "id": "DocumentTransform",
      "properties": {
        "fieldTransforms": {
          "type": "array",
          "description": "The list of transformations to apply to the fields of the document, in\norder.\nThis must not be empty.",
          "items": {
            "$ref": "FieldTransform"
          }
        },
        "document": {
          "type": "string",
          "description": "The name of the document to transform."
        }
      },
      "type": "object"
    },
    "RunQueryRequest": {
      "id": "RunQueryRequest",
      "type": "object",
      "properties": {
        "structuredQuery": {
          "$ref": "StructuredQuery",
          "description": "A structured query."
        },
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "Reads documents in a transaction."
        },
        "readTime": {
          "format": "google-datetime",
          "description": "Reads documents as they were at the given time.\nThis may not be older than 270 seconds.",
          "type": "string"
        },
        "newTransaction": {
          "description": "Starts a new transaction and reads the documents.\nDefaults to a read-only transaction.\nThe new transaction ID will be returned as the first response in the\nstream.",
          "$ref": "TransactionOptions"
        }
      },
      "description": "The request for Firestore.RunQuery."
    },
    "BeginTransactionRequest": {
      "id": "BeginTransactionRequest",
      "type": "object",
      "description": "The request for Firestore.BeginTransaction.",
      "properties": {
        "options": {
          "description": "The options for the transaction.\nDefaults to a read-write transaction.",
          "$ref": "TransactionOptions"
        }
      }
    },
    "FieldFilter": {
      "id": "FieldFilter",
      "type": "object",
      "properties": {
        "field": {
          "description": "The field to filter by.",
          "$ref": "FieldReference"
        },
        "value": {
          "description": "The value to compare to.",
          "$ref": "Value"
        },
        "op": {
          "description": "The operator to filter by.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "ARRAY_CONTAINS",
            "IN",
            "ARRAY_CONTAINS_ANY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `field` is less than the given `value`.\n\nRequires:\n\n* That `field` come first in `order_by`.",
            "The given `field` is less than or equal to the given `value`.\n\nRequires:\n\n* That `field` come first in `order_by`.",
            "The given `field` is greater than the given `value`.\n\nRequires:\n\n* That `field` come first in `order_by`.",
            "The given `field` is greater than or equal to the given `value`.\n\nRequires:\n\n* That `field` come first in `order_by`.",
            "The given `field` is equal to the given `value`.",
            "The given `field` is an array that contains the given `value`.",
            "The given `field` is equal to at least one value in the given array.\n\nRequires:\n\n* That `value` is a non-empty `ArrayValue` with at most 10 values.\n* No other `IN` or `ARRAY_CONTAINS_ANY`.",
            "The given `field` is an array that contains any of the values in the\ngiven array.\n\nRequires:\n\n* That `value` is a non-empty `ArrayValue` with at most 10 values.\n* No other `IN` or `ARRAY_CONTAINS_ANY`."
          ]
        }
      },
      "description": "A filter on a specific field."
    },
    "GoogleFirestoreAdminV1ListFieldsResponse": {
      "id": "GoogleFirestoreAdminV1ListFieldsResponse",
      "type": "object",
      "description": "The response for FirestoreAdmin.ListFields.",
      "properties": {
        "fields": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Field"
          },
          "description": "The requested fields.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "A page token that may be used to request another page of results. If blank,\nthis is the last page.",
          "type": "string"
        }
      }
    },
    "ListDocumentsResponse": {
      "description": "The response for Firestore.ListDocuments.",
      "id": "ListDocumentsResponse",
      "properties": {
        "documents": {
          "description": "The Documents found.",
          "items": {
            "$ref": "Document"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next page token."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1ImportDocumentsMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.ImportDocuments.",
      "type": "object",
      "id": "GoogleFirestoreAdminV1ImportDocumentsMetadata",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids are being imported.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startTime": {
          "description": "The time this operation started.",
          "type": "string",
          "format": "google-datetime"
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in documents, of this operation."
        },
        "inputUriPrefix": {
          "description": "The location of the documents being imported.",
          "type": "string"
        },
        "operationState": {
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "type": "string",
          "description": "The state of the import operation.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ]
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in\nprogress."
        }
      }
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "type": "object",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      }
    },
    "GoogleFirestoreAdminV1ImportDocumentsRequest": {
      "id": "GoogleFirestoreAdminV1ImportDocumentsRequest",
      "type": "object",
      "description": "The request for FirestoreAdmin.ImportDocuments.",
      "properties": {
        "collectionIds": {
          "items": {
            "type": "string"
          },
          "description": "Which collection ids to import. Unspecified means all collections included\nin the import.",
          "type": "array"
        },
        "inputUriPrefix": {
          "type": "string",
          "description": "Location of the exported files.\nThis must match the output_uri_prefix of an ExportDocumentsResponse from\nan export that has completed successfully.\nSee:\ngoogle.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix."
        }
      }
    },
    "MapValue": {
      "id": "MapValue",
      "type": "object",
      "description": "A map value.",
      "properties": {
        "fields": {
          "type": "object",
          "description": "The map's fields.\n\nThe map keys represent field names. Field names matching the regular\nexpression `__.*__` are reserved. Reserved field names are forbidden except\nin certain documented contexts. The map keys, represented as UTF-8, must\nnot exceed 1,500 bytes and cannot be empty.",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      }
    },
    "Precondition": {
      "id": "Precondition",
      "type": "object",
      "description": "A precondition on a document, used for conditional operations.",
      "properties": {
        "exists": {
          "type": "boolean",
          "description": "When set to `true`, the target document must exist.\nWhen set to `false`, the target document must not exist."
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "When set, the target document must exist and have been last updated at\nthat time.",
          "type": "string"
        }
      }
    },
    "CollectionSelector": {
      "type": "object",
      "properties": {
        "allDescendants": {
          "type": "boolean",
          "description": "When false, selects only collections that are immediate children of\nthe `parent` specified in the containing `RunQueryRequest`.\nWhen true, selects all descendant collections."
        },
        "collectionId": {
          "description": "The collection ID.\nWhen set, selects only collections with this ID.",
          "type": "string"
        }
      },
      "description": "A selection of a collection, such as `messages as m1`.",
      "id": "CollectionSelector"
    },
    "PartitionQueryResponse": {
      "description": "The response for Firestore.PartitionQuery.",
      "properties": {
        "partitions": {
          "type": "array",
          "description": "Partition results.\nEach partition is a split point that can be used by RunQuery as a starting\nor end point for the query results. The RunQuery requests must be made with\nthe same query supplied to this PartitionQuery request. The partition\ncursors will be ordered according to same ordering as the results of the\nquery supplied to PartitionQuery.\n\nFor example, if a PartitionQuery request returns partition cursors A and B,\nrunning the following three queries will return the entire result set of\nthe original query:\n\n * query, end_at A\n * query, start_at A, end_at B\n * query, start_at B",
          "items": {
            "$ref": "Cursor"
          }
        },
        "nextPageToken": {
          "description": "A page token that may be used to request an additional set of results, up\nto the number specified by `partition_count` in the PartitionQuery request.\nIf blank, there are no more results.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "PartitionQueryResponse"
    },
    "ListCollectionIdsResponse": {
      "properties": {
        "collectionIds": {
          "description": "The collection ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "A page token that may be used to continue the list.",
          "type": "string"
        }
      },
      "id": "ListCollectionIdsResponse",
      "description": "The response from Firestore.ListCollectionIds.",
      "type": "object"
    },
    "BatchWriteRequest": {
      "description": "The request for Firestore.BatchWrite.",
      "properties": {
        "labels": {
          "description": "Labels associated with this batch write.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "writes": {
          "type": "array",
          "items": {
            "$ref": "Write"
          },
          "description": "The writes to apply.\n\nMethod does not apply writes atomically and does not guarantee ordering.\nEach write succeeds or fails independently. You cannot write to the same\ndocument more than once per request."
        }
      },
      "id": "BatchWriteRequest",
      "type": "object"
    },
    "ListenResponse": {
      "type": "object",
      "properties": {
        "targetChange": {
          "$ref": "TargetChange",
          "description": "Targets have changed."
        },
        "documentDelete": {
          "$ref": "DocumentDelete",
          "description": "A Document has been deleted."
        },
        "documentRemove": {
          "description": "A Document has been removed from a target (because it is no longer\nrelevant to that target).",
          "$ref": "DocumentRemove"
        },
        "filter": {
          "description": "A filter to apply to the set of documents previously returned for the\ngiven target.\n\nReturned when documents may have been removed from the given target, but\nthe exact documents are unknown.",
          "$ref": "ExistenceFilter"
        },
        "documentChange": {
          "description": "A Document has changed.",
          "$ref": "DocumentChange"
        }
      },
      "description": "The response for Firestore.Listen.",
      "id": "ListenResponse"
    },
    "WriteResponse": {
      "id": "WriteResponse",
      "type": "object",
      "description": "The response for Firestore.Write.",
      "properties": {
        "writeResults": {
          "description": "The result of applying the writes.\n\nThis i-th write result corresponds to the i-th write in the\nrequest.",
          "items": {
            "$ref": "WriteResult"
          },
          "type": "array"
        },
        "streamToken": {
          "format": "byte",
          "type": "string",
          "description": "A token that represents the position of this response in the stream.\nThis can be used by a client to resume the stream at this point.\n\nThis field is always set."
        },
        "streamId": {
          "type": "string",
          "description": "The ID of the stream.\nOnly set on the first message, when a new stream was created."
        },
        "commitTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the commit occurred. Any read with an equal or greater\n`read_time` is guaranteed to see the effects of the write."
        }
      }
    },
    "GoogleFirestoreAdminV1Progress": {
      "properties": {
        "completedWork": {
          "type": "string",
          "format": "int64",
          "description": "The amount of work completed."
        },
        "estimatedWork": {
          "type": "string",
          "format": "int64",
          "description": "The amount of work estimated."
        }
      },
      "id": "GoogleFirestoreAdminV1Progress",
      "type": "object",
      "description": "Describes the progress of the operation.\nUnit of work is generic and must be interpreted based on where Progress\nis used."
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "properties": {
        "locations": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructuredQuery": {
      "description": "A Firestore query.",
      "properties": {
        "select": {
          "$ref": "Projection",
          "description": "The projection to return."
        },
        "limit": {
          "description": "The maximum number of results to return.\n\nApplies after all other constraints.\nMust be \u003e= 0 if specified.",
          "format": "int32",
          "type": "integer"
        },
        "startAt": {
          "description": "A starting point for the query results.",
          "$ref": "Cursor"
        },
        "offset": {
          "description": "The number of results to skip.\n\nApplies before limit, but after all other constraints. Must be \u003e= 0 if\nspecified.",
          "format": "int32",
          "type": "integer"
        },
        "endAt": {
          "description": "A end point for the query results.",
          "$ref": "Cursor"
        },
        "orderBy": {
          "description": "The order to apply to the query results.\n\nFirestore guarantees a stable ordering through the following rules:\n\n * Any field required to appear in `order_by`, that is not already\n   specified in `order_by`, is appended to the order in field name order\n   by default.\n * If an order on `__name__` is not specified, it is appended by default.\n\nFields are appended with the same sort direction as the last order\nspecified, or 'ASCENDING' if no order was specified. For example:\n\n * `SELECT * FROM Foo ORDER BY A` becomes\n   `SELECT * FROM Foo ORDER BY A, __name__`\n * `SELECT * FROM Foo ORDER BY A DESC` becomes\n   `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`\n * `SELECT * FROM Foo WHERE A \u003e 1` becomes\n   `SELECT * FROM Foo WHERE A \u003e 1 ORDER BY A, __name__`",
          "items": {
            "$ref": "Order"
          },
          "type": "array"
        },
        "from": {
          "items": {
            "$ref": "CollectionSelector"
          },
          "description": "The collections to query.",
          "type": "array"
        },
        "where": {
          "$ref": "Filter",
          "description": "The filter to apply."
        }
      },
      "type": "object",
      "id": "StructuredQuery"
    },
    "ListCollectionIdsRequest": {
      "id": "ListCollectionIdsRequest",
      "description": "The request for Firestore.ListCollectionIds.",
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "description": "The maximum number of results to return.",
          "format": "int32"
        },
        "pageToken": {
          "type": "string",
          "description": "A page token. Must be a value from\nListCollectionIdsResponse."
        }
      }
    },
    "BatchWriteResponse": {
      "properties": {
        "status": {
          "items": {
            "$ref": "Status"
          },
          "type": "array",
          "description": "The status of applying the writes.\n\nThis i-th write status corresponds to the i-th write in the\nrequest."
        },
        "writeResults": {
          "description": "The result of applying the writes.\n\nThis i-th write result corresponds to the i-th write in the\nrequest.",
          "type": "array",
          "items": {
            "$ref": "WriteResult"
          }
        }
      },
      "id": "BatchWriteResponse",
      "type": "object",
      "description": "The response from Firestore.BatchWrite."
    },
    "ArrayValue": {
      "id": "ArrayValue",
      "type": "object",
      "description": "An array value.",
      "properties": {
        "values": {
          "description": "Values in the array.",
          "items": {
            "$ref": "Value"
          },
          "type": "array"
        }
      }
    },
    "GoogleFirestoreAdminV1IndexField": {
      "type": "object",
      "properties": {
        "fieldPath": {
          "type": "string",
          "description": "Can be __name__.\nFor single field indexes, this must match the name of the field or may\nbe omitted."
        },
        "order": {
          "description": "Indicates that this field supports ordering by the specified order or\ncomparing using =, \u003c, \u003c=, \u003e, \u003e=.",
          "enum": [
            "ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "The ordering is unspecified. Not a valid option.",
            "The field is ordered by ascending field value.",
            "The field is ordered by descending field value."
          ],
          "type": "string"
        },
        "arrayConfig": {
          "enum": [
            "ARRAY_CONFIG_UNSPECIFIED",
            "CONTAINS"
          ],
          "enumDescriptions": [
            "The index does not support additional array queries.",
            "The index supports array containment queries."
          ],
          "description": "Indicates that this field supports operations on `array_value`s.",
          "type": "string"
        }
      },
      "description": "A field in an index.\nThe field_path describes which field is indexed, the value_mode describes\nhow the field value is indexed.",
      "id": "GoogleFirestoreAdminV1IndexField"
    },
    "Write": {
      "type": "object",
      "id": "Write",
      "description": "A write on a document.",
      "properties": {
        "delete": {
          "type": "string",
          "description": "A document name to delete. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        },
        "updateMask": {
          "$ref": "DocumentMask",
          "description": "The fields to update in this write.\n\nThis field can be set only when the operation is `update`.\nIf the mask is not set for an `update` and the document exists, any\nexisting data will be overwritten.\nIf the mask is set and the document on the server has fields not covered by\nthe mask, they are left unchanged.\nFields referenced in the mask, but not present in the input document, are\ndeleted from the document on the server.\nThe field paths in this mask must not contain a reserved field name."
        },
        "transform": {
          "$ref": "DocumentTransform",
          "description": "Applies a transformation to a document."
        },
        "updateTransforms": {
          "description": "The transforms to perform after update.\n\nThis field can be set only when the operation is `update`. If present, this\nwrite is equivalent to performing `update` and `transform` to the same\ndocument atomically and in order.",
          "items": {
            "$ref": "FieldTransform"
          },
          "type": "array"
        },
        "currentDocument": {
          "$ref": "Precondition",
          "description": "An optional precondition on the document.\n\nThe write will fail if this is set and not met by the target document."
        },
        "update": {
          "description": "A document to write.",
          "$ref": "Document"
        }
      }
    },
    "UnaryFilter": {
      "type": "object",
      "id": "UnaryFilter",
      "properties": {
        "field": {
          "description": "The field to which to apply the operator.",
          "$ref": "FieldReference"
        },
        "op": {
          "description": "The unary operator to apply.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `field` is equal to `NaN`.",
            "The given `field` is equal to `NULL`."
          ],
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "IS_NAN",
            "IS_NULL"
          ]
        }
      },
      "description": "A filter with a single operand."
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object"
    },
    "GoogleFirestoreAdminV1LocationMetadata": {
      "type": "object",
      "properties": {},
      "id": "GoogleFirestoreAdminV1LocationMetadata",
      "description": "The metadata message for google.cloud.location.Location.metadata."
    },
    "BatchGetDocumentsResponse": {
      "description": "The streamed response for Firestore.BatchGetDocuments.",
      "id": "BatchGetDocumentsResponse",
      "type": "object",
      "properties": {
        "readTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the document was read.\nThis may be monotically increasing, in this case the previous documents in\nthe result stream are guaranteed not to have changed between their\nread_time and this one."
        },
        "missing": {
          "type": "string",
          "description": "A document name that was requested but does not exist. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        },
        "found": {
          "description": "A document that was requested.",
          "$ref": "Document"
        },
        "transaction": {
          "format": "byte",
          "description": "The transaction that was started as part of this request.\nWill only be set in the first response, and only if\nBatchGetDocumentsRequest.new_transaction was set in the request.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1FieldOperationMetadata": {
      "id": "GoogleFirestoreAdminV1FieldOperationMetadata",
      "properties": {
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "indexConfigDeltas": {
          "description": "A list of IndexConfigDelta, which describe the intent of this\noperation.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1IndexConfigDelta"
          },
          "type": "array"
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "field": {
          "description": "The field resource that this operation is acting on. For example:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation started."
        },
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the operation."
        }
      },
      "type": "object",
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.UpdateField."
    },
    "WriteResult": {
      "properties": {
        "transformResults": {
          "type": "array",
          "description": "The results of applying each DocumentTransform.FieldTransform, in the\nsame order.",
          "items": {
            "$ref": "Value"
          }
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "The last update time of the document after applying the write. Not set\nafter a `delete`.\n\nIf the write did not actually change the document, this will be the\nprevious update_time.",
          "type": "string"
        }
      },
      "description": "The result of applying a write.",
      "id": "WriteResult",
      "type": "object"
    },
    "PartitionQueryRequest": {
      "description": "The request for Firestore.PartitionQuery.",
      "properties": {
        "structuredQuery": {
          "$ref": "StructuredQuery",
          "description": "A structured query.\nFilters, order bys, limits, offsets, and start/end cursors are not\nsupported."
        },
        "partitionCount": {
          "format": "int64",
          "type": "string",
          "description": "The desired maximum number of partition points.\nThe partitions may be returned across multiple pages of results.\nThe number must be strictly positive. The actual number of partitions\nreturned may be fewer.\n\nFor example, this may be set to one fewer than the number of parallel\nqueries to be run, or in running a data pipeline job, one fewer than the\nnumber of workers or compute instances available."
        },
        "pageToken": {
          "description": "The `next_page_token` value returned from a previous call to\nPartitionQuery that may be used to get an additional set of results.\nThere are no ordering guarantees between sets of results. Thus, using\nmultiple sets of results will require merging the different result sets.\n\nFor example, two subsequent calls using a page_token may return:\n\n * cursor B, cursor M, cursor Q\n * cursor A, cursor U, cursor W\n\nTo obtain a complete result set ordered with respect to the results of the\nquery supplied to PartitionQuery, the results sets should be merged:\ncursor A, cursor B, cursor M, cursor Q, cursor U, cursor W",
          "type": "string"
        },
        "pageSize": {
          "format": "int32",
          "description": "The maximum number of partitions to return in this call, subject to\n`partition_count`.\n\nFor example, if `partition_count` = 10 and `page_size` = 8, the first call\nto PartitionQuery will return up to 8 partitions and a `next_page_token`\nif more results exist. A second call to PartitionQuery will return up to\n2 partitions, to complete the total of 10 specified in `partition_count`.",
          "type": "integer"
        }
      },
      "id": "PartitionQueryRequest",
      "type": "object"
    },
    "GoogleFirestoreAdminV1ExportDocumentsResponse": {
      "type": "object",
      "description": "Returned in the google.longrunning.Operation response field.",
      "properties": {
        "outputUriPrefix": {
          "description": "Location of the output files. This can be used to begin an import\ninto Cloud Firestore (this project or another project) after the operation\ncompletes successfully.",
          "type": "string"
        }
      },
      "id": "GoogleFirestoreAdminV1ExportDocumentsResponse"
    },
    "GoogleLongrunningCancelOperationRequest": {
      "properties": {},
      "id": "GoogleLongrunningCancelOperationRequest",
      "type": "object",
      "description": "The request message for Operations.CancelOperation."
    },
    "CompositeFilter": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters."
          ],
          "description": "The operator for combining multiple filters."
        },
        "filters": {
          "description": "The list of filters to combine.\nMust contain at least one filter.",
          "type": "array",
          "items": {
            "$ref": "Filter"
          }
        }
      },
      "id": "CompositeFilter",
      "description": "A filter that merges multiple other filters using the given operator."
    },
    "GoogleLongrunningListOperationsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "items": {
            "$ref": "GoogleLongrunningOperation"
          },
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request."
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "id": "GoogleLongrunningListOperationsResponse"
    },
    "Target": {
      "description": "A specification of a set of documents to listen to.",
      "id": "Target",
      "type": "object",
      "properties": {
        "documents": {
          "$ref": "DocumentsTarget",
          "description": "A target specified by a set of document names."
        },
        "query": {
          "description": "A target specified by a query.",
          "$ref": "QueryTarget"
        },
        "readTime": {
          "description": "Start listening after a specific `read_time`.\n\nThe client must know the state of matching documents at this time.",
          "type": "string",
          "format": "google-datetime"
        },
        "targetId": {
          "type": "integer",
          "format": "int32",
          "description": "The target ID that identifies the target on the stream. Must be a positive\nnumber and non-zero."
        },
        "resumeToken": {
          "description": "A resume token from a prior TargetChange for an identical target.\n\nUsing a resume token with a different target is unsupported and may fail.",
          "type": "string",
          "format": "byte"
        },
        "once": {
          "type": "boolean",
          "description": "If the target should be removed once it is current and consistent."
        }
      }
    },
    "ListenRequest": {
      "id": "ListenRequest",
      "properties": {
        "addTarget": {
          "$ref": "Target",
          "description": "A target to add to this stream."
        },
        "labels": {
          "description": "Labels associated with this target change.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "removeTarget": {
          "type": "integer",
          "description": "The ID of a target to remove from this stream.",
          "format": "int32"
        }
      },
      "type": "object",
      "description": "A request for Firestore.Listen"
    },
    "DocumentChange": {
      "type": "object",
      "properties": {
        "removedTargetIds": {
          "description": "A set of target IDs for targets that no longer match this document.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "document": {
          "description": "The new state of the Document.\n\nIf `mask` is set, contains only fields that were updated or added.",
          "$ref": "Document"
        },
        "targetIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "description": "A set of target IDs of targets that match this document."
        }
      },
      "description": "A Document has changed.\n\nMay be the result of multiple writes, including deletes, that\nultimately resulted in a new value for the Document.\n\nMultiple DocumentChange messages may be returned for the same logical\nchange, if multiple targets are affected.",
      "id": "DocumentChange"
    }
  },
  "ownerDomain": "google.com",
  "documentationLink": "https://cloud.google.com/firestore",
  "ownerName": "Google",
  "protocol": "rest",
  "servicePath": "",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://firestore.mtls.googleapis.com/",
  "discoveryVersion": "v1",
  "title": "Cloud Firestore API",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "rootUrl": "https://firestore.googleapis.com/",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "alt": {
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "databases": {
          "resources": {
            "operations": {
              "methods": {
                "cancel": {
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}:cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "GoogleLongrunningCancelOperationRequest"
                  },
                  "id": "firestore.projects.databases.operations.cancel",
                  "path": "v1/{+name}:cancel",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+name}",
                  "id": "firestore.projects.databases.operations.get",
                  "response": {
                    "$ref": "GoogleLongrunningOperation"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
                  "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "description": "The name of the operation resource.",
                      "required": true,
                      "location": "path"
                    }
                  }
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$"
                    }
                  },
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
                  "id": "firestore.projects.databases.operations.delete",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "list": {
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "GoogleLongrunningListOperationsResponse"
                  },
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "description": "The standard list filter.",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "The standard list page size."
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "location": "path",
                      "description": "The name of the operation's parent resource.",
                      "required": true
                    }
                  },
                  "id": "firestore.projects.databases.operations.list",
                  "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}/operations",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ]
                }
              }
            },
            "documents": {
              "methods": {
                "beginTransaction": {
                  "parameterOrder": [
                    "database"
                  ],
                  "path": "v1/{+database}/documents:beginTransaction",
                  "id": "firestore.projects.databases.documents.beginTransaction",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "BeginTransactionRequest"
                  },
                  "response": {
                    "$ref": "BeginTransactionResponse"
                  },
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:beginTransaction",
                  "description": "Starts a new transaction."
                },
                "batchGet": {
                  "request": {
                    "$ref": "BatchGetDocumentsRequest"
                  },
                  "parameterOrder": [
                    "database"
                  ],
                  "description": "Gets multiple documents.\n\nDocuments returned by this method are not guaranteed to be returned in the\nsame order that they were requested.",
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "response": {
                    "$ref": "BatchGetDocumentsResponse"
                  },
                  "path": "v1/{+database}/documents:batchGet",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:batchGet",
                  "httpMethod": "POST",
                  "id": "firestore.projects.databases.documents.batchGet"
                },
                "get": {
                  "id": "firestore.projects.databases.documents.get",
                  "parameters": {
                    "transaction": {
                      "description": "Reads the document in a transaction.",
                      "format": "byte",
                      "type": "string",
                      "location": "query"
                    },
                    "mask.fieldPaths": {
                      "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference.",
                      "type": "string",
                      "repeated": true,
                      "location": "query"
                    },
                    "readTime": {
                      "format": "google-datetime",
                      "type": "string",
                      "description": "Reads the version of the document at the given time.\nThis may not be older than 270 seconds.",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "required": true,
                      "type": "string",
                      "description": "Required. The resource name of the Document to get. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`."
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "response": {
                    "$ref": "Document"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "description": "Gets a single document.",
                  "path": "v1/{+name}"
                },
                "runQuery": {
                  "request": {
                    "$ref": "RunQueryRequest"
                  },
                  "id": "firestore.projects.databases.documents.runQuery",
                  "response": {
                    "$ref": "RunQueryResponse"
                  },
                  "path": "v1/{+parent}:runQuery",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The parent resource name. In the format:\n`projects/{project_id}/databases/{database_id}/documents` or\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nFor example:\n`projects/my-project/databases/my-database/documents` or\n`projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Runs a query.",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runQuery",
                  "httpMethod": "POST"
                },
                "rollback": {
                  "parameterOrder": [
                    "database"
                  ],
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:rollback",
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "type": "string"
                    }
                  },
                  "description": "Rolls back a transaction.",
                  "path": "v1/{+database}/documents:rollback",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "POST",
                  "id": "firestore.projects.databases.documents.rollback",
                  "request": {
                    "$ref": "RollbackRequest"
                  }
                },
                "createDocument": {
                  "path": "v1/{+parent}/{collectionId}",
                  "request": {
                    "$ref": "Document"
                  },
                  "description": "Creates a new document.",
                  "id": "firestore.projects.databases.documents.createDocument",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/.*$",
                      "location": "path",
                      "description": "Required. The parent resource. For example:\n`projects/{project_id}/databases/{database_id}/documents` or\n`projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`"
                    },
                    "collectionId": {
                      "required": true,
                      "description": "Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.",
                      "type": "string",
                      "location": "path"
                    },
                    "documentId": {
                      "type": "string",
                      "description": "The client-assigned document ID to use for this document.\n\nOptional. If not specified, an ID will be assigned by the service.",
                      "location": "query"
                    },
                    "mask.fieldPaths": {
                      "repeated": true,
                      "location": "query",
                      "type": "string",
                      "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference."
                    }
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent",
                    "collectionId"
                  ],
                  "response": {
                    "$ref": "Document"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{collectionId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ]
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "DELETE",
                  "description": "Deletes a document.",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. The resource name of the Document to delete. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$"
                    },
                    "currentDocument.exists": {
                      "location": "query",
                      "type": "boolean",
                      "description": "When set to `true`, the target document must exist.\nWhen set to `false`, the target document must not exist."
                    },
                    "currentDocument.updateTime": {
                      "type": "string",
                      "format": "google-datetime",
                      "description": "When set, the target document must exist and have been last updated at\nthat time.",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "id": "firestore.projects.databases.documents.delete"
                },
                "commit": {
                  "parameterOrder": [
                    "database"
                  ],
                  "request": {
                    "$ref": "CommitRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameters": {
                    "database": {
                      "required": true,
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "location": "path"
                    }
                  },
                  "id": "firestore.projects.databases.documents.commit",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "CommitResponse"
                  },
                  "path": "v1/{+database}/documents:commit",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:commit",
                  "description": "Commits a transaction, while optionally updating documents."
                },
                "batchWrite": {
                  "path": "v1/{+database}/documents:batchWrite",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:batchWrite",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "BatchWriteRequest"
                  },
                  "id": "firestore.projects.databases.documents.batchWrite",
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+$"
                    }
                  },
                  "httpMethod": "POST",
                  "description": "Applies a batch of write operations.\n\nThe BatchWrite method does not apply the write operations atomically\nand can apply them out of order. Method does not allow more than one write\nper document. Each write succeeds or fails independently. See the\nBatchWriteResponse for the success status of each write.\n\nIf you require an atomically applied set of writes, use\nCommit instead.",
                  "parameterOrder": [
                    "database"
                  ],
                  "response": {
                    "$ref": "BatchWriteResponse"
                  }
                },
                "listen": {
                  "response": {
                    "$ref": "ListenResponse"
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "description": "Listens to changes.",
                  "parameterOrder": [
                    "database"
                  ],
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:listen",
                  "request": {
                    "$ref": "ListenRequest"
                  },
                  "path": "v1/{+database}/documents:listen",
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "id": "firestore.projects.databases.documents.listen"
                },
                "write": {
                  "description": "Streams batches of document updates and deletes, in order.",
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format:\n`projects/{project_id}/databases/{database_id}`.\nThis is only required in the first message.",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+$"
                    }
                  },
                  "id": "firestore.projects.databases.documents.write",
                  "parameterOrder": [
                    "database"
                  ],
                  "response": {
                    "$ref": "WriteResponse"
                  },
                  "request": {
                    "$ref": "WriteRequest"
                  },
                  "path": "v1/{+database}/documents:write",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:write"
                },
                "listCollectionIds": {
                  "request": {
                    "$ref": "ListCollectionIdsRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:listCollectionIds",
                  "description": "Lists all the collection IDs underneath a document.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "ListCollectionIdsResponse"
                  },
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "description": "Required. The parent document. In the format:\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nFor example:\n`projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "type": "string",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}:listCollectionIds",
                  "id": "firestore.projects.databases.documents.listCollectionIds"
                },
                "partitionQuery": {
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name. In the format:\n`projects/{project_id}/databases/{database_id}/documents`.\nDocument resource names are not supported; only database resource names\ncan be specified.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "PartitionQueryResponse"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:partitionQuery",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firestore.projects.databases.documents.partitionQuery",
                  "request": {
                    "$ref": "PartitionQueryRequest"
                  },
                  "description": "Partitions a query by returning partition cursors that can be used to run\nthe query in parallel. The returned partition cursors are split points that\ncan be used by RunQuery as starting/end points for the query results.",
                  "path": "v1/{+parent}:partitionQuery"
                },
                "list": {
                  "parameters": {
                    "collectionId": {
                      "location": "path",
                      "description": "Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\nor `messages`.",
                      "type": "string",
                      "required": true
                    },
                    "transaction": {
                      "type": "string",
                      "format": "byte",
                      "location": "query",
                      "description": "Reads documents in a transaction."
                    },
                    "pageSize": {
                      "description": "The maximum number of documents to return.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The `next_page_token` value returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "required": true,
                      "type": "string",
                      "description": "Required. The parent resource name. In the format:\n`projects/{project_id}/databases/{database_id}/documents` or\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`.\nFor example:\n`projects/my-project/databases/my-database/documents` or\n`projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`"
                    },
                    "showMissing": {
                      "location": "query",
                      "description": "If the list should show missing documents. A missing document is a\ndocument that does not exist but has sub-documents. These documents will\nbe returned with a key but will not have fields, Document.create_time,\nor Document.update_time set.\n\nRequests with `show_missing` may not specify `where` or\n`order_by`.",
                      "type": "boolean"
                    },
                    "mask.fieldPaths": {
                      "repeated": true,
                      "location": "query",
                      "type": "string",
                      "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference."
                    },
                    "orderBy": {
                      "location": "query",
                      "type": "string",
                      "description": "The order to sort results by. For example: `priority desc, name`."
                    },
                    "readTime": {
                      "type": "string",
                      "description": "Reads documents as they were at the given time.\nThis may not be older than 270 seconds.",
                      "format": "google-datetime",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}/{collectionId}",
                  "id": "firestore.projects.databases.documents.list",
                  "description": "Lists documents.",
                  "httpMethod": "GET",
                  "path": "v1/{+parent}/{collectionId}",
                  "response": {
                    "$ref": "ListDocumentsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "parent",
                    "collectionId"
                  ]
                },
                "patch": {
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Document"
                  },
                  "response": {
                    "$ref": "Document"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "id": "firestore.projects.databases.documents.patch",
                  "parameters": {
                    "currentDocument.exists": {
                      "location": "query",
                      "description": "When set to `true`, the target document must exist.\nWhen set to `false`, the target document must not exist.",
                      "type": "boolean"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "The resource name of the document, for example\n`projects/{project_id}/databases/{database_id}/documents/{document_path}`."
                    },
                    "updateMask.fieldPaths": {
                      "type": "string",
                      "location": "query",
                      "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference.",
                      "repeated": true
                    },
                    "currentDocument.updateTime": {
                      "description": "When set, the target document must exist and have been last updated at\nthat time.",
                      "location": "query",
                      "type": "string",
                      "format": "google-datetime"
                    },
                    "mask.fieldPaths": {
                      "location": "query",
                      "description": "The list of field paths in the mask. See Document.fields for a field\npath syntax reference.",
                      "repeated": true,
                      "type": "string"
                    }
                  },
                  "description": "Updates or inserts a document.",
                  "httpMethod": "PATCH"
                }
              }
            },
            "collectionGroups": {
              "resources": {
                "indexes": {
                  "methods": {
                    "get": {
                      "path": "v1/{+name}",
                      "description": "Gets a composite index.",
                      "id": "firestore.projects.databases.collectionGroups.indexes.get",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1Index"
                      },
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}"
                    },
                    "list": {
                      "path": "v1/{+parent}/indexes",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1ListIndexesResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "id": "firestore.projects.databases.collectionGroups.indexes.list",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "description": "A page token, returned from a previous call to\nFirestoreAdmin.ListIndexes, that may be used to get the next\npage of results.",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "The number of results to return.",
                          "format": "int32",
                          "location": "query"
                        },
                        "filter": {
                          "location": "query",
                          "description": "The filter to apply to list results.",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Required. A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "description": "Lists composite indexes."
                    },
                    "create": {
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "description": "Required. A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "description": "Creates a composite index. This returns a google.longrunning.Operation\nwhich may be used to track the status of the creation. The metadata for\nthe operation will be the type IndexOperationMetadata.",
                      "path": "v1/{+parent}/indexes",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1Index"
                      },
                      "httpMethod": "POST",
                      "id": "firestore.projects.databases.collectionGroups.indexes.create"
                    },
                    "delete": {
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "Required. A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "location": "path",
                          "required": true
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "id": "firestore.projects.databases.collectionGroups.indexes.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "path": "v1/{+name}",
                      "httpMethod": "DELETE",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "description": "Deletes a composite index."
                    }
                  }
                },
                "fields": {
                  "methods": {
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "firestore.projects.databases.collectionGroups.fields.list",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1ListFieldsResponse"
                      },
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "description": "Required. A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "location": "path",
                          "required": true
                        },
                        "pageToken": {
                          "description": "A page token, returned from a previous call to\nFirestoreAdmin.ListFields, that may be used to get the next\npage of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "type": "string",
                          "description": "The filter to apply to list results. Currently,\nFirestoreAdmin.ListFields only supports listing fields\nthat have been explicitly overridden. To issue this query, call\nFirestoreAdmin.ListFields with the filter set to\n`indexConfig.usesAncestorConfig:false`.",
                          "location": "query"
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "type": "integer",
                          "description": "The number of results to return."
                        }
                      },
                      "path": "v1/{+parent}/fields",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "httpMethod": "GET",
                      "description": "Lists the field configuration and metadata for this database.\n\nCurrently, FirestoreAdmin.ListFields only supports listing fields\nthat have been explicitly overridden. To issue this query, call\nFirestoreAdmin.ListFields with the filter set to\n`indexConfig.usesAncestorConfig:false`.",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields"
                    },
                    "patch": {
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "description": "Updates a field configuration. Currently, field updates apply only to\nsingle field index configuration. However, calls to\nFirestoreAdmin.UpdateField should provide a field mask to avoid\nchanging any configuration that the caller isn't aware of. The field mask\nshould be specified as: `{ paths: \"index_config\" }`.\n\nThis call returns a google.longrunning.Operation which may be used to\ntrack the status of the field update. The metadata for\nthe operation will be the type FieldOperationMetadata.\n\nTo configure the default field settings for the database, use\nthe special `Field` with resource name:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "A field name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`\n\nA field path may be a simple field name, e.g. `address` or a path to fields\nwithin map_value , e.g. `address.city`,\nor a special field path. The only valid special field is `*`, which\nrepresents any field.\n\nField paths may be quoted using ` (backtick). The only character that needs\nto be escaped within a quoted field path is the backtick character itself,\nescaped using a backslash. Special characters in field paths that\nmust be quoted include: `*`, `.`,\n``` (backtick), `[`, `]`, as well as any ascii symbolic characters.\n\nExamples:\n(Note: Comments here are written in markdown syntax, so there is an\n additional layer of backticks to represent a code block)\n`\\`address.city\\`` represents a field named `address.city`, not the map key\n`city` in the field `address`.\n`\\`*\\`` represents a field named `*`, not any field.\n\nA special `Field` contains the default indexing settings for all fields.\nThis field's resource name is:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`\nIndexes defined on this `Field` will be applied to all fields which do not\nhave their own `Field` index configuration."
                        },
                        "updateMask": {
                          "location": "query",
                          "format": "google-fieldmask",
                          "description": "A mask, relative to the field. If specified, only configuration specified\nby this field_mask will be updated in the field.",
                          "type": "string"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "id": "firestore.projects.databases.collectionGroups.fields.patch",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1Field"
                      },
                      "path": "v1/{+name}",
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "get": {
                      "description": "Gets the metadata and configuration for a Field.",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "httpMethod": "GET",
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1Field"
                      },
                      "id": "firestore.projects.databases.collectionGroups.fields.get",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "description": "Required. A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`",
                          "location": "path",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "exportDocuments": {
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "id": "firestore.projects.databases.exportDocuments",
              "path": "v1/{+name}:exportDocuments",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}:exportDocuments",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "type": "string",
                  "description": "Required. Database to export. Should be of the form:\n`projects/{project_id}/databases/{database_id}`.",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore\nto another storage system, such as Google Cloud Storage. Recent updates to\ndocuments may not be reflected in the export. The export occurs in the\nbackground and its progress can be monitored and managed via the\nOperation resource that is created. The output of an export may only be\nused once the associated operation is done. If an export operation is\ncancelled before completion it may leave partial data behind in Google\nCloud Storage.",
              "request": {
                "$ref": "GoogleFirestoreAdminV1ExportDocumentsRequest"
              }
            },
            "importDocuments": {
              "description": "Imports documents into Google Cloud Firestore. Existing documents with the\nsame name are overwritten. The import occurs in the background and its\nprogress can be monitored and managed via the Operation resource that is\ncreated. If an ImportDocuments operation is cancelled, it is possible\nthat a subset of the data has already been imported to Cloud Firestore.",
              "request": {
                "$ref": "GoogleFirestoreAdminV1ImportDocumentsRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:importDocuments",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. Database to import into. Should be of the form:\n`projects/{project_id}/databases/{database_id}`.",
                  "required": true,
                  "pattern": "^projects/[^/]+/databases/[^/]+$"
                }
              },
              "id": "firestore.projects.databases.importDocuments",
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}:importDocuments"
            }
          }
        },
        "locations": {
          "methods": {
            "list": {
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "The standard list filter.",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The resource that owns the locations collection, if applicable."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The standard list page token."
                }
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "description": "Lists information about the supported locations for this service.",
              "flatPath": "v1/projects/{projectsId}/locations",
              "id": "firestore.projects.locations.list",
              "path": "v1/{+name}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "httpMethod": "GET"
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "description": "Resource name for the location.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "id": "firestore.projects.locations.get",
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets information about a location.",
              "response": {
                "$ref": "Location"
              },
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}"
            }
          }
        }
      }
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "name": "firestore",
  "revision": "20200725",
  "version_module": true,
  "id": "firestore:v1",
  "description": "Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development.\n"
}
