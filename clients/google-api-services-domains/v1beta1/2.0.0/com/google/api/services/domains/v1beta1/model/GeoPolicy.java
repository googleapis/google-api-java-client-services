/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.domains.v1beta1.model;

/**
 * Configures a `RRSetRoutingPolicy` that routes based on the geo location of the querying user.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Domains API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeoPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Without fencing, if health check fails for all configured items in the current geo bucket, we
   * failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long
   * as some targets in the current geo bucket are healthy, we return only the healthy targets.
   * However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead,
   * we return all the items in the current bucket even when all targets are unhealthy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableFencing;

  /**
   * The primary geo routing configuration. If there are multiple items with the same location, an
   * error is returned instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeoPolicyItem> item;

  /**
   * Without fencing, if health check fails for all configured items in the current geo bucket, we
   * failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long
   * as some targets in the current geo bucket are healthy, we return only the healthy targets.
   * However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead,
   * we return all the items in the current bucket even when all targets are unhealthy.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableFencing() {
    return enableFencing;
  }

  /**
   * Without fencing, if health check fails for all configured items in the current geo bucket, we
   * failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long
   * as some targets in the current geo bucket are healthy, we return only the healthy targets.
   * However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead,
   * we return all the items in the current bucket even when all targets are unhealthy.
   * @param enableFencing enableFencing or {@code null} for none
   */
  public GeoPolicy setEnableFencing(java.lang.Boolean enableFencing) {
    this.enableFencing = enableFencing;
    return this;
  }

  /**
   * The primary geo routing configuration. If there are multiple items with the same location, an
   * error is returned instead.
   * @return value or {@code null} for none
   */
  public java.util.List<GeoPolicyItem> getItem() {
    return item;
  }

  /**
   * The primary geo routing configuration. If there are multiple items with the same location, an
   * error is returned instead.
   * @param item item or {@code null} for none
   */
  public GeoPolicy setItem(java.util.List<GeoPolicyItem> item) {
    this.item = item;
    return this;
  }

  @Override
  public GeoPolicy set(String fieldName, Object value) {
    return (GeoPolicy) super.set(fieldName, value);
  }

  @Override
  public GeoPolicy clone() {
    return (GeoPolicy) super.clone();
  }

}
