/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message is used internally in Amarna and is also used to store information in the
 * VideoWebAttachment portion of the websearch index. Only the following fields will be used in the
 * index: VideoPreviewType type int32 width int32 height byte byte_size If more fields are added,
 * please update this list.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageBaseVideoPreviewMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Size of the stored preview.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer byteSize;

  /**
   * 64 bit docid of the original video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger docid;

  /**
   * TODO (yzliu): consider using duration_ms as field name since it is number of milliseconds.
   * Duration of the preview in ms.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer duration;

  /**
   * Expiration timestamp of preview in microseconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long expirationTimestampMicros;

  /**
   * LINT.ThenChange(//depot/google3/video/crawl/indexing/signal_combiner.cc:video_preview)
   * Fingerprint of the preview.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger fprint;

  /**
   * Height of the stored preview.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * Mime type of the preview ("video/mp4").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mimeType;

  /**
   * Indicates the state in Venom for this preview type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Timestamp of start of preview in ms.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timestamp;

  /**
   * LINT.IfChange
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Width of the stored preview.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * Size of the stored preview.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getByteSize() {
    return byteSize;
  }

  /**
   * Size of the stored preview.
   * @param byteSize byteSize or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setByteSize(java.lang.Integer byteSize) {
    this.byteSize = byteSize;
    return this;
  }

  /**
   * 64 bit docid of the original video.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDocid() {
    return docid;
  }

  /**
   * 64 bit docid of the original video.
   * @param docid docid or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setDocid(java.math.BigInteger docid) {
    this.docid = docid;
    return this;
  }

  /**
   * TODO (yzliu): consider using duration_ms as field name since it is number of milliseconds.
   * Duration of the preview in ms.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDuration() {
    return duration;
  }

  /**
   * TODO (yzliu): consider using duration_ms as field name since it is number of milliseconds.
   * Duration of the preview in ms.
   * @param duration duration or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setDuration(java.lang.Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Expiration timestamp of preview in microseconds since epoch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExpirationTimestampMicros() {
    return expirationTimestampMicros;
  }

  /**
   * Expiration timestamp of preview in microseconds since epoch.
   * @param expirationTimestampMicros expirationTimestampMicros or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setExpirationTimestampMicros(java.lang.Long expirationTimestampMicros) {
    this.expirationTimestampMicros = expirationTimestampMicros;
    return this;
  }

  /**
   * LINT.ThenChange(//depot/google3/video/crawl/indexing/signal_combiner.cc:video_preview)
   * Fingerprint of the preview.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getFprint() {
    return fprint;
  }

  /**
   * LINT.ThenChange(//depot/google3/video/crawl/indexing/signal_combiner.cc:video_preview)
   * Fingerprint of the preview.
   * @param fprint fprint or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setFprint(java.math.BigInteger fprint) {
    this.fprint = fprint;
    return this;
  }

  /**
   * Height of the stored preview.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * Height of the stored preview.
   * @param height height or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Mime type of the preview ("video/mp4").
   * @return value or {@code null} for none
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }

  /**
   * Mime type of the preview ("video/mp4").
   * @param mimeType mimeType or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setMimeType(java.lang.String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Indicates the state in Venom for this preview type.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Indicates the state in Venom for this preview type.
   * @param state state or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Timestamp of start of preview in ms.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimestamp() {
    return timestamp;
  }

  /**
   * Timestamp of start of preview in ms.
   * @param timestamp timestamp or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setTimestamp(java.lang.Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * LINT.IfChange
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * LINT.IfChange
   * @param type type or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Width of the stored preview.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * Width of the stored preview.
   * @param width width or {@code null} for none
   */
  public ImageBaseVideoPreviewMetadata setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public ImageBaseVideoPreviewMetadata set(String fieldName, Object value) {
    return (ImageBaseVideoPreviewMetadata) super.set(fieldName, value);
  }

  @Override
  public ImageBaseVideoPreviewMetadata clone() {
    return (ImageBaseVideoPreviewMetadata) super.clone();
  }

}
