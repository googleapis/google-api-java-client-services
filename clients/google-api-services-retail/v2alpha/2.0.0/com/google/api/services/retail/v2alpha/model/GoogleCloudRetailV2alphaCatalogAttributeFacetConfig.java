/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.retail.v2alpha.model;

/**
 * Possible options for the facet that corresponds to the current attribute config.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Retail API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRetailV2alphaCatalogAttributeFacetConfig extends com.google.api.client.json.GenericJson {

  /**
   * If you don't set the facet SearchRequest.FacetSpec.FacetKey.intervals in the request to a
   * numerical attribute, then we use the computed intervals with rounded bounds obtained from all
   * its product numerical attribute values. The computed intervals might not be ideal for some
   * attributes. Therefore, we give you the option to overwrite them with the facet_intervals field.
   * The maximum of facet intervals per CatalogAttribute is 40. Each interval must have a lower
   * bound or an upper bound. If both bounds are provided, then the lower bound must be smaller or
   * equal than the upper bound.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudRetailV2alphaInterval> facetIntervals;

  /**
   * Each instance represents a list of attribute values to ignore as facet values for a specific
   * time range. The maximum number of instances per CatalogAttribute is 25.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues> ignoredFacetValues;

  /**
   * Each instance replaces a list of facet values by a merged facet value. If a facet value is not
   * in any list, then it will stay the same. To avoid conflicts, only paths of length 1 are
   * accepted. In other words, if "dark_blue" merged into "BLUE", then the latter can't merge into
   * "blues" because this would create a path of length 2. The maximum number of instances of
   * MergedFacetValue per CatalogAttribute is 100. This feature is available only for textual custom
   * attributes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue> mergedFacetValues;

  /**
   * Set this field only if you want to rerank based on facet values engaged by the user for the
   * current key. This option is only possible for custom facetable textual keys.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig rerankConfig;

  /**
   * If you don't set the facet SearchRequest.FacetSpec.FacetKey.intervals in the request to a
   * numerical attribute, then we use the computed intervals with rounded bounds obtained from all
   * its product numerical attribute values. The computed intervals might not be ideal for some
   * attributes. Therefore, we give you the option to overwrite them with the facet_intervals field.
   * The maximum of facet intervals per CatalogAttribute is 40. Each interval must have a lower
   * bound or an upper bound. If both bounds are provided, then the lower bound must be smaller or
   * equal than the upper bound.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudRetailV2alphaInterval> getFacetIntervals() {
    return facetIntervals;
  }

  /**
   * If you don't set the facet SearchRequest.FacetSpec.FacetKey.intervals in the request to a
   * numerical attribute, then we use the computed intervals with rounded bounds obtained from all
   * its product numerical attribute values. The computed intervals might not be ideal for some
   * attributes. Therefore, we give you the option to overwrite them with the facet_intervals field.
   * The maximum of facet intervals per CatalogAttribute is 40. Each interval must have a lower
   * bound or an upper bound. If both bounds are provided, then the lower bound must be smaller or
   * equal than the upper bound.
   * @param facetIntervals facetIntervals or {@code null} for none
   */
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig setFacetIntervals(java.util.List<GoogleCloudRetailV2alphaInterval> facetIntervals) {
    this.facetIntervals = facetIntervals;
    return this;
  }

  /**
   * Each instance represents a list of attribute values to ignore as facet values for a specific
   * time range. The maximum number of instances per CatalogAttribute is 25.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues> getIgnoredFacetValues() {
    return ignoredFacetValues;
  }

  /**
   * Each instance represents a list of attribute values to ignore as facet values for a specific
   * time range. The maximum number of instances per CatalogAttribute is 25.
   * @param ignoredFacetValues ignoredFacetValues or {@code null} for none
   */
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig setIgnoredFacetValues(java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues> ignoredFacetValues) {
    this.ignoredFacetValues = ignoredFacetValues;
    return this;
  }

  /**
   * Each instance replaces a list of facet values by a merged facet value. If a facet value is not
   * in any list, then it will stay the same. To avoid conflicts, only paths of length 1 are
   * accepted. In other words, if "dark_blue" merged into "BLUE", then the latter can't merge into
   * "blues" because this would create a path of length 2. The maximum number of instances of
   * MergedFacetValue per CatalogAttribute is 100. This feature is available only for textual custom
   * attributes.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue> getMergedFacetValues() {
    return mergedFacetValues;
  }

  /**
   * Each instance replaces a list of facet values by a merged facet value. If a facet value is not
   * in any list, then it will stay the same. To avoid conflicts, only paths of length 1 are
   * accepted. In other words, if "dark_blue" merged into "BLUE", then the latter can't merge into
   * "blues" because this would create a path of length 2. The maximum number of instances of
   * MergedFacetValue per CatalogAttribute is 100. This feature is available only for textual custom
   * attributes.
   * @param mergedFacetValues mergedFacetValues or {@code null} for none
   */
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig setMergedFacetValues(java.util.List<GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue> mergedFacetValues) {
    this.mergedFacetValues = mergedFacetValues;
    return this;
  }

  /**
   * Set this field only if you want to rerank based on facet values engaged by the user for the
   * current key. This option is only possible for custom facetable textual keys.
   * @return value or {@code null} for none
   */
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig getRerankConfig() {
    return rerankConfig;
  }

  /**
   * Set this field only if you want to rerank based on facet values engaged by the user for the
   * current key. This option is only possible for custom facetable textual keys.
   * @param rerankConfig rerankConfig or {@code null} for none
   */
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig setRerankConfig(GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig rerankConfig) {
    this.rerankConfig = rerankConfig;
    return this;
  }

  @Override
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig set(String fieldName, Object value) {
    return (GoogleCloudRetailV2alphaCatalogAttributeFacetConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRetailV2alphaCatalogAttributeFacetConfig clone() {
    return (GoogleCloudRetailV2alphaCatalogAttributeFacetConfig) super.clone();
  }

}
