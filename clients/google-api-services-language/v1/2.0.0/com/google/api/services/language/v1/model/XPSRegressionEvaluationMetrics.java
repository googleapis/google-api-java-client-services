/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1.model;

/**
 * Model evaluation metrics for regression problems. It can be used for Tables.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSRegressionEvaluationMetrics extends com.google.api.client.json.GenericJson {

  /**
   * Mean Absolute Error (MAE).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float meanAbsoluteError;

  /**
   * Mean absolute percentage error. Only set if all ground truth values are positive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float meanAbsolutePercentageError;

  /**
   * R squared.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rSquared;

  /**
   * A list of actual versus predicted points for the model being evaluated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<XPSRegressionMetricsEntry> regressionMetricsEntries;

  /**
   * Root Mean Squared Error (RMSE).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rootMeanSquaredError;

  /**
   * Root mean squared log error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rootMeanSquaredLogError;

  /**
   * Mean Absolute Error (MAE).
   * @return value or {@code null} for none
   */
  public java.lang.Float getMeanAbsoluteError() {
    return meanAbsoluteError;
  }

  /**
   * Mean Absolute Error (MAE).
   * @param meanAbsoluteError meanAbsoluteError or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setMeanAbsoluteError(java.lang.Float meanAbsoluteError) {
    this.meanAbsoluteError = meanAbsoluteError;
    return this;
  }

  /**
   * Mean absolute percentage error. Only set if all ground truth values are positive.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMeanAbsolutePercentageError() {
    return meanAbsolutePercentageError;
  }

  /**
   * Mean absolute percentage error. Only set if all ground truth values are positive.
   * @param meanAbsolutePercentageError meanAbsolutePercentageError or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setMeanAbsolutePercentageError(java.lang.Float meanAbsolutePercentageError) {
    this.meanAbsolutePercentageError = meanAbsolutePercentageError;
    return this;
  }

  /**
   * R squared.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRSquared() {
    return rSquared;
  }

  /**
   * R squared.
   * @param rSquared rSquared or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setRSquared(java.lang.Float rSquared) {
    this.rSquared = rSquared;
    return this;
  }

  /**
   * A list of actual versus predicted points for the model being evaluated.
   * @return value or {@code null} for none
   */
  public java.util.List<XPSRegressionMetricsEntry> getRegressionMetricsEntries() {
    return regressionMetricsEntries;
  }

  /**
   * A list of actual versus predicted points for the model being evaluated.
   * @param regressionMetricsEntries regressionMetricsEntries or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setRegressionMetricsEntries(java.util.List<XPSRegressionMetricsEntry> regressionMetricsEntries) {
    this.regressionMetricsEntries = regressionMetricsEntries;
    return this;
  }

  /**
   * Root Mean Squared Error (RMSE).
   * @return value or {@code null} for none
   */
  public java.lang.Float getRootMeanSquaredError() {
    return rootMeanSquaredError;
  }

  /**
   * Root Mean Squared Error (RMSE).
   * @param rootMeanSquaredError rootMeanSquaredError or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setRootMeanSquaredError(java.lang.Float rootMeanSquaredError) {
    this.rootMeanSquaredError = rootMeanSquaredError;
    return this;
  }

  /**
   * Root mean squared log error.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRootMeanSquaredLogError() {
    return rootMeanSquaredLogError;
  }

  /**
   * Root mean squared log error.
   * @param rootMeanSquaredLogError rootMeanSquaredLogError or {@code null} for none
   */
  public XPSRegressionEvaluationMetrics setRootMeanSquaredLogError(java.lang.Float rootMeanSquaredLogError) {
    this.rootMeanSquaredLogError = rootMeanSquaredLogError;
    return this;
  }

  @Override
  public XPSRegressionEvaluationMetrics set(String fieldName, Object value) {
    return (XPSRegressionEvaluationMetrics) super.set(fieldName, value);
  }

  @Override
  public XPSRegressionEvaluationMetrics clone() {
    return (XPSRegressionEvaluationMetrics) super.clone();
  }

}
