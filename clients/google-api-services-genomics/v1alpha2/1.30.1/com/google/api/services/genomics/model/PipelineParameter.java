/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * Parameters facilitate setting and delivering data into the pipeline's execution environment. They
 * are defined at create time, with optional defaults, and can be overridden at run time.
 *
 * If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the
 * pipeline, as the value of the environment variable with the given name.  A default value can be
 * optionally specified at create time. The default can be overridden at run time using the inputs
 * map. If no default is given, a value must be supplied at runtime.
 *
 * If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google
 * Cloud Storage and on the Docker container where the pipeline computation is run. The service
 * account associated with the Pipeline (by default the project's Compute Engine service account)
 * must have access to the Google Cloud Storage paths.
 *
 * At run time, the Google Cloud Storage paths can be overridden if a default was provided at create
 * time, or must be set otherwise. The pipeline runner should add a key/value pair to either the
 * inputs or outputs map. The indicated data copies will be carried out before/after pipeline
 * execution, just as if the corresponding arguments were provided to `gsutil cp`.
 *
 * For example: Given the following `PipelineParameter`, specified in the `inputParameters` list:
 *
 * ``` {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}} ```
 *
 * where `disk` is defined in the `PipelineResources` object as:
 *
 * ``` {name: "pd1", mountPoint: "/mnt/disk/"} ```
 *
 * We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the
 * docker container.  At runtime, an entry for `input_file` would be required in the inputs map,
 * such as:
 *
 * ```   inputs["input_file"] = "gs://my-bucket/bar.txt" ```
 *
 * This would generate the following gsutil call:
 *
 * ```   gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt ```
 *
 * The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable
 * paths are:
 *
 *        Google Cloud storage pathLocal path           filefile     globdirectory
 *
 * For outputs, the direction of the copy is reversed:
 *
 * ```   gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt ```
 *
 * Acceptable paths are:
 *
 *        Local pathGoogle Cloud Storage path           filefile            file       directory -
 * directory must already exist                 glob       directory - directory will be created if
 * it doesn't exist
 *
 * One restriction due to docker limitations, is that for outputs that are found on the boot disk,
 * the local path cannot be a glob and must be a file.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PipelineParameter extends com.google.api.client.json.GenericJson {

  /**
   * The default value for this parameter. Can be overridden at runtime. If `localCopy` is present,
   * then this must be a Google Cloud Storage path beginning with `gs://`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String defaultValue;

  /**
   * Human-readable description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates
   * where on the VM the file should be. The value given to this parameter (either at runtime or
   * using `defaultValue`) must be the remote path where the file should be.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LocalCopy localCopy;

  /**
   * Required. Name of the parameter - the pipeline runner uses this string as the key to the input
   * and output maps in RunPipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The default value for this parameter. Can be overridden at runtime. If `localCopy` is present,
   * then this must be a Google Cloud Storage path beginning with `gs://`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDefaultValue() {
    return defaultValue;
  }

  /**
   * The default value for this parameter. Can be overridden at runtime. If `localCopy` is present,
   * then this must be a Google Cloud Storage path beginning with `gs://`.
   * @param defaultValue defaultValue or {@code null} for none
   */
  public PipelineParameter setDefaultValue(java.lang.String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Human-readable description.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Human-readable description.
   * @param description description or {@code null} for none
   */
  public PipelineParameter setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates
   * where on the VM the file should be. The value given to this parameter (either at runtime or
   * using `defaultValue`) must be the remote path where the file should be.
   * @return value or {@code null} for none
   */
  public LocalCopy getLocalCopy() {
    return localCopy;
  }

  /**
   * If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates
   * where on the VM the file should be. The value given to this parameter (either at runtime or
   * using `defaultValue`) must be the remote path where the file should be.
   * @param localCopy localCopy or {@code null} for none
   */
  public PipelineParameter setLocalCopy(LocalCopy localCopy) {
    this.localCopy = localCopy;
    return this;
  }

  /**
   * Required. Name of the parameter - the pipeline runner uses this string as the key to the input
   * and output maps in RunPipeline.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. Name of the parameter - the pipeline runner uses this string as the key to the input
   * and output maps in RunPipeline.
   * @param name name or {@code null} for none
   */
  public PipelineParameter setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public PipelineParameter set(String fieldName, Object value) {
    return (PipelineParameter) super.set(fieldName, value);
  }

  @Override
  public PipelineParameter clone() {
    return (PipelineParameter) super.clone();
  }

}
