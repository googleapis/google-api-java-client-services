/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Proto representation of a custom emoji. May be used in both APIs and in Spanner, but certain
 * fields should be restricted to one or the other. See the per-field documentation for details.
 * NEXT_TAG: 11
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CustomEmoji extends com.google.api.client.json.GenericJson {

  /**
   * ID for the underlying image data in Blobstore. This field should *only* be present in Spanner
   * or within the server, but should not be exposed in public APIs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String blobId;

  /**
   * Time when the Emoji was created, in microseconds. This field may be present in Spanner, within
   * the server, or in public APIs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long createTimeMicros;

  /**
   * This field should *never* be persisted to Spanner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserId creatorUserId;

  /**
   * This field should *never* be persisted to Spanner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CustomerId ownerCustomerId;

  /**
   * Opaque token that clients use to construct the URL for accessing the custom emoji’s image data.
   * This field is intended for API consumption, and should *never* be persisted to Spanner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String readToken;

  /**
   * User-provided, human-readable ID for the custom emoji. Users are expected to observe this field
   * in the UI instead of the UUID. This shortcode should be unique within an organization, but has
   * no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to
   * Spanner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shortcode;

  /**
   * Snapshot of the current state of the emoji, which may differ from the source-of-truth in the
   * CustomEmojis table. This field should *never* be persisted to Spanner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long updateTimeMicros;

  /**
   * Unique key for a custom emoji resource. Required. This field is *always* populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uuid;

  /**
   * ID for the underlying image data in Blobstore. This field should *only* be present in Spanner
   * or within the server, but should not be exposed in public APIs.
   * @return value or {@code null} for none
   */
  public java.lang.String getBlobId() {
    return blobId;
  }

  /**
   * ID for the underlying image data in Blobstore. This field should *only* be present in Spanner
   * or within the server, but should not be exposed in public APIs.
   * @param blobId blobId or {@code null} for none
   */
  public CustomEmoji setBlobId(java.lang.String blobId) {
    this.blobId = blobId;
    return this;
  }

  /**
   * Time when the Emoji was created, in microseconds. This field may be present in Spanner, within
   * the server, or in public APIs.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCreateTimeMicros() {
    return createTimeMicros;
  }

  /**
   * Time when the Emoji was created, in microseconds. This field may be present in Spanner, within
   * the server, or in public APIs.
   * @param createTimeMicros createTimeMicros or {@code null} for none
   */
  public CustomEmoji setCreateTimeMicros(java.lang.Long createTimeMicros) {
    this.createTimeMicros = createTimeMicros;
    return this;
  }

  /**
   * This field should *never* be persisted to Spanner.
   * @return value or {@code null} for none
   */
  public UserId getCreatorUserId() {
    return creatorUserId;
  }

  /**
   * This field should *never* be persisted to Spanner.
   * @param creatorUserId creatorUserId or {@code null} for none
   */
  public CustomEmoji setCreatorUserId(UserId creatorUserId) {
    this.creatorUserId = creatorUserId;
    return this;
  }

  /**
   * This field should *never* be persisted to Spanner.
   * @return value or {@code null} for none
   */
  public CustomerId getOwnerCustomerId() {
    return ownerCustomerId;
  }

  /**
   * This field should *never* be persisted to Spanner.
   * @param ownerCustomerId ownerCustomerId or {@code null} for none
   */
  public CustomEmoji setOwnerCustomerId(CustomerId ownerCustomerId) {
    this.ownerCustomerId = ownerCustomerId;
    return this;
  }

  /**
   * Opaque token that clients use to construct the URL for accessing the custom emoji’s image data.
   * This field is intended for API consumption, and should *never* be persisted to Spanner.
   * @return value or {@code null} for none
   */
  public java.lang.String getReadToken() {
    return readToken;
  }

  /**
   * Opaque token that clients use to construct the URL for accessing the custom emoji’s image data.
   * This field is intended for API consumption, and should *never* be persisted to Spanner.
   * @param readToken readToken or {@code null} for none
   */
  public CustomEmoji setReadToken(java.lang.String readToken) {
    this.readToken = readToken;
    return this;
  }

  /**
   * User-provided, human-readable ID for the custom emoji. Users are expected to observe this field
   * in the UI instead of the UUID. This shortcode should be unique within an organization, but has
   * no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to
   * Spanner.
   * @return value or {@code null} for none
   */
  public java.lang.String getShortcode() {
    return shortcode;
  }

  /**
   * User-provided, human-readable ID for the custom emoji. Users are expected to observe this field
   * in the UI instead of the UUID. This shortcode should be unique within an organization, but has
   * no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to
   * Spanner.
   * @param shortcode shortcode or {@code null} for none
   */
  public CustomEmoji setShortcode(java.lang.String shortcode) {
    this.shortcode = shortcode;
    return this;
  }

  /**
   * Snapshot of the current state of the emoji, which may differ from the source-of-truth in the
   * CustomEmojis table. This field should *never* be persisted to Spanner.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Snapshot of the current state of the emoji, which may differ from the source-of-truth in the
   * CustomEmojis table. This field should *never* be persisted to Spanner.
   * @param state state or {@code null} for none
   */
  public CustomEmoji setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getUpdateTimeMicros() {
    return updateTimeMicros;
  }

  /**
   * @param updateTimeMicros updateTimeMicros or {@code null} for none
   */
  public CustomEmoji setUpdateTimeMicros(java.lang.Long updateTimeMicros) {
    this.updateTimeMicros = updateTimeMicros;
    return this;
  }

  /**
   * Unique key for a custom emoji resource. Required. This field is *always* populated.
   * @return value or {@code null} for none
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Unique key for a custom emoji resource. Required. This field is *always* populated.
   * @param uuid uuid or {@code null} for none
   */
  public CustomEmoji setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  @Override
  public CustomEmoji set(String fieldName, Object value) {
    return (CustomEmoji) super.set(fieldName, value);
  }

  @Override
  public CustomEmoji clone() {
    return (CustomEmoji) super.clone();
  }

}
