/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * AbsoluteDateTime represents the resolved date/time expressions that need no further calculation.
 * It has a section for date and a section for time. The date section will always be filled; if the
 * time section is filled, hour is always filled; for (minute, second, partial_second), they are
 * optional with a zero default value. But if partial_second is filled, (minute, second) must be
 * filled, even they are 0s; if second is filled, minute must be filled. Next field#: 22.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeAbsoluteDateTime extends com.google.api.client.json.GenericJson {

  /**
   * allow_personal determines if personal datetimes are allowed to be used in the resolution of the
   * personal datetime. If allow_personal is false and a personal date exists, the entire parse will
   * be thrown out.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowPersonal;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer day;

  /**
   * Deprecated fields. Do NOT use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deleted11;

  /**
   * season, quarters and holidays will be soon handled as fetched relative datetimes and will be
   * removed from the AbsoluteDateTime message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeHoliday holiday;

  /**
   * Time is 24-hour military time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer hour;

  /**
   * Note: This is marked as deprecated as we are moving into explicit parses using the `meridiem`
   * field, and leave the inference over implicit parses to the grounding/resolution libraries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hourState;

  /**
   * |is_bc| is true if and only the date is Before Christ/Common Era. If |is_bc| is true, only year
   * is meaningful in this proto, as Gregorian calendar is only meaningful for A.D. date/times.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isBc;

  /**
   * For expressions such as "am", "pm". Note: the name "meridiem" has been taken by a field in
   * message ResolutionProperties. Examples: * "9 am": point { hour: 9 meridiem: AM hour_state:
   * UNAMBIGUOUS }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meridiem;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minute;

  /**
   * For expressions such as "around 2 pm".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String month;

  /**
   * If present then: 1) the incoming non-Gregorian datetime will be converted to Gregorian. 2)
   * exported DateTimeProperty fields will contain the converted Gregorian datetime. 3)
   * DateTimeProperty.source_calendar will be set to the calendar-system that was used to specify
   * the non-Gregorian date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeNonGregorianDate nonGregorianDate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double partialSecond;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTimeProperty properties;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String quarter;

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *early* 2020 * *early* on March 20th When a point have a
   * range_modifier field, the resolution library will expand the point into the widest range in
   * contains. For example, in the case of a single date point like "April 22nd, 2022", the point
   * will be transformed into a range with: - "begin: April 22nd 2022 00:00:00h" - "end: April 22nd
   * 2022 23:59:59h" The modifier will then be applied over that range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rangeModifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String season;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer second;

  /**
   * A string representation of the timezone information, see i18n/identifiers/timezones.{h,cc}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timezone;

  /**
   * The |weekday| field is populated to indicate that a day-of-the-week is explicitly mentioned in
   * an absolute date utterance, such as [Tuesday, July 6th, 2021]. Note that when a day-of-the-week
   * is included in other, non-absolute-date expressions, such as [on Tuesday], then this this field
   * is not populated (and in fact an AbsoluteDateTime is not used at all.) Note: This field is
   * populated only when the original expression contains a day-of-the-week. It is not populated by
   * the grounding library to indicate that the date happens to be a Tuesday. Examples: * "Tuesday,
   * July 6th 2021" --> the day of the week is part of an absolute date expression, so this field is
   * populated: point { year: 2021 month: JULY day: 6 weekday: TUESDAY } * "on Tuesday" --> the day
   * of the week is not part of an absolute date expression, so it is interpreted as a relative
   * datetime: relative { fetched { target { weekday: TUESDAY } } }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String weekday;

  /**
   * Date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer year;

  /**
   * allow_personal determines if personal datetimes are allowed to be used in the resolution of the
   * personal datetime. If allow_personal is false and a personal date exists, the entire parse will
   * be thrown out.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowPersonal() {
    return allowPersonal;
  }

  /**
   * allow_personal determines if personal datetimes are allowed to be used in the resolution of the
   * personal datetime. If allow_personal is false and a personal date exists, the entire parse will
   * be thrown out.
   * @param allowPersonal allowPersonal or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setAllowPersonal(java.lang.Boolean allowPersonal) {
    this.allowPersonal = allowPersonal;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * @param day day or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setDay(java.lang.Integer day) {
    this.day = day;
    return this;
  }

  /**
   * Deprecated fields. Do NOT use.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeleted11() {
    return deleted11;
  }

  /**
   * Deprecated fields. Do NOT use.
   * @param deleted11 deleted11 or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setDeleted11(java.lang.String deleted11) {
    this.deleted11 = deleted11;
    return this;
  }

  /**
   * season, quarters and holidays will be soon handled as fetched relative datetimes and will be
   * removed from the AbsoluteDateTime message.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeHoliday getHoliday() {
    return holiday;
  }

  /**
   * season, quarters and holidays will be soon handled as fetched relative datetimes and will be
   * removed from the AbsoluteDateTime message.
   * @param holiday holiday or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setHoliday(NlpSemanticParsingDatetimeHoliday holiday) {
    this.holiday = holiday;
    return this;
  }

  /**
   * Time is 24-hour military time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHour() {
    return hour;
  }

  /**
   * Time is 24-hour military time.
   * @param hour hour or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setHour(java.lang.Integer hour) {
    this.hour = hour;
    return this;
  }

  /**
   * Note: This is marked as deprecated as we are moving into explicit parses using the `meridiem`
   * field, and leave the inference over implicit parses to the grounding/resolution libraries.
   * @return value or {@code null} for none
   */
  public java.lang.String getHourState() {
    return hourState;
  }

  /**
   * Note: This is marked as deprecated as we are moving into explicit parses using the `meridiem`
   * field, and leave the inference over implicit parses to the grounding/resolution libraries.
   * @param hourState hourState or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setHourState(java.lang.String hourState) {
    this.hourState = hourState;
    return this;
  }

  /**
   * |is_bc| is true if and only the date is Before Christ/Common Era. If |is_bc| is true, only year
   * is meaningful in this proto, as Gregorian calendar is only meaningful for A.D. date/times.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsBc() {
    return isBc;
  }

  /**
   * |is_bc| is true if and only the date is Before Christ/Common Era. If |is_bc| is true, only year
   * is meaningful in this proto, as Gregorian calendar is only meaningful for A.D. date/times.
   * @param isBc isBc or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setIsBc(java.lang.Boolean isBc) {
    this.isBc = isBc;
    return this;
  }

  /**
   * For expressions such as "am", "pm". Note: the name "meridiem" has been taken by a field in
   * message ResolutionProperties. Examples: * "9 am": point { hour: 9 meridiem: AM hour_state:
   * UNAMBIGUOUS }
   * @return value or {@code null} for none
   */
  public java.lang.String getMeridiem() {
    return meridiem;
  }

  /**
   * For expressions such as "am", "pm". Note: the name "meridiem" has been taken by a field in
   * message ResolutionProperties. Examples: * "9 am": point { hour: 9 meridiem: AM hour_state:
   * UNAMBIGUOUS }
   * @param meridiem meridiem or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setMeridiem(java.lang.String meridiem) {
    this.meridiem = meridiem;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinute() {
    return minute;
  }

  /**
   * @param minute minute or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setMinute(java.lang.Integer minute) {
    this.minute = minute;
    return this;
  }

  /**
   * For expressions such as "around 2 pm".
   * @return value or {@code null} for none
   */
  public java.lang.String getModifier() {
    return modifier;
  }

  /**
   * For expressions such as "around 2 pm".
   * @param modifier modifier or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setModifier(java.lang.String modifier) {
    this.modifier = modifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMonth() {
    return month;
  }

  /**
   * @param month month or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setMonth(java.lang.String month) {
    this.month = month;
    return this;
  }

  /**
   * If present then: 1) the incoming non-Gregorian datetime will be converted to Gregorian. 2)
   * exported DateTimeProperty fields will contain the converted Gregorian datetime. 3)
   * DateTimeProperty.source_calendar will be set to the calendar-system that was used to specify
   * the non-Gregorian date.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeNonGregorianDate getNonGregorianDate() {
    return nonGregorianDate;
  }

  /**
   * If present then: 1) the incoming non-Gregorian datetime will be converted to Gregorian. 2)
   * exported DateTimeProperty fields will contain the converted Gregorian datetime. 3)
   * DateTimeProperty.source_calendar will be set to the calendar-system that was used to specify
   * the non-Gregorian date.
   * @param nonGregorianDate nonGregorianDate or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setNonGregorianDate(NlpSemanticParsingDatetimeNonGregorianDate nonGregorianDate) {
    this.nonGregorianDate = nonGregorianDate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getPartialSecond() {
    return partialSecond;
  }

  /**
   * @param partialSecond partialSecond or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setPartialSecond(java.lang.Double partialSecond) {
    this.partialSecond = partialSecond;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTimeProperty getProperties() {
    return properties;
  }

  /**
   * @param properties properties or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setProperties(NlpSemanticParsingDatetimeDateTimeProperty properties) {
    this.properties = properties;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getQuarter() {
    return quarter;
  }

  /**
   * @param quarter quarter or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setQuarter(java.lang.String quarter) {
    this.quarter = quarter;
    return this;
  }

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *early* 2020 * *early* on March 20th When a point have a
   * range_modifier field, the resolution library will expand the point into the widest range in
   * contains. For example, in the case of a single date point like "April 22nd, 2022", the point
   * will be transformed into a range with: - "begin: April 22nd 2022 00:00:00h" - "end: April 22nd
   * 2022 23:59:59h" The modifier will then be applied over that range.
   * @return value or {@code null} for none
   */
  public java.lang.String getRangeModifier() {
    return rangeModifier;
  }

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *early* 2020 * *early* on March 20th When a point have a
   * range_modifier field, the resolution library will expand the point into the widest range in
   * contains. For example, in the case of a single date point like "April 22nd, 2022", the point
   * will be transformed into a range with: - "begin: April 22nd 2022 00:00:00h" - "end: April 22nd
   * 2022 23:59:59h" The modifier will then be applied over that range.
   * @param rangeModifier rangeModifier or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setRangeModifier(java.lang.String rangeModifier) {
    this.rangeModifier = rangeModifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSeason() {
    return season;
  }

  /**
   * @param season season or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setSeason(java.lang.String season) {
    this.season = season;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSecond() {
    return second;
  }

  /**
   * @param second second or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setSecond(java.lang.Integer second) {
    this.second = second;
    return this;
  }

  /**
   * A string representation of the timezone information, see i18n/identifiers/timezones.{h,cc}.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimezone() {
    return timezone;
  }

  /**
   * A string representation of the timezone information, see i18n/identifiers/timezones.{h,cc}.
   * @param timezone timezone or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setTimezone(java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The |weekday| field is populated to indicate that a day-of-the-week is explicitly mentioned in
   * an absolute date utterance, such as [Tuesday, July 6th, 2021]. Note that when a day-of-the-week
   * is included in other, non-absolute-date expressions, such as [on Tuesday], then this this field
   * is not populated (and in fact an AbsoluteDateTime is not used at all.) Note: This field is
   * populated only when the original expression contains a day-of-the-week. It is not populated by
   * the grounding library to indicate that the date happens to be a Tuesday. Examples: * "Tuesday,
   * July 6th 2021" --> the day of the week is part of an absolute date expression, so this field is
   * populated: point { year: 2021 month: JULY day: 6 weekday: TUESDAY } * "on Tuesday" --> the day
   * of the week is not part of an absolute date expression, so it is interpreted as a relative
   * datetime: relative { fetched { target { weekday: TUESDAY } } }
   * @return value or {@code null} for none
   */
  public java.lang.String getWeekday() {
    return weekday;
  }

  /**
   * The |weekday| field is populated to indicate that a day-of-the-week is explicitly mentioned in
   * an absolute date utterance, such as [Tuesday, July 6th, 2021]. Note that when a day-of-the-week
   * is included in other, non-absolute-date expressions, such as [on Tuesday], then this this field
   * is not populated (and in fact an AbsoluteDateTime is not used at all.) Note: This field is
   * populated only when the original expression contains a day-of-the-week. It is not populated by
   * the grounding library to indicate that the date happens to be a Tuesday. Examples: * "Tuesday,
   * July 6th 2021" --> the day of the week is part of an absolute date expression, so this field is
   * populated: point { year: 2021 month: JULY day: 6 weekday: TUESDAY } * "on Tuesday" --> the day
   * of the week is not part of an absolute date expression, so it is interpreted as a relative
   * datetime: relative { fetched { target { weekday: TUESDAY } } }
   * @param weekday weekday or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setWeekday(java.lang.String weekday) {
    this.weekday = weekday;
    return this;
  }

  /**
   * Date.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Date.
   * @param year year or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime setYear(java.lang.Integer year) {
    this.year = year;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeAbsoluteDateTime set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeAbsoluteDateTime) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeAbsoluteDateTime clone() {
    return (NlpSemanticParsingDatetimeAbsoluteDateTime) super.clone();
  }

}
