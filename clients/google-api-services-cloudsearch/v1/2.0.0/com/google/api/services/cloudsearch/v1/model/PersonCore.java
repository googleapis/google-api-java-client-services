/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Information for rendering a person. NEXT ID: 37
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PersonCore extends com.google.api.client.json.GenericJson {

  /**
   * Instructions for how to address this person (e.g. custom pronouns). For google.com this is a
   * set of pronouns from a defined list of options.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String addressMeAs;

  /**
   * People the profile owner is an admin to. Note that not all fields of these PersonCores will be
   * set, in particular, relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> adminTo;

  /**
   * The profile owner's admins in no particular order. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> admins;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String availabilityStatus;

  /**
   * Person birthday.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date birthday;

  /**
   * The URL to open the profile owner's primary calendar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SafeUrlProto calendarUrl;

  /**
   * The URL to start a chat conversation with the profile owner. For google.com this is a Hangouts
   * URL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SafeUrlProto chatUrl;

  /**
   * Person's cost center as a string, e.g. "926: Googler Apps".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String costCenter;

  /**
   * The person's Organization department, e.g. "People Operations". For google.com this is usually
   * called "area".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String department;

  /**
   * A subset of the profile owner's direct reports. The number of entities here may be less than
   * total_direct_reports_count, because typically ProfileResponse does not include all the person's
   * reports, if there are too many to retrieve efficiently. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> directReports;

  /**
   * The profile owner's direct dotted line managers in no particular order. Note that not all
   * fields of these PersonCores will be set, in particular, relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> dottedLineManagers;

  /**
   * A subset of the profile owner's dotted-line reports. The number of entities here may be less
   * than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> dottedLineReports;

  /**
   * E-mail addresses of the person. The primary or preferred email should be first.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> emails;

  /**
   * Person's employee number (external ID of type "organization") For google.com this is the badge
   * number (e.g. 2 for Larry Page).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String employeeId;

  /**
   * A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is
   * used as part of the etag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fingerprint;

  /**
   * Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long ftePermille;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MapInfo geoLocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gmailUrl;

  /**
   * Profile owner's job title (e.g. "Software Engineer"). For google.com this is the Workday
   * preferred job title.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jobTitle;

  /**
   * List of keys to use from the map 'keywords'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> keywordTypes;

  /**
   * Custom keywords the domain admin has added.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> keywords;

  /**
   * Custom links the profile owner has added.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnterpriseTopazFrontendTeamsLink> links;

  static {
    // hack to force ProGuard to consider EnterpriseTopazFrontendTeamsLink used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EnterpriseTopazFrontendTeamsLink.class);
  }

  /**
   * Detailed desk location within the company. For google.com this is the desk location code (e.g.
   * "DE-MUC-ARP-6T2-6T2C0C") if the person has a desk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String location;

  /**
   * The profile owner's management chain from top to bottom, where managers[0] is the CEO,
   * manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct
   * manager. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PersonCore> managers;

  /**
   * Custom mission statement the profile owner has added.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mission;

  /**
   * Human-readable Unicode display name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Office/building identifier within the company. For google.com this is the office code (e.g.
   * "DE-MUC-ARP").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String officeLocation;

  /**
   * The person's obfuscated Gaia ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String personId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> phoneNumbers;

  static {
    // hack to force ProGuard to consider EnterpriseTopazFrontendTeamsPersonCorePhoneNumber used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EnterpriseTopazFrontendTeamsPersonCorePhoneNumber.class);
  }

  /**
   * Person photo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SafeUrlProto photoUrl;

  /**
   * Postal address of office/building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postalAddress;

  /**
   * Total count of the profile owner's direct reports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer totalDirectReportsCount;

  /**
   * Total count of the profile owner's dotted-line reports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer totalDlrCount;

  /**
   * The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if
   * one report is working 80% and profile owner 100%).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long totalFteCount;

  /**
   * External ID of type "login_id" for the profile. For google.com this is the username/LDAP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String waldoComeBackTime;

  /**
   * Instructions for how to address this person (e.g. custom pronouns). For google.com this is a
   * set of pronouns from a defined list of options.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddressMeAs() {
    return addressMeAs;
  }

  /**
   * Instructions for how to address this person (e.g. custom pronouns). For google.com this is a
   * set of pronouns from a defined list of options.
   * @param addressMeAs addressMeAs or {@code null} for none
   */
  public PersonCore setAddressMeAs(java.lang.String addressMeAs) {
    this.addressMeAs = addressMeAs;
    return this;
  }

  /**
   * People the profile owner is an admin to. Note that not all fields of these PersonCores will be
   * set, in particular, relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getAdminTo() {
    return adminTo;
  }

  /**
   * People the profile owner is an admin to. Note that not all fields of these PersonCores will be
   * set, in particular, relationships will be empty.
   * @param adminTo adminTo or {@code null} for none
   */
  public PersonCore setAdminTo(java.util.List<PersonCore> adminTo) {
    this.adminTo = adminTo;
    return this;
  }

  /**
   * The profile owner's admins in no particular order. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getAdmins() {
    return admins;
  }

  /**
   * The profile owner's admins in no particular order. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * @param admins admins or {@code null} for none
   */
  public PersonCore setAdmins(java.util.List<PersonCore> admins) {
    this.admins = admins;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAvailabilityStatus() {
    return availabilityStatus;
  }

  /**
   * @param availabilityStatus availabilityStatus or {@code null} for none
   */
  public PersonCore setAvailabilityStatus(java.lang.String availabilityStatus) {
    this.availabilityStatus = availabilityStatus;
    return this;
  }

  /**
   * Person birthday.
   * @return value or {@code null} for none
   */
  public Date getBirthday() {
    return birthday;
  }

  /**
   * Person birthday.
   * @param birthday birthday or {@code null} for none
   */
  public PersonCore setBirthday(Date birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * The URL to open the profile owner's primary calendar.
   * @return value or {@code null} for none
   */
  public SafeUrlProto getCalendarUrl() {
    return calendarUrl;
  }

  /**
   * The URL to open the profile owner's primary calendar.
   * @param calendarUrl calendarUrl or {@code null} for none
   */
  public PersonCore setCalendarUrl(SafeUrlProto calendarUrl) {
    this.calendarUrl = calendarUrl;
    return this;
  }

  /**
   * The URL to start a chat conversation with the profile owner. For google.com this is a Hangouts
   * URL.
   * @return value or {@code null} for none
   */
  public SafeUrlProto getChatUrl() {
    return chatUrl;
  }

  /**
   * The URL to start a chat conversation with the profile owner. For google.com this is a Hangouts
   * URL.
   * @param chatUrl chatUrl or {@code null} for none
   */
  public PersonCore setChatUrl(SafeUrlProto chatUrl) {
    this.chatUrl = chatUrl;
    return this;
  }

  /**
   * Person's cost center as a string, e.g. "926: Googler Apps".
   * @return value or {@code null} for none
   */
  public java.lang.String getCostCenter() {
    return costCenter;
  }

  /**
   * Person's cost center as a string, e.g. "926: Googler Apps".
   * @param costCenter costCenter or {@code null} for none
   */
  public PersonCore setCostCenter(java.lang.String costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * The person's Organization department, e.g. "People Operations". For google.com this is usually
   * called "area".
   * @return value or {@code null} for none
   */
  public java.lang.String getDepartment() {
    return department;
  }

  /**
   * The person's Organization department, e.g. "People Operations". For google.com this is usually
   * called "area".
   * @param department department or {@code null} for none
   */
  public PersonCore setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  /**
   * A subset of the profile owner's direct reports. The number of entities here may be less than
   * total_direct_reports_count, because typically ProfileResponse does not include all the person's
   * reports, if there are too many to retrieve efficiently. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getDirectReports() {
    return directReports;
  }

  /**
   * A subset of the profile owner's direct reports. The number of entities here may be less than
   * total_direct_reports_count, because typically ProfileResponse does not include all the person's
   * reports, if there are too many to retrieve efficiently. Note that not all fields of these
   * PersonCores will be set, in particular, relationships will be empty.
   * @param directReports directReports or {@code null} for none
   */
  public PersonCore setDirectReports(java.util.List<PersonCore> directReports) {
    this.directReports = directReports;
    return this;
  }

  /**
   * The profile owner's direct dotted line managers in no particular order. Note that not all
   * fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getDottedLineManagers() {
    return dottedLineManagers;
  }

  /**
   * The profile owner's direct dotted line managers in no particular order. Note that not all
   * fields of these PersonCores will be set, in particular, relationships will be empty.
   * @param dottedLineManagers dottedLineManagers or {@code null} for none
   */
  public PersonCore setDottedLineManagers(java.util.List<PersonCore> dottedLineManagers) {
    this.dottedLineManagers = dottedLineManagers;
    return this;
  }

  /**
   * A subset of the profile owner's dotted-line reports. The number of entities here may be less
   * than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getDottedLineReports() {
    return dottedLineReports;
  }

  /**
   * A subset of the profile owner's dotted-line reports. The number of entities here may be less
   * than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * @param dottedLineReports dottedLineReports or {@code null} for none
   */
  public PersonCore setDottedLineReports(java.util.List<PersonCore> dottedLineReports) {
    this.dottedLineReports = dottedLineReports;
    return this;
  }

  /**
   * E-mail addresses of the person. The primary or preferred email should be first.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEmails() {
    return emails;
  }

  /**
   * E-mail addresses of the person. The primary or preferred email should be first.
   * @param emails emails or {@code null} for none
   */
  public PersonCore setEmails(java.util.List<java.lang.String> emails) {
    this.emails = emails;
    return this;
  }

  /**
   * Person's employee number (external ID of type "organization") For google.com this is the badge
   * number (e.g. 2 for Larry Page).
   * @return value or {@code null} for none
   */
  public java.lang.String getEmployeeId() {
    return employeeId;
  }

  /**
   * Person's employee number (external ID of type "organization") For google.com this is the badge
   * number (e.g. 2 for Larry Page).
   * @param employeeId employeeId or {@code null} for none
   */
  public PersonCore setEmployeeId(java.lang.String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is
   * used as part of the etag.
   * @return value or {@code null} for none
   */
  public java.lang.String getFingerprint() {
    return fingerprint;
  }

  /**
   * A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is
   * used as part of the etag.
   * @param fingerprint fingerprint or {@code null} for none
   */
  public PersonCore setFingerprint(java.lang.String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).
   * @return value or {@code null} for none
   */
  public java.lang.Long getFtePermille() {
    return ftePermille;
  }

  /**
   * Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).
   * @param ftePermille ftePermille or {@code null} for none
   */
  public PersonCore setFtePermille(java.lang.Long ftePermille) {
    this.ftePermille = ftePermille;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public MapInfo getGeoLocation() {
    return geoLocation;
  }

  /**
   * @param geoLocation geoLocation or {@code null} for none
   */
  public PersonCore setGeoLocation(MapInfo geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGmailUrl() {
    return gmailUrl;
  }

  /**
   * @param gmailUrl gmailUrl or {@code null} for none
   */
  public PersonCore setGmailUrl(java.lang.String gmailUrl) {
    this.gmailUrl = gmailUrl;
    return this;
  }

  /**
   * Profile owner's job title (e.g. "Software Engineer"). For google.com this is the Workday
   * preferred job title.
   * @return value or {@code null} for none
   */
  public java.lang.String getJobTitle() {
    return jobTitle;
  }

  /**
   * Profile owner's job title (e.g. "Software Engineer"). For google.com this is the Workday
   * preferred job title.
   * @param jobTitle jobTitle or {@code null} for none
   */
  public PersonCore setJobTitle(java.lang.String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * List of keys to use from the map 'keywords'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getKeywordTypes() {
    return keywordTypes;
  }

  /**
   * List of keys to use from the map 'keywords'.
   * @param keywordTypes keywordTypes or {@code null} for none
   */
  public PersonCore setKeywordTypes(java.util.List<java.lang.String> keywordTypes) {
    this.keywordTypes = keywordTypes;
    return this;
  }

  /**
   * Custom keywords the domain admin has added.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getKeywords() {
    return keywords;
  }

  /**
   * Custom keywords the domain admin has added.
   * @param keywords keywords or {@code null} for none
   */
  public PersonCore setKeywords(java.util.Map<String, java.lang.String> keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Custom links the profile owner has added.
   * @return value or {@code null} for none
   */
  public java.util.List<EnterpriseTopazFrontendTeamsLink> getLinks() {
    return links;
  }

  /**
   * Custom links the profile owner has added.
   * @param links links or {@code null} for none
   */
  public PersonCore setLinks(java.util.List<EnterpriseTopazFrontendTeamsLink> links) {
    this.links = links;
    return this;
  }

  /**
   * Detailed desk location within the company. For google.com this is the desk location code (e.g.
   * "DE-MUC-ARP-6T2-6T2C0C") if the person has a desk.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocation() {
    return location;
  }

  /**
   * Detailed desk location within the company. For google.com this is the desk location code (e.g.
   * "DE-MUC-ARP-6T2-6T2C0C") if the person has a desk.
   * @param location location or {@code null} for none
   */
  public PersonCore setLocation(java.lang.String location) {
    this.location = location;
    return this;
  }

  /**
   * The profile owner's management chain from top to bottom, where managers[0] is the CEO,
   * manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct
   * manager. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PersonCore> getManagers() {
    return managers;
  }

  /**
   * The profile owner's management chain from top to bottom, where managers[0] is the CEO,
   * manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct
   * manager. Note that not all fields of these PersonCores will be set, in particular,
   * relationships will be empty.
   * @param managers managers or {@code null} for none
   */
  public PersonCore setManagers(java.util.List<PersonCore> managers) {
    this.managers = managers;
    return this;
  }

  /**
   * Custom mission statement the profile owner has added.
   * @return value or {@code null} for none
   */
  public java.lang.String getMission() {
    return mission;
  }

  /**
   * Custom mission statement the profile owner has added.
   * @param mission mission or {@code null} for none
   */
  public PersonCore setMission(java.lang.String mission) {
    this.mission = mission;
    return this;
  }

  /**
   * Human-readable Unicode display name.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Human-readable Unicode display name.
   * @param name name or {@code null} for none
   */
  public PersonCore setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Office/building identifier within the company. For google.com this is the office code (e.g.
   * "DE-MUC-ARP").
   * @return value or {@code null} for none
   */
  public java.lang.String getOfficeLocation() {
    return officeLocation;
  }

  /**
   * Office/building identifier within the company. For google.com this is the office code (e.g.
   * "DE-MUC-ARP").
   * @param officeLocation officeLocation or {@code null} for none
   */
  public PersonCore setOfficeLocation(java.lang.String officeLocation) {
    this.officeLocation = officeLocation;
    return this;
  }

  /**
   * The person's obfuscated Gaia ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getPersonId() {
    return personId;
  }

  /**
   * The person's obfuscated Gaia ID.
   * @param personId personId or {@code null} for none
   */
  public PersonCore setPersonId(java.lang.String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }

  /**
   * @param phoneNumbers phoneNumbers or {@code null} for none
   */
  public PersonCore setPhoneNumbers(java.util.List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  /**
   * Person photo.
   * @return value or {@code null} for none
   */
  public SafeUrlProto getPhotoUrl() {
    return photoUrl;
  }

  /**
   * Person photo.
   * @param photoUrl photoUrl or {@code null} for none
   */
  public PersonCore setPhotoUrl(SafeUrlProto photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Postal address of office/building.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostalAddress() {
    return postalAddress;
  }

  /**
   * Postal address of office/building.
   * @param postalAddress postalAddress or {@code null} for none
   */
  public PersonCore setPostalAddress(java.lang.String postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  /**
   * Total count of the profile owner's direct reports.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTotalDirectReportsCount() {
    return totalDirectReportsCount;
  }

  /**
   * Total count of the profile owner's direct reports.
   * @param totalDirectReportsCount totalDirectReportsCount or {@code null} for none
   */
  public PersonCore setTotalDirectReportsCount(java.lang.Integer totalDirectReportsCount) {
    this.totalDirectReportsCount = totalDirectReportsCount;
    return this;
  }

  /**
   * Total count of the profile owner's dotted-line reports.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTotalDlrCount() {
    return totalDlrCount;
  }

  /**
   * Total count of the profile owner's dotted-line reports.
   * @param totalDlrCount totalDlrCount or {@code null} for none
   */
  public PersonCore setTotalDlrCount(java.lang.Integer totalDlrCount) {
    this.totalDlrCount = totalDlrCount;
    return this;
  }

  /**
   * The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if
   * one report is working 80% and profile owner 100%).
   * @return value or {@code null} for none
   */
  public java.lang.Long getTotalFteCount() {
    return totalFteCount;
  }

  /**
   * The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if
   * one report is working 80% and profile owner 100%).
   * @param totalFteCount totalFteCount or {@code null} for none
   */
  public PersonCore setTotalFteCount(java.lang.Long totalFteCount) {
    this.totalFteCount = totalFteCount;
    return this;
  }

  /**
   * External ID of type "login_id" for the profile. For google.com this is the username/LDAP.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * External ID of type "login_id" for the profile. For google.com this is the username/LDAP.
   * @param username username or {@code null} for none
   */
  public PersonCore setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public String getWaldoComeBackTime() {
    return waldoComeBackTime;
  }

  /**
   * @param waldoComeBackTime waldoComeBackTime or {@code null} for none
   */
  public PersonCore setWaldoComeBackTime(String waldoComeBackTime) {
    this.waldoComeBackTime = waldoComeBackTime;
    return this;
  }

  @Override
  public PersonCore set(String fieldName, Object value) {
    return (PersonCore) super.set(fieldName, value);
  }

  @Override
  public PersonCore clone() {
    return (PersonCore) super.clone();
  }

}
