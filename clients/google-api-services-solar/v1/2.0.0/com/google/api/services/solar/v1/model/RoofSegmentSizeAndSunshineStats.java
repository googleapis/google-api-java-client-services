/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.solar.v1.model;

/**
 * Information about the size and sunniness quantiles of a roof segment.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Solar API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RoofSegmentSizeAndSunshineStats extends com.google.api.client.json.GenericJson {

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float azimuthDegrees;

  /**
   * The bounding box of the roof segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLngBox boundingBox;

  /**
   * A point near the center of the roof segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLng center;

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float pitchDegrees;

  /**
   * The height of the roof segment plane, in meters above sea level, at the point designated by
   * `center`. Together with the pitch, azimuth, and center location, this fully defines the roof
   * segment plane.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float planeHeightAtCenterMeters;

  /**
   * Total size and sunlight quantiles for the roof segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SizeAndSunshineStats stats;

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * @return value or {@code null} for none
   */
  public java.lang.Float getAzimuthDegrees() {
    return azimuthDegrees;
  }

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * @param azimuthDegrees azimuthDegrees or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setAzimuthDegrees(java.lang.Float azimuthDegrees) {
    this.azimuthDegrees = azimuthDegrees;
    return this;
  }

  /**
   * The bounding box of the roof segment.
   * @return value or {@code null} for none
   */
  public LatLngBox getBoundingBox() {
    return boundingBox;
  }

  /**
   * The bounding box of the roof segment.
   * @param boundingBox boundingBox or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setBoundingBox(LatLngBox boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  /**
   * A point near the center of the roof segment.
   * @return value or {@code null} for none
   */
  public LatLng getCenter() {
    return center;
  }

  /**
   * A point near the center of the roof segment.
   * @param center center or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setCenter(LatLng center) {
    this.center = center;
    return this;
  }

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPitchDegrees() {
    return pitchDegrees;
  }

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * @param pitchDegrees pitchDegrees or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setPitchDegrees(java.lang.Float pitchDegrees) {
    this.pitchDegrees = pitchDegrees;
    return this;
  }

  /**
   * The height of the roof segment plane, in meters above sea level, at the point designated by
   * `center`. Together with the pitch, azimuth, and center location, this fully defines the roof
   * segment plane.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPlaneHeightAtCenterMeters() {
    return planeHeightAtCenterMeters;
  }

  /**
   * The height of the roof segment plane, in meters above sea level, at the point designated by
   * `center`. Together with the pitch, azimuth, and center location, this fully defines the roof
   * segment plane.
   * @param planeHeightAtCenterMeters planeHeightAtCenterMeters or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setPlaneHeightAtCenterMeters(java.lang.Float planeHeightAtCenterMeters) {
    this.planeHeightAtCenterMeters = planeHeightAtCenterMeters;
    return this;
  }

  /**
   * Total size and sunlight quantiles for the roof segment.
   * @return value or {@code null} for none
   */
  public SizeAndSunshineStats getStats() {
    return stats;
  }

  /**
   * Total size and sunlight quantiles for the roof segment.
   * @param stats stats or {@code null} for none
   */
  public RoofSegmentSizeAndSunshineStats setStats(SizeAndSunshineStats stats) {
    this.stats = stats;
    return this;
  }

  @Override
  public RoofSegmentSizeAndSunshineStats set(String fieldName, Object value) {
    return (RoofSegmentSizeAndSunshineStats) super.set(fieldName, value);
  }

  @Override
  public RoofSegmentSizeAndSunshineStats clone() {
    return (RoofSegmentSizeAndSunshineStats) super.clone();
  }

}
