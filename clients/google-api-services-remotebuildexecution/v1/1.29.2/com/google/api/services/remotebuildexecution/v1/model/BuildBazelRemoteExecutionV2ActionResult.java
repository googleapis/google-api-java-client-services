/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v1.model;

/**
 * An ActionResult represents the result of an Action being run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildBazelRemoteExecutionV2ActionResult extends com.google.api.client.json.GenericJson {

  /**
   * The details of the execution that originally produced this result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2ExecutedActionMetadata executionMetadata;

  /**
   * The exit code of the command.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer exitCode;

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member.
   *
   * As an example, suppose the Action had an output directory `a/b/dir` and the execution produced
   * the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an
   * executable file named `baz`. Then, output_directory will contain (hashes shortened for
   * readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ``` If an output of the
   * same name was found, but was not a directory, the server will return a FAILED_PRECONDITION.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BuildBazelRemoteExecutionV2OutputDirectory> outputDirectories;

  /**
   * The output directories of the action that are symbolic links to other directories. Those may be
   * links to other output directories, or input directories, or even absolute paths outside of the
   * working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output
   * directory requested in the `output_directories` field of the Action, if the directory existed
   * after the action completed, a single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   *
   * If an output of the same name was found, but was a symbolic link to a file instead of a
   * directory, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> outputDirectorySymlinks;

  /**
   * The output files of the action that are symbolic links to other files. Those may be links to
   * other output files, or input files, or even absolute paths outside of the working directory, if
   * the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the
   * `output_files` field of the Action, if the corresponding file existed after the action
   * completed, a single entry will be present either in this field, or in the `output_files` field,
   * if the file was not a symbolic link.
   *
   * If an output symbolic link of the same name was found, but its target type was not a regular
   * file, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> outputFileSymlinks;

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present either in this field, or the `output_file_symlinks` field if the file was a symbolic
   * link to another file.
   *
   * If an output of the same name was found, but was a directory rather than a regular file, the
   * server will return a FAILED_PRECONDITION. If the action does not produce the requested output,
   * then that output will be omitted from the list. The server is free to arrange the output list
   * as desired; clients MUST NOT assume that the output list is sorted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BuildBazelRemoteExecutionV2OutputFile> outputFiles;

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Digest stderrDigest;

  /**
   * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stderrRaw;

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Digest stdoutDigest;

  /**
   * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stdoutRaw;

  /**
   * The details of the execution that originally produced this result.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecutedActionMetadata getExecutionMetadata() {
    return executionMetadata;
  }

  /**
   * The details of the execution that originally produced this result.
   * @param executionMetadata executionMetadata or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setExecutionMetadata(BuildBazelRemoteExecutionV2ExecutedActionMetadata executionMetadata) {
    this.executionMetadata = executionMetadata;
    return this;
  }

  /**
   * The exit code of the command.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExitCode() {
    return exitCode;
  }

  /**
   * The exit code of the command.
   * @param exitCode exitCode or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setExitCode(java.lang.Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member.
   *
   * As an example, suppose the Action had an output directory `a/b/dir` and the execution produced
   * the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an
   * executable file named `baz`. Then, output_directory will contain (hashes shortened for
   * readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ``` If an output of the
   * same name was found, but was not a directory, the server will return a FAILED_PRECONDITION.
   * @return value or {@code null} for none
   */
  public java.util.List<BuildBazelRemoteExecutionV2OutputDirectory> getOutputDirectories() {
    return outputDirectories;
  }

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member.
   *
   * As an example, suppose the Action had an output directory `a/b/dir` and the execution produced
   * the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an
   * executable file named `baz`. Then, output_directory will contain (hashes shortened for
   * readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ``` If an output of the
   * same name was found, but was not a directory, the server will return a FAILED_PRECONDITION.
   * @param outputDirectories outputDirectories or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setOutputDirectories(java.util.List<BuildBazelRemoteExecutionV2OutputDirectory> outputDirectories) {
    this.outputDirectories = outputDirectories;
    return this;
  }

  /**
   * The output directories of the action that are symbolic links to other directories. Those may be
   * links to other output directories, or input directories, or even absolute paths outside of the
   * working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output
   * directory requested in the `output_directories` field of the Action, if the directory existed
   * after the action completed, a single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   *
   * If an output of the same name was found, but was a symbolic link to a file instead of a
   * directory, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * @return value or {@code null} for none
   */
  public java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> getOutputDirectorySymlinks() {
    return outputDirectorySymlinks;
  }

  /**
   * The output directories of the action that are symbolic links to other directories. Those may be
   * links to other output directories, or input directories, or even absolute paths outside of the
   * working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output
   * directory requested in the `output_directories` field of the Action, if the directory existed
   * after the action completed, a single entry will be present either in this field, or in the
   * `output_directories` field, if the directory was not a symbolic link.
   *
   * If an output of the same name was found, but was a symbolic link to a file instead of a
   * directory, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * @param outputDirectorySymlinks outputDirectorySymlinks or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setOutputDirectorySymlinks(java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> outputDirectorySymlinks) {
    this.outputDirectorySymlinks = outputDirectorySymlinks;
    return this;
  }

  /**
   * The output files of the action that are symbolic links to other files. Those may be links to
   * other output files, or input files, or even absolute paths outside of the working directory, if
   * the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the
   * `output_files` field of the Action, if the corresponding file existed after the action
   * completed, a single entry will be present either in this field, or in the `output_files` field,
   * if the file was not a symbolic link.
   *
   * If an output symbolic link of the same name was found, but its target type was not a regular
   * file, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * @return value or {@code null} for none
   */
  public java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> getOutputFileSymlinks() {
    return outputFileSymlinks;
  }

  /**
   * The output files of the action that are symbolic links to other files. Those may be links to
   * other output files, or input files, or even absolute paths outside of the working directory, if
   * the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the
   * `output_files` field of the Action, if the corresponding file existed after the action
   * completed, a single entry will be present either in this field, or in the `output_files` field,
   * if the file was not a symbolic link.
   *
   * If an output symbolic link of the same name was found, but its target type was not a regular
   * file, the server will return a FAILED_PRECONDITION. If the action does not produce the
   * requested output, then that output will be omitted from the list. The server is free to arrange
   * the output list as desired; clients MUST NOT assume that the output list is sorted.
   * @param outputFileSymlinks outputFileSymlinks or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setOutputFileSymlinks(java.util.List<BuildBazelRemoteExecutionV2OutputSymlink> outputFileSymlinks) {
    this.outputFileSymlinks = outputFileSymlinks;
    return this;
  }

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present either in this field, or the `output_file_symlinks` field if the file was a symbolic
   * link to another file.
   *
   * If an output of the same name was found, but was a directory rather than a regular file, the
   * server will return a FAILED_PRECONDITION. If the action does not produce the requested output,
   * then that output will be omitted from the list. The server is free to arrange the output list
   * as desired; clients MUST NOT assume that the output list is sorted.
   * @return value or {@code null} for none
   */
  public java.util.List<BuildBazelRemoteExecutionV2OutputFile> getOutputFiles() {
    return outputFiles;
  }

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present either in this field, or the `output_file_symlinks` field if the file was a symbolic
   * link to another file.
   *
   * If an output of the same name was found, but was a directory rather than a regular file, the
   * server will return a FAILED_PRECONDITION. If the action does not produce the requested output,
   * then that output will be omitted from the list. The server is free to arrange the output list
   * as desired; clients MUST NOT assume that the output list is sorted.
   * @param outputFiles outputFiles or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setOutputFiles(java.util.List<BuildBazelRemoteExecutionV2OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Digest getStderrDigest() {
    return stderrDigest;
  }

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * @param stderrDigest stderrDigest or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setStderrDigest(BuildBazelRemoteExecutionV2Digest stderrDigest) {
    this.stderrDigest = stderrDigest;
    return this;
  }

  /**
   * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #decodeStderrRaw()
   * @return value or {@code null} for none
   */
  public java.lang.String getStderrRaw() {
    return stderrRaw;
  }

  /**
   * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #getStderrRaw()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeStderrRaw() {
    return com.google.api.client.util.Base64.decodeBase64(stderrRaw);
  }

  /**
   * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #encodeStderrRaw()
   * @param stderrRaw stderrRaw or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setStderrRaw(java.lang.String stderrRaw) {
    this.stderrRaw = stderrRaw;
    return this;
  }

  /**
   * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #setStderrRaw()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public BuildBazelRemoteExecutionV2ActionResult encodeStderrRaw(byte[] stderrRaw) {
    this.stderrRaw = com.google.api.client.util.Base64.encodeBase64URLSafeString(stderrRaw);
    return this;
  }

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Digest getStdoutDigest() {
    return stdoutDigest;
  }

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage.
   * @param stdoutDigest stdoutDigest or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setStdoutDigest(BuildBazelRemoteExecutionV2Digest stdoutDigest) {
    this.stdoutDigest = stdoutDigest;
    return this;
  }

  /**
   * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #decodeStdoutRaw()
   * @return value or {@code null} for none
   */
  public java.lang.String getStdoutRaw() {
    return stdoutRaw;
  }

  /**
   * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #getStdoutRaw()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeStdoutRaw() {
    return com.google.api.client.util.Base64.decodeBase64(stdoutRaw);
  }

  /**
   * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #encodeStdoutRaw()
   * @param stdoutRaw stdoutRaw or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ActionResult setStdoutRaw(java.lang.String stdoutRaw) {
    this.stdoutRaw = stdoutRaw;
    return this;
  }

  /**
   * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested
   * by the client in the GetActionResultRequest message. The server MAY omit inlining, even if
   * requested, and MUST do so if inlining would cause the response to exceed message size limits.
   * @see #setStdoutRaw()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public BuildBazelRemoteExecutionV2ActionResult encodeStdoutRaw(byte[] stdoutRaw) {
    this.stdoutRaw = com.google.api.client.util.Base64.encodeBase64URLSafeString(stdoutRaw);
    return this;
  }

  @Override
  public BuildBazelRemoteExecutionV2ActionResult set(String fieldName, Object value) {
    return (BuildBazelRemoteExecutionV2ActionResult) super.set(fieldName, value);
  }

  @Override
  public BuildBazelRemoteExecutionV2ActionResult clone() {
    return (BuildBazelRemoteExecutionV2ActionResult) super.clone();
  }

}
