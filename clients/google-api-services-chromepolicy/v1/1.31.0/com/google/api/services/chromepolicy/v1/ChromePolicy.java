/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromepolicy.v1;

/**
 * Service definition for ChromePolicy (v1).
 *
 * <p>
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="http://developers.google.com/chrome/policy" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ChromePolicyRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ChromePolicy extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Chrome Policy API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://chromepolicy.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://chromepolicy.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ChromePolicy(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ChromePolicy(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Customers collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ChromePolicy chromepolicy = new ChromePolicy(...);}
   *   {@code ChromePolicy.Customers.List request = chromepolicy.customers().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Customers customers() {
    return new Customers();
  }

  /**
   * The "customers" collection of methods.
   */
  public class Customers {

    /**
     * An accessor for creating requests from the Policies collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ChromePolicy chromepolicy = new ChromePolicy(...);}
     *   {@code ChromePolicy.Policies.List request = chromepolicy.policies().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Policies policies() {
      return new Policies();
    }

    /**
     * The "policies" collection of methods.
     */
    public class Policies {

      /**
       * Gets the resolved policy values for a list of policies that match a search query.
       *
       * Create a request for the method "policies.resolve".
       *
       * This request holds the parameters needed by the chromepolicy server.  After setting any optional
       * parameters, call the {@link Resolve#execute()} method to invoke the remote operation.
       *
       * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
       * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveRequest}
       * @return the request
       */
      public Resolve resolve(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveRequest content) throws java.io.IOException {
        Resolve result = new Resolve(customer, content);
        initialize(result);
        return result;
      }

      public class Resolve extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveResponse> {

        private static final String REST_PATH = "v1/{+customer}/policies:resolve";

        private final java.util.regex.Pattern CUSTOMER_PATTERN =
            java.util.regex.Pattern.compile("^customers/[^/]+$");

        /**
         * Gets the resolved policy values for a list of policies that match a search query.
         *
         * Create a request for the method "policies.resolve".
         *
         * This request holds the parameters needed by the the chromepolicy server.  After setting any
         * optional parameters, call the {@link Resolve#execute()} method to invoke the remote operation.
         * <p> {@link
         * Resolve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
         * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveRequest}
         * @since 1.13
         */
        protected Resolve(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveRequest content) {
          super(ChromePolicy.this, "POST", REST_PATH, content, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ResolveResponse.class);
          this.customer = com.google.api.client.util.Preconditions.checkNotNull(customer, "Required parameter customer must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                "Parameter customer must conform to the pattern " +
                "^customers/[^/]+$");
          }
        }

        @Override
        public Resolve set$Xgafv(java.lang.String $Xgafv) {
          return (Resolve) super.set$Xgafv($Xgafv);
        }

        @Override
        public Resolve setAccessToken(java.lang.String accessToken) {
          return (Resolve) super.setAccessToken(accessToken);
        }

        @Override
        public Resolve setAlt(java.lang.String alt) {
          return (Resolve) super.setAlt(alt);
        }

        @Override
        public Resolve setCallback(java.lang.String callback) {
          return (Resolve) super.setCallback(callback);
        }

        @Override
        public Resolve setFields(java.lang.String fields) {
          return (Resolve) super.setFields(fields);
        }

        @Override
        public Resolve setKey(java.lang.String key) {
          return (Resolve) super.setKey(key);
        }

        @Override
        public Resolve setOauthToken(java.lang.String oauthToken) {
          return (Resolve) super.setOauthToken(oauthToken);
        }

        @Override
        public Resolve setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Resolve) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Resolve setQuotaUser(java.lang.String quotaUser) {
          return (Resolve) super.setQuotaUser(quotaUser);
        }

        @Override
        public Resolve setUploadType(java.lang.String uploadType) {
          return (Resolve) super.setUploadType(uploadType);
        }

        @Override
        public Resolve setUploadProtocol(java.lang.String uploadProtocol) {
          return (Resolve) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * ID of the G Suite account or literal "my_customer" for the customer associated to the
         * request.
         */
        @com.google.api.client.util.Key
        private java.lang.String customer;

        /** ID of the G Suite account or literal "my_customer" for the customer associated to the request.
         */
        public java.lang.String getCustomer() {
          return customer;
        }

        /**
         * ID of the G Suite account or literal "my_customer" for the customer associated to the
         * request.
         */
        public Resolve setCustomer(java.lang.String customer) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                "Parameter customer must conform to the pattern " +
                "^customers/[^/]+$");
          }
          this.customer = customer;
          return this;
        }

        @Override
        public Resolve set(String parameterName, Object value) {
          return (Resolve) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Orgunits collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ChromePolicy chromepolicy = new ChromePolicy(...);}
       *   {@code ChromePolicy.Orgunits.List request = chromepolicy.orgunits().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Orgunits orgunits() {
        return new Orgunits();
      }

      /**
       * The "orgunits" collection of methods.
       */
      public class Orgunits {

        /**
         * Modify multiple policy values that are applied to a specific org unit so that they now inherit
         * the value from a parent (if applicable). All targets must have the same target format. That is to
         * say that they must point to the same target resource and must have the same keys specified in
         * `additionalTargetKeyNames`. On failure the request will return the error details as part of the
         * google.rpc.Status.
         *
         * Create a request for the method "orgunits.batchInherit".
         *
         * This request holds the parameters needed by the chromepolicy server.  After setting any optional
         * parameters, call the {@link BatchInherit#execute()} method to invoke the remote operation.
         *
         * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
         * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest}
         * @return the request
         */
        public BatchInherit batchInherit(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest content) throws java.io.IOException {
          BatchInherit result = new BatchInherit(customer, content);
          initialize(result);
          return result;
        }

        public class BatchInherit extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+customer}/policies/orgunits:batchInherit";

          private final java.util.regex.Pattern CUSTOMER_PATTERN =
              java.util.regex.Pattern.compile("^customers/[^/]+$");

          /**
           * Modify multiple policy values that are applied to a specific org unit so that they now inherit
           * the value from a parent (if applicable). All targets must have the same target format. That is
           * to say that they must point to the same target resource and must have the same keys specified
           * in `additionalTargetKeyNames`. On failure the request will return the error details as part of
           * the google.rpc.Status.
           *
           * Create a request for the method "orgunits.batchInherit".
           *
           * This request holds the parameters needed by the the chromepolicy server.  After setting any
           * optional parameters, call the {@link BatchInherit#execute()} method to invoke the remote
           * operation. <p> {@link
           * BatchInherit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
           * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest}
           * @since 1.13
           */
          protected BatchInherit(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest content) {
            super(ChromePolicy.this, "POST", REST_PATH, content, com.google.api.services.chromepolicy.v1.model.GoogleProtobufEmpty.class);
            this.customer = com.google.api.client.util.Preconditions.checkNotNull(customer, "Required parameter customer must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                  "Parameter customer must conform to the pattern " +
                  "^customers/[^/]+$");
            }
          }

          @Override
          public BatchInherit set$Xgafv(java.lang.String $Xgafv) {
            return (BatchInherit) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchInherit setAccessToken(java.lang.String accessToken) {
            return (BatchInherit) super.setAccessToken(accessToken);
          }

          @Override
          public BatchInherit setAlt(java.lang.String alt) {
            return (BatchInherit) super.setAlt(alt);
          }

          @Override
          public BatchInherit setCallback(java.lang.String callback) {
            return (BatchInherit) super.setCallback(callback);
          }

          @Override
          public BatchInherit setFields(java.lang.String fields) {
            return (BatchInherit) super.setFields(fields);
          }

          @Override
          public BatchInherit setKey(java.lang.String key) {
            return (BatchInherit) super.setKey(key);
          }

          @Override
          public BatchInherit setOauthToken(java.lang.String oauthToken) {
            return (BatchInherit) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchInherit setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchInherit) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchInherit setQuotaUser(java.lang.String quotaUser) {
            return (BatchInherit) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchInherit setUploadType(java.lang.String uploadType) {
            return (BatchInherit) super.setUploadType(uploadType);
          }

          @Override
          public BatchInherit setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchInherit) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * ID of the G Suite account or literal "my_customer" for the customer associated to the
           * request.
           */
          @com.google.api.client.util.Key
          private java.lang.String customer;

          /** ID of the G Suite account or literal "my_customer" for the customer associated to the request.
           */
          public java.lang.String getCustomer() {
            return customer;
          }

          /**
           * ID of the G Suite account or literal "my_customer" for the customer associated to the
           * request.
           */
          public BatchInherit setCustomer(java.lang.String customer) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                  "Parameter customer must conform to the pattern " +
                  "^customers/[^/]+$");
            }
            this.customer = customer;
            return this;
          }

          @Override
          public BatchInherit set(String parameterName, Object value) {
            return (BatchInherit) super.set(parameterName, value);
          }
        }
        /**
         * Modify multiple policy values that are applied to a specific org unit. All targets must have the
         * same target format. That is to say that they must point to the same target resource and must have
         * the same keys specified in `additionalTargetKeyNames`. On failure the request will return the
         * error details as part of the google.rpc.Status.
         *
         * Create a request for the method "orgunits.batchModify".
         *
         * This request holds the parameters needed by the chromepolicy server.  After setting any optional
         * parameters, call the {@link BatchModify#execute()} method to invoke the remote operation.
         *
         * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
         * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest}
         * @return the request
         */
        public BatchModify batchModify(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest content) throws java.io.IOException {
          BatchModify result = new BatchModify(customer, content);
          initialize(result);
          return result;
        }

        public class BatchModify extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1/{+customer}/policies/orgunits:batchModify";

          private final java.util.regex.Pattern CUSTOMER_PATTERN =
              java.util.regex.Pattern.compile("^customers/[^/]+$");

          /**
           * Modify multiple policy values that are applied to a specific org unit. All targets must have
           * the same target format. That is to say that they must point to the same target resource and
           * must have the same keys specified in `additionalTargetKeyNames`. On failure the request will
           * return the error details as part of the google.rpc.Status.
           *
           * Create a request for the method "orgunits.batchModify".
           *
           * This request holds the parameters needed by the the chromepolicy server.  After setting any
           * optional parameters, call the {@link BatchModify#execute()} method to invoke the remote
           * operation. <p> {@link
           * BatchModify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param customer ID of the G Suite account or literal "my_customer" for the customer associated to the request.
           * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest}
           * @since 1.13
           */
          protected BatchModify(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest content) {
            super(ChromePolicy.this, "POST", REST_PATH, content, com.google.api.services.chromepolicy.v1.model.GoogleProtobufEmpty.class);
            this.customer = com.google.api.client.util.Preconditions.checkNotNull(customer, "Required parameter customer must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                  "Parameter customer must conform to the pattern " +
                  "^customers/[^/]+$");
            }
          }

          @Override
          public BatchModify set$Xgafv(java.lang.String $Xgafv) {
            return (BatchModify) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchModify setAccessToken(java.lang.String accessToken) {
            return (BatchModify) super.setAccessToken(accessToken);
          }

          @Override
          public BatchModify setAlt(java.lang.String alt) {
            return (BatchModify) super.setAlt(alt);
          }

          @Override
          public BatchModify setCallback(java.lang.String callback) {
            return (BatchModify) super.setCallback(callback);
          }

          @Override
          public BatchModify setFields(java.lang.String fields) {
            return (BatchModify) super.setFields(fields);
          }

          @Override
          public BatchModify setKey(java.lang.String key) {
            return (BatchModify) super.setKey(key);
          }

          @Override
          public BatchModify setOauthToken(java.lang.String oauthToken) {
            return (BatchModify) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchModify setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchModify) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchModify setQuotaUser(java.lang.String quotaUser) {
            return (BatchModify) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchModify setUploadType(java.lang.String uploadType) {
            return (BatchModify) super.setUploadType(uploadType);
          }

          @Override
          public BatchModify setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchModify) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * ID of the G Suite account or literal "my_customer" for the customer associated to the
           * request.
           */
          @com.google.api.client.util.Key
          private java.lang.String customer;

          /** ID of the G Suite account or literal "my_customer" for the customer associated to the request.
           */
          public java.lang.String getCustomer() {
            return customer;
          }

          /**
           * ID of the G Suite account or literal "my_customer" for the customer associated to the
           * request.
           */
          public BatchModify setCustomer(java.lang.String customer) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
                  "Parameter customer must conform to the pattern " +
                  "^customers/[^/]+$");
            }
            this.customer = customer;
            return this;
          }

          @Override
          public BatchModify set(String parameterName, Object value) {
            return (BatchModify) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the PolicySchemas collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ChromePolicy chromepolicy = new ChromePolicy(...);}
     *   {@code ChromePolicy.PolicySchemas.List request = chromepolicy.policySchemas().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public PolicySchemas policySchemas() {
      return new PolicySchemas();
    }

    /**
     * The "policySchemas" collection of methods.
     */
    public class PolicySchemas {

      /**
       * Get a specific policy schema for a customer by its resource name.
       *
       * Create a request for the method "policySchemas.get".
       *
       * This request holds the parameters needed by the chromepolicy server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The policy schema resource name to query.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1PolicySchema> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^customers/[^/]+/policySchemas/.*$");

        /**
         * Get a specific policy schema for a customer by its resource name.
         *
         * Create a request for the method "policySchemas.get".
         *
         * This request holds the parameters needed by the the chromepolicy server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The policy schema resource name to query.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ChromePolicy.this, "GET", REST_PATH, null, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1PolicySchema.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^customers/[^/]+/policySchemas/.*$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The policy schema resource name to query. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The policy schema resource name to query.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The policy schema resource name to query. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^customers/[^/]+/policySchemas/.*$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets a list of policy schemas that match a specified filter value for a given customer.
       *
       * Create a request for the method "policySchemas.list".
       *
       * This request holds the parameters needed by the chromepolicy server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The customer for which the listing request will apply.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ListPolicySchemasResponse> {

        private static final String REST_PATH = "v1/{+parent}/policySchemas";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^customers/[^/]+$");

        /**
         * Gets a list of policy schemas that match a specified filter value for a given customer.
         *
         * Create a request for the method "policySchemas.list".
         *
         * This request holds the parameters needed by the the chromepolicy server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The customer for which the listing request will apply.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(ChromePolicy.this, "GET", REST_PATH, null, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1ListPolicySchemasResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^customers/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The customer for which the listing request will apply. */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The customer for which the listing request will apply.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The customer for which the listing request will apply. */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^customers/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The schema filter used to find a particular schema based on fields like its resource
         * name, description and `additionalTargetKeyNames`.
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The schema filter used to find a particular schema based on fields like its resource name,
       description and `additionalTargetKeyNames`.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * The schema filter used to find a particular schema based on fields like its resource
         * name, description and `additionalTargetKeyNames`.
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of policy schemas to return. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of policy schemas to return.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of policy schemas to return. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The page token used to retrieve a specific page of the listing request. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The page token used to retrieve a specific page of the listing request.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The page token used to retrieve a specific page of the listing request. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Media collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ChromePolicy chromepolicy = new ChromePolicy(...);}
   *   {@code ChromePolicy.Media.List request = chromepolicy.media().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Media media() {
    return new Media();
  }

  /**
   * The "media" collection of methods.
   */
  public class Media {

    /**
     * Creates an enterprise file from the content provided by user. Returns a public download url for
     * end user.
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the chromepolicy server.  After setting any optional
     * parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * @param customer Required. The customer for which the file upload will apply.
     * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest}
     * @return the request
     */
    public Upload upload(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest content) throws java.io.IOException {
      Upload result = new Upload(customer, content);
      initialize(result);
      return result;
    }

    /**
     * Creates an enterprise file from the content provided by user. Returns a public download url for
     * end user.
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the the chromepolicy server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param customer Required. The customer for which the file upload will apply.
     * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Upload upload(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Upload result = new Upload(customer, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Upload extends ChromePolicyRequest<com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileResponse> {

      private static final String REST_PATH = "v1/{+customer}/policies/files:uploadPolicyFile";

      private final java.util.regex.Pattern CUSTOMER_PATTERN =
          java.util.regex.Pattern.compile("^customers/[^/]+$");

      /**
       * Creates an enterprise file from the content provided by user. Returns a public download url for
       * end user.
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the chromepolicy server.  After setting any
       * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
       * <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customer Required. The customer for which the file upload will apply.
       * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest}
       * @since 1.13
       */
      protected Upload(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest content) {
        super(ChromePolicy.this, "POST", REST_PATH, content, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileResponse.class);
        this.customer = com.google.api.client.util.Preconditions.checkNotNull(customer, "Required parameter customer must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
              "Parameter customer must conform to the pattern " +
              "^customers/[^/]+$");
        }
      }

      /**
       * Creates an enterprise file from the content provided by user. Returns a public download url for
       * end user.
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the chromepolicy server.  After setting any
       * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
       * <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param customer Required. The customer for which the file upload will apply.
       * @param content the {@link com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Upload(java.lang.String customer, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(ChromePolicy.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.chromepolicy.v1.model.GoogleChromePolicyV1UploadPolicyFileResponse.class);
        this.customer = com.google.api.client.util.Preconditions.checkNotNull(customer, "Required parameter customer must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Upload set$Xgafv(java.lang.String $Xgafv) {
        return (Upload) super.set$Xgafv($Xgafv);
      }

      @Override
      public Upload setAccessToken(java.lang.String accessToken) {
        return (Upload) super.setAccessToken(accessToken);
      }

      @Override
      public Upload setAlt(java.lang.String alt) {
        return (Upload) super.setAlt(alt);
      }

      @Override
      public Upload setCallback(java.lang.String callback) {
        return (Upload) super.setCallback(callback);
      }

      @Override
      public Upload setFields(java.lang.String fields) {
        return (Upload) super.setFields(fields);
      }

      @Override
      public Upload setKey(java.lang.String key) {
        return (Upload) super.setKey(key);
      }

      @Override
      public Upload setOauthToken(java.lang.String oauthToken) {
        return (Upload) super.setOauthToken(oauthToken);
      }

      @Override
      public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Upload) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Upload setQuotaUser(java.lang.String quotaUser) {
        return (Upload) super.setQuotaUser(quotaUser);
      }

      @Override
      public Upload setUploadType(java.lang.String uploadType) {
        return (Upload) super.setUploadType(uploadType);
      }

      @Override
      public Upload setUploadProtocol(java.lang.String uploadProtocol) {
        return (Upload) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The customer for which the file upload will apply. */
      @com.google.api.client.util.Key
      private java.lang.String customer;

      /** Required. The customer for which the file upload will apply.
       */
      public java.lang.String getCustomer() {
        return customer;
      }

      /** Required. The customer for which the file upload will apply. */
      public Upload setCustomer(java.lang.String customer) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_PATTERN.matcher(customer).matches(),
              "Parameter customer must conform to the pattern " +
              "^customers/[^/]+$");
        }
        this.customer = customer;
        return this;
      }

      @Override
      public Upload set(String parameterName, Object value) {
        return (Upload) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link ChromePolicy}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link ChromePolicy}. */
    @Override
    public ChromePolicy build() {
      return new ChromePolicy(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ChromePolicyRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setChromePolicyRequestInitializer(
        ChromePolicyRequestInitializer chromepolicyRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(chromepolicyRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
