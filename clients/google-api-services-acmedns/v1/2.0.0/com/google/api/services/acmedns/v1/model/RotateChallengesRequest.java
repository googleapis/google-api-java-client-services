/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.acmedns.v1.model;

/**
 * The request message for the RotateChallenges RPC. Requires an access token, a root domain, and
 * either records_to_add or records_to_remove to be populated. Records may be set for multiple
 * subdomains at once to support SAN requests for multiple subdomains in a single domain. By
 * default, ACME TXT record challenges that are older than 30 days will be removed. Set
 * `keep_expired_records` to false if this behavior is undesired. There is a record maximum of 100
 * records per domain including expired records. Any request sent that would exceed this maximum
 * will result in a FAILED_PRECONDITION error. NEXT ID: 6
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the ACME DNS API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RotateChallengesRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google
   * Domains website. It authorizes ACME TXT record updates for a domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String accessToken;

  /**
   * Keep records older than 30 days that were used for previous requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean keepExpiredRecords;

  /**
   * ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AcmeTxtRecord> recordsToAdd;

  static {
    // hack to force ProGuard to consider AcmeTxtRecord used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AcmeTxtRecord.class);
  }

  /**
   * ACME TXT record challenges to remove.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AcmeTxtRecord> recordsToRemove;

  static {
    // hack to force ProGuard to consider AcmeTxtRecord used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AcmeTxtRecord.class);
  }

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google
   * Domains website. It authorizes ACME TXT record updates for a domain.
   * @see #decodeAccessToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getAccessToken() {
    return accessToken;
  }

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google
   * Domains website. It authorizes ACME TXT record updates for a domain.
   * @see #getAccessToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeAccessToken() {
    return com.google.api.client.util.Base64.decodeBase64(accessToken);
  }

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google
   * Domains website. It authorizes ACME TXT record updates for a domain.
   * @see #encodeAccessToken()
   * @param accessToken accessToken or {@code null} for none
   */
  public RotateChallengesRequest setAccessToken(java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google
   * Domains website. It authorizes ACME TXT record updates for a domain.
   * @see #setAccessToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public RotateChallengesRequest encodeAccessToken(byte[] accessToken) {
    this.accessToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(accessToken);
    return this;
  }

  /**
   * Keep records older than 30 days that were used for previous requests.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getKeepExpiredRecords() {
    return keepExpiredRecords;
  }

  /**
   * Keep records older than 30 days that were used for previous requests.
   * @param keepExpiredRecords keepExpiredRecords or {@code null} for none
   */
  public RotateChallengesRequest setKeepExpiredRecords(java.lang.Boolean keepExpiredRecords) {
    this.keepExpiredRecords = keepExpiredRecords;
    return this;
  }

  /**
   * ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.
   * @return value or {@code null} for none
   */
  public java.util.List<AcmeTxtRecord> getRecordsToAdd() {
    return recordsToAdd;
  }

  /**
   * ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.
   * @param recordsToAdd recordsToAdd or {@code null} for none
   */
  public RotateChallengesRequest setRecordsToAdd(java.util.List<AcmeTxtRecord> recordsToAdd) {
    this.recordsToAdd = recordsToAdd;
    return this;
  }

  /**
   * ACME TXT record challenges to remove.
   * @return value or {@code null} for none
   */
  public java.util.List<AcmeTxtRecord> getRecordsToRemove() {
    return recordsToRemove;
  }

  /**
   * ACME TXT record challenges to remove.
   * @param recordsToRemove recordsToRemove or {@code null} for none
   */
  public RotateChallengesRequest setRecordsToRemove(java.util.List<AcmeTxtRecord> recordsToRemove) {
    this.recordsToRemove = recordsToRemove;
    return this;
  }

  @Override
  public RotateChallengesRequest set(String fieldName, Object value) {
    return (RotateChallengesRequest) super.set(fieldName, value);
  }

  @Override
  public RotateChallengesRequest clone() {
    return (RotateChallengesRequest) super.clone();
  }

}
