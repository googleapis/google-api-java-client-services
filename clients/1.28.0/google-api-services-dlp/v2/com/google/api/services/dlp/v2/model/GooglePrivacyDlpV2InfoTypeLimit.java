/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * Max findings configuration per infoType, per content item or long running DlpJob.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Loss Prevention (DLP) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2InfoTypeLimit extends com.google.api.client.json.GenericJson {

  /**
   * Type of information the findings limit applies to. Only one limit per info_type should be
   * provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against
   * all info_types that are found but not specified in another InfoTypeLimit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2InfoType infoType;

  /**
   * Max findings limit for the given infoType.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxFindings;

  /**
   * Type of information the findings limit applies to. Only one limit per info_type should be
   * provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against
   * all info_types that are found but not specified in another InfoTypeLimit.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2InfoType getInfoType() {
    return infoType;
  }

  /**
   * Type of information the findings limit applies to. Only one limit per info_type should be
   * provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against
   * all info_types that are found but not specified in another InfoTypeLimit.
   * @param infoType infoType or {@code null} for none
   */
  public GooglePrivacyDlpV2InfoTypeLimit setInfoType(GooglePrivacyDlpV2InfoType infoType) {
    this.infoType = infoType;
    return this;
  }

  /**
   * Max findings limit for the given infoType.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxFindings() {
    return maxFindings;
  }

  /**
   * Max findings limit for the given infoType.
   * @param maxFindings maxFindings or {@code null} for none
   */
  public GooglePrivacyDlpV2InfoTypeLimit setMaxFindings(java.lang.Integer maxFindings) {
    this.maxFindings = maxFindings;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2InfoTypeLimit set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2InfoTypeLimit) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2InfoTypeLimit clone() {
    return (GooglePrivacyDlpV2InfoTypeLimit) super.clone();
  }

}
