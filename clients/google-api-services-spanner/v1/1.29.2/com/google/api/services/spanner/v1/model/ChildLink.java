/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Metadata associated with a parent-child relationship appearing in a PlanNode.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ChildLink extends com.google.api.client.json.GenericJson {

  /**
   * The node to which the link points.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer childIndex;

  /**
   * The type of the link. For example, in Hash Joins this could be used to distinguish between the
   * build child and the probe child, or in the case of the child being an output variable, to
   * represent the tag associated with the output variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Only present if the child node is SCALAR and corresponds to an output variable of the parent
   * node. The field carries the name of the output variable. For example, a `TableScan` operator
   * that reads rows from a table will have child links to the `SCALAR` nodes representing the
   * output variables created for each column that is read by the operator. The corresponding
   * `variable` fields will be set to the variable names assigned to the columns.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String variable;

  /**
   * The node to which the link points.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getChildIndex() {
    return childIndex;
  }

  /**
   * The node to which the link points.
   * @param childIndex childIndex or {@code null} for none
   */
  public ChildLink setChildIndex(java.lang.Integer childIndex) {
    this.childIndex = childIndex;
    return this;
  }

  /**
   * The type of the link. For example, in Hash Joins this could be used to distinguish between the
   * build child and the probe child, or in the case of the child being an output variable, to
   * represent the tag associated with the output variable.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type of the link. For example, in Hash Joins this could be used to distinguish between the
   * build child and the probe child, or in the case of the child being an output variable, to
   * represent the tag associated with the output variable.
   * @param type type or {@code null} for none
   */
  public ChildLink setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Only present if the child node is SCALAR and corresponds to an output variable of the parent
   * node. The field carries the name of the output variable. For example, a `TableScan` operator
   * that reads rows from a table will have child links to the `SCALAR` nodes representing the
   * output variables created for each column that is read by the operator. The corresponding
   * `variable` fields will be set to the variable names assigned to the columns.
   * @return value or {@code null} for none
   */
  public java.lang.String getVariable() {
    return variable;
  }

  /**
   * Only present if the child node is SCALAR and corresponds to an output variable of the parent
   * node. The field carries the name of the output variable. For example, a `TableScan` operator
   * that reads rows from a table will have child links to the `SCALAR` nodes representing the
   * output variables created for each column that is read by the operator. The corresponding
   * `variable` fields will be set to the variable names assigned to the columns.
   * @param variable variable or {@code null} for none
   */
  public ChildLink setVariable(java.lang.String variable) {
    this.variable = variable;
    return this;
  }

  @Override
  public ChildLink set(String fieldName, Object value) {
    return (ChildLink) super.set(fieldName, value);
  }

  @Override
  public ChildLink clone() {
    return (ChildLink) super.clone();
  }

}
