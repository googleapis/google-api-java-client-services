/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents a collection of entities returned by the WebRef service. Next available tag: 14.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefWebrefEntities extends com.google.api.client.json.GenericJson {

  /**
   * Detailed annotation statistics that can, e.g., be used to tune the WebRef scoring logic based
   * on existing (Model-0) annotations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefAnnotationStats annotationStats;

  /**
   * Fingerprints checkpointing annotator stages, can be used to track the source of diffs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefAnnotatorCheckpointFprint> annotatorCheckpointFingerprints;

  static {
    // hack to force ProGuard to consider RepositoryWebrefAnnotatorCheckpointFprint used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefAnnotatorCheckpointFprint.class);
  }

  /**
   * Categories of the document or query. This replaces the category_score found under
   * EntityAnnotations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefCategoryAnnotation> category;

  static {
    // hack to force ProGuard to consider RepositoryWebrefCategoryAnnotation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefCategoryAnnotation.class);
  }

  /**
   * Dates ranges that are most relevant to the document. E.g. on a document about Dune the 2021
   * movie, this might hold the release date of that movie.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefSemanticDateRange> dateRange;

  static {
    // hack to force ProGuard to consider RepositoryWebrefSemanticDateRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefSemanticDateRange.class);
  }

  /**
   * Information that applies globally to the document. The exclude_field option is for Goldmine
   * AnnotationsFinder to exclude document_info from retrieving annotation entities
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefDocumentInfo documentInfo;

  /**
   * The annotated entities, with associated confidence scores and metadata. This is the primary
   * output of WebRef/QRef. In case of Webref output, entities are sorted by decreasing topicality
   * score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefWebrefEntity> entity;

  /**
   * These messages contain non-entity annotations of ranges in the document. This might be used to
   * hold part-of-speech annotations, stopword annotations, and other range based information. The
   * exclude_field option is for Goldmine AnnotationsFinder to exclude ranged_annotations from
   * retrieving annotation entities
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefRangeAnnotations> rangeAnnotations;

  static {
    // hack to force ProGuard to consider RepositoryWebrefRangeAnnotations used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefRangeAnnotations.class);
  }

  /**
   * The status message returned by the annotator. Might not be populated on success.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefStatus status;

  /**
   * A generic container to hold extra result data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet stuff;

  /**
   * Triples inferred from the document When the annotator recognizes phrases, lists or tables
   * associated with a property or relationship for an entity it generates triples that encode that
   * information. This generated data is only substantiated by the document vs KG data which has
   * been verified from multiple sources and/or human curators.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefTripleAnnotations tripleAnnotations;

  /**
   * Detailed annotation statistics that can, e.g., be used to tune the WebRef scoring logic based
   * on existing (Model-0) annotations.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats getAnnotationStats() {
    return annotationStats;
  }

  /**
   * Detailed annotation statistics that can, e.g., be used to tune the WebRef scoring logic based
   * on existing (Model-0) annotations.
   * @param annotationStats annotationStats or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setAnnotationStats(RepositoryWebrefWebrefAnnotationStats annotationStats) {
    this.annotationStats = annotationStats;
    return this;
  }

  /**
   * Fingerprints checkpointing annotator stages, can be used to track the source of diffs.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefAnnotatorCheckpointFprint> getAnnotatorCheckpointFingerprints() {
    return annotatorCheckpointFingerprints;
  }

  /**
   * Fingerprints checkpointing annotator stages, can be used to track the source of diffs.
   * @param annotatorCheckpointFingerprints annotatorCheckpointFingerprints or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setAnnotatorCheckpointFingerprints(java.util.List<RepositoryWebrefAnnotatorCheckpointFprint> annotatorCheckpointFingerprints) {
    this.annotatorCheckpointFingerprints = annotatorCheckpointFingerprints;
    return this;
  }

  /**
   * Categories of the document or query. This replaces the category_score found under
   * EntityAnnotations.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefCategoryAnnotation> getCategory() {
    return category;
  }

  /**
   * Categories of the document or query. This replaces the category_score found under
   * EntityAnnotations.
   * @param category category or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setCategory(java.util.List<RepositoryWebrefCategoryAnnotation> category) {
    this.category = category;
    return this;
  }

  /**
   * Dates ranges that are most relevant to the document. E.g. on a document about Dune the 2021
   * movie, this might hold the release date of that movie.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefSemanticDateRange> getDateRange() {
    return dateRange;
  }

  /**
   * Dates ranges that are most relevant to the document. E.g. on a document about Dune the 2021
   * movie, this might hold the release date of that movie.
   * @param dateRange dateRange or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setDateRange(java.util.List<RepositoryWebrefSemanticDateRange> dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Information that applies globally to the document. The exclude_field option is for Goldmine
   * AnnotationsFinder to exclude document_info from retrieving annotation entities
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefDocumentInfo getDocumentInfo() {
    return documentInfo;
  }

  /**
   * Information that applies globally to the document. The exclude_field option is for Goldmine
   * AnnotationsFinder to exclude document_info from retrieving annotation entities
   * @param documentInfo documentInfo or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setDocumentInfo(RepositoryWebrefWebrefDocumentInfo documentInfo) {
    this.documentInfo = documentInfo;
    return this;
  }

  /**
   * The annotated entities, with associated confidence scores and metadata. This is the primary
   * output of WebRef/QRef. In case of Webref output, entities are sorted by decreasing topicality
   * score.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefWebrefEntity> getEntity() {
    return entity;
  }

  /**
   * The annotated entities, with associated confidence scores and metadata. This is the primary
   * output of WebRef/QRef. In case of Webref output, entities are sorted by decreasing topicality
   * score.
   * @param entity entity or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setEntity(java.util.List<RepositoryWebrefWebrefEntity> entity) {
    this.entity = entity;
    return this;
  }

  /**
   * These messages contain non-entity annotations of ranges in the document. This might be used to
   * hold part-of-speech annotations, stopword annotations, and other range based information. The
   * exclude_field option is for Goldmine AnnotationsFinder to exclude ranged_annotations from
   * retrieving annotation entities
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefRangeAnnotations> getRangeAnnotations() {
    return rangeAnnotations;
  }

  /**
   * These messages contain non-entity annotations of ranges in the document. This might be used to
   * hold part-of-speech annotations, stopword annotations, and other range based information. The
   * exclude_field option is for Goldmine AnnotationsFinder to exclude ranged_annotations from
   * retrieving annotation entities
   * @param rangeAnnotations rangeAnnotations or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setRangeAnnotations(java.util.List<RepositoryWebrefRangeAnnotations> rangeAnnotations) {
    this.rangeAnnotations = rangeAnnotations;
    return this;
  }

  /**
   * The status message returned by the annotator. Might not be populated on success.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefStatus getStatus() {
    return status;
  }

  /**
   * The status message returned by the annotator. Might not be populated on success.
   * @param status status or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setStatus(RepositoryWebrefWebrefStatus status) {
    this.status = status;
    return this;
  }

  /**
   * A generic container to hold extra result data.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getStuff() {
    return stuff;
  }

  /**
   * A generic container to hold extra result data.
   * @param stuff stuff or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setStuff(Proto2BridgeMessageSet stuff) {
    this.stuff = stuff;
    return this;
  }

  /**
   * Triples inferred from the document When the annotator recognizes phrases, lists or tables
   * associated with a property or relationship for an entity it generates triples that encode that
   * information. This generated data is only substantiated by the document vs KG data which has
   * been verified from multiple sources and/or human curators.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefTripleAnnotations getTripleAnnotations() {
    return tripleAnnotations;
  }

  /**
   * Triples inferred from the document When the annotator recognizes phrases, lists or tables
   * associated with a property or relationship for an entity it generates triples that encode that
   * information. This generated data is only substantiated by the document vs KG data which has
   * been verified from multiple sources and/or human curators.
   * @param tripleAnnotations tripleAnnotations or {@code null} for none
   */
  public RepositoryWebrefWebrefEntities setTripleAnnotations(RepositoryWebrefTripleAnnotations tripleAnnotations) {
    this.tripleAnnotations = tripleAnnotations;
    return this;
  }

  @Override
  public RepositoryWebrefWebrefEntities set(String fieldName, Object value) {
    return (RepositoryWebrefWebrefEntities) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefWebrefEntities clone() {
    return (RepositoryWebrefWebrefEntities) super.clone();
  }

}
