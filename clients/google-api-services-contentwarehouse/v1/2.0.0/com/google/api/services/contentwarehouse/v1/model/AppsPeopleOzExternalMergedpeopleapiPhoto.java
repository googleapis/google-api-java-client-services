/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for AppsPeopleOzExternalMergedpeopleapiPhoto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppsPeopleOzExternalMergedpeopleapiPhoto extends com.google.api.client.json.GenericJson {

  /**
   * URL of an emoji avatar as an image. See go/emoji-cdn. PeopleAPI will return the SVG format so
   * that it can be scaled client side and so that the images will not be animated. All clients that
   * use this field must also have fall-back handling for using the `Photo.url` field if this is
   * empty. When we have FIFE-compatible emoji-image URLs we will drop this field and return the
   * Photo.url instead. Clients that have their own go/emoji-rendering integration may prefer to
   * render the emoji-avatar from `Photo.glyph` field using their rendering system so that the emoji
   * version/style match the rest of the application. For further background, see go/chatroom-
   * avatar-as-roster-metadata. This field will only be populated if all of: - The
   * PersonFieldMetadata `container_type` for the Photo is NAMED_CHAT_ROOM - The chat room has an
   * emoji type avatar image set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String emojiAvatarUrl;

  /**
   * Unicode emoji representation of the chat room emoji avatar. This can be used by clients that
   * use go/emoji-rendering directly so that they can present this with the same version/style as
   * the rest of their application. This value may also be useful to clients as alt-text for the
   * image. This field will only be populated if all of: - The PersonFieldMetadata `container_type`
   * for the Photo is NAMED_CHAT_ROOM - The chat room has an emoji type avatar image set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String glyph;

  /**
   * A set of HTML data provider attributions that must be shown with the result. Supported for
   * PLACES photos only. See: go/understanding-places-api-attribution-requirements
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> htmlAttribution;

  /**
   * True when the photo is synthetic or generated (i.e. a monogram or default photo), false when
   * the person has a custom photo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDefault;

  /**
   * Indicates if the photo is a monogram avatar. Combined with is_default, the type of photo can be
   * determined by: is_default=true, is_monogram=true: Default monogram avatar. is_default=true,
   * is_monogram=false: Default silhouette avatar. is_default=false: Custom photo. is_monogram is
   * irrelevant in this case.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isMonogram;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata metadata;

  /**
   * When is_monogram=true, this is the background color of the monogram photo as a hex RGB
   * formatted string "RRGGBB".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String monogramBackground;

  /**
   * For writes only. Indicates photo content for person photo-field update. Currently only used for
   * profile-photo updates (not contact photos yet).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageId photoId;

  /**
   * Most clients don't need to worry about this field and should just use the `url` to fetch the
   * photo. See go/phototoken-migration-plan for some more context about this field. If you think
   * you want to use this please talk with people-api-eng@ first.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String photoToken;

  /**
   * See go/people-api-concepts/photos for info on the different representations of URLs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * A URL for a UI to view the photo in its original context. For example, for a place photo, this
   * is the url of a Google Maps page displaying the photo. Supported for place photos only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String viewerUrl;

  /**
   * URL of an emoji avatar as an image. See go/emoji-cdn. PeopleAPI will return the SVG format so
   * that it can be scaled client side and so that the images will not be animated. All clients that
   * use this field must also have fall-back handling for using the `Photo.url` field if this is
   * empty. When we have FIFE-compatible emoji-image URLs we will drop this field and return the
   * Photo.url instead. Clients that have their own go/emoji-rendering integration may prefer to
   * render the emoji-avatar from `Photo.glyph` field using their rendering system so that the emoji
   * version/style match the rest of the application. For further background, see go/chatroom-
   * avatar-as-roster-metadata. This field will only be populated if all of: - The
   * PersonFieldMetadata `container_type` for the Photo is NAMED_CHAT_ROOM - The chat room has an
   * emoji type avatar image set
   * @return value or {@code null} for none
   */
  public java.lang.String getEmojiAvatarUrl() {
    return emojiAvatarUrl;
  }

  /**
   * URL of an emoji avatar as an image. See go/emoji-cdn. PeopleAPI will return the SVG format so
   * that it can be scaled client side and so that the images will not be animated. All clients that
   * use this field must also have fall-back handling for using the `Photo.url` field if this is
   * empty. When we have FIFE-compatible emoji-image URLs we will drop this field and return the
   * Photo.url instead. Clients that have their own go/emoji-rendering integration may prefer to
   * render the emoji-avatar from `Photo.glyph` field using their rendering system so that the emoji
   * version/style match the rest of the application. For further background, see go/chatroom-
   * avatar-as-roster-metadata. This field will only be populated if all of: - The
   * PersonFieldMetadata `container_type` for the Photo is NAMED_CHAT_ROOM - The chat room has an
   * emoji type avatar image set
   * @param emojiAvatarUrl emojiAvatarUrl or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setEmojiAvatarUrl(java.lang.String emojiAvatarUrl) {
    this.emojiAvatarUrl = emojiAvatarUrl;
    return this;
  }

  /**
   * Unicode emoji representation of the chat room emoji avatar. This can be used by clients that
   * use go/emoji-rendering directly so that they can present this with the same version/style as
   * the rest of their application. This value may also be useful to clients as alt-text for the
   * image. This field will only be populated if all of: - The PersonFieldMetadata `container_type`
   * for the Photo is NAMED_CHAT_ROOM - The chat room has an emoji type avatar image set
   * @return value or {@code null} for none
   */
  public java.lang.String getGlyph() {
    return glyph;
  }

  /**
   * Unicode emoji representation of the chat room emoji avatar. This can be used by clients that
   * use go/emoji-rendering directly so that they can present this with the same version/style as
   * the rest of their application. This value may also be useful to clients as alt-text for the
   * image. This field will only be populated if all of: - The PersonFieldMetadata `container_type`
   * for the Photo is NAMED_CHAT_ROOM - The chat room has an emoji type avatar image set
   * @param glyph glyph or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setGlyph(java.lang.String glyph) {
    this.glyph = glyph;
    return this;
  }

  /**
   * A set of HTML data provider attributions that must be shown with the result. Supported for
   * PLACES photos only. See: go/understanding-places-api-attribution-requirements
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getHtmlAttribution() {
    return htmlAttribution;
  }

  /**
   * A set of HTML data provider attributions that must be shown with the result. Supported for
   * PLACES photos only. See: go/understanding-places-api-attribution-requirements
   * @param htmlAttribution htmlAttribution or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setHtmlAttribution(java.util.List<java.lang.String> htmlAttribution) {
    this.htmlAttribution = htmlAttribution;
    return this;
  }

  /**
   * True when the photo is synthetic or generated (i.e. a monogram or default photo), false when
   * the person has a custom photo.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDefault() {
    return isDefault;
  }

  /**
   * True when the photo is synthetic or generated (i.e. a monogram or default photo), false when
   * the person has a custom photo.
   * @param isDefault isDefault or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setIsDefault(java.lang.Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Indicates if the photo is a monogram avatar. Combined with is_default, the type of photo can be
   * determined by: is_default=true, is_monogram=true: Default monogram avatar. is_default=true,
   * is_monogram=false: Default silhouette avatar. is_default=false: Custom photo. is_monogram is
   * irrelevant in this case.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsMonogram() {
    return isMonogram;
  }

  /**
   * Indicates if the photo is a monogram avatar. Combined with is_default, the type of photo can be
   * determined by: is_default=true, is_monogram=true: Default monogram avatar. is_default=true,
   * is_monogram=false: Default silhouette avatar. is_default=false: Custom photo. is_monogram is
   * irrelevant in this case.
   * @param isMonogram isMonogram or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setIsMonogram(java.lang.Boolean isMonogram) {
    this.isMonogram = isMonogram;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata getMetadata() {
    return metadata;
  }

  /**
   * @param metadata metadata or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setMetadata(AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * When is_monogram=true, this is the background color of the monogram photo as a hex RGB
   * formatted string "RRGGBB".
   * @return value or {@code null} for none
   */
  public java.lang.String getMonogramBackground() {
    return monogramBackground;
  }

  /**
   * When is_monogram=true, this is the background color of the monogram photo as a hex RGB
   * formatted string "RRGGBB".
   * @param monogramBackground monogramBackground or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setMonogramBackground(java.lang.String monogramBackground) {
    this.monogramBackground = monogramBackground;
    return this;
  }

  /**
   * For writes only. Indicates photo content for person photo-field update. Currently only used for
   * profile-photo updates (not contact photos yet).
   * @return value or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageId getPhotoId() {
    return photoId;
  }

  /**
   * For writes only. Indicates photo content for person photo-field update. Currently only used for
   * profile-photo updates (not contact photos yet).
   * @param photoId photoId or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setPhotoId(AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageId photoId) {
    this.photoId = photoId;
    return this;
  }

  /**
   * Most clients don't need to worry about this field and should just use the `url` to fetch the
   * photo. See go/phototoken-migration-plan for some more context about this field. If you think
   * you want to use this please talk with people-api-eng@ first.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhotoToken() {
    return photoToken;
  }

  /**
   * Most clients don't need to worry about this field and should just use the `url` to fetch the
   * photo. See go/phototoken-migration-plan for some more context about this field. If you think
   * you want to use this please talk with people-api-eng@ first.
   * @param photoToken photoToken or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setPhotoToken(java.lang.String photoToken) {
    this.photoToken = photoToken;
    return this;
  }

  /**
   * See go/people-api-concepts/photos for info on the different representations of URLs.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * See go/people-api-concepts/photos for info on the different representations of URLs.
   * @param url url or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * A URL for a UI to view the photo in its original context. For example, for a place photo, this
   * is the url of a Google Maps page displaying the photo. Supported for place photos only.
   * @return value or {@code null} for none
   */
  public java.lang.String getViewerUrl() {
    return viewerUrl;
  }

  /**
   * A URL for a UI to view the photo in its original context. For example, for a place photo, this
   * is the url of a Google Maps page displaying the photo. Supported for place photos only.
   * @param viewerUrl viewerUrl or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiPhoto setViewerUrl(java.lang.String viewerUrl) {
    this.viewerUrl = viewerUrl;
    return this;
  }

  @Override
  public AppsPeopleOzExternalMergedpeopleapiPhoto set(String fieldName, Object value) {
    return (AppsPeopleOzExternalMergedpeopleapiPhoto) super.set(fieldName, value);
  }

  @Override
  public AppsPeopleOzExternalMergedpeopleapiPhoto clone() {
    return (AppsPeopleOzExternalMergedpeopleapiPhoto) super.clone();
  }

}
