/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * A message representing the key visualizer diagnostic messages.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DiagnosticMessage extends com.google.api.client.json.GenericJson {

  /**
   * Information about this diagnostic information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LocalizedString info;

  /**
   * The metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LocalizedString metric;

  /**
   * Whether this message is specific only for the current metric. By default Diagnostics are shown
   * for all metrics, regardless which metric is the currently selected metric in the UI. However
   * occasionally a metric will generate so many messages that the resulting visual clutter becomes
   * overwhelming. In this case setting this to true, will show the diagnostic messages for that
   * metric only if it is the currently selected metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean metricSpecific;

  /**
   * The severity of the diagnostic message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String severity;

  /**
   * The short message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LocalizedString shortMessage;

  /**
   * Information about this diagnostic information.
   * @return value or {@code null} for none
   */
  public LocalizedString getInfo() {
    return info;
  }

  /**
   * Information about this diagnostic information.
   * @param info info or {@code null} for none
   */
  public DiagnosticMessage setInfo(LocalizedString info) {
    this.info = info;
    return this;
  }

  /**
   * The metric.
   * @return value or {@code null} for none
   */
  public LocalizedString getMetric() {
    return metric;
  }

  /**
   * The metric.
   * @param metric metric or {@code null} for none
   */
  public DiagnosticMessage setMetric(LocalizedString metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Whether this message is specific only for the current metric. By default Diagnostics are shown
   * for all metrics, regardless which metric is the currently selected metric in the UI. However
   * occasionally a metric will generate so many messages that the resulting visual clutter becomes
   * overwhelming. In this case setting this to true, will show the diagnostic messages for that
   * metric only if it is the currently selected metric.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMetricSpecific() {
    return metricSpecific;
  }

  /**
   * Whether this message is specific only for the current metric. By default Diagnostics are shown
   * for all metrics, regardless which metric is the currently selected metric in the UI. However
   * occasionally a metric will generate so many messages that the resulting visual clutter becomes
   * overwhelming. In this case setting this to true, will show the diagnostic messages for that
   * metric only if it is the currently selected metric.
   * @param metricSpecific metricSpecific or {@code null} for none
   */
  public DiagnosticMessage setMetricSpecific(java.lang.Boolean metricSpecific) {
    this.metricSpecific = metricSpecific;
    return this;
  }

  /**
   * The severity of the diagnostic message.
   * @return value or {@code null} for none
   */
  public java.lang.String getSeverity() {
    return severity;
  }

  /**
   * The severity of the diagnostic message.
   * @param severity severity or {@code null} for none
   */
  public DiagnosticMessage setSeverity(java.lang.String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The short message.
   * @return value or {@code null} for none
   */
  public LocalizedString getShortMessage() {
    return shortMessage;
  }

  /**
   * The short message.
   * @param shortMessage shortMessage or {@code null} for none
   */
  public DiagnosticMessage setShortMessage(LocalizedString shortMessage) {
    this.shortMessage = shortMessage;
    return this;
  }

  @Override
  public DiagnosticMessage set(String fieldName, Object value) {
    return (DiagnosticMessage) super.set(fieldName, value);
  }

  @Override
  public DiagnosticMessage clone() {
    return (DiagnosticMessage) super.clone();
  }

}
