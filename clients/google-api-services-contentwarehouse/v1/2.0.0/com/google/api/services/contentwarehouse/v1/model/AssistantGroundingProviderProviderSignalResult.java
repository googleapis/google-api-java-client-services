/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Message containing the processed provider signals. This message is consumed by systems outside of
 * the Provider GP, such as the HGR. For use of provider signals within the Provider GP, please
 * refer to the CTF-governed PackedProviderSignals defined in:
 * cs/google3/assistant/context/proto/packed_provider_signals.proto;rcl=486224300;l=68
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantGroundingProviderProviderSignalResult extends com.google.api.client.json.GenericJson {

  /**
   * Whether the provider is the default provider for the BII and entity type. Also known as the
   * 'preferred_provider'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDefaultProvider;

  /**
   * Whether the provider is currently open in the foreground on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isForegroundProvider;

  /**
   * Indicates that fulfillment on this provider will happen within the provider app
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isInAppProvider;

  /**
   * Whether the provider is installed, or otherwise reachable, from the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isInstalled;

  /**
   * Whether the provider was the last-used provider for this intent on the device. Also known as
   * the 'sticky_provider'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLastUsedProvider;

  /**
   * Whether the provider was specified by the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isQueryRestrictedProvider;

  /**
   * The result of running provider-selection on the provider candidate. This is populated by the
   * Signal Extractor after the PSL has been run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantContextProviderSelectionResult providerSelectionResult;

  /**
   * Contains the "fulfillment type" of provider eg whether it's 0p or System API provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerTypeSignal;

  /**
   * Whether the provider is the default provider for the BII and entity type. Also known as the
   * 'preferred_provider'.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDefaultProvider() {
    return isDefaultProvider;
  }

  /**
   * Whether the provider is the default provider for the BII and entity type. Also known as the
   * 'preferred_provider'.
   * @param isDefaultProvider isDefaultProvider or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsDefaultProvider(java.lang.Boolean isDefaultProvider) {
    this.isDefaultProvider = isDefaultProvider;
    return this;
  }

  /**
   * Whether the provider is currently open in the foreground on the device.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsForegroundProvider() {
    return isForegroundProvider;
  }

  /**
   * Whether the provider is currently open in the foreground on the device.
   * @param isForegroundProvider isForegroundProvider or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsForegroundProvider(java.lang.Boolean isForegroundProvider) {
    this.isForegroundProvider = isForegroundProvider;
    return this;
  }

  /**
   * Indicates that fulfillment on this provider will happen within the provider app
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsInAppProvider() {
    return isInAppProvider;
  }

  /**
   * Indicates that fulfillment on this provider will happen within the provider app
   * @param isInAppProvider isInAppProvider or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsInAppProvider(java.lang.Boolean isInAppProvider) {
    this.isInAppProvider = isInAppProvider;
    return this;
  }

  /**
   * Whether the provider is installed, or otherwise reachable, from the device.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsInstalled() {
    return isInstalled;
  }

  /**
   * Whether the provider is installed, or otherwise reachable, from the device.
   * @param isInstalled isInstalled or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsInstalled(java.lang.Boolean isInstalled) {
    this.isInstalled = isInstalled;
    return this;
  }

  /**
   * Whether the provider was the last-used provider for this intent on the device. Also known as
   * the 'sticky_provider'.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLastUsedProvider() {
    return isLastUsedProvider;
  }

  /**
   * Whether the provider was the last-used provider for this intent on the device. Also known as
   * the 'sticky_provider'.
   * @param isLastUsedProvider isLastUsedProvider or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsLastUsedProvider(java.lang.Boolean isLastUsedProvider) {
    this.isLastUsedProvider = isLastUsedProvider;
    return this;
  }

  /**
   * Whether the provider was specified by the query.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsQueryRestrictedProvider() {
    return isQueryRestrictedProvider;
  }

  /**
   * Whether the provider was specified by the query.
   * @param isQueryRestrictedProvider isQueryRestrictedProvider or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setIsQueryRestrictedProvider(java.lang.Boolean isQueryRestrictedProvider) {
    this.isQueryRestrictedProvider = isQueryRestrictedProvider;
    return this;
  }

  /**
   * The result of running provider-selection on the provider candidate. This is populated by the
   * Signal Extractor after the PSL has been run.
   * @return value or {@code null} for none
   */
  public AssistantContextProviderSelectionResult getProviderSelectionResult() {
    return providerSelectionResult;
  }

  /**
   * The result of running provider-selection on the provider candidate. This is populated by the
   * Signal Extractor after the PSL has been run.
   * @param providerSelectionResult providerSelectionResult or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setProviderSelectionResult(AssistantContextProviderSelectionResult providerSelectionResult) {
    this.providerSelectionResult = providerSelectionResult;
    return this;
  }

  /**
   * Contains the "fulfillment type" of provider eg whether it's 0p or System API provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderTypeSignal() {
    return providerTypeSignal;
  }

  /**
   * Contains the "fulfillment type" of provider eg whether it's 0p or System API provider.
   * @param providerTypeSignal providerTypeSignal or {@code null} for none
   */
  public AssistantGroundingProviderProviderSignalResult setProviderTypeSignal(java.lang.String providerTypeSignal) {
    this.providerTypeSignal = providerTypeSignal;
    return this;
  }

  @Override
  public AssistantGroundingProviderProviderSignalResult set(String fieldName, Object value) {
    return (AssistantGroundingProviderProviderSignalResult) super.set(fieldName, value);
  }

  @Override
  public AssistantGroundingProviderProviderSignalResult clone() {
    return (AssistantGroundingProviderProviderSignalResult) super.clone();
  }

}
