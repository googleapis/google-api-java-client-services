/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alloydb.v1beta.model;

/**
 * Import cluster request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AlloyDB API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImportClusterRequest extends com.google.api.client.json.GenericJson {

  /**
   * Options for importing data in CSV format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CsvImportOptions csvImportOptions;

  /**
   * Optional. Name of the database to which the import will be done. For import from SQL file, this
   * is required only if the file does not specify a database. Note - Value provided should be the
   * same as expected from `SELECT current_database();` and NOT as a resource reference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * Required. The path to the file in Google Cloud Storage where the source file for import will be
   * stored. The URI is in the form `gs://bucketName/fileName`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcsUri;

  /**
   * Options for importing data in SQL format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SqlImportOptions sqlImportOptions;

  /**
   * Optional. Database user to be used for importing the data. Note - Value provided should be the
   * same as expected from `SELECT current_user;` and NOT as a resource reference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String user;

  /**
   * Options for importing data in CSV format.
   * @return value or {@code null} for none
   */
  public CsvImportOptions getCsvImportOptions() {
    return csvImportOptions;
  }

  /**
   * Options for importing data in CSV format.
   * @param csvImportOptions csvImportOptions or {@code null} for none
   */
  public ImportClusterRequest setCsvImportOptions(CsvImportOptions csvImportOptions) {
    this.csvImportOptions = csvImportOptions;
    return this;
  }

  /**
   * Optional. Name of the database to which the import will be done. For import from SQL file, this
   * is required only if the file does not specify a database. Note - Value provided should be the
   * same as expected from `SELECT current_database();` and NOT as a resource reference.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * Optional. Name of the database to which the import will be done. For import from SQL file, this
   * is required only if the file does not specify a database. Note - Value provided should be the
   * same as expected from `SELECT current_database();` and NOT as a resource reference.
   * @param database database or {@code null} for none
   */
  public ImportClusterRequest setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * Required. The path to the file in Google Cloud Storage where the source file for import will be
   * stored. The URI is in the form `gs://bucketName/fileName`.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcsUri() {
    return gcsUri;
  }

  /**
   * Required. The path to the file in Google Cloud Storage where the source file for import will be
   * stored. The URI is in the form `gs://bucketName/fileName`.
   * @param gcsUri gcsUri or {@code null} for none
   */
  public ImportClusterRequest setGcsUri(java.lang.String gcsUri) {
    this.gcsUri = gcsUri;
    return this;
  }

  /**
   * Options for importing data in SQL format.
   * @return value or {@code null} for none
   */
  public SqlImportOptions getSqlImportOptions() {
    return sqlImportOptions;
  }

  /**
   * Options for importing data in SQL format.
   * @param sqlImportOptions sqlImportOptions or {@code null} for none
   */
  public ImportClusterRequest setSqlImportOptions(SqlImportOptions sqlImportOptions) {
    this.sqlImportOptions = sqlImportOptions;
    return this;
  }

  /**
   * Optional. Database user to be used for importing the data. Note - Value provided should be the
   * same as expected from `SELECT current_user;` and NOT as a resource reference.
   * @return value or {@code null} for none
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Optional. Database user to be used for importing the data. Note - Value provided should be the
   * same as expected from `SELECT current_user;` and NOT as a resource reference.
   * @param user user or {@code null} for none
   */
  public ImportClusterRequest setUser(java.lang.String user) {
    this.user = user;
    return this;
  }

  @Override
  public ImportClusterRequest set(String fieldName, Object value) {
    return (ImportClusterRequest) super.set(fieldName, value);
  }

  @Override
  public ImportClusterRequest clone() {
    return (ImportClusterRequest) super.clone();
  }

}
