/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * CallCapabilities supported by a surface. See go/call-capabilities. Next ID: 7
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCallCapabilities extends com.google.api.client.json.GenericJson {

  /**
   * The supported call formats on the surface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callFormats;

  /**
   * The supported call mediums on the surface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callMediums;

  /**
   * The call options this surface can provide. For example, SPEAKERPHONE is available on Android
   * OPA while iOPA doesn't support it yet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callOptions;

  /**
   * If true, APP_ID queries initiated by this device should fall back to execution on the tethered
   * device if it's available and if the primary device cannot perform the action (e.g. due to the
   * app not being installed).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean fallbackToTetheredDeviceAppCapabilities;

  /**
   * Should only be checked if nonempty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supportedRecipientTypes;

  /**
   * Whether the surface supports Duo calling email endpoints.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsDuoEmailEndpoint;

  /**
   * The supported call formats on the surface.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallFormats() {
    return callFormats;
  }

  /**
   * The supported call formats on the surface.
   * @param callFormats callFormats or {@code null} for none
   */
  public AssistantApiCallCapabilities setCallFormats(java.util.List<java.lang.String> callFormats) {
    this.callFormats = callFormats;
    return this;
  }

  /**
   * The supported call mediums on the surface.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallMediums() {
    return callMediums;
  }

  /**
   * The supported call mediums on the surface.
   * @param callMediums callMediums or {@code null} for none
   */
  public AssistantApiCallCapabilities setCallMediums(java.util.List<java.lang.String> callMediums) {
    this.callMediums = callMediums;
    return this;
  }

  /**
   * The call options this surface can provide. For example, SPEAKERPHONE is available on Android
   * OPA while iOPA doesn't support it yet.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallOptions() {
    return callOptions;
  }

  /**
   * The call options this surface can provide. For example, SPEAKERPHONE is available on Android
   * OPA while iOPA doesn't support it yet.
   * @param callOptions callOptions or {@code null} for none
   */
  public AssistantApiCallCapabilities setCallOptions(java.util.List<java.lang.String> callOptions) {
    this.callOptions = callOptions;
    return this;
  }

  /**
   * If true, APP_ID queries initiated by this device should fall back to execution on the tethered
   * device if it's available and if the primary device cannot perform the action (e.g. due to the
   * app not being installed).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFallbackToTetheredDeviceAppCapabilities() {
    return fallbackToTetheredDeviceAppCapabilities;
  }

  /**
   * If true, APP_ID queries initiated by this device should fall back to execution on the tethered
   * device if it's available and if the primary device cannot perform the action (e.g. due to the
   * app not being installed).
   * @param fallbackToTetheredDeviceAppCapabilities fallbackToTetheredDeviceAppCapabilities or {@code null} for none
   */
  public AssistantApiCallCapabilities setFallbackToTetheredDeviceAppCapabilities(java.lang.Boolean fallbackToTetheredDeviceAppCapabilities) {
    this.fallbackToTetheredDeviceAppCapabilities = fallbackToTetheredDeviceAppCapabilities;
    return this;
  }

  /**
   * Should only be checked if nonempty.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupportedRecipientTypes() {
    return supportedRecipientTypes;
  }

  /**
   * Should only be checked if nonempty.
   * @param supportedRecipientTypes supportedRecipientTypes or {@code null} for none
   */
  public AssistantApiCallCapabilities setSupportedRecipientTypes(java.util.List<java.lang.String> supportedRecipientTypes) {
    this.supportedRecipientTypes = supportedRecipientTypes;
    return this;
  }

  /**
   * Whether the surface supports Duo calling email endpoints.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsDuoEmailEndpoint() {
    return supportsDuoEmailEndpoint;
  }

  /**
   * Whether the surface supports Duo calling email endpoints.
   * @param supportsDuoEmailEndpoint supportsDuoEmailEndpoint or {@code null} for none
   */
  public AssistantApiCallCapabilities setSupportsDuoEmailEndpoint(java.lang.Boolean supportsDuoEmailEndpoint) {
    this.supportsDuoEmailEndpoint = supportsDuoEmailEndpoint;
    return this;
  }

  @Override
  public AssistantApiCallCapabilities set(String fieldName, Object value) {
    return (AssistantApiCallCapabilities) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCallCapabilities clone() {
    return (AssistantApiCallCapabilities) super.clone();
  }

}
