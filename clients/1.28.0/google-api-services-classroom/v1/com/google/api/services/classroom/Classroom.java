/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.classroom;

/**
 * Service definition for Classroom (v1).
 *
 * <p>
 * Manages classes, rosters, and invitations in Google Classroom.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/classroom/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ClassroomRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Classroom extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Google Classroom API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://classroom.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Classroom(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Classroom(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Courses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Classroom classroom = new Classroom(...);}
   *   {@code Classroom.Courses.List request = classroom.courses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Courses courses() {
    return new Courses();
  }

  /**
   * The "courses" collection of methods.
   */
  public class Courses {

    /**
     * Creates a course.
     *
     * The user specified in `ownerId` is the owner of the created course and added as a teacher.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access
     * errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if the
     * course owner's account is disabled or for the following request errors:     *
     * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and
     * already exists.
     *
     * Create a request for the method "courses.create".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.classroom.model.Course}
     * @return the request
     */
    public Create create(com.google.api.services.classroom.model.Course content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Course> {

      private static final String REST_PATH = "v1/courses";

      /**
       * Creates a course.
       *
       * The user specified in `ownerId` is the owner of the created course and added as a teacher.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access
       * errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if
       * the course owner's account is disabled or for the following request errors:     *
       * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and
       * already exists.
       *
       * Create a request for the method "courses.create".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.classroom.model.Course}
       * @since 1.13
       */
      protected Create(com.google.api.services.classroom.model.Course content) {
        super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Course.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a course.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or
     * for access errors. * `NOT_FOUND` if no course exists with the requested ID.
     *
     * Create a request for the method "courses.delete".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the course to delete.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

      private static final String REST_PATH = "v1/courses/{id}";

      /**
       * Deletes a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or
       * for access errors. * `NOT_FOUND` if no course exists with the requested ID.
       *
       * Create a request for the method "courses.delete".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the course to delete.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Identifier of the course to delete. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier
     or an alias.
       */
      public java.lang.String getId() {
        return id;
      }

      /**
       * Identifier of the course to delete. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Returns a course.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
     * for access errors. * `NOT_FOUND` if no course exists with the requested ID.
     *
     * Create a request for the method "courses.get".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the course to return.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Course> {

      private static final String REST_PATH = "v1/courses/{id}";

      /**
       * Returns a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * for access errors. * `NOT_FOUND` if no course exists with the requested ID.
       *
       * Create a request for the method "courses.get".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the course to return.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Course.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Identifier of the course to return. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the course to return. This identifier can be either the Classroom-assigned identifier
     or an alias.
       */
      public java.lang.String getId() {
        return id;
      }

      /**
       * Identifier of the course to return. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Returns a list of courses that the requesting user is permitted to view, restricted to those that
     * match the request. Returned courses are ordered by creation time, with the most recently created
     * coming first.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is malformed.
     * * `NOT_FOUND` if any users specified in the query arguments do not exist.
     *
     * Create a request for the method "courses.list".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListCoursesResponse> {

      private static final String REST_PATH = "v1/courses";

      /**
       * Returns a list of courses that the requesting user is permitted to view, restricted to those
       * that match the request. Returned courses are ordered by creation time, with the most recently
       * created coming first.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is
       * malformed. * `NOT_FOUND` if any users specified in the query arguments do not exist.
       *
       * Create a request for the method "courses.list".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListCoursesResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Restricts returned courses to those in one of the specified states The default value is
       * ACTIVE, ARCHIVED, PROVISIONED, DECLINED.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> courseStates;

      /** Restricts returned courses to those in one of the specified states The default value is ACTIVE,
     ARCHIVED, PROVISIONED, DECLINED.
       */
      public java.util.List<java.lang.String> getCourseStates() {
        return courseStates;
      }

      /**
       * Restricts returned courses to those in one of the specified states The default value is
       * ACTIVE, ARCHIVED, PROVISIONED, DECLINED.
       */
      public List setCourseStates(java.util.List<java.lang.String> courseStates) {
        this.courseStates = courseStates;
        return this;
      }

      /**
       * Maximum number of items to return. Zero or unspecified indicates that the server may assign
       * a maximum.
       *
       * The server may return fewer than the specified number of results.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
     maximum.

     The server may return fewer than the specified number of results.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * Maximum number of items to return. Zero or unspecified indicates that the server may assign
       * a maximum.
       *
       * The server may return fewer than the specified number of results.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * nextPageToken value returned from a previous list call, indicating that the subsequent page
       * of results should be returned.
       *
       * The list request must be otherwise identical to the one that resulted in this token.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
     results should be returned.

     The list request must be otherwise identical to the one that resulted in this token.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * nextPageToken value returned from a previous list call, indicating that the subsequent page
       * of results should be returned.
       *
       * The list request must be otherwise identical to the one that resulted in this token.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Restricts returned courses to those having a student with the specified identifier. The
       * identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      @com.google.api.client.util.Key
      private java.lang.String studentId;

      /** Restricts returned courses to those having a student with the specified identifier. The identifier
     can be one of the following:

     * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
     indicating the requesting user
       */
      public java.lang.String getStudentId() {
        return studentId;
      }

      /**
       * Restricts returned courses to those having a student with the specified identifier. The
       * identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      public List setStudentId(java.lang.String studentId) {
        this.studentId = studentId;
        return this;
      }

      /**
       * Restricts returned courses to those having a teacher with the specified identifier. The
       * identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      @com.google.api.client.util.Key
      private java.lang.String teacherId;

      /** Restricts returned courses to those having a teacher with the specified identifier. The identifier
     can be one of the following:

     * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
     indicating the requesting user
       */
      public java.lang.String getTeacherId() {
        return teacherId;
      }

      /**
       * Restricts returned courses to those having a teacher with the specified identifier. The
       * identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      public List setTeacherId(java.lang.String teacherId) {
        this.teacherId = teacherId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates one or more fields in a course.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or
     * for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT`
     * if invalid fields are specified in the update mask or if no update mask is supplied. *
     * `FAILED_PRECONDITION` for the following request errors:     * CourseNotModifiable
     *
     * Create a request for the method "courses.patch".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the course to update.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
     * @param content the {@link com.google.api.services.classroom.model.Course}
     * @return the request
     */
    public Patch patch(java.lang.String id, com.google.api.services.classroom.model.Course content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends ClassroomRequest<com.google.api.services.classroom.model.Course> {

      private static final String REST_PATH = "v1/courses/{id}";

      /**
       * Updates one or more fields in a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or
       * for access errors. * `NOT_FOUND` if no course exists with the requested ID. *
       * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or if no update mask is
       * supplied. * `FAILED_PRECONDITION` for the following request errors:     * CourseNotModifiable
       *
       * Create a request for the method "courses.patch".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the course to update.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
       * @param content the {@link com.google.api.services.classroom.model.Course}
       * @since 1.13
       */
      protected Patch(java.lang.String id, com.google.api.services.classroom.model.Course content) {
        super(Classroom.this, "PATCH", REST_PATH, content, com.google.api.services.classroom.model.Course.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch set$Xgafv(java.lang.String $Xgafv) {
        return (Patch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Patch setAccessToken(java.lang.String accessToken) {
        return (Patch) super.setAccessToken(accessToken);
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setCallback(java.lang.String callback) {
        return (Patch) super.setCallback(callback);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUploadType(java.lang.String uploadType) {
        return (Patch) super.setUploadType(uploadType);
      }

      @Override
      public Patch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Patch) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Identifier of the course to update. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
     or an alias.
       */
      public java.lang.String getId() {
        return id;
      }

      /**
       * Identifier of the course to update. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      public Patch setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      /**
       * Mask that identifies which fields on the course to update. This field is required to do an
       * update. The update will fail if invalid fields are specified. The following fields are
       * valid:
       *
       * * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` *
       * `ownerId`
       *
       * Note: patches to ownerId are treated as being effective immediately, but in practice it may
       * take some time for the ownership transfer of all affected resources to complete.
       *
       * When set in a query parameter, this field should be specified as
       *
       * `updateMask=,,...`
       */
      @com.google.api.client.util.Key
      private String updateMask;

      /** Mask that identifies which fields on the course to update. This field is required to do an update.
     The update will fail if invalid fields are specified. The following fields are valid:

     * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` * `ownerId`

     Note: patches to ownerId are treated as being effective immediately, but in practice it may take
     some time for the ownership transfer of all affected resources to complete.

     When set in a query parameter, this field should be specified as

     `updateMask=,,...`
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /**
       * Mask that identifies which fields on the course to update. This field is required to do an
       * update. The update will fail if invalid fields are specified. The following fields are
       * valid:
       *
       * * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` *
       * `ownerId`
       *
       * Note: patches to ownerId are treated as being effective immediately, but in practice it may
       * take some time for the ownership transfer of all affected resources to complete.
       *
       * When set in a query parameter, this field should be specified as
       *
       * `updateMask=,,...`
       */
      public Patch setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates a course.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or
     * for access errors. * `NOT_FOUND` if no course exists with the requested ID. *
     * `FAILED_PRECONDITION` for the following request errors:     * CourseNotModifiable
     *
     * Create a request for the method "courses.update".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the course to update.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
     * @param content the {@link com.google.api.services.classroom.model.Course}
     * @return the request
     */
    public Update update(java.lang.String id, com.google.api.services.classroom.model.Course content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends ClassroomRequest<com.google.api.services.classroom.model.Course> {

      private static final String REST_PATH = "v1/courses/{id}";

      /**
       * Updates a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or
       * for access errors. * `NOT_FOUND` if no course exists with the requested ID. *
       * `FAILED_PRECONDITION` for the following request errors:     * CourseNotModifiable
       *
       * Create a request for the method "courses.update".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the course to update.
    This identifier can be either the Classroom-assigned identifier
     *        or an
    alias.
       * @param content the {@link com.google.api.services.classroom.model.Course}
       * @since 1.13
       */
      protected Update(java.lang.String id, com.google.api.services.classroom.model.Course content) {
        super(Classroom.this, "PUT", REST_PATH, content, com.google.api.services.classroom.model.Course.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Identifier of the course to update. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
     or an alias.
       */
      public java.lang.String getId() {
        return id;
      }

      /**
       * Identifier of the course to update. This identifier can be either the Classroom-assigned
       * identifier or an alias.
       */
      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Aliases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.Aliases.List request = classroom.aliases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Aliases aliases() {
      return new Aliases();
    }

    /**
     * The "aliases" collection of methods.
     */
    public class Aliases {

      /**
       * Creates an alias for a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access
       * errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already
       * exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the   requesting
       * user or course (for example, if a user not in a domain   attempts to access a domain-scoped
       * alias).
       *
       * Create a request for the method "aliases.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course to alias.
      This identifier can be either the Classroom-assigned identifier
       *        or an
      alias.
       * @param content the {@link com.google.api.services.classroom.model.CourseAlias}
       * @return the request
       */
      public Create create(java.lang.String courseId, com.google.api.services.classroom.model.CourseAlias content) throws java.io.IOException {
        Create result = new Create(courseId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.CourseAlias> {

        private static final String REST_PATH = "v1/courses/{courseId}/aliases";

        /**
         * Creates an alias for a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access
         * errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already
         * exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the   requesting
         * user or course (for example, if a user not in a domain   attempts to access a domain-scoped
         * alias).
         *
         * Create a request for the method "aliases.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course to alias.
      This identifier can be either the Classroom-assigned identifier
       *        or an
      alias.
         * @param content the {@link com.google.api.services.classroom.model.CourseAlias}
         * @since 1.13
         */
        protected Create(java.lang.String courseId, com.google.api.services.classroom.model.CourseAlias content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.CourseAlias.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course to alias. This identifier can be either the Classroom-assigned
         * identifier or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course to alias. This identifier can be either the Classroom-assigned identifier
       or an alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course to alias. This identifier can be either the Classroom-assigned
         * identifier or an alias.
         */
        public Create setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes an alias of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access
       * errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias requested
       * does not make sense for the   requesting user or course (for example, if a user not in a domain
       * attempts to delete a domain-scoped alias).
       *
       * Create a request for the method "aliases.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course whose alias should be deleted.
      This identifier can be either the Classroom-
       *        assigned identifier or an
      alias.
       * @param alias Alias to delete.
      This may not be the Classroom-assigned identifier.
       * @return the request
       */
      public Delete delete(java.lang.String courseId, java.lang.String alias) throws java.io.IOException {
        Delete result = new Delete(courseId, alias);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/courses/{courseId}/aliases/{alias}";

        /**
         * Deletes an alias of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access
         * errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias
         * requested does not make sense for the   requesting user or course (for example, if a user not
         * in a domain   attempts to delete a domain-scoped alias).
         *
         * Create a request for the method "aliases.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course whose alias should be deleted.
      This identifier can be either the Classroom-
       *        assigned identifier or an
      alias.
         * @param alias Alias to delete.
      This may not be the Classroom-assigned identifier.
         * @since 1.13
         */
        protected Delete(java.lang.String courseId, java.lang.String alias) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.alias = com.google.api.client.util.Preconditions.checkNotNull(alias, "Required parameter alias must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course whose alias should be deleted. This identifier can be either the
         * Classroom-assigned identifier or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course whose alias should be deleted. This identifier can be either the
       Classroom-assigned identifier or an alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course whose alias should be deleted. This identifier can be either the
         * Classroom-assigned identifier or an alias.
         */
        public Delete setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Alias to delete. This may not be the Classroom-assigned identifier.
         */
        @com.google.api.client.util.Key
        private java.lang.String alias;

        /** Alias to delete. This may not be the Classroom-assigned identifier.
         */
        public java.lang.String getAlias() {
          return alias;
        }

        /**
         * Alias to delete. This may not be the Classroom-assigned identifier.
         */
        public Delete setAlias(java.lang.String alias) {
          this.alias = alias;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of aliases for a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access
       * errors. * `NOT_FOUND` if the course does not exist.
       *
       * Create a request for the method "aliases.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId The identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @return the request
       */
      public List list(java.lang.String courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListCourseAliasesResponse> {

        private static final String REST_PATH = "v1/courses/{courseId}/aliases";

        /**
         * Returns a list of aliases for a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for
         * access errors. * `NOT_FOUND` if the course does not exist.
         *
         * Create a request for the method "aliases.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId The identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @since 1.13
         */
        protected List(java.lang.String courseId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListCourseAliasesResponse.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The identifier of the course. This identifier can be either the Classroom-assigned
         * identifier or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** The identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * The identifier of the course. This identifier can be either the Classroom-assigned
         * identifier or an alias.
         */
        public List setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
       maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Announcements collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.Announcements.List request = classroom.announcements().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Announcements announcements() {
      return new Announcements();
    }

    /**
     * The "announcements" collection of methods.
     */
    public class Announcements {

      /**
       * Creates an announcement.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
       * create announcements in the requested course, share a Drive attachment, or for access errors. *
       * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not
       * exist. * `FAILED_PRECONDITION` for the following request error:     * AttachmentNotVisible
       *
       * Create a request for the method "announcements.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param content the {@link com.google.api.services.classroom.model.Announcement}
       * @return the request
       */
      public Create create(java.lang.String courseId, com.google.api.services.classroom.model.Announcement content) throws java.io.IOException {
        Create result = new Create(courseId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Announcement> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements";

        /**
         * Creates an announcement.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
         * create announcements in the requested course, share a Drive attachment, or for access errors. *
         * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not
         * exist. * `FAILED_PRECONDITION` for the following request error:     * AttachmentNotVisible
         *
         * Create a request for the method "announcements.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param content the {@link com.google.api.services.classroom.model.Announcement}
         * @since 1.13
         */
        protected Create(java.lang.String courseId, com.google.api.services.classroom.model.Announcement content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Announcement.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Create setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes an announcement.
       *
       * This request must be made by the Developer Console project of the [OAuth client
       * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding
       * announcement item.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
       * announcement, if the requesting user is not permitted to delete the requested course or for
       * access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. *
       * `NOT_FOUND` if no course exists with the requested ID.
       *
       * Create a request for the method "announcements.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the announcement to delete.
      This identifier is a Classroom-assigned identifier.
       * @return the request
       */
      public Delete delete(java.lang.String courseId, java.lang.String id) throws java.io.IOException {
        Delete result = new Delete(courseId, id);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements/{id}";

        /**
         * Deletes an announcement.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding
         * announcement item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
         * announcement, if the requesting user is not permitted to delete the requested course or for
         * access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted.
         * * `NOT_FOUND` if no course exists with the requested ID.
         *
         * Create a request for the method "announcements.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the announcement to delete.
      This identifier is a Classroom-assigned identifier.
         * @since 1.13
         */
        protected Delete(java.lang.String courseId, java.lang.String id) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Delete setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the announcement to delete. This identifier is a Classroom-assigned
         * identifier.
         */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the announcement to delete. This identifier is a Classroom-assigned identifier.
         */
        public java.lang.String getId() {
          return id;
        }

        /**
         * Identifier of the announcement to delete. This identifier is a Classroom-assigned
         * identifier.
         */
        public Delete setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns an announcement.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
       * `NOT_FOUND` if the requested course or announcement does not exist.
       *
       * Create a request for the method "announcements.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the announcement.
       * @return the request
       */
      public Get get(java.lang.String courseId, java.lang.String id) throws java.io.IOException {
        Get result = new Get(courseId, id);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Announcement> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements/{id}";

        /**
         * Returns an announcement.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `NOT_FOUND` if the requested course or announcement does not exist.
         *
         * Create a request for the method "announcements.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the announcement.
         * @since 1.13
         */
        protected Get(java.lang.String courseId, java.lang.String id) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Announcement.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Get setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the announcement. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the announcement.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the announcement. */
        public Get setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of announcements that the requester is permitted to view.
       *
       * Course students may only view `PUBLISHED` announcements. Course teachers and domain
       * administrators may view all announcements.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the
       * requested course does not exist.
       *
       * Create a request for the method "announcements.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @return the request
       */
      public List list(java.lang.String courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListAnnouncementsResponse> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements";

        /**
         * Returns a list of announcements that the requester is permitted to view.
         *
         * Course students may only view `PUBLISHED` announcements. Course teachers and domain
         * administrators may view all announcements.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the
         * requested course does not exist.
         *
         * Create a request for the method "announcements.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @since 1.13
         */
        protected List(java.lang.String courseId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListAnnouncementsResponse.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public List setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Restriction on the `state` of announcements returned. If this argument is left
         * unspecified, the default value is `PUBLISHED`.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> announcementStates;

        /** Restriction on the `state` of announcements returned. If this argument is left unspecified, the
       default value is `PUBLISHED`.
         */
        public java.util.List<java.lang.String> getAnnouncementStates() {
          return announcementStates;
        }

        /**
         * Restriction on the `state` of announcements returned. If this argument is left
         * unspecified, the default value is `PUBLISHED`.
         */
        public List setAnnouncementStates(java.util.List<java.lang.String> announcementStates) {
          this.announcementStates = announcementStates;
          return this;
        }

        /**
         * Optional sort ordering for results. A comma-separated list of fields with an optional
         * sort direction keyword. Supported field is `updateTime`. Supported direction keywords are
         * `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples:
         * `updateTime asc`, `updateTime`
         */
        @com.google.api.client.util.Key
        private java.lang.String orderBy;

        /** Optional sort ordering for results. A comma-separated list of fields with an optional sort
       direction keyword. Supported field is `updateTime`. Supported direction keywords are `asc` and
       `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `updateTime asc`,
       `updateTime`
         */
        public java.lang.String getOrderBy() {
          return orderBy;
        }

        /**
         * Optional sort ordering for results. A comma-separated list of fields with an optional
         * sort direction keyword. Supported field is `updateTime`. Supported direction keywords are
         * `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples:
         * `updateTime asc`, `updateTime`
         */
        public List setOrderBy(java.lang.String orderBy) {
          this.orderBy = orderBy;
          return this;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
       maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Modifies assignee mode and options of an announcement.
       *
       * Only a teacher of the course that contains the announcement may call this method.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND`
       * if the requested course or course work does not exist.
       *
       * Create a request for the method "announcements.modifyAssignees".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link ModifyAssignees#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the announcement.
       * @param content the {@link com.google.api.services.classroom.model.ModifyAnnouncementAssigneesRequest}
       * @return the request
       */
      public ModifyAssignees modifyAssignees(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.ModifyAnnouncementAssigneesRequest content) throws java.io.IOException {
        ModifyAssignees result = new ModifyAssignees(courseId, id, content);
        initialize(result);
        return result;
      }

      public class ModifyAssignees extends ClassroomRequest<com.google.api.services.classroom.model.Announcement> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements/{id}:modifyAssignees";

        /**
         * Modifies assignee mode and options of an announcement.
         *
         * Only a teacher of the course that contains the announcement may call this method.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `NOT_FOUND` if the requested course or course work does not exist.
         *
         * Create a request for the method "announcements.modifyAssignees".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link ModifyAssignees#execute()} method to invoke the remote
         * operation. <p> {@link ModifyAssignees#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the announcement.
         * @param content the {@link com.google.api.services.classroom.model.ModifyAnnouncementAssigneesRequest}
         * @since 1.13
         */
        protected ModifyAssignees(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.ModifyAnnouncementAssigneesRequest content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Announcement.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public ModifyAssignees set$Xgafv(java.lang.String $Xgafv) {
          return (ModifyAssignees) super.set$Xgafv($Xgafv);
        }

        @Override
        public ModifyAssignees setAccessToken(java.lang.String accessToken) {
          return (ModifyAssignees) super.setAccessToken(accessToken);
        }

        @Override
        public ModifyAssignees setAlt(java.lang.String alt) {
          return (ModifyAssignees) super.setAlt(alt);
        }

        @Override
        public ModifyAssignees setCallback(java.lang.String callback) {
          return (ModifyAssignees) super.setCallback(callback);
        }

        @Override
        public ModifyAssignees setFields(java.lang.String fields) {
          return (ModifyAssignees) super.setFields(fields);
        }

        @Override
        public ModifyAssignees setKey(java.lang.String key) {
          return (ModifyAssignees) super.setKey(key);
        }

        @Override
        public ModifyAssignees setOauthToken(java.lang.String oauthToken) {
          return (ModifyAssignees) super.setOauthToken(oauthToken);
        }

        @Override
        public ModifyAssignees setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ModifyAssignees) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ModifyAssignees setQuotaUser(java.lang.String quotaUser) {
          return (ModifyAssignees) super.setQuotaUser(quotaUser);
        }

        @Override
        public ModifyAssignees setUploadType(java.lang.String uploadType) {
          return (ModifyAssignees) super.setUploadType(uploadType);
        }

        @Override
        public ModifyAssignees setUploadProtocol(java.lang.String uploadProtocol) {
          return (ModifyAssignees) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public ModifyAssignees setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the announcement. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the announcement.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the announcement. */
        public ModifyAssignees setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public ModifyAssignees set(String parameterName, Object value) {
          return (ModifyAssignees) super.set(parameterName, value);
        }
      }
      /**
       * Updates one or more fields of an announcement.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
       * announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
       * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if
       * the requested course or announcement does not exist
       *
       * Create a request for the method "announcements.patch".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the announcement.
       * @param content the {@link com.google.api.services.classroom.model.Announcement}
       * @return the request
       */
      public Patch patch(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.Announcement content) throws java.io.IOException {
        Patch result = new Patch(courseId, id, content);
        initialize(result);
        return result;
      }

      public class Patch extends ClassroomRequest<com.google.api.services.classroom.model.Announcement> {

        private static final String REST_PATH = "v1/courses/{courseId}/announcements/{id}";

        /**
         * Updates one or more fields of an announcement.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
         * announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if
         * the requested course or announcement does not exist
         *
         * Create a request for the method "announcements.patch".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the announcement.
         * @param content the {@link com.google.api.services.classroom.model.Announcement}
         * @since 1.13
         */
        protected Patch(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.Announcement content) {
          super(Classroom.this, "PATCH", REST_PATH, content, com.google.api.services.classroom.model.Announcement.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Patch setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the announcement. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the announcement.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the announcement. */
        public Patch setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        /**
         * Mask that identifies which fields on the announcement to update. This field is required
         * to do an update. The update fails if invalid fields are specified. If a field supports
         * empty values, it can be cleared by specifying it in the update mask and not in the
         * Announcement object. If a field that does not support empty values is included in the
         * update mask and not set in the Announcement object, an `INVALID_ARGUMENT` error will be
         * returned.
         *
         * The following fields may be specified by teachers:
         *
         * * `text` * `state` * `scheduled_time`
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Mask that identifies which fields on the announcement to update. This field is required to do an
       update. The update fails if invalid fields are specified. If a field supports empty values, it can
       be cleared by specifying it in the update mask and not in the Announcement object. If a field that
       does not support empty values is included in the update mask and not set in the Announcement
       object, an `INVALID_ARGUMENT` error will be returned.

       The following fields may be specified by teachers:

       * `text` * `state` * `scheduled_time`
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Mask that identifies which fields on the announcement to update. This field is required
         * to do an update. The update fails if invalid fields are specified. If a field supports
         * empty values, it can be cleared by specifying it in the update mask and not in the
         * Announcement object. If a field that does not support empty values is included in the
         * update mask and not set in the Announcement object, an `INVALID_ARGUMENT` error will be
         * returned.
         *
         * The following fields may be specified by teachers:
         *
         * * `text` * `state` * `scheduled_time`
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the CourseWork collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.CourseWork.List request = classroom.courseWork().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public CourseWork courseWork() {
      return new CourseWork();
    }

    /**
     * The "courseWork" collection of methods.
     */
    public class CourseWork {

      /**
       * Creates course work.
       *
       * The resulting course work (and corresponding student submissions) are associated with the
       * Developer Console project of the [OAuth client
       * ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API
       * requests to modify course work and student submissions must be made with an OAuth client ID from
       * the associated Developer Console project.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
       * create course work in the requested course, share a Drive attachment, or for access errors. *
       * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not
       * exist. * `FAILED_PRECONDITION` for the following request error:     * AttachmentNotVisible
       *
       * Create a request for the method "courseWork.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param content the {@link com.google.api.services.classroom.model.CourseWork}
       * @return the request
       */
      public Create create(java.lang.String courseId, com.google.api.services.classroom.model.CourseWork content) throws java.io.IOException {
        Create result = new Create(courseId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.CourseWork> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork";

        /**
         * Creates course work.
         *
         * The resulting course work (and corresponding student submissions) are associated with the
         * Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API
         * requests to modify course work and student submissions must be made with an OAuth client ID
         * from the associated Developer Console project.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
         * create course work in the requested course, share a Drive attachment, or for access errors. *
         * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not
         * exist. * `FAILED_PRECONDITION` for the following request error:     * AttachmentNotVisible
         *
         * Create a request for the method "courseWork.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param content the {@link com.google.api.services.classroom.model.CourseWork}
         * @since 1.13
         */
        protected Create(java.lang.String courseId, com.google.api.services.classroom.model.CourseWork content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.CourseWork.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Create setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a course work.
       *
       * This request must be made by the Developer Console project of the [OAuth client
       * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
       * item.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course
       * work, if the requesting user is not permitted to delete the requested course or for access
       * errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. *
       * `NOT_FOUND` if no course exists with the requested ID.
       *
       * Create a request for the method "courseWork.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the course work to delete.
      This identifier is a Classroom-assigned identifier.
       * @return the request
       */
      public Delete delete(java.lang.String courseId, java.lang.String id) throws java.io.IOException {
        Delete result = new Delete(courseId, id);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{id}";

        /**
         * Deletes a course work.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
         * work item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
         * course work, if the requesting user is not permitted to delete the requested course or for
         * access errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. *
         * `NOT_FOUND` if no course exists with the requested ID.
         *
         * Create a request for the method "courseWork.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the course work to delete.
      This identifier is a Classroom-assigned identifier.
         * @since 1.13
         */
        protected Delete(java.lang.String courseId, java.lang.String id) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Delete setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the course work to delete. This identifier is a Classroom-assigned
         * identifier.
         */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the course work to delete. This identifier is a Classroom-assigned identifier.
         */
        public java.lang.String getId() {
          return id;
        }

        /**
         * Identifier of the course work to delete. This identifier is a Classroom-assigned
         * identifier.
         */
        public Delete setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns course work.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
       * `NOT_FOUND` if the requested course or course work does not exist.
       *
       * Create a request for the method "courseWork.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the course work.
       * @return the request
       */
      public Get get(java.lang.String courseId, java.lang.String id) throws java.io.IOException {
        Get result = new Get(courseId, id);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.CourseWork> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{id}";

        /**
         * Returns course work.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `NOT_FOUND` if the requested course or course work does not exist.
         *
         * Create a request for the method "courseWork.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the course work.
         * @since 1.13
         */
        protected Get(java.lang.String courseId, java.lang.String id) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.CourseWork.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Get setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the course work. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the course work.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the course work. */
        public Get setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of course work that the requester is permitted to view.
       *
       * Course students may only view `PUBLISHED` course work. Course teachers and domain administrators
       * may view all course work.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the
       * requested course does not exist.
       *
       * Create a request for the method "courseWork.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @return the request
       */
      public List list(java.lang.String courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListCourseWorkResponse> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork";

        /**
         * Returns a list of course work that the requester is permitted to view.
         *
         * Course students may only view `PUBLISHED` course work. Course teachers and domain
         * administrators may view all course work.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the
         * requested course does not exist.
         *
         * Create a request for the method "courseWork.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @since 1.13
         */
        protected List(java.lang.String courseId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListCourseWorkResponse.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public List setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Restriction on the work status to return. Only courseWork that matches is returned. If
         * unspecified, items with a work status of `PUBLISHED` is returned.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> courseWorkStates;

        /** Restriction on the work status to return. Only courseWork that matches is returned. If unspecified,
       items with a work status of `PUBLISHED` is returned.
         */
        public java.util.List<java.lang.String> getCourseWorkStates() {
          return courseWorkStates;
        }

        /**
         * Restriction on the work status to return. Only courseWork that matches is returned. If
         * unspecified, items with a work status of `PUBLISHED` is returned.
         */
        public List setCourseWorkStates(java.util.List<java.lang.String> courseWorkStates) {
          this.courseWorkStates = courseWorkStates;
          return this;
        }

        /**
         * Optional sort ordering for results. A comma-separated list of fields with an optional
         * sort direction keyword. Supported fields are `updateTime` and `dueDate`. Supported
         * direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the
         * default behavior. Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
         */
        @com.google.api.client.util.Key
        private java.lang.String orderBy;

        /** Optional sort ordering for results. A comma-separated list of fields with an optional sort
       direction keyword. Supported fields are `updateTime` and `dueDate`. Supported direction keywords
       are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples:
       `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
         */
        public java.lang.String getOrderBy() {
          return orderBy;
        }

        /**
         * Optional sort ordering for results. A comma-separated list of fields with an optional
         * sort direction keyword. Supported fields are `updateTime` and `dueDate`. Supported
         * direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the
         * default behavior. Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
         */
        public List setOrderBy(java.lang.String orderBy) {
          this.orderBy = orderBy;
          return this;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
       maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Modifies assignee mode and options of a coursework.
       *
       * Only a teacher of the course that contains the coursework may call this method.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
       * course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND`
       * if the requested course or course work does not exist.
       *
       * Create a request for the method "courseWork.modifyAssignees".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link ModifyAssignees#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the coursework.
       * @param content the {@link com.google.api.services.classroom.model.ModifyCourseWorkAssigneesRequest}
       * @return the request
       */
      public ModifyAssignees modifyAssignees(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.ModifyCourseWorkAssigneesRequest content) throws java.io.IOException {
        ModifyAssignees result = new ModifyAssignees(courseId, id, content);
        initialize(result);
        return result;
      }

      public class ModifyAssignees extends ClassroomRequest<com.google.api.services.classroom.model.CourseWork> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{id}:modifyAssignees";

        /**
         * Modifies assignee mode and options of a coursework.
         *
         * Only a teacher of the course that contains the coursework may call this method.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `NOT_FOUND` if the requested course or course work does not exist.
         *
         * Create a request for the method "courseWork.modifyAssignees".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link ModifyAssignees#execute()} method to invoke the remote
         * operation. <p> {@link ModifyAssignees#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the coursework.
         * @param content the {@link com.google.api.services.classroom.model.ModifyCourseWorkAssigneesRequest}
         * @since 1.13
         */
        protected ModifyAssignees(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.ModifyCourseWorkAssigneesRequest content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.CourseWork.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public ModifyAssignees set$Xgafv(java.lang.String $Xgafv) {
          return (ModifyAssignees) super.set$Xgafv($Xgafv);
        }

        @Override
        public ModifyAssignees setAccessToken(java.lang.String accessToken) {
          return (ModifyAssignees) super.setAccessToken(accessToken);
        }

        @Override
        public ModifyAssignees setAlt(java.lang.String alt) {
          return (ModifyAssignees) super.setAlt(alt);
        }

        @Override
        public ModifyAssignees setCallback(java.lang.String callback) {
          return (ModifyAssignees) super.setCallback(callback);
        }

        @Override
        public ModifyAssignees setFields(java.lang.String fields) {
          return (ModifyAssignees) super.setFields(fields);
        }

        @Override
        public ModifyAssignees setKey(java.lang.String key) {
          return (ModifyAssignees) super.setKey(key);
        }

        @Override
        public ModifyAssignees setOauthToken(java.lang.String oauthToken) {
          return (ModifyAssignees) super.setOauthToken(oauthToken);
        }

        @Override
        public ModifyAssignees setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ModifyAssignees) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ModifyAssignees setQuotaUser(java.lang.String quotaUser) {
          return (ModifyAssignees) super.setQuotaUser(quotaUser);
        }

        @Override
        public ModifyAssignees setUploadType(java.lang.String uploadType) {
          return (ModifyAssignees) super.setUploadType(uploadType);
        }

        @Override
        public ModifyAssignees setUploadProtocol(java.lang.String uploadProtocol) {
          return (ModifyAssignees) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public ModifyAssignees setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the coursework. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the coursework.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the coursework. */
        public ModifyAssignees setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        @Override
        public ModifyAssignees set(String parameterName, Object value) {
          return (ModifyAssignees) super.set(parameterName, value);
        }
      }
      /**
       * Updates one or more fields of a course work.
       *
       * See google.classroom.v1.CourseWork for details of which fields may be updated and who may change
       * them.
       *
       * This request must be made by the Developer Console project of the [OAuth client
       * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
       * item.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course
       * work, if the user is not permitted to make the requested modification to the student submission,
       * or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION`
       * if the requested course work has already been deleted. * `NOT_FOUND` if the requested course,
       * course work, or student submission does not exist.
       *
       * Create a request for the method "courseWork.patch".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param id Identifier of the course work.
       * @param content the {@link com.google.api.services.classroom.model.CourseWork}
       * @return the request
       */
      public Patch patch(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.CourseWork content) throws java.io.IOException {
        Patch result = new Patch(courseId, id, content);
        initialize(result);
        return result;
      }

      public class Patch extends ClassroomRequest<com.google.api.services.classroom.model.CourseWork> {

        private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{id}";

        /**
         * Updates one or more fields of a course work.
         *
         * See google.classroom.v1.CourseWork for details of which fields may be updated and who may
         * change them.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
         * work item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
         * course work, if the user is not permitted to make the requested modification to the student
         * submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if
         * the requested course, course work, or student submission does not exist.
         *
         * Create a request for the method "courseWork.patch".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param id Identifier of the course work.
         * @param content the {@link com.google.api.services.classroom.model.CourseWork}
         * @since 1.13
         */
        protected Patch(java.lang.String courseId, java.lang.String id, com.google.api.services.classroom.model.CourseWork content) {
          super(Classroom.this, "PATCH", REST_PATH, content, com.google.api.services.classroom.model.CourseWork.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Patch setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /** Identifier of the course work. */
        @com.google.api.client.util.Key
        private java.lang.String id;

        /** Identifier of the course work.
         */
        public java.lang.String getId() {
          return id;
        }

        /** Identifier of the course work. */
        public Patch setId(java.lang.String id) {
          this.id = id;
          return this;
        }

        /**
         * Mask that identifies which fields on the course work to update. This field is required to
         * do an update. The update fails if invalid fields are specified. If a field supports empty
         * values, it can be cleared by specifying it in the update mask and not in the CourseWork
         * object. If a field that does not support empty values is included in the update mask and
         * not set in the CourseWork object, an `INVALID_ARGUMENT` error will be returned.
         *
         * The following fields may be specified by teachers:
         *
         * * `title` * `description` * `state` * `due_date` * `due_time` * `max_points` *
         * `scheduled_time` * `submission_modification_mode`
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Mask that identifies which fields on the course work to update. This field is required to do an
       update. The update fails if invalid fields are specified. If a field supports empty values, it can
       be cleared by specifying it in the update mask and not in the CourseWork object. If a field that
       does not support empty values is included in the update mask and not set in the CourseWork object,
       an `INVALID_ARGUMENT` error will be returned.

       The following fields may be specified by teachers:

       * `title` * `description` * `state` * `due_date` * `due_time` * `max_points` * `scheduled_time` *
       `submission_modification_mode`
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Mask that identifies which fields on the course work to update. This field is required to
         * do an update. The update fails if invalid fields are specified. If a field supports empty
         * values, it can be cleared by specifying it in the update mask and not in the CourseWork
         * object. If a field that does not support empty values is included in the update mask and
         * not set in the CourseWork object, an `INVALID_ARGUMENT` error will be returned.
         *
         * The following fields may be specified by teachers:
         *
         * * `title` * `description` * `state` * `due_date` * `due_time` * `max_points` *
         * `scheduled_time` * `submission_modification_mode`
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the StudentSubmissions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Classroom classroom = new Classroom(...);}
       *   {@code Classroom.StudentSubmissions.List request = classroom.studentSubmissions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public StudentSubmissions studentSubmissions() {
        return new StudentSubmissions();
      }

      /**
       * The "studentSubmissions" collection of methods.
       */
      public class StudentSubmissions {

        /**
         * Returns a student submission.
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
         * course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is
         * malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not
         * exist.
         *
         * Create a request for the method "studentSubmissions.get".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @return the request
         */
        public Get get(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id) throws java.io.IOException {
          Get result = new Get(courseId, courseWorkId, id);
          initialize(result);
          return result;
        }

        public class Get extends ClassroomRequest<com.google.api.services.classroom.model.StudentSubmission> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}";

          /**
           * Returns a student submission.
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course,
           * course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is
           * malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not
           * exist.
           *
           * Create a request for the method "studentSubmissions.get".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @since 1.13
           */
          protected Get(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id) {
            super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.StudentSubmission.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public Get setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public Get setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public Get setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Returns a list of student submissions that the requester is permitted to view, factoring in the
         * OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student
         * submissions for multiple course work items.
         *
         * Course students may only view their own work. Course teachers and domain administrators may view
         * all student submissions.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
         * `NOT_FOUND` if the requested course does not exist.
         *
         * Create a request for the method "studentSubmissions.list".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the student work to request.
        This may be set to the string literal `"-"` to request
         *        student work for
        all course work in the specified course.
         * @return the request
         */
        public List list(java.lang.String courseId, java.lang.String courseWorkId) throws java.io.IOException {
          List result = new List(courseId, courseWorkId);
          initialize(result);
          return result;
        }

        public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListStudentSubmissionsResponse> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions";

          /**
           * Returns a list of student submissions that the requester is permitted to view, factoring in the
           * OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student
           * submissions for multiple course work items.
           *
           * Course students may only view their own work. Course teachers and domain administrators may
           * view all student submissions.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
           * course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
           * `NOT_FOUND` if the requested course does not exist.
           *
           * Create a request for the method "studentSubmissions.list".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the student work to request.
        This may be set to the string literal `"-"` to request
         *        student work for
        all course work in the specified course.
           * @since 1.13
           */
          protected List(java.lang.String courseId, java.lang.String courseWorkId) {
            super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListStudentSubmissionsResponse.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public List setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /**
           * Identifier of the student work to request. This may be set to the string literal `"-"`
           * to request student work for all course work in the specified course.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the student work to request. This may be set to the string literal `"-"` to request
         student work for all course work in the specified course.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /**
           * Identifier of the student work to request. This may be set to the string literal `"-"`
           * to request student work for all course work in the specified course.
           */
          public List setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /**
           * Requested lateness value. If specified, returned student submissions are restricted by
           * the requested value. If unspecified, submissions are returned regardless of `late`
           * value.
           */
          @com.google.api.client.util.Key
          private java.lang.String late;

          /** Requested lateness value. If specified, returned student submissions are restricted by the
         requested value. If unspecified, submissions are returned regardless of `late` value.
           */
          public java.lang.String getLate() {
            return late;
          }

          /**
           * Requested lateness value. If specified, returned student submissions are restricted by
           * the requested value. If unspecified, submissions are returned regardless of `late`
           * value.
           */
          public List setLate(java.lang.String late) {
            this.late = late;
            return this;
          }

          /**
           * Maximum number of items to return. Zero or unspecified indicates that the server may
           * assign a maximum.
           *
           * The server may return fewer than the specified number of results.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
         maximum.

         The server may return fewer than the specified number of results.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Maximum number of items to return. Zero or unspecified indicates that the server may
           * assign a maximum.
           *
           * The server may return fewer than the specified number of results.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * nextPageToken value returned from a previous list call, indicating that the subsequent
           * page of results should be returned.
           *
           * The list request must be otherwise identical to the one that resulted in this token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
         results should be returned.

         The list request must be otherwise identical to the one that resulted in this token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * nextPageToken value returned from a previous list call, indicating that the subsequent
           * page of results should be returned.
           *
           * The list request must be otherwise identical to the one that resulted in this token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Requested submission states. If specified, returned student submissions match one of
           * the specified submission states.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> states;

          /** Requested submission states. If specified, returned student submissions match one of the specified
         submission states.
           */
          public java.util.List<java.lang.String> getStates() {
            return states;
          }

          /**
           * Requested submission states. If specified, returned student submissions match one of
           * the specified submission states.
           */
          public List setStates(java.util.List<java.lang.String> states) {
            this.states = states;
            return this;
          }

          /**
           * Optional argument to restrict returned student work to those owned by the student with
           * the specified identifier. The identifier can be one of the following:
           *
           * * the numeric identifier for the user * the email address of the user * the string
           * literal `"me"`, indicating the requesting user
           */
          @com.google.api.client.util.Key
          private java.lang.String userId;

          /** Optional argument to restrict returned student work to those owned by the student with the
         specified identifier. The identifier can be one of the following:

         * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
         indicating the requesting user
           */
          public java.lang.String getUserId() {
            return userId;
          }

          /**
           * Optional argument to restrict returned student work to those owned by the student with
           * the specified identifier. The identifier can be one of the following:
           *
           * * the numeric identifier for the user * the email address of the user * the string
           * literal `"me"`, indicating the requesting user
           */
          public List setUserId(java.lang.String userId) {
            this.userId = userId;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Modifies attachments of student submission.
         *
         * Attachments may only be added to student submissions belonging to course work objects with a
         * `workType` of `ASSIGNMENT`.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
         * item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, if the user is not permitted to modify attachments on the requested student
         * submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND`
         * if the requested course, course work, or student submission does not exist.
         *
         * Create a request for the method "studentSubmissions.modifyAttachments".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link ModifyAttachments#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @param content the {@link com.google.api.services.classroom.model.ModifyAttachmentsRequest}
         * @return the request
         */
        public ModifyAttachments modifyAttachments(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ModifyAttachmentsRequest content) throws java.io.IOException {
          ModifyAttachments result = new ModifyAttachments(courseId, courseWorkId, id, content);
          initialize(result);
          return result;
        }

        public class ModifyAttachments extends ClassroomRequest<com.google.api.services.classroom.model.StudentSubmission> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments";

          /**
           * Modifies attachments of student submission.
           *
           * Attachments may only be added to student submissions belonging to course work objects with a
           * `workType` of `ASSIGNMENT`.
           *
           * This request must be made by the Developer Console project of the [OAuth client
           * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
           * work item.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
           * course work, if the user is not permitted to modify attachments on the requested student
           * submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
           * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
           *
           * Create a request for the method "studentSubmissions.modifyAttachments".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link ModifyAttachments#execute()} method to invoke the remote
           * operation. <p> {@link ModifyAttachments#initialize(com.google.api.client.googleapis.services.Ab
           * stractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @param content the {@link com.google.api.services.classroom.model.ModifyAttachmentsRequest}
           * @since 1.13
           */
          protected ModifyAttachments(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ModifyAttachmentsRequest content) {
            super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.StudentSubmission.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public ModifyAttachments set$Xgafv(java.lang.String $Xgafv) {
            return (ModifyAttachments) super.set$Xgafv($Xgafv);
          }

          @Override
          public ModifyAttachments setAccessToken(java.lang.String accessToken) {
            return (ModifyAttachments) super.setAccessToken(accessToken);
          }

          @Override
          public ModifyAttachments setAlt(java.lang.String alt) {
            return (ModifyAttachments) super.setAlt(alt);
          }

          @Override
          public ModifyAttachments setCallback(java.lang.String callback) {
            return (ModifyAttachments) super.setCallback(callback);
          }

          @Override
          public ModifyAttachments setFields(java.lang.String fields) {
            return (ModifyAttachments) super.setFields(fields);
          }

          @Override
          public ModifyAttachments setKey(java.lang.String key) {
            return (ModifyAttachments) super.setKey(key);
          }

          @Override
          public ModifyAttachments setOauthToken(java.lang.String oauthToken) {
            return (ModifyAttachments) super.setOauthToken(oauthToken);
          }

          @Override
          public ModifyAttachments setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ModifyAttachments) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ModifyAttachments setQuotaUser(java.lang.String quotaUser) {
            return (ModifyAttachments) super.setQuotaUser(quotaUser);
          }

          @Override
          public ModifyAttachments setUploadType(java.lang.String uploadType) {
            return (ModifyAttachments) super.setUploadType(uploadType);
          }

          @Override
          public ModifyAttachments setUploadProtocol(java.lang.String uploadProtocol) {
            return (ModifyAttachments) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public ModifyAttachments setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public ModifyAttachments setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public ModifyAttachments setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          @Override
          public ModifyAttachments set(String parameterName, Object value) {
            return (ModifyAttachments) super.set(parameterName, value);
          }
        }
        /**
         * Updates one or more fields of a student submission.
         *
         * See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may
         * change them.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
         * item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course
         * work, if the user is not permitted to make the requested modification to the student submission,
         * or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the
         * requested course, course work, or student submission does not exist.
         *
         * Create a request for the method "studentSubmissions.patch".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @param content the {@link com.google.api.services.classroom.model.StudentSubmission}
         * @return the request
         */
        public Patch patch(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.StudentSubmission content) throws java.io.IOException {
          Patch result = new Patch(courseId, courseWorkId, id, content);
          initialize(result);
          return result;
        }

        public class Patch extends ClassroomRequest<com.google.api.services.classroom.model.StudentSubmission> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}";

          /**
           * Updates one or more fields of a student submission.
           *
           * See google.classroom.v1.StudentSubmission for details of which fields may be updated and who
           * may change them.
           *
           * This request must be made by the Developer Console project of the [OAuth client
           * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
           * work item.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding
           * course work, if the user is not permitted to make the requested modification to the student
           * submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. *
           * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
           *
           * Create a request for the method "studentSubmissions.patch".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @param content the {@link com.google.api.services.classroom.model.StudentSubmission}
           * @since 1.13
           */
          protected Patch(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.StudentSubmission content) {
            super(Classroom.this, "PATCH", REST_PATH, content, com.google.api.services.classroom.model.StudentSubmission.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public Patch setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public Patch setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public Patch setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          /**
           * Mask that identifies which fields on the student submission to update. This field is
           * required to do an update. The update fails if invalid fields are specified.
           *
           * The following fields may be specified by teachers:
           *
           * * `draft_grade` * `assigned_grade`
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Mask that identifies which fields on the student submission to update. This field is required to do
         an update. The update fails if invalid fields are specified.

         The following fields may be specified by teachers:

         * `draft_grade` * `assigned_grade`
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Mask that identifies which fields on the student submission to update. This field is
           * required to do an update. The update fails if invalid fields are specified.
           *
           * The following fields may be specified by teachers:
           *
           * * `draft_grade` * `assigned_grade`
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Reclaims a student submission on behalf of the student that owns it.
         *
         * Reclaiming a student submission transfers ownership of attached Drive files to the student and
         * updates the submission state.
         *
         * Only the student that owns the requested student submission may call this method, and only for a
         * student submission that has been turned in.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
         * item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, unsubmit the requested student submission, or for access errors. *
         * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if
         * the request is malformed. * `NOT_FOUND` if the requested course, course work, or student
         * submission does not exist.
         *
         * Create a request for the method "studentSubmissions.reclaim".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link Reclaim#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @param content the {@link com.google.api.services.classroom.model.ReclaimStudentSubmissionRequest}
         * @return the request
         */
        public Reclaim reclaim(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ReclaimStudentSubmissionRequest content) throws java.io.IOException {
          Reclaim result = new Reclaim(courseId, courseWorkId, id, content);
          initialize(result);
          return result;
        }

        public class Reclaim extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim";

          /**
           * Reclaims a student submission on behalf of the student that owns it.
           *
           * Reclaiming a student submission transfers ownership of attached Drive files to the student and
           * updates the submission state.
           *
           * Only the student that owns the requested student submission may call this method, and only for
           * a student submission that has been turned in.
           *
           * This request must be made by the Developer Console project of the [OAuth client
           * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
           * work item.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
           * course work, unsubmit the requested student submission, or for access errors. *
           * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if
           * the request is malformed. * `NOT_FOUND` if the requested course, course work, or student
           * submission does not exist.
           *
           * Create a request for the method "studentSubmissions.reclaim".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link Reclaim#execute()} method to invoke the remote operation.
           * <p> {@link
           * Reclaim#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @param content the {@link com.google.api.services.classroom.model.ReclaimStudentSubmissionRequest}
           * @since 1.13
           */
          protected Reclaim(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ReclaimStudentSubmissionRequest content) {
            super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Empty.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Reclaim set$Xgafv(java.lang.String $Xgafv) {
            return (Reclaim) super.set$Xgafv($Xgafv);
          }

          @Override
          public Reclaim setAccessToken(java.lang.String accessToken) {
            return (Reclaim) super.setAccessToken(accessToken);
          }

          @Override
          public Reclaim setAlt(java.lang.String alt) {
            return (Reclaim) super.setAlt(alt);
          }

          @Override
          public Reclaim setCallback(java.lang.String callback) {
            return (Reclaim) super.setCallback(callback);
          }

          @Override
          public Reclaim setFields(java.lang.String fields) {
            return (Reclaim) super.setFields(fields);
          }

          @Override
          public Reclaim setKey(java.lang.String key) {
            return (Reclaim) super.setKey(key);
          }

          @Override
          public Reclaim setOauthToken(java.lang.String oauthToken) {
            return (Reclaim) super.setOauthToken(oauthToken);
          }

          @Override
          public Reclaim setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Reclaim) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Reclaim setQuotaUser(java.lang.String quotaUser) {
            return (Reclaim) super.setQuotaUser(quotaUser);
          }

          @Override
          public Reclaim setUploadType(java.lang.String uploadType) {
            return (Reclaim) super.setUploadType(uploadType);
          }

          @Override
          public Reclaim setUploadProtocol(java.lang.String uploadProtocol) {
            return (Reclaim) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public Reclaim setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public Reclaim setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public Reclaim setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          @Override
          public Reclaim set(String parameterName, Object value) {
            return (Reclaim) super.set(parameterName, value);
          }
        }
        /**
         * Returns a student submission.
         *
         * Returning a student submission transfers ownership of attached Drive files to the student and may
         * also update the submission state. Unlike the Classroom application, returning a student
         * submission does not set assignedGrade to the draftGrade value.
         *
         * Only a teacher of the course that contains the requested student submission may call this method.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
         * item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT`
         * if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student
         * submission does not exist.
         *
         * Create a request for the method "studentSubmissions.return".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link ClassroomReturn#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @param content the {@link com.google.api.services.classroom.model.ReturnStudentSubmissionRequest}
         * @return the request
         */
        public ClassroomReturn classroomReturn(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ReturnStudentSubmissionRequest content) throws java.io.IOException {
          ClassroomReturn result = new ClassroomReturn(courseId, courseWorkId, id, content);
          initialize(result);
          return result;
        }

        public class ClassroomReturn extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return";

          /**
           * Returns a student submission.
           *
           * Returning a student submission transfers ownership of attached Drive files to the student and
           * may also update the submission state. Unlike the Classroom application, returning a student
           * submission does not set assignedGrade to the draftGrade value.
           *
           * Only a teacher of the course that contains the requested student submission may call this
           * method.
           *
           * This request must be made by the Developer Console project of the [OAuth client
           * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
           * work item.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
           * course work, return the requested student submission, or for access errors. *
           * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course
           * work, or student submission does not exist.
           *
           * Create a request for the method "studentSubmissions.return".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link ClassroomReturn#execute()} method to invoke the remote
           * operation. <p> {@link ClassroomReturn#initialize(com.google.api.client.googleapis.services.Abst
           * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @param content the {@link com.google.api.services.classroom.model.ReturnStudentSubmissionRequest}
           * @since 1.13
           */
          protected ClassroomReturn(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.ReturnStudentSubmissionRequest content) {
            super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Empty.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public ClassroomReturn set$Xgafv(java.lang.String $Xgafv) {
            return (ClassroomReturn) super.set$Xgafv($Xgafv);
          }

          @Override
          public ClassroomReturn setAccessToken(java.lang.String accessToken) {
            return (ClassroomReturn) super.setAccessToken(accessToken);
          }

          @Override
          public ClassroomReturn setAlt(java.lang.String alt) {
            return (ClassroomReturn) super.setAlt(alt);
          }

          @Override
          public ClassroomReturn setCallback(java.lang.String callback) {
            return (ClassroomReturn) super.setCallback(callback);
          }

          @Override
          public ClassroomReturn setFields(java.lang.String fields) {
            return (ClassroomReturn) super.setFields(fields);
          }

          @Override
          public ClassroomReturn setKey(java.lang.String key) {
            return (ClassroomReturn) super.setKey(key);
          }

          @Override
          public ClassroomReturn setOauthToken(java.lang.String oauthToken) {
            return (ClassroomReturn) super.setOauthToken(oauthToken);
          }

          @Override
          public ClassroomReturn setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ClassroomReturn) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ClassroomReturn setQuotaUser(java.lang.String quotaUser) {
            return (ClassroomReturn) super.setQuotaUser(quotaUser);
          }

          @Override
          public ClassroomReturn setUploadType(java.lang.String uploadType) {
            return (ClassroomReturn) super.setUploadType(uploadType);
          }

          @Override
          public ClassroomReturn setUploadProtocol(java.lang.String uploadProtocol) {
            return (ClassroomReturn) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public ClassroomReturn setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public ClassroomReturn setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public ClassroomReturn setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          @Override
          public ClassroomReturn set(String parameterName, Object value) {
            return (ClassroomReturn) super.set(parameterName, value);
          }
        }
        /**
         * Turns in a student submission.
         *
         * Turning in a student submission transfers ownership of attached Drive files to the teacher and
         * may also update the submission state.
         *
         * This may only be called by the student that owns the specified student submission.
         *
         * This request must be made by the Developer Console project of the [OAuth client
         * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work
         * item.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
         * course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT`
         * if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student
         * submission does not exist.
         *
         * Create a request for the method "studentSubmissions.turnIn".
         *
         * This request holds the parameters needed by the classroom server.  After setting any optional
         * parameters, call the {@link TurnIn#execute()} method to invoke the remote operation.
         *
         * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
         * @param courseWorkId Identifier of the course work.
         * @param id Identifier of the student submission.
         * @param content the {@link com.google.api.services.classroom.model.TurnInStudentSubmissionRequest}
         * @return the request
         */
        public TurnIn turnIn(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.TurnInStudentSubmissionRequest content) throws java.io.IOException {
          TurnIn result = new TurnIn(courseId, courseWorkId, id, content);
          initialize(result);
          return result;
        }

        public class TurnIn extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

          private static final String REST_PATH = "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn";

          /**
           * Turns in a student submission.
           *
           * Turning in a student submission transfers ownership of attached Drive files to the teacher and
           * may also update the submission state.
           *
           * This may only be called by the student that owns the specified student submission.
           *
           * This request must be made by the Developer Console project of the [OAuth client
           * ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course
           * work item.
           *
           * This method returns the following error codes:
           *
           * * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or
           * course work, turn in the requested student submission, or for access errors. *
           * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course
           * work, or student submission does not exist.
           *
           * Create a request for the method "studentSubmissions.turnIn".
           *
           * This request holds the parameters needed by the the classroom server.  After setting any
           * optional parameters, call the {@link TurnIn#execute()} method to invoke the remote operation.
           * <p> {@link
           * TurnIn#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId Identifier of the course.
        This identifier can be either the Classroom-assigned identifier or an
         *        alias.
           * @param courseWorkId Identifier of the course work.
           * @param id Identifier of the student submission.
           * @param content the {@link com.google.api.services.classroom.model.TurnInStudentSubmissionRequest}
           * @since 1.13
           */
          protected TurnIn(java.lang.String courseId, java.lang.String courseWorkId, java.lang.String id, com.google.api.services.classroom.model.TurnInStudentSubmissionRequest content) {
            super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Empty.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.courseWorkId = com.google.api.client.util.Preconditions.checkNotNull(courseWorkId, "Required parameter courseWorkId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public TurnIn set$Xgafv(java.lang.String $Xgafv) {
            return (TurnIn) super.set$Xgafv($Xgafv);
          }

          @Override
          public TurnIn setAccessToken(java.lang.String accessToken) {
            return (TurnIn) super.setAccessToken(accessToken);
          }

          @Override
          public TurnIn setAlt(java.lang.String alt) {
            return (TurnIn) super.setAlt(alt);
          }

          @Override
          public TurnIn setCallback(java.lang.String callback) {
            return (TurnIn) super.setCallback(callback);
          }

          @Override
          public TurnIn setFields(java.lang.String fields) {
            return (TurnIn) super.setFields(fields);
          }

          @Override
          public TurnIn setKey(java.lang.String key) {
            return (TurnIn) super.setKey(key);
          }

          @Override
          public TurnIn setOauthToken(java.lang.String oauthToken) {
            return (TurnIn) super.setOauthToken(oauthToken);
          }

          @Override
          public TurnIn setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TurnIn) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TurnIn setQuotaUser(java.lang.String quotaUser) {
            return (TurnIn) super.setQuotaUser(quotaUser);
          }

          @Override
          public TurnIn setUploadType(java.lang.String uploadType) {
            return (TurnIn) super.setUploadType(uploadType);
          }

          @Override
          public TurnIn setUploadProtocol(java.lang.String uploadProtocol) {
            return (TurnIn) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          @com.google.api.client.util.Key
          private java.lang.String courseId;

          /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
         alias.
           */
          public java.lang.String getCourseId() {
            return courseId;
          }

          /**
           * Identifier of the course. This identifier can be either the Classroom-assigned
           * identifier or an alias.
           */
          public TurnIn setCourseId(java.lang.String courseId) {
            this.courseId = courseId;
            return this;
          }

          /** Identifier of the course work. */
          @com.google.api.client.util.Key
          private java.lang.String courseWorkId;

          /** Identifier of the course work.
           */
          public java.lang.String getCourseWorkId() {
            return courseWorkId;
          }

          /** Identifier of the course work. */
          public TurnIn setCourseWorkId(java.lang.String courseWorkId) {
            this.courseWorkId = courseWorkId;
            return this;
          }

          /** Identifier of the student submission. */
          @com.google.api.client.util.Key
          private java.lang.String id;

          /** Identifier of the student submission.
           */
          public java.lang.String getId() {
            return id;
          }

          /** Identifier of the student submission. */
          public TurnIn setId(java.lang.String id) {
            this.id = id;
            return this;
          }

          @Override
          public TurnIn set(String parameterName, Object value) {
            return (TurnIn) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Students collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.Students.List request = classroom.students().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Students students() {
      return new Students();
    }

    /**
     * The "students" collection of methods.
     */
    public class Students {

      /**
       * Adds a user as a student of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course
       * or for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
       * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
       * errors:     * CourseMemberLimitReached     * CourseNotModifiable     *
       * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a student or teacher
       * in the course.
       *
       * Create a request for the method "students.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course to create the student in.
      This identifier can be either the Classroom-
       *        assigned identifier or an
      alias.
       * @param content the {@link com.google.api.services.classroom.model.Student}
       * @return the request
       */
      public Create create(java.lang.String courseId, com.google.api.services.classroom.model.Student content) throws java.io.IOException {
        Create result = new Create(courseId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Student> {

        private static final String REST_PATH = "v1/courses/{courseId}/students";

        /**
         * Adds a user as a student of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course
         * or for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
         * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
         * errors:     * CourseMemberLimitReached     * CourseNotModifiable     *
         * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a student or teacher
         * in the course.
         *
         * Create a request for the method "students.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course to create the student in.
      This identifier can be either the Classroom-
       *        assigned identifier or an
      alias.
         * @param content the {@link com.google.api.services.classroom.model.Student}
         * @since 1.13
         */
        protected Create(java.lang.String courseId, com.google.api.services.classroom.model.Student content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Student.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course to create the student in. This identifier can be either the
         * Classroom-assigned identifier or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course to create the student in. This identifier can be either the Classroom-
       assigned identifier or an alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course to create the student in. This identifier can be either the
         * Classroom-assigned identifier or an alias.
         */
        public Create setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Enrollment code of the course to create the student in. This code is required if userId
         * corresponds to the requesting user; it may be omitted if the requesting user has
         * administrative permissions to create students for any user.
         */
        @com.google.api.client.util.Key
        private java.lang.String enrollmentCode;

        /** Enrollment code of the course to create the student in. This code is required if userId corresponds
       to the requesting user; it may be omitted if the requesting user has administrative permissions to
       create students for any user.
         */
        public java.lang.String getEnrollmentCode() {
          return enrollmentCode;
        }

        /**
         * Enrollment code of the course to create the student in. This code is required if userId
         * corresponds to the requesting user; it may be omitted if the requesting user has
         * administrative permissions to create students for any user.
         */
        public Create setEnrollmentCode(java.lang.String enrollmentCode) {
          this.enrollmentCode = enrollmentCode;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a student of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course
       * or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
       * course does not exist.
       *
       * Create a request for the method "students.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param userId Identifier of the student to delete. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
       * @return the request
       */
      public Delete delete(java.lang.String courseId, java.lang.String userId) throws java.io.IOException {
        Delete result = new Delete(courseId, userId);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/courses/{courseId}/students/{userId}";

        /**
         * Deletes a student of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course
         * or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
         * course does not exist.
         *
         * Create a request for the method "students.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param userId Identifier of the student to delete. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
         * @since 1.13
         */
        protected Delete(java.lang.String courseId, java.lang.String userId) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Delete setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the student to delete. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String userId;

        /** Identifier of the student to delete. The identifier can be one of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getUserId() {
          return userId;
        }

        /**
         * Identifier of the student to delete. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Delete setUserId(java.lang.String userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns a student of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or
       * for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
       * course does not exist.
       *
       * Create a request for the method "students.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param userId Identifier of the student to return. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
       * @return the request
       */
      public Get get(java.lang.String courseId, java.lang.String userId) throws java.io.IOException {
        Get result = new Get(courseId, userId);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Student> {

        private static final String REST_PATH = "v1/courses/{courseId}/students/{userId}";

        /**
         * Returns a student of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course
         * or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
         * course does not exist.
         *
         * Create a request for the method "students.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param userId Identifier of the student to return. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
         * @since 1.13
         */
        protected Get(java.lang.String courseId, java.lang.String userId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Student.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Get setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the student to return. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String userId;

        /** Identifier of the student to return. The identifier can be one of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getUserId() {
          return userId;
        }

        /**
         * Identifier of the student to return. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Get setUserId(java.lang.String userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of students of this course that the requester is permitted to view.
       *
       * This method returns the following error codes:
       *
       * * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
       *
       * Create a request for the method "students.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @return the request
       */
      public List list(java.lang.String courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListStudentsResponse> {

        private static final String REST_PATH = "v1/courses/{courseId}/students";

        /**
         * Returns a list of students of this course that the requester is permitted to view.
         *
         * This method returns the following error codes:
         *
         * * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
         *
         * Create a request for the method "students.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @since 1.13
         */
        protected List(java.lang.String courseId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListStudentsResponse.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public List setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Maximum number of items to return. Zero means no maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero means no maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero means no maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Teachers collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.Teachers.List request = classroom.teachers().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Teachers teachers() {
      return new Teachers();
    }

    /**
     * The "teachers" collection of methods.
     */
    public class Teachers {

      /**
       * Creates a teacher of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not  permitted to create teachers in this course
       * or for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
       * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
       * errors:     * CourseMemberLimitReached     * CourseNotModifiable     * CourseTeacherLimitReached
       * * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a teacher or student
       * in the course.
       *
       * Create a request for the method "teachers.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param content the {@link com.google.api.services.classroom.model.Teacher}
       * @return the request
       */
      public Create create(java.lang.String courseId, com.google.api.services.classroom.model.Teacher content) throws java.io.IOException {
        Create result = new Create(courseId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Teacher> {

        private static final String REST_PATH = "v1/courses/{courseId}/teachers";

        /**
         * Creates a teacher of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not  permitted to create teachers in this
         * course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
         * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
         * errors:     * CourseMemberLimitReached     * CourseNotModifiable     *
         * CourseTeacherLimitReached     * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user
         * is already a teacher or student in the course.
         *
         * Create a request for the method "teachers.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param content the {@link com.google.api.services.classroom.model.Teacher}
         * @since 1.13
         */
        protected Create(java.lang.String courseId, com.google.api.services.classroom.model.Teacher content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Teacher.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Create setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a teacher of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course
       * or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
       * course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher
       * of this course.
       *
       * Create a request for the method "teachers.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param userId Identifier of the teacher to delete. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
       * @return the request
       */
      public Delete delete(java.lang.String courseId, java.lang.String userId) throws java.io.IOException {
        Delete result = new Delete(courseId, userId);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/courses/{courseId}/teachers/{userId}";

        /**
         * Deletes a teacher of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course
         * or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
         * course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary
         * teacher of this course.
         *
         * Create a request for the method "teachers.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param userId Identifier of the teacher to delete. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
         * @since 1.13
         */
        protected Delete(java.lang.String courseId, java.lang.String userId) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Delete setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the teacher to delete. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String userId;

        /** Identifier of the teacher to delete. The identifier can be one of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getUserId() {
          return userId;
        }

        /**
         * Identifier of the teacher to delete. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Delete setUserId(java.lang.String userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns a teacher of a course.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or
       * for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
       * course does not exist.
       *
       * Create a request for the method "teachers.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @param userId Identifier of the teacher to return. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
       * @return the request
       */
      public Get get(java.lang.String courseId, java.lang.String userId) throws java.io.IOException {
        Get result = new Get(courseId, userId);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Teacher> {

        private static final String REST_PATH = "v1/courses/{courseId}/teachers/{userId}";

        /**
         * Returns a teacher of a course.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course
         * or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
         * course does not exist.
         *
         * Create a request for the method "teachers.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @param userId Identifier of the teacher to return. The identifier can be one of the
      following:
      * the numeric
       *        identifier for the user
      * the email address of the user
      * the string literal `"me"`,
       *        indicating the requesting user
         * @since 1.13
         */
        protected Get(java.lang.String courseId, java.lang.String userId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Teacher.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public Get setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Identifier of the teacher to return. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String userId;

        /** Identifier of the teacher to return. The identifier can be one of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getUserId() {
          return userId;
        }

        /**
         * Identifier of the teacher to return. The identifier can be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Get setUserId(java.lang.String userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of teachers of this course that the requester is permitted to view.
       *
       * This method returns the following error codes:
       *
       * * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
       *
       * Create a request for the method "teachers.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
       * @return the request
       */
      public List list(java.lang.String courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListTeachersResponse> {

        private static final String REST_PATH = "v1/courses/{courseId}/teachers";

        /**
         * Returns a list of teachers of this course that the requester is permitted to view.
         *
         * This method returns the following error codes:
         *
         * * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
         *
         * Create a request for the method "teachers.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId Identifier of the course.
      This identifier can be either the Classroom-assigned identifier or an
       *        alias.
         * @since 1.13
         */
        protected List(java.lang.String courseId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListTeachersResponse.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        @com.google.api.client.util.Key
        private java.lang.String courseId;

        /** Identifier of the course. This identifier can be either the Classroom-assigned identifier or an
       alias.
         */
        public java.lang.String getCourseId() {
          return courseId;
        }

        /**
         * Identifier of the course. This identifier can be either the Classroom-assigned identifier
         * or an alias.
         */
        public List setCourseId(java.lang.String courseId) {
          this.courseId = courseId;
          return this;
        }

        /**
         * Maximum number of items to return. Zero means no maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero means no maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero means no maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Invitations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Classroom classroom = new Classroom(...);}
   *   {@code Classroom.Invitations.List request = classroom.invitations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Invitations invitations() {
    return new Invitations();
  }

  /**
   * The "invitations" collection of methods.
   */
  public class Invitations {

    /**
     * Accepts an invitation, removing it and adding the invited user to the teachers or students (as
     * appropriate) of the specified course. Only the invited user may accept an invitation.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested invitation
     * or for access errors. * `FAILED_PRECONDITION` for the following request errors:     *
     * CourseMemberLimitReached     * CourseNotModifiable     * CourseTeacherLimitReached     *
     * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.
     *
     * Create a request for the method "invitations.accept".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Accept#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the invitation to accept.
     * @return the request
     */
    public Accept accept(java.lang.String id) throws java.io.IOException {
      Accept result = new Accept(id);
      initialize(result);
      return result;
    }

    public class Accept extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

      private static final String REST_PATH = "v1/invitations/{id}:accept";

      /**
       * Accepts an invitation, removing it and adding the invited user to the teachers or students (as
       * appropriate) of the specified course. Only the invited user may accept an invitation.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested
       * invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors:
       * * CourseMemberLimitReached     * CourseNotModifiable     * CourseTeacherLimitReached     *
       * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.
       *
       * Create a request for the method "invitations.accept".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Accept#execute()} method to invoke the remote operation.
       * <p> {@link
       * Accept#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the invitation to accept.
       * @since 1.13
       */
      protected Accept(java.lang.String id) {
        super(Classroom.this, "POST", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Accept set$Xgafv(java.lang.String $Xgafv) {
        return (Accept) super.set$Xgafv($Xgafv);
      }

      @Override
      public Accept setAccessToken(java.lang.String accessToken) {
        return (Accept) super.setAccessToken(accessToken);
      }

      @Override
      public Accept setAlt(java.lang.String alt) {
        return (Accept) super.setAlt(alt);
      }

      @Override
      public Accept setCallback(java.lang.String callback) {
        return (Accept) super.setCallback(callback);
      }

      @Override
      public Accept setFields(java.lang.String fields) {
        return (Accept) super.setFields(fields);
      }

      @Override
      public Accept setKey(java.lang.String key) {
        return (Accept) super.setKey(key);
      }

      @Override
      public Accept setOauthToken(java.lang.String oauthToken) {
        return (Accept) super.setOauthToken(oauthToken);
      }

      @Override
      public Accept setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Accept) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Accept setQuotaUser(java.lang.String quotaUser) {
        return (Accept) super.setQuotaUser(quotaUser);
      }

      @Override
      public Accept setUploadType(java.lang.String uploadType) {
        return (Accept) super.setUploadType(uploadType);
      }

      @Override
      public Accept setUploadProtocol(java.lang.String uploadProtocol) {
        return (Accept) super.setUploadProtocol(uploadProtocol);
      }

      /** Identifier of the invitation to accept. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the invitation to accept.
       */
      public java.lang.String getId() {
        return id;
      }

      /** Identifier of the invitation to accept. */
      public Accept setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Accept set(String parameterName, Object value) {
        return (Accept) super.set(parameterName, value);
      }
    }
    /**
     * Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and
     * re-create an invitation to make changes.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this
     * course or for access errors. * `NOT_FOUND` if the course or the user does not exist. *
     * `FAILED_PRECONDITION` if the requested user's account is disabled or if the user already has this
     * role or a role with greater permissions. * `ALREADY_EXISTS` if an invitation for the specified
     * user and course already exists.
     *
     * Create a request for the method "invitations.create".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.classroom.model.Invitation}
     * @return the request
     */
    public Create create(com.google.api.services.classroom.model.Invitation content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Invitation> {

      private static final String REST_PATH = "v1/invitations";

      /**
       * Creates an invitation. Only one invitation for a user and course may exist at a time. Delete
       * and re-create an invitation to make changes.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this
       * course or for access errors. * `NOT_FOUND` if the course or the user does not exist. *
       * `FAILED_PRECONDITION` if the requested user's account is disabled or if the user already has
       * this role or a role with greater permissions. * `ALREADY_EXISTS` if an invitation for the
       * specified user and course already exists.
       *
       * Create a request for the method "invitations.create".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.classroom.model.Invitation}
       * @since 1.13
       */
      protected Create(com.google.api.services.classroom.model.Invitation content) {
        super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Invitation.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes an invitation.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested invitation
     * or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
     *
     * Create a request for the method "invitations.delete".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the invitation to delete.
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

      private static final String REST_PATH = "v1/invitations/{id}";

      /**
       * Deletes an invitation.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested
       * invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
       *
       * Create a request for the method "invitations.delete".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the invitation to delete.
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** Identifier of the invitation to delete. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the invitation to delete.
       */
      public java.lang.String getId() {
        return id;
      }

      /** Identifier of the invitation to delete. */
      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Returns an invitation.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation or
     * for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
     *
     * Create a request for the method "invitations.get".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id Identifier of the invitation to return.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Invitation> {

      private static final String REST_PATH = "v1/invitations/{id}";

      /**
       * Returns an invitation.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation
       * or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
       *
       * Create a request for the method "invitations.get".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id Identifier of the invitation to return.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Invitation.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Identifier of the invitation to return. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** Identifier of the invitation to return.
       */
      public java.lang.String getId() {
        return id;
      }

      /** Identifier of the invitation to return. */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Returns a list of invitations that the requesting user is permitted to view, restricted to those
     * that match the list request.
     *
     * *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` for access errors.
     *
     * Create a request for the method "invitations.list".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListInvitationsResponse> {

      private static final String REST_PATH = "v1/invitations";

      /**
       * Returns a list of invitations that the requesting user is permitted to view, restricted to
       * those that match the list request.
       *
       * *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` for access errors.
       *
       * Create a request for the method "invitations.list".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListInvitationsResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Restricts returned invitations to those for a course with the specified identifier.
       */
      @com.google.api.client.util.Key
      private java.lang.String courseId;

      /** Restricts returned invitations to those for a course with the specified identifier.
       */
      public java.lang.String getCourseId() {
        return courseId;
      }

      /**
       * Restricts returned invitations to those for a course with the specified identifier.
       */
      public List setCourseId(java.lang.String courseId) {
        this.courseId = courseId;
        return this;
      }

      /**
       * Maximum number of items to return. Zero means no maximum.
       *
       * The server may return fewer than the specified number of results.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** Maximum number of items to return. Zero means no maximum.

     The server may return fewer than the specified number of results.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * Maximum number of items to return. Zero means no maximum.
       *
       * The server may return fewer than the specified number of results.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * nextPageToken value returned from a previous list call, indicating that the subsequent page
       * of results should be returned.
       *
       * The list request must be otherwise identical to the one that resulted in this token.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
     results should be returned.

     The list request must be otherwise identical to the one that resulted in this token.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * nextPageToken value returned from a previous list call, indicating that the subsequent page
       * of results should be returned.
       *
       * The list request must be otherwise identical to the one that resulted in this token.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Restricts returned invitations to those for a specific user. The identifier can be one of
       * the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** Restricts returned invitations to those for a specific user. The identifier can be one of the
     following:

     * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
     indicating the requesting user
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * Restricts returned invitations to those for a specific user. The identifier can be one of
       * the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Registrations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Classroom classroom = new Classroom(...);}
   *   {@code Classroom.Registrations.List request = classroom.registrations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Registrations registrations() {
    return new Registrations();
  }

  /**
   * The "registrations" collection of methods.
   */
  public class Registrations {

    /**
     * Creates a `Registration`, causing Classroom to start sending notifications from the provided
     * `feed` to the destination provided in `cloudPubSubTopic`.
     *
     * Returns the created `Registration`. Currently, this will be the same as the argument, but with
     * server-assigned fields such as `expiry_time` and `id` filled in.
     *
     * Note that any value specified for the `expiry_time` or `id` fields will be ignored.
     *
     * While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis, it
     * is the caller's responsibility to ensure that it exists and that Classroom has permission to
     * publish to it.
     *
     * This method may return the following error codes:
     *
     * * `PERMISSION_DENIED` if:     * the authenticated user does not have permission to receive
     * notifications from the requested field; or     * the credential provided does not include the
     * appropriate scope for       the requested feed.     * another access error is encountered. *
     * `INVALID_ARGUMENT` if:     * no `cloudPubsubTopic` is specified, or the specified
     * `cloudPubsubTopic` is not valid; or     * no `feed` is specified, or the specified `feed` is not
     * valid. * `NOT_FOUND` if:     * the specified `feed` cannot be located, or the requesting user
     * does       not have permission to determine whether or not it exists; or     * the specified
     * `cloudPubsubTopic` cannot be located, or Classroom has       not been granted permission to
     * publish to it.
     *
     * Create a request for the method "registrations.create".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.classroom.model.Registration}
     * @return the request
     */
    public Create create(com.google.api.services.classroom.model.Registration content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends ClassroomRequest<com.google.api.services.classroom.model.Registration> {

      private static final String REST_PATH = "v1/registrations";

      /**
       * Creates a `Registration`, causing Classroom to start sending notifications from the provided
       * `feed` to the destination provided in `cloudPubSubTopic`.
       *
       * Returns the created `Registration`. Currently, this will be the same as the argument, but with
       * server-assigned fields such as `expiry_time` and `id` filled in.
       *
       * Note that any value specified for the `expiry_time` or `id` fields will be ignored.
       *
       * While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis,
       * it is the caller's responsibility to ensure that it exists and that Classroom has permission to
       * publish to it.
       *
       * This method may return the following error codes:
       *
       * * `PERMISSION_DENIED` if:     * the authenticated user does not have permission to receive
       * notifications from the requested field; or     * the credential provided does not include the
       * appropriate scope for       the requested feed.     * another access error is encountered. *
       * `INVALID_ARGUMENT` if:     * no `cloudPubsubTopic` is specified, or the specified
       * `cloudPubsubTopic` is not valid; or     * no `feed` is specified, or the specified `feed` is
       * not valid. * `NOT_FOUND` if:     * the specified `feed` cannot be located, or the requesting
       * user does       not have permission to determine whether or not it exists; or     * the
       * specified `cloudPubsubTopic` cannot be located, or Classroom has       not been granted
       * permission to publish to it.
       *
       * Create a request for the method "registrations.create".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.classroom.model.Registration}
       * @since 1.13
       */
      protected Create(com.google.api.services.classroom.model.Registration content) {
        super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.Registration.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a `Registration`, causing Classroom to stop sending notifications for that
     * `Registration`.
     *
     * Create a request for the method "registrations.delete".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param registrationId The `registration_id` of the `Registration` to be deleted.
     * @return the request
     */
    public Delete delete(java.lang.String registrationId) throws java.io.IOException {
      Delete result = new Delete(registrationId);
      initialize(result);
      return result;
    }

    public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

      private static final String REST_PATH = "v1/registrations/{registrationId}";

      /**
       * Deletes a `Registration`, causing Classroom to stop sending notifications for that
       * `Registration`.
       *
       * Create a request for the method "registrations.delete".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param registrationId The `registration_id` of the `Registration` to be deleted.
       * @since 1.13
       */
      protected Delete(java.lang.String registrationId) {
        super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
        this.registrationId = com.google.api.client.util.Preconditions.checkNotNull(registrationId, "Required parameter registrationId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** The `registration_id` of the `Registration` to be deleted. */
      @com.google.api.client.util.Key
      private java.lang.String registrationId;

      /** The `registration_id` of the `Registration` to be deleted.
       */
      public java.lang.String getRegistrationId() {
        return registrationId;
      }

      /** The `registration_id` of the `Registration` to be deleted. */
      public Delete setRegistrationId(java.lang.String registrationId) {
        this.registrationId = registrationId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the UserProfiles collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Classroom classroom = new Classroom(...);}
   *   {@code Classroom.UserProfiles.List request = classroom.userProfiles().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public UserProfiles userProfiles() {
    return new UserProfiles();
  }

  /**
   * The "userProfiles" collection of methods.
   */
  public class UserProfiles {

    /**
     * Returns a user profile.
     *
     * This method returns the following error codes:
     *
     * * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if no
     * profile exists with the requested ID, or for access errors.
     *
     * Create a request for the method "userProfiles.get".
     *
     * This request holds the parameters needed by the classroom server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId Identifier of the profile to return. The identifier can be one of the
    following:
    * the numeric
     *        identifier for the user
    * the email address of the user
    * the string literal `"me"`,
     *        indicating the requesting user
     * @return the request
     */
    public Get get(java.lang.String userId) throws java.io.IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }

    public class Get extends ClassroomRequest<com.google.api.services.classroom.model.UserProfile> {

      private static final String REST_PATH = "v1/userProfiles/{userId}";

      /**
       * Returns a user profile.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if
       * no profile exists with the requested ID, or for access errors.
       *
       * Create a request for the method "userProfiles.get".
       *
       * This request holds the parameters needed by the the classroom server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId Identifier of the profile to return. The identifier can be one of the
    following:
    * the numeric
     *        identifier for the user
    * the email address of the user
    * the string literal `"me"`,
     *        indicating the requesting user
       * @since 1.13
       */
      protected Get(java.lang.String userId) {
        super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.UserProfile.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Identifier of the profile to return. The identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** Identifier of the profile to return. The identifier can be one of the following:

     * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
     indicating the requesting user
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * Identifier of the profile to return. The identifier can be one of the following:
       *
       * * the numeric identifier for the user * the email address of the user * the string literal
       * `"me"`, indicating the requesting user
       */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the GuardianInvitations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.GuardianInvitations.List request = classroom.guardianInvitations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public GuardianInvitations guardianInvitations() {
      return new GuardianInvitations();
    }

    /**
     * The "guardianInvitations" collection of methods.
     */
    public class GuardianInvitations {

      /**
       * Creates a guardian invitation, and sends an email to the guardian asking them to confirm that
       * they are the student's guardian.
       *
       * Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they will
       * start receiving guardian notifications. A `Guardian` resource will also be created to represent
       * the active guardian.
       *
       * The request object must have the `student_id` and `invited_email_address` fields set. Failing to
       * set these fields, or setting any other fields in the request, will result in an error.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the current user does not have permission to   manage guardians, if the
       * guardian in question has already rejected   too many requests for that student, if guardians are
       * not enabled for the   domain in question, or for other access errors. * `RESOURCE_EXHAUSTED` if
       * the student or guardian has exceeded the guardian   link limit. * `INVALID_ARGUMENT` if the
       * guardian email address is not valid (for   example, if it is too long), or if the format of the
       * student ID provided   cannot be recognized (it is not an email address, nor a `user_id` from
       * this API). This error will also be returned if read-only fields are set,   or if the `state`
       * field is set to to a value other than `PENDING`. * `NOT_FOUND` if the student ID provided is a
       * valid student ID, but   Classroom has no record of that student. * `ALREADY_EXISTS` if there is
       * already a pending guardian invitation for   the student and `invited_email_address` provided, or
       * if the provided   `invited_email_address` matches the Google account of an existing   `Guardian`
       * for this user.
       *
       * Create a request for the method "guardianInvitations.create".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param studentId ID of the student (in standard format)
       * @param content the {@link com.google.api.services.classroom.model.GuardianInvitation}
       * @return the request
       */
      public Create create(java.lang.String studentId, com.google.api.services.classroom.model.GuardianInvitation content) throws java.io.IOException {
        Create result = new Create(studentId, content);
        initialize(result);
        return result;
      }

      public class Create extends ClassroomRequest<com.google.api.services.classroom.model.GuardianInvitation> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardianInvitations";

        /**
         * Creates a guardian invitation, and sends an email to the guardian asking them to confirm that
         * they are the student's guardian.
         *
         * Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they
         * will start receiving guardian notifications. A `Guardian` resource will also be created to
         * represent the active guardian.
         *
         * The request object must have the `student_id` and `invited_email_address` fields set. Failing
         * to set these fields, or setting any other fields in the request, will result in an error.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the current user does not have permission to   manage guardians, if
         * the guardian in question has already rejected   too many requests for that student, if
         * guardians are not enabled for the   domain in question, or for other access errors. *
         * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian   link limit. *
         * `INVALID_ARGUMENT` if the guardian email address is not valid (for   example, if it is too
         * long), or if the format of the student ID provided   cannot be recognized (it is not an email
         * address, nor a `user_id` from   this API). This error will also be returned if read-only fields
         * are set,   or if the `state` field is set to to a value other than `PENDING`. * `NOT_FOUND` if
         * the student ID provided is a valid student ID, but   Classroom has no record of that student. *
         * `ALREADY_EXISTS` if there is already a pending guardian invitation for   the student and
         * `invited_email_address` provided, or if the provided   `invited_email_address` matches the
         * Google account of an existing   `Guardian` for this user.
         *
         * Create a request for the method "guardianInvitations.create".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId ID of the student (in standard format)
         * @param content the {@link com.google.api.services.classroom.model.GuardianInvitation}
         * @since 1.13
         */
        protected Create(java.lang.String studentId, com.google.api.services.classroom.model.GuardianInvitation content) {
          super(Classroom.this, "POST", REST_PATH, content, com.google.api.services.classroom.model.GuardianInvitation.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** ID of the student (in standard format) */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** ID of the student (in standard format)
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /** ID of the student (in standard format) */
        public Create setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Returns a specific guardian invitation.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the requesting user is not permitted to view   guardian invitations for
       * the student identified by the `student_id`, if   guardians are not enabled for the domain in
       * question, or for other   access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but
       * its format cannot   be recognized (it is not an email address, nor a `student_id` from the   API,
       * nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the given
       * student or   `invitation_id`. May also be returned if the student exists, but the   requesting
       * user does not have access to see that student.
       *
       * Create a request for the method "guardianInvitations.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param studentId The ID of the student whose guardian invitation is being requested.
       * @param invitationId The `id` field of the `GuardianInvitation` being requested.
       * @return the request
       */
      public Get get(java.lang.String studentId, java.lang.String invitationId) throws java.io.IOException {
        Get result = new Get(studentId, invitationId);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.GuardianInvitation> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}";

        /**
         * Returns a specific guardian invitation.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the requesting user is not permitted to view   guardian invitations
         * for the student identified by the `student_id`, if   guardians are not enabled for the domain
         * in question, or for other   access errors. * `INVALID_ARGUMENT` if a `student_id` is specified,
         * but its format cannot   be recognized (it is not an email address, nor a `student_id` from the
         * API, nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the
         * given student or   `invitation_id`. May also be returned if the student exists, but the
         * requesting user does not have access to see that student.
         *
         * Create a request for the method "guardianInvitations.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId The ID of the student whose guardian invitation is being requested.
         * @param invitationId The `id` field of the `GuardianInvitation` being requested.
         * @since 1.13
         */
        protected Get(java.lang.String studentId, java.lang.String invitationId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.GuardianInvitation.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
          this.invitationId = com.google.api.client.util.Preconditions.checkNotNull(invitationId, "Required parameter invitationId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** The ID of the student whose guardian invitation is being requested. */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** The ID of the student whose guardian invitation is being requested.
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /** The ID of the student whose guardian invitation is being requested. */
        public Get setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /** The `id` field of the `GuardianInvitation` being requested. */
        @com.google.api.client.util.Key
        private java.lang.String invitationId;

        /** The `id` field of the `GuardianInvitation` being requested.
         */
        public java.lang.String getInvitationId() {
          return invitationId;
        }

        /** The `id` field of the `GuardianInvitation` being requested. */
        public Get setInvitationId(java.lang.String invitationId) {
          this.invitationId = invitationId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of guardian invitations that the requesting user is permitted to view, filtered by
       * the parameters provided.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting   user is not permitted
       * to view guardian invitations for that student, if   `"-"` is specified as the `student_id` and
       * the user is not a domain   administrator, if guardians are not enabled for the domain in
       * question,   or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but
       * its format cannot   be recognized (it is not an email address, nor a `student_id` from the   API,
       * nor the literal string `me`). May also be returned if an invalid   `page_token` or `state` is
       * provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be   recognized, but
       * Classroom has no record of that student.
       *
       * Create a request for the method "guardianInvitations.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param studentId The ID of the student whose guardian invitations are to be returned.
      The identifier can be one of
       *        the following:
      * the numeric identifier for the user
      * the email address of the user
      * the
       *        string literal `"me"`, indicating the requesting user
      * the string literal `"-"`,
       *        indicating that results should be returned for
        all students that the requesting user is
       *        permitted to view guardian
        invitations.
       * @return the request
       */
      public List list(java.lang.String studentId) throws java.io.IOException {
        List result = new List(studentId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListGuardianInvitationsResponse> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardianInvitations";

        /**
         * Returns a list of guardian invitations that the requesting user is permitted to view, filtered
         * by the parameters provided.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting   user is not
         * permitted to view guardian invitations for that student, if   `"-"` is specified as the
         * `student_id` and the user is not a domain   administrator, if guardians are not enabled for the
         * domain in question,   or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is
         * specified, but its format cannot   be recognized (it is not an email address, nor a
         * `student_id` from the   API, nor the literal string `me`). May also be returned if an invalid
         * `page_token` or `state` is provided. * `NOT_FOUND` if a `student_id` is specified, and its
         * format can be   recognized, but Classroom has no record of that student.
         *
         * Create a request for the method "guardianInvitations.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId The ID of the student whose guardian invitations are to be returned.
      The identifier can be one of
       *        the following:
      * the numeric identifier for the user
      * the email address of the user
      * the
       *        string literal `"me"`, indicating the requesting user
      * the string literal `"-"`,
       *        indicating that results should be returned for
        all students that the requesting user is
       *        permitted to view guardian
        invitations.
         * @since 1.13
         */
        protected List(java.lang.String studentId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListGuardianInvitationsResponse.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The ID of the student whose guardian invitations are to be returned. The identifier can
         * be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating
         * that results should be returned for all students that the requesting user is permitted to
         * view guardian invitations.
         */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** The ID of the student whose guardian invitations are to be returned. The identifier can be one of
       the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user * the string literal `"-"`, indicating that results should be
       returned for all students that the requesting user is permitted to view guardian invitations.
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /**
         * The ID of the student whose guardian invitations are to be returned. The identifier can
         * be one of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating
         * that results should be returned for all students that the requesting user is permitted to
         * view guardian invitations.
         */
        public List setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /**
         * If specified, only results with the specified `invited_email_address` will be returned.
         */
        @com.google.api.client.util.Key
        private java.lang.String invitedEmailAddress;

        /** If specified, only results with the specified `invited_email_address` will be returned.
         */
        public java.lang.String getInvitedEmailAddress() {
          return invitedEmailAddress;
        }

        /**
         * If specified, only results with the specified `invited_email_address` will be returned.
         */
        public List setInvitedEmailAddress(java.lang.String invitedEmailAddress) {
          this.invitedEmailAddress = invitedEmailAddress;
          return this;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
       maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /**
         * If specified, only results with the specified `state` values will be returned. Otherwise,
         * results with a `state` of `PENDING` will be returned.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> states;

        /** If specified, only results with the specified `state` values will be returned. Otherwise, results
       with a `state` of `PENDING` will be returned.
         */
        public java.util.List<java.lang.String> getStates() {
          return states;
        }

        /**
         * If specified, only results with the specified `state` values will be returned. Otherwise,
         * results with a `state` of `PENDING` will be returned.
         */
        public List setStates(java.util.List<java.lang.String> states) {
          this.states = states;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Modifies a guardian invitation.
       *
       * Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`.
       * This has the effect of withdrawing the invitation.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if the current user does not have permission to   manage guardians, if
       * guardians are not enabled for the domain in question   or for other access errors. *
       * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT` if
       * the format of the student ID provided   cannot be recognized (it is not an email address, nor a
       * `user_id` from   this API), or if the passed `GuardianInvitation` has a `state` other than
       * `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID provided
       * is a valid student ID, but   Classroom has no record of that student, or if the `id` field does
       * not   refer to a guardian invitation known to Classroom.
       *
       * Create a request for the method "guardianInvitations.patch".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param studentId The ID of the student whose guardian invitation is to be modified.
       * @param invitationId The `id` field of the `GuardianInvitation` to be modified.
       * @param content the {@link com.google.api.services.classroom.model.GuardianInvitation}
       * @return the request
       */
      public Patch patch(java.lang.String studentId, java.lang.String invitationId, com.google.api.services.classroom.model.GuardianInvitation content) throws java.io.IOException {
        Patch result = new Patch(studentId, invitationId, content);
        initialize(result);
        return result;
      }

      public class Patch extends ClassroomRequest<com.google.api.services.classroom.model.GuardianInvitation> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}";

        /**
         * Modifies a guardian invitation.
         *
         * Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`.
         * This has the effect of withdrawing the invitation.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if the current user does not have permission to   manage guardians, if
         * guardians are not enabled for the domain in question   or for other access errors. *
         * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT`
         * if the format of the student ID provided   cannot be recognized (it is not an email address,
         * nor a `user_id` from   this API), or if the passed `GuardianInvitation` has a `state` other
         * than   `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID
         * provided is a valid student ID, but   Classroom has no record of that student, or if the `id`
         * field does not   refer to a guardian invitation known to Classroom.
         *
         * Create a request for the method "guardianInvitations.patch".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId The ID of the student whose guardian invitation is to be modified.
         * @param invitationId The `id` field of the `GuardianInvitation` to be modified.
         * @param content the {@link com.google.api.services.classroom.model.GuardianInvitation}
         * @since 1.13
         */
        protected Patch(java.lang.String studentId, java.lang.String invitationId, com.google.api.services.classroom.model.GuardianInvitation content) {
          super(Classroom.this, "PATCH", REST_PATH, content, com.google.api.services.classroom.model.GuardianInvitation.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
          this.invitationId = com.google.api.client.util.Preconditions.checkNotNull(invitationId, "Required parameter invitationId must be specified.");
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /** The ID of the student whose guardian invitation is to be modified. */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** The ID of the student whose guardian invitation is to be modified.
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /** The ID of the student whose guardian invitation is to be modified. */
        public Patch setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /** The `id` field of the `GuardianInvitation` to be modified. */
        @com.google.api.client.util.Key
        private java.lang.String invitationId;

        /** The `id` field of the `GuardianInvitation` to be modified.
         */
        public java.lang.String getInvitationId() {
          return invitationId;
        }

        /** The `id` field of the `GuardianInvitation` to be modified. */
        public Patch setInvitationId(java.lang.String invitationId) {
          this.invitationId = invitationId;
          return this;
        }

        /**
         * Mask that identifies which fields on the course to update. This field is required to do
         * an update. The update will fail if invalid fields are specified. The following fields are
         * valid:
         *
         * * `state`
         *
         * When set in a query parameter, this field should be specified as
         *
         * `updateMask=,,...`
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Mask that identifies which fields on the course to update. This field is required to do an update.
       The update will fail if invalid fields are specified. The following fields are valid:

       * `state`

       When set in a query parameter, this field should be specified as

       `updateMask=,,...`
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Mask that identifies which fields on the course to update. This field is required to do
         * an update. The update will fail if invalid fields are specified. The following fields are
         * valid:
         *
         * * `state`
         *
         * When set in a query parameter, this field should be specified as
         *
         * `updateMask=,,...`
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Guardians collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Classroom classroom = new Classroom(...);}
     *   {@code Classroom.Guardians.List request = classroom.guardians().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Guardians guardians() {
      return new Guardians();
    }

    /**
     * The "guardians" collection of methods.
     */
    public class Guardians {

      /**
       * Deletes a guardian.
       *
       * The guardian will no longer receive guardian notifications and the guardian will no longer be
       * accessible via the API.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if no user that matches the provided `student_id`   is visible to the
       * requesting user, if the requesting user is not   permitted to manage guardians for the student
       * identified by the   `student_id`, if guardians are not enabled for the domain in question,   or
       * for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format
       * cannot   be recognized (it is not an email address, nor a `student_id` from the   API). *
       * `NOT_FOUND` if the requesting user is permitted to modify guardians for   the requested
       * `student_id`, but no `Guardian` record exists for that   student with the provided `guardian_id`.
       *
       * Create a request for the method "guardians.delete".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param studentId The student whose guardian is to be deleted. One of the following:
      * the numeric identifier for the
       *        user
      * the email address of the user
      * the string literal `"me"`, indicating the
       *        requesting user
       * @param guardianId The `id` field from a `Guardian`.
       * @return the request
       */
      public Delete delete(java.lang.String studentId, java.lang.String guardianId) throws java.io.IOException {
        Delete result = new Delete(studentId, guardianId);
        initialize(result);
        return result;
      }

      public class Delete extends ClassroomRequest<com.google.api.services.classroom.model.Empty> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardians/{guardianId}";

        /**
         * Deletes a guardian.
         *
         * The guardian will no longer receive guardian notifications and the guardian will no longer be
         * accessible via the API.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if no user that matches the provided `student_id`   is visible to the
         * requesting user, if the requesting user is not   permitted to manage guardians for the student
         * identified by the   `student_id`, if guardians are not enabled for the domain in question,   or
         * for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format
         * cannot   be recognized (it is not an email address, nor a `student_id` from the   API). *
         * `NOT_FOUND` if the requesting user is permitted to modify guardians for   the requested
         * `student_id`, but no `Guardian` record exists for that   student with the provided
         * `guardian_id`.
         *
         * Create a request for the method "guardians.delete".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId The student whose guardian is to be deleted. One of the following:
      * the numeric identifier for the
       *        user
      * the email address of the user
      * the string literal `"me"`, indicating the
       *        requesting user
         * @param guardianId The `id` field from a `Guardian`.
         * @since 1.13
         */
        protected Delete(java.lang.String studentId, java.lang.String guardianId) {
          super(Classroom.this, "DELETE", REST_PATH, null, com.google.api.services.classroom.model.Empty.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
          this.guardianId = com.google.api.client.util.Preconditions.checkNotNull(guardianId, "Required parameter guardianId must be specified.");
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The student whose guardian is to be deleted. One of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** The student whose guardian is to be deleted. One of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /**
         * The student whose guardian is to be deleted. One of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Delete setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /** The `id` field from a `Guardian`. */
        @com.google.api.client.util.Key
        private java.lang.String guardianId;

        /** The `id` field from a `Guardian`.
         */
        public java.lang.String getGuardianId() {
          return guardianId;
        }

        /** The `id` field from a `Guardian`. */
        public Delete setGuardianId(java.lang.String guardianId) {
          this.guardianId = guardianId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns a specific guardian.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if no user that matches the provided `student_id`   is visible to the
       * requesting user, if the requesting user is not   permitted to view guardian information for the
       * student identified by the   `student_id`, if guardians are not enabled for the domain in
       * question,   or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but
       * its format cannot   be recognized (it is not an email address, nor a `student_id` from the   API,
       * nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view guardians
       * for   the requested `student_id`, but no `Guardian` record exists for that   student that matches
       * the provided `guardian_id`.
       *
       * Create a request for the method "guardians.get".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param studentId The student whose guardian is being requested. One of the following:
      * the numeric identifier for
       *        the user
      * the email address of the user
      * the string literal `"me"`, indicating the
       *        requesting user
       * @param guardianId The `id` field from a `Guardian`.
       * @return the request
       */
      public Get get(java.lang.String studentId, java.lang.String guardianId) throws java.io.IOException {
        Get result = new Get(studentId, guardianId);
        initialize(result);
        return result;
      }

      public class Get extends ClassroomRequest<com.google.api.services.classroom.model.Guardian> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardians/{guardianId}";

        /**
         * Returns a specific guardian.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if no user that matches the provided `student_id`   is visible to the
         * requesting user, if the requesting user is not   permitted to view guardian information for the
         * student identified by the   `student_id`, if guardians are not enabled for the domain in
         * question,   or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified,
         * but its format cannot   be recognized (it is not an email address, nor a `student_id` from the
         * API, nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view
         * guardians for   the requested `student_id`, but no `Guardian` record exists for that   student
         * that matches the provided `guardian_id`.
         *
         * Create a request for the method "guardians.get".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId The student whose guardian is being requested. One of the following:
      * the numeric identifier for
       *        the user
      * the email address of the user
      * the string literal `"me"`, indicating the
       *        requesting user
         * @param guardianId The `id` field from a `Guardian`.
         * @since 1.13
         */
        protected Get(java.lang.String studentId, java.lang.String guardianId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.Guardian.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
          this.guardianId = com.google.api.client.util.Preconditions.checkNotNull(guardianId, "Required parameter guardianId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The student whose guardian is being requested. One of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** The student whose guardian is being requested. One of the following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /**
         * The student whose guardian is being requested. One of the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user
         */
        public Get setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /** The `id` field from a `Guardian`. */
        @com.google.api.client.util.Key
        private java.lang.String guardianId;

        /** The `id` field from a `Guardian`.
         */
        public java.lang.String getGuardianId() {
          return guardianId;
        }

        /** The `id` field from a `Guardian`. */
        public Get setGuardianId(java.lang.String guardianId) {
          this.guardianId = guardianId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of guardians that the requesting user is permitted to view, restricted to those
       * that match the request.
       *
       * To list guardians for any student that the requesting user may view guardians for, use the
       * literal character `-` for the student ID.
       *
       * This method returns the following error codes:
       *
       * * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting   user is not permitted
       * to view guardian information for that student, if   `"-"` is specified as the `student_id` and
       * the user is not a domain   administrator, if guardians are not enabled for the domain in
       * question,   if the `invited_email_address` filter is set by a user who is not a   domain
       * administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified,
       * but its format cannot   be recognized (it is not an email address, nor a `student_id` from the
       * API, nor the literal string `me`). May also be returned if an invalid   `page_token` is provided.
       * * `NOT_FOUND` if a `student_id` is specified, and its format can be   recognized, but Classroom
       * has no record of that student.
       *
       * Create a request for the method "guardians.list".
       *
       * This request holds the parameters needed by the classroom server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param studentId Filter results by the student who the guardian is linked to.
      The identifier can be one of the
       *        following:
      * the numeric identifier for the user
      * the email address of the user
      * the
       *        string literal `"me"`, indicating the requesting user
      * the string literal `"-"`,
       *        indicating that results should be returned for
        all students that the requesting user has
       *        access to view.
       * @return the request
       */
      public List list(java.lang.String studentId) throws java.io.IOException {
        List result = new List(studentId);
        initialize(result);
        return result;
      }

      public class List extends ClassroomRequest<com.google.api.services.classroom.model.ListGuardiansResponse> {

        private static final String REST_PATH = "v1/userProfiles/{studentId}/guardians";

        /**
         * Returns a list of guardians that the requesting user is permitted to view, restricted to those
         * that match the request.
         *
         * To list guardians for any student that the requesting user may view guardians for, use the
         * literal character `-` for the student ID.
         *
         * This method returns the following error codes:
         *
         * * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting   user is not
         * permitted to view guardian information for that student, if   `"-"` is specified as the
         * `student_id` and the user is not a domain   administrator, if guardians are not enabled for the
         * domain in question,   if the `invited_email_address` filter is set by a user who is not a
         * domain administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is
         * specified, but its format cannot   be recognized (it is not an email address, nor a
         * `student_id` from the   API, nor the literal string `me`). May also be returned if an invalid
         * `page_token` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be
         * recognized, but Classroom has no record of that student.
         *
         * Create a request for the method "guardians.list".
         *
         * This request holds the parameters needed by the the classroom server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param studentId Filter results by the student who the guardian is linked to.
      The identifier can be one of the
       *        following:
      * the numeric identifier for the user
      * the email address of the user
      * the
       *        string literal `"me"`, indicating the requesting user
      * the string literal `"-"`,
       *        indicating that results should be returned for
        all students that the requesting user has
       *        access to view.
         * @since 1.13
         */
        protected List(java.lang.String studentId) {
          super(Classroom.this, "GET", REST_PATH, null, com.google.api.services.classroom.model.ListGuardiansResponse.class);
          this.studentId = com.google.api.client.util.Preconditions.checkNotNull(studentId, "Required parameter studentId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Filter results by the student who the guardian is linked to. The identifier can be one of
         * the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating
         * that results should be returned for all students that the requesting user has access to
         * view.
         */
        @com.google.api.client.util.Key
        private java.lang.String studentId;

        /** Filter results by the student who the guardian is linked to. The identifier can be one of the
       following:

       * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
       indicating the requesting user * the string literal `"-"`, indicating that results should be
       returned for all students that the requesting user has access to view.
         */
        public java.lang.String getStudentId() {
          return studentId;
        }

        /**
         * Filter results by the student who the guardian is linked to. The identifier can be one of
         * the following:
         *
         * * the numeric identifier for the user * the email address of the user * the string
         * literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating
         * that results should be returned for all students that the requesting user has access to
         * view.
         */
        public List setStudentId(java.lang.String studentId) {
          this.studentId = studentId;
          return this;
        }

        /**
         * Filter results by the email address that the original invitation was sent to, resulting
         * in this guardian link. This filter can only be used by domain administrators.
         */
        @com.google.api.client.util.Key
        private java.lang.String invitedEmailAddress;

        /** Filter results by the email address that the original invitation was sent to, resulting in this
       guardian link. This filter can only be used by domain administrators.
         */
        public java.lang.String getInvitedEmailAddress() {
          return invitedEmailAddress;
        }

        /**
         * Filter results by the email address that the original invitation was sent to, resulting
         * in this guardian link. This filter can only be used by domain administrators.
         */
        public List setInvitedEmailAddress(java.lang.String invitedEmailAddress) {
          this.invitedEmailAddress = invitedEmailAddress;
          return this;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of items to return. Zero or unspecified indicates that the server may assign a
       maximum.

       The server may return fewer than the specified number of results.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of items to return. Zero or unspecified indicates that the server may
         * assign a maximum.
         *
         * The server may return fewer than the specified number of results.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** nextPageToken value returned from a previous list call, indicating that the subsequent page of
       results should be returned.

       The list request must be otherwise identical to the one that resulted in this token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * nextPageToken value returned from a previous list call, indicating that the subsequent
         * page of results should be returned.
         *
         * The list request must be otherwise identical to the one that resulted in this token.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Classroom}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Classroom}. */
    @Override
    public Classroom build() {
      return new Classroom(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ClassroomRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setClassroomRequestInitializer(
        ClassroomRequestInitializer classroomRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(classroomRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
