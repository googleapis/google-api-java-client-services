/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1beta1.model;

/**
 * For display only. Metadata associated with a Compute Engine route.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RouteInfo extends com.google.api.client.json.GenericJson {

  /**
   * For ADVERTISED routes, the URI of their next hop, i.e. the URI of the hybrid endpoint (VPN
   * tunnel, Interconnect attachment, NCC router appliance) the advertised prefix is advertised
   * through, or URI of the source peered network. Deprecated in favor of the next_hop_uri field,
   * not used in new tests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String advertisedRouteNextHopUri;

  /**
   * For ADVERTISED dynamic routes, the URI of the Cloud Router that advertised the corresponding IP
   * prefix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String advertisedRouteSourceRouterUri;

  /**
   * Destination IP range of the route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destIpRange;

  /**
   * Destination port ranges of the route. POLICY_BASED routes only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> destPortRanges;

  /**
   * Name of a route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Instance tags of the route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> instanceTags;

  /**
   * For PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised by NCC Hub, the URI of the
   * corresponding route in NCC Hub's routing table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nccHubRouteUri;

  /**
   * URI of the NCC Hub the route is advertised by. PEERING_SUBNET and PEERING_DYNAMIC routes that
   * are advertised by NCC Hub only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nccHubUri;

  /**
   * URI of the destination NCC Spoke. PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised
   * by NCC Hub only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nccSpokeUri;

  /**
   * URI of a VPC network where route is located.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String networkUri;

  /**
   * String type of the next hop of the route (for example, "VPN tunnel"). Deprecated in favor of
   * the next_hop_type and next_hop_uri fields, not used in new tests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nextHop;

  /**
   * URI of a VPC network where the next hop resource is located.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nextHopNetworkUri;

  /**
   * Type of next hop.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nextHopType;

  /**
   * URI of the next hop resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nextHopUri;

  /**
   * For PEERING_SUBNET, PEERING_STATIC and PEERING_DYNAMIC routes, the name of the originating
   * SUBNET/STATIC/DYNAMIC route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originatingRouteDisplayName;

  /**
   * For PEERING_SUBNET and PEERING_STATIC routes, the URI of the originating SUBNET/STATIC route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originatingRouteUri;

  /**
   * Priority of the route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer priority;

  /**
   * Protocols of the route. POLICY_BASED routes only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> protocols;

  /**
   * Region of the route. DYNAMIC, PEERING_DYNAMIC, POLICY_BASED and ADVERTISED routes only. If set
   * for POLICY_BASED route, this is a region of VLAN attachments for Cloud Interconnect the route
   * applies to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String region;

  /**
   * Indicates where route is applicable. Deprecated, routes with NCC_HUB scope are not included in
   * the trace in new tests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routeScope;

  /**
   * Type of route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routeType;

  /**
   * Source IP address range of the route. POLICY_BASED routes only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String srcIpRange;

  /**
   * Source port ranges of the route. POLICY_BASED routes only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> srcPortRanges;

  /**
   * URI of a route. SUBNET, STATIC, PEERING_SUBNET (only for peering network) and POLICY_BASED
   * routes only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * For ADVERTISED routes, the URI of their next hop, i.e. the URI of the hybrid endpoint (VPN
   * tunnel, Interconnect attachment, NCC router appliance) the advertised prefix is advertised
   * through, or URI of the source peered network. Deprecated in favor of the next_hop_uri field,
   * not used in new tests.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdvertisedRouteNextHopUri() {
    return advertisedRouteNextHopUri;
  }

  /**
   * For ADVERTISED routes, the URI of their next hop, i.e. the URI of the hybrid endpoint (VPN
   * tunnel, Interconnect attachment, NCC router appliance) the advertised prefix is advertised
   * through, or URI of the source peered network. Deprecated in favor of the next_hop_uri field,
   * not used in new tests.
   * @param advertisedRouteNextHopUri advertisedRouteNextHopUri or {@code null} for none
   */
  public RouteInfo setAdvertisedRouteNextHopUri(java.lang.String advertisedRouteNextHopUri) {
    this.advertisedRouteNextHopUri = advertisedRouteNextHopUri;
    return this;
  }

  /**
   * For ADVERTISED dynamic routes, the URI of the Cloud Router that advertised the corresponding IP
   * prefix.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdvertisedRouteSourceRouterUri() {
    return advertisedRouteSourceRouterUri;
  }

  /**
   * For ADVERTISED dynamic routes, the URI of the Cloud Router that advertised the corresponding IP
   * prefix.
   * @param advertisedRouteSourceRouterUri advertisedRouteSourceRouterUri or {@code null} for none
   */
  public RouteInfo setAdvertisedRouteSourceRouterUri(java.lang.String advertisedRouteSourceRouterUri) {
    this.advertisedRouteSourceRouterUri = advertisedRouteSourceRouterUri;
    return this;
  }

  /**
   * Destination IP range of the route.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestIpRange() {
    return destIpRange;
  }

  /**
   * Destination IP range of the route.
   * @param destIpRange destIpRange or {@code null} for none
   */
  public RouteInfo setDestIpRange(java.lang.String destIpRange) {
    this.destIpRange = destIpRange;
    return this;
  }

  /**
   * Destination port ranges of the route. POLICY_BASED routes only.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDestPortRanges() {
    return destPortRanges;
  }

  /**
   * Destination port ranges of the route. POLICY_BASED routes only.
   * @param destPortRanges destPortRanges or {@code null} for none
   */
  public RouteInfo setDestPortRanges(java.util.List<java.lang.String> destPortRanges) {
    this.destPortRanges = destPortRanges;
    return this;
  }

  /**
   * Name of a route.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Name of a route.
   * @param displayName displayName or {@code null} for none
   */
  public RouteInfo setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Instance tags of the route.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getInstanceTags() {
    return instanceTags;
  }

  /**
   * Instance tags of the route.
   * @param instanceTags instanceTags or {@code null} for none
   */
  public RouteInfo setInstanceTags(java.util.List<java.lang.String> instanceTags) {
    this.instanceTags = instanceTags;
    return this;
  }

  /**
   * For PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised by NCC Hub, the URI of the
   * corresponding route in NCC Hub's routing table.
   * @return value or {@code null} for none
   */
  public java.lang.String getNccHubRouteUri() {
    return nccHubRouteUri;
  }

  /**
   * For PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised by NCC Hub, the URI of the
   * corresponding route in NCC Hub's routing table.
   * @param nccHubRouteUri nccHubRouteUri or {@code null} for none
   */
  public RouteInfo setNccHubRouteUri(java.lang.String nccHubRouteUri) {
    this.nccHubRouteUri = nccHubRouteUri;
    return this;
  }

  /**
   * URI of the NCC Hub the route is advertised by. PEERING_SUBNET and PEERING_DYNAMIC routes that
   * are advertised by NCC Hub only.
   * @return value or {@code null} for none
   */
  public java.lang.String getNccHubUri() {
    return nccHubUri;
  }

  /**
   * URI of the NCC Hub the route is advertised by. PEERING_SUBNET and PEERING_DYNAMIC routes that
   * are advertised by NCC Hub only.
   * @param nccHubUri nccHubUri or {@code null} for none
   */
  public RouteInfo setNccHubUri(java.lang.String nccHubUri) {
    this.nccHubUri = nccHubUri;
    return this;
  }

  /**
   * URI of the destination NCC Spoke. PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised
   * by NCC Hub only.
   * @return value or {@code null} for none
   */
  public java.lang.String getNccSpokeUri() {
    return nccSpokeUri;
  }

  /**
   * URI of the destination NCC Spoke. PEERING_SUBNET and PEERING_DYNAMIC routes that are advertised
   * by NCC Hub only.
   * @param nccSpokeUri nccSpokeUri or {@code null} for none
   */
  public RouteInfo setNccSpokeUri(java.lang.String nccSpokeUri) {
    this.nccSpokeUri = nccSpokeUri;
    return this;
  }

  /**
   * URI of a VPC network where route is located.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetworkUri() {
    return networkUri;
  }

  /**
   * URI of a VPC network where route is located.
   * @param networkUri networkUri or {@code null} for none
   */
  public RouteInfo setNetworkUri(java.lang.String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * String type of the next hop of the route (for example, "VPN tunnel"). Deprecated in favor of
   * the next_hop_type and next_hop_uri fields, not used in new tests.
   * @return value or {@code null} for none
   */
  public java.lang.String getNextHop() {
    return nextHop;
  }

  /**
   * String type of the next hop of the route (for example, "VPN tunnel"). Deprecated in favor of
   * the next_hop_type and next_hop_uri fields, not used in new tests.
   * @param nextHop nextHop or {@code null} for none
   */
  public RouteInfo setNextHop(java.lang.String nextHop) {
    this.nextHop = nextHop;
    return this;
  }

  /**
   * URI of a VPC network where the next hop resource is located.
   * @return value or {@code null} for none
   */
  public java.lang.String getNextHopNetworkUri() {
    return nextHopNetworkUri;
  }

  /**
   * URI of a VPC network where the next hop resource is located.
   * @param nextHopNetworkUri nextHopNetworkUri or {@code null} for none
   */
  public RouteInfo setNextHopNetworkUri(java.lang.String nextHopNetworkUri) {
    this.nextHopNetworkUri = nextHopNetworkUri;
    return this;
  }

  /**
   * Type of next hop.
   * @return value or {@code null} for none
   */
  public java.lang.String getNextHopType() {
    return nextHopType;
  }

  /**
   * Type of next hop.
   * @param nextHopType nextHopType or {@code null} for none
   */
  public RouteInfo setNextHopType(java.lang.String nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * URI of the next hop resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getNextHopUri() {
    return nextHopUri;
  }

  /**
   * URI of the next hop resource.
   * @param nextHopUri nextHopUri or {@code null} for none
   */
  public RouteInfo setNextHopUri(java.lang.String nextHopUri) {
    this.nextHopUri = nextHopUri;
    return this;
  }

  /**
   * For PEERING_SUBNET, PEERING_STATIC and PEERING_DYNAMIC routes, the name of the originating
   * SUBNET/STATIC/DYNAMIC route.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginatingRouteDisplayName() {
    return originatingRouteDisplayName;
  }

  /**
   * For PEERING_SUBNET, PEERING_STATIC and PEERING_DYNAMIC routes, the name of the originating
   * SUBNET/STATIC/DYNAMIC route.
   * @param originatingRouteDisplayName originatingRouteDisplayName or {@code null} for none
   */
  public RouteInfo setOriginatingRouteDisplayName(java.lang.String originatingRouteDisplayName) {
    this.originatingRouteDisplayName = originatingRouteDisplayName;
    return this;
  }

  /**
   * For PEERING_SUBNET and PEERING_STATIC routes, the URI of the originating SUBNET/STATIC route.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginatingRouteUri() {
    return originatingRouteUri;
  }

  /**
   * For PEERING_SUBNET and PEERING_STATIC routes, the URI of the originating SUBNET/STATIC route.
   * @param originatingRouteUri originatingRouteUri or {@code null} for none
   */
  public RouteInfo setOriginatingRouteUri(java.lang.String originatingRouteUri) {
    this.originatingRouteUri = originatingRouteUri;
    return this;
  }

  /**
   * Priority of the route.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPriority() {
    return priority;
  }

  /**
   * Priority of the route.
   * @param priority priority or {@code null} for none
   */
  public RouteInfo setPriority(java.lang.Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Protocols of the route. POLICY_BASED routes only.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getProtocols() {
    return protocols;
  }

  /**
   * Protocols of the route. POLICY_BASED routes only.
   * @param protocols protocols or {@code null} for none
   */
  public RouteInfo setProtocols(java.util.List<java.lang.String> protocols) {
    this.protocols = protocols;
    return this;
  }

  /**
   * Region of the route. DYNAMIC, PEERING_DYNAMIC, POLICY_BASED and ADVERTISED routes only. If set
   * for POLICY_BASED route, this is a region of VLAN attachments for Cloud Interconnect the route
   * applies to.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * Region of the route. DYNAMIC, PEERING_DYNAMIC, POLICY_BASED and ADVERTISED routes only. If set
   * for POLICY_BASED route, this is a region of VLAN attachments for Cloud Interconnect the route
   * applies to.
   * @param region region or {@code null} for none
   */
  public RouteInfo setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  /**
   * Indicates where route is applicable. Deprecated, routes with NCC_HUB scope are not included in
   * the trace in new tests.
   * @return value or {@code null} for none
   */
  public java.lang.String getRouteScope() {
    return routeScope;
  }

  /**
   * Indicates where route is applicable. Deprecated, routes with NCC_HUB scope are not included in
   * the trace in new tests.
   * @param routeScope routeScope or {@code null} for none
   */
  public RouteInfo setRouteScope(java.lang.String routeScope) {
    this.routeScope = routeScope;
    return this;
  }

  /**
   * Type of route.
   * @return value or {@code null} for none
   */
  public java.lang.String getRouteType() {
    return routeType;
  }

  /**
   * Type of route.
   * @param routeType routeType or {@code null} for none
   */
  public RouteInfo setRouteType(java.lang.String routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * Source IP address range of the route. POLICY_BASED routes only.
   * @return value or {@code null} for none
   */
  public java.lang.String getSrcIpRange() {
    return srcIpRange;
  }

  /**
   * Source IP address range of the route. POLICY_BASED routes only.
   * @param srcIpRange srcIpRange or {@code null} for none
   */
  public RouteInfo setSrcIpRange(java.lang.String srcIpRange) {
    this.srcIpRange = srcIpRange;
    return this;
  }

  /**
   * Source port ranges of the route. POLICY_BASED routes only.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSrcPortRanges() {
    return srcPortRanges;
  }

  /**
   * Source port ranges of the route. POLICY_BASED routes only.
   * @param srcPortRanges srcPortRanges or {@code null} for none
   */
  public RouteInfo setSrcPortRanges(java.util.List<java.lang.String> srcPortRanges) {
    this.srcPortRanges = srcPortRanges;
    return this;
  }

  /**
   * URI of a route. SUBNET, STATIC, PEERING_SUBNET (only for peering network) and POLICY_BASED
   * routes only.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * URI of a route. SUBNET, STATIC, PEERING_SUBNET (only for peering network) and POLICY_BASED
   * routes only.
   * @param uri uri or {@code null} for none
   */
  public RouteInfo setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public RouteInfo set(String fieldName, Object value) {
    return (RouteInfo) super.set(fieldName, value);
  }

  @Override
  public RouteInfo clone() {
    return (RouteInfo) super.clone();
  }

}
