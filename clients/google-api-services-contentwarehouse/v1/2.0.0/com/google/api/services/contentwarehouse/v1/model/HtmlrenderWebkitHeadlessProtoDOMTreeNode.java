/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * DOMTreeNode Defines a DOM Node. An instance can contain references to one or more children (of
 * type DOMTreeNode) and one or more attributes. The DOMTreeNode also encapsulates rendering
 * information (if applicable) in the form of references to one or more RenderTreeNodes. Next tag
 * available: 16
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoDOMTreeNode extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttribute> attribute;

  /**
   * An index per child. Indexes can be used to fetch the DOMTreeNodes from the list maintained by
   * the Document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> childDomTreeNodeIndex;

  /**
   * For elements, the actual url that was used to fetch the image. Note that this field is set only
   * if it is different from the 'src' attribute value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currentSourceUrl;

  /**
   * If the node represents an iframe or a frame then document will be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoDocument document;

  /**
   * Identifies the HTML tag type (IMG, P, DIV, etc). Applicable only for DOM nodes that are
   * representative of html elements. For a list of possible types refer HtmlTagEnum defined in
   * webutil/html/htmltagenum.h.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer htmlTagType;

  /**
   * Whether this DOM node responds to mouse clicks. This includes e.g. nodes that have had click
   * event listeners attached via JavaScript as well as e.g. anchor tags that naturally navigate
   * when clicked.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isClickable;

  /**
   * Name of the node (document, text, comment, div, etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * URL of the script, if any, which created or populated this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originUrl;

  /**
   * List of referenced resource indexes for any resources that this DOM tree node references.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> referencedResourceIndex;

  /**
   * RenderTreeNode can be looked up from the list of RenderTreeNodes stored in the Document using
   * render_tree_node_index. RenderTreeNode gives rendering information (bounding box, style that
   * was applied, etc). Note: 1. If a DOMTreeNode does not have a RenderTreeNode then it is safe to
   * assume that the DOMTreeNode has no effect on the rendering. DOMTreeNodes for a ,
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> renderTreeNodeIndex;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The node value is applicable for TEXT_NODEs, DOCUMENT_TYPE_NODEs, and user input elements such
   * as , and . For DOCUMENT_TYPE_NODEs, the value contains the publicId and SystemId. For input
   * elements, the value reflects the current value in the element at the time the snapshot was
   * taken.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttribute> getAttribute() {
    return attribute;
  }

  /**
   * @param attribute attribute or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setAttribute(java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttribute> attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * An index per child. Indexes can be used to fetch the DOMTreeNodes from the list maintained by
   * the Document.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getChildDomTreeNodeIndex() {
    return childDomTreeNodeIndex;
  }

  /**
   * An index per child. Indexes can be used to fetch the DOMTreeNodes from the list maintained by
   * the Document.
   * @param childDomTreeNodeIndex childDomTreeNodeIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setChildDomTreeNodeIndex(java.util.List<java.lang.Integer> childDomTreeNodeIndex) {
    this.childDomTreeNodeIndex = childDomTreeNodeIndex;
    return this;
  }

  /**
   * For elements, the actual url that was used to fetch the image. Note that this field is set only
   * if it is different from the 'src' attribute value.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrentSourceUrl() {
    return currentSourceUrl;
  }

  /**
   * For elements, the actual url that was used to fetch the image. Note that this field is set only
   * if it is different from the 'src' attribute value.
   * @param currentSourceUrl currentSourceUrl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setCurrentSourceUrl(java.lang.String currentSourceUrl) {
    this.currentSourceUrl = currentSourceUrl;
    return this;
  }

  /**
   * If the node represents an iframe or a frame then document will be set.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument getDocument() {
    return document;
  }

  /**
   * If the node represents an iframe or a frame then document will be set.
   * @param document document or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setDocument(HtmlrenderWebkitHeadlessProtoDocument document) {
    this.document = document;
    return this;
  }

  /**
   * Identifies the HTML tag type (IMG, P, DIV, etc). Applicable only for DOM nodes that are
   * representative of html elements. For a list of possible types refer HtmlTagEnum defined in
   * webutil/html/htmltagenum.h.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHtmlTagType() {
    return htmlTagType;
  }

  /**
   * Identifies the HTML tag type (IMG, P, DIV, etc). Applicable only for DOM nodes that are
   * representative of html elements. For a list of possible types refer HtmlTagEnum defined in
   * webutil/html/htmltagenum.h.
   * @param htmlTagType htmlTagType or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setHtmlTagType(java.lang.Integer htmlTagType) {
    this.htmlTagType = htmlTagType;
    return this;
  }

  /**
   * Whether this DOM node responds to mouse clicks. This includes e.g. nodes that have had click
   * event listeners attached via JavaScript as well as e.g. anchor tags that naturally navigate
   * when clicked.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsClickable() {
    return isClickable;
  }

  /**
   * Whether this DOM node responds to mouse clicks. This includes e.g. nodes that have had click
   * event listeners attached via JavaScript as well as e.g. anchor tags that naturally navigate
   * when clicked.
   * @param isClickable isClickable or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setIsClickable(java.lang.Boolean isClickable) {
    this.isClickable = isClickable;
    return this;
  }

  /**
   * Name of the node (document, text, comment, div, etc).
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the node (document, text, comment, div, etc).
   * @param name name or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * URL of the script, if any, which created or populated this node.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginUrl() {
    return originUrl;
  }

  /**
   * URL of the script, if any, which created or populated this node.
   * @param originUrl originUrl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setOriginUrl(java.lang.String originUrl) {
    this.originUrl = originUrl;
    return this;
  }

  /**
   * List of referenced resource indexes for any resources that this DOM tree node references.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getReferencedResourceIndex() {
    return referencedResourceIndex;
  }

  /**
   * List of referenced resource indexes for any resources that this DOM tree node references.
   * @param referencedResourceIndex referencedResourceIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setReferencedResourceIndex(java.util.List<java.lang.Integer> referencedResourceIndex) {
    this.referencedResourceIndex = referencedResourceIndex;
    return this;
  }

  /**
   * RenderTreeNode can be looked up from the list of RenderTreeNodes stored in the Document using
   * render_tree_node_index. RenderTreeNode gives rendering information (bounding box, style that
   * was applied, etc). Note: 1. If a DOMTreeNode does not have a RenderTreeNode then it is safe to
   * assume that the DOMTreeNode has no effect on the rendering. DOMTreeNodes for a ,
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getRenderTreeNodeIndex() {
    return renderTreeNodeIndex;
  }

  /**
   * RenderTreeNode can be looked up from the list of RenderTreeNodes stored in the Document using
   * render_tree_node_index. RenderTreeNode gives rendering information (bounding box, style that
   * was applied, etc). Note: 1. If a DOMTreeNode does not have a RenderTreeNode then it is safe to
   * assume that the DOMTreeNode has no effect on the rendering. DOMTreeNodes for a ,
   * @param renderTreeNodeIndex renderTreeNodeIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setRenderTreeNodeIndex(java.util.List<java.lang.Integer> renderTreeNodeIndex) {
    this.renderTreeNodeIndex = renderTreeNodeIndex;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The node value is applicable for TEXT_NODEs, DOCUMENT_TYPE_NODEs, and user input elements such
   * as , and . For DOCUMENT_TYPE_NODEs, the value contains the publicId and SystemId. For input
   * elements, the value reflects the current value in the element at the time the snapshot was
   * taken.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * The node value is applicable for TEXT_NODEs, DOCUMENT_TYPE_NODEs, and user input elements such
   * as , and . For DOCUMENT_TYPE_NODEs, the value contains the publicId and SystemId. For input
   * elements, the value reflects the current value in the element at the time the snapshot was
   * taken.
   * @param value value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoDOMTreeNode) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoDOMTreeNode clone() {
    return (HtmlrenderWebkitHeadlessProtoDOMTreeNode) super.clone();
  }

}
