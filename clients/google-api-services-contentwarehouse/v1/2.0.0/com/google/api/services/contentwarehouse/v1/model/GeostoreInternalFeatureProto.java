/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Main proto for all internal fields to be stored at the feature level.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreInternalFeatureProto extends com.google.api.client.json.GenericJson {

  /**
   * A unique identifier for this feature's polygon data which is being held externally in
   * Shapestore (see go/shapestore).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String polygonShapeId;

  /**
   * A unique identifier for this feature's rest-of-world view polygon data which is being held
   * externally in Shapestore (see go/shapestore). This is part of the feature's geopolitical
   * geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String restOfWorldPolygonShapeId;

  /**
   * Per-field rights for this feature. See http://g3doc/geostore/g3doc/developers-guide/inputs
   * /rights-tracking for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreRightsStatusProto rightsStatus;

  /**
   * A unique identifier for this feature's self view polygon data which is being held externally in
   * Shapestore (see go/shapestore). This is part of the feature's geopolitical geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String selfPolygonShapeId;

  /**
   * Trust signals/annotations for the feature. In an input feature, these signals are computed at
   * the beginning of the pipeline and are immutable during the processing. In output features, this
   * proto may define the rules/criteria that a newer edit should meet, in order to be applied.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreTrustSignalsProto trust;

  /**
   * A unique identifier for this feature's water-removed polygon data which is being held
   * externally in Shapestore (see go/shapestore).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String waterRemovedPolygonShapeId;

  /**
   * A unique identifier for this feature's polygon data which is being held externally in
   * Shapestore (see go/shapestore).
   * @return value or {@code null} for none
   */
  public java.lang.String getPolygonShapeId() {
    return polygonShapeId;
  }

  /**
   * A unique identifier for this feature's polygon data which is being held externally in
   * Shapestore (see go/shapestore).
   * @param polygonShapeId polygonShapeId or {@code null} for none
   */
  public GeostoreInternalFeatureProto setPolygonShapeId(java.lang.String polygonShapeId) {
    this.polygonShapeId = polygonShapeId;
    return this;
  }

  /**
   * A unique identifier for this feature's rest-of-world view polygon data which is being held
   * externally in Shapestore (see go/shapestore). This is part of the feature's geopolitical
   * geometry.
   * @return value or {@code null} for none
   */
  public java.lang.String getRestOfWorldPolygonShapeId() {
    return restOfWorldPolygonShapeId;
  }

  /**
   * A unique identifier for this feature's rest-of-world view polygon data which is being held
   * externally in Shapestore (see go/shapestore). This is part of the feature's geopolitical
   * geometry.
   * @param restOfWorldPolygonShapeId restOfWorldPolygonShapeId or {@code null} for none
   */
  public GeostoreInternalFeatureProto setRestOfWorldPolygonShapeId(java.lang.String restOfWorldPolygonShapeId) {
    this.restOfWorldPolygonShapeId = restOfWorldPolygonShapeId;
    return this;
  }

  /**
   * Per-field rights for this feature. See http://g3doc/geostore/g3doc/developers-guide/inputs
   * /rights-tracking for more information.
   * @return value or {@code null} for none
   */
  public GeostoreRightsStatusProto getRightsStatus() {
    return rightsStatus;
  }

  /**
   * Per-field rights for this feature. See http://g3doc/geostore/g3doc/developers-guide/inputs
   * /rights-tracking for more information.
   * @param rightsStatus rightsStatus or {@code null} for none
   */
  public GeostoreInternalFeatureProto setRightsStatus(GeostoreRightsStatusProto rightsStatus) {
    this.rightsStatus = rightsStatus;
    return this;
  }

  /**
   * A unique identifier for this feature's self view polygon data which is being held externally in
   * Shapestore (see go/shapestore). This is part of the feature's geopolitical geometry.
   * @return value or {@code null} for none
   */
  public java.lang.String getSelfPolygonShapeId() {
    return selfPolygonShapeId;
  }

  /**
   * A unique identifier for this feature's self view polygon data which is being held externally in
   * Shapestore (see go/shapestore). This is part of the feature's geopolitical geometry.
   * @param selfPolygonShapeId selfPolygonShapeId or {@code null} for none
   */
  public GeostoreInternalFeatureProto setSelfPolygonShapeId(java.lang.String selfPolygonShapeId) {
    this.selfPolygonShapeId = selfPolygonShapeId;
    return this;
  }

  /**
   * Trust signals/annotations for the feature. In an input feature, these signals are computed at
   * the beginning of the pipeline and are immutable during the processing. In output features, this
   * proto may define the rules/criteria that a newer edit should meet, in order to be applied.
   * @return value or {@code null} for none
   */
  public GeostoreTrustSignalsProto getTrust() {
    return trust;
  }

  /**
   * Trust signals/annotations for the feature. In an input feature, these signals are computed at
   * the beginning of the pipeline and are immutable during the processing. In output features, this
   * proto may define the rules/criteria that a newer edit should meet, in order to be applied.
   * @param trust trust or {@code null} for none
   */
  public GeostoreInternalFeatureProto setTrust(GeostoreTrustSignalsProto trust) {
    this.trust = trust;
    return this;
  }

  /**
   * A unique identifier for this feature's water-removed polygon data which is being held
   * externally in Shapestore (see go/shapestore).
   * @return value or {@code null} for none
   */
  public java.lang.String getWaterRemovedPolygonShapeId() {
    return waterRemovedPolygonShapeId;
  }

  /**
   * A unique identifier for this feature's water-removed polygon data which is being held
   * externally in Shapestore (see go/shapestore).
   * @param waterRemovedPolygonShapeId waterRemovedPolygonShapeId or {@code null} for none
   */
  public GeostoreInternalFeatureProto setWaterRemovedPolygonShapeId(java.lang.String waterRemovedPolygonShapeId) {
    this.waterRemovedPolygonShapeId = waterRemovedPolygonShapeId;
    return this;
  }

  @Override
  public GeostoreInternalFeatureProto set(String fieldName, Object value) {
    return (GeostoreInternalFeatureProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreInternalFeatureProto clone() {
    return (GeostoreInternalFeatureProto) super.clone();
  }

}
