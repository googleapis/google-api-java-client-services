/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Contains the quota information for a quota check response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Control API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QuotaInfo extends com.google.api.client.json.GenericJson {

  /**
   * Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is
   * QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota
   * Deprecated: Use quota_metrics to get per quota group limit exceeded status.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> limitExceeded;

  /**
   * Map of quota group name to the actual number of tokens consumed. If the quota check was not
   * successful, then this will not be populated due to no quota consumption.
   *
   * We are not merging this field with 'quota_metrics' field because of the complexity of scaling
   * in Chemist client code base. For simplicity, we will keep this field for Castor (that scales
   * quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Integer> quotaConsumed;

  /**
   * Quota metrics to indicate the usage. Depending on the check request, one or more of the
   * following metrics will be included:
   *
   * 1. For rate quota, per quota group or per quota metric incremental usage will be specified
   * using the following delta metric:
   * "serviceruntime.googleapis.com/api/consumer/quota_used_count"
   *
   * 2. For allocation quota, per quota metric total usage will be specified using the following
   * gauge metric:   "serviceruntime.googleapis.com/allocation/consumer/quota_used_count"
   *
   * 3. For both rate quota and allocation quota, the quota limit reached condition will be
   * specified using the following boolean metric:   "serviceruntime.googleapis.com/quota/exceeded"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MetricValueSet> quotaMetrics;

  static {
    // hack to force ProGuard to consider MetricValueSet used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MetricValueSet.class);
  }

  /**
   * Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is
   * QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota
   * Deprecated: Use quota_metrics to get per quota group limit exceeded status.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLimitExceeded() {
    return limitExceeded;
  }

  /**
   * Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is
   * QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota
   * Deprecated: Use quota_metrics to get per quota group limit exceeded status.
   * @param limitExceeded limitExceeded or {@code null} for none
   */
  public QuotaInfo setLimitExceeded(java.util.List<java.lang.String> limitExceeded) {
    this.limitExceeded = limitExceeded;
    return this;
  }

  /**
   * Map of quota group name to the actual number of tokens consumed. If the quota check was not
   * successful, then this will not be populated due to no quota consumption.
   *
   * We are not merging this field with 'quota_metrics' field because of the complexity of scaling
   * in Chemist client code base. For simplicity, we will keep this field for Castor (that scales
   * quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Integer> getQuotaConsumed() {
    return quotaConsumed;
  }

  /**
   * Map of quota group name to the actual number of tokens consumed. If the quota check was not
   * successful, then this will not be populated due to no quota consumption.
   *
   * We are not merging this field with 'quota_metrics' field because of the complexity of scaling
   * in Chemist client code base. For simplicity, we will keep this field for Castor (that scales
   * quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage).
   * @param quotaConsumed quotaConsumed or {@code null} for none
   */
  public QuotaInfo setQuotaConsumed(java.util.Map<String, java.lang.Integer> quotaConsumed) {
    this.quotaConsumed = quotaConsumed;
    return this;
  }

  /**
   * Quota metrics to indicate the usage. Depending on the check request, one or more of the
   * following metrics will be included:
   *
   * 1. For rate quota, per quota group or per quota metric incremental usage will be specified
   * using the following delta metric:
   * "serviceruntime.googleapis.com/api/consumer/quota_used_count"
   *
   * 2. For allocation quota, per quota metric total usage will be specified using the following
   * gauge metric:   "serviceruntime.googleapis.com/allocation/consumer/quota_used_count"
   *
   * 3. For both rate quota and allocation quota, the quota limit reached condition will be
   * specified using the following boolean metric:   "serviceruntime.googleapis.com/quota/exceeded"
   * @return value or {@code null} for none
   */
  public java.util.List<MetricValueSet> getQuotaMetrics() {
    return quotaMetrics;
  }

  /**
   * Quota metrics to indicate the usage. Depending on the check request, one or more of the
   * following metrics will be included:
   *
   * 1. For rate quota, per quota group or per quota metric incremental usage will be specified
   * using the following delta metric:
   * "serviceruntime.googleapis.com/api/consumer/quota_used_count"
   *
   * 2. For allocation quota, per quota metric total usage will be specified using the following
   * gauge metric:   "serviceruntime.googleapis.com/allocation/consumer/quota_used_count"
   *
   * 3. For both rate quota and allocation quota, the quota limit reached condition will be
   * specified using the following boolean metric:   "serviceruntime.googleapis.com/quota/exceeded"
   * @param quotaMetrics quotaMetrics or {@code null} for none
   */
  public QuotaInfo setQuotaMetrics(java.util.List<MetricValueSet> quotaMetrics) {
    this.quotaMetrics = quotaMetrics;
    return this;
  }

  @Override
  public QuotaInfo set(String fieldName, Object value) {
    return (QuotaInfo) super.set(fieldName, value);
  }

  @Override
  public QuotaInfo clone() {
    return (QuotaInfo) super.clone();
  }

}
