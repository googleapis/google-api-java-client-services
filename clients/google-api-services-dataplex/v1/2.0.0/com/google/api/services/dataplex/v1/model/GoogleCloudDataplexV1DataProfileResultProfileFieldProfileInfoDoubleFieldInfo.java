/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataplex.v1.model;

/**
 * DoubleFieldInfo defines output for any double type field.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataplex API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo extends com.google.api.client.json.GenericJson {

  /**
   * The average of non-null values of double field in the sampled data. Return NaN, if the field
   * has a NaN. Optional if zero non-null rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double average;

  /**
   * The maximum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double max;

  /**
   * The minimum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double min;

  /**
   * A quartile divide the numebr of data points into four parts, or quarters, of more-or-less equal
   * size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data
   * from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the
   * data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the
   * data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the
   * lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below
   * this point. So, here the quartiles is provided as an ordered list of quartile values, occurring
   * in order Q1, median, Q3.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Double> quartiles;

  /**
   * The standard deviation of non-null of double field in the sampled data. Return NaN, if the
   * field has a NaN. Optional if zero non-null rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double standardDeviation;

  /**
   * The average of non-null values of double field in the sampled data. Return NaN, if the field
   * has a NaN. Optional if zero non-null rows.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAverage() {
    return average;
  }

  /**
   * The average of non-null values of double field in the sampled data. Return NaN, if the field
   * has a NaN. Optional if zero non-null rows.
   * @param average average or {@code null} for none
   */
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo setAverage(java.lang.Double average) {
    this.average = average;
    return this;
  }

  /**
   * The maximum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMax() {
    return max;
  }

  /**
   * The maximum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * @param max max or {@code null} for none
   */
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo setMax(java.lang.Double max) {
    this.max = max;
    return this;
  }

  /**
   * The minimum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMin() {
    return min;
  }

  /**
   * The minimum value of a double field in the sampled data. Return NaN, if the field has a NaN.
   * Optional if zero non-null rows.
   * @param min min or {@code null} for none
   */
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo setMin(java.lang.Double min) {
    this.min = min;
    return this;
  }

  /**
   * A quartile divide the numebr of data points into four parts, or quarters, of more-or-less equal
   * size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data
   * from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the
   * data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the
   * data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the
   * lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below
   * this point. So, here the quartiles is provided as an ordered list of quartile values, occurring
   * in order Q1, median, Q3.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Double> getQuartiles() {
    return quartiles;
  }

  /**
   * A quartile divide the numebr of data points into four parts, or quarters, of more-or-less equal
   * size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data
   * from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the
   * data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the
   * data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the
   * lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below
   * this point. So, here the quartiles is provided as an ordered list of quartile values, occurring
   * in order Q1, median, Q3.
   * @param quartiles quartiles or {@code null} for none
   */
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo setQuartiles(java.util.List<java.lang.Double> quartiles) {
    this.quartiles = quartiles;
    return this;
  }

  /**
   * The standard deviation of non-null of double field in the sampled data. Return NaN, if the
   * field has a NaN. Optional if zero non-null rows.
   * @return value or {@code null} for none
   */
  public java.lang.Double getStandardDeviation() {
    return standardDeviation;
  }

  /**
   * The standard deviation of non-null of double field in the sampled data. Return NaN, if the
   * field has a NaN. Optional if zero non-null rows.
   * @param standardDeviation standardDeviation or {@code null} for none
   */
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo setStandardDeviation(java.lang.Double standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  @Override
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo set(String fieldName, Object value) {
    return (GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo clone() {
    return (GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo) super.clone();
  }

}
