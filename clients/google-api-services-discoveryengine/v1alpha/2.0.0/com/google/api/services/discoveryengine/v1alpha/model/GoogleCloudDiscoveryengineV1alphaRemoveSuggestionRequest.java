/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1alpha.model;

/**
 * Request message for CompletionService.RemoveSuggestion method.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest extends com.google.api.client.json.GenericJson {

  /**
   * Remove all search history suggestions for the user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean removeAllSearchHistorySuggestions;

  /**
   * Required. Time at which the suggestion was removed. If not set, the current time will be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String removeTime;

  /**
   * The search history suggestion to be removed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String searchHistorySuggestion;

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1alphaUserInfo userInfo;

  /**
   * Required. A unique identifier for tracking visitors. For example, this could be implemented
   * with an HTTP cookie, which should be able to uniquely identify a visitor on a single device.
   * This unique identifier should not change if the visitor logs in or out of the website. This
   * field should NOT have a fixed value such as `unknown_visitor`. This should be the same
   * identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a
   * UTF-8 encoded string with a length limit of 128.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userPseudoId;

  /**
   * Remove all search history suggestions for the user.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRemoveAllSearchHistorySuggestions() {
    return removeAllSearchHistorySuggestions;
  }

  /**
   * Remove all search history suggestions for the user.
   * @param removeAllSearchHistorySuggestions removeAllSearchHistorySuggestions or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest setRemoveAllSearchHistorySuggestions(java.lang.Boolean removeAllSearchHistorySuggestions) {
    this.removeAllSearchHistorySuggestions = removeAllSearchHistorySuggestions;
    return this;
  }

  /**
   * Required. Time at which the suggestion was removed. If not set, the current time will be used.
   * @return value or {@code null} for none
   */
  public String getRemoveTime() {
    return removeTime;
  }

  /**
   * Required. Time at which the suggestion was removed. If not set, the current time will be used.
   * @param removeTime removeTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest setRemoveTime(String removeTime) {
    this.removeTime = removeTime;
    return this;
  }

  /**
   * The search history suggestion to be removed.
   * @return value or {@code null} for none
   */
  public java.lang.String getSearchHistorySuggestion() {
    return searchHistorySuggestion;
  }

  /**
   * The search history suggestion to be removed.
   * @param searchHistorySuggestion searchHistorySuggestion or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest setSearchHistorySuggestion(java.lang.String searchHistorySuggestion) {
    this.searchHistorySuggestion = searchHistorySuggestion;
    return this;
  }

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaUserInfo getUserInfo() {
    return userInfo;
  }

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * @param userInfo userInfo or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest setUserInfo(GoogleCloudDiscoveryengineV1alphaUserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Required. A unique identifier for tracking visitors. For example, this could be implemented
   * with an HTTP cookie, which should be able to uniquely identify a visitor on a single device.
   * This unique identifier should not change if the visitor logs in or out of the website. This
   * field should NOT have a fixed value such as `unknown_visitor`. This should be the same
   * identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a
   * UTF-8 encoded string with a length limit of 128.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserPseudoId() {
    return userPseudoId;
  }

  /**
   * Required. A unique identifier for tracking visitors. For example, this could be implemented
   * with an HTTP cookie, which should be able to uniquely identify a visitor on a single device.
   * This unique identifier should not change if the visitor logs in or out of the website. This
   * field should NOT have a fixed value such as `unknown_visitor`. This should be the same
   * identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a
   * UTF-8 encoded string with a length limit of 128.
   * @param userPseudoId userPseudoId or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest setUserPseudoId(java.lang.String userPseudoId) {
    this.userPseudoId = userPseudoId;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest clone() {
    return (GoogleCloudDiscoveryengineV1alphaRemoveSuggestionRequest) super.clone();
  }

}
