/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v1.model;

/**
 * A Change indicates the most recent state of an element.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleWatcherV1Change extends com.google.api.client.json.GenericJson {

  /**
   * If true, this Change is followed by more Changes that are in the same group as this Change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean continued;

  /**
   * The actual change data. This field is present only when `state() == EXISTS` or `state() ==
   * ERROR`. Please see google.protobuf.Any about how to use the Any type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> data;

  /**
   * Name of the element, interpreted relative to the entity's actual name. "" refers to the entity
   * itself. The element name is a valid UTF-8 string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String element;

  /**
   * If present, provides a compact representation of all the messages that have been received by
   * the caller for the given entity, e.g., it could be a sequence number or a multi-part
   * timestamp/version vector. This marker can be provided in the Request message, allowing the
   * caller to resume the stream watching at a specific point without fetching the initial state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resumeMarker;

  /**
   * The state of the `element`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * If true, this Change is followed by more Changes that are in the same group as this Change.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getContinued() {
    return continued;
  }

  /**
   * If true, this Change is followed by more Changes that are in the same group as this Change.
   * @param continued continued or {@code null} for none
   */
  public GoogleWatcherV1Change setContinued(java.lang.Boolean continued) {
    this.continued = continued;
    return this;
  }

  /**
   * The actual change data. This field is present only when `state() == EXISTS` or `state() ==
   * ERROR`. Please see google.protobuf.Any about how to use the Any type.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getData() {
    return data;
  }

  /**
   * The actual change data. This field is present only when `state() == EXISTS` or `state() ==
   * ERROR`. Please see google.protobuf.Any about how to use the Any type.
   * @param data data or {@code null} for none
   */
  public GoogleWatcherV1Change setData(java.util.Map<String, java.lang.Object> data) {
    this.data = data;
    return this;
  }

  /**
   * Name of the element, interpreted relative to the entity's actual name. "" refers to the entity
   * itself. The element name is a valid UTF-8 string.
   * @return value or {@code null} for none
   */
  public java.lang.String getElement() {
    return element;
  }

  /**
   * Name of the element, interpreted relative to the entity's actual name. "" refers to the entity
   * itself. The element name is a valid UTF-8 string.
   * @param element element or {@code null} for none
   */
  public GoogleWatcherV1Change setElement(java.lang.String element) {
    this.element = element;
    return this;
  }

  /**
   * If present, provides a compact representation of all the messages that have been received by
   * the caller for the given entity, e.g., it could be a sequence number or a multi-part
   * timestamp/version vector. This marker can be provided in the Request message, allowing the
   * caller to resume the stream watching at a specific point without fetching the initial state.
   * @see #decodeResumeMarker()
   * @return value or {@code null} for none
   */
  public java.lang.String getResumeMarker() {
    return resumeMarker;
  }

  /**
   * If present, provides a compact representation of all the messages that have been received by
   * the caller for the given entity, e.g., it could be a sequence number or a multi-part
   * timestamp/version vector. This marker can be provided in the Request message, allowing the
   * caller to resume the stream watching at a specific point without fetching the initial state.
   * @see #getResumeMarker()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeResumeMarker() {
    return com.google.api.client.util.Base64.decodeBase64(resumeMarker);
  }

  /**
   * If present, provides a compact representation of all the messages that have been received by
   * the caller for the given entity, e.g., it could be a sequence number or a multi-part
   * timestamp/version vector. This marker can be provided in the Request message, allowing the
   * caller to resume the stream watching at a specific point without fetching the initial state.
   * @see #encodeResumeMarker()
   * @param resumeMarker resumeMarker or {@code null} for none
   */
  public GoogleWatcherV1Change setResumeMarker(java.lang.String resumeMarker) {
    this.resumeMarker = resumeMarker;
    return this;
  }

  /**
   * If present, provides a compact representation of all the messages that have been received by
   * the caller for the given entity, e.g., it could be a sequence number or a multi-part
   * timestamp/version vector. This marker can be provided in the Request message, allowing the
   * caller to resume the stream watching at a specific point without fetching the initial state.
   * @see #setResumeMarker()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleWatcherV1Change encodeResumeMarker(byte[] resumeMarker) {
    this.resumeMarker = com.google.api.client.util.Base64.encodeBase64URLSafeString(resumeMarker);
    return this;
  }

  /**
   * The state of the `element`.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The state of the `element`.
   * @param state state or {@code null} for none
   */
  public GoogleWatcherV1Change setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public GoogleWatcherV1Change set(String fieldName, Object value) {
    return (GoogleWatcherV1Change) super.set(fieldName, value);
  }

  @Override
  public GoogleWatcherV1Change clone() {
    return (GoogleWatcherV1Change) super.clone();
  }

}
