/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.certificatemanager.v1.model;

/**
 * Defines a certificate map entry.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CertificateMapEntry extends com.google.api.client.json.GenericJson {

  /**
   * A set of Certificates defines for the given `hostname`. There can be defined up to four
   * certificates in each Certificate Map Entry. Each certificate must match pattern
   * `projects/locations/certificates`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> certificates;

  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * One or more paragraphs of text description of a certificate map entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a
   * set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a
   * proper certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Set of labels associated with a Certificate Map Entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matcher;

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique
   * globally and match pattern `projects/locations/certificateMaps/certificateMapEntries`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. A serving state of this Certificate Map Entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * A set of Certificates defines for the given `hostname`. There can be defined up to four
   * certificates in each Certificate Map Entry. Each certificate must match pattern
   * `projects/locations/certificates`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCertificates() {
    return certificates;
  }

  /**
   * A set of Certificates defines for the given `hostname`. There can be defined up to four
   * certificates in each Certificate Map Entry. Each certificate must match pattern
   * `projects/locations/certificates`.
   * @param certificates certificates or {@code null} for none
   */
  public CertificateMapEntry setCertificates(java.util.List<java.lang.String> certificates) {
    this.certificates = certificates;
    return this;
  }

  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   * @param createTime createTime or {@code null} for none
   */
  public CertificateMapEntry setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * One or more paragraphs of text description of a certificate map entry.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * One or more paragraphs of text description of a certificate map entry.
   * @param description description or {@code null} for none
   */
  public CertificateMapEntry setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a
   * set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a
   * proper certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a
   * set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a
   * proper certificate.
   * @param hostname hostname or {@code null} for none
   */
  public CertificateMapEntry setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Set of labels associated with a Certificate Map Entry.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Set of labels associated with a Certificate Map Entry.
   * @param labels labels or {@code null} for none
   */
  public CertificateMapEntry setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   * @return value or {@code null} for none
   */
  public java.lang.String getMatcher() {
    return matcher;
  }

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   * @param matcher matcher or {@code null} for none
   */
  public CertificateMapEntry setMatcher(java.lang.String matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique
   * globally and match pattern `projects/locations/certificateMaps/certificateMapEntries`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique
   * globally and match pattern `projects/locations/certificateMaps/certificateMapEntries`.
   * @param name name or {@code null} for none
   */
  public CertificateMapEntry setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. A serving state of this Certificate Map Entry.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. A serving state of this Certificate Map Entry.
   * @param state state or {@code null} for none
   */
  public CertificateMapEntry setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   * @param updateTime updateTime or {@code null} for none
   */
  public CertificateMapEntry setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public CertificateMapEntry set(String fieldName, Object value) {
    return (CertificateMapEntry) super.set(fieldName, value);
  }

  @Override
  public CertificateMapEntry clone() {
    return (CertificateMapEntry) super.clone();
  }

}
