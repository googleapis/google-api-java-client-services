/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for SocialCommonSegment.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SocialCommonSegment extends com.google.api.client.json.GenericJson {

  /**
   * Formatting to be applied when rendering the Segment. For all segment types, this is the
   * standard way of representing that the Segment should be rendered in bold, italics, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialCommonFormatting formatting;

  /**
   * For HASHTAG type:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialCommonHashtagData hashtagData;

  /**
   * Type-specific metadata. At most one of these should be populated, and the one that is populated
   * should correspond to the type of the Segment. For LINK type:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialCommonLinkData linkData;

  /**
   * Text content of the Segment. As a general rule, this field should contain the actual text that
   * should be rendered in the UI. Thus, for a hashtag, it should be "#Foo", and for a link, it
   * should be the display text. Clients that do not understand a particular segment type may use
   * this text, along with the Formatting info below, as a fallback for display. The field is not
   * required -- if all relevant information is carried in other metadata fields and there is no
   * need for a fallback, or it is not practical for a fallback to be provided for any other reason,
   * the field may be left blank. A standard example would be a user reference being transmitted
   * between server layers, where a gaia-ID representation may be sufficient and there is no need
   * for a textual fallback. In such a case, it would be valid and useful - though not required -
   * for servers to compute and populate a fallback on the serving path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * Type of Segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * For USER_MENTION type:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialCommonUserMentionData userMentionData;

  /**
   * Formatting to be applied when rendering the Segment. For all segment types, this is the
   * standard way of representing that the Segment should be rendered in bold, italics, etc.
   * @return value or {@code null} for none
   */
  public SocialCommonFormatting getFormatting() {
    return formatting;
  }

  /**
   * Formatting to be applied when rendering the Segment. For all segment types, this is the
   * standard way of representing that the Segment should be rendered in bold, italics, etc.
   * @param formatting formatting or {@code null} for none
   */
  public SocialCommonSegment setFormatting(SocialCommonFormatting formatting) {
    this.formatting = formatting;
    return this;
  }

  /**
   * For HASHTAG type:
   * @return value or {@code null} for none
   */
  public SocialCommonHashtagData getHashtagData() {
    return hashtagData;
  }

  /**
   * For HASHTAG type:
   * @param hashtagData hashtagData or {@code null} for none
   */
  public SocialCommonSegment setHashtagData(SocialCommonHashtagData hashtagData) {
    this.hashtagData = hashtagData;
    return this;
  }

  /**
   * Type-specific metadata. At most one of these should be populated, and the one that is populated
   * should correspond to the type of the Segment. For LINK type:
   * @return value or {@code null} for none
   */
  public SocialCommonLinkData getLinkData() {
    return linkData;
  }

  /**
   * Type-specific metadata. At most one of these should be populated, and the one that is populated
   * should correspond to the type of the Segment. For LINK type:
   * @param linkData linkData or {@code null} for none
   */
  public SocialCommonSegment setLinkData(SocialCommonLinkData linkData) {
    this.linkData = linkData;
    return this;
  }

  /**
   * Text content of the Segment. As a general rule, this field should contain the actual text that
   * should be rendered in the UI. Thus, for a hashtag, it should be "#Foo", and for a link, it
   * should be the display text. Clients that do not understand a particular segment type may use
   * this text, along with the Formatting info below, as a fallback for display. The field is not
   * required -- if all relevant information is carried in other metadata fields and there is no
   * need for a fallback, or it is not practical for a fallback to be provided for any other reason,
   * the field may be left blank. A standard example would be a user reference being transmitted
   * between server layers, where a gaia-ID representation may be sufficient and there is no need
   * for a textual fallback. In such a case, it would be valid and useful - though not required -
   * for servers to compute and populate a fallback on the serving path.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Text content of the Segment. As a general rule, this field should contain the actual text that
   * should be rendered in the UI. Thus, for a hashtag, it should be "#Foo", and for a link, it
   * should be the display text. Clients that do not understand a particular segment type may use
   * this text, along with the Formatting info below, as a fallback for display. The field is not
   * required -- if all relevant information is carried in other metadata fields and there is no
   * need for a fallback, or it is not practical for a fallback to be provided for any other reason,
   * the field may be left blank. A standard example would be a user reference being transmitted
   * between server layers, where a gaia-ID representation may be sufficient and there is no need
   * for a textual fallback. In such a case, it would be valid and useful - though not required -
   * for servers to compute and populate a fallback on the serving path.
   * @param text text or {@code null} for none
   */
  public SocialCommonSegment setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * Type of Segment.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of Segment.
   * @param type type or {@code null} for none
   */
  public SocialCommonSegment setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * For USER_MENTION type:
   * @return value or {@code null} for none
   */
  public SocialCommonUserMentionData getUserMentionData() {
    return userMentionData;
  }

  /**
   * For USER_MENTION type:
   * @param userMentionData userMentionData or {@code null} for none
   */
  public SocialCommonSegment setUserMentionData(SocialCommonUserMentionData userMentionData) {
    this.userMentionData = userMentionData;
    return this;
  }

  @Override
  public SocialCommonSegment set(String fieldName, Object value) {
    return (SocialCommonSegment) super.set(fieldName, value);
  }

  @Override
  public SocialCommonSegment clone() {
    return (SocialCommonSegment) super.clone();
  }

}
