/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v2.model;

/**
 * A wrapper around the SQL query statement. This is needed so that the JSON representation of
 * ExecuteSqlQueryRequest has the following format: `{"query":"select *"}`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Query extends com.google.api.client.json.GenericJson {

  /**
   * Sets the limit for the maximum number of rows returned after the query execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxRows;

  /**
   * Required. Sql query to execute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String query;

  /**
   * In the struct, the value corresponds to the value of query parameter and date type corresponds
   * to the date type of the query parameter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QueryParameter> queryParameters;

  /**
   * Sets the number of seconds the driver will wait for a query to execute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long timeout;

  /**
   * Sets the limit for the maximum number of rows returned after the query execution.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxRows() {
    return maxRows;
  }

  /**
   * Sets the limit for the maximum number of rows returned after the query execution.
   * @param maxRows maxRows or {@code null} for none
   */
  public Query setMaxRows(java.lang.Long maxRows) {
    this.maxRows = maxRows;
    return this;
  }

  /**
   * Required. Sql query to execute.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Required. Sql query to execute.
   * @param query query or {@code null} for none
   */
  public Query setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  /**
   * In the struct, the value corresponds to the value of query parameter and date type corresponds
   * to the date type of the query parameter.
   * @return value or {@code null} for none
   */
  public java.util.List<QueryParameter> getQueryParameters() {
    return queryParameters;
  }

  /**
   * In the struct, the value corresponds to the value of query parameter and date type corresponds
   * to the date type of the query parameter.
   * @param queryParameters queryParameters or {@code null} for none
   */
  public Query setQueryParameters(java.util.List<QueryParameter> queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  /**
   * Sets the number of seconds the driver will wait for a query to execute.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTimeout() {
    return timeout;
  }

  /**
   * Sets the number of seconds the driver will wait for a query to execute.
   * @param timeout timeout or {@code null} for none
   */
  public Query setTimeout(java.lang.Long timeout) {
    this.timeout = timeout;
    return this;
  }

  @Override
  public Query set(String fieldName, Object value) {
    return (Query) super.set(fieldName, value);
  }

  @Override
  public Query clone() {
    return (Query) super.clone();
  }

}
