/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.travelimpactmodel.v1.model;

/**
 * Direct flight with emission estimates.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Travel Impact Model API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FlightWithEmissions extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The significance of contrails warming impact compared to the total CO2e emissions
   * impact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contrailsImpactBucket;

  /**
   * Optional. Metadata about the EASA Flight Emissions Label. Only set when the emissions data
   * source is EASA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EasaLabelMetadata easaLabelMetadata;

  /**
   * Optional. Per-passenger emission estimate numbers. Will not be present if emissions could not
   * be computed. For the list of reasons why emissions could not be computed, see
   * ComputeFlightEmissions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EmissionsGramsPerPax emissionsGramsPerPax;

  /**
   * Required. Matches the flight identifiers in the request. Note: all IATA codes are capitalized.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Flight flight;

  /**
   * Optional. The source of the emissions data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Optional. The significance of contrails warming impact compared to the total CO2e emissions
   * impact.
   * @return value or {@code null} for none
   */
  public java.lang.String getContrailsImpactBucket() {
    return contrailsImpactBucket;
  }

  /**
   * Optional. The significance of contrails warming impact compared to the total CO2e emissions
   * impact.
   * @param contrailsImpactBucket contrailsImpactBucket or {@code null} for none
   */
  public FlightWithEmissions setContrailsImpactBucket(java.lang.String contrailsImpactBucket) {
    this.contrailsImpactBucket = contrailsImpactBucket;
    return this;
  }

  /**
   * Optional. Metadata about the EASA Flight Emissions Label. Only set when the emissions data
   * source is EASA.
   * @return value or {@code null} for none
   */
  public EasaLabelMetadata getEasaLabelMetadata() {
    return easaLabelMetadata;
  }

  /**
   * Optional. Metadata about the EASA Flight Emissions Label. Only set when the emissions data
   * source is EASA.
   * @param easaLabelMetadata easaLabelMetadata or {@code null} for none
   */
  public FlightWithEmissions setEasaLabelMetadata(EasaLabelMetadata easaLabelMetadata) {
    this.easaLabelMetadata = easaLabelMetadata;
    return this;
  }

  /**
   * Optional. Per-passenger emission estimate numbers. Will not be present if emissions could not
   * be computed. For the list of reasons why emissions could not be computed, see
   * ComputeFlightEmissions.
   * @return value or {@code null} for none
   */
  public EmissionsGramsPerPax getEmissionsGramsPerPax() {
    return emissionsGramsPerPax;
  }

  /**
   * Optional. Per-passenger emission estimate numbers. Will not be present if emissions could not
   * be computed. For the list of reasons why emissions could not be computed, see
   * ComputeFlightEmissions.
   * @param emissionsGramsPerPax emissionsGramsPerPax or {@code null} for none
   */
  public FlightWithEmissions setEmissionsGramsPerPax(EmissionsGramsPerPax emissionsGramsPerPax) {
    this.emissionsGramsPerPax = emissionsGramsPerPax;
    return this;
  }

  /**
   * Required. Matches the flight identifiers in the request. Note: all IATA codes are capitalized.
   * @return value or {@code null} for none
   */
  public Flight getFlight() {
    return flight;
  }

  /**
   * Required. Matches the flight identifiers in the request. Note: all IATA codes are capitalized.
   * @param flight flight or {@code null} for none
   */
  public FlightWithEmissions setFlight(Flight flight) {
    this.flight = flight;
    return this;
  }

  /**
   * Optional. The source of the emissions data.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Optional. The source of the emissions data.
   * @param source source or {@code null} for none
   */
  public FlightWithEmissions setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public FlightWithEmissions set(String fieldName, Object value) {
    return (FlightWithEmissions) super.set(fieldName, value);
  }

  @Override
  public FlightWithEmissions clone() {
    return (FlightWithEmissions) super.clone();
  }

}
