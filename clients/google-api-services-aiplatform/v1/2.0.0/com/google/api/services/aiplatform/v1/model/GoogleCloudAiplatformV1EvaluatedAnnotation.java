/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * True positive, false positive, or false negative. EvaluatedAnnotation is only available under
 * ModelEvaluationSlice with slice of `annotationSpec` dimension.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1EvaluatedAnnotation extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Object dataItemPayload;

  /**
   * Annotations of model error analysis results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> errorAnalysisAnnotations;

  static {
    // hack to force ProGuard to consider GoogleCloudAiplatformV1ErrorAnalysisAnnotation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudAiplatformV1ErrorAnalysisAnnotation.class);
  }

  /**
   * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The
   * EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String evaluatedDataItemViewId;

  /**
   * Explanations of predictions. Each element of the explanations indicates the explanation for one
   * explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation
   * object corresponds to the predictions list. For example, the second element in the attributions
   * list explains the second element in the predictions list.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> explanations;

  /**
   * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the
   * Model is evaluated on. For true positive, there is one and only one ground truth annotation,
   * which matches the only prediction in predictions. For false positive, there are zero or more
   * ground truth annotations that are similar to the only prediction in predictions, but not enough
   * for a match. For false negative, there is one and only one ground truth annotation, which
   * doesn't match any predictions created by the model. The schema of the ground truth is stored in
   * ModelEvaluation.annotation_schema_uri
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> groundTruths;

  /**
   * Output only. The model predicted annotations. For true positive, there is one and only one
   * prediction, which matches the only one ground truth annotation in ground_truths. For false
   * positive, there is one and only one prediction, which doesn't match any ground truth annotation
   * of the corresponding data_item_view_id. For false negative, there are zero or more predictions
   * which are similar to the only ground truth annotation in ground_truths but not enough for a
   * match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> predictions;

  /**
   * Output only. Type of the EvaluatedAnnotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
   * @return value or {@code null} for none
   */
  public java.lang.Object getDataItemPayload() {
    return dataItemPayload;
  }

  /**
   * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
   * @param dataItemPayload dataItemPayload or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setDataItemPayload(java.lang.Object dataItemPayload) {
    this.dataItemPayload = dataItemPayload;
    return this;
  }

  /**
   * Annotations of model error analysis results.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> getErrorAnalysisAnnotations() {
    return errorAnalysisAnnotations;
  }

  /**
   * Annotations of model error analysis results.
   * @param errorAnalysisAnnotations errorAnalysisAnnotations or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setErrorAnalysisAnnotations(java.util.List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> errorAnalysisAnnotations) {
    this.errorAnalysisAnnotations = errorAnalysisAnnotations;
    return this;
  }

  /**
   * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The
   * EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
   * @return value or {@code null} for none
   */
  public java.lang.String getEvaluatedDataItemViewId() {
    return evaluatedDataItemViewId;
  }

  /**
   * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The
   * EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
   * @param evaluatedDataItemViewId evaluatedDataItemViewId or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setEvaluatedDataItemViewId(java.lang.String evaluatedDataItemViewId) {
    this.evaluatedDataItemViewId = evaluatedDataItemViewId;
    return this;
  }

  /**
   * Explanations of predictions. Each element of the explanations indicates the explanation for one
   * explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation
   * object corresponds to the predictions list. For example, the second element in the attributions
   * list explains the second element in the predictions list.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> getExplanations() {
    return explanations;
  }

  /**
   * Explanations of predictions. Each element of the explanations indicates the explanation for one
   * explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation
   * object corresponds to the predictions list. For example, the second element in the attributions
   * list explains the second element in the predictions list.
   * @param explanations explanations or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setExplanations(java.util.List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> explanations) {
    this.explanations = explanations;
    return this;
  }

  /**
   * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the
   * Model is evaluated on. For true positive, there is one and only one ground truth annotation,
   * which matches the only prediction in predictions. For false positive, there are zero or more
   * ground truth annotations that are similar to the only prediction in predictions, but not enough
   * for a match. For false negative, there is one and only one ground truth annotation, which
   * doesn't match any predictions created by the model. The schema of the ground truth is stored in
   * ModelEvaluation.annotation_schema_uri
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getGroundTruths() {
    return groundTruths;
  }

  /**
   * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the
   * Model is evaluated on. For true positive, there is one and only one ground truth annotation,
   * which matches the only prediction in predictions. For false positive, there are zero or more
   * ground truth annotations that are similar to the only prediction in predictions, but not enough
   * for a match. For false negative, there is one and only one ground truth annotation, which
   * doesn't match any predictions created by the model. The schema of the ground truth is stored in
   * ModelEvaluation.annotation_schema_uri
   * @param groundTruths groundTruths or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setGroundTruths(java.util.List<java.lang.Object> groundTruths) {
    this.groundTruths = groundTruths;
    return this;
  }

  /**
   * Output only. The model predicted annotations. For true positive, there is one and only one
   * prediction, which matches the only one ground truth annotation in ground_truths. For false
   * positive, there is one and only one prediction, which doesn't match any ground truth annotation
   * of the corresponding data_item_view_id. For false negative, there are zero or more predictions
   * which are similar to the only ground truth annotation in ground_truths but not enough for a
   * match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getPredictions() {
    return predictions;
  }

  /**
   * Output only. The model predicted annotations. For true positive, there is one and only one
   * prediction, which matches the only one ground truth annotation in ground_truths. For false
   * positive, there is one and only one prediction, which doesn't match any ground truth annotation
   * of the corresponding data_item_view_id. For false negative, there are zero or more predictions
   * which are similar to the only ground truth annotation in ground_truths but not enough for a
   * match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
   * @param predictions predictions or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setPredictions(java.util.List<java.lang.Object> predictions) {
    this.predictions = predictions;
    return this;
  }

  /**
   * Output only. Type of the EvaluatedAnnotation.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Output only. Type of the EvaluatedAnnotation.
   * @param type type or {@code null} for none
   */
  public GoogleCloudAiplatformV1EvaluatedAnnotation setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1EvaluatedAnnotation set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1EvaluatedAnnotation) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1EvaluatedAnnotation clone() {
    return (GoogleCloudAiplatformV1EvaluatedAnnotation) super.clone();
  }

}
