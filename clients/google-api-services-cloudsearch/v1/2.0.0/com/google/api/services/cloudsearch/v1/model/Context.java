/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Model definition for Context.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Context extends com.google.api.client.json.GenericJson {

  /**
   * [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> app;

  /**
   * [Optional] Day of week when the card should be shown, where 0 is Monday.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> dayOfWeek;

  /**
   * [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing,
   * end_date_sec will be set to Jan 1st, 2100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long endDateSec;

  /**
   * [Optional] End time in seconds, within a day, when the card should stop being shown if it's
   * within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600
   * sec/hour), i.e., midnight next day.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long endDayOffsetSec;

  /**
   * [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If
   * missing, the card is going to show to clients regardless of their locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locale;

  /**
   * [Optional] Text-free locations where the card should be shown. This is expected to match the
   * user's location in focus. If no location is specified, the card will be shown for any location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> location;

  /**
   * [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact
   * case-insensitive queries that will trigger the Answer or RHS card.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> query;

  /**
   * [Optional] Date (in seconds since epoch) when the card should start being shown. If missing,
   * start_date_sec will be Jan 1st, 1970 UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long startDateSec;

  /**
   * [Optional] Start time in seconds, within a day, when the card should be shown if it's within
   * [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long startDayOffsetSec;

  /**
   * [Optional] Surface where the card should be shown in. If missing, the card will be shown in any
   * surface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> surface;

  /**
   * [Required] Type of the card (homepage, Answer or RHS).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> type;

  /**
   * [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getApp() {
    return app;
  }

  /**
   * [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
   * @param app app or {@code null} for none
   */
  public Context setApp(java.util.List<java.lang.String> app) {
    this.app = app;
    return this;
  }

  /**
   * [Optional] Day of week when the card should be shown, where 0 is Monday.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDayOfWeek() {
    return dayOfWeek;
  }

  /**
   * [Optional] Day of week when the card should be shown, where 0 is Monday.
   * @param dayOfWeek dayOfWeek or {@code null} for none
   */
  public Context setDayOfWeek(java.util.List<java.lang.Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing,
   * end_date_sec will be set to Jan 1st, 2100.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEndDateSec() {
    return endDateSec;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing,
   * end_date_sec will be set to Jan 1st, 2100.
   * @param endDateSec endDateSec or {@code null} for none
   */
  public Context setEndDateSec(java.lang.Long endDateSec) {
    this.endDateSec = endDateSec;
    return this;
  }

  /**
   * [Optional] End time in seconds, within a day, when the card should stop being shown if it's
   * within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600
   * sec/hour), i.e., midnight next day.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEndDayOffsetSec() {
    return endDayOffsetSec;
  }

  /**
   * [Optional] End time in seconds, within a day, when the card should stop being shown if it's
   * within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600
   * sec/hour), i.e., midnight next day.
   * @param endDayOffsetSec endDayOffsetSec or {@code null} for none
   */
  public Context setEndDayOffsetSec(java.lang.Long endDayOffsetSec) {
    this.endDayOffsetSec = endDayOffsetSec;
    return this;
  }

  /**
   * [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If
   * missing, the card is going to show to clients regardless of their locale.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocale() {
    return locale;
  }

  /**
   * [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If
   * missing, the card is going to show to clients regardless of their locale.
   * @param locale locale or {@code null} for none
   */
  public Context setLocale(java.util.List<java.lang.String> locale) {
    this.locale = locale;
    return this;
  }

  /**
   * [Optional] Text-free locations where the card should be shown. This is expected to match the
   * user's location in focus. If no location is specified, the card will be shown for any location.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocation() {
    return location;
  }

  /**
   * [Optional] Text-free locations where the card should be shown. This is expected to match the
   * user's location in focus. If no location is specified, the card will be shown for any location.
   * @param location location or {@code null} for none
   */
  public Context setLocation(java.util.List<java.lang.String> location) {
    this.location = location;
    return this;
  }

  /**
   * [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact
   * case-insensitive queries that will trigger the Answer or RHS card.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getQuery() {
    return query;
  }

  /**
   * [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact
   * case-insensitive queries that will trigger the Answer or RHS card.
   * @param query query or {@code null} for none
   */
  public Context setQuery(java.util.List<java.lang.String> query) {
    this.query = query;
    return this;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should start being shown. If missing,
   * start_date_sec will be Jan 1st, 1970 UTC.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStartDateSec() {
    return startDateSec;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should start being shown. If missing,
   * start_date_sec will be Jan 1st, 1970 UTC.
   * @param startDateSec startDateSec or {@code null} for none
   */
  public Context setStartDateSec(java.lang.Long startDateSec) {
    this.startDateSec = startDateSec;
    return this;
  }

  /**
   * [Optional] Start time in seconds, within a day, when the card should be shown if it's within
   * [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStartDayOffsetSec() {
    return startDayOffsetSec;
  }

  /**
   * [Optional] Start time in seconds, within a day, when the card should be shown if it's within
   * [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
   * @param startDayOffsetSec startDayOffsetSec or {@code null} for none
   */
  public Context setStartDayOffsetSec(java.lang.Long startDayOffsetSec) {
    this.startDayOffsetSec = startDayOffsetSec;
    return this;
  }

  /**
   * [Optional] Surface where the card should be shown in. If missing, the card will be shown in any
   * surface.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSurface() {
    return surface;
  }

  /**
   * [Optional] Surface where the card should be shown in. If missing, the card will be shown in any
   * surface.
   * @param surface surface or {@code null} for none
   */
  public Context setSurface(java.util.List<java.lang.String> surface) {
    this.surface = surface;
    return this;
  }

  /**
   * [Required] Type of the card (homepage, Answer or RHS).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getType() {
    return type;
  }

  /**
   * [Required] Type of the card (homepage, Answer or RHS).
   * @param type type or {@code null} for none
   */
  public Context setType(java.util.List<java.lang.String> type) {
    this.type = type;
    return this;
  }

  @Override
  public Context set(String fieldName, Object value) {
    return (Context) super.set(fieldName, value);
  }

  @Override
  public Context clone() {
    return (Context) super.clone();
  }

}
