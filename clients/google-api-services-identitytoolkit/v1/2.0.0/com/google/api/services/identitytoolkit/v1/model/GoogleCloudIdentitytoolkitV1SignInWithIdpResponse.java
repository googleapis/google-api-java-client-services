/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.identitytoolkit.v1.model;

/**
 * Response message for SignInWithIdp.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity Toolkit API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudIdentitytoolkitV1SignInWithIdpResponse extends com.google.api.client.json.GenericJson {

  /**
   * The opaque string set in CreateAuthUri that is used to maintain contextual information between
   * the authentication request and the callback from the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String context;

  /**
   * The date of birth for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dateOfBirth;

  /**
   * The display name for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The email address of the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String email;

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * but linked to a different account at the same IdP. Only present if the "One account per email
   * address" setting is enabled and the email address at the IdP is verified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean emailRecycled;

  /**
   * Whether the user account's email address is verified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean emailVerified;

  /**
   * The error message returned if `return_idp_credential` is set to `true` and either the
   * `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS` error is encountered. This field's value
   * is either `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String errorMessage;

  /**
   * The number of seconds until the Identity Platform ID token expires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long expiresIn;

  /**
   * The user's account ID at the IdP. Always present in the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String federatedId;

  /**
   * The first name for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firstName;

  /**
   * The full name for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fullName;

  /**
   * An Identity Platform ID token for the authenticated user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String idToken;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inputEmail;

  /**
   * Whether or not a new Identity Platform account was created for the authenticated user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNewUser;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The language preference for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * The last name for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lastName;

  /**
   * The ID of the authenticated Identity Platform user. Always present in the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String localId;

  /**
   * Info on which multi-factor authentication providers are enabled for the account. Present if the
   * user needs to complete the sign-in using multi-factor authentication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudIdentitytoolkitV1MfaEnrollment> mfaInfo;

  static {
    // hack to force ProGuard to consider GoogleCloudIdentitytoolkitV1MfaEnrollment used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudIdentitytoolkitV1MfaEnrollment.class);
  }

  /**
   * An opaque string that functions as proof that the user has successfully passed the first factor
   * authentication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mfaPendingCredential;

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * as the current account signed in at the IdP, and the account's email addresss is not verified
   * at the IdP. The user will need to sign in to the existing Identity Platform account and then
   * link the current credential from the IdP to it. Only present if the "One account per email
   * address" setting is enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean needConfirmation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean needEmail;

  /**
   * The nickname for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nickName;

  /**
   * The OAuth access token from the IdP, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oauthAccessToken;

  /**
   * The OAuth 2.0 authorization code, if available. Only present for the Google provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oauthAuthorizationCode;

  /**
   * The number of seconds until the OAuth access token from the IdP expires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer oauthExpireIn;

  /**
   * The OpenID Connect ID token from the IdP, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oauthIdToken;

  /**
   * The OAuth 2.0 refresh token from the IdP, if available and `return_refresh_token` is set to
   * `true`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oauthRefreshToken;

  /**
   * The OAuth 1.0 token secret from the IdP, if available. Only present for the Twitter provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oauthTokenSecret;

  /**
   * The main (top-level) email address of the user's Identity Platform account, if different from
   * the email address at the IdP. Only present if the "One account per email address" setting is
   * enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originalEmail;

  /**
   * An opaque string that can be used as a credential from the IdP the user is signing into. The
   * pending token obtained here can be set in a future SignInWithIdp request to sign the same user
   * in with the IdP again.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pendingToken;

  /**
   * The URL of the user's profile picture at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String photoUrl;

  /**
   * The provider ID of the IdP that the user is signing in to. Always present in the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerId;

  /**
   * The stringified JSON response containing all the data corresponding to the user's account at
   * the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawUserInfo;

  /**
   * An Identity Platform refresh token for the authenticated user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refreshToken;

  /**
   * The screen name for the user's account at the Twitter IdP or the login name for the user's
   * account at the GitHub IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String screenName;

  /**
   * The value of the `tenant_id` field in the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tenantId;

  /**
   * The time zone for the user's account at the IdP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timeZone;

  /**
   * A list of provider IDs that the user can sign in to in order to resolve a `need_confirmation`
   * error. Only present if `need_confirmation` is set to `true`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> verifiedProvider;

  /**
   * The opaque string set in CreateAuthUri that is used to maintain contextual information between
   * the authentication request and the callback from the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getContext() {
    return context;
  }

  /**
   * The opaque string set in CreateAuthUri that is used to maintain contextual information between
   * the authentication request and the callback from the IdP.
   * @param context context or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setContext(java.lang.String context) {
    this.context = context;
    return this;
  }

  /**
   * The date of birth for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getDateOfBirth() {
    return dateOfBirth;
  }

  /**
   * The date of birth for the user's account at the IdP.
   * @param dateOfBirth dateOfBirth or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setDateOfBirth(java.lang.String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The display name for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name for the user's account at the IdP.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The email address of the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * The email address of the user's account at the IdP.
   * @param email email or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * but linked to a different account at the same IdP. Only present if the "One account per email
   * address" setting is enabled and the email address at the IdP is verified.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEmailRecycled() {
    return emailRecycled;
  }

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * but linked to a different account at the same IdP. Only present if the "One account per email
   * address" setting is enabled and the email address at the IdP is verified.
   * @param emailRecycled emailRecycled or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setEmailRecycled(java.lang.Boolean emailRecycled) {
    this.emailRecycled = emailRecycled;
    return this;
  }

  /**
   * Whether the user account's email address is verified.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEmailVerified() {
    return emailVerified;
  }

  /**
   * Whether the user account's email address is verified.
   * @param emailVerified emailVerified or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setEmailVerified(java.lang.Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * The error message returned if `return_idp_credential` is set to `true` and either the
   * `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS` error is encountered. This field's value
   * is either `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS`.
   * @return value or {@code null} for none
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }

  /**
   * The error message returned if `return_idp_credential` is set to `true` and either the
   * `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS` error is encountered. This field's value
   * is either `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS`.
   * @param errorMessage errorMessage or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The number of seconds until the Identity Platform ID token expires.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExpiresIn() {
    return expiresIn;
  }

  /**
   * The number of seconds until the Identity Platform ID token expires.
   * @param expiresIn expiresIn or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setExpiresIn(java.lang.Long expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * The user's account ID at the IdP. Always present in the response.
   * @return value or {@code null} for none
   */
  public java.lang.String getFederatedId() {
    return federatedId;
  }

  /**
   * The user's account ID at the IdP. Always present in the response.
   * @param federatedId federatedId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setFederatedId(java.lang.String federatedId) {
    this.federatedId = federatedId;
    return this;
  }

  /**
   * The first name for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getFirstName() {
    return firstName;
  }

  /**
   * The first name for the user's account at the IdP.
   * @param firstName firstName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setFirstName(java.lang.String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The full name for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getFullName() {
    return fullName;
  }

  /**
   * The full name for the user's account at the IdP.
   * @param fullName fullName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setFullName(java.lang.String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * An Identity Platform ID token for the authenticated user.
   * @return value or {@code null} for none
   */
  public java.lang.String getIdToken() {
    return idToken;
  }

  /**
   * An Identity Platform ID token for the authenticated user.
   * @param idToken idToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setIdToken(java.lang.String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getInputEmail() {
    return inputEmail;
  }

  /**
   * @param inputEmail inputEmail or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setInputEmail(java.lang.String inputEmail) {
    this.inputEmail = inputEmail;
    return this;
  }

  /**
   * Whether or not a new Identity Platform account was created for the authenticated user.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNewUser() {
    return isNewUser;
  }

  /**
   * Whether or not a new Identity Platform account was created for the authenticated user.
   * @param isNewUser isNewUser or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setIsNewUser(java.lang.Boolean isNewUser) {
    this.isNewUser = isNewUser;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * @param kind kind or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The language preference for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * The language preference for the user's account at the IdP.
   * @param language language or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * The last name for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getLastName() {
    return lastName;
  }

  /**
   * The last name for the user's account at the IdP.
   * @param lastName lastName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setLastName(java.lang.String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The ID of the authenticated Identity Platform user. Always present in the response.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocalId() {
    return localId;
  }

  /**
   * The ID of the authenticated Identity Platform user. Always present in the response.
   * @param localId localId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setLocalId(java.lang.String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Info on which multi-factor authentication providers are enabled for the account. Present if the
   * user needs to complete the sign-in using multi-factor authentication.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudIdentitytoolkitV1MfaEnrollment> getMfaInfo() {
    return mfaInfo;
  }

  /**
   * Info on which multi-factor authentication providers are enabled for the account. Present if the
   * user needs to complete the sign-in using multi-factor authentication.
   * @param mfaInfo mfaInfo or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setMfaInfo(java.util.List<GoogleCloudIdentitytoolkitV1MfaEnrollment> mfaInfo) {
    this.mfaInfo = mfaInfo;
    return this;
  }

  /**
   * An opaque string that functions as proof that the user has successfully passed the first factor
   * authentication.
   * @return value or {@code null} for none
   */
  public java.lang.String getMfaPendingCredential() {
    return mfaPendingCredential;
  }

  /**
   * An opaque string that functions as proof that the user has successfully passed the first factor
   * authentication.
   * @param mfaPendingCredential mfaPendingCredential or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setMfaPendingCredential(java.lang.String mfaPendingCredential) {
    this.mfaPendingCredential = mfaPendingCredential;
    return this;
  }

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * as the current account signed in at the IdP, and the account's email addresss is not verified
   * at the IdP. The user will need to sign in to the existing Identity Platform account and then
   * link the current credential from the IdP to it. Only present if the "One account per email
   * address" setting is enabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNeedConfirmation() {
    return needConfirmation;
  }

  /**
   * Whether or not there is an existing Identity Platform user account with the same email address
   * as the current account signed in at the IdP, and the account's email addresss is not verified
   * at the IdP. The user will need to sign in to the existing Identity Platform account and then
   * link the current credential from the IdP to it. Only present if the "One account per email
   * address" setting is enabled.
   * @param needConfirmation needConfirmation or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setNeedConfirmation(java.lang.Boolean needConfirmation) {
    this.needConfirmation = needConfirmation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNeedEmail() {
    return needEmail;
  }

  /**
   * @param needEmail needEmail or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setNeedEmail(java.lang.Boolean needEmail) {
    this.needEmail = needEmail;
    return this;
  }

  /**
   * The nickname for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getNickName() {
    return nickName;
  }

  /**
   * The nickname for the user's account at the IdP.
   * @param nickName nickName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setNickName(java.lang.String nickName) {
    this.nickName = nickName;
    return this;
  }

  /**
   * The OAuth access token from the IdP, if available.
   * @return value or {@code null} for none
   */
  public java.lang.String getOauthAccessToken() {
    return oauthAccessToken;
  }

  /**
   * The OAuth access token from the IdP, if available.
   * @param oauthAccessToken oauthAccessToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthAccessToken(java.lang.String oauthAccessToken) {
    this.oauthAccessToken = oauthAccessToken;
    return this;
  }

  /**
   * The OAuth 2.0 authorization code, if available. Only present for the Google provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getOauthAuthorizationCode() {
    return oauthAuthorizationCode;
  }

  /**
   * The OAuth 2.0 authorization code, if available. Only present for the Google provider.
   * @param oauthAuthorizationCode oauthAuthorizationCode or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthAuthorizationCode(java.lang.String oauthAuthorizationCode) {
    this.oauthAuthorizationCode = oauthAuthorizationCode;
    return this;
  }

  /**
   * The number of seconds until the OAuth access token from the IdP expires.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOauthExpireIn() {
    return oauthExpireIn;
  }

  /**
   * The number of seconds until the OAuth access token from the IdP expires.
   * @param oauthExpireIn oauthExpireIn or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthExpireIn(java.lang.Integer oauthExpireIn) {
    this.oauthExpireIn = oauthExpireIn;
    return this;
  }

  /**
   * The OpenID Connect ID token from the IdP, if available.
   * @return value or {@code null} for none
   */
  public java.lang.String getOauthIdToken() {
    return oauthIdToken;
  }

  /**
   * The OpenID Connect ID token from the IdP, if available.
   * @param oauthIdToken oauthIdToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthIdToken(java.lang.String oauthIdToken) {
    this.oauthIdToken = oauthIdToken;
    return this;
  }

  /**
   * The OAuth 2.0 refresh token from the IdP, if available and `return_refresh_token` is set to
   * `true`.
   * @return value or {@code null} for none
   */
  public java.lang.String getOauthRefreshToken() {
    return oauthRefreshToken;
  }

  /**
   * The OAuth 2.0 refresh token from the IdP, if available and `return_refresh_token` is set to
   * `true`.
   * @param oauthRefreshToken oauthRefreshToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthRefreshToken(java.lang.String oauthRefreshToken) {
    this.oauthRefreshToken = oauthRefreshToken;
    return this;
  }

  /**
   * The OAuth 1.0 token secret from the IdP, if available. Only present for the Twitter provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getOauthTokenSecret() {
    return oauthTokenSecret;
  }

  /**
   * The OAuth 1.0 token secret from the IdP, if available. Only present for the Twitter provider.
   * @param oauthTokenSecret oauthTokenSecret or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOauthTokenSecret(java.lang.String oauthTokenSecret) {
    this.oauthTokenSecret = oauthTokenSecret;
    return this;
  }

  /**
   * The main (top-level) email address of the user's Identity Platform account, if different from
   * the email address at the IdP. Only present if the "One account per email address" setting is
   * enabled.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginalEmail() {
    return originalEmail;
  }

  /**
   * The main (top-level) email address of the user's Identity Platform account, if different from
   * the email address at the IdP. Only present if the "One account per email address" setting is
   * enabled.
   * @param originalEmail originalEmail or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setOriginalEmail(java.lang.String originalEmail) {
    this.originalEmail = originalEmail;
    return this;
  }

  /**
   * An opaque string that can be used as a credential from the IdP the user is signing into. The
   * pending token obtained here can be set in a future SignInWithIdp request to sign the same user
   * in with the IdP again.
   * @return value or {@code null} for none
   */
  public java.lang.String getPendingToken() {
    return pendingToken;
  }

  /**
   * An opaque string that can be used as a credential from the IdP the user is signing into. The
   * pending token obtained here can be set in a future SignInWithIdp request to sign the same user
   * in with the IdP again.
   * @param pendingToken pendingToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setPendingToken(java.lang.String pendingToken) {
    this.pendingToken = pendingToken;
    return this;
  }

  /**
   * The URL of the user's profile picture at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhotoUrl() {
    return photoUrl;
  }

  /**
   * The URL of the user's profile picture at the IdP.
   * @param photoUrl photoUrl or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setPhotoUrl(java.lang.String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The provider ID of the IdP that the user is signing in to. Always present in the response.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderId() {
    return providerId;
  }

  /**
   * The provider ID of the IdP that the user is signing in to. Always present in the response.
   * @param providerId providerId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setProviderId(java.lang.String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The stringified JSON response containing all the data corresponding to the user's account at
   * the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getRawUserInfo() {
    return rawUserInfo;
  }

  /**
   * The stringified JSON response containing all the data corresponding to the user's account at
   * the IdP.
   * @param rawUserInfo rawUserInfo or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setRawUserInfo(java.lang.String rawUserInfo) {
    this.rawUserInfo = rawUserInfo;
    return this;
  }

  /**
   * An Identity Platform refresh token for the authenticated user.
   * @return value or {@code null} for none
   */
  public java.lang.String getRefreshToken() {
    return refreshToken;
  }

  /**
   * An Identity Platform refresh token for the authenticated user.
   * @param refreshToken refreshToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setRefreshToken(java.lang.String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * The screen name for the user's account at the Twitter IdP or the login name for the user's
   * account at the GitHub IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getScreenName() {
    return screenName;
  }

  /**
   * The screen name for the user's account at the Twitter IdP or the login name for the user's
   * account at the GitHub IdP.
   * @param screenName screenName or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setScreenName(java.lang.String screenName) {
    this.screenName = screenName;
    return this;
  }

  /**
   * The value of the `tenant_id` field in the request.
   * @return value or {@code null} for none
   */
  public java.lang.String getTenantId() {
    return tenantId;
  }

  /**
   * The value of the `tenant_id` field in the request.
   * @param tenantId tenantId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setTenantId(java.lang.String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The time zone for the user's account at the IdP.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }

  /**
   * The time zone for the user's account at the IdP.
   * @param timeZone timeZone or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setTimeZone(java.lang.String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * A list of provider IDs that the user can sign in to in order to resolve a `need_confirmation`
   * error. Only present if `need_confirmation` is set to `true`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVerifiedProvider() {
    return verifiedProvider;
  }

  /**
   * A list of provider IDs that the user can sign in to in order to resolve a `need_confirmation`
   * error. Only present if `need_confirmation` is set to `true`.
   * @param verifiedProvider verifiedProvider or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse setVerifiedProvider(java.util.List<java.lang.String> verifiedProvider) {
    this.verifiedProvider = verifiedProvider;
    return this;
  }

  @Override
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse set(String fieldName, Object value) {
    return (GoogleCloudIdentitytoolkitV1SignInWithIdpResponse) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudIdentitytoolkitV1SignInWithIdpResponse clone() {
    return (GoogleCloudIdentitytoolkitV1SignInWithIdpResponse) super.clone();
  }

}
