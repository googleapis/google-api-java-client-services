/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v1.model;

/**
 * Preview: A breakdown is an aggregation applied to the measures over a specified column. A
 * breakdown can result in multiple series across a category for the provided measure. This is a
 * preview feature and may be subject to change before final release.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Breakdown extends com.google.api.client.json.GenericJson {

  /**
   * Required. The Aggregation function is applied across all data in each breakdown created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AggregationFunction aggregationFunction;

  /**
   * Required. The name of the column in the dataset containing the breakdown values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String column;

  /**
   * Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are
   * applied. The list of breakdowns is dependent on the value of the sort_order field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * Required. The sort order is applied to the values of the breakdown column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sortOrder;

  /**
   * Required. The Aggregation function is applied across all data in each breakdown created.
   * @return value or {@code null} for none
   */
  public AggregationFunction getAggregationFunction() {
    return aggregationFunction;
  }

  /**
   * Required. The Aggregation function is applied across all data in each breakdown created.
   * @param aggregationFunction aggregationFunction or {@code null} for none
   */
  public Breakdown setAggregationFunction(AggregationFunction aggregationFunction) {
    this.aggregationFunction = aggregationFunction;
    return this;
  }

  /**
   * Required. The name of the column in the dataset containing the breakdown values.
   * @return value or {@code null} for none
   */
  public java.lang.String getColumn() {
    return column;
  }

  /**
   * Required. The name of the column in the dataset containing the breakdown values.
   * @param column column or {@code null} for none
   */
  public Breakdown setColumn(java.lang.String column) {
    this.column = column;
    return this;
  }

  /**
   * Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are
   * applied. The list of breakdowns is dependent on the value of the sort_order field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are
   * applied. The list of breakdowns is dependent on the value of the sort_order field.
   * @param limit limit or {@code null} for none
   */
  public Breakdown setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Required. The sort order is applied to the values of the breakdown column.
   * @return value or {@code null} for none
   */
  public java.lang.String getSortOrder() {
    return sortOrder;
  }

  /**
   * Required. The sort order is applied to the values of the breakdown column.
   * @param sortOrder sortOrder or {@code null} for none
   */
  public Breakdown setSortOrder(java.lang.String sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  @Override
  public Breakdown set(String fieldName, Object value) {
    return (Breakdown) super.set(fieldName, value);
  }

  @Override
  public Breakdown clone() {
    return (Breakdown) super.clone();
  }

}
