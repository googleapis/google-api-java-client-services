/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1alpha1.model;

/**
 * ImageImportJob describes the progress and result of an image import.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageImportJob extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The path to the Cloud Storage file from which the image should be imported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloudStorageUri;

  /**
   * Output only. The time the image import was created (as an API call, not when it was actually
   * created in the target).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The resource paths of the resources created by the image import job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> createdResources;

  /**
   * Output only. Target details used to import a disk image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DiskImageTargetDetails diskImageTargetDetails;

  /**
   * Output only. The time the image import was ended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * Output only. Provides details on the error that led to the image import state in case of an
   * error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Status> errors;

  /**
   * Output only. The resource path of the ImageImportJob.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The state of the image import.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The image import steps list representing its progress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageImportStep> steps;

  /**
   * Output only. Warnings that occurred during the image import.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MigrationWarning> warnings;

  /**
   * Output only. The path to the Cloud Storage file from which the image should be imported.
   * @return value or {@code null} for none
   */
  public java.lang.String getCloudStorageUri() {
    return cloudStorageUri;
  }

  /**
   * Output only. The path to the Cloud Storage file from which the image should be imported.
   * @param cloudStorageUri cloudStorageUri or {@code null} for none
   */
  public ImageImportJob setCloudStorageUri(java.lang.String cloudStorageUri) {
    this.cloudStorageUri = cloudStorageUri;
    return this;
  }

  /**
   * Output only. The time the image import was created (as an API call, not when it was actually
   * created in the target).
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time the image import was created (as an API call, not when it was actually
   * created in the target).
   * @param createTime createTime or {@code null} for none
   */
  public ImageImportJob setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The resource paths of the resources created by the image import job.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCreatedResources() {
    return createdResources;
  }

  /**
   * Output only. The resource paths of the resources created by the image import job.
   * @param createdResources createdResources or {@code null} for none
   */
  public ImageImportJob setCreatedResources(java.util.List<java.lang.String> createdResources) {
    this.createdResources = createdResources;
    return this;
  }

  /**
   * Output only. Target details used to import a disk image.
   * @return value or {@code null} for none
   */
  public DiskImageTargetDetails getDiskImageTargetDetails() {
    return diskImageTargetDetails;
  }

  /**
   * Output only. Target details used to import a disk image.
   * @param diskImageTargetDetails diskImageTargetDetails or {@code null} for none
   */
  public ImageImportJob setDiskImageTargetDetails(DiskImageTargetDetails diskImageTargetDetails) {
    this.diskImageTargetDetails = diskImageTargetDetails;
    return this;
  }

  /**
   * Output only. The time the image import was ended.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * Output only. The time the image import was ended.
   * @param endTime endTime or {@code null} for none
   */
  public ImageImportJob setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Output only. Provides details on the error that led to the image import state in case of an
   * error.
   * @return value or {@code null} for none
   */
  public java.util.List<Status> getErrors() {
    return errors;
  }

  /**
   * Output only. Provides details on the error that led to the image import state in case of an
   * error.
   * @param errors errors or {@code null} for none
   */
  public ImageImportJob setErrors(java.util.List<Status> errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Output only. The resource path of the ImageImportJob.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource path of the ImageImportJob.
   * @param name name or {@code null} for none
   */
  public ImageImportJob setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The state of the image import.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the image import.
   * @param state state or {@code null} for none
   */
  public ImageImportJob setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The image import steps list representing its progress.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageImportStep> getSteps() {
    return steps;
  }

  /**
   * Output only. The image import steps list representing its progress.
   * @param steps steps or {@code null} for none
   */
  public ImageImportJob setSteps(java.util.List<ImageImportStep> steps) {
    this.steps = steps;
    return this;
  }

  /**
   * Output only. Warnings that occurred during the image import.
   * @return value or {@code null} for none
   */
  public java.util.List<MigrationWarning> getWarnings() {
    return warnings;
  }

  /**
   * Output only. Warnings that occurred during the image import.
   * @param warnings warnings or {@code null} for none
   */
  public ImageImportJob setWarnings(java.util.List<MigrationWarning> warnings) {
    this.warnings = warnings;
    return this;
  }

  @Override
  public ImageImportJob set(String fieldName, Object value) {
    return (ImageImportJob) super.set(fieldName, value);
  }

  @Override
  public ImageImportJob clone() {
    return (ImageImportJob) super.clone();
  }

}
