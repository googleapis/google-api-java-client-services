/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v1.model;

/**
 * A single tile in the mosaic. The placement and size of the tile are configurable.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Tile extends com.google.api.client.json.GenericJson {

  /**
   * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * The informational widget contained in the tile. For example an XyChart.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Widget widget;

  /**
   * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid.
   * Tiles must be contained within the specified number of columns. x_pos cannot be negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer xPos;

  /**
   * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid.
   * y_pos cannot be negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer yPos;

  /**
   * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
   * @param height height or {@code null} for none
   */
  public Tile setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The informational widget contained in the tile. For example an XyChart.
   * @return value or {@code null} for none
   */
  public Widget getWidget() {
    return widget;
  }

  /**
   * The informational widget contained in the tile. For example an XyChart.
   * @param widget widget or {@code null} for none
   */
  public Tile setWidget(Widget widget) {
    this.widget = widget;
    return this;
  }

  /**
   * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
   * @param width width or {@code null} for none
   */
  public Tile setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid.
   * Tiles must be contained within the specified number of columns. x_pos cannot be negative.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getXPos() {
    return xPos;
  }

  /**
   * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid.
   * Tiles must be contained within the specified number of columns. x_pos cannot be negative.
   * @param xPos xPos or {@code null} for none
   */
  public Tile setXPos(java.lang.Integer xPos) {
    this.xPos = xPos;
    return this;
  }

  /**
   * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid.
   * y_pos cannot be negative.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYPos() {
    return yPos;
  }

  /**
   * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid.
   * y_pos cannot be negative.
   * @param yPos yPos or {@code null} for none
   */
  public Tile setYPos(java.lang.Integer yPos) {
    this.yPos = yPos;
    return this;
  }

  @Override
  public Tile set(String fieldName, Object value) {
    return (Tile) super.set(fieldName, value);
  }

  @Override
  public Tile clone() {
    return (Tile) super.clone();
  }

}
