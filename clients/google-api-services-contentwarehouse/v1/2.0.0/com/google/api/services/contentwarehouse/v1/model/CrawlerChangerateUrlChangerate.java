/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The next available field number is 22. To access the best estimate of change period, please use
 * GetChangePeriod in predict-change-rate.h to select between this and other change period estimates
 * below.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CrawlerChangerateUrlChangerate extends com.google.api.client.json.GenericJson {

  /**
   * The approximated posterior distribution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CrawlerChangerateMultipleComponentDistribution approximatedPosterior;

  /**
   * The "significance" of the average change we saw of this document (from 0 to 1). Influenced by
   * content changes. This can be used for prioritizing the crawl (higher significance first).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double averageChangeSignificance;

  /**
   * / The classic changerate estimation. / The classic estimate of change period (in seconds). It
   * is computed by inserted a "fake" change and no-change interval as a prior distribution. This
   * field is generally not used and should NOT be accessed directly. See above for correct method
   * for determining the change period estimate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer changeperiod;

  /**
   * The confidence (between 0 and 1) in the changeperiod guess.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double confidence;

  /**
   * / The changerate estimation based on the global prior. / The global-based changeperiod. This is
   * our estimate (in seconds) for the average time between changes. It is computed using the new
   * prior method based on global_based_prior_period and the global_based_prior_strength specified
   * below. This is used for computing pattern priors. Use pattern_based_change_period or
   * changeperiod fields for all other purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer globalBasedChangePeriod;

  /**
   * The 'confidence' of the global-based changeperiod. This is the n-th root of the posterior
   * evaluated at MAP point, where n is the number of history intervals. For now, it is hard to
   * interpret the meaning of the absolute values of 'average' posterior cross different sets of
   * data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double globalBasedChangePeriodConfidence;

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * global_based_change_period. These values are precomputed through an offline analysis and
   * specified via flags.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double globalBasedPriorPeriod;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double globalBasedPriorStrength;

  /**
   * The "significance" of the last change we saw of this document (from 0 to 1). Influenced by
   * content changes, etc. This can be used for prioritizing the crawl (higher significance first).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lastChangeSignificance;

  /**
   * The last time (unix timestamp) we saw a changed copy of the document. Provided iff we have seen
   * the page change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lastChanged;

  /**
   * The last time (unix timestamp) we saw a fetched copy of the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lastFetched;

  /**
   * The number of intervals we've seen for this document (where an interval is two different
   * versions).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numIntervals;

  /**
   * / The changerate estimation based on the pattern prior. / The pattern-based changeperiod. This
   * is our estimate (in seconds) for the average time between changes. It is calculated based on
   * the pattern_based_prior_period and pattern_based_prior_strength below. This quantity will
   * eventually replace the old changeperiod calculation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer patternBasedChangePeriod;

  /**
   * The same as global_based_change_period_confidence, except it is computed using pattern based
   * priors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double patternBasedChangePeriodConfidence;

  /**
   * The lower edge of a confidence interval for the pattern-based change period.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer patternBasedLowerChangePeriod;

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * pattern_based_change_period. These values are calculated in a separate process and looked up
   * based on the URL pattern.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double patternBasedPriorPeriod;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double patternBasedPriorStrength;

  /**
   * The version number of the algorithm, refer to ChangePeriodVersion for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer patternChangePeriodVersion;

  /**
   * / Basic information of a document. / The type of the document determined by crawl histories,
   * refer to TYPE for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer type;

  /**
   * / The UGC changerate estimation. / Information on change period generated from user generated
   * content (UGC) change history.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ugcChangePeriod;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ugcChangePeriodConfidence;

  /**
   * The approximated posterior distribution.
   * @return value or {@code null} for none
   */
  public CrawlerChangerateMultipleComponentDistribution getApproximatedPosterior() {
    return approximatedPosterior;
  }

  /**
   * The approximated posterior distribution.
   * @param approximatedPosterior approximatedPosterior or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setApproximatedPosterior(CrawlerChangerateMultipleComponentDistribution approximatedPosterior) {
    this.approximatedPosterior = approximatedPosterior;
    return this;
  }

  /**
   * The "significance" of the average change we saw of this document (from 0 to 1). Influenced by
   * content changes. This can be used for prioritizing the crawl (higher significance first).
   * @return value or {@code null} for none
   */
  public java.lang.Double getAverageChangeSignificance() {
    return averageChangeSignificance;
  }

  /**
   * The "significance" of the average change we saw of this document (from 0 to 1). Influenced by
   * content changes. This can be used for prioritizing the crawl (higher significance first).
   * @param averageChangeSignificance averageChangeSignificance or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setAverageChangeSignificance(java.lang.Double averageChangeSignificance) {
    this.averageChangeSignificance = averageChangeSignificance;
    return this;
  }

  /**
   * / The classic changerate estimation. / The classic estimate of change period (in seconds). It
   * is computed by inserted a "fake" change and no-change interval as a prior distribution. This
   * field is generally not used and should NOT be accessed directly. See above for correct method
   * for determining the change period estimate.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getChangeperiod() {
    return changeperiod;
  }

  /**
   * / The classic changerate estimation. / The classic estimate of change period (in seconds). It
   * is computed by inserted a "fake" change and no-change interval as a prior distribution. This
   * field is generally not used and should NOT be accessed directly. See above for correct method
   * for determining the change period estimate.
   * @param changeperiod changeperiod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setChangeperiod(java.lang.Integer changeperiod) {
    this.changeperiod = changeperiod;
    return this;
  }

  /**
   * The confidence (between 0 and 1) in the changeperiod guess.
   * @return value or {@code null} for none
   */
  public java.lang.Double getConfidence() {
    return confidence;
  }

  /**
   * The confidence (between 0 and 1) in the changeperiod guess.
   * @param confidence confidence or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setConfidence(java.lang.Double confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * / The changerate estimation based on the global prior. / The global-based changeperiod. This is
   * our estimate (in seconds) for the average time between changes. It is computed using the new
   * prior method based on global_based_prior_period and the global_based_prior_strength specified
   * below. This is used for computing pattern priors. Use pattern_based_change_period or
   * changeperiod fields for all other purposes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGlobalBasedChangePeriod() {
    return globalBasedChangePeriod;
  }

  /**
   * / The changerate estimation based on the global prior. / The global-based changeperiod. This is
   * our estimate (in seconds) for the average time between changes. It is computed using the new
   * prior method based on global_based_prior_period and the global_based_prior_strength specified
   * below. This is used for computing pattern priors. Use pattern_based_change_period or
   * changeperiod fields for all other purposes.
   * @param globalBasedChangePeriod globalBasedChangePeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setGlobalBasedChangePeriod(java.lang.Integer globalBasedChangePeriod) {
    this.globalBasedChangePeriod = globalBasedChangePeriod;
    return this;
  }

  /**
   * The 'confidence' of the global-based changeperiod. This is the n-th root of the posterior
   * evaluated at MAP point, where n is the number of history intervals. For now, it is hard to
   * interpret the meaning of the absolute values of 'average' posterior cross different sets of
   * data.
   * @return value or {@code null} for none
   */
  public java.lang.Double getGlobalBasedChangePeriodConfidence() {
    return globalBasedChangePeriodConfidence;
  }

  /**
   * The 'confidence' of the global-based changeperiod. This is the n-th root of the posterior
   * evaluated at MAP point, where n is the number of history intervals. For now, it is hard to
   * interpret the meaning of the absolute values of 'average' posterior cross different sets of
   * data.
   * @param globalBasedChangePeriodConfidence globalBasedChangePeriodConfidence or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setGlobalBasedChangePeriodConfidence(java.lang.Double globalBasedChangePeriodConfidence) {
    this.globalBasedChangePeriodConfidence = globalBasedChangePeriodConfidence;
    return this;
  }

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * global_based_change_period. These values are precomputed through an offline analysis and
   * specified via flags.
   * @return value or {@code null} for none
   */
  public java.lang.Double getGlobalBasedPriorPeriod() {
    return globalBasedPriorPeriod;
  }

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * global_based_change_period. These values are precomputed through an offline analysis and
   * specified via flags.
   * @param globalBasedPriorPeriod globalBasedPriorPeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setGlobalBasedPriorPeriod(java.lang.Double globalBasedPriorPeriod) {
    this.globalBasedPriorPeriod = globalBasedPriorPeriod;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getGlobalBasedPriorStrength() {
    return globalBasedPriorStrength;
  }

  /**
   * @param globalBasedPriorStrength globalBasedPriorStrength or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setGlobalBasedPriorStrength(java.lang.Double globalBasedPriorStrength) {
    this.globalBasedPriorStrength = globalBasedPriorStrength;
    return this;
  }

  /**
   * The "significance" of the last change we saw of this document (from 0 to 1). Influenced by
   * content changes, etc. This can be used for prioritizing the crawl (higher significance first).
   * @return value or {@code null} for none
   */
  public java.lang.Double getLastChangeSignificance() {
    return lastChangeSignificance;
  }

  /**
   * The "significance" of the last change we saw of this document (from 0 to 1). Influenced by
   * content changes, etc. This can be used for prioritizing the crawl (higher significance first).
   * @param lastChangeSignificance lastChangeSignificance or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setLastChangeSignificance(java.lang.Double lastChangeSignificance) {
    this.lastChangeSignificance = lastChangeSignificance;
    return this;
  }

  /**
   * The last time (unix timestamp) we saw a changed copy of the document. Provided iff we have seen
   * the page change.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLastChanged() {
    return lastChanged;
  }

  /**
   * The last time (unix timestamp) we saw a changed copy of the document. Provided iff we have seen
   * the page change.
   * @param lastChanged lastChanged or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setLastChanged(java.lang.Integer lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  /**
   * The last time (unix timestamp) we saw a fetched copy of the document.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLastFetched() {
    return lastFetched;
  }

  /**
   * The last time (unix timestamp) we saw a fetched copy of the document.
   * @param lastFetched lastFetched or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setLastFetched(java.lang.Integer lastFetched) {
    this.lastFetched = lastFetched;
    return this;
  }

  /**
   * The number of intervals we've seen for this document (where an interval is two different
   * versions).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumIntervals() {
    return numIntervals;
  }

  /**
   * The number of intervals we've seen for this document (where an interval is two different
   * versions).
   * @param numIntervals numIntervals or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setNumIntervals(java.lang.Integer numIntervals) {
    this.numIntervals = numIntervals;
    return this;
  }

  /**
   * / The changerate estimation based on the pattern prior. / The pattern-based changeperiod. This
   * is our estimate (in seconds) for the average time between changes. It is calculated based on
   * the pattern_based_prior_period and pattern_based_prior_strength below. This quantity will
   * eventually replace the old changeperiod calculation.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPatternBasedChangePeriod() {
    return patternBasedChangePeriod;
  }

  /**
   * / The changerate estimation based on the pattern prior. / The pattern-based changeperiod. This
   * is our estimate (in seconds) for the average time between changes. It is calculated based on
   * the pattern_based_prior_period and pattern_based_prior_strength below. This quantity will
   * eventually replace the old changeperiod calculation.
   * @param patternBasedChangePeriod patternBasedChangePeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternBasedChangePeriod(java.lang.Integer patternBasedChangePeriod) {
    this.patternBasedChangePeriod = patternBasedChangePeriod;
    return this;
  }

  /**
   * The same as global_based_change_period_confidence, except it is computed using pattern based
   * priors.
   * @return value or {@code null} for none
   */
  public java.lang.Double getPatternBasedChangePeriodConfidence() {
    return patternBasedChangePeriodConfidence;
  }

  /**
   * The same as global_based_change_period_confidence, except it is computed using pattern based
   * priors.
   * @param patternBasedChangePeriodConfidence patternBasedChangePeriodConfidence or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternBasedChangePeriodConfidence(java.lang.Double patternBasedChangePeriodConfidence) {
    this.patternBasedChangePeriodConfidence = patternBasedChangePeriodConfidence;
    return this;
  }

  /**
   * The lower edge of a confidence interval for the pattern-based change period.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPatternBasedLowerChangePeriod() {
    return patternBasedLowerChangePeriod;
  }

  /**
   * The lower edge of a confidence interval for the pattern-based change period.
   * @param patternBasedLowerChangePeriod patternBasedLowerChangePeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternBasedLowerChangePeriod(java.lang.Integer patternBasedLowerChangePeriod) {
    this.patternBasedLowerChangePeriod = patternBasedLowerChangePeriod;
    return this;
  }

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * pattern_based_change_period. These values are calculated in a separate process and looked up
   * based on the URL pattern.
   * @return value or {@code null} for none
   */
  public java.lang.Double getPatternBasedPriorPeriod() {
    return patternBasedPriorPeriod;
  }

  /**
   * The 2 parameters below specify the prior employed in calculating the
   * pattern_based_change_period. These values are calculated in a separate process and looked up
   * based on the URL pattern.
   * @param patternBasedPriorPeriod patternBasedPriorPeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternBasedPriorPeriod(java.lang.Double patternBasedPriorPeriod) {
    this.patternBasedPriorPeriod = patternBasedPriorPeriod;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getPatternBasedPriorStrength() {
    return patternBasedPriorStrength;
  }

  /**
   * @param patternBasedPriorStrength patternBasedPriorStrength or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternBasedPriorStrength(java.lang.Double patternBasedPriorStrength) {
    this.patternBasedPriorStrength = patternBasedPriorStrength;
    return this;
  }

  /**
   * The version number of the algorithm, refer to ChangePeriodVersion for more information.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPatternChangePeriodVersion() {
    return patternChangePeriodVersion;
  }

  /**
   * The version number of the algorithm, refer to ChangePeriodVersion for more information.
   * @param patternChangePeriodVersion patternChangePeriodVersion or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setPatternChangePeriodVersion(java.lang.Integer patternChangePeriodVersion) {
    this.patternChangePeriodVersion = patternChangePeriodVersion;
    return this;
  }

  /**
   * / Basic information of a document. / The type of the document determined by crawl histories,
   * refer to TYPE for more information.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * / Basic information of a document. / The type of the document determined by crawl histories,
   * refer to TYPE for more information.
   * @param type type or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setType(java.lang.Integer type) {
    this.type = type;
    return this;
  }

  /**
   * / The UGC changerate estimation. / Information on change period generated from user generated
   * content (UGC) change history.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUgcChangePeriod() {
    return ugcChangePeriod;
  }

  /**
   * / The UGC changerate estimation. / Information on change period generated from user generated
   * content (UGC) change history.
   * @param ugcChangePeriod ugcChangePeriod or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setUgcChangePeriod(java.lang.Integer ugcChangePeriod) {
    this.ugcChangePeriod = ugcChangePeriod;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getUgcChangePeriodConfidence() {
    return ugcChangePeriodConfidence;
  }

  /**
   * @param ugcChangePeriodConfidence ugcChangePeriodConfidence or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate setUgcChangePeriodConfidence(java.lang.Double ugcChangePeriodConfidence) {
    this.ugcChangePeriodConfidence = ugcChangePeriodConfidence;
    return this;
  }

  @Override
  public CrawlerChangerateUrlChangerate set(String fieldName, Object value) {
    return (CrawlerChangerateUrlChangerate) super.set(fieldName, value);
  }

  @Override
  public CrawlerChangerateUrlChangerate clone() {
    return (CrawlerChangerateUrlChangerate) super.clone();
  }

}
