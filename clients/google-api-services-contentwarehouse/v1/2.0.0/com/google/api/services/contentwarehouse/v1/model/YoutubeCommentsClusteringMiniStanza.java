/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Intended to be simpler to work with than the ExportedStanza it's derived from See documentation: 
 * https://g3doc.corp.google.com/company/teams/youtube/community_intelligence/eng_resources/data_sou
 * rces.md#ministanza Next available: 76
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class YoutubeCommentsClusteringMiniStanza extends com.google.api.client.json.GenericJson {

  /**
   * TnS Ansible scores map. Keyed by various model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> ansibleScores;

  /**
   * Automod scores map. Keyed by various model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> automodScores;

  /**
   * The blarney stone score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeDistillerBlarneyStoneScores blarneyStoneScore;

  /**
   * The channel this channel discussion comment belongs to. Note that this will match channel_id
   * for such comments.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String channelDiscussionId;

  /**
   * The channel of the video this comment belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String channelId;

  /**
   * Channel profile quality scores map. Keyed by various model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> channelProfileQualityScores;

  /**
   * Char entropy of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double charEntropy;

  /**
   * Comment classification mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> commentClassification;

  /**
   * List of pre-defined classification score buckets to which the comment belongs. E.g.
   * satisfaction_v1_percentile_80.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> commentClassificationBuckets;

  /**
   * Comment classification for ranking mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> commentClassificationRanking;

  /**
   * Whether the comment is on a video, post, or other product.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commentType;

  /**
   * The text content of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String content;

  /**
   * The stanza content last update timestamp, as observed by the server. Note that for many
   * comments older than Nov. 2014 this is unset in the original stanza. MiniStanza tries to be
   * consistent with the original so for such comments it remains unset in MiniStanza. If you use
   * this field you should check has_content_update_timestamp().
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String contentUpdateTimestamp;

  /**
   * Whether or not this comment is eligible for comment classifier coverage sampling (in Kapla).
   * Refer to go/coverage-monitoring-for-kapla-comment-classifiers for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean coverageSamplingEligible;

  /**
   * The creation device. Derived from shares:yt_creation_device
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creationDevice;

  /**
   * The time when the comment is created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long creationTimeInSeconds;

  /**
   * The language code with extra script details. This is derived from detailed_language_code if
   * it's populated, otherwise the same as language_code. E.g. mr-Latn
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String detailedLanguageCode;

  /**
   * All distiller engagements like reports and downvotes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleActivityStreamqualityDistillerEngagements distillerEngagements;

  /**
   * The qualified comment teaser filters that this comment is eligible for. Refer to go/comment-
   * teaser-design for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> eligibleQualifiedTeaserFilters;

  /**
   * Comments empirical CTRs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoYoutubeCommentsRankingCTRMetrics empiricalCtrs;

  /**
   * Fountain Discovery Score, which represents the reputation of the author.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double fds;

  /**
   * Indicator for whether there is creator heart on this comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasCreatorHeart;

  /**
   * If the comment has a creator reply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasCreatorReply;

  /**
   * If the author is a channel member (sponsor).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isAuthorSponsor;

  /**
   * Whether a comment is from deleted shares. See stanza_restrictions for more specific information
   * and is_publicly_visible for comments which are allowed to be seen by everyone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDeleted;

  /**
   * Whether the comment is pinned. This is derived from the DestinationStreamDump.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPinned;

  /**
   * If the post is publicly visible.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPubliclyVisible;

  /**
   * Whether the comment is a reply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isReply;

  /**
   * If the comment author is publicly subscribed to the channel.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSubscriber;

  /**
   * Unicode CLDR language code of the segments, as implemented by
   * //depot/google3/java/com/google/i18n/identifiers/LanguageCode.java This is derived from
   * user_content and should be considered the canonical language code of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * The time when last reply is created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long lastReplyTimestampUsec;

  /**
   * Low quality decisions. Keyed by decision types corresponding to secondary keys.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Boolean> lowQualityDecisions;

  /**
   * Timed comments for the "mentioned" secondary key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mentionedTimestampCommentSecond;

  /**
   * Misinfo scores map. Keyed by various model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> misinfoScores;

  /**
   * Number of dislikes the comment has.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numDislikes;

  /**
   * Number of likes the comment has.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numLikes;

  /**
   * Number of different repliers the comment has.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numRepliers;

  /**
   * Number of non-abusive replies the comment has.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numReplies;

  /**
   * Bucketed number of subscribers held by comment author.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numSubscribersBucket;

  /**
   * Offline engagement scores map. Keyed by various model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> offlineEngagementScores;

  /**
   * The parent stanza's stanza_id, empty for top-level posts (non-replies). Prefer is_reply field
   * for checking if a comment is a reply since that is unaffected by surrogatization. For replies
   * to replies, this is the root stanza_id (not guaranteed AFAIK).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parentId;

  /**
   * The post this comment belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postId;

  /**
   * The language code stored in the KV pair ranking:post_language. This should usually be the same
   * as language_code but is not guaranteed to be identical. The KV pair is needed because ranking
   * can't consume user_content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rankingPostLanguage;

  /**
   * A textual content for the context.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialCommonSegments segments;

  /**
   * Sensitivity scores map for smart reply sensitivity scores. Keyed by model names. See
   * (g3doc/company/teams/expander/research/conversation/sensitive.md) for more information on
   * sensitivity scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Double> sensitivityScores;

  /**
   * Sentiment. This omits entity_sentiment and keeps only the polarity, magnitude, and score.
   * Sentiment as currently implemented is not debiased and has limited language coverage. Please
   * read go/comments-sentiment-access before using.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsSentimentSentiment sentiment;

  /**
   * Smart replies for this comment. Keyed by model names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply> smartReplies;

  static {
    // hack to force ProGuard to consider VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply.class);
  }

  /**
   * Refers to the stanza this data is derived from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stanzaId;

  /**
   * Contains various restriction information about a stanza.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SocialStanzaStanzaRestriction> stanzaRestrictions;

  static {
    // hack to force ProGuard to consider SocialStanzaStanzaRestriction used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(SocialStanzaStanzaRestriction.class);
  }

  /**
   * The author of the comment
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SecurityCredentialsPrincipalProto subject;

  /**
   * Whether the comment is authored by the creator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean subjectIsVideoOwner;

  /**
   * The timestamp (in seconds) when the author subscribed to the channel.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long subscriptionTimestamp;

  /**
   * Super Thanks related info if a comment is posted through a Super Thanks purchase.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeBackstageSuperVodCommentInfo superThanksInfo;

  /**
   * Comment text embedding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, YoutubeCommentsRankingYouTubeCommentTextEmbedding> textEmbedding;

  /**
   * Text length of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer textLength;

  /**
   * Predicted probability of the comment being flagged based on the text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation textQualityScores;

  /**
   * Predicted probability of the comment being flagged based on the text. For testing the new
   * annotation process only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation textQualityScores2;

  /**
   * The video this comment belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String videoId;

  /**
   * Unique video timestamps in seconds sorted by timestamp. This is derived from text Segments, not
   * from a KV. These may exceed the length of the video since that isn't checked at segmentation
   * time. The segmentation rules have changed over time e.g. in the past "10:00 PM" was treated as
   * a timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> videoTimestamps;

  /**
   * Word entropy of the comment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double wordEntropy;

  /**
   * The youtube channel id of the comment author.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ytAuthorChannelId;

  /**
   * Existing quality corpus scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ytCommentQualityScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ytCommentQualityScore2;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double ytCommentQualityScore3;

  /**
   * For replies to replies, this contains the parent reply's id. The parent_id field is actually
   * the root stanza_id (not guaranteed AFAIK).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ytReplyToItemId;

  /**
   * TnS Ansible scores map. Keyed by various model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getAnsibleScores() {
    return ansibleScores;
  }

  /**
   * TnS Ansible scores map. Keyed by various model names.
   * @param ansibleScores ansibleScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setAnsibleScores(java.util.Map<String, java.lang.Double> ansibleScores) {
    this.ansibleScores = ansibleScores;
    return this;
  }

  /**
   * Automod scores map. Keyed by various model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getAutomodScores() {
    return automodScores;
  }

  /**
   * Automod scores map. Keyed by various model names.
   * @param automodScores automodScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setAutomodScores(java.util.Map<String, java.lang.Double> automodScores) {
    this.automodScores = automodScores;
    return this;
  }

  /**
   * The blarney stone score.
   * @return value or {@code null} for none
   */
  public YoutubeDistillerBlarneyStoneScores getBlarneyStoneScore() {
    return blarneyStoneScore;
  }

  /**
   * The blarney stone score.
   * @param blarneyStoneScore blarneyStoneScore or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setBlarneyStoneScore(YoutubeDistillerBlarneyStoneScores blarneyStoneScore) {
    this.blarneyStoneScore = blarneyStoneScore;
    return this;
  }

  /**
   * The channel this channel discussion comment belongs to. Note that this will match channel_id
   * for such comments.
   * @return value or {@code null} for none
   */
  public java.lang.String getChannelDiscussionId() {
    return channelDiscussionId;
  }

  /**
   * The channel this channel discussion comment belongs to. Note that this will match channel_id
   * for such comments.
   * @param channelDiscussionId channelDiscussionId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setChannelDiscussionId(java.lang.String channelDiscussionId) {
    this.channelDiscussionId = channelDiscussionId;
    return this;
  }

  /**
   * The channel of the video this comment belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getChannelId() {
    return channelId;
  }

  /**
   * The channel of the video this comment belongs to.
   * @param channelId channelId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setChannelId(java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Channel profile quality scores map. Keyed by various model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getChannelProfileQualityScores() {
    return channelProfileQualityScores;
  }

  /**
   * Channel profile quality scores map. Keyed by various model names.
   * @param channelProfileQualityScores channelProfileQualityScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setChannelProfileQualityScores(java.util.Map<String, java.lang.Double> channelProfileQualityScores) {
    this.channelProfileQualityScores = channelProfileQualityScores;
    return this;
  }

  /**
   * Char entropy of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.Double getCharEntropy() {
    return charEntropy;
  }

  /**
   * Char entropy of the comment.
   * @param charEntropy charEntropy or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCharEntropy(java.lang.Double charEntropy) {
    this.charEntropy = charEntropy;
    return this;
  }

  /**
   * Comment classification mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getCommentClassification() {
    return commentClassification;
  }

  /**
   * Comment classification mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * @param commentClassification commentClassification or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCommentClassification(java.util.Map<String, java.lang.Double> commentClassification) {
    this.commentClassification = commentClassification;
    return this;
  }

  /**
   * List of pre-defined classification score buckets to which the comment belongs. E.g.
   * satisfaction_v1_percentile_80.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommentClassificationBuckets() {
    return commentClassificationBuckets;
  }

  /**
   * List of pre-defined classification score buckets to which the comment belongs. E.g.
   * satisfaction_v1_percentile_80.
   * @param commentClassificationBuckets commentClassificationBuckets or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCommentClassificationBuckets(java.util.List<java.lang.String> commentClassificationBuckets) {
    this.commentClassificationBuckets = commentClassificationBuckets;
    return this;
  }

  /**
   * Comment classification for ranking mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getCommentClassificationRanking() {
    return commentClassificationRanking;
  }

  /**
   * Comment classification for ranking mapping all secondary keys to values. E.g. {"joke_v1":0.8,
   * "joke_v2":0.7, "question_v1":0.3}.
   * @param commentClassificationRanking commentClassificationRanking or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCommentClassificationRanking(java.util.Map<String, java.lang.Double> commentClassificationRanking) {
    this.commentClassificationRanking = commentClassificationRanking;
    return this;
  }

  /**
   * Whether the comment is on a video, post, or other product.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommentType() {
    return commentType;
  }

  /**
   * Whether the comment is on a video, post, or other product.
   * @param commentType commentType or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCommentType(java.lang.String commentType) {
    this.commentType = commentType;
    return this;
  }

  /**
   * The text content of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.String getContent() {
    return content;
  }

  /**
   * The text content of the comment.
   * @param content content or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  /**
   * The stanza content last update timestamp, as observed by the server. Note that for many
   * comments older than Nov. 2014 this is unset in the original stanza. MiniStanza tries to be
   * consistent with the original so for such comments it remains unset in MiniStanza. If you use
   * this field you should check has_content_update_timestamp().
   * @return value or {@code null} for none
   */
  public String getContentUpdateTimestamp() {
    return contentUpdateTimestamp;
  }

  /**
   * The stanza content last update timestamp, as observed by the server. Note that for many
   * comments older than Nov. 2014 this is unset in the original stanza. MiniStanza tries to be
   * consistent with the original so for such comments it remains unset in MiniStanza. If you use
   * this field you should check has_content_update_timestamp().
   * @param contentUpdateTimestamp contentUpdateTimestamp or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setContentUpdateTimestamp(String contentUpdateTimestamp) {
    this.contentUpdateTimestamp = contentUpdateTimestamp;
    return this;
  }

  /**
   * Whether or not this comment is eligible for comment classifier coverage sampling (in Kapla).
   * Refer to go/coverage-monitoring-for-kapla-comment-classifiers for more information.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCoverageSamplingEligible() {
    return coverageSamplingEligible;
  }

  /**
   * Whether or not this comment is eligible for comment classifier coverage sampling (in Kapla).
   * Refer to go/coverage-monitoring-for-kapla-comment-classifiers for more information.
   * @param coverageSamplingEligible coverageSamplingEligible or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCoverageSamplingEligible(java.lang.Boolean coverageSamplingEligible) {
    this.coverageSamplingEligible = coverageSamplingEligible;
    return this;
  }

  /**
   * The creation device. Derived from shares:yt_creation_device
   * @return value or {@code null} for none
   */
  public java.lang.String getCreationDevice() {
    return creationDevice;
  }

  /**
   * The creation device. Derived from shares:yt_creation_device
   * @param creationDevice creationDevice or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCreationDevice(java.lang.String creationDevice) {
    this.creationDevice = creationDevice;
    return this;
  }

  /**
   * The time when the comment is created.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCreationTimeInSeconds() {
    return creationTimeInSeconds;
  }

  /**
   * The time when the comment is created.
   * @param creationTimeInSeconds creationTimeInSeconds or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setCreationTimeInSeconds(java.lang.Long creationTimeInSeconds) {
    this.creationTimeInSeconds = creationTimeInSeconds;
    return this;
  }

  /**
   * The language code with extra script details. This is derived from detailed_language_code if
   * it's populated, otherwise the same as language_code. E.g. mr-Latn
   * @return value or {@code null} for none
   */
  public java.lang.String getDetailedLanguageCode() {
    return detailedLanguageCode;
  }

  /**
   * The language code with extra script details. This is derived from detailed_language_code if
   * it's populated, otherwise the same as language_code. E.g. mr-Latn
   * @param detailedLanguageCode detailedLanguageCode or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setDetailedLanguageCode(java.lang.String detailedLanguageCode) {
    this.detailedLanguageCode = detailedLanguageCode;
    return this;
  }

  /**
   * All distiller engagements like reports and downvotes.
   * @return value or {@code null} for none
   */
  public AppsPeopleActivityStreamqualityDistillerEngagements getDistillerEngagements() {
    return distillerEngagements;
  }

  /**
   * All distiller engagements like reports and downvotes.
   * @param distillerEngagements distillerEngagements or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setDistillerEngagements(AppsPeopleActivityStreamqualityDistillerEngagements distillerEngagements) {
    this.distillerEngagements = distillerEngagements;
    return this;
  }

  /**
   * The qualified comment teaser filters that this comment is eligible for. Refer to go/comment-
   * teaser-design for more information.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEligibleQualifiedTeaserFilters() {
    return eligibleQualifiedTeaserFilters;
  }

  /**
   * The qualified comment teaser filters that this comment is eligible for. Refer to go/comment-
   * teaser-design for more information.
   * @param eligibleQualifiedTeaserFilters eligibleQualifiedTeaserFilters or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setEligibleQualifiedTeaserFilters(java.util.List<java.lang.String> eligibleQualifiedTeaserFilters) {
    this.eligibleQualifiedTeaserFilters = eligibleQualifiedTeaserFilters;
    return this;
  }

  /**
   * Comments empirical CTRs.
   * @return value or {@code null} for none
   */
  public VideoYoutubeCommentsRankingCTRMetrics getEmpiricalCtrs() {
    return empiricalCtrs;
  }

  /**
   * Comments empirical CTRs.
   * @param empiricalCtrs empiricalCtrs or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setEmpiricalCtrs(VideoYoutubeCommentsRankingCTRMetrics empiricalCtrs) {
    this.empiricalCtrs = empiricalCtrs;
    return this;
  }

  /**
   * Fountain Discovery Score, which represents the reputation of the author.
   * @return value or {@code null} for none
   */
  public java.lang.Double getFds() {
    return fds;
  }

  /**
   * Fountain Discovery Score, which represents the reputation of the author.
   * @param fds fds or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setFds(java.lang.Double fds) {
    this.fds = fds;
    return this;
  }

  /**
   * Indicator for whether there is creator heart on this comment.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasCreatorHeart() {
    return hasCreatorHeart;
  }

  /**
   * Indicator for whether there is creator heart on this comment.
   * @param hasCreatorHeart hasCreatorHeart or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setHasCreatorHeart(java.lang.Boolean hasCreatorHeart) {
    this.hasCreatorHeart = hasCreatorHeart;
    return this;
  }

  /**
   * If the comment has a creator reply.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasCreatorReply() {
    return hasCreatorReply;
  }

  /**
   * If the comment has a creator reply.
   * @param hasCreatorReply hasCreatorReply or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setHasCreatorReply(java.lang.Boolean hasCreatorReply) {
    this.hasCreatorReply = hasCreatorReply;
    return this;
  }

  /**
   * If the author is a channel member (sponsor).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsAuthorSponsor() {
    return isAuthorSponsor;
  }

  /**
   * If the author is a channel member (sponsor).
   * @param isAuthorSponsor isAuthorSponsor or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsAuthorSponsor(java.lang.Boolean isAuthorSponsor) {
    this.isAuthorSponsor = isAuthorSponsor;
    return this;
  }

  /**
   * Whether a comment is from deleted shares. See stanza_restrictions for more specific information
   * and is_publicly_visible for comments which are allowed to be seen by everyone.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDeleted() {
    return isDeleted;
  }

  /**
   * Whether a comment is from deleted shares. See stanza_restrictions for more specific information
   * and is_publicly_visible for comments which are allowed to be seen by everyone.
   * @param isDeleted isDeleted or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsDeleted(java.lang.Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Whether the comment is pinned. This is derived from the DestinationStreamDump.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPinned() {
    return isPinned;
  }

  /**
   * Whether the comment is pinned. This is derived from the DestinationStreamDump.
   * @param isPinned isPinned or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsPinned(java.lang.Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

  /**
   * If the post is publicly visible.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPubliclyVisible() {
    return isPubliclyVisible;
  }

  /**
   * If the post is publicly visible.
   * @param isPubliclyVisible isPubliclyVisible or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsPubliclyVisible(java.lang.Boolean isPubliclyVisible) {
    this.isPubliclyVisible = isPubliclyVisible;
    return this;
  }

  /**
   * Whether the comment is a reply.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsReply() {
    return isReply;
  }

  /**
   * Whether the comment is a reply.
   * @param isReply isReply or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsReply(java.lang.Boolean isReply) {
    this.isReply = isReply;
    return this;
  }

  /**
   * If the comment author is publicly subscribed to the channel.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSubscriber() {
    return isSubscriber;
  }

  /**
   * If the comment author is publicly subscribed to the channel.
   * @param isSubscriber isSubscriber or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setIsSubscriber(java.lang.Boolean isSubscriber) {
    this.isSubscriber = isSubscriber;
    return this;
  }

  /**
   * Unicode CLDR language code of the segments, as implemented by
   * //depot/google3/java/com/google/i18n/identifiers/LanguageCode.java This is derived from
   * user_content and should be considered the canonical language code of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Unicode CLDR language code of the segments, as implemented by
   * //depot/google3/java/com/google/i18n/identifiers/LanguageCode.java This is derived from
   * user_content and should be considered the canonical language code of the comment.
   * @param languageCode languageCode or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The time when last reply is created.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastReplyTimestampUsec() {
    return lastReplyTimestampUsec;
  }

  /**
   * The time when last reply is created.
   * @param lastReplyTimestampUsec lastReplyTimestampUsec or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setLastReplyTimestampUsec(java.lang.Long lastReplyTimestampUsec) {
    this.lastReplyTimestampUsec = lastReplyTimestampUsec;
    return this;
  }

  /**
   * Low quality decisions. Keyed by decision types corresponding to secondary keys.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Boolean> getLowQualityDecisions() {
    return lowQualityDecisions;
  }

  /**
   * Low quality decisions. Keyed by decision types corresponding to secondary keys.
   * @param lowQualityDecisions lowQualityDecisions or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setLowQualityDecisions(java.util.Map<String, java.lang.Boolean> lowQualityDecisions) {
    this.lowQualityDecisions = lowQualityDecisions;
    return this;
  }

  /**
   * Timed comments for the "mentioned" secondary key.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMentionedTimestampCommentSecond() {
    return mentionedTimestampCommentSecond;
  }

  /**
   * Timed comments for the "mentioned" secondary key.
   * @param mentionedTimestampCommentSecond mentionedTimestampCommentSecond or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setMentionedTimestampCommentSecond(java.lang.Integer mentionedTimestampCommentSecond) {
    this.mentionedTimestampCommentSecond = mentionedTimestampCommentSecond;
    return this;
  }

  /**
   * Misinfo scores map. Keyed by various model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getMisinfoScores() {
    return misinfoScores;
  }

  /**
   * Misinfo scores map. Keyed by various model names.
   * @param misinfoScores misinfoScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setMisinfoScores(java.util.Map<String, java.lang.Double> misinfoScores) {
    this.misinfoScores = misinfoScores;
    return this;
  }

  /**
   * Number of dislikes the comment has.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumDislikes() {
    return numDislikes;
  }

  /**
   * Number of dislikes the comment has.
   * @param numDislikes numDislikes or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setNumDislikes(java.lang.Integer numDislikes) {
    this.numDislikes = numDislikes;
    return this;
  }

  /**
   * Number of likes the comment has.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumLikes() {
    return numLikes;
  }

  /**
   * Number of likes the comment has.
   * @param numLikes numLikes or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setNumLikes(java.lang.Integer numLikes) {
    this.numLikes = numLikes;
    return this;
  }

  /**
   * Number of different repliers the comment has.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumRepliers() {
    return numRepliers;
  }

  /**
   * Number of different repliers the comment has.
   * @param numRepliers numRepliers or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setNumRepliers(java.lang.Integer numRepliers) {
    this.numRepliers = numRepliers;
    return this;
  }

  /**
   * Number of non-abusive replies the comment has.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumReplies() {
    return numReplies;
  }

  /**
   * Number of non-abusive replies the comment has.
   * @param numReplies numReplies or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setNumReplies(java.lang.Integer numReplies) {
    this.numReplies = numReplies;
    return this;
  }

  /**
   * Bucketed number of subscribers held by comment author.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumSubscribersBucket() {
    return numSubscribersBucket;
  }

  /**
   * Bucketed number of subscribers held by comment author.
   * @param numSubscribersBucket numSubscribersBucket or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setNumSubscribersBucket(java.lang.Integer numSubscribersBucket) {
    this.numSubscribersBucket = numSubscribersBucket;
    return this;
  }

  /**
   * Offline engagement scores map. Keyed by various model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getOfflineEngagementScores() {
    return offlineEngagementScores;
  }

  /**
   * Offline engagement scores map. Keyed by various model names.
   * @param offlineEngagementScores offlineEngagementScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setOfflineEngagementScores(java.util.Map<String, java.lang.Double> offlineEngagementScores) {
    this.offlineEngagementScores = offlineEngagementScores;
    return this;
  }

  /**
   * The parent stanza's stanza_id, empty for top-level posts (non-replies). Prefer is_reply field
   * for checking if a comment is a reply since that is unaffected by surrogatization. For replies
   * to replies, this is the root stanza_id (not guaranteed AFAIK).
   * @return value or {@code null} for none
   */
  public java.lang.String getParentId() {
    return parentId;
  }

  /**
   * The parent stanza's stanza_id, empty for top-level posts (non-replies). Prefer is_reply field
   * for checking if a comment is a reply since that is unaffected by surrogatization. For replies
   * to replies, this is the root stanza_id (not guaranteed AFAIK).
   * @param parentId parentId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setParentId(java.lang.String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The post this comment belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostId() {
    return postId;
  }

  /**
   * The post this comment belongs to.
   * @param postId postId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setPostId(java.lang.String postId) {
    this.postId = postId;
    return this;
  }

  /**
   * The language code stored in the KV pair ranking:post_language. This should usually be the same
   * as language_code but is not guaranteed to be identical. The KV pair is needed because ranking
   * can't consume user_content.
   * @return value or {@code null} for none
   */
  public java.lang.String getRankingPostLanguage() {
    return rankingPostLanguage;
  }

  /**
   * The language code stored in the KV pair ranking:post_language. This should usually be the same
   * as language_code but is not guaranteed to be identical. The KV pair is needed because ranking
   * can't consume user_content.
   * @param rankingPostLanguage rankingPostLanguage or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setRankingPostLanguage(java.lang.String rankingPostLanguage) {
    this.rankingPostLanguage = rankingPostLanguage;
    return this;
  }

  /**
   * A textual content for the context.
   * @return value or {@code null} for none
   */
  public SocialCommonSegments getSegments() {
    return segments;
  }

  /**
   * A textual content for the context.
   * @param segments segments or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSegments(SocialCommonSegments segments) {
    this.segments = segments;
    return this;
  }

  /**
   * Sensitivity scores map for smart reply sensitivity scores. Keyed by model names. See
   * (g3doc/company/teams/expander/research/conversation/sensitive.md) for more information on
   * sensitivity scores.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Double> getSensitivityScores() {
    return sensitivityScores;
  }

  /**
   * Sensitivity scores map for smart reply sensitivity scores. Keyed by model names. See
   * (g3doc/company/teams/expander/research/conversation/sensitive.md) for more information on
   * sensitivity scores.
   * @param sensitivityScores sensitivityScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSensitivityScores(java.util.Map<String, java.lang.Double> sensitivityScores) {
    this.sensitivityScores = sensitivityScores;
    return this;
  }

  /**
   * Sentiment. This omits entity_sentiment and keeps only the polarity, magnitude, and score.
   * Sentiment as currently implemented is not debiased and has limited language coverage. Please
   * read go/comments-sentiment-access before using.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsSentimentSentiment getSentiment() {
    return sentiment;
  }

  /**
   * Sentiment. This omits entity_sentiment and keeps only the polarity, magnitude, and score.
   * Sentiment as currently implemented is not debiased and has limited language coverage. Please
   * read go/comments-sentiment-access before using.
   * @param sentiment sentiment or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSentiment(YoutubeCommentsSentimentSentiment sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  /**
   * Smart replies for this comment. Keyed by model names.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply> getSmartReplies() {
    return smartReplies;
  }

  /**
   * Smart replies for this comment. Keyed by model names.
   * @param smartReplies smartReplies or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSmartReplies(java.util.Map<String, VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply> smartReplies) {
    this.smartReplies = smartReplies;
    return this;
  }

  /**
   * Refers to the stanza this data is derived from.
   * @return value or {@code null} for none
   */
  public java.lang.String getStanzaId() {
    return stanzaId;
  }

  /**
   * Refers to the stanza this data is derived from.
   * @param stanzaId stanzaId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setStanzaId(java.lang.String stanzaId) {
    this.stanzaId = stanzaId;
    return this;
  }

  /**
   * Contains various restriction information about a stanza.
   * @return value or {@code null} for none
   */
  public java.util.List<SocialStanzaStanzaRestriction> getStanzaRestrictions() {
    return stanzaRestrictions;
  }

  /**
   * Contains various restriction information about a stanza.
   * @param stanzaRestrictions stanzaRestrictions or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setStanzaRestrictions(java.util.List<SocialStanzaStanzaRestriction> stanzaRestrictions) {
    this.stanzaRestrictions = stanzaRestrictions;
    return this;
  }

  /**
   * The author of the comment
   * @return value or {@code null} for none
   */
  public SecurityCredentialsPrincipalProto getSubject() {
    return subject;
  }

  /**
   * The author of the comment
   * @param subject subject or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSubject(SecurityCredentialsPrincipalProto subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Whether the comment is authored by the creator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSubjectIsVideoOwner() {
    return subjectIsVideoOwner;
  }

  /**
   * Whether the comment is authored by the creator.
   * @param subjectIsVideoOwner subjectIsVideoOwner or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSubjectIsVideoOwner(java.lang.Boolean subjectIsVideoOwner) {
    this.subjectIsVideoOwner = subjectIsVideoOwner;
    return this;
  }

  /**
   * The timestamp (in seconds) when the author subscribed to the channel.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSubscriptionTimestamp() {
    return subscriptionTimestamp;
  }

  /**
   * The timestamp (in seconds) when the author subscribed to the channel.
   * @param subscriptionTimestamp subscriptionTimestamp or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSubscriptionTimestamp(java.lang.Long subscriptionTimestamp) {
    this.subscriptionTimestamp = subscriptionTimestamp;
    return this;
  }

  /**
   * Super Thanks related info if a comment is posted through a Super Thanks purchase.
   * @return value or {@code null} for none
   */
  public YoutubeBackstageSuperVodCommentInfo getSuperThanksInfo() {
    return superThanksInfo;
  }

  /**
   * Super Thanks related info if a comment is posted through a Super Thanks purchase.
   * @param superThanksInfo superThanksInfo or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setSuperThanksInfo(YoutubeBackstageSuperVodCommentInfo superThanksInfo) {
    this.superThanksInfo = superThanksInfo;
    return this;
  }

  /**
   * Comment text embedding.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, YoutubeCommentsRankingYouTubeCommentTextEmbedding> getTextEmbedding() {
    return textEmbedding;
  }

  /**
   * Comment text embedding.
   * @param textEmbedding textEmbedding or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setTextEmbedding(java.util.Map<String, YoutubeCommentsRankingYouTubeCommentTextEmbedding> textEmbedding) {
    this.textEmbedding = textEmbedding;
    return this;
  }

  /**
   * Text length of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTextLength() {
    return textLength;
  }

  /**
   * Text length of the comment.
   * @param textLength textLength or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setTextLength(java.lang.Integer textLength) {
    this.textLength = textLength;
    return this;
  }

  /**
   * Predicted probability of the comment being flagged based on the text.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation getTextQualityScores() {
    return textQualityScores;
  }

  /**
   * Predicted probability of the comment being flagged based on the text.
   * @param textQualityScores textQualityScores or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setTextQualityScores(YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation textQualityScores) {
    this.textQualityScores = textQualityScores;
    return this;
  }

  /**
   * Predicted probability of the comment being flagged based on the text. For testing the new
   * annotation process only.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation getTextQualityScores2() {
    return textQualityScores2;
  }

  /**
   * Predicted probability of the comment being flagged based on the text. For testing the new
   * annotation process only.
   * @param textQualityScores2 textQualityScores2 or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setTextQualityScores2(YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation textQualityScores2) {
    this.textQualityScores2 = textQualityScores2;
    return this;
  }

  /**
   * The video this comment belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getVideoId() {
    return videoId;
  }

  /**
   * The video this comment belongs to.
   * @param videoId videoId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setVideoId(java.lang.String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * Unique video timestamps in seconds sorted by timestamp. This is derived from text Segments, not
   * from a KV. These may exceed the length of the video since that isn't checked at segmentation
   * time. The segmentation rules have changed over time e.g. in the past "10:00 PM" was treated as
   * a timestamp.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getVideoTimestamps() {
    return videoTimestamps;
  }

  /**
   * Unique video timestamps in seconds sorted by timestamp. This is derived from text Segments, not
   * from a KV. These may exceed the length of the video since that isn't checked at segmentation
   * time. The segmentation rules have changed over time e.g. in the past "10:00 PM" was treated as
   * a timestamp.
   * @param videoTimestamps videoTimestamps or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setVideoTimestamps(java.util.List<java.lang.Integer> videoTimestamps) {
    this.videoTimestamps = videoTimestamps;
    return this;
  }

  /**
   * Word entropy of the comment.
   * @return value or {@code null} for none
   */
  public java.lang.Double getWordEntropy() {
    return wordEntropy;
  }

  /**
   * Word entropy of the comment.
   * @param wordEntropy wordEntropy or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setWordEntropy(java.lang.Double wordEntropy) {
    this.wordEntropy = wordEntropy;
    return this;
  }

  /**
   * The youtube channel id of the comment author.
   * @return value or {@code null} for none
   */
  public java.lang.String getYtAuthorChannelId() {
    return ytAuthorChannelId;
  }

  /**
   * The youtube channel id of the comment author.
   * @param ytAuthorChannelId ytAuthorChannelId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setYtAuthorChannelId(java.lang.String ytAuthorChannelId) {
    this.ytAuthorChannelId = ytAuthorChannelId;
    return this;
  }

  /**
   * Existing quality corpus scores.
   * @return value or {@code null} for none
   */
  public java.lang.Double getYtCommentQualityScore() {
    return ytCommentQualityScore;
  }

  /**
   * Existing quality corpus scores.
   * @param ytCommentQualityScore ytCommentQualityScore or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setYtCommentQualityScore(java.lang.Double ytCommentQualityScore) {
    this.ytCommentQualityScore = ytCommentQualityScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getYtCommentQualityScore2() {
    return ytCommentQualityScore2;
  }

  /**
   * @param ytCommentQualityScore2 ytCommentQualityScore2 or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setYtCommentQualityScore2(java.lang.Double ytCommentQualityScore2) {
    this.ytCommentQualityScore2 = ytCommentQualityScore2;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getYtCommentQualityScore3() {
    return ytCommentQualityScore3;
  }

  /**
   * @param ytCommentQualityScore3 ytCommentQualityScore3 or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setYtCommentQualityScore3(java.lang.Double ytCommentQualityScore3) {
    this.ytCommentQualityScore3 = ytCommentQualityScore3;
    return this;
  }

  /**
   * For replies to replies, this contains the parent reply's id. The parent_id field is actually
   * the root stanza_id (not guaranteed AFAIK).
   * @return value or {@code null} for none
   */
  public java.lang.String getYtReplyToItemId() {
    return ytReplyToItemId;
  }

  /**
   * For replies to replies, this contains the parent reply's id. The parent_id field is actually
   * the root stanza_id (not guaranteed AFAIK).
   * @param ytReplyToItemId ytReplyToItemId or {@code null} for none
   */
  public YoutubeCommentsClusteringMiniStanza setYtReplyToItemId(java.lang.String ytReplyToItemId) {
    this.ytReplyToItemId = ytReplyToItemId;
    return this;
  }

  @Override
  public YoutubeCommentsClusteringMiniStanza set(String fieldName, Object value) {
    return (YoutubeCommentsClusteringMiniStanza) super.set(fieldName, value);
  }

  @Override
  public YoutubeCommentsClusteringMiniStanza clone() {
    return (YoutubeCommentsClusteringMiniStanza) super.clone();
  }

}
