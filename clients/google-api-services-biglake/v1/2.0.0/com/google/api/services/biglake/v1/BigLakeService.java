/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.biglake.v1;

/**
 * Service definition for BigLakeService (v1).
 *
 * <p>
 * The BigLake API provides access to BigLake Metastore, a serverless, fully managed, and highly available metastore for open-source data that can be used for querying Apache Iceberg tables in BigQuery.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/bigquery/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BigLakeServiceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class BigLakeService extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the BigLake API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://biglake.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://biglake.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public BigLakeService(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  BigLakeService(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code BigLakeService biglake = new BigLakeService(...);}
   *   {@code BigLakeService.Projects.List request = biglake.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code BigLakeService biglake = new BigLakeService(...);}
     *   {@code BigLakeService.Locations.List request = biglake.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Catalogs collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code BigLakeService biglake = new BigLakeService(...);}
       *   {@code BigLakeService.Catalogs.List request = biglake.catalogs().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Catalogs catalogs() {
        return new Catalogs();
      }

      /**
       * The "catalogs" collection of methods.
       */
      public class Catalogs {

        /**
         * Creates a new catalog.
         *
         * Create a request for the method "catalogs.create".
         *
         * This request holds the parameters needed by the biglake server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource where this catalog will be created. Format:
         *        projects/{project_id_or_number}/locations/{location_id}
         * @param content the {@link com.google.api.services.biglake.v1.model.Catalog}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.biglake.v1.model.Catalog content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Catalog> {

          private static final String REST_PATH = "v1/{+parent}/catalogs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new catalog.
           *
           * Create a request for the method "catalogs.create".
           *
           * This request holds the parameters needed by the the biglake server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource where this catalog will be created. Format:
         *        projects/{project_id_or_number}/locations/{location_id}
           * @param content the {@link com.google.api.services.biglake.v1.model.Catalog}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.biglake.v1.model.Catalog content) {
            super(BigLakeService.this, "POST", REST_PATH, content, com.google.api.services.biglake.v1.model.Catalog.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource where this catalog will be created. Format:
           * projects/{project_id_or_number}/locations/{location_id}
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource where this catalog will be created. Format:
         projects/{project_id_or_number}/locations/{location_id}
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource where this catalog will be created. Format:
           * projects/{project_id_or_number}/locations/{location_id}
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The ID to use for the catalog, which will become the final component of the
           * catalog's resource name.
           */
          @com.google.api.client.util.Key
          private java.lang.String catalogId;

          /** Required. The ID to use for the catalog, which will become the final component of the catalog's
         resource name.
           */
          public java.lang.String getCatalogId() {
            return catalogId;
          }

          /**
           * Required. The ID to use for the catalog, which will become the final component of the
           * catalog's resource name.
           */
          public Create setCatalogId(java.lang.String catalogId) {
            this.catalogId = catalogId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes an existing catalog specified by the catalog ID.
         *
         * Create a request for the method "catalogs.delete".
         *
         * This request holds the parameters needed by the biglake server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the catalog to delete. Format:
         *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Catalog> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");

          /**
           * Deletes an existing catalog specified by the catalog ID.
           *
           * Create a request for the method "catalogs.delete".
           *
           * This request holds the parameters needed by the the biglake server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the catalog to delete. Format:
         *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(BigLakeService.this, "DELETE", REST_PATH, null, com.google.api.services.biglake.v1.model.Catalog.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the catalog to delete. Format:
           * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the catalog to delete. Format:
         projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the catalog to delete. Format:
           * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the catalog specified by the resource name.
         *
         * Create a request for the method "catalogs.get".
         *
         * This request holds the parameters needed by the biglake server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the catalog to retrieve. Format:
         *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Catalog> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");

          /**
           * Gets the catalog specified by the resource name.
           *
           * Create a request for the method "catalogs.get".
           *
           * This request holds the parameters needed by the the biglake server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the catalog to retrieve. Format:
         *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.Catalog.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the catalog to retrieve. Format:
           * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the catalog to retrieve. Format:
         projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the catalog to retrieve. Format:
           * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * List all catalogs in a specified project.
         *
         * Create a request for the method "catalogs.list".
         *
         * This request holds the parameters needed by the biglake server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns this collection of catalogs. Format:
         *        projects/{project_id_or_number}/locations/{location_id}
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.ListCatalogsResponse> {

          private static final String REST_PATH = "v1/{+parent}/catalogs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * List all catalogs in a specified project.
           *
           * Create a request for the method "catalogs.list".
           *
           * This request holds the parameters needed by the the biglake server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns this collection of catalogs. Format:
         *        projects/{project_id_or_number}/locations/{location_id}
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.ListCatalogsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns this collection of catalogs. Format:
           * projects/{project_id_or_number}/locations/{location_id}
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns this collection of catalogs. Format:
         projects/{project_id_or_number}/locations/{location_id}
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns this collection of catalogs. Format:
           * projects/{project_id_or_number}/locations/{location_id}
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of catalogs to return. The service may return fewer than this value.
           * If unspecified, at most 50 catalogs will be returned. The maximum value is 1000; values
           * above 1000 will be coerced to 1000.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of catalogs to return. The service may return fewer than this value. If
         unspecified, at most 50 catalogs will be returned. The maximum value is 1000; values above 1000
         will be coerced to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of catalogs to return. The service may return fewer than this value.
           * If unspecified, at most 50 catalogs will be returned. The maximum value is 1000; values
           * above 1000 will be coerced to 1000.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A page token, received from a previous `ListCatalogs` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to `ListCatalogs`
           * must match the call that provided the page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A page token, received from a previous `ListCatalogs` call. Provide this to retrieve the subsequent
         page. When paginating, all other parameters provided to `ListCatalogs` must match the call that
         provided the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A page token, received from a previous `ListCatalogs` call. Provide this to retrieve
           * the subsequent page. When paginating, all other parameters provided to `ListCatalogs`
           * must match the call that provided the page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Databases collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code BigLakeService biglake = new BigLakeService(...);}
         *   {@code BigLakeService.Databases.List request = biglake.databases().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Databases databases() {
          return new Databases();
        }

        /**
         * The "databases" collection of methods.
         */
        public class Databases {

          /**
           * Creates a new database.
           *
           * Create a request for the method "databases.create".
           *
           * This request holds the parameters needed by the biglake server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent resource where this database will be created. Format:
           *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           * @param content the {@link com.google.api.services.biglake.v1.model.Database}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.biglake.v1.model.Database content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Database> {

            private static final String REST_PATH = "v1/{+parent}/databases";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");

            /**
             * Creates a new database.
             *
             * Create a request for the method "databases.create".
             *
             * This request holds the parameters needed by the the biglake server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent resource where this database will be created. Format:
           *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             * @param content the {@link com.google.api.services.biglake.v1.model.Database}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.biglake.v1.model.Database content) {
              super(BigLakeService.this, "POST", REST_PATH, content, com.google.api.services.biglake.v1.model.Database.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent resource where this database will be created. Format:
             * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent resource where this database will be created. Format:
           projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent resource where this database will be created. Format:
             * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the database, which will become the final component of
             * the database's resource name.
             */
            @com.google.api.client.util.Key
            private java.lang.String databaseId;

            /** Required. The ID to use for the database, which will become the final component of the database's
           resource name.
             */
            public java.lang.String getDatabaseId() {
              return databaseId;
            }

            /**
             * Required. The ID to use for the database, which will become the final component of
             * the database's resource name.
             */
            public Create setDatabaseId(java.lang.String databaseId) {
              this.databaseId = databaseId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes an existing database specified by the database ID.
           *
           * Create a request for the method "databases.delete".
           *
           * This request holds the parameters needed by the biglake server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the database to delete. Format: projects/{project_id_or_number}/locations/{loc
           *        ation_id}/catalogs/{catalog_id}/databases/{database_id}
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Database> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");

            /**
             * Deletes an existing database specified by the database ID.
             *
             * Create a request for the method "databases.delete".
             *
             * This request holds the parameters needed by the the biglake server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the database to delete. Format: projects/{project_id_or_number}/locations/{loc
           *        ation_id}/catalogs/{catalog_id}/databases/{database_id}
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(BigLakeService.this, "DELETE", REST_PATH, null, com.google.api.services.biglake.v1.model.Database.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the database to delete. Format: projects/{project_id_or_number}
             * /locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the database to delete. Format: projects/{project_id_or_number}/locations/{lo
           cation_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the database to delete. Format: projects/{project_id_or_number}
             * /locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets the database specified by the resource name.
           *
           * Create a request for the method "databases.get".
           *
           * This request holds the parameters needed by the biglake server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the database to retrieve. Format: projects/{project_id_or_number}/locations/{l
           *        ocation_id}/catalogs/{catalog_id}/databases/{database_id}
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Database> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");

            /**
             * Gets the database specified by the resource name.
             *
             * Create a request for the method "databases.get".
             *
             * This request holds the parameters needed by the the biglake server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the database to retrieve. Format: projects/{project_id_or_number}/locations/{l
           *        ocation_id}/catalogs/{catalog_id}/databases/{database_id}
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.Database.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the database to retrieve. Format: projects/{project_id_or_numbe
             * r}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the database to retrieve. Format: projects/{project_id_or_number}/locations/{
           location_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the database to retrieve. Format: projects/{project_id_or_numbe
             * r}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * List all databases in a specified catalog.
           *
           * Create a request for the method "databases.list".
           *
           * This request holds the parameters needed by the biglake server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent, which owns this collection of databases. Format:
           *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.ListDatabasesResponse> {

            private static final String REST_PATH = "v1/{+parent}/databases";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");

            /**
             * List all databases in a specified catalog.
             *
             * Create a request for the method "databases.list".
             *
             * This request holds the parameters needed by the the biglake server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent, which owns this collection of databases. Format:
           *        projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.ListDatabasesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent, which owns this collection of databases. Format:
             * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent, which owns this collection of databases. Format:
           projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent, which owns this collection of databases. Format:
             * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of databases to return. The service may return fewer than this
             * value. If unspecified, at most 50 databases will be returned. The maximum value is
             * 1000; values above 1000 will be coerced to 1000.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of databases to return. The service may return fewer than this value. If
           unspecified, at most 50 databases will be returned. The maximum value is 1000; values above 1000
           will be coerced to 1000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of databases to return. The service may return fewer than this
             * value. If unspecified, at most 50 databases will be returned. The maximum value is
             * 1000; values above 1000 will be coerced to 1000.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, received from a previous `ListDatabases` call. Provide this to retrieve
             * the subsequent page. When paginating, all other parameters provided to
             * `ListDatabases` must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, received from a previous `ListDatabases` call. Provide this to retrieve the
           subsequent page. When paginating, all other parameters provided to `ListDatabases` must match the
           call that provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, received from a previous `ListDatabases` call. Provide this to retrieve
             * the subsequent page. When paginating, all other parameters provided to
             * `ListDatabases` must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates an existing database specified by the database ID.
           *
           * Create a request for the method "databases.patch".
           *
           * This request holds the parameters needed by the biglake server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cata
           *        logs/{catalog_id}/databases/{database_id}
           * @param content the {@link com.google.api.services.biglake.v1.model.Database}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.biglake.v1.model.Database content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Database> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");

            /**
             * Updates an existing database specified by the database ID.
             *
             * Create a request for the method "databases.patch".
             *
             * This request holds the parameters needed by the the biglake server.  After setting any optional
             * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cata
           *        logs/{catalog_id}/databases/{database_id}
             * @param content the {@link com.google.api.services.biglake.v1.model.Database}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.biglake.v1.model.Database content) {
              super(BigLakeService.this, "PATCH", REST_PATH, content, com.google.api.services.biglake.v1.model.Database.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Output only. The resource name. Format: projects/{project_id_or_number}/locations/{lo
             * cation_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cat
           alogs/{catalog_id}/databases/{database_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Output only. The resource name. Format: projects/{project_id_or_number}/locations/{lo
             * cation_id}/catalogs/{catalog_id}/databases/{database_id}
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * The list of fields to update. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the
             * fields that are allowed to update.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** The list of fields to update. For the `FieldMask` definition, see
           https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If not set,
           defaults to all of the fields that are allowed to update.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * The list of fields to update. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the
             * fields that are allowed to update.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Tables collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code BigLakeService biglake = new BigLakeService(...);}
           *   {@code BigLakeService.Tables.List request = biglake.tables().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Tables tables() {
            return new Tables();
          }

          /**
           * The "tables" collection of methods.
           */
          public class Tables {

            /**
             * Creates a new table.
             *
             * Create a request for the method "tables.create".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The parent resource where this table will be created. Format: projects/{project_id_or_numb
             *        er}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             * @param content the {@link com.google.api.services.biglake.v1.model.Table}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.biglake.v1.model.Table content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Table> {

              private static final String REST_PATH = "v1/{+parent}/tables";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");

              /**
               * Creates a new table.
               *
               * Create a request for the method "tables.create".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The parent resource where this table will be created. Format: projects/{project_id_or_numb
             *        er}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
               * @param content the {@link com.google.api.services.biglake.v1.model.Table}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.biglake.v1.model.Table content) {
                super(BigLakeService.this, "POST", REST_PATH, content, com.google.api.services.biglake.v1.model.Table.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The parent resource where this table will be created. Format: projects/{p
               * roject_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{datab
               * ase_id}
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The parent resource where this table will be created. Format: projects/{project_id_or_num
             ber}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The parent resource where this table will be created. Format: projects/{p
               * roject_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{datab
               * ase_id}
               */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Required. The ID to use for the table, which will become the final component of the
               * table's resource name.
               */
              @com.google.api.client.util.Key
              private java.lang.String tableId;

              /** Required. The ID to use for the table, which will become the final component of the table's
             resource name.
               */
              public java.lang.String getTableId() {
                return tableId;
              }

              /**
               * Required. The ID to use for the table, which will become the final component of the
               * table's resource name.
               */
              public Create setTableId(java.lang.String tableId) {
                this.tableId = tableId;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes an existing table specified by the table ID.
             *
             * Create a request for the method "tables.delete".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the table to delete. Format: projects/{project_id_or_number}/locations/{locati
             *        on_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Table> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");

              /**
               * Deletes an existing table specified by the table ID.
               *
               * Create a request for the method "tables.delete".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the table to delete. Format: projects/{project_id_or_number}/locations/{locati
             *        on_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(BigLakeService.this, "DELETE", REST_PATH, null, com.google.api.services.biglake.v1.model.Table.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The name of the table to delete. Format: projects/{project_id_or_number}/
               * locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table
               * _id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the table to delete. Format: projects/{project_id_or_number}/locations/{locat
             ion_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. The name of the table to delete. Format: projects/{project_id_or_number}/
               * locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table
               * _id}
               */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets the table specified by the resource name.
             *
             * Create a request for the method "tables.get".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the table to retrieve. Format: projects/{project_id_or_number}/locations/{loca
             *        tion_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Table> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");

              /**
               * Gets the table specified by the resource name.
               *
               * Create a request for the method "tables.get".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
               * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the table to retrieve. Format: projects/{project_id_or_number}/locations/{loca
             *        tion_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.Table.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The name of the table to retrieve. Format: projects/{project_id_or_number
               * }/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{tab
               * le_id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the table to retrieve. Format: projects/{project_id_or_number}/locations/{loc
             ation_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. The name of the table to retrieve. Format: projects/{project_id_or_number
               * }/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{tab
               * le_id}
               */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * List all tables in a specified database.
             *
             * Create a request for the method "tables.list".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The parent, which owns this collection of tables. Format: projects/{project_id_or_number}/
             *        locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.ListTablesResponse> {

              private static final String REST_PATH = "v1/{+parent}/tables";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");

              /**
               * List all tables in a specified database.
               *
               * Create a request for the method "tables.list".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
               * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The parent, which owns this collection of tables. Format: projects/{project_id_or_number}/
             *        locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(BigLakeService.this, "GET", REST_PATH, null, com.google.api.services.biglake.v1.model.ListTablesResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The parent, which owns this collection of tables. Format: projects/{proje
               * ct_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_
               * id}
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The parent, which owns this collection of tables. Format: projects/{project_id_or_number}
             /locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The parent, which owns this collection of tables. Format: projects/{proje
               * ct_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_
               * id}
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * The maximum number of tables to return. The service may return fewer than this
               * value. If unspecified, at most 50 tables will be returned. The maximum value is
               * 1000; values above 1000 will be coerced to 1000.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of tables to return. The service may return fewer than this value. If
             unspecified, at most 50 tables will be returned. The maximum value is 1000; values above 1000 will
             be coerced to 1000.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * The maximum number of tables to return. The service may return fewer than this
               * value. If unspecified, at most 50 tables will be returned. The maximum value is
               * 1000; values above 1000 will be coerced to 1000.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /**
               * A page token, received from a previous `ListTables` call. Provide this to retrieve
               * the subsequent page. When paginating, all other parameters provided to `ListTables`
               * must match the call that provided the page token.
               */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** A page token, received from a previous `ListTables` call. Provide this to retrieve the subsequent
             page. When paginating, all other parameters provided to `ListTables` must match the call that
             provided the page token.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /**
               * A page token, received from a previous `ListTables` call. Provide this to retrieve
               * the subsequent page. When paginating, all other parameters provided to `ListTables`
               * must match the call that provided the page token.
               */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              /** The view for the returned tables. */
              @com.google.api.client.util.Key
              private java.lang.String view;

              /** The view for the returned tables.
               */
              public java.lang.String getView() {
                return view;
              }

              /** The view for the returned tables. */
              public List setView(java.lang.String view) {
                this.view = view;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates an existing table specified by the table ID.
             *
             * Create a request for the method "tables.patch".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cata
             *        logs/{catalog_id}/databases/{database_id}/tables/{table_id}
             * @param content the {@link com.google.api.services.biglake.v1.model.Table}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.biglake.v1.model.Table content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Table> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");

              /**
               * Updates an existing table specified by the table ID.
               *
               * Create a request for the method "tables.patch".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cata
             *        logs/{catalog_id}/databases/{database_id}/tables/{table_id}
               * @param content the {@link com.google.api.services.biglake.v1.model.Table}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.biglake.v1.model.Table content) {
                super(BigLakeService.this, "PATCH", REST_PATH, content, com.google.api.services.biglake.v1.model.Table.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Output only. The resource name. Format: projects/{project_id_or_number}/locations/{
               * location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/cat
             alogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Output only. The resource name. Format: projects/{project_id_or_number}/locations/{
               * location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * The list of fields to update. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the
               * fields that are allowed to update.
               */
              @com.google.api.client.util.Key
              private String updateMask;

              /** The list of fields to update. For the `FieldMask` definition, see
             https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If not set,
             defaults to all of the fields that are allowed to update.
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /**
               * The list of fields to update. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the
               * fields that are allowed to update.
               */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }
            /**
             * Renames an existing table specified by the table ID.
             *
             * Create a request for the method "tables.rename".
             *
             * This request holds the parameters needed by the biglake server.  After setting any optional
             * parameters, call the {@link Rename#execute()} method to invoke the remote operation.
             *
             * @param name Required. The table's `name` field is used to identify the table to rename. Format: projects/{projec
             *        t_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tabl
             *        es/{table_id}
             * @param content the {@link com.google.api.services.biglake.v1.model.RenameTableRequest}
             * @return the request
             */
            public Rename rename(java.lang.String name, com.google.api.services.biglake.v1.model.RenameTableRequest content) throws java.io.IOException {
              Rename result = new Rename(name, content);
              initialize(result);
              return result;
            }

            public class Rename extends BigLakeServiceRequest<com.google.api.services.biglake.v1.model.Table> {

              private static final String REST_PATH = "v1/{+name}:rename";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");

              /**
               * Renames an existing table specified by the table ID.
               *
               * Create a request for the method "tables.rename".
               *
               * This request holds the parameters needed by the the biglake server.  After setting any optional
               * parameters, call the {@link Rename#execute()} method to invoke the remote operation. <p> {@link
               * Rename#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The table's `name` field is used to identify the table to rename. Format: projects/{projec
             *        t_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tabl
             *        es/{table_id}
               * @param content the {@link com.google.api.services.biglake.v1.model.RenameTableRequest}
               * @since 1.13
               */
              protected Rename(java.lang.String name, com.google.api.services.biglake.v1.model.RenameTableRequest content) {
                super(BigLakeService.this, "POST", REST_PATH, content, com.google.api.services.biglake.v1.model.Table.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
              }

              @Override
              public Rename set$Xgafv(java.lang.String $Xgafv) {
                return (Rename) super.set$Xgafv($Xgafv);
              }

              @Override
              public Rename setAccessToken(java.lang.String accessToken) {
                return (Rename) super.setAccessToken(accessToken);
              }

              @Override
              public Rename setAlt(java.lang.String alt) {
                return (Rename) super.setAlt(alt);
              }

              @Override
              public Rename setCallback(java.lang.String callback) {
                return (Rename) super.setCallback(callback);
              }

              @Override
              public Rename setFields(java.lang.String fields) {
                return (Rename) super.setFields(fields);
              }

              @Override
              public Rename setKey(java.lang.String key) {
                return (Rename) super.setKey(key);
              }

              @Override
              public Rename setOauthToken(java.lang.String oauthToken) {
                return (Rename) super.setOauthToken(oauthToken);
              }

              @Override
              public Rename setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Rename) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Rename setQuotaUser(java.lang.String quotaUser) {
                return (Rename) super.setQuotaUser(quotaUser);
              }

              @Override
              public Rename setUploadType(java.lang.String uploadType) {
                return (Rename) super.setUploadType(uploadType);
              }

              @Override
              public Rename setUploadProtocol(java.lang.String uploadProtocol) {
                return (Rename) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The table's `name` field is used to identify the table to rename. Format:
               * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/datab
               * ases/{database_id}/tables/{table_id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The table's `name` field is used to identify the table to rename. Format: projects/{proje
             ct_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{tabl
             e_id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. The table's `name` field is used to identify the table to rename. Format:
               * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/datab
               * ases/{database_id}/tables/{table_id}
               */
              public Rename setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/catalogs/[^/]+/databases/[^/]+/tables/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Rename set(String parameterName, Object value) {
                return (Rename) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * Builder for {@link BigLakeService}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link BigLakeService}. */
    @Override
    public BigLakeService build() {
      return new BigLakeService(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BigLakeServiceRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBigLakeServiceRequestInitializer(
        BigLakeServiceRequestInitializer biglakeserviceRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(biglakeserviceRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
