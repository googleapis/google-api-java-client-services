/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.certificatemanager.v1.model;

/**
 * CertificateIssuanceConfig specifies how to issue and manage a certificate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CertificateIssuanceConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. The CA that issues the workload certificate. It includes the CA address, type,
   * authentication to CA service, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CertificateAuthorityConfig certificateAuthorityConfig;

  /**
   * Output only. The creation timestamp of a CertificateIssuanceConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Required. The key algorithm to use when generating the private key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyAlgorithm;

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Required. Workload certificate lifetime requested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lifetime;

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be
   * unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before
   * renewing the certificate. Must be a number between 1-99, inclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rotationWindowPercentage;

  /**
   * Output only. The last update timestamp of a CertificateIssuanceConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Required. The CA that issues the workload certificate. It includes the CA address, type,
   * authentication to CA service, etc.
   * @return value or {@code null} for none
   */
  public CertificateAuthorityConfig getCertificateAuthorityConfig() {
    return certificateAuthorityConfig;
  }

  /**
   * Required. The CA that issues the workload certificate. It includes the CA address, type,
   * authentication to CA service, etc.
   * @param certificateAuthorityConfig certificateAuthorityConfig or {@code null} for none
   */
  public CertificateIssuanceConfig setCertificateAuthorityConfig(CertificateAuthorityConfig certificateAuthorityConfig) {
    this.certificateAuthorityConfig = certificateAuthorityConfig;
    return this;
  }

  /**
   * Output only. The creation timestamp of a CertificateIssuanceConfig.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The creation timestamp of a CertificateIssuanceConfig.
   * @param createTime createTime or {@code null} for none
   */
  public CertificateIssuanceConfig setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   * @param description description or {@code null} for none
   */
  public CertificateIssuanceConfig setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Required. The key algorithm to use when generating the private key.
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyAlgorithm() {
    return keyAlgorithm;
  }

  /**
   * Required. The key algorithm to use when generating the private key.
   * @param keyAlgorithm keyAlgorithm or {@code null} for none
   */
  public CertificateIssuanceConfig setKeyAlgorithm(java.lang.String keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   * @param labels labels or {@code null} for none
   */
  public CertificateIssuanceConfig setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Required. Workload certificate lifetime requested.
   * @return value or {@code null} for none
   */
  public String getLifetime() {
    return lifetime;
  }

  /**
   * Required. Workload certificate lifetime requested.
   * @param lifetime lifetime or {@code null} for none
   */
  public CertificateIssuanceConfig setLifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be
   * unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be
   * unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
   * @param name name or {@code null} for none
   */
  public CertificateIssuanceConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before
   * renewing the certificate. Must be a number between 1-99, inclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRotationWindowPercentage() {
    return rotationWindowPercentage;
  }

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before
   * renewing the certificate. Must be a number between 1-99, inclusive.
   * @param rotationWindowPercentage rotationWindowPercentage or {@code null} for none
   */
  public CertificateIssuanceConfig setRotationWindowPercentage(java.lang.Integer rotationWindowPercentage) {
    this.rotationWindowPercentage = rotationWindowPercentage;
    return this;
  }

  /**
   * Output only. The last update timestamp of a CertificateIssuanceConfig.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The last update timestamp of a CertificateIssuanceConfig.
   * @param updateTime updateTime or {@code null} for none
   */
  public CertificateIssuanceConfig setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public CertificateIssuanceConfig set(String fieldName, Object value) {
    return (CertificateIssuanceConfig) super.set(fieldName, value);
  }

  @Override
  public CertificateIssuanceConfig clone() {
    return (CertificateIssuanceConfig) super.clone();
  }

}
