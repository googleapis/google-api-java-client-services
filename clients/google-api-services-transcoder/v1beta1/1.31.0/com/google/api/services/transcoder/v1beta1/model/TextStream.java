/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.transcoder.v1beta1.model;

/**
 * Encoding of a text stream. For example, closed captions or subtitles.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Transcoder API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TextStream extends com.google.api.client.json.GenericJson {

  /**
   * The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' -
   * 'ttml' - 'cea608' - 'cea708' - 'webvtt'
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String codec;

  /**
   * Required. The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see
   * https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TextAtom> mapping;

  static {
    // hack to force ProGuard to consider TextAtom used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(TextAtom.class);
  }

  /**
   * The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' -
   * 'ttml' - 'cea608' - 'cea708' - 'webvtt'
   * @return value or {@code null} for none
   */
  public java.lang.String getCodec() {
    return codec;
  }

  /**
   * The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' -
   * 'ttml' - 'cea608' - 'cea708' - 'webvtt'
   * @param codec codec or {@code null} for none
   */
  public TextStream setCodec(java.lang.String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Required. The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see
   * https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Required. The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see
   * https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * @param languageCode languageCode or {@code null} for none
   */
  public TextStream setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
   * @return value or {@code null} for none
   */
  public java.util.List<TextAtom> getMapping() {
    return mapping;
  }

  /**
   * The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
   * @param mapping mapping or {@code null} for none
   */
  public TextStream setMapping(java.util.List<TextAtom> mapping) {
    this.mapping = mapping;
    return this;
  }

  @Override
  public TextStream set(String fieldName, Object value) {
    return (TextStream) super.set(fieldName, value);
  }

  @Override
  public TextStream clone() {
    return (TextStream) super.clone();
  }

}
