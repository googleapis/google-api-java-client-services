/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.commentanalyzer.v1alpha1.model;

/**
 * A type of context specific to a comment left on a single-threaded comment message board, where
 * comments are either a top level comment or the child of a top level comment.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Perspective Comment Analyzer API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ArticleAndParentComment extends com.google.api.client.json.GenericJson {

  /**
   * The source content about which the comment was made (article text, article summary, video
   * transcript, etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextEntry article;

  /**
   * Refers to text that is a direct parent of the source comment, such as in a one-deep threaded
   * message board. This field will only be present for comments that are replies to other comments
   * and will not be populated for direct comments on the article_text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextEntry parentComment;

  /**
   * The source content about which the comment was made (article text, article summary, video
   * transcript, etc).
   * @return value or {@code null} for none
   */
  public TextEntry getArticle() {
    return article;
  }

  /**
   * The source content about which the comment was made (article text, article summary, video
   * transcript, etc).
   * @param article article or {@code null} for none
   */
  public ArticleAndParentComment setArticle(TextEntry article) {
    this.article = article;
    return this;
  }

  /**
   * Refers to text that is a direct parent of the source comment, such as in a one-deep threaded
   * message board. This field will only be present for comments that are replies to other comments
   * and will not be populated for direct comments on the article_text.
   * @return value or {@code null} for none
   */
  public TextEntry getParentComment() {
    return parentComment;
  }

  /**
   * Refers to text that is a direct parent of the source comment, such as in a one-deep threaded
   * message board. This field will only be present for comments that are replies to other comments
   * and will not be populated for direct comments on the article_text.
   * @param parentComment parentComment or {@code null} for none
   */
  public ArticleAndParentComment setParentComment(TextEntry parentComment) {
    this.parentComment = parentComment;
    return this;
  }

  @Override
  public ArticleAndParentComment set(String fieldName, Object value) {
    return (ArticleAndParentComment) super.set(fieldName, value);
  }

  @Override
  public ArticleAndParentComment clone() {
    return (ArticleAndParentComment) super.clone();
  }

}
