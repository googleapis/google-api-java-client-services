/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigtableadmin.v2.model;

/**
 * Request message for BigtableInstanceAdmin.CreateMaterializedView.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Bigtable Admin API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CreateMaterializedViewRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The materialized view to create.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MaterializedView materializedView;

  /**
   * Required. The ID to use for the materialized view, which will become the final component of the
   * materialized view's resource name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String materializedViewId;

  /**
   * Required. The parent instance where this materialized view will be created. Format:
   * `projects/{project}/instances/{instance}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parent;

  /**
   * Required. The materialized view to create.
   * @return value or {@code null} for none
   */
  public MaterializedView getMaterializedView() {
    return materializedView;
  }

  /**
   * Required. The materialized view to create.
   * @param materializedView materializedView or {@code null} for none
   */
  public CreateMaterializedViewRequest setMaterializedView(MaterializedView materializedView) {
    this.materializedView = materializedView;
    return this;
  }

  /**
   * Required. The ID to use for the materialized view, which will become the final component of the
   * materialized view's resource name.
   * @return value or {@code null} for none
   */
  public java.lang.String getMaterializedViewId() {
    return materializedViewId;
  }

  /**
   * Required. The ID to use for the materialized view, which will become the final component of the
   * materialized view's resource name.
   * @param materializedViewId materializedViewId or {@code null} for none
   */
  public CreateMaterializedViewRequest setMaterializedViewId(java.lang.String materializedViewId) {
    this.materializedViewId = materializedViewId;
    return this;
  }

  /**
   * Required. The parent instance where this materialized view will be created. Format:
   * `projects/{project}/instances/{instance}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getParent() {
    return parent;
  }

  /**
   * Required. The parent instance where this materialized view will be created. Format:
   * `projects/{project}/instances/{instance}`.
   * @param parent parent or {@code null} for none
   */
  public CreateMaterializedViewRequest setParent(java.lang.String parent) {
    this.parent = parent;
    return this;
  }

  @Override
  public CreateMaterializedViewRequest set(String fieldName, Object value) {
    return (CreateMaterializedViewRequest) super.set(fieldName, value);
  }

  @Override
  public CreateMaterializedViewRequest clone() {
    return (CreateMaterializedViewRequest) super.clone();
  }

}
