/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v2.model;

/**
 * An ActionResult represents the result of an Action being run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsRemoteexecutionV1testActionResult extends com.google.api.client.json.GenericJson {

  /**
   * The exit code of the command.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer exitCode;

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member. As an example, suppose the Action had an output
   * directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file
   * named `bar` and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ```
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputDirectory> outputDirectories;

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present in the output list.
   *
   * If the action does not produce the requested output, or produces a directory where a regular
   * file is expected or vice versa, then that output will be omitted from the list. The server is
   * free to arrange the output list as desired; clients MUST NOT assume that the output list is
   * sorted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputFile> outputFiles;

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stderr_raw` for when this will be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsRemoteexecutionV1testDigest stderrDigest;

  /**
   * The standard error buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stderr_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stderrRaw;

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stdout_raw` for when this will be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsRemoteexecutionV1testDigest stdoutDigest;

  /**
   * The standard output buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stdout_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stdoutRaw;

  /**
   * The exit code of the command.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExitCode() {
    return exitCode;
  }

  /**
   * The exit code of the command.
   * @param exitCode exitCode or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setExitCode(java.lang.Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member. As an example, suppose the Action had an output
   * directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file
   * named `bar` and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ```
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputDirectory> getOutputDirectories() {
    return outputDirectories;
  }

  /**
   * The output directories of the action. For each output directory requested in the
   * `output_directories` field of the Action, if the corresponding directory existed after the
   * action completed, a single entry will be present in the output list, which will contain the
   * digest of a Tree message containing the directory tree, and the path equal exactly to the
   * corresponding Action output_directories member. As an example, suppose the Action had an output
   * directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file
   * named `bar` and a directory named `foo` with an executable file named `baz`. Then,
   * output_directory will contain (hashes shortened for readability):
   *
   * ```json // OutputDirectory proto: {   path: "a/b/dir"   tree_digest: {     hash:
   * "4a73bc9d03...",     size: 55   } } // Tree proto with hash "4a73bc9d03..." and size 55: {
   * root: {     files: [       {         name: "bar",         digest: {           hash:
   * "4a73bc9d03...",           size: 65534         }       }     ],     directories: [       {
   * name: "foo",         digest: {           hash: "4cf2eda940...",           size: 43         }
   * }     ]   }   children : {     // (Directory proto with hash "4cf2eda940..." and size 43)
   * files: [       {         name: "baz",         digest: {           hash: "b2c941073e...",
   * size: 1294,         },         is_executable: true       }     ]   } } ```
   * @param outputDirectories outputDirectories or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setOutputDirectories(java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputDirectory> outputDirectories) {
    this.outputDirectories = outputDirectories;
    return this;
  }

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present in the output list.
   *
   * If the action does not produce the requested output, or produces a directory where a regular
   * file is expected or vice versa, then that output will be omitted from the list. The server is
   * free to arrange the output list as desired; clients MUST NOT assume that the output list is
   * sorted.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputFile> getOutputFiles() {
    return outputFiles;
  }

  /**
   * The output files of the action. For each output file requested in the `output_files` field of
   * the Action, if the corresponding file existed after the action completed, a single entry will
   * be present in the output list.
   *
   * If the action does not produce the requested output, or produces a directory where a regular
   * file is expected or vice versa, then that output will be omitted from the list. The server is
   * free to arrange the output list as desired; clients MUST NOT assume that the output list is
   * sorted.
   * @param outputFiles outputFiles or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setOutputFiles(java.util.List<GoogleDevtoolsRemoteexecutionV1testOutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stderr_raw` for when this will be set.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testDigest getStderrDigest() {
    return stderrDigest;
  }

  /**
   * The digest for a blob containing the standard error of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stderr_raw` for when this will be set.
   * @param stderrDigest stderrDigest or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setStderrDigest(GoogleDevtoolsRemoteexecutionV1testDigest stderrDigest) {
    this.stderrDigest = stderrDigest;
    return this;
  }

  /**
   * The standard error buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stderr_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #decodeStderrRaw()
   * @return value or {@code null} for none
   */
  public java.lang.String getStderrRaw() {
    return stderrRaw;
  }

  /**
   * The standard error buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stderr_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #getStderrRaw()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeStderrRaw() {
    return com.google.api.client.util.Base64.decodeBase64(stderrRaw);
  }

  /**
   * The standard error buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stderr_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #encodeStderrRaw()
   * @param stderrRaw stderrRaw or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setStderrRaw(java.lang.String stderrRaw) {
    this.stderrRaw = stderrRaw;
    return this;
  }

  /**
   * The standard error buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stderr_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #setStderrRaw()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult encodeStderrRaw(byte[] stderrRaw) {
    this.stderrRaw = com.google.api.client.util.Base64.encodeBase64URLSafeString(stderrRaw);
    return this;
  }

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stdout_raw` for when this will be set.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testDigest getStdoutDigest() {
    return stdoutDigest;
  }

  /**
   * The digest for a blob containing the standard output of the action, which can be retrieved from
   * the ContentAddressableStorage. See `stdout_raw` for when this will be set.
   * @param stdoutDigest stdoutDigest or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setStdoutDigest(GoogleDevtoolsRemoteexecutionV1testDigest stdoutDigest) {
    this.stdoutDigest = stdoutDigest;
    return this;
  }

  /**
   * The standard output buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stdout_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #decodeStdoutRaw()
   * @return value or {@code null} for none
   */
  public java.lang.String getStdoutRaw() {
    return stdoutRaw;
  }

  /**
   * The standard output buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stdout_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #getStdoutRaw()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeStdoutRaw() {
    return com.google.api.client.util.Base64.decodeBase64(stdoutRaw);
  }

  /**
   * The standard output buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stdout_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #encodeStdoutRaw()
   * @param stdoutRaw stdoutRaw or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult setStdoutRaw(java.lang.String stdoutRaw) {
    this.stdoutRaw = stdoutRaw;
    return this;
  }

  /**
   * The standard output buffer of the action. The server will determine, based on the size of the
   * buffer, whether to return it in raw form or to return a digest in `stdout_digest` that points
   * to the buffer. If neither is set, then the buffer is empty. The client SHOULD NOT assume it
   * will get one of the raw buffer or a digest on any given request and should be prepared to
   * handle either.
   * @see #setStdoutRaw()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleDevtoolsRemoteexecutionV1testActionResult encodeStdoutRaw(byte[] stdoutRaw) {
    this.stdoutRaw = com.google.api.client.util.Base64.encodeBase64URLSafeString(stdoutRaw);
    return this;
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testActionResult set(String fieldName, Object value) {
    return (GoogleDevtoolsRemoteexecutionV1testActionResult) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testActionResult clone() {
    return (GoogleDevtoolsRemoteexecutionV1testActionResult) super.clone();
  }

}
