/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v1.model;

/**
 * A filter to reduce the amount of data charted in relevant widgets.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DashboardFilter extends com.google.api.client.json.GenericJson {

  /**
   * The specified filter type
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filterType;

  /**
   * Required. The key for the label
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String labelKey;

  /**
   * A variable-length string value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stringValue;

  /**
   * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the
   * dashboard filter will be applied to all relevant widgets in the dashboard.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String templateVariable;

  /**
   * The specified filter type
   * @return value or {@code null} for none
   */
  public java.lang.String getFilterType() {
    return filterType;
  }

  /**
   * The specified filter type
   * @param filterType filterType or {@code null} for none
   */
  public DashboardFilter setFilterType(java.lang.String filterType) {
    this.filterType = filterType;
    return this;
  }

  /**
   * Required. The key for the label
   * @return value or {@code null} for none
   */
  public java.lang.String getLabelKey() {
    return labelKey;
  }

  /**
   * Required. The key for the label
   * @param labelKey labelKey or {@code null} for none
   */
  public DashboardFilter setLabelKey(java.lang.String labelKey) {
    this.labelKey = labelKey;
    return this;
  }

  /**
   * A variable-length string value.
   * @return value or {@code null} for none
   */
  public java.lang.String getStringValue() {
    return stringValue;
  }

  /**
   * A variable-length string value.
   * @param stringValue stringValue or {@code null} for none
   */
  public DashboardFilter setStringValue(java.lang.String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the
   * dashboard filter will be applied to all relevant widgets in the dashboard.
   * @return value or {@code null} for none
   */
  public java.lang.String getTemplateVariable() {
    return templateVariable;
  }

  /**
   * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the
   * dashboard filter will be applied to all relevant widgets in the dashboard.
   * @param templateVariable templateVariable or {@code null} for none
   */
  public DashboardFilter setTemplateVariable(java.lang.String templateVariable) {
    this.templateVariable = templateVariable;
    return this;
  }

  @Override
  public DashboardFilter set(String fieldName, Object value) {
    return (DashboardFilter) super.set(fieldName, value);
  }

  @Override
  public DashboardFilter clone() {
    return (DashboardFilter) super.clone();
  }

}
