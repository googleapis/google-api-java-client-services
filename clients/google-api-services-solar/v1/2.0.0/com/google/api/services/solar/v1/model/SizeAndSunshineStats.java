/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.solar.v1.model;

/**
 * Size and sunniness quantiles of a roof, or part of a roof.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Solar API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SizeAndSunshineStats extends com.google.api.client.json.GenericJson {

  /**
   * The area of the roof or roof segment, in m^2. This is the roof area (accounting for tilt), not
   * the ground footprint area.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float areaMeters2;

  /**
   * The ground footprint area covered by the roof or roof segment, in m^2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float groundAreaMeters2;

  /**
   * Quantiles of the pointwise sunniness across the area. If there are N values here, this
   * represents the (N-1)-iles. For example, if there are 5 values, then they would be the quartiles
   * (min, 25%, 50%, 75%, max). Values are in annual kWh/kW like max_sunshine_hours_per_year.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> sunshineQuantiles;

  /**
   * The area of the roof or roof segment, in m^2. This is the roof area (accounting for tilt), not
   * the ground footprint area.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAreaMeters2() {
    return areaMeters2;
  }

  /**
   * The area of the roof or roof segment, in m^2. This is the roof area (accounting for tilt), not
   * the ground footprint area.
   * @param areaMeters2 areaMeters2 or {@code null} for none
   */
  public SizeAndSunshineStats setAreaMeters2(java.lang.Float areaMeters2) {
    this.areaMeters2 = areaMeters2;
    return this;
  }

  /**
   * The ground footprint area covered by the roof or roof segment, in m^2.
   * @return value or {@code null} for none
   */
  public java.lang.Float getGroundAreaMeters2() {
    return groundAreaMeters2;
  }

  /**
   * The ground footprint area covered by the roof or roof segment, in m^2.
   * @param groundAreaMeters2 groundAreaMeters2 or {@code null} for none
   */
  public SizeAndSunshineStats setGroundAreaMeters2(java.lang.Float groundAreaMeters2) {
    this.groundAreaMeters2 = groundAreaMeters2;
    return this;
  }

  /**
   * Quantiles of the pointwise sunniness across the area. If there are N values here, this
   * represents the (N-1)-iles. For example, if there are 5 values, then they would be the quartiles
   * (min, 25%, 50%, 75%, max). Values are in annual kWh/kW like max_sunshine_hours_per_year.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getSunshineQuantiles() {
    return sunshineQuantiles;
  }

  /**
   * Quantiles of the pointwise sunniness across the area. If there are N values here, this
   * represents the (N-1)-iles. For example, if there are 5 values, then they would be the quartiles
   * (min, 25%, 50%, 75%, max). Values are in annual kWh/kW like max_sunshine_hours_per_year.
   * @param sunshineQuantiles sunshineQuantiles or {@code null} for none
   */
  public SizeAndSunshineStats setSunshineQuantiles(java.util.List<java.lang.Float> sunshineQuantiles) {
    this.sunshineQuantiles = sunshineQuantiles;
    return this;
  }

  @Override
  public SizeAndSunshineStats set(String fieldName, Object value) {
    return (SizeAndSunshineStats) super.set(fieldName, value);
  }

  @Override
  public SizeAndSunshineStats clone() {
    return (SizeAndSunshineStats) super.clone();
  }

}
