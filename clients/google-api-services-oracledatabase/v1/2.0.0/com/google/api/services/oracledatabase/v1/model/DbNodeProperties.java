/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Various properties and settings associated with Db node.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DbNodeProperties extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Local storage per database node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dbNodeStorageSizeGb;

  /**
   * Optional. Database server OCID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dbServerOcid;

  /**
   * Optional. DNS
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Memory allocated in GBs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memorySizeGb;

  /**
   * Output only. OCID of database node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ocid;

  /**
   * Optional. OCPU count per database node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ocpuCount;

  /**
   * Output only. State of the database node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Total CPU core count of the database node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer totalCpuCoreCount;

  /**
   * Optional. Local storage per database node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDbNodeStorageSizeGb() {
    return dbNodeStorageSizeGb;
  }

  /**
   * Optional. Local storage per database node.
   * @param dbNodeStorageSizeGb dbNodeStorageSizeGb or {@code null} for none
   */
  public DbNodeProperties setDbNodeStorageSizeGb(java.lang.Integer dbNodeStorageSizeGb) {
    this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
    return this;
  }

  /**
   * Optional. Database server OCID.
   * @return value or {@code null} for none
   */
  public java.lang.String getDbServerOcid() {
    return dbServerOcid;
  }

  /**
   * Optional. Database server OCID.
   * @param dbServerOcid dbServerOcid or {@code null} for none
   */
  public DbNodeProperties setDbServerOcid(java.lang.String dbServerOcid) {
    this.dbServerOcid = dbServerOcid;
    return this;
  }

  /**
   * Optional. DNS
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Optional. DNS
   * @param hostname hostname or {@code null} for none
   */
  public DbNodeProperties setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Memory allocated in GBs.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemorySizeGb() {
    return memorySizeGb;
  }

  /**
   * Memory allocated in GBs.
   * @param memorySizeGb memorySizeGb or {@code null} for none
   */
  public DbNodeProperties setMemorySizeGb(java.lang.Integer memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Output only. OCID of database node.
   * @return value or {@code null} for none
   */
  public java.lang.String getOcid() {
    return ocid;
  }

  /**
   * Output only. OCID of database node.
   * @param ocid ocid or {@code null} for none
   */
  public DbNodeProperties setOcid(java.lang.String ocid) {
    this.ocid = ocid;
    return this;
  }

  /**
   * Optional. OCPU count per database node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOcpuCount() {
    return ocpuCount;
  }

  /**
   * Optional. OCPU count per database node.
   * @param ocpuCount ocpuCount or {@code null} for none
   */
  public DbNodeProperties setOcpuCount(java.lang.Integer ocpuCount) {
    this.ocpuCount = ocpuCount;
    return this;
  }

  /**
   * Output only. State of the database node.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the database node.
   * @param state state or {@code null} for none
   */
  public DbNodeProperties setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Total CPU core count of the database node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTotalCpuCoreCount() {
    return totalCpuCoreCount;
  }

  /**
   * Total CPU core count of the database node.
   * @param totalCpuCoreCount totalCpuCoreCount or {@code null} for none
   */
  public DbNodeProperties setTotalCpuCoreCount(java.lang.Integer totalCpuCoreCount) {
    this.totalCpuCoreCount = totalCpuCoreCount;
    return this;
  }

  @Override
  public DbNodeProperties set(String fieldName, Object value) {
    return (DbNodeProperties) super.set(fieldName, value);
  }

  @Override
  public DbNodeProperties clone() {
    return (DbNodeProperties) super.clone();
  }

}
