/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.appengine.model;

/**
 * SSL configuration for a DomainMapping resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the App Engine Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SslSettings extends com.google.api.client.json.GenericJson {

  /**
   * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this
   * field will remove SSL support.By default, a managed certificate is automatically created for
   * every domain mapping. To omit SSL support or to configure SSL manually, specify
   * SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer
   * the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example:
   * 12345.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificateId;

  /**
   * ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable.
   * Until the new managed certificate has been successfully provisioned, the previous SSL state
   * will be preserved. Once the provisioning process completes, the certificate_id field will
   * reflect the new managed certificate and this field will be left empty. To remove SSL support
   * while there is still a pending managed certificate, clear the certificate_id field with an
   * UpdateDomainMappingRequest.@OutputOnly
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pendingManagedCertificateId;

  /**
   * SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically
   * provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for
   * this domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sslManagementType;

  /**
   * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this
   * field will remove SSL support.By default, a managed certificate is automatically created for
   * every domain mapping. To omit SSL support or to configure SSL manually, specify
   * SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer
   * the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example:
   * 12345.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificateId() {
    return certificateId;
  }

  /**
   * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this
   * field will remove SSL support.By default, a managed certificate is automatically created for
   * every domain mapping. To omit SSL support or to configure SSL manually, specify
   * SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer
   * the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example:
   * 12345.
   * @param certificateId certificateId or {@code null} for none
   */
  public SslSettings setCertificateId(java.lang.String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable.
   * Until the new managed certificate has been successfully provisioned, the previous SSL state
   * will be preserved. Once the provisioning process completes, the certificate_id field will
   * reflect the new managed certificate and this field will be left empty. To remove SSL support
   * while there is still a pending managed certificate, clear the certificate_id field with an
   * UpdateDomainMappingRequest.@OutputOnly
   * @return value or {@code null} for none
   */
  public java.lang.String getPendingManagedCertificateId() {
    return pendingManagedCertificateId;
  }

  /**
   * ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable.
   * Until the new managed certificate has been successfully provisioned, the previous SSL state
   * will be preserved. Once the provisioning process completes, the certificate_id field will
   * reflect the new managed certificate and this field will be left empty. To remove SSL support
   * while there is still a pending managed certificate, clear the certificate_id field with an
   * UpdateDomainMappingRequest.@OutputOnly
   * @param pendingManagedCertificateId pendingManagedCertificateId or {@code null} for none
   */
  public SslSettings setPendingManagedCertificateId(java.lang.String pendingManagedCertificateId) {
    this.pendingManagedCertificateId = pendingManagedCertificateId;
    return this;
  }

  /**
   * SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically
   * provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for
   * this domain.
   * @return value or {@code null} for none
   */
  public java.lang.String getSslManagementType() {
    return sslManagementType;
  }

  /**
   * SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically
   * provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for
   * this domain.
   * @param sslManagementType sslManagementType or {@code null} for none
   */
  public SslSettings setSslManagementType(java.lang.String sslManagementType) {
    this.sslManagementType = sslManagementType;
    return this;
  }

  @Override
  public SslSettings set(String fieldName, Object value) {
    return (SslSettings) super.set(fieldName, value);
  }

  @Override
  public SslSettings clone() {
    return (SslSettings) super.clone();
  }

}
