/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v1.model;

/**
 * Eventing Config details of a connector version.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EventingConfigTemplate extends com.google.api.client.json.GenericJson {

  /**
   * Additional fields that need to be rendered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConfigVariableTemplate> additionalVariables;

  static {
    // hack to force ProGuard to consider ConfigVariableTemplate used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ConfigVariableTemplate.class);
  }

  /**
   * AuthConfigTemplates represents the auth values for the webhook adapter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuthConfigTemplate> authConfigTemplates;

  static {
    // hack to force ProGuard to consider AuthConfigTemplate used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AuthConfigTemplate.class);
  }

  /**
   * Auto refresh to extend webhook life.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoRefresh;

  /**
   * Auto Registration supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoRegistrationSupported;

  /**
   * Encryption key (can be either Google managed or CMEK).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ConfigVariableTemplate encryptionKeyTemplate;

  /**
   * Enrichment Supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enrichmentSupported;

  /**
   * The type of the event listener for a specific connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventListenerType;

  /**
   * Is Eventing Supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isEventingSupported;

  /**
   * ListenerAuthConfigTemplates represents the auth values for the event listener.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuthConfigTemplate> listenerAuthConfigTemplates;

  static {
    // hack to force ProGuard to consider AuthConfigTemplate used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AuthConfigTemplate.class);
  }

  /**
   * Proxy destination config template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DestinationConfigTemplate proxyDestinationConfig;

  /**
   * Registration host destination config template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DestinationConfigTemplate registrationDestinationConfig;

  /**
   * Trigger Config fields that needs to be rendered
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConfigVariableTemplate> triggerConfigVariables;

  static {
    // hack to force ProGuard to consider ConfigVariableTemplate used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ConfigVariableTemplate.class);
  }

  /**
   * Additional fields that need to be rendered.
   * @return value or {@code null} for none
   */
  public java.util.List<ConfigVariableTemplate> getAdditionalVariables() {
    return additionalVariables;
  }

  /**
   * Additional fields that need to be rendered.
   * @param additionalVariables additionalVariables or {@code null} for none
   */
  public EventingConfigTemplate setAdditionalVariables(java.util.List<ConfigVariableTemplate> additionalVariables) {
    this.additionalVariables = additionalVariables;
    return this;
  }

  /**
   * AuthConfigTemplates represents the auth values for the webhook adapter.
   * @return value or {@code null} for none
   */
  public java.util.List<AuthConfigTemplate> getAuthConfigTemplates() {
    return authConfigTemplates;
  }

  /**
   * AuthConfigTemplates represents the auth values for the webhook adapter.
   * @param authConfigTemplates authConfigTemplates or {@code null} for none
   */
  public EventingConfigTemplate setAuthConfigTemplates(java.util.List<AuthConfigTemplate> authConfigTemplates) {
    this.authConfigTemplates = authConfigTemplates;
    return this;
  }

  /**
   * Auto refresh to extend webhook life.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoRefresh() {
    return autoRefresh;
  }

  /**
   * Auto refresh to extend webhook life.
   * @param autoRefresh autoRefresh or {@code null} for none
   */
  public EventingConfigTemplate setAutoRefresh(java.lang.Boolean autoRefresh) {
    this.autoRefresh = autoRefresh;
    return this;
  }

  /**
   * Auto Registration supported.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoRegistrationSupported() {
    return autoRegistrationSupported;
  }

  /**
   * Auto Registration supported.
   * @param autoRegistrationSupported autoRegistrationSupported or {@code null} for none
   */
  public EventingConfigTemplate setAutoRegistrationSupported(java.lang.Boolean autoRegistrationSupported) {
    this.autoRegistrationSupported = autoRegistrationSupported;
    return this;
  }

  /**
   * Encryption key (can be either Google managed or CMEK).
   * @return value or {@code null} for none
   */
  public ConfigVariableTemplate getEncryptionKeyTemplate() {
    return encryptionKeyTemplate;
  }

  /**
   * Encryption key (can be either Google managed or CMEK).
   * @param encryptionKeyTemplate encryptionKeyTemplate or {@code null} for none
   */
  public EventingConfigTemplate setEncryptionKeyTemplate(ConfigVariableTemplate encryptionKeyTemplate) {
    this.encryptionKeyTemplate = encryptionKeyTemplate;
    return this;
  }

  /**
   * Enrichment Supported.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnrichmentSupported() {
    return enrichmentSupported;
  }

  /**
   * Enrichment Supported.
   * @param enrichmentSupported enrichmentSupported or {@code null} for none
   */
  public EventingConfigTemplate setEnrichmentSupported(java.lang.Boolean enrichmentSupported) {
    this.enrichmentSupported = enrichmentSupported;
    return this;
  }

  /**
   * The type of the event listener for a specific connector.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventListenerType() {
    return eventListenerType;
  }

  /**
   * The type of the event listener for a specific connector.
   * @param eventListenerType eventListenerType or {@code null} for none
   */
  public EventingConfigTemplate setEventListenerType(java.lang.String eventListenerType) {
    this.eventListenerType = eventListenerType;
    return this;
  }

  /**
   * Is Eventing Supported.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsEventingSupported() {
    return isEventingSupported;
  }

  /**
   * Is Eventing Supported.
   * @param isEventingSupported isEventingSupported or {@code null} for none
   */
  public EventingConfigTemplate setIsEventingSupported(java.lang.Boolean isEventingSupported) {
    this.isEventingSupported = isEventingSupported;
    return this;
  }

  /**
   * ListenerAuthConfigTemplates represents the auth values for the event listener.
   * @return value or {@code null} for none
   */
  public java.util.List<AuthConfigTemplate> getListenerAuthConfigTemplates() {
    return listenerAuthConfigTemplates;
  }

  /**
   * ListenerAuthConfigTemplates represents the auth values for the event listener.
   * @param listenerAuthConfigTemplates listenerAuthConfigTemplates or {@code null} for none
   */
  public EventingConfigTemplate setListenerAuthConfigTemplates(java.util.List<AuthConfigTemplate> listenerAuthConfigTemplates) {
    this.listenerAuthConfigTemplates = listenerAuthConfigTemplates;
    return this;
  }

  /**
   * Proxy destination config template.
   * @return value or {@code null} for none
   */
  public DestinationConfigTemplate getProxyDestinationConfig() {
    return proxyDestinationConfig;
  }

  /**
   * Proxy destination config template.
   * @param proxyDestinationConfig proxyDestinationConfig or {@code null} for none
   */
  public EventingConfigTemplate setProxyDestinationConfig(DestinationConfigTemplate proxyDestinationConfig) {
    this.proxyDestinationConfig = proxyDestinationConfig;
    return this;
  }

  /**
   * Registration host destination config template.
   * @return value or {@code null} for none
   */
  public DestinationConfigTemplate getRegistrationDestinationConfig() {
    return registrationDestinationConfig;
  }

  /**
   * Registration host destination config template.
   * @param registrationDestinationConfig registrationDestinationConfig or {@code null} for none
   */
  public EventingConfigTemplate setRegistrationDestinationConfig(DestinationConfigTemplate registrationDestinationConfig) {
    this.registrationDestinationConfig = registrationDestinationConfig;
    return this;
  }

  /**
   * Trigger Config fields that needs to be rendered
   * @return value or {@code null} for none
   */
  public java.util.List<ConfigVariableTemplate> getTriggerConfigVariables() {
    return triggerConfigVariables;
  }

  /**
   * Trigger Config fields that needs to be rendered
   * @param triggerConfigVariables triggerConfigVariables or {@code null} for none
   */
  public EventingConfigTemplate setTriggerConfigVariables(java.util.List<ConfigVariableTemplate> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
    return this;
  }

  @Override
  public EventingConfigTemplate set(String fieldName, Object value) {
    return (EventingConfigTemplate) super.set(fieldName, value);
  }

  @Override
  public EventingConfigTemplate clone() {
    return (EventingConfigTemplate) super.clone();
  }

}
