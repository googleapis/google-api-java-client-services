/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Starburst frame-level dense data.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchFrameStarburstData extends com.google.api.client.json.GenericJson {

  /**
   * Raw float feature vector of the starburst representation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> denseVector;

  /**
   * Starburst version. Possible values are: STARBURST_TEXT_V4 STARBURST_TEXT_V4_5
   * STARBURST_TEXT_V4_PLC STARBURST_TEXT_V5
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sbVersion;

  /**
   * Timestamp in milliseconds for this frame.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long timestampMs;

  /**
   * Raw float feature vector of the starburst representation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getDenseVector() {
    return denseVector;
  }

  /**
   * Raw float feature vector of the starburst representation.
   * @param denseVector denseVector or {@code null} for none
   */
  public VideoContentSearchFrameStarburstData setDenseVector(java.util.List<java.lang.Float> denseVector) {
    this.denseVector = denseVector;
    return this;
  }

  /**
   * Starburst version. Possible values are: STARBURST_TEXT_V4 STARBURST_TEXT_V4_5
   * STARBURST_TEXT_V4_PLC STARBURST_TEXT_V5
   * @return value or {@code null} for none
   */
  public java.lang.String getSbVersion() {
    return sbVersion;
  }

  /**
   * Starburst version. Possible values are: STARBURST_TEXT_V4 STARBURST_TEXT_V4_5
   * STARBURST_TEXT_V4_PLC STARBURST_TEXT_V5
   * @param sbVersion sbVersion or {@code null} for none
   */
  public VideoContentSearchFrameStarburstData setSbVersion(java.lang.String sbVersion) {
    this.sbVersion = sbVersion;
    return this;
  }

  /**
   * Timestamp in milliseconds for this frame.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTimestampMs() {
    return timestampMs;
  }

  /**
   * Timestamp in milliseconds for this frame.
   * @param timestampMs timestampMs or {@code null} for none
   */
  public VideoContentSearchFrameStarburstData setTimestampMs(java.lang.Long timestampMs) {
    this.timestampMs = timestampMs;
    return this;
  }

  @Override
  public VideoContentSearchFrameStarburstData set(String fieldName, Object value) {
    return (VideoContentSearchFrameStarburstData) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchFrameStarburstData clone() {
    return (VideoContentSearchFrameStarburstData) super.clone();
  }

}
