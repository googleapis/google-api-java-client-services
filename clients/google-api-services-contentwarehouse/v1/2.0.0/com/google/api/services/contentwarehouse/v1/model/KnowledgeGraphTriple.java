/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A Triple is a representation of data with a Subject, a Predicate, and an Object, For example:
 * (Triple, IS-A, "data representation"). Triples are a very good representation of data where the
 * relationship between data points is significant, because the Object of a Triple can be the
 * Subject of another Triple: (Triple, HAS-A, Subject) (Subject, IS-A, "Term of a proposition") The
 * ease with which Triples can represent relationships makes them an excellent candidate for
 * representing graphs. Next id: 21
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeGraphTriple extends com.google.api.client.json.GenericJson {

  /**
   * If is_negation is set to true then this triple is considered a statement that the fact is
   * false. This allows for the storage of both what we know to be true and what we know to be
   * false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNegation;

  /**
   * obj is the value of a relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeGraphTripleObj obj;

  /**
   * pred is an arbitrary node id representing the predicate (name) of a graph relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pred;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<KnowledgeGraphTripleProvenance> provenance;

  /**
   * WARNING: This is currently defined for experimentation purposes only. Please do not set. Data
   * set in this field will not be published to any systems downstream of Livegraph. Together with
   * the SPO of this triple, each qualifier set here represents a different logical assertion/fact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<KnowledgeGraphQualifierSet> qualifierSets;

  static {
    // hack to force ProGuard to consider KnowledgeGraphQualifierSet used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(KnowledgeGraphQualifierSet.class);
  }

  /**
   * sub is an arbitrary node id representing the source entity of a graph relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sub;

  /**
   * If is_negation is set to true then this triple is considered a statement that the fact is
   * false. This allows for the storage of both what we know to be true and what we know to be
   * false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNegation() {
    return isNegation;
  }

  /**
   * If is_negation is set to true then this triple is considered a statement that the fact is
   * false. This allows for the storage of both what we know to be true and what we know to be
   * false.
   * @param isNegation isNegation or {@code null} for none
   */
  public KnowledgeGraphTriple setIsNegation(java.lang.Boolean isNegation) {
    this.isNegation = isNegation;
    return this;
  }

  /**
   * obj is the value of a relationship.
   * @return value or {@code null} for none
   */
  public KnowledgeGraphTripleObj getObj() {
    return obj;
  }

  /**
   * obj is the value of a relationship.
   * @param obj obj or {@code null} for none
   */
  public KnowledgeGraphTriple setObj(KnowledgeGraphTripleObj obj) {
    this.obj = obj;
    return this;
  }

  /**
   * pred is an arbitrary node id representing the predicate (name) of a graph relationship.
   * @return value or {@code null} for none
   */
  public java.lang.String getPred() {
    return pred;
  }

  /**
   * pred is an arbitrary node id representing the predicate (name) of a graph relationship.
   * @param pred pred or {@code null} for none
   */
  public KnowledgeGraphTriple setPred(java.lang.String pred) {
    this.pred = pred;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<KnowledgeGraphTripleProvenance> getProvenance() {
    return provenance;
  }

  /**
   * @param provenance provenance or {@code null} for none
   */
  public KnowledgeGraphTriple setProvenance(java.util.List<KnowledgeGraphTripleProvenance> provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * WARNING: This is currently defined for experimentation purposes only. Please do not set. Data
   * set in this field will not be published to any systems downstream of Livegraph. Together with
   * the SPO of this triple, each qualifier set here represents a different logical assertion/fact.
   * @return value or {@code null} for none
   */
  public java.util.List<KnowledgeGraphQualifierSet> getQualifierSets() {
    return qualifierSets;
  }

  /**
   * WARNING: This is currently defined for experimentation purposes only. Please do not set. Data
   * set in this field will not be published to any systems downstream of Livegraph. Together with
   * the SPO of this triple, each qualifier set here represents a different logical assertion/fact.
   * @param qualifierSets qualifierSets or {@code null} for none
   */
  public KnowledgeGraphTriple setQualifierSets(java.util.List<KnowledgeGraphQualifierSet> qualifierSets) {
    this.qualifierSets = qualifierSets;
    return this;
  }

  /**
   * sub is an arbitrary node id representing the source entity of a graph relationship.
   * @return value or {@code null} for none
   */
  public java.lang.String getSub() {
    return sub;
  }

  /**
   * sub is an arbitrary node id representing the source entity of a graph relationship.
   * @param sub sub or {@code null} for none
   */
  public KnowledgeGraphTriple setSub(java.lang.String sub) {
    this.sub = sub;
    return this;
  }

  @Override
  public KnowledgeGraphTriple set(String fieldName, Object value) {
    return (KnowledgeGraphTriple) super.set(fieldName, value);
  }

  @Override
  public KnowledgeGraphTriple clone() {
    return (KnowledgeGraphTriple) super.clone();
  }

}
