/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for VideoContentSearchOcrAsrFeature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchOcrAsrFeature extends com.google.api.client.json.GenericJson {

  /**
   * The minimum char edit distance between the normalized OCR text and candidate word strings taken
   * from a time window around the OCR appearance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minCharEditDistance;

  /**
   * The matched ASR candidate for minimum char edit distance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minCharEditDistanceAsrText;

  /**
   * The min_char_edit_distance divided by the length of the OCR string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float minCharEditDistancePercent;

  /**
   * The normalized OCR text which was used to match the candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ocrTextNormalizedForCharMatch;

  /**
   * The length of the normalized OCR text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ocrTextNormalizedForCharMatchLength;

  /**
   * The score from the pretrigger model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float pretriggerScore;

  /**
   * The ASR text that was used for the word overlap calculation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String wordOverlapAsrText;

  /**
   * The number of words found both in the OCR text and the ASR in a time window around OCR
   * appearance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer wordOverlapCount;

  /**
   * The word_overlap_count divided by the number of words in the OCR text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float wordOverlapPercent;

  /**
   * The minimum char edit distance between the normalized OCR text and candidate word strings taken
   * from a time window around the OCR appearance.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinCharEditDistance() {
    return minCharEditDistance;
  }

  /**
   * The minimum char edit distance between the normalized OCR text and candidate word strings taken
   * from a time window around the OCR appearance.
   * @param minCharEditDistance minCharEditDistance or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setMinCharEditDistance(java.lang.Integer minCharEditDistance) {
    this.minCharEditDistance = minCharEditDistance;
    return this;
  }

  /**
   * The matched ASR candidate for minimum char edit distance.
   * @return value or {@code null} for none
   */
  public java.lang.String getMinCharEditDistanceAsrText() {
    return minCharEditDistanceAsrText;
  }

  /**
   * The matched ASR candidate for minimum char edit distance.
   * @param minCharEditDistanceAsrText minCharEditDistanceAsrText or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setMinCharEditDistanceAsrText(java.lang.String minCharEditDistanceAsrText) {
    this.minCharEditDistanceAsrText = minCharEditDistanceAsrText;
    return this;
  }

  /**
   * The min_char_edit_distance divided by the length of the OCR string.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMinCharEditDistancePercent() {
    return minCharEditDistancePercent;
  }

  /**
   * The min_char_edit_distance divided by the length of the OCR string.
   * @param minCharEditDistancePercent minCharEditDistancePercent or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setMinCharEditDistancePercent(java.lang.Float minCharEditDistancePercent) {
    this.minCharEditDistancePercent = minCharEditDistancePercent;
    return this;
  }

  /**
   * The normalized OCR text which was used to match the candidate.
   * @return value or {@code null} for none
   */
  public java.lang.String getOcrTextNormalizedForCharMatch() {
    return ocrTextNormalizedForCharMatch;
  }

  /**
   * The normalized OCR text which was used to match the candidate.
   * @param ocrTextNormalizedForCharMatch ocrTextNormalizedForCharMatch or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setOcrTextNormalizedForCharMatch(java.lang.String ocrTextNormalizedForCharMatch) {
    this.ocrTextNormalizedForCharMatch = ocrTextNormalizedForCharMatch;
    return this;
  }

  /**
   * The length of the normalized OCR text.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOcrTextNormalizedForCharMatchLength() {
    return ocrTextNormalizedForCharMatchLength;
  }

  /**
   * The length of the normalized OCR text.
   * @param ocrTextNormalizedForCharMatchLength ocrTextNormalizedForCharMatchLength or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setOcrTextNormalizedForCharMatchLength(java.lang.Integer ocrTextNormalizedForCharMatchLength) {
    this.ocrTextNormalizedForCharMatchLength = ocrTextNormalizedForCharMatchLength;
    return this;
  }

  /**
   * The score from the pretrigger model.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPretriggerScore() {
    return pretriggerScore;
  }

  /**
   * The score from the pretrigger model.
   * @param pretriggerScore pretriggerScore or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setPretriggerScore(java.lang.Float pretriggerScore) {
    this.pretriggerScore = pretriggerScore;
    return this;
  }

  /**
   * The ASR text that was used for the word overlap calculation.
   * @return value or {@code null} for none
   */
  public java.lang.String getWordOverlapAsrText() {
    return wordOverlapAsrText;
  }

  /**
   * The ASR text that was used for the word overlap calculation.
   * @param wordOverlapAsrText wordOverlapAsrText or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setWordOverlapAsrText(java.lang.String wordOverlapAsrText) {
    this.wordOverlapAsrText = wordOverlapAsrText;
    return this;
  }

  /**
   * The number of words found both in the OCR text and the ASR in a time window around OCR
   * appearance.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWordOverlapCount() {
    return wordOverlapCount;
  }

  /**
   * The number of words found both in the OCR text and the ASR in a time window around OCR
   * appearance.
   * @param wordOverlapCount wordOverlapCount or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setWordOverlapCount(java.lang.Integer wordOverlapCount) {
    this.wordOverlapCount = wordOverlapCount;
    return this;
  }

  /**
   * The word_overlap_count divided by the number of words in the OCR text.
   * @return value or {@code null} for none
   */
  public java.lang.Float getWordOverlapPercent() {
    return wordOverlapPercent;
  }

  /**
   * The word_overlap_count divided by the number of words in the OCR text.
   * @param wordOverlapPercent wordOverlapPercent or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature setWordOverlapPercent(java.lang.Float wordOverlapPercent) {
    this.wordOverlapPercent = wordOverlapPercent;
    return this;
  }

  @Override
  public VideoContentSearchOcrAsrFeature set(String fieldName, Object value) {
    return (VideoContentSearchOcrAsrFeature) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchOcrAsrFeature clone() {
    return (VideoContentSearchOcrAsrFeature) super.clone();
  }

}
