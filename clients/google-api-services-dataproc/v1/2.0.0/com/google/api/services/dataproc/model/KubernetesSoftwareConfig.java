/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * The software configuration for this Dataproc cluster running on Kubernetes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KubernetesSoftwareConfig extends com.google.api.client.json.GenericJson {

  /**
   * The components that should be installed in this Dataproc cluster. The key must be a string from
   * the KubernetesComponent enumeration. The value is the version of the software to be installed.
   * At least one entry must be specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> componentVersion;

  /**
   * The properties to set on daemon config files.Property keys are specified in prefix:property
   * format, for example spark:spark.kubernetes.container.image. The following are supported
   * prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster
   * properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> properties;

  /**
   * The components that should be installed in this Dataproc cluster. The key must be a string from
   * the KubernetesComponent enumeration. The value is the version of the software to be installed.
   * At least one entry must be specified.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getComponentVersion() {
    return componentVersion;
  }

  /**
   * The components that should be installed in this Dataproc cluster. The key must be a string from
   * the KubernetesComponent enumeration. The value is the version of the software to be installed.
   * At least one entry must be specified.
   * @param componentVersion componentVersion or {@code null} for none
   */
  public KubernetesSoftwareConfig setComponentVersion(java.util.Map<String, java.lang.String> componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  /**
   * The properties to set on daemon config files.Property keys are specified in prefix:property
   * format, for example spark:spark.kubernetes.container.image. The following are supported
   * prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster
   * properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getProperties() {
    return properties;
  }

  /**
   * The properties to set on daemon config files.Property keys are specified in prefix:property
   * format, for example spark:spark.kubernetes.container.image. The following are supported
   * prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster
   * properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   * @param properties properties or {@code null} for none
   */
  public KubernetesSoftwareConfig setProperties(java.util.Map<String, java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  @Override
  public KubernetesSoftwareConfig set(String fieldName, Object value) {
    return (KubernetesSoftwareConfig) super.set(fieldName, value);
  }

  @Override
  public KubernetesSoftwareConfig clone() {
    return (KubernetesSoftwareConfig) super.clone();
  }

}
