/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Signals used for mining new reference pages, set by the reference-page-scorer processor.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefReferencePageScores extends com.google.api.client.json.GenericJson {

  /**
   * Stores score for later offline voting to choose reference pages. If zero, it's not a good book
   * reference page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float bookScore;

  /**
   * Fraction of importance_ratio (IR) that is explained by this entity and implied entities. E.g. a
   * page about a song with IR 0.2 for the song and 0.5 for the artist actually has
   * explained_normalized_topicality 0.7 for the song.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float explainedNormalizedTopicality;

  /**
   * The raw topicality score of the primary entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float firstScore;

  /**
   * Whether the primary entity has any "special" links. Currently a link is considered special if
   * it has a good implication probability and has no negative disambiguation probability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasSpecialLinks;

  /**
   * The median mentions core of the primary entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianMentionScore;

  /**
   * The navboost token coverage ratio. All queries are taken into account.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float navboostCoverage;

  /**
   * Reference page score used to select the reference page owner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float referencePageScore;

  /**
   * The score used to sort reference pages for a given entity. This score tries to assign higher
   * scores to reference pages that are more useful to the model building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float referencePageSelectionScore;

  /**
   * True if the entity is selected as the reference page owner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean selected;

  /**
   * A score in [0, 1] which indicates the single topicness of the entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float singleTopicness;

  /**
   * This should have the same semantic as single_topicness, and should replace it in the long term.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float singleTopicnessV2;

  /**
   * =================================== Signals for the single topicness. Only filled in for the
   * primary (i.e., top ranked) entity. The title token coverage ratio.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float titleCoverage;

  /**
   * The sum of raw topicality scores for all entities in this page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float totalSum;

  /**
   * Stores score for later offline voting to choose reference pages. If zero, it's not a good book
   * reference page.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBookScore() {
    return bookScore;
  }

  /**
   * Stores score for later offline voting to choose reference pages. If zero, it's not a good book
   * reference page.
   * @param bookScore bookScore or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setBookScore(java.lang.Float bookScore) {
    this.bookScore = bookScore;
    return this;
  }

  /**
   * Fraction of importance_ratio (IR) that is explained by this entity and implied entities. E.g. a
   * page about a song with IR 0.2 for the song and 0.5 for the artist actually has
   * explained_normalized_topicality 0.7 for the song.
   * @return value or {@code null} for none
   */
  public java.lang.Float getExplainedNormalizedTopicality() {
    return explainedNormalizedTopicality;
  }

  /**
   * Fraction of importance_ratio (IR) that is explained by this entity and implied entities. E.g. a
   * page about a song with IR 0.2 for the song and 0.5 for the artist actually has
   * explained_normalized_topicality 0.7 for the song.
   * @param explainedNormalizedTopicality explainedNormalizedTopicality or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setExplainedNormalizedTopicality(java.lang.Float explainedNormalizedTopicality) {
    this.explainedNormalizedTopicality = explainedNormalizedTopicality;
    return this;
  }

  /**
   * The raw topicality score of the primary entity.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFirstScore() {
    return firstScore;
  }

  /**
   * The raw topicality score of the primary entity.
   * @param firstScore firstScore or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setFirstScore(java.lang.Float firstScore) {
    this.firstScore = firstScore;
    return this;
  }

  /**
   * Whether the primary entity has any "special" links. Currently a link is considered special if
   * it has a good implication probability and has no negative disambiguation probability.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasSpecialLinks() {
    return hasSpecialLinks;
  }

  /**
   * Whether the primary entity has any "special" links. Currently a link is considered special if
   * it has a good implication probability and has no negative disambiguation probability.
   * @param hasSpecialLinks hasSpecialLinks or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setHasSpecialLinks(java.lang.Boolean hasSpecialLinks) {
    this.hasSpecialLinks = hasSpecialLinks;
    return this;
  }

  /**
   * The median mentions core of the primary entity.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianMentionScore() {
    return medianMentionScore;
  }

  /**
   * The median mentions core of the primary entity.
   * @param medianMentionScore medianMentionScore or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setMedianMentionScore(java.lang.Float medianMentionScore) {
    this.medianMentionScore = medianMentionScore;
    return this;
  }

  /**
   * The navboost token coverage ratio. All queries are taken into account.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNavboostCoverage() {
    return navboostCoverage;
  }

  /**
   * The navboost token coverage ratio. All queries are taken into account.
   * @param navboostCoverage navboostCoverage or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setNavboostCoverage(java.lang.Float navboostCoverage) {
    this.navboostCoverage = navboostCoverage;
    return this;
  }

  /**
   * Reference page score used to select the reference page owner.
   * @return value or {@code null} for none
   */
  public java.lang.Float getReferencePageScore() {
    return referencePageScore;
  }

  /**
   * Reference page score used to select the reference page owner.
   * @param referencePageScore referencePageScore or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setReferencePageScore(java.lang.Float referencePageScore) {
    this.referencePageScore = referencePageScore;
    return this;
  }

  /**
   * The score used to sort reference pages for a given entity. This score tries to assign higher
   * scores to reference pages that are more useful to the model building.
   * @return value or {@code null} for none
   */
  public java.lang.Float getReferencePageSelectionScore() {
    return referencePageSelectionScore;
  }

  /**
   * The score used to sort reference pages for a given entity. This score tries to assign higher
   * scores to reference pages that are more useful to the model building.
   * @param referencePageSelectionScore referencePageSelectionScore or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setReferencePageSelectionScore(java.lang.Float referencePageSelectionScore) {
    this.referencePageSelectionScore = referencePageSelectionScore;
    return this;
  }

  /**
   * True if the entity is selected as the reference page owner.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSelected() {
    return selected;
  }

  /**
   * True if the entity is selected as the reference page owner.
   * @param selected selected or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setSelected(java.lang.Boolean selected) {
    this.selected = selected;
    return this;
  }

  /**
   * A score in [0, 1] which indicates the single topicness of the entity.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSingleTopicness() {
    return singleTopicness;
  }

  /**
   * A score in [0, 1] which indicates the single topicness of the entity.
   * @param singleTopicness singleTopicness or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setSingleTopicness(java.lang.Float singleTopicness) {
    this.singleTopicness = singleTopicness;
    return this;
  }

  /**
   * This should have the same semantic as single_topicness, and should replace it in the long term.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSingleTopicnessV2() {
    return singleTopicnessV2;
  }

  /**
   * This should have the same semantic as single_topicness, and should replace it in the long term.
   * @param singleTopicnessV2 singleTopicnessV2 or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setSingleTopicnessV2(java.lang.Float singleTopicnessV2) {
    this.singleTopicnessV2 = singleTopicnessV2;
    return this;
  }

  /**
   * =================================== Signals for the single topicness. Only filled in for the
   * primary (i.e., top ranked) entity. The title token coverage ratio.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTitleCoverage() {
    return titleCoverage;
  }

  /**
   * =================================== Signals for the single topicness. Only filled in for the
   * primary (i.e., top ranked) entity. The title token coverage ratio.
   * @param titleCoverage titleCoverage or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setTitleCoverage(java.lang.Float titleCoverage) {
    this.titleCoverage = titleCoverage;
    return this;
  }

  /**
   * The sum of raw topicality scores for all entities in this page.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalSum() {
    return totalSum;
  }

  /**
   * The sum of raw topicality scores for all entities in this page.
   * @param totalSum totalSum or {@code null} for none
   */
  public RepositoryWebrefReferencePageScores setTotalSum(java.lang.Float totalSum) {
    this.totalSum = totalSum;
    return this;
  }

  @Override
  public RepositoryWebrefReferencePageScores set(String fieldName, Object value) {
    return (RepositoryWebrefReferencePageScores) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefReferencePageScores clone() {
    return (RepositoryWebrefReferencePageScores) super.clone();
  }

}
