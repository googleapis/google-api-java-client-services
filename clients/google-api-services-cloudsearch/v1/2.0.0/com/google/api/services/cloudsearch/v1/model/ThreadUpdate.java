/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * HistoryRecord for changes associated with a thread, namely: MESSAGE_ADDED MESSAGE_DELETED
 * LABEL_ADDED LABEL_REMOVED ATTRIBUTE_SET ATTRIBUTE_REMOVED THREAD_KEY_SET All label_ids refer to
 * the (unchanging) value as defined by the Label.id field in labels.proto. In particular, it is
 * *not* the canonical_name.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ThreadUpdate extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AttributeRemoved attributeRemoved;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AttributeSet attributeSet;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LabelAdded labelAdded;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LabelRemoved labelRemoved;

  /**
   * Indicates the record id of the last operation that modified this thread.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastHistoryRecordId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MessageAdded messageAdded;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MessageDeleted messageDeleted;

  /**
   * The first non-empty thread-key on any message in the thread (including deleted messages). This
   * field has been introduced to maintain backward compatibility for clients that are not subthread
   * aware.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MultiKey originalThreadKey;

  /**
   * The PreStates of all messages before the transaction. These are suppressed if the client
   * requested that prestates not be included in the output of the GetHistoryRequest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PreState> preState;

  static {
    // hack to force ProGuard to consider PreState used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(PreState.class);
  }

  /**
   * Affected thread
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MultiKey threadKey;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ThreadKeySet threadKeySet;

  /**
   * Thread PLID
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String threadLocator;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TopicStateUpdate topicStateUpdate;

  /**
   * @return value or {@code null} for none
   */
  public AttributeRemoved getAttributeRemoved() {
    return attributeRemoved;
  }

  /**
   * @param attributeRemoved attributeRemoved or {@code null} for none
   */
  public ThreadUpdate setAttributeRemoved(AttributeRemoved attributeRemoved) {
    this.attributeRemoved = attributeRemoved;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AttributeSet getAttributeSet() {
    return attributeSet;
  }

  /**
   * @param attributeSet attributeSet or {@code null} for none
   */
  public ThreadUpdate setAttributeSet(AttributeSet attributeSet) {
    this.attributeSet = attributeSet;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public LabelAdded getLabelAdded() {
    return labelAdded;
  }

  /**
   * @param labelAdded labelAdded or {@code null} for none
   */
  public ThreadUpdate setLabelAdded(LabelAdded labelAdded) {
    this.labelAdded = labelAdded;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public LabelRemoved getLabelRemoved() {
    return labelRemoved;
  }

  /**
   * @param labelRemoved labelRemoved or {@code null} for none
   */
  public ThreadUpdate setLabelRemoved(LabelRemoved labelRemoved) {
    this.labelRemoved = labelRemoved;
    return this;
  }

  /**
   * Indicates the record id of the last operation that modified this thread.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastHistoryRecordId() {
    return lastHistoryRecordId;
  }

  /**
   * Indicates the record id of the last operation that modified this thread.
   * @param lastHistoryRecordId lastHistoryRecordId or {@code null} for none
   */
  public ThreadUpdate setLastHistoryRecordId(java.math.BigInteger lastHistoryRecordId) {
    this.lastHistoryRecordId = lastHistoryRecordId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public MessageAdded getMessageAdded() {
    return messageAdded;
  }

  /**
   * @param messageAdded messageAdded or {@code null} for none
   */
  public ThreadUpdate setMessageAdded(MessageAdded messageAdded) {
    this.messageAdded = messageAdded;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public MessageDeleted getMessageDeleted() {
    return messageDeleted;
  }

  /**
   * @param messageDeleted messageDeleted or {@code null} for none
   */
  public ThreadUpdate setMessageDeleted(MessageDeleted messageDeleted) {
    this.messageDeleted = messageDeleted;
    return this;
  }

  /**
   * The first non-empty thread-key on any message in the thread (including deleted messages). This
   * field has been introduced to maintain backward compatibility for clients that are not subthread
   * aware.
   * @return value or {@code null} for none
   */
  public MultiKey getOriginalThreadKey() {
    return originalThreadKey;
  }

  /**
   * The first non-empty thread-key on any message in the thread (including deleted messages). This
   * field has been introduced to maintain backward compatibility for clients that are not subthread
   * aware.
   * @param originalThreadKey originalThreadKey or {@code null} for none
   */
  public ThreadUpdate setOriginalThreadKey(MultiKey originalThreadKey) {
    this.originalThreadKey = originalThreadKey;
    return this;
  }

  /**
   * The PreStates of all messages before the transaction. These are suppressed if the client
   * requested that prestates not be included in the output of the GetHistoryRequest.
   * @return value or {@code null} for none
   */
  public java.util.List<PreState> getPreState() {
    return preState;
  }

  /**
   * The PreStates of all messages before the transaction. These are suppressed if the client
   * requested that prestates not be included in the output of the GetHistoryRequest.
   * @param preState preState or {@code null} for none
   */
  public ThreadUpdate setPreState(java.util.List<PreState> preState) {
    this.preState = preState;
    return this;
  }

  /**
   * Affected thread
   * @return value or {@code null} for none
   */
  public MultiKey getThreadKey() {
    return threadKey;
  }

  /**
   * Affected thread
   * @param threadKey threadKey or {@code null} for none
   */
  public ThreadUpdate setThreadKey(MultiKey threadKey) {
    this.threadKey = threadKey;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ThreadKeySet getThreadKeySet() {
    return threadKeySet;
  }

  /**
   * @param threadKeySet threadKeySet or {@code null} for none
   */
  public ThreadUpdate setThreadKeySet(ThreadKeySet threadKeySet) {
    this.threadKeySet = threadKeySet;
    return this;
  }

  /**
   * Thread PLID
   * @return value or {@code null} for none
   */
  public java.lang.String getThreadLocator() {
    return threadLocator;
  }

  /**
   * Thread PLID
   * @param threadLocator threadLocator or {@code null} for none
   */
  public ThreadUpdate setThreadLocator(java.lang.String threadLocator) {
    this.threadLocator = threadLocator;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TopicStateUpdate getTopicStateUpdate() {
    return topicStateUpdate;
  }

  /**
   * @param topicStateUpdate topicStateUpdate or {@code null} for none
   */
  public ThreadUpdate setTopicStateUpdate(TopicStateUpdate topicStateUpdate) {
    this.topicStateUpdate = topicStateUpdate;
    return this;
  }

  @Override
  public ThreadUpdate set(String fieldName, Object value) {
    return (ThreadUpdate) super.set(fieldName, value);
  }

  @Override
  public ThreadUpdate clone() {
    return (ThreadUpdate) super.clone();
  }

}
