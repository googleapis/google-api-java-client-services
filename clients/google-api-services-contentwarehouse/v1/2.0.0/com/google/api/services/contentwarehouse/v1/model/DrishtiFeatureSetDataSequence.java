/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This represents a sequence (ordered) of FeatureSetData elements.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DrishtiFeatureSetDataSequence extends com.google.api.client.json.GenericJson {

  /**
   * FeatureSetData contains the features. In most scenarios, you only have one element. However,
   * multiple elements are appropriate in case of videos where each element may correspond to a
   * frame in the video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DrishtiFeatureSetData> element;

  static {
    // hack to force ProGuard to consider DrishtiFeatureSetData used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DrishtiFeatureSetData.class);
  }

  /**
   * Some extra information about this FeatureSetDataSequence. (Almost never used).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DrishtiFeatureExtra> extra;

  static {
    // hack to force ProGuard to consider DrishtiFeatureExtra used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DrishtiFeatureExtra.class);
  }

  /**
   * Global (video-level) labels. In most cases, you only have one LabelSetElement. All the labels
   * will be stored in this single LabelSetElement. Scenarios where you may have multiple
   * LabelSetElement(s) is (for example) when you want to differentiate the labels into various sub-
   * groups - eg, central vs relevant, kg-ids vs queries, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DrishtiLabelSetElement> label;

  /**
   * If set, must be same length as element. Each entry is the timestamp in microseconds where the
   * FeatureSetData element was extracted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> timestamp;

  /**
   * FeatureSetData contains the features. In most scenarios, you only have one element. However,
   * multiple elements are appropriate in case of videos where each element may correspond to a
   * frame in the video.
   * @return value or {@code null} for none
   */
  public java.util.List<DrishtiFeatureSetData> getElement() {
    return element;
  }

  /**
   * FeatureSetData contains the features. In most scenarios, you only have one element. However,
   * multiple elements are appropriate in case of videos where each element may correspond to a
   * frame in the video.
   * @param element element or {@code null} for none
   */
  public DrishtiFeatureSetDataSequence setElement(java.util.List<DrishtiFeatureSetData> element) {
    this.element = element;
    return this;
  }

  /**
   * Some extra information about this FeatureSetDataSequence. (Almost never used).
   * @return value or {@code null} for none
   */
  public java.util.List<DrishtiFeatureExtra> getExtra() {
    return extra;
  }

  /**
   * Some extra information about this FeatureSetDataSequence. (Almost never used).
   * @param extra extra or {@code null} for none
   */
  public DrishtiFeatureSetDataSequence setExtra(java.util.List<DrishtiFeatureExtra> extra) {
    this.extra = extra;
    return this;
  }

  /**
   * Global (video-level) labels. In most cases, you only have one LabelSetElement. All the labels
   * will be stored in this single LabelSetElement. Scenarios where you may have multiple
   * LabelSetElement(s) is (for example) when you want to differentiate the labels into various sub-
   * groups - eg, central vs relevant, kg-ids vs queries, etc.
   * @return value or {@code null} for none
   */
  public java.util.List<DrishtiLabelSetElement> getLabel() {
    return label;
  }

  /**
   * Global (video-level) labels. In most cases, you only have one LabelSetElement. All the labels
   * will be stored in this single LabelSetElement. Scenarios where you may have multiple
   * LabelSetElement(s) is (for example) when you want to differentiate the labels into various sub-
   * groups - eg, central vs relevant, kg-ids vs queries, etc.
   * @param label label or {@code null} for none
   */
  public DrishtiFeatureSetDataSequence setLabel(java.util.List<DrishtiLabelSetElement> label) {
    this.label = label;
    return this;
  }

  /**
   * If set, must be same length as element. Each entry is the timestamp in microseconds where the
   * FeatureSetData element was extracted.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getTimestamp() {
    return timestamp;
  }

  /**
   * If set, must be same length as element. Each entry is the timestamp in microseconds where the
   * FeatureSetData element was extracted.
   * @param timestamp timestamp or {@code null} for none
   */
  public DrishtiFeatureSetDataSequence setTimestamp(java.util.List<java.lang.Long> timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  @Override
  public DrishtiFeatureSetDataSequence set(String fieldName, Object value) {
    return (DrishtiFeatureSetDataSequence) super.set(fieldName, value);
  }

  @Override
  public DrishtiFeatureSetDataSequence clone() {
    return (DrishtiFeatureSetDataSequence) super.clone();
  }

}
