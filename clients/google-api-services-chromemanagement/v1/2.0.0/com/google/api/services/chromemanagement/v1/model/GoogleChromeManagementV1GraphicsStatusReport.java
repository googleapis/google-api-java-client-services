/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromemanagement.v1.model;

/**
 * Information of the graphics subsystem. * This field is telemetry information and this will change
 * over time as the device is utilized. * Data for this field is controlled via policy:
 * [ReportDeviceGraphicsInfo](https://chromeenterprise.google/policies/#ReportDeviceGraphicsInfo) *
 * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy
 * Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will
 * be reported when the device is next online: No * Reported for affiliated users only: N/A
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Chrome Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleChromeManagementV1GraphicsStatusReport extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Information about the displays for the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleChromeManagementV1DisplayInfo> displays;

  static {
    // hack to force ProGuard to consider GoogleChromeManagementV1DisplayInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleChromeManagementV1DisplayInfo.class);
  }

  /**
   * Output only. Time at which the graphics data was reported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String reportTime;

  /**
   * Output only. Information about the displays for the device.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleChromeManagementV1DisplayInfo> getDisplays() {
    return displays;
  }

  /**
   * Output only. Information about the displays for the device.
   * @param displays displays or {@code null} for none
   */
  public GoogleChromeManagementV1GraphicsStatusReport setDisplays(java.util.List<GoogleChromeManagementV1DisplayInfo> displays) {
    this.displays = displays;
    return this;
  }

  /**
   * Output only. Time at which the graphics data was reported.
   * @return value or {@code null} for none
   */
  public String getReportTime() {
    return reportTime;
  }

  /**
   * Output only. Time at which the graphics data was reported.
   * @param reportTime reportTime or {@code null} for none
   */
  public GoogleChromeManagementV1GraphicsStatusReport setReportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  @Override
  public GoogleChromeManagementV1GraphicsStatusReport set(String fieldName, Object value) {
    return (GoogleChromeManagementV1GraphicsStatusReport) super.set(fieldName, value);
  }

  @Override
  public GoogleChromeManagementV1GraphicsStatusReport clone() {
    return (GoogleChromeManagementV1GraphicsStatusReport) super.clone();
  }

}
