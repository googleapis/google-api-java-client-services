/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This represents one location.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CountryLocationInfo extends com.google.api.client.json.GenericJson {

  /**
   * The latitude and longitude of the conceptual center of the location. For cities, this would be
   * the center of the downtown, or maybe the location of city hall. For states and countries it
   * might be the capital city. But there are no guarantees and this may be any random point inside
   * the location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePointProto center;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String city;

  /**
   * Human readable name hierarchy. Only the relevant fields will be present. For example for city
   * GeoLocations, sub_locality field will not be present. Cleared during index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String country;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String county;

  /**
   * Oyster feature ID of the enclosing state. Cleared during index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto enclosingStateFeatureId;

  /**
   * Oyster feature ID of the location. Cleared during index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto featureId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * 32 bit fingerprint of the feature id of the state of this location. For cities and sub-
   * localities it will be the enclosing state. For state locations, it will be fingerprint of the
   * feture-id of the location itself. Populated during index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long stateIdFprint;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subLocality;

  /**
   * Type of the location (sub-locality, city, state etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The latitude and longitude of the conceptual center of the location. For cities, this would be
   * the center of the downtown, or maybe the location of city hall. For states and countries it
   * might be the capital city. But there are no guarantees and this may be any random point inside
   * the location.
   * @return value or {@code null} for none
   */
  public GeostorePointProto getCenter() {
    return center;
  }

  /**
   * The latitude and longitude of the conceptual center of the location. For cities, this would be
   * the center of the downtown, or maybe the location of city hall. For states and countries it
   * might be the capital city. But there are no guarantees and this may be any random point inside
   * the location.
   * @param center center or {@code null} for none
   */
  public CountryLocationInfo setCenter(GeostorePointProto center) {
    this.center = center;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCity() {
    return city;
  }

  /**
   * @param city city or {@code null} for none
   */
  public CountryLocationInfo setCity(java.lang.String city) {
    this.city = city;
    return this;
  }

  /**
   * Human readable name hierarchy. Only the relevant fields will be present. For example for city
   * GeoLocations, sub_locality field will not be present. Cleared during index creation.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Human readable name hierarchy. Only the relevant fields will be present. For example for city
   * GeoLocations, sub_locality field will not be present. Cleared during index creation.
   * @param country country or {@code null} for none
   */
  public CountryLocationInfo setCountry(java.lang.String country) {
    this.country = country;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCounty() {
    return county;
  }

  /**
   * @param county county or {@code null} for none
   */
  public CountryLocationInfo setCounty(java.lang.String county) {
    this.county = county;
    return this;
  }

  /**
   * Oyster feature ID of the enclosing state. Cleared during index creation.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getEnclosingStateFeatureId() {
    return enclosingStateFeatureId;
  }

  /**
   * Oyster feature ID of the enclosing state. Cleared during index creation.
   * @param enclosingStateFeatureId enclosingStateFeatureId or {@code null} for none
   */
  public CountryLocationInfo setEnclosingStateFeatureId(GeostoreFeatureIdProto enclosingStateFeatureId) {
    this.enclosingStateFeatureId = enclosingStateFeatureId;
    return this;
  }

  /**
   * Oyster feature ID of the location. Cleared during index creation.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getFeatureId() {
    return featureId;
  }

  /**
   * Oyster feature ID of the location. Cleared during index creation.
   * @param featureId featureId or {@code null} for none
   */
  public CountryLocationInfo setFeatureId(GeostoreFeatureIdProto featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * @param state state or {@code null} for none
   */
  public CountryLocationInfo setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * 32 bit fingerprint of the feature id of the state of this location. For cities and sub-
   * localities it will be the enclosing state. For state locations, it will be fingerprint of the
   * feture-id of the location itself. Populated during index creation.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStateIdFprint() {
    return stateIdFprint;
  }

  /**
   * 32 bit fingerprint of the feature id of the state of this location. For cities and sub-
   * localities it will be the enclosing state. For state locations, it will be fingerprint of the
   * feture-id of the location itself. Populated during index creation.
   * @param stateIdFprint stateIdFprint or {@code null} for none
   */
  public CountryLocationInfo setStateIdFprint(java.lang.Long stateIdFprint) {
    this.stateIdFprint = stateIdFprint;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSubLocality() {
    return subLocality;
  }

  /**
   * @param subLocality subLocality or {@code null} for none
   */
  public CountryLocationInfo setSubLocality(java.lang.String subLocality) {
    this.subLocality = subLocality;
    return this;
  }

  /**
   * Type of the location (sub-locality, city, state etc).
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of the location (sub-locality, city, state etc).
   * @param type type or {@code null} for none
   */
  public CountryLocationInfo setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public CountryLocationInfo set(String fieldName, Object value) {
    return (CountryLocationInfo) super.set(fieldName, value);
  }

  @Override
  public CountryLocationInfo clone() {
    return (CountryLocationInfo) super.clone();
  }

}
