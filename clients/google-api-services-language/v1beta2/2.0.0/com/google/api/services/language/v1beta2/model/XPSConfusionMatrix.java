/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1beta2.model;

/**
 * Confusion matrix of the model running the classification.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSConfusionMatrix extends com.google.api.client.json.GenericJson {

  /**
   * For the following three repeated fields, only one is intended to be set.
   * annotation_spec_id_token is preferable to be set. ID tokens of the annotation specs used in the
   * confusion matrix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> annotationSpecIdToken;

  /**
   * Category (mainly for segmentation). Set only for image segmentation models. Note: uCAIP Image
   * Segmentation should use annotation_spec_id_token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> category;

  /**
   * Rows in the confusion matrix. The number of rows is equal to the size of
   * `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that have ground truth
   * of the `annotation_spec_id_token[i]` and are predicted as `annotation_spec_id_token[j]` by the
   * model being evaluated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<XPSConfusionMatrixRow> row;

  /**
   * Sentiment labels used in the confusion matrix. Set only for text sentiment models. For AutoML
   * Text Revamp, use `annotation_spec_id_token` instead and leave this field empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> sentimentLabel;

  /**
   * For the following three repeated fields, only one is intended to be set.
   * annotation_spec_id_token is preferable to be set. ID tokens of the annotation specs used in the
   * confusion matrix.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAnnotationSpecIdToken() {
    return annotationSpecIdToken;
  }

  /**
   * For the following three repeated fields, only one is intended to be set.
   * annotation_spec_id_token is preferable to be set. ID tokens of the annotation specs used in the
   * confusion matrix.
   * @param annotationSpecIdToken annotationSpecIdToken or {@code null} for none
   */
  public XPSConfusionMatrix setAnnotationSpecIdToken(java.util.List<java.lang.String> annotationSpecIdToken) {
    this.annotationSpecIdToken = annotationSpecIdToken;
    return this;
  }

  /**
   * Category (mainly for segmentation). Set only for image segmentation models. Note: uCAIP Image
   * Segmentation should use annotation_spec_id_token.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getCategory() {
    return category;
  }

  /**
   * Category (mainly for segmentation). Set only for image segmentation models. Note: uCAIP Image
   * Segmentation should use annotation_spec_id_token.
   * @param category category or {@code null} for none
   */
  public XPSConfusionMatrix setCategory(java.util.List<java.lang.Integer> category) {
    this.category = category;
    return this;
  }

  /**
   * Rows in the confusion matrix. The number of rows is equal to the size of
   * `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that have ground truth
   * of the `annotation_spec_id_token[i]` and are predicted as `annotation_spec_id_token[j]` by the
   * model being evaluated.
   * @return value or {@code null} for none
   */
  public java.util.List<XPSConfusionMatrixRow> getRow() {
    return row;
  }

  /**
   * Rows in the confusion matrix. The number of rows is equal to the size of
   * `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that have ground truth
   * of the `annotation_spec_id_token[i]` and are predicted as `annotation_spec_id_token[j]` by the
   * model being evaluated.
   * @param row row or {@code null} for none
   */
  public XPSConfusionMatrix setRow(java.util.List<XPSConfusionMatrixRow> row) {
    this.row = row;
    return this;
  }

  /**
   * Sentiment labels used in the confusion matrix. Set only for text sentiment models. For AutoML
   * Text Revamp, use `annotation_spec_id_token` instead and leave this field empty.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getSentimentLabel() {
    return sentimentLabel;
  }

  /**
   * Sentiment labels used in the confusion matrix. Set only for text sentiment models. For AutoML
   * Text Revamp, use `annotation_spec_id_token` instead and leave this field empty.
   * @param sentimentLabel sentimentLabel or {@code null} for none
   */
  public XPSConfusionMatrix setSentimentLabel(java.util.List<java.lang.Integer> sentimentLabel) {
    this.sentimentLabel = sentimentLabel;
    return this;
  }

  @Override
  public XPSConfusionMatrix set(String fieldName, Object value) {
    return (XPSConfusionMatrix) super.set(fieldName, value);
  }

  @Override
  public XPSConfusionMatrix clone() {
    return (XPSConfusionMatrix) super.clone();
  }

}
