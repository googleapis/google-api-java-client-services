/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This proto contains attributes relevant to physical lane markers.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreLaneMarkerProto extends com.google.api.client.json.GenericJson {

  /**
   * If this is a physical barrier marker, represent materials found on the marker.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreBarrierLogicalMaterialProto barrierMaterials;

  /**
   * Pattern border and color for crossing markers. These include crosswalks, stop, and yield lines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreCrossingStripePatternProto crossingPattern;

  /**
   * Stripe pattern, spacing, and color for longitudinal markers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreLinearStripePatternProto linearPattern;

  /**
   * If this is a physical barrier marker, represent materials found on the marker.
   * @return value or {@code null} for none
   */
  public GeostoreBarrierLogicalMaterialProto getBarrierMaterials() {
    return barrierMaterials;
  }

  /**
   * If this is a physical barrier marker, represent materials found on the marker.
   * @param barrierMaterials barrierMaterials or {@code null} for none
   */
  public GeostoreLaneMarkerProto setBarrierMaterials(GeostoreBarrierLogicalMaterialProto barrierMaterials) {
    this.barrierMaterials = barrierMaterials;
    return this;
  }

  /**
   * Pattern border and color for crossing markers. These include crosswalks, stop, and yield lines.
   * @return value or {@code null} for none
   */
  public GeostoreCrossingStripePatternProto getCrossingPattern() {
    return crossingPattern;
  }

  /**
   * Pattern border and color for crossing markers. These include crosswalks, stop, and yield lines.
   * @param crossingPattern crossingPattern or {@code null} for none
   */
  public GeostoreLaneMarkerProto setCrossingPattern(GeostoreCrossingStripePatternProto crossingPattern) {
    this.crossingPattern = crossingPattern;
    return this;
  }

  /**
   * Stripe pattern, spacing, and color for longitudinal markers.
   * @return value or {@code null} for none
   */
  public GeostoreLinearStripePatternProto getLinearPattern() {
    return linearPattern;
  }

  /**
   * Stripe pattern, spacing, and color for longitudinal markers.
   * @param linearPattern linearPattern or {@code null} for none
   */
  public GeostoreLaneMarkerProto setLinearPattern(GeostoreLinearStripePatternProto linearPattern) {
    this.linearPattern = linearPattern;
    return this;
  }

  @Override
  public GeostoreLaneMarkerProto set(String fieldName, Object value) {
    return (GeostoreLaneMarkerProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreLaneMarkerProto clone() {
    return (GeostoreLaneMarkerProto) super.clone();
  }

}
