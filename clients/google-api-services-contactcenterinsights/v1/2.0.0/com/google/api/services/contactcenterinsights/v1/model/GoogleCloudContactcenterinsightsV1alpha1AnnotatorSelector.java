/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contactcenterinsights.v1.model;

/**
 * Selector of all available annotators and phrase matchers to run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Contact Center AI Insights API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector extends com.google.api.client.json.GenericJson {

  /**
   * The issue model to run. If not provided, the most recently deployed topic model will be used.
   * The provided issue model will only be used for inference if the issue model is deployed and if
   * run_issue_model_annotator is set to true. If more than one issue model is provided, only the
   * first provided issue model will be used for inference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> issueModels;

  /**
   * The list of phrase matchers to run. If not provided, all active phrase matchers will be used.
   * If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run
   * only if run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> phraseMatchers;

  /**
   * Whether to run the entity annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runEntityAnnotator;

  /**
   * Whether to run the intent annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runIntentAnnotator;

  /**
   * Whether to run the interruption annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runInterruptionAnnotator;

  /**
   * Whether to run the issue model annotator. A model should have already been deployed for this to
   * take effect.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runIssueModelAnnotator;

  /**
   * Whether to run the active phrase matcher annotator(s).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runPhraseMatcherAnnotator;

  /**
   * Whether to run the sentiment annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runSentimentAnnotator;

  /**
   * Whether to run the silence annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runSilenceAnnotator;

  /**
   * Whether to run the summarization annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean runSummarizationAnnotator;

  /**
   * Configuration for the summarization annotator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig summarizationConfig;

  /**
   * The issue model to run. If not provided, the most recently deployed topic model will be used.
   * The provided issue model will only be used for inference if the issue model is deployed and if
   * run_issue_model_annotator is set to true. If more than one issue model is provided, only the
   * first provided issue model will be used for inference.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIssueModels() {
    return issueModels;
  }

  /**
   * The issue model to run. If not provided, the most recently deployed topic model will be used.
   * The provided issue model will only be used for inference if the issue model is deployed and if
   * run_issue_model_annotator is set to true. If more than one issue model is provided, only the
   * first provided issue model will be used for inference.
   * @param issueModels issueModels or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setIssueModels(java.util.List<java.lang.String> issueModels) {
    this.issueModels = issueModels;
    return this;
  }

  /**
   * The list of phrase matchers to run. If not provided, all active phrase matchers will be used.
   * If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run
   * only if run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPhraseMatchers() {
    return phraseMatchers;
  }

  /**
   * The list of phrase matchers to run. If not provided, all active phrase matchers will be used.
   * If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run
   * only if run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * @param phraseMatchers phraseMatchers or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setPhraseMatchers(java.util.List<java.lang.String> phraseMatchers) {
    this.phraseMatchers = phraseMatchers;
    return this;
  }

  /**
   * Whether to run the entity annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunEntityAnnotator() {
    return runEntityAnnotator;
  }

  /**
   * Whether to run the entity annotator.
   * @param runEntityAnnotator runEntityAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunEntityAnnotator(java.lang.Boolean runEntityAnnotator) {
    this.runEntityAnnotator = runEntityAnnotator;
    return this;
  }

  /**
   * Whether to run the intent annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunIntentAnnotator() {
    return runIntentAnnotator;
  }

  /**
   * Whether to run the intent annotator.
   * @param runIntentAnnotator runIntentAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunIntentAnnotator(java.lang.Boolean runIntentAnnotator) {
    this.runIntentAnnotator = runIntentAnnotator;
    return this;
  }

  /**
   * Whether to run the interruption annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunInterruptionAnnotator() {
    return runInterruptionAnnotator;
  }

  /**
   * Whether to run the interruption annotator.
   * @param runInterruptionAnnotator runInterruptionAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunInterruptionAnnotator(java.lang.Boolean runInterruptionAnnotator) {
    this.runInterruptionAnnotator = runInterruptionAnnotator;
    return this;
  }

  /**
   * Whether to run the issue model annotator. A model should have already been deployed for this to
   * take effect.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunIssueModelAnnotator() {
    return runIssueModelAnnotator;
  }

  /**
   * Whether to run the issue model annotator. A model should have already been deployed for this to
   * take effect.
   * @param runIssueModelAnnotator runIssueModelAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunIssueModelAnnotator(java.lang.Boolean runIssueModelAnnotator) {
    this.runIssueModelAnnotator = runIssueModelAnnotator;
    return this;
  }

  /**
   * Whether to run the active phrase matcher annotator(s).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunPhraseMatcherAnnotator() {
    return runPhraseMatcherAnnotator;
  }

  /**
   * Whether to run the active phrase matcher annotator(s).
   * @param runPhraseMatcherAnnotator runPhraseMatcherAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunPhraseMatcherAnnotator(java.lang.Boolean runPhraseMatcherAnnotator) {
    this.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
    return this;
  }

  /**
   * Whether to run the sentiment annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunSentimentAnnotator() {
    return runSentimentAnnotator;
  }

  /**
   * Whether to run the sentiment annotator.
   * @param runSentimentAnnotator runSentimentAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunSentimentAnnotator(java.lang.Boolean runSentimentAnnotator) {
    this.runSentimentAnnotator = runSentimentAnnotator;
    return this;
  }

  /**
   * Whether to run the silence annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunSilenceAnnotator() {
    return runSilenceAnnotator;
  }

  /**
   * Whether to run the silence annotator.
   * @param runSilenceAnnotator runSilenceAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunSilenceAnnotator(java.lang.Boolean runSilenceAnnotator) {
    this.runSilenceAnnotator = runSilenceAnnotator;
    return this;
  }

  /**
   * Whether to run the summarization annotator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRunSummarizationAnnotator() {
    return runSummarizationAnnotator;
  }

  /**
   * Whether to run the summarization annotator.
   * @param runSummarizationAnnotator runSummarizationAnnotator or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setRunSummarizationAnnotator(java.lang.Boolean runSummarizationAnnotator) {
    this.runSummarizationAnnotator = runSummarizationAnnotator;
    return this;
  }

  /**
   * Configuration for the summarization annotator.
   * @return value or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig getSummarizationConfig() {
    return summarizationConfig;
  }

  /**
   * Configuration for the summarization annotator.
   * @param summarizationConfig summarizationConfig or {@code null} for none
   */
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector setSummarizationConfig(GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig summarizationConfig) {
    this.summarizationConfig = summarizationConfig;
    return this;
  }

  @Override
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector set(String fieldName, Object value) {
    return (GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector clone() {
    return (GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector) super.clone();
  }

}
