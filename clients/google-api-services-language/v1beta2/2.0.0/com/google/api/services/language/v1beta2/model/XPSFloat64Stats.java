/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1beta2.model;

/**
 * The data statistics of a series of FLOAT64 values.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSFloat64Stats extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSCommonStats commonStats;

  /**
   * Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and
   * the number of the buckets is dynamically generated. The buckets are non-overlapping and
   * completely cover whole FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<XPSFloat64StatsHistogramBucket> histogramBuckets;

  /**
   * The mean of the series.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double mean;

  /**
   * Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is,
   * approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are,
   * respectively, the min and max values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Double> quantiles;

  /**
   * The standard deviation of the series.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double standardDeviation;

  /**
   * @return value or {@code null} for none
   */
  public XPSCommonStats getCommonStats() {
    return commonStats;
  }

  /**
   * @param commonStats commonStats or {@code null} for none
   */
  public XPSFloat64Stats setCommonStats(XPSCommonStats commonStats) {
    this.commonStats = commonStats;
    return this;
  }

  /**
   * Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and
   * the number of the buckets is dynamically generated. The buckets are non-overlapping and
   * completely cover whole FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * @return value or {@code null} for none
   */
  public java.util.List<XPSFloat64StatsHistogramBucket> getHistogramBuckets() {
    return histogramBuckets;
  }

  /**
   * Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and
   * the number of the buckets is dynamically generated. The buckets are non-overlapping and
   * completely cover whole FLOAT64 range with min of first bucket being `"-Infinity"`, and max of
   * the last one being `"Infinity"`.
   * @param histogramBuckets histogramBuckets or {@code null} for none
   */
  public XPSFloat64Stats setHistogramBuckets(java.util.List<XPSFloat64StatsHistogramBucket> histogramBuckets) {
    this.histogramBuckets = histogramBuckets;
    return this;
  }

  /**
   * The mean of the series.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * The mean of the series.
   * @param mean mean or {@code null} for none
   */
  public XPSFloat64Stats setMean(java.lang.Double mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is,
   * approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are,
   * respectively, the min and max values.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Double> getQuantiles() {
    return quantiles;
  }

  /**
   * Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is,
   * approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are,
   * respectively, the min and max values.
   * @param quantiles quantiles or {@code null} for none
   */
  public XPSFloat64Stats setQuantiles(java.util.List<java.lang.Double> quantiles) {
    this.quantiles = quantiles;
    return this;
  }

  /**
   * The standard deviation of the series.
   * @return value or {@code null} for none
   */
  public java.lang.Double getStandardDeviation() {
    return standardDeviation;
  }

  /**
   * The standard deviation of the series.
   * @param standardDeviation standardDeviation or {@code null} for none
   */
  public XPSFloat64Stats setStandardDeviation(java.lang.Double standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  @Override
  public XPSFloat64Stats set(String fieldName, Object value) {
    return (XPSFloat64Stats) super.set(fieldName, value);
  }

  @Override
  public XPSFloat64Stats clone() {
    return (XPSFloat64Stats) super.clone();
  }

}
