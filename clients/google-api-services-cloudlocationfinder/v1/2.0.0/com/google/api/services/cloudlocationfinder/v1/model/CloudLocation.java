/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudlocationfinder.v1.model;

/**
 * Represents resource cloud locations.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Location Finder API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CloudLocation extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The carbon free energy percentage of the cloud location. This represents the average
   * percentage of time customers' application will be running on carbon-free energy. See
   * https://cloud.google.com/sustainability/region-carbon for more details. There is a difference
   * between default value 0 and unset value. 0 means the carbon free energy percentage is 0%, while
   * unset value means the carbon footprint data is not available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float carbonFreeEnergyPercentage;

  /**
   * Optional. The type of the cloud location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloudLocationType;

  /**
   * Optional. The provider of the cloud location. Values can be Google Cloud or third-party
   * providers, including AWS, Azure, or Oracle Cloud Infrastructure.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloudProvider;

  /**
   * Output only. The containing cloud location in the strict nesting hierarchy. For example, the
   * containing cloud location of a zone is a region.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String containingCloudLocation;

  /**
   * Optional. The human-readable name of the cloud location. Example: us-east-2, us-east1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Identifier. Name of the cloud location. Unique name of the cloud location including project and
   * location using the form:
   * `projects/{project_id}/locations/{location}/cloudLocations/{cloud_location}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The two-letter ISO 3166-1 alpha-2 code of the cloud location. Examples: US, JP, KR.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String territoryCode;

  /**
   * Optional. The carbon free energy percentage of the cloud location. This represents the average
   * percentage of time customers' application will be running on carbon-free energy. See
   * https://cloud.google.com/sustainability/region-carbon for more details. There is a difference
   * between default value 0 and unset value. 0 means the carbon free energy percentage is 0%, while
   * unset value means the carbon footprint data is not available.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCarbonFreeEnergyPercentage() {
    return carbonFreeEnergyPercentage;
  }

  /**
   * Optional. The carbon free energy percentage of the cloud location. This represents the average
   * percentage of time customers' application will be running on carbon-free energy. See
   * https://cloud.google.com/sustainability/region-carbon for more details. There is a difference
   * between default value 0 and unset value. 0 means the carbon free energy percentage is 0%, while
   * unset value means the carbon footprint data is not available.
   * @param carbonFreeEnergyPercentage carbonFreeEnergyPercentage or {@code null} for none
   */
  public CloudLocation setCarbonFreeEnergyPercentage(java.lang.Float carbonFreeEnergyPercentage) {
    this.carbonFreeEnergyPercentage = carbonFreeEnergyPercentage;
    return this;
  }

  /**
   * Optional. The type of the cloud location.
   * @return value or {@code null} for none
   */
  public java.lang.String getCloudLocationType() {
    return cloudLocationType;
  }

  /**
   * Optional. The type of the cloud location.
   * @param cloudLocationType cloudLocationType or {@code null} for none
   */
  public CloudLocation setCloudLocationType(java.lang.String cloudLocationType) {
    this.cloudLocationType = cloudLocationType;
    return this;
  }

  /**
   * Optional. The provider of the cloud location. Values can be Google Cloud or third-party
   * providers, including AWS, Azure, or Oracle Cloud Infrastructure.
   * @return value or {@code null} for none
   */
  public java.lang.String getCloudProvider() {
    return cloudProvider;
  }

  /**
   * Optional. The provider of the cloud location. Values can be Google Cloud or third-party
   * providers, including AWS, Azure, or Oracle Cloud Infrastructure.
   * @param cloudProvider cloudProvider or {@code null} for none
   */
  public CloudLocation setCloudProvider(java.lang.String cloudProvider) {
    this.cloudProvider = cloudProvider;
    return this;
  }

  /**
   * Output only. The containing cloud location in the strict nesting hierarchy. For example, the
   * containing cloud location of a zone is a region.
   * @return value or {@code null} for none
   */
  public java.lang.String getContainingCloudLocation() {
    return containingCloudLocation;
  }

  /**
   * Output only. The containing cloud location in the strict nesting hierarchy. For example, the
   * containing cloud location of a zone is a region.
   * @param containingCloudLocation containingCloudLocation or {@code null} for none
   */
  public CloudLocation setContainingCloudLocation(java.lang.String containingCloudLocation) {
    this.containingCloudLocation = containingCloudLocation;
    return this;
  }

  /**
   * Optional. The human-readable name of the cloud location. Example: us-east-2, us-east1.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Optional. The human-readable name of the cloud location. Example: us-east-2, us-east1.
   * @param displayName displayName or {@code null} for none
   */
  public CloudLocation setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Identifier. Name of the cloud location. Unique name of the cloud location including project and
   * location using the form:
   * `projects/{project_id}/locations/{location}/cloudLocations/{cloud_location}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. Name of the cloud location. Unique name of the cloud location including project and
   * location using the form:
   * `projects/{project_id}/locations/{location}/cloudLocations/{cloud_location}`
   * @param name name or {@code null} for none
   */
  public CloudLocation setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The two-letter ISO 3166-1 alpha-2 code of the cloud location. Examples: US, JP, KR.
   * @return value or {@code null} for none
   */
  public java.lang.String getTerritoryCode() {
    return territoryCode;
  }

  /**
   * Optional. The two-letter ISO 3166-1 alpha-2 code of the cloud location. Examples: US, JP, KR.
   * @param territoryCode territoryCode or {@code null} for none
   */
  public CloudLocation setTerritoryCode(java.lang.String territoryCode) {
    this.territoryCode = territoryCode;
    return this;
  }

  @Override
  public CloudLocation set(String fieldName, Object value) {
    return (CloudLocation) super.set(fieldName, value);
  }

  @Override
  public CloudLocation clone() {
    return (CloudLocation) super.clone();
  }

}
