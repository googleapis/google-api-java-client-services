/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.retail.v2beta.model;

/**
 * This field specifies all related information that is needed on client side for UI rendering of
 * conversational retail search.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI Search for Retail API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRetailV2betaSearchResponseConversationalSearchResult extends com.google.api.client.json.GenericJson {

  /**
   * This is the incremental additional filters implied from the current user answer. User should
   * add the suggested addition filters to the previous SearchRequest.filter, and use the merged
   * filter in the follow up search request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter additionalFilter;

  /**
   * This field is deprecated but will be kept for backward compatibility. There is expected to have
   * only one additional filter and the value will be the same to the same as field
   * `additional_filter`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter> additionalFilters;

  /**
   * Conversation UUID. This field will be stored in client side storage to maintain the
   * conversation session with server and will be used for next search request's
   * SearchRequest.ConversationalSearchSpec.conversation_id to restore conversation state in server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conversationId;

  /**
   * The follow-up question. e.g., `What is the color?`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String followupQuestion;

  /**
   * The current refined query for the conversational search. This field will be used in customer UI
   * that the query in the search bar should be replaced with the refined query. For example, if
   * SearchRequest.query is `dress` and next
   * SearchRequest.ConversationalSearchSpec.UserAnswer.text_answer is `red color`, which does not
   * match any product attribute value filters, the refined query will be `dress, red color`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refinedQuery;

  /**
   * The answer options provided to client for the follow-up question.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultSuggestedAnswer> suggestedAnswers;

  /**
   * This is the incremental additional filters implied from the current user answer. User should
   * add the suggested addition filters to the previous SearchRequest.filter, and use the merged
   * filter in the follow up search request.
   * @return value or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter getAdditionalFilter() {
    return additionalFilter;
  }

  /**
   * This is the incremental additional filters implied from the current user answer. User should
   * add the suggested addition filters to the previous SearchRequest.filter, and use the merged
   * filter in the follow up search request.
   * @param additionalFilter additionalFilter or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setAdditionalFilter(GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter additionalFilter) {
    this.additionalFilter = additionalFilter;
    return this;
  }

  /**
   * This field is deprecated but will be kept for backward compatibility. There is expected to have
   * only one additional filter and the value will be the same to the same as field
   * `additional_filter`.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter> getAdditionalFilters() {
    return additionalFilters;
  }

  /**
   * This field is deprecated but will be kept for backward compatibility. There is expected to have
   * only one additional filter and the value will be the same to the same as field
   * `additional_filter`.
   * @param additionalFilters additionalFilters or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setAdditionalFilters(java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultAdditionalFilter> additionalFilters) {
    this.additionalFilters = additionalFilters;
    return this;
  }

  /**
   * Conversation UUID. This field will be stored in client side storage to maintain the
   * conversation session with server and will be used for next search request's
   * SearchRequest.ConversationalSearchSpec.conversation_id to restore conversation state in server.
   * @return value or {@code null} for none
   */
  public java.lang.String getConversationId() {
    return conversationId;
  }

  /**
   * Conversation UUID. This field will be stored in client side storage to maintain the
   * conversation session with server and will be used for next search request's
   * SearchRequest.ConversationalSearchSpec.conversation_id to restore conversation state in server.
   * @param conversationId conversationId or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setConversationId(java.lang.String conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * The follow-up question. e.g., `What is the color?`
   * @return value or {@code null} for none
   */
  public java.lang.String getFollowupQuestion() {
    return followupQuestion;
  }

  /**
   * The follow-up question. e.g., `What is the color?`
   * @param followupQuestion followupQuestion or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setFollowupQuestion(java.lang.String followupQuestion) {
    this.followupQuestion = followupQuestion;
    return this;
  }

  /**
   * The current refined query for the conversational search. This field will be used in customer UI
   * that the query in the search bar should be replaced with the refined query. For example, if
   * SearchRequest.query is `dress` and next
   * SearchRequest.ConversationalSearchSpec.UserAnswer.text_answer is `red color`, which does not
   * match any product attribute value filters, the refined query will be `dress, red color`.
   * @return value or {@code null} for none
   */
  public java.lang.String getRefinedQuery() {
    return refinedQuery;
  }

  /**
   * The current refined query for the conversational search. This field will be used in customer UI
   * that the query in the search bar should be replaced with the refined query. For example, if
   * SearchRequest.query is `dress` and next
   * SearchRequest.ConversationalSearchSpec.UserAnswer.text_answer is `red color`, which does not
   * match any product attribute value filters, the refined query will be `dress, red color`.
   * @param refinedQuery refinedQuery or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setRefinedQuery(java.lang.String refinedQuery) {
    this.refinedQuery = refinedQuery;
    return this;
  }

  /**
   * The answer options provided to client for the follow-up question.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultSuggestedAnswer> getSuggestedAnswers() {
    return suggestedAnswers;
  }

  /**
   * The answer options provided to client for the follow-up question.
   * @param suggestedAnswers suggestedAnswers or {@code null} for none
   */
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult setSuggestedAnswers(java.util.List<GoogleCloudRetailV2betaSearchResponseConversationalSearchResultSuggestedAnswer> suggestedAnswers) {
    this.suggestedAnswers = suggestedAnswers;
    return this;
  }

  @Override
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult set(String fieldName, Object value) {
    return (GoogleCloudRetailV2betaSearchResponseConversationalSearchResult) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRetailV2betaSearchResponseConversationalSearchResult clone() {
    return (GoogleCloudRetailV2betaSearchResponseConversationalSearchResult) super.clone();
  }

}
