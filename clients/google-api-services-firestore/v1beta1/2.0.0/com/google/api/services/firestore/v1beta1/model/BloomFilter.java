/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1.model;

/**
 * A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries
 * with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as
 * unsigned integers using 2's complement encoding. These two hash values, named `h1` and `h2`, are
 * then used to compute the `hash_count` hash values using the formula, starting at `i=0`: h(i) = h1
 * + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to
 * get the bits of the bloom filter to test for the given entry.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BloomFilter extends com.google.api.client.json.GenericJson {

  /**
   * The bloom filter data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BitSequence bits;

  /**
   * The number of hashes used by the algorithm.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer hashCount;

  /**
   * The bloom filter data.
   * @return value or {@code null} for none
   */
  public BitSequence getBits() {
    return bits;
  }

  /**
   * The bloom filter data.
   * @param bits bits or {@code null} for none
   */
  public BloomFilter setBits(BitSequence bits) {
    this.bits = bits;
    return this;
  }

  /**
   * The number of hashes used by the algorithm.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHashCount() {
    return hashCount;
  }

  /**
   * The number of hashes used by the algorithm.
   * @param hashCount hashCount or {@code null} for none
   */
  public BloomFilter setHashCount(java.lang.Integer hashCount) {
    this.hashCount = hashCount;
    return this;
  }

  @Override
  public BloomFilter set(String fieldName, Object value) {
    return (BloomFilter) super.set(fieldName, value);
  }

  @Override
  public BloomFilter clone() {
    return (BloomFilter) super.clone();
  }

}
