/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.integrations.v1alpha.model;

/**
 * Contains the details of the execution info of this event: this includes the tasks execution
 * details plus the event execution statistics. Next available id: 10
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Application Integration API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EnterpriseCrmEventbusProtoEventExecutionDetails extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats> eventAttemptStats;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnterpriseCrmEventbusProtoEventExecutionSnapshot> eventExecutionSnapshot;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventExecutionState;

  /**
   * Indicates the number of times the execution has restarted from the beginning.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer eventRetriesFromBeginningCount;

  /**
   * The log file path (aka. cns address) for this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String logFilePath;

  /**
   * The network address (aka. bns address) that indicates where the event executor is running.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String networkAddress;

  /**
   * Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long nextExecutionTime;

  /**
   * Used internally and shouldn't be exposed to users. A counter for the cron job to record how
   * many times this event is in in_process state but don't have a lock consecutively/
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ryeLockUnheldCount;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats> getEventAttemptStats() {
    return eventAttemptStats;
  }

  /**
   * @param eventAttemptStats eventAttemptStats or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setEventAttemptStats(java.util.List<EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats> eventAttemptStats) {
    this.eventAttemptStats = eventAttemptStats;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<EnterpriseCrmEventbusProtoEventExecutionSnapshot> getEventExecutionSnapshot() {
    return eventExecutionSnapshot;
  }

  /**
   * @param eventExecutionSnapshot eventExecutionSnapshot or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setEventExecutionSnapshot(java.util.List<EnterpriseCrmEventbusProtoEventExecutionSnapshot> eventExecutionSnapshot) {
    this.eventExecutionSnapshot = eventExecutionSnapshot;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEventExecutionState() {
    return eventExecutionState;
  }

  /**
   * @param eventExecutionState eventExecutionState or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setEventExecutionState(java.lang.String eventExecutionState) {
    this.eventExecutionState = eventExecutionState;
    return this;
  }

  /**
   * Indicates the number of times the execution has restarted from the beginning.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEventRetriesFromBeginningCount() {
    return eventRetriesFromBeginningCount;
  }

  /**
   * Indicates the number of times the execution has restarted from the beginning.
   * @param eventRetriesFromBeginningCount eventRetriesFromBeginningCount or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setEventRetriesFromBeginningCount(java.lang.Integer eventRetriesFromBeginningCount) {
    this.eventRetriesFromBeginningCount = eventRetriesFromBeginningCount;
    return this;
  }

  /**
   * The log file path (aka. cns address) for this event.
   * @return value or {@code null} for none
   */
  public java.lang.String getLogFilePath() {
    return logFilePath;
  }

  /**
   * The log file path (aka. cns address) for this event.
   * @param logFilePath logFilePath or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setLogFilePath(java.lang.String logFilePath) {
    this.logFilePath = logFilePath;
    return this;
  }

  /**
   * The network address (aka. bns address) that indicates where the event executor is running.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetworkAddress() {
    return networkAddress;
  }

  /**
   * The network address (aka. bns address) that indicates where the event executor is running.
   * @param networkAddress networkAddress or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setNetworkAddress(java.lang.String networkAddress) {
    this.networkAddress = networkAddress;
    return this;
  }

  /**
   * Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNextExecutionTime() {
    return nextExecutionTime;
  }

  /**
   * Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
   * @param nextExecutionTime nextExecutionTime or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setNextExecutionTime(java.lang.Long nextExecutionTime) {
    this.nextExecutionTime = nextExecutionTime;
    return this;
  }

  /**
   * Used internally and shouldn't be exposed to users. A counter for the cron job to record how
   * many times this event is in in_process state but don't have a lock consecutively/
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRyeLockUnheldCount() {
    return ryeLockUnheldCount;
  }

  /**
   * Used internally and shouldn't be exposed to users. A counter for the cron job to record how
   * many times this event is in in_process state but don't have a lock consecutively/
   * @param ryeLockUnheldCount ryeLockUnheldCount or {@code null} for none
   */
  public EnterpriseCrmEventbusProtoEventExecutionDetails setRyeLockUnheldCount(java.lang.Integer ryeLockUnheldCount) {
    this.ryeLockUnheldCount = ryeLockUnheldCount;
    return this;
  }

  @Override
  public EnterpriseCrmEventbusProtoEventExecutionDetails set(String fieldName, Object value) {
    return (EnterpriseCrmEventbusProtoEventExecutionDetails) super.set(fieldName, value);
  }

  @Override
  public EnterpriseCrmEventbusProtoEventExecutionDetails clone() {
    return (EnterpriseCrmEventbusProtoEventExecutionDetails) super.clone();
  }

}
