/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.appengine.model;

/**
 * ProjectState contains the externally-visible project state that is used to communicate the state
 * and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead
 * derived from CCFE's internal representation of the project state.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the App Engine Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ProjectState extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Reasons currentReasons;

  /**
   * The previous and current reasons for a project state will be sent for a project event. CLHs
   * that need to know the signal that caused the project event to trigger (edges) as opposed to
   * just knowing the state can act upon differences in the previous and current reasons.Reasons
   * will be provided for every system: service management, data governance, abuse, and billing.If
   * this is a CCFE-triggered event used for reconciliation then the current reasons will be set to
   * their *_CONTROL_PLANE_SYNC state. The previous reasons will contain the last known set of non-
   * unknown non-control_plane_sync reasons for the state.Reasons fields are deprecated. New tenants
   * should only use the state field. If you must know the reason(s) behind a specific state, please
   * consult with CCFE team first (cloud-ccfe-discuss@google.com).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Reasons previousReasons;

  /**
   * The current state of the project. This state is the culmination of all of the opinions from
   * external systems that CCFE knows about of the project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * @return value or {@code null} for none
   */
  public Reasons getCurrentReasons() {
    return currentReasons;
  }

  /**
   * @param currentReasons currentReasons or {@code null} for none
   */
  public ProjectState setCurrentReasons(Reasons currentReasons) {
    this.currentReasons = currentReasons;
    return this;
  }

  /**
   * The previous and current reasons for a project state will be sent for a project event. CLHs
   * that need to know the signal that caused the project event to trigger (edges) as opposed to
   * just knowing the state can act upon differences in the previous and current reasons.Reasons
   * will be provided for every system: service management, data governance, abuse, and billing.If
   * this is a CCFE-triggered event used for reconciliation then the current reasons will be set to
   * their *_CONTROL_PLANE_SYNC state. The previous reasons will contain the last known set of non-
   * unknown non-control_plane_sync reasons for the state.Reasons fields are deprecated. New tenants
   * should only use the state field. If you must know the reason(s) behind a specific state, please
   * consult with CCFE team first (cloud-ccfe-discuss@google.com).
   * @return value or {@code null} for none
   */
  public Reasons getPreviousReasons() {
    return previousReasons;
  }

  /**
   * The previous and current reasons for a project state will be sent for a project event. CLHs
   * that need to know the signal that caused the project event to trigger (edges) as opposed to
   * just knowing the state can act upon differences in the previous and current reasons.Reasons
   * will be provided for every system: service management, data governance, abuse, and billing.If
   * this is a CCFE-triggered event used for reconciliation then the current reasons will be set to
   * their *_CONTROL_PLANE_SYNC state. The previous reasons will contain the last known set of non-
   * unknown non-control_plane_sync reasons for the state.Reasons fields are deprecated. New tenants
   * should only use the state field. If you must know the reason(s) behind a specific state, please
   * consult with CCFE team first (cloud-ccfe-discuss@google.com).
   * @param previousReasons previousReasons or {@code null} for none
   */
  public ProjectState setPreviousReasons(Reasons previousReasons) {
    this.previousReasons = previousReasons;
    return this;
  }

  /**
   * The current state of the project. This state is the culmination of all of the opinions from
   * external systems that CCFE knows about of the project.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The current state of the project. This state is the culmination of all of the opinions from
   * external systems that CCFE knows about of the project.
   * @param state state or {@code null} for none
   */
  public ProjectState setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public ProjectState set(String fieldName, Object value) {
    return (ProjectState) super.set(fieldName, value);
  }

  @Override
  public ProjectState clone() {
    return (ProjectState) super.clone();
  }

}
