/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The top-level DATE/TIME representation. It can represent either (1) one or multiple Date/Time
 * ranges, or (2) one or multiple of Date/Time points, or (3) a recurrent date/time expression. Next
 * available ID: 12. Only one of |range|, |point| and |recurrent| will be set: |range| contains a
 * list of resolved Date/Time ranges. |point| contains a list of resolved Date/Time points.
 * |recurrent| contains the representation for periodical dates/times. |range| and |point| are
 * repeated to accommodate the need when the date/time expression under one non-terminal is resolved
 * to a list of correct values. For example, "Mondays in April, 2014" may have 4 correct dates.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeDateTime extends com.google.api.client.json.GenericJson {

  /**
   * For temporal expressions that consist of components with different types, the elements in the
   * composition are nested according to the order they should be grounded/resolved. For example,
   * "tomorrow at 8am" has a relative component [tomorrow] and an absolute datetime component [8am]
   * so the annotation will be represented in the following way, indicating that the relative
   * datetime for tomorrow should be grounded first, and then resolve the actual 8am point for that
   * given date: point { hour: 8 hour_state: UNAMBIGUOUS properties { time_format: AM_PM_TOKEN } }
   * composition_element { relative { fetched { ordinal: 1 target { unit: DAY } base_type:
   * CURRENT_DATETIME } } grounding_stage: UNGROUNDED } grounding_stage: UNGROUNDED_COMPOSITION The
   * composition_element field will be populated only when the grounding_stage is set to
   * UNGROUNDED_COMPOSITION and it will hold the nested DateTime value for the rest the
   * compositional expression. More details in: go/datetime-resolution-decoupling.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTime compositionElement;

  /**
   * Deprecated fields. Do NOT use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean deleted7;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean deleted8;

  /**
   * This field of the DateTime message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingAnnotationEvalData evalData;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groundingStage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> point;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingDatetimeAbsoluteDateTime used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingDatetimeAbsoluteDateTime.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeResolutionProperties properties;

  /**
   * Note that there is a difference between this scenario and an ambiguous date/time expression.
   * The latter is resolved to multiple proto messages, not multiple values within one proto
   * message. To be concrete, consider "Monday" in "Monday football". It is ambiguous and can be
   * reasonably resolved to "Monday last week," "Monday this week" and "Monday next week." The 3
   * values are represented as 3 separate DateTime messages, not 3 values within one DateTime
   * message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeRange> range;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRecurrent recurrent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRelativeDateTime relative;

  /**
   * See comments of Span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeSpan span;

  /**
   * For temporal expressions that consist of components with different types, the elements in the
   * composition are nested according to the order they should be grounded/resolved. For example,
   * "tomorrow at 8am" has a relative component [tomorrow] and an absolute datetime component [8am]
   * so the annotation will be represented in the following way, indicating that the relative
   * datetime for tomorrow should be grounded first, and then resolve the actual 8am point for that
   * given date: point { hour: 8 hour_state: UNAMBIGUOUS properties { time_format: AM_PM_TOKEN } }
   * composition_element { relative { fetched { ordinal: 1 target { unit: DAY } base_type:
   * CURRENT_DATETIME } } grounding_stage: UNGROUNDED } grounding_stage: UNGROUNDED_COMPOSITION The
   * composition_element field will be populated only when the grounding_stage is set to
   * UNGROUNDED_COMPOSITION and it will hold the nested DateTime value for the rest the
   * compositional expression. More details in: go/datetime-resolution-decoupling.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime getCompositionElement() {
    return compositionElement;
  }

  /**
   * For temporal expressions that consist of components with different types, the elements in the
   * composition are nested according to the order they should be grounded/resolved. For example,
   * "tomorrow at 8am" has a relative component [tomorrow] and an absolute datetime component [8am]
   * so the annotation will be represented in the following way, indicating that the relative
   * datetime for tomorrow should be grounded first, and then resolve the actual 8am point for that
   * given date: point { hour: 8 hour_state: UNAMBIGUOUS properties { time_format: AM_PM_TOKEN } }
   * composition_element { relative { fetched { ordinal: 1 target { unit: DAY } base_type:
   * CURRENT_DATETIME } } grounding_stage: UNGROUNDED } grounding_stage: UNGROUNDED_COMPOSITION The
   * composition_element field will be populated only when the grounding_stage is set to
   * UNGROUNDED_COMPOSITION and it will hold the nested DateTime value for the rest the
   * compositional expression. More details in: go/datetime-resolution-decoupling.
   * @param compositionElement compositionElement or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setCompositionElement(NlpSemanticParsingDatetimeDateTime compositionElement) {
    this.compositionElement = compositionElement;
    return this;
  }

  /**
   * Deprecated fields. Do NOT use.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDeleted7() {
    return deleted7;
  }

  /**
   * Deprecated fields. Do NOT use.
   * @param deleted7 deleted7 or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setDeleted7(java.lang.Boolean deleted7) {
    this.deleted7 = deleted7;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDeleted8() {
    return deleted8;
  }

  /**
   * @param deleted8 deleted8 or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setDeleted8(java.lang.Boolean deleted8) {
    this.deleted8 = deleted8;
    return this;
  }

  /**
   * This field of the DateTime message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData getEvalData() {
    return evalData;
  }

  /**
   * This field of the DateTime message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * @param evalData evalData or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setEvalData(NlpSemanticParsingAnnotationEvalData evalData) {
    this.evalData = evalData;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGroundingStage() {
    return groundingStage;
  }

  /**
   * @param groundingStage groundingStage or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setGroundingStage(java.lang.String groundingStage) {
    this.groundingStage = groundingStage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> getPoint() {
    return point;
  }

  /**
   * @param point point or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setPoint(java.util.List<NlpSemanticParsingDatetimeAbsoluteDateTime> point) {
    this.point = point;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeResolutionProperties getProperties() {
    return properties;
  }

  /**
   * @param properties properties or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setProperties(NlpSemanticParsingDatetimeResolutionProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Note that there is a difference between this scenario and an ambiguous date/time expression.
   * The latter is resolved to multiple proto messages, not multiple values within one proto
   * message. To be concrete, consider "Monday" in "Monday football". It is ambiguous and can be
   * reasonably resolved to "Monday last week," "Monday this week" and "Monday next week." The 3
   * values are represented as 3 separate DateTime messages, not 3 values within one DateTime
   * message.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeRange> getRange() {
    return range;
  }

  /**
   * Note that there is a difference between this scenario and an ambiguous date/time expression.
   * The latter is resolved to multiple proto messages, not multiple values within one proto
   * message. To be concrete, consider "Monday" in "Monday football". It is ambiguous and can be
   * reasonably resolved to "Monday last week," "Monday this week" and "Monday next week." The 3
   * values are represented as 3 separate DateTime messages, not 3 values within one DateTime
   * message.
   * @param range range or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setRange(java.util.List<NlpSemanticParsingDatetimeRange> range) {
    this.range = range;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRecurrent getRecurrent() {
    return recurrent;
  }

  /**
   * @param recurrent recurrent or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setRecurrent(NlpSemanticParsingDatetimeRecurrent recurrent) {
    this.recurrent = recurrent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRelativeDateTime getRelative() {
    return relative;
  }

  /**
   * @param relative relative or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setRelative(NlpSemanticParsingDatetimeRelativeDateTime relative) {
    this.relative = relative;
    return this;
  }

  /**
   * See comments of Span.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeSpan getSpan() {
    return span;
  }

  /**
   * See comments of Span.
   * @param span span or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime setSpan(NlpSemanticParsingDatetimeSpan span) {
    this.span = span;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeDateTime set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeDateTime) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeDateTime clone() {
    return (NlpSemanticParsingDatetimeDateTime) super.clone();
  }

}
