/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1beta1.model;

/**
 * Specifies how to use infoTypes for evaluation. For example, a user might only want to evaluate
 * `PERSON`, `LOCATION`, and `AGE`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class InfoTypeConfig extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FilterList evaluateList;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FilterList ignoreList;

  /**
   * If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are
   * not considered for evaluation. For example: * Annotated text: "Toronto is a location" * Finding
   * 1: `{"infoType": "PERSON", "quote": "Toronto", "start": 0, "end": 7}` * Finding 2:
   * `{"infoType": "CITY", "quote": "Toronto", "start": 0, "end": 7}` * Finding 3: `{}` * Ground
   * truth: `{"infoType": "LOCATION", "quote": "Toronto", "start": 0, "end": 7}` When
   * `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive *
   * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive *
   * Finding 2: 1 true positive * Finding 3: 1 false negative
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean strictMatching;

  /**
   * @return value or {@code null} for none
   */
  public FilterList getEvaluateList() {
    return evaluateList;
  }

  /**
   * @param evaluateList evaluateList or {@code null} for none
   */
  public InfoTypeConfig setEvaluateList(FilterList evaluateList) {
    this.evaluateList = evaluateList;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public FilterList getIgnoreList() {
    return ignoreList;
  }

  /**
   * @param ignoreList ignoreList or {@code null} for none
   */
  public InfoTypeConfig setIgnoreList(FilterList ignoreList) {
    this.ignoreList = ignoreList;
    return this;
  }

  /**
   * If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are
   * not considered for evaluation. For example: * Annotated text: "Toronto is a location" * Finding
   * 1: `{"infoType": "PERSON", "quote": "Toronto", "start": 0, "end": 7}` * Finding 2:
   * `{"infoType": "CITY", "quote": "Toronto", "start": 0, "end": 7}` * Finding 3: `{}` * Ground
   * truth: `{"infoType": "LOCATION", "quote": "Toronto", "start": 0, "end": 7}` When
   * `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive *
   * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive *
   * Finding 2: 1 true positive * Finding 3: 1 false negative
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getStrictMatching() {
    return strictMatching;
  }

  /**
   * If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are
   * not considered for evaluation. For example: * Annotated text: "Toronto is a location" * Finding
   * 1: `{"infoType": "PERSON", "quote": "Toronto", "start": 0, "end": 7}` * Finding 2:
   * `{"infoType": "CITY", "quote": "Toronto", "start": 0, "end": 7}` * Finding 3: `{}` * Ground
   * truth: `{"infoType": "LOCATION", "quote": "Toronto", "start": 0, "end": 7}` When
   * `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive *
   * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive *
   * Finding 2: 1 true positive * Finding 3: 1 false negative
   * @param strictMatching strictMatching or {@code null} for none
   */
  public InfoTypeConfig setStrictMatching(java.lang.Boolean strictMatching) {
    this.strictMatching = strictMatching;
    return this;
  }

  @Override
  public InfoTypeConfig set(String fieldName, Object value) {
    return (InfoTypeConfig) super.set(fieldName, value);
  }

  @Override
  public InfoTypeConfig clone() {
    return (InfoTypeConfig) super.clone();
  }

}
