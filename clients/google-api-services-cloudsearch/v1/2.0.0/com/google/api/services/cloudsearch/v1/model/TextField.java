/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Model definition for TextField.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TextField extends com.google.api.client.json.GenericJson {

  /**
   * The initial set of auto complete items without any user input.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AutoComplete autoComplete;

  /**
   * The refresh function which returns AutoComplete based on the user's input text. If the callback
   * is not specified, auto complete will be purely done in client side based on the auto_complete
   * items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FormAction autoCompleteCallback;

  /**
   * When set to true, a user can input multiple auto-complet items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoCompleteMultipleSelections;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hintText;

  /**
   * One of label or hint_text is required to be specified by the developers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxLines;

  /**
   * The name of the text field which is will be used in FormInput.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FormAction onChange;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The default value when no input from user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * The initial set of auto complete items without any user input.
   * @return value or {@code null} for none
   */
  public AutoComplete getAutoComplete() {
    return autoComplete;
  }

  /**
   * The initial set of auto complete items without any user input.
   * @param autoComplete autoComplete or {@code null} for none
   */
  public TextField setAutoComplete(AutoComplete autoComplete) {
    this.autoComplete = autoComplete;
    return this;
  }

  /**
   * The refresh function which returns AutoComplete based on the user's input text. If the callback
   * is not specified, auto complete will be purely done in client side based on the auto_complete
   * items.
   * @return value or {@code null} for none
   */
  public FormAction getAutoCompleteCallback() {
    return autoCompleteCallback;
  }

  /**
   * The refresh function which returns AutoComplete based on the user's input text. If the callback
   * is not specified, auto complete will be purely done in client side based on the auto_complete
   * items.
   * @param autoCompleteCallback autoCompleteCallback or {@code null} for none
   */
  public TextField setAutoCompleteCallback(FormAction autoCompleteCallback) {
    this.autoCompleteCallback = autoCompleteCallback;
    return this;
  }

  /**
   * When set to true, a user can input multiple auto-complet items.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoCompleteMultipleSelections() {
    return autoCompleteMultipleSelections;
  }

  /**
   * When set to true, a user can input multiple auto-complet items.
   * @param autoCompleteMultipleSelections autoCompleteMultipleSelections or {@code null} for none
   */
  public TextField setAutoCompleteMultipleSelections(java.lang.Boolean autoCompleteMultipleSelections) {
    this.autoCompleteMultipleSelections = autoCompleteMultipleSelections;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getHintText() {
    return hintText;
  }

  /**
   * @param hintText hintText or {@code null} for none
   */
  public TextField setHintText(java.lang.String hintText) {
    this.hintText = hintText;
    return this;
  }

  /**
   * One of label or hint_text is required to be specified by the developers.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * One of label or hint_text is required to be specified by the developers.
   * @param label label or {@code null} for none
   */
  public TextField setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxLines() {
    return maxLines;
  }

  /**
   * @param maxLines maxLines or {@code null} for none
   */
  public TextField setMaxLines(java.lang.Integer maxLines) {
    this.maxLines = maxLines;
    return this;
  }

  /**
   * The name of the text field which is will be used in FormInput.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the text field which is will be used in FormInput.
   * @param name name or {@code null} for none
   */
  public TextField setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public FormAction getOnChange() {
    return onChange;
  }

  /**
   * @param onChange onChange or {@code null} for none
   */
  public TextField setOnChange(FormAction onChange) {
    this.onChange = onChange;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public TextField setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The default value when no input from user.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * The default value when no input from user.
   * @param value value or {@code null} for none
   */
  public TextField setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public TextField set(String fieldName, Object value) {
    return (TextField) super.set(fieldName, value);
  }

  @Override
  public TextField clone() {
    return (TextField) super.clone();
  }

}
