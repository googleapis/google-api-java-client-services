/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Various properties and settings associated with Exadata database server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DbServerProperties extends com.google.api.client.json.GenericJson {

  /**
   * Output only. OCID of database nodes associated with the database server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> dbNodeIds;

  /**
   * Optional. Local storage per VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dbNodeStorageSizeGb;

  /**
   * Optional. Maximum local storage per VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxDbNodeStorageSizeGb;

  /**
   * Optional. Maximum memory allocated in GBs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxMemorySizeGb;

  /**
   * Optional. Maximum OCPU count per database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxOcpuCount;

  /**
   * Optional. Memory allocated in GBs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memorySizeGb;

  /**
   * Output only. OCID of database server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ocid;

  /**
   * Optional. OCPU count per database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ocpuCount;

  /**
   * Output only. State of the database server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Optional. Vm count per database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer vmCount;

  /**
   * Output only. OCID of database nodes associated with the database server.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDbNodeIds() {
    return dbNodeIds;
  }

  /**
   * Output only. OCID of database nodes associated with the database server.
   * @param dbNodeIds dbNodeIds or {@code null} for none
   */
  public DbServerProperties setDbNodeIds(java.util.List<java.lang.String> dbNodeIds) {
    this.dbNodeIds = dbNodeIds;
    return this;
  }

  /**
   * Optional. Local storage per VM.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDbNodeStorageSizeGb() {
    return dbNodeStorageSizeGb;
  }

  /**
   * Optional. Local storage per VM.
   * @param dbNodeStorageSizeGb dbNodeStorageSizeGb or {@code null} for none
   */
  public DbServerProperties setDbNodeStorageSizeGb(java.lang.Integer dbNodeStorageSizeGb) {
    this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
    return this;
  }

  /**
   * Optional. Maximum local storage per VM.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxDbNodeStorageSizeGb() {
    return maxDbNodeStorageSizeGb;
  }

  /**
   * Optional. Maximum local storage per VM.
   * @param maxDbNodeStorageSizeGb maxDbNodeStorageSizeGb or {@code null} for none
   */
  public DbServerProperties setMaxDbNodeStorageSizeGb(java.lang.Integer maxDbNodeStorageSizeGb) {
    this.maxDbNodeStorageSizeGb = maxDbNodeStorageSizeGb;
    return this;
  }

  /**
   * Optional. Maximum memory allocated in GBs.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxMemorySizeGb() {
    return maxMemorySizeGb;
  }

  /**
   * Optional. Maximum memory allocated in GBs.
   * @param maxMemorySizeGb maxMemorySizeGb or {@code null} for none
   */
  public DbServerProperties setMaxMemorySizeGb(java.lang.Integer maxMemorySizeGb) {
    this.maxMemorySizeGb = maxMemorySizeGb;
    return this;
  }

  /**
   * Optional. Maximum OCPU count per database.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxOcpuCount() {
    return maxOcpuCount;
  }

  /**
   * Optional. Maximum OCPU count per database.
   * @param maxOcpuCount maxOcpuCount or {@code null} for none
   */
  public DbServerProperties setMaxOcpuCount(java.lang.Integer maxOcpuCount) {
    this.maxOcpuCount = maxOcpuCount;
    return this;
  }

  /**
   * Optional. Memory allocated in GBs.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemorySizeGb() {
    return memorySizeGb;
  }

  /**
   * Optional. Memory allocated in GBs.
   * @param memorySizeGb memorySizeGb or {@code null} for none
   */
  public DbServerProperties setMemorySizeGb(java.lang.Integer memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Output only. OCID of database server.
   * @return value or {@code null} for none
   */
  public java.lang.String getOcid() {
    return ocid;
  }

  /**
   * Output only. OCID of database server.
   * @param ocid ocid or {@code null} for none
   */
  public DbServerProperties setOcid(java.lang.String ocid) {
    this.ocid = ocid;
    return this;
  }

  /**
   * Optional. OCPU count per database.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOcpuCount() {
    return ocpuCount;
  }

  /**
   * Optional. OCPU count per database.
   * @param ocpuCount ocpuCount or {@code null} for none
   */
  public DbServerProperties setOcpuCount(java.lang.Integer ocpuCount) {
    this.ocpuCount = ocpuCount;
    return this;
  }

  /**
   * Output only. State of the database server.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the database server.
   * @param state state or {@code null} for none
   */
  public DbServerProperties setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Optional. Vm count per database.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVmCount() {
    return vmCount;
  }

  /**
   * Optional. Vm count per database.
   * @param vmCount vmCount or {@code null} for none
   */
  public DbServerProperties setVmCount(java.lang.Integer vmCount) {
    this.vmCount = vmCount;
    return this;
  }

  @Override
  public DbServerProperties set(String fieldName, Object value) {
    return (DbServerProperties) super.set(fieldName, value);
  }

  @Override
  public DbServerProperties clone() {
    return (DbServerProperties) super.clone();
  }

}
