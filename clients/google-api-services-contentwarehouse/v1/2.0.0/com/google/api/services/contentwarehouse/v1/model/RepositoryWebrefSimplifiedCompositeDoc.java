/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents an information which is very close to composite doc, but compresses how the anchors
 * are represented to save space. Next available tag: 15.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefSimplifiedCompositeDoc extends com.google.api.client.json.GenericJson {

  /**
   * The composite doc anchors trimmed and transformed in a smaller data structure and aggregated
   * (if they have the exact same text).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefSimplifiedAnchors anchors;

  /**
   * IMPORTANT: do not access this field directly, use the simplified-cdoc-access library functions
   * to get the composite doc out of this proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet cdocContainer;

  /**
   * The composite doc spans which were annotated with entities by Webref.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefRefconDocumentMentionSpans documentMentionSpans;

  /**
   * Metadata related to why this doc was matched to its owning entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefPreprocessingUrlMatchingMetadata matchingMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefSimplifiedAnchors obsoleteAnchorsWithoutInterwiki;

  /**
   * Additional document metadata needed by Refcon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefRefconRefconDocumentMetadata refconDocumentMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceSnapshotType;

  /**
   * The URL, populated independently of whether we have a CompositeDoc proto. If the cdoc exists,
   * the url is the same as CompositeDoc.doc.url.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet webrefOutlinks;

  /**
   * The composite doc anchors trimmed and transformed in a smaller data structure and aggregated
   * (if they have the exact same text).
   * @return value or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchors getAnchors() {
    return anchors;
  }

  /**
   * The composite doc anchors trimmed and transformed in a smaller data structure and aggregated
   * (if they have the exact same text).
   * @param anchors anchors or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setAnchors(RepositoryWebrefSimplifiedAnchors anchors) {
    this.anchors = anchors;
    return this;
  }

  /**
   * IMPORTANT: do not access this field directly, use the simplified-cdoc-access library functions
   * to get the composite doc out of this proto.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getCdocContainer() {
    return cdocContainer;
  }

  /**
   * IMPORTANT: do not access this field directly, use the simplified-cdoc-access library functions
   * to get the composite doc out of this proto.
   * @param cdocContainer cdocContainer or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setCdocContainer(Proto2BridgeMessageSet cdocContainer) {
    this.cdocContainer = cdocContainer;
    return this;
  }

  /**
   * The composite doc spans which were annotated with entities by Webref.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefRefconDocumentMentionSpans getDocumentMentionSpans() {
    return documentMentionSpans;
  }

  /**
   * The composite doc spans which were annotated with entities by Webref.
   * @param documentMentionSpans documentMentionSpans or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setDocumentMentionSpans(RepositoryWebrefRefconDocumentMentionSpans documentMentionSpans) {
    this.documentMentionSpans = documentMentionSpans;
    return this;
  }

  /**
   * Metadata related to why this doc was matched to its owning entity.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefPreprocessingUrlMatchingMetadata getMatchingMetadata() {
    return matchingMetadata;
  }

  /**
   * Metadata related to why this doc was matched to its owning entity.
   * @param matchingMetadata matchingMetadata or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setMatchingMetadata(RepositoryWebrefPreprocessingUrlMatchingMetadata matchingMetadata) {
    this.matchingMetadata = matchingMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public RepositoryWebrefSimplifiedAnchors getObsoleteAnchorsWithoutInterwiki() {
    return obsoleteAnchorsWithoutInterwiki;
  }

  /**
   * @param obsoleteAnchorsWithoutInterwiki obsoleteAnchorsWithoutInterwiki or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setObsoleteAnchorsWithoutInterwiki(RepositoryWebrefSimplifiedAnchors obsoleteAnchorsWithoutInterwiki) {
    this.obsoleteAnchorsWithoutInterwiki = obsoleteAnchorsWithoutInterwiki;
    return this;
  }

  /**
   * Additional document metadata needed by Refcon.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefRefconRefconDocumentMetadata getRefconDocumentMetadata() {
    return refconDocumentMetadata;
  }

  /**
   * Additional document metadata needed by Refcon.
   * @param refconDocumentMetadata refconDocumentMetadata or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setRefconDocumentMetadata(RepositoryWebrefRefconRefconDocumentMetadata refconDocumentMetadata) {
    this.refconDocumentMetadata = refconDocumentMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceSnapshotType() {
    return sourceSnapshotType;
  }

  /**
   * @param sourceSnapshotType sourceSnapshotType or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setSourceSnapshotType(java.lang.String sourceSnapshotType) {
    this.sourceSnapshotType = sourceSnapshotType;
    return this;
  }

  /**
   * The URL, populated independently of whether we have a CompositeDoc proto. If the cdoc exists,
   * the url is the same as CompositeDoc.doc.url.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * The URL, populated independently of whether we have a CompositeDoc proto. If the cdoc exists,
   * the url is the same as CompositeDoc.doc.url.
   * @param url url or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getWebrefOutlinks() {
    return webrefOutlinks;
  }

  /**
   * @param webrefOutlinks webrefOutlinks or {@code null} for none
   */
  public RepositoryWebrefSimplifiedCompositeDoc setWebrefOutlinks(Proto2BridgeMessageSet webrefOutlinks) {
    this.webrefOutlinks = webrefOutlinks;
    return this;
  }

  @Override
  public RepositoryWebrefSimplifiedCompositeDoc set(String fieldName, Object value) {
    return (RepositoryWebrefSimplifiedCompositeDoc) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefSimplifiedCompositeDoc clone() {
    return (RepositoryWebrefSimplifiedCompositeDoc) super.clone();
  }

}
