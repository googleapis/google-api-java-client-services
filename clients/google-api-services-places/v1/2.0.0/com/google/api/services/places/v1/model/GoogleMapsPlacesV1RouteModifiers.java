/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1.model;

/**
 * Encapsulates a set of optional conditions to satisfy when calculating the routes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places API (New). For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlacesV1RouteModifiers extends com.google.api.client.json.GenericJson {

  /**
   * Optional. When set to true, avoids ferries where reasonable, giving preference to routes not
   * containing ferries. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean avoidFerries;

  /**
   * Optional. When set to true, avoids highways where reasonable, giving preference to routes not
   * containing highways. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean avoidHighways;

  /**
   * Optional. When set to true, avoids navigating indoors where reasonable, giving preference to
   * routes not containing indoor navigation. Applies only to the `WALK` `TravelMode`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean avoidIndoor;

  /**
   * Optional. When set to true, avoids toll roads where reasonable, giving preference to routes not
   * containing toll roads. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean avoidTolls;

  /**
   * Optional. When set to true, avoids ferries where reasonable, giving preference to routes not
   * containing ferries. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAvoidFerries() {
    return avoidFerries;
  }

  /**
   * Optional. When set to true, avoids ferries where reasonable, giving preference to routes not
   * containing ferries. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @param avoidFerries avoidFerries or {@code null} for none
   */
  public GoogleMapsPlacesV1RouteModifiers setAvoidFerries(java.lang.Boolean avoidFerries) {
    this.avoidFerries = avoidFerries;
    return this;
  }

  /**
   * Optional. When set to true, avoids highways where reasonable, giving preference to routes not
   * containing highways. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAvoidHighways() {
    return avoidHighways;
  }

  /**
   * Optional. When set to true, avoids highways where reasonable, giving preference to routes not
   * containing highways. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @param avoidHighways avoidHighways or {@code null} for none
   */
  public GoogleMapsPlacesV1RouteModifiers setAvoidHighways(java.lang.Boolean avoidHighways) {
    this.avoidHighways = avoidHighways;
    return this;
  }

  /**
   * Optional. When set to true, avoids navigating indoors where reasonable, giving preference to
   * routes not containing indoor navigation. Applies only to the `WALK` `TravelMode`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAvoidIndoor() {
    return avoidIndoor;
  }

  /**
   * Optional. When set to true, avoids navigating indoors where reasonable, giving preference to
   * routes not containing indoor navigation. Applies only to the `WALK` `TravelMode`.
   * @param avoidIndoor avoidIndoor or {@code null} for none
   */
  public GoogleMapsPlacesV1RouteModifiers setAvoidIndoor(java.lang.Boolean avoidIndoor) {
    this.avoidIndoor = avoidIndoor;
    return this;
  }

  /**
   * Optional. When set to true, avoids toll roads where reasonable, giving preference to routes not
   * containing toll roads. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAvoidTolls() {
    return avoidTolls;
  }

  /**
   * Optional. When set to true, avoids toll roads where reasonable, giving preference to routes not
   * containing toll roads. Applies only to the `DRIVE` and `TWO_WHEELER` `TravelMode`.
   * @param avoidTolls avoidTolls or {@code null} for none
   */
  public GoogleMapsPlacesV1RouteModifiers setAvoidTolls(java.lang.Boolean avoidTolls) {
    this.avoidTolls = avoidTolls;
    return this;
  }

  @Override
  public GoogleMapsPlacesV1RouteModifiers set(String fieldName, Object value) {
    return (GoogleMapsPlacesV1RouteModifiers) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlacesV1RouteModifiers clone() {
    return (GoogleMapsPlacesV1RouteModifiers) super.clone();
  }

}
