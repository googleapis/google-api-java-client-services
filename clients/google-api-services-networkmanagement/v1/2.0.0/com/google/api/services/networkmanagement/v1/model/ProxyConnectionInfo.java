/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1.model;

/**
 * For display only. Metadata associated with ProxyConnection.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ProxyConnectionInfo extends com.google.api.client.json.GenericJson {

  /**
   * URI of the network where connection is proxied.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String networkUri;

  /**
   * Destination IP address of a new connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String newDestinationIp;

  /**
   * Destination port of a new connection. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer newDestinationPort;

  /**
   * Source IP address of a new connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String newSourceIp;

  /**
   * Source port of a new connection. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer newSourcePort;

  /**
   * Destination IP address of an original connection
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oldDestinationIp;

  /**
   * Destination port of an original connection. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer oldDestinationPort;

  /**
   * Source IP address of an original connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oldSourceIp;

  /**
   * Source port of an original connection. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer oldSourcePort;

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String protocol;

  /**
   * Uri of proxy subnet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subnetUri;

  /**
   * URI of the network where connection is proxied.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetworkUri() {
    return networkUri;
  }

  /**
   * URI of the network where connection is proxied.
   * @param networkUri networkUri or {@code null} for none
   */
  public ProxyConnectionInfo setNetworkUri(java.lang.String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * Destination IP address of a new connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getNewDestinationIp() {
    return newDestinationIp;
  }

  /**
   * Destination IP address of a new connection.
   * @param newDestinationIp newDestinationIp or {@code null} for none
   */
  public ProxyConnectionInfo setNewDestinationIp(java.lang.String newDestinationIp) {
    this.newDestinationIp = newDestinationIp;
    return this;
  }

  /**
   * Destination port of a new connection. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNewDestinationPort() {
    return newDestinationPort;
  }

  /**
   * Destination port of a new connection. Only valid when protocol is TCP or UDP.
   * @param newDestinationPort newDestinationPort or {@code null} for none
   */
  public ProxyConnectionInfo setNewDestinationPort(java.lang.Integer newDestinationPort) {
    this.newDestinationPort = newDestinationPort;
    return this;
  }

  /**
   * Source IP address of a new connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getNewSourceIp() {
    return newSourceIp;
  }

  /**
   * Source IP address of a new connection.
   * @param newSourceIp newSourceIp or {@code null} for none
   */
  public ProxyConnectionInfo setNewSourceIp(java.lang.String newSourceIp) {
    this.newSourceIp = newSourceIp;
    return this;
  }

  /**
   * Source port of a new connection. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNewSourcePort() {
    return newSourcePort;
  }

  /**
   * Source port of a new connection. Only valid when protocol is TCP or UDP.
   * @param newSourcePort newSourcePort or {@code null} for none
   */
  public ProxyConnectionInfo setNewSourcePort(java.lang.Integer newSourcePort) {
    this.newSourcePort = newSourcePort;
    return this;
  }

  /**
   * Destination IP address of an original connection
   * @return value or {@code null} for none
   */
  public java.lang.String getOldDestinationIp() {
    return oldDestinationIp;
  }

  /**
   * Destination IP address of an original connection
   * @param oldDestinationIp oldDestinationIp or {@code null} for none
   */
  public ProxyConnectionInfo setOldDestinationIp(java.lang.String oldDestinationIp) {
    this.oldDestinationIp = oldDestinationIp;
    return this;
  }

  /**
   * Destination port of an original connection. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOldDestinationPort() {
    return oldDestinationPort;
  }

  /**
   * Destination port of an original connection. Only valid when protocol is TCP or UDP.
   * @param oldDestinationPort oldDestinationPort or {@code null} for none
   */
  public ProxyConnectionInfo setOldDestinationPort(java.lang.Integer oldDestinationPort) {
    this.oldDestinationPort = oldDestinationPort;
    return this;
  }

  /**
   * Source IP address of an original connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getOldSourceIp() {
    return oldSourceIp;
  }

  /**
   * Source IP address of an original connection.
   * @param oldSourceIp oldSourceIp or {@code null} for none
   */
  public ProxyConnectionInfo setOldSourceIp(java.lang.String oldSourceIp) {
    this.oldSourceIp = oldSourceIp;
    return this;
  }

  /**
   * Source port of an original connection. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOldSourcePort() {
    return oldSourcePort;
  }

  /**
   * Source port of an original connection. Only valid when protocol is TCP or UDP.
   * @param oldSourcePort oldSourcePort or {@code null} for none
   */
  public ProxyConnectionInfo setOldSourcePort(java.lang.Integer oldSourcePort) {
    this.oldSourcePort = oldSourcePort;
    return this;
  }

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * @return value or {@code null} for none
   */
  public java.lang.String getProtocol() {
    return protocol;
  }

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * @param protocol protocol or {@code null} for none
   */
  public ProxyConnectionInfo setProtocol(java.lang.String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Uri of proxy subnet.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubnetUri() {
    return subnetUri;
  }

  /**
   * Uri of proxy subnet.
   * @param subnetUri subnetUri or {@code null} for none
   */
  public ProxyConnectionInfo setSubnetUri(java.lang.String subnetUri) {
    this.subnetUri = subnetUri;
    return this;
  }

  @Override
  public ProxyConnectionInfo set(String fieldName, Object value) {
    return (ProxyConnectionInfo) super.set(fieldName, value);
  }

  @Override
  public ProxyConnectionInfo clone() {
    return (ProxyConnectionInfo) super.clone();
  }

}
