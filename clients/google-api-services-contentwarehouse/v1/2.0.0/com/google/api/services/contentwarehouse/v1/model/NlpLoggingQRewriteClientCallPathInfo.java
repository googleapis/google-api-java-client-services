/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The proto that holds the complete call path info of the QRewrite client (e.g. the QUS's phase
 * like "RBT","QBT"; the QUS's candidate type like "Identity"; and the ACE's candidate type like
 * "FuzzyMatcher"). Next ID: 5 ACE tags
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpLoggingQRewriteClientCallPathInfo extends com.google.api.client.json.GenericJson {

  /**
   * Indicates the type of candidate rewritten by QRewrite. This field is filled within QRewrite
   * instead of QRewrite clients, and we add this here so this proto is able to hold all tags to
   * form the identifier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityQrewriteCandidateId qrewriteCandidateId;

  /**
   * QUS tags Indicates the type of the candidate in QUS that sends the QRewrite request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityQrewriteCandidateId qusCandidateId;

  /**
   * Upstream call path before QUS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpLoggingQusClientCallPathInfo qusClientCallPathInfo;

  /**
   * Indicates which QUS phase sends the QRewrite request. Note if the QRewrite response is reused
   * in succeeding phases, this field should not be overridden and it is always the phase that
   * initially sends the RPC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String qusPhase;

  /**
   * Indicates the type of candidate rewritten by QRewrite. This field is filled within QRewrite
   * instead of QRewrite clients, and we add this here so this proto is able to hold all tags to
   * form the identifier.
   * @return value or {@code null} for none
   */
  public QualityQrewriteCandidateId getQrewriteCandidateId() {
    return qrewriteCandidateId;
  }

  /**
   * Indicates the type of candidate rewritten by QRewrite. This field is filled within QRewrite
   * instead of QRewrite clients, and we add this here so this proto is able to hold all tags to
   * form the identifier.
   * @param qrewriteCandidateId qrewriteCandidateId or {@code null} for none
   */
  public NlpLoggingQRewriteClientCallPathInfo setQrewriteCandidateId(QualityQrewriteCandidateId qrewriteCandidateId) {
    this.qrewriteCandidateId = qrewriteCandidateId;
    return this;
  }

  /**
   * QUS tags Indicates the type of the candidate in QUS that sends the QRewrite request.
   * @return value or {@code null} for none
   */
  public QualityQrewriteCandidateId getQusCandidateId() {
    return qusCandidateId;
  }

  /**
   * QUS tags Indicates the type of the candidate in QUS that sends the QRewrite request.
   * @param qusCandidateId qusCandidateId or {@code null} for none
   */
  public NlpLoggingQRewriteClientCallPathInfo setQusCandidateId(QualityQrewriteCandidateId qusCandidateId) {
    this.qusCandidateId = qusCandidateId;
    return this;
  }

  /**
   * Upstream call path before QUS.
   * @return value or {@code null} for none
   */
  public NlpLoggingQusClientCallPathInfo getQusClientCallPathInfo() {
    return qusClientCallPathInfo;
  }

  /**
   * Upstream call path before QUS.
   * @param qusClientCallPathInfo qusClientCallPathInfo or {@code null} for none
   */
  public NlpLoggingQRewriteClientCallPathInfo setQusClientCallPathInfo(NlpLoggingQusClientCallPathInfo qusClientCallPathInfo) {
    this.qusClientCallPathInfo = qusClientCallPathInfo;
    return this;
  }

  /**
   * Indicates which QUS phase sends the QRewrite request. Note if the QRewrite response is reused
   * in succeeding phases, this field should not be overridden and it is always the phase that
   * initially sends the RPC.
   * @return value or {@code null} for none
   */
  public java.lang.String getQusPhase() {
    return qusPhase;
  }

  /**
   * Indicates which QUS phase sends the QRewrite request. Note if the QRewrite response is reused
   * in succeeding phases, this field should not be overridden and it is always the phase that
   * initially sends the RPC.
   * @param qusPhase qusPhase or {@code null} for none
   */
  public NlpLoggingQRewriteClientCallPathInfo setQusPhase(java.lang.String qusPhase) {
    this.qusPhase = qusPhase;
    return this;
  }

  @Override
  public NlpLoggingQRewriteClientCallPathInfo set(String fieldName, Object value) {
    return (NlpLoggingQRewriteClientCallPathInfo) super.set(fieldName, value);
  }

  @Override
  public NlpLoggingQRewriteClientCallPathInfo clone() {
    return (NlpLoggingQRewriteClientCallPathInfo) super.clone();
  }

}
