/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.pubsub.model;

/**
 * Ingestion settings for Amazon Kinesis Data Streams.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Pub/Sub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AwsKinesis extends com.google.api.client.json.GenericJson {

  /**
   * Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the
   * Pub/Sub docs for how to set up this role and the required permissions that need to be attached
   * to it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String awsRoleArn;

  /**
   * Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer
   * must be already created and ready to be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String consumerArn;

  /**
   * Required. The GCP service account to be used for Federated Identity authentication with Kinesis
   * (via a `AssumeRoleWithWebIdentity` call for the provided role). The `aws_role_arn` must be set
   * up with `accounts.google.com:sub` equals to this service account number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcpServiceAccount;

  /**
   * Output only. An output-only field that indicates the state of the Kinesis ingestion source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Required. The Kinesis stream ARN to ingest data from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String streamArn;

  /**
   * Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the
   * Pub/Sub docs for how to set up this role and the required permissions that need to be attached
   * to it.
   * @return value or {@code null} for none
   */
  public java.lang.String getAwsRoleArn() {
    return awsRoleArn;
  }

  /**
   * Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the
   * Pub/Sub docs for how to set up this role and the required permissions that need to be attached
   * to it.
   * @param awsRoleArn awsRoleArn or {@code null} for none
   */
  public AwsKinesis setAwsRoleArn(java.lang.String awsRoleArn) {
    this.awsRoleArn = awsRoleArn;
    return this;
  }

  /**
   * Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer
   * must be already created and ready to be used.
   * @return value or {@code null} for none
   */
  public java.lang.String getConsumerArn() {
    return consumerArn;
  }

  /**
   * Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer
   * must be already created and ready to be used.
   * @param consumerArn consumerArn or {@code null} for none
   */
  public AwsKinesis setConsumerArn(java.lang.String consumerArn) {
    this.consumerArn = consumerArn;
    return this;
  }

  /**
   * Required. The GCP service account to be used for Federated Identity authentication with Kinesis
   * (via a `AssumeRoleWithWebIdentity` call for the provided role). The `aws_role_arn` must be set
   * up with `accounts.google.com:sub` equals to this service account number.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcpServiceAccount() {
    return gcpServiceAccount;
  }

  /**
   * Required. The GCP service account to be used for Federated Identity authentication with Kinesis
   * (via a `AssumeRoleWithWebIdentity` call for the provided role). The `aws_role_arn` must be set
   * up with `accounts.google.com:sub` equals to this service account number.
   * @param gcpServiceAccount gcpServiceAccount or {@code null} for none
   */
  public AwsKinesis setGcpServiceAccount(java.lang.String gcpServiceAccount) {
    this.gcpServiceAccount = gcpServiceAccount;
    return this;
  }

  /**
   * Output only. An output-only field that indicates the state of the Kinesis ingestion source.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. An output-only field that indicates the state of the Kinesis ingestion source.
   * @param state state or {@code null} for none
   */
  public AwsKinesis setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Required. The Kinesis stream ARN to ingest data from.
   * @return value or {@code null} for none
   */
  public java.lang.String getStreamArn() {
    return streamArn;
  }

  /**
   * Required. The Kinesis stream ARN to ingest data from.
   * @param streamArn streamArn or {@code null} for none
   */
  public AwsKinesis setStreamArn(java.lang.String streamArn) {
    this.streamArn = streamArn;
    return this;
  }

  @Override
  public AwsKinesis set(String fieldName, Object value) {
    return (AwsKinesis) super.set(fieldName, value);
  }

  @Override
  public AwsKinesis clone() {
    return (AwsKinesis) super.clone();
  }

}
