/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.websecurityscanner.v1beta.model;

/**
 * Output only. Defines an error trace message for a ScanRun.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Web Security Scanner API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ScanRunErrorTrace extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Indicates the error reason code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String code;

  /**
   * Output only. If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common
   * HTTP error code, if such is available. For example, if this code is 404, the scan has
   * encountered too many NOT_FOUND responses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mostCommonHttpErrorCode;

  /**
   * Output only. If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message
   * encountered during scan configuration validation that is performed before each scan run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ScanConfigError scanConfigError;

  /**
   * Output only. Indicates the error reason code.
   * @return value or {@code null} for none
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * Output only. Indicates the error reason code.
   * @param code code or {@code null} for none
   */
  public ScanRunErrorTrace setCode(java.lang.String code) {
    this.code = code;
    return this;
  }

  /**
   * Output only. If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common
   * HTTP error code, if such is available. For example, if this code is 404, the scan has
   * encountered too many NOT_FOUND responses.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMostCommonHttpErrorCode() {
    return mostCommonHttpErrorCode;
  }

  /**
   * Output only. If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common
   * HTTP error code, if such is available. For example, if this code is 404, the scan has
   * encountered too many NOT_FOUND responses.
   * @param mostCommonHttpErrorCode mostCommonHttpErrorCode or {@code null} for none
   */
  public ScanRunErrorTrace setMostCommonHttpErrorCode(java.lang.Integer mostCommonHttpErrorCode) {
    this.mostCommonHttpErrorCode = mostCommonHttpErrorCode;
    return this;
  }

  /**
   * Output only. If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message
   * encountered during scan configuration validation that is performed before each scan run.
   * @return value or {@code null} for none
   */
  public ScanConfigError getScanConfigError() {
    return scanConfigError;
  }

  /**
   * Output only. If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message
   * encountered during scan configuration validation that is performed before each scan run.
   * @param scanConfigError scanConfigError or {@code null} for none
   */
  public ScanRunErrorTrace setScanConfigError(ScanConfigError scanConfigError) {
    this.scanConfigError = scanConfigError;
    return this;
  }

  @Override
  public ScanRunErrorTrace set(String fieldName, Object value) {
    return (ScanRunErrorTrace) super.set(fieldName, value);
  }

  @Override
  public ScanRunErrorTrace clone() {
    return (ScanRunErrorTrace) super.clone();
  }

}
