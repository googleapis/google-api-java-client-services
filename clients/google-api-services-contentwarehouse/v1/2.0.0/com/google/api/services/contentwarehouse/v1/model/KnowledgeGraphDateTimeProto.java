/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * // DATE /
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeGraphDateTimeProto extends com.google.api.client.json.GenericJson {

  /**
   * A day of month, 1-31. If present, year and month must be present as well, and must form a valid
   * date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer days;

  /**
   * Hour of the day, 0-23
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer hours;

  /**
   * Microsecond, in the interval [0, 999999]. If present, seconds have to be present as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer microseconds;

  /**
   * Minute, 0-59. If present, hours have to be present as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minutes;

  /**
   * A month, 1-12. If present, year must be present as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer months;

  /**
   * Second, in the interval [0, 60], where 60 is an exceptional value reserved for leap seconds. If
   * present, minutes have to be present as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer seconds;

  /**
   * Timezone offset in seconds (can be positive/negative). If present, hours have to be present as
   * well If absent, we expect the time above to be in local time (a.k.a. civil time,
   * go/httat#civil_time).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long tzOffset;

  /**
   * A year.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer years;

  /**
   * A day of month, 1-31. If present, year and month must be present as well, and must form a valid
   * date.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDays() {
    return days;
  }

  /**
   * A day of month, 1-31. If present, year and month must be present as well, and must form a valid
   * date.
   * @param days days or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setDays(java.lang.Integer days) {
    this.days = days;
    return this;
  }

  /**
   * Hour of the day, 0-23
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHours() {
    return hours;
  }

  /**
   * Hour of the day, 0-23
   * @param hours hours or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setHours(java.lang.Integer hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Microsecond, in the interval [0, 999999]. If present, seconds have to be present as well.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMicroseconds() {
    return microseconds;
  }

  /**
   * Microsecond, in the interval [0, 999999]. If present, seconds have to be present as well.
   * @param microseconds microseconds or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setMicroseconds(java.lang.Integer microseconds) {
    this.microseconds = microseconds;
    return this;
  }

  /**
   * Minute, 0-59. If present, hours have to be present as well.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinutes() {
    return minutes;
  }

  /**
   * Minute, 0-59. If present, hours have to be present as well.
   * @param minutes minutes or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setMinutes(java.lang.Integer minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * A month, 1-12. If present, year must be present as well.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMonths() {
    return months;
  }

  /**
   * A month, 1-12. If present, year must be present as well.
   * @param months months or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setMonths(java.lang.Integer months) {
    this.months = months;
    return this;
  }

  /**
   * Second, in the interval [0, 60], where 60 is an exceptional value reserved for leap seconds. If
   * present, minutes have to be present as well.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSeconds() {
    return seconds;
  }

  /**
   * Second, in the interval [0, 60], where 60 is an exceptional value reserved for leap seconds. If
   * present, minutes have to be present as well.
   * @param seconds seconds or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setSeconds(java.lang.Integer seconds) {
    this.seconds = seconds;
    return this;
  }

  /**
   * Timezone offset in seconds (can be positive/negative). If present, hours have to be present as
   * well If absent, we expect the time above to be in local time (a.k.a. civil time,
   * go/httat#civil_time).
   * @return value or {@code null} for none
   */
  public java.lang.Long getTzOffset() {
    return tzOffset;
  }

  /**
   * Timezone offset in seconds (can be positive/negative). If present, hours have to be present as
   * well If absent, we expect the time above to be in local time (a.k.a. civil time,
   * go/httat#civil_time).
   * @param tzOffset tzOffset or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setTzOffset(java.lang.Long tzOffset) {
    this.tzOffset = tzOffset;
    return this;
  }

  /**
   * A year.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYears() {
    return years;
  }

  /**
   * A year.
   * @param years years or {@code null} for none
   */
  public KnowledgeGraphDateTimeProto setYears(java.lang.Integer years) {
    this.years = years;
    return this;
  }

  @Override
  public KnowledgeGraphDateTimeProto set(String fieldName, Object value) {
    return (KnowledgeGraphDateTimeProto) super.set(fieldName, value);
  }

  @Override
  public KnowledgeGraphDateTimeProto clone() {
    return (KnowledgeGraphDateTimeProto) super.clone();
  }

}
