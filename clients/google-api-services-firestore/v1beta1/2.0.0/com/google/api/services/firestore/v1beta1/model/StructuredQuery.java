/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1.model;

/**
 * A Firestore query. The query stages are executed in the following order: 1. from 2. where 3.
 * select 4. order_by + start_at + end_at 5. offset 6. limit 7. find_nearest
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StructuredQuery extends com.google.api.client.json.GenericJson {

  /**
   * A potential prefix of a position in the result set to end the query at. This is similar to
   * `START_AT` but with it controlling the end position rather than the start position. Requires: *
   * The number of values cannot be greater than the number of fields specified in the `ORDER BY`
   * clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Cursor endAt;

  /**
   * Optional. A potential nearest neighbors search. Applies after all other filters and ordering.
   * Finds the closest vector embeddings to the given query vector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FindNearest findNearest;

  /**
   * The collections to query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CollectionSelector> from;

  static {
    // hack to force ProGuard to consider CollectionSelector used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CollectionSelector.class);
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Requires: * The
   * value must be greater than or equal to zero if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * The number of documents to skip before returning the first result. This applies after the
   * constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause.
   * Requires: * The value must be greater than or equal to zero if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer offset;

  /**
   * The order to apply to the query results. Firestore allows callers to provide a full ordering, a
   * partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering
   * through the following rules: * The `order_by` is required to reference all fields used with an
   * inequality filter. * All fields that are required to be in the `order_by` but are not already
   * present are appended in lexicographical ordering of the field name. * If an order on `__name__`
   * is not specified, it is appended by default. Fields are appended with the same sort direction
   * as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY
   * a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC,
   * __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE
   * __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Order> orderBy;

  static {
    // hack to force ProGuard to consider Order used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Order.class);
  }

  /**
   * Optional sub-set of the fields to return. This acts as a DocumentMask over the documents
   * returned from a query. When not set, assumes that the caller wants all fields returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Projection select;

  /**
   * A potential prefix of a position in the result set to start the query at. The ordering of the
   * result set is based on the `ORDER BY` clause of the original query. ``` SELECT * FROM k WHERE a
   * = 1 AND b > 2 ORDER BY b ASC, __name__ ASC; ``` This query's results are ordered by `(b ASC,
   * __name__ ASC)`. Cursors can reference either the full ordering or a prefix of the location,
   * though it cannot reference more fields than what are in the provided `ORDER BY`. Continuing off
   * the example above, attaching the following start cursors will have varying impact: - `START
   * BEFORE (2, /k/123)`: start the query right before `a = 1 AND b > 2 AND __name__ > /k/123`. -
   * `START AFTER (10)`: start the query right after `a = 1 AND b > 10`. Unlike `OFFSET` which
   * requires scanning over the first N results to skip, a start cursor allows the query to begin at
   * a logical position. This position is not required to match an actual result, it will scan
   * forward from this position to find the next document. Requires: * The number of values cannot
   * be greater than the number of fields specified in the `ORDER BY` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Cursor startAt;

  /**
   * The filter to apply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Filter where;

  /**
   * A potential prefix of a position in the result set to end the query at. This is similar to
   * `START_AT` but with it controlling the end position rather than the start position. Requires: *
   * The number of values cannot be greater than the number of fields specified in the `ORDER BY`
   * clause.
   * @return value or {@code null} for none
   */
  public Cursor getEndAt() {
    return endAt;
  }

  /**
   * A potential prefix of a position in the result set to end the query at. This is similar to
   * `START_AT` but with it controlling the end position rather than the start position. Requires: *
   * The number of values cannot be greater than the number of fields specified in the `ORDER BY`
   * clause.
   * @param endAt endAt or {@code null} for none
   */
  public StructuredQuery setEndAt(Cursor endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * Optional. A potential nearest neighbors search. Applies after all other filters and ordering.
   * Finds the closest vector embeddings to the given query vector.
   * @return value or {@code null} for none
   */
  public FindNearest getFindNearest() {
    return findNearest;
  }

  /**
   * Optional. A potential nearest neighbors search. Applies after all other filters and ordering.
   * Finds the closest vector embeddings to the given query vector.
   * @param findNearest findNearest or {@code null} for none
   */
  public StructuredQuery setFindNearest(FindNearest findNearest) {
    this.findNearest = findNearest;
    return this;
  }

  /**
   * The collections to query.
   * @return value or {@code null} for none
   */
  public java.util.List<CollectionSelector> getFrom() {
    return from;
  }

  /**
   * The collections to query.
   * @param from from or {@code null} for none
   */
  public StructuredQuery setFrom(java.util.List<CollectionSelector> from) {
    this.from = from;
    return this;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Requires: * The
   * value must be greater than or equal to zero if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Requires: * The
   * value must be greater than or equal to zero if specified.
   * @param limit limit or {@code null} for none
   */
  public StructuredQuery setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of documents to skip before returning the first result. This applies after the
   * constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause.
   * Requires: * The value must be greater than or equal to zero if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * The number of documents to skip before returning the first result. This applies after the
   * constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause.
   * Requires: * The value must be greater than or equal to zero if specified.
   * @param offset offset or {@code null} for none
   */
  public StructuredQuery setOffset(java.lang.Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The order to apply to the query results. Firestore allows callers to provide a full ordering, a
   * partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering
   * through the following rules: * The `order_by` is required to reference all fields used with an
   * inequality filter. * All fields that are required to be in the `order_by` but are not already
   * present are appended in lexicographical ordering of the field name. * If an order on `__name__`
   * is not specified, it is appended by default. Fields are appended with the same sort direction
   * as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY
   * a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC,
   * __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE
   * __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
   * @return value or {@code null} for none
   */
  public java.util.List<Order> getOrderBy() {
    return orderBy;
  }

  /**
   * The order to apply to the query results. Firestore allows callers to provide a full ordering, a
   * partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering
   * through the following rules: * The `order_by` is required to reference all fields used with an
   * inequality filter. * All fields that are required to be in the `order_by` but are not already
   * present are appended in lexicographical ordering of the field name. * If an order on `__name__`
   * is not specified, it is appended by default. Fields are appended with the same sort direction
   * as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY
   * a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC,
   * __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE
   * __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
   * @param orderBy orderBy or {@code null} for none
   */
  public StructuredQuery setOrderBy(java.util.List<Order> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Optional sub-set of the fields to return. This acts as a DocumentMask over the documents
   * returned from a query. When not set, assumes that the caller wants all fields returned.
   * @return value or {@code null} for none
   */
  public Projection getSelect() {
    return select;
  }

  /**
   * Optional sub-set of the fields to return. This acts as a DocumentMask over the documents
   * returned from a query. When not set, assumes that the caller wants all fields returned.
   * @param select select or {@code null} for none
   */
  public StructuredQuery setSelect(Projection select) {
    this.select = select;
    return this;
  }

  /**
   * A potential prefix of a position in the result set to start the query at. The ordering of the
   * result set is based on the `ORDER BY` clause of the original query. ``` SELECT * FROM k WHERE a
   * = 1 AND b > 2 ORDER BY b ASC, __name__ ASC; ``` This query's results are ordered by `(b ASC,
   * __name__ ASC)`. Cursors can reference either the full ordering or a prefix of the location,
   * though it cannot reference more fields than what are in the provided `ORDER BY`. Continuing off
   * the example above, attaching the following start cursors will have varying impact: - `START
   * BEFORE (2, /k/123)`: start the query right before `a = 1 AND b > 2 AND __name__ > /k/123`. -
   * `START AFTER (10)`: start the query right after `a = 1 AND b > 10`. Unlike `OFFSET` which
   * requires scanning over the first N results to skip, a start cursor allows the query to begin at
   * a logical position. This position is not required to match an actual result, it will scan
   * forward from this position to find the next document. Requires: * The number of values cannot
   * be greater than the number of fields specified in the `ORDER BY` clause.
   * @return value or {@code null} for none
   */
  public Cursor getStartAt() {
    return startAt;
  }

  /**
   * A potential prefix of a position in the result set to start the query at. The ordering of the
   * result set is based on the `ORDER BY` clause of the original query. ``` SELECT * FROM k WHERE a
   * = 1 AND b > 2 ORDER BY b ASC, __name__ ASC; ``` This query's results are ordered by `(b ASC,
   * __name__ ASC)`. Cursors can reference either the full ordering or a prefix of the location,
   * though it cannot reference more fields than what are in the provided `ORDER BY`. Continuing off
   * the example above, attaching the following start cursors will have varying impact: - `START
   * BEFORE (2, /k/123)`: start the query right before `a = 1 AND b > 2 AND __name__ > /k/123`. -
   * `START AFTER (10)`: start the query right after `a = 1 AND b > 10`. Unlike `OFFSET` which
   * requires scanning over the first N results to skip, a start cursor allows the query to begin at
   * a logical position. This position is not required to match an actual result, it will scan
   * forward from this position to find the next document. Requires: * The number of values cannot
   * be greater than the number of fields specified in the `ORDER BY` clause.
   * @param startAt startAt or {@code null} for none
   */
  public StructuredQuery setStartAt(Cursor startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * The filter to apply.
   * @return value or {@code null} for none
   */
  public Filter getWhere() {
    return where;
  }

  /**
   * The filter to apply.
   * @param where where or {@code null} for none
   */
  public StructuredQuery setWhere(Filter where) {
    this.where = where;
    return this;
  }

  @Override
  public StructuredQuery set(String fieldName, Object value) {
    return (StructuredQuery) super.set(fieldName, value);
  }

  @Override
  public StructuredQuery clone() {
    return (StructuredQuery) super.clone();
  }

}
