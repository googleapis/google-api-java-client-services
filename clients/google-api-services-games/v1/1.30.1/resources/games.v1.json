{
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "discoveryVersion": "v1",
  "revision": "20201016",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/games": {
          "description": "Create, edit, and delete your Google Play Games activity"
        },
        "https://www.googleapis.com/auth/drive.appdata": {
          "description": "View and manage its own configuration data in your Google Drive"
        }
      }
    }
  },
  "protocol": "rest",
  "basePath": "",
  "id": "games:v1",
  "parameters": {
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "location": "query",
      "type": "string",
      "default": "json"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true",
      "type": "boolean"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    }
  },
  "schemas": {
    "LeaderboardListResponse": {
      "type": "object",
      "description": "A list of leaderboard objects.",
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardListResponse`."
        },
        "items": {
          "type": "array",
          "description": "The leaderboards.",
          "items": {
            "$ref": "Leaderboard"
          }
        }
      },
      "id": "LeaderboardListResponse"
    },
    "Snapshot": {
      "type": "object",
      "description": "An snapshot object.",
      "properties": {
        "type": {
          "enum": [
            "SNAPSHOT_TYPE_UNSPECIFIED",
            "SAVE_GAME"
          ],
          "description": "The type of this snapshot.",
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "A snapshot representing a save game."
          ]
        },
        "title": {
          "type": "string",
          "description": "The title of this snapshot."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the snapshot."
        },
        "description": {
          "type": "string",
          "description": "The description of this snapshot."
        },
        "durationMillis": {
          "type": "string",
          "format": "int64",
          "description": "The duration associated with this snapshot, in millis."
        },
        "lastModifiedMillis": {
          "format": "int64",
          "description": "The timestamp (in millis since Unix epoch) of the last modification to this snapshot.",
          "type": "string"
        },
        "progressValue": {
          "format": "int64",
          "description": "The progress value (64-bit integer set by developer) associated with this snapshot.",
          "type": "string"
        },
        "driveId": {
          "description": "The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.",
          "type": "string"
        },
        "uniqueName": {
          "type": "string",
          "description": "The unique name provided when the snapshot was created."
        },
        "coverImage": {
          "$ref": "SnapshotImage",
          "description": "The cover image of this snapshot. May be absent if there is no image."
        }
      },
      "id": "Snapshot"
    },
    "PlayerAchievement": {
      "description": "An achievement object.",
      "id": "PlayerAchievement",
      "properties": {
        "currentSteps": {
          "type": "integer",
          "description": "The current steps for an incremental achievement.",
          "format": "int32"
        },
        "lastUpdatedTimestamp": {
          "description": "The timestamp of the last modification to this achievement's state.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`."
        },
        "id": {
          "type": "string",
          "description": "The ID of the achievement."
        },
        "formattedCurrentStepsString": {
          "description": "The current steps for an incremental achievement as a string.",
          "type": "string"
        },
        "experiencePoints": {
          "description": "Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.",
          "format": "int64",
          "type": "string"
        },
        "achievementState": {
          "description": "The state of the achievement.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Player": {
      "description": "A Player resource.",
      "properties": {
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "friendStatus": {
          "type": "string",
          "enum": [
            "FRIEND_STATUS_UNSPECIFIED",
            "NO_RELATIONSHIP",
            "FRIEND"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "There is no relationship between the players.",
            "The player and requester are friends."
          ],
          "description": "The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game."
        },
        "title": {
          "description": "The player's title rewarded for their game activities.",
          "type": "string"
        },
        "profileSettings": {
          "$ref": "ProfileSettings",
          "description": "The player's profile settings. Controls whether or not the player's profile is visible to other players."
        },
        "bannerUrlPortrait": {
          "description": "The url to the portrait mode player banner image.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the player."
        },
        "originalPlayerId": {
          "description": "The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#player`"
        },
        "experienceInfo": {
          "$ref": "PlayerExperienceInfo",
          "description": "An object to represent Play Game experience information for the player."
        },
        "avatarImageUrl": {
          "type": "string",
          "description": "The base URL for the image that represents the player."
        },
        "name": {
          "properties": {
            "givenName": {
              "description": "The given name of this player. In some places, this is known as the first name.",
              "type": "string"
            },
            "familyName": {
              "type": "string",
              "description": "The family name of this player. In some places, this is known as the last name."
            }
          },
          "type": "object",
          "description": "A representation of the individual components of the name."
        },
        "bannerUrlLandscape": {
          "type": "string",
          "description": "The url to the landscape mode player banner image."
        }
      },
      "type": "object",
      "id": "Player"
    },
    "Application": {
      "type": "object",
      "description": "The Application resource.",
      "properties": {
        "author": {
          "description": "The author of the application.",
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "type": "string",
          "description": "The last updated timestamp of the application.",
          "format": "int64"
        },
        "leaderboard_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of leaderboards visible to the currently authenticated player."
        },
        "category": {
          "description": "The category of the application.",
          "$ref": "ApplicationCategory"
        },
        "name": {
          "description": "The name of the application.",
          "type": "string"
        },
        "description": {
          "description": "The description of the application.",
          "type": "string"
        },
        "themeColor": {
          "description": "A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\").",
          "type": "string"
        },
        "id": {
          "description": "The ID of the application.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.",
          "type": "string"
        },
        "enabledFeatures": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Safe default, don't use.",
              "Saved Games (snapshots)."
            ],
            "enum": [
              "APPLICATION_FEATURE_UNSPECIFIED",
              "SNAPSHOTS"
            ]
          },
          "description": "A list of features that have been enabled for the application.",
          "type": "array"
        },
        "achievement_count": {
          "description": "The number of achievements visible to the currently authenticated player.",
          "type": "integer",
          "format": "int32"
        },
        "assets": {
          "items": {
            "$ref": "ImageAsset"
          },
          "type": "array",
          "description": "The assets of the application."
        },
        "instances": {
          "description": "The instances of the application.",
          "items": {
            "$ref": "Instance"
          },
          "type": "array"
        }
      },
      "id": "Application"
    },
    "ApplicationCategory": {
      "type": "object",
      "properties": {
        "primary": {
          "description": "The primary category.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationCategory`.",
          "type": "string"
        },
        "secondary": {
          "description": "The secondary category.",
          "type": "string"
        }
      },
      "id": "ApplicationCategory",
      "description": "An application category object."
    },
    "AchievementUpdateMultipleResponse": {
      "description": "Response message for UpdateMultipleAchievements rpc.",
      "id": "AchievementUpdateMultipleResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleResponse`.",
          "type": "string"
        },
        "updatedAchievements": {
          "description": "The updated state of the achievements.",
          "type": "array",
          "items": {
            "$ref": "AchievementUpdateResponse"
          }
        }
      },
      "type": "object"
    },
    "EventRecordRequest": {
      "id": "EventRecordRequest",
      "type": "object",
      "description": "An event period update resource.",
      "properties": {
        "currentTimeMillis": {
          "description": "The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch).",
          "type": "string",
          "format": "int64"
        },
        "requestId": {
          "type": "string",
          "format": "int64",
          "description": "The request ID used to identify this attempt to record events."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordRequest`."
        },
        "timePeriods": {
          "items": {
            "$ref": "EventPeriodUpdate"
          },
          "description": "A list of the time period updates being made in this request.",
          "type": "array"
        }
      }
    },
    "Instance": {
      "id": "Instance",
      "properties": {
        "realtimePlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports realtime play."
        },
        "platformType": {
          "enumDescriptions": [
            "Default value. Should be unused.",
            "Instance is for Android.",
            "Instance is for iOS.",
            "Instance is for Web App."
          ],
          "description": "The platform type.",
          "enum": [
            "PLATFORM_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "WEB_APP"
          ],
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.",
          "type": "string"
        },
        "name": {
          "description": "Localized display name.",
          "type": "string"
        },
        "iosInstance": {
          "$ref": "InstanceIosDetails",
          "description": "Platform dependent details for iOS."
        },
        "webInstance": {
          "$ref": "InstanceWebDetails",
          "description": "Platform dependent details for Web."
        },
        "androidInstance": {
          "$ref": "InstanceAndroidDetails",
          "description": "Platform dependent details for Android."
        },
        "acquisitionUri": {
          "description": "URI which shows where a user can acquire this instance.",
          "type": "string"
        },
        "turnBasedPlay": {
          "description": "Flag to show if this game instance supports turn based play.",
          "type": "boolean"
        }
      },
      "description": "The Instance resource.",
      "type": "object"
    },
    "Leaderboard": {
      "description": "The Leaderboard resource.",
      "properties": {
        "order": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Larger values are better; scores are sorted in descending order",
            "Smaller values are better; scores are sorted in ascending order"
          ],
          "description": "How scores are ordered.",
          "type": "string",
          "enum": [
            "SCORE_ORDER_UNSPECIFIED",
            "LARGER_IS_BETTER",
            "SMALLER_IS_BETTER"
          ]
        },
        "isIconUrlDefault": {
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided.",
          "type": "boolean"
        },
        "iconUrl": {
          "description": "The icon for the leaderboard.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The leaderboard ID."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`."
        },
        "name": {
          "description": "The name of the leaderboard.",
          "type": "string"
        }
      },
      "id": "Leaderboard",
      "type": "object"
    },
    "EventChild": {
      "properties": {
        "childId": {
          "type": "string",
          "description": "The ID of the child event."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventChild`."
        }
      },
      "description": "An event child relationship resource.",
      "type": "object",
      "id": "EventChild"
    },
    "LeaderboardScoreRank": {
      "id": "LeaderboardScoreRank",
      "type": "object",
      "description": "A score rank in a leaderboard.",
      "properties": {
        "rank": {
          "format": "int64",
          "description": "The rank in the leaderboard.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScoreRank`."
        },
        "formattedRank": {
          "type": "string",
          "description": "The rank in the leaderboard as a string."
        },
        "formattedNumScores": {
          "description": "The number of scores in the leaderboard as a string.",
          "type": "string"
        },
        "numScores": {
          "description": "The number of scores in the leaderboard.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "AchievementRevealResponse": {
      "id": "AchievementRevealResponse",
      "description": "An achievement reveal response",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.",
          "type": "string"
        },
        "currentState": {
          "description": "The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "type": "string",
          "enum": [
            "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "REVEALED",
            "UNLOCKED"
          ]
        }
      }
    },
    "AchievementIncrementResponse": {
      "description": "An achievement increment response",
      "type": "object",
      "id": "AchievementIncrementResponse",
      "properties": {
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock."
        },
        "currentSteps": {
          "description": "The current steps recorded for this incremental achievement.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementIncrementResponse`."
        }
      }
    },
    "PlayerScoreResponse": {
      "type": "object",
      "properties": {
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "beatenScoreTimeSpans": {
          "items": {
            "enumDescriptions": [
              "Default value. This value is unused.",
              "The score is an all-time score.",
              "The score is a weekly score.",
              "The score is a daily score."
            ],
            "type": "string",
            "enum": [
              "SCORE_TIME_SPAN_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY",
              "DAILY"
            ]
          },
          "description": "The time spans where the submitted score is better than the existing score for that time span.",
          "type": "array"
        },
        "leaderboardId": {
          "description": "The leaderboard ID that this score was submitted to.",
          "type": "string"
        },
        "unbeatenScores": {
          "type": "array",
          "description": "The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.",
          "items": {
            "$ref": "PlayerScore"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.",
          "type": "string"
        },
        "formattedScore": {
          "description": "The formatted value of the submitted score.",
          "type": "string"
        }
      },
      "id": "PlayerScoreResponse",
      "description": "A list of leaderboard entry resources."
    },
    "LeaderboardScores": {
      "description": "A ListScores response.",
      "type": "object",
      "id": "LeaderboardScores",
      "properties": {
        "numScores": {
          "description": "The total number of scores in the leaderboard.",
          "format": "int64",
          "type": "string"
        },
        "playerScore": {
          "description": "The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the `scoreRank`and `formattedScoreRank` values will not be present.",
          "$ref": "LeaderboardEntry"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "LeaderboardEntry"
          },
          "description": "The scores in the leaderboard."
        },
        "prevPageToken": {
          "description": "The pagination token for the previous page of results.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScores`.",
          "type": "string"
        }
      }
    },
    "SnapshotListResponse": {
      "description": "A third party list snapshots response.",
      "id": "SnapshotListResponse",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotListResponse`."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results. If there are no more results, the token is omitted."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Snapshot"
          },
          "description": "The snapshots."
        }
      }
    },
    "ImageAsset": {
      "properties": {
        "url": {
          "description": "The URL of the asset.",
          "type": "string"
        },
        "name": {
          "description": "The name of the asset.",
          "type": "string"
        },
        "width": {
          "description": "The width of the asset.",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "The height of the asset."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`."
        }
      },
      "type": "object",
      "description": "An image asset object.",
      "id": "ImageAsset"
    },
    "PlayerScoreListResponse": {
      "id": "PlayerScoreListResponse",
      "description": "A list of score submission statuses.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreListResponse`."
        },
        "submittedScores": {
          "description": "The score submissions statuses.",
          "type": "array",
          "items": {
            "$ref": "PlayerScoreResponse"
          }
        }
      },
      "type": "object"
    },
    "AchievementDefinition": {
      "properties": {
        "totalSteps": {
          "type": "integer",
          "description": "The total steps for an incremental achievement.",
          "format": "int32"
        },
        "initialState": {
          "type": "string",
          "description": "The initial state of the achievement.",
          "enum": [
            "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "experiencePoints": {
          "description": "Experience points which will be earned when unlocking this achievement.",
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "description": "The description of the achievement."
        },
        "achievementType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is either locked or unlocked.",
            "Achievement is incremental."
          ],
          "description": "The type of the achievement.",
          "enum": [
            "ACHIEVEMENT_TYPE_UNSPECIFIED",
            "STANDARD",
            "INCREMENTAL"
          ],
          "type": "string"
        },
        "isUnlockedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the unlocked icon image being returned is a default image, or is game-provided."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "name": {
          "description": "The name of the achievement.",
          "type": "string"
        },
        "isRevealedIconUrlDefault": {
          "description": "Indicates whether the revealed icon image being returned is a default image, or is provided by the game.",
          "type": "boolean"
        },
        "revealedIconUrl": {
          "description": "The image URL for the revealed achievement icon.",
          "type": "string"
        },
        "unlockedIconUrl": {
          "type": "string",
          "description": "The image URL for the unlocked achievement icon."
        },
        "formattedTotalSteps": {
          "description": "The total steps for an incremental achievement as a string.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AchievementDefinition",
      "description": "An achievement definition object."
    },
    "PlayerLeaderboardScoreListResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "items": {
          "description": "The leaderboard scores.",
          "items": {
            "$ref": "PlayerLeaderboardScore"
          },
          "type": "array"
        },
        "player": {
          "$ref": "Player",
          "description": "The Player resources for the owner of this score."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScoreListResponse`."
        }
      },
      "id": "PlayerLeaderboardScoreListResponse",
      "description": "A list of player leaderboard scores."
    },
    "LeaderboardEntry": {
      "description": "The Leaderboard Entry resource.",
      "id": "LeaderboardEntry",
      "type": "object",
      "properties": {
        "scoreTag": {
          "type": "string",
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "player": {
          "description": "The player who holds this score.",
          "$ref": "Player"
        },
        "formattedScore": {
          "description": "The localized string for the numerical value of this score.",
          "type": "string"
        },
        "scoreValue": {
          "type": "string",
          "description": "The numerical value of this score.",
          "format": "int64"
        },
        "writeTimestampMillis": {
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.",
          "format": "int64",
          "type": "string"
        },
        "scoreRank": {
          "format": "int64",
          "description": "The rank of this score for this leaderboard.",
          "type": "string"
        },
        "formattedScoreRank": {
          "description": "The localized string for the rank of this score for this leaderboard.",
          "type": "string"
        },
        "timeSpan": {
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "description": "The time span of this high score."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`."
        }
      }
    },
    "PlayerListResponse": {
      "type": "object",
      "id": "PlayerListResponse",
      "description": "A third party player list response.",
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerListResponse`.",
          "type": "string"
        },
        "items": {
          "description": "The players.",
          "type": "array",
          "items": {
            "$ref": "Player"
          }
        }
      }
    },
    "AchievementUpdateResponse": {
      "type": "object",
      "description": "An updated achievement.",
      "id": "AchievementUpdateResponse",
      "properties": {
        "currentSteps": {
          "type": "integer",
          "description": "The current steps recorded for this achievement if it is incremental.",
          "format": "int32"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`."
        },
        "achievementId": {
          "description": "The achievement this update is was applied to.",
          "type": "string"
        },
        "updateOccurred": {
          "description": "Whether the requested updates actually affected the achievement.",
          "type": "boolean"
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player)."
        },
        "currentState": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "type": "string",
          "description": "The current state of the achievement.",
          "enum": [
            "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ]
        }
      }
    },
    "SnapshotImage": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotImage`.",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "description": "The height of the image.",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "description": "The URL of the image. This URL may be invalidated at any time and should not be cached."
        },
        "mime_type": {
          "type": "string",
          "description": "The MIME type of the image."
        },
        "width": {
          "description": "The width of the image.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "An image of a snapshot.",
      "id": "SnapshotImage",
      "type": "object"
    },
    "InstanceIosDetails": {
      "properties": {
        "bundleIdentifier": {
          "type": "string",
          "description": "Bundle identifier."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.",
          "type": "string"
        },
        "itunesAppId": {
          "type": "string",
          "description": "iTunes App ID."
        },
        "supportIpad": {
          "type": "boolean",
          "description": "Flag to indicate if this instance supports iPad."
        },
        "preferredForIpad": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations on iPad devices."
        },
        "supportIphone": {
          "description": "Flag to indicate if this instance supports iPhone.",
          "type": "boolean"
        },
        "preferredForIphone": {
          "description": "Indicates that this instance is the default for new installations on iPhone devices.",
          "type": "boolean"
        }
      },
      "id": "InstanceIosDetails",
      "description": "The iOS details resource.",
      "type": "object"
    },
    "PlayerExperienceInfo": {
      "description": "1P/3P metadata about the player's experience.",
      "id": "PlayerExperienceInfo",
      "properties": {
        "currentExperiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "The current number of experience points for the player."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`."
        },
        "currentLevel": {
          "$ref": "PlayerLevel",
          "description": "The current level of the player."
        },
        "nextLevel": {
          "$ref": "PlayerLevel",
          "description": "The next level of the player. If the current level is the maximum level, this should be same as the current level."
        },
        "lastLevelUpTimestampMillis": {
          "description": "The timestamp when the player was leveled up, in millis since Unix epoch UTC.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "PlayerEvent": {
      "description": "An event status resource.",
      "properties": {
        "formattedNumEvents": {
          "type": "string",
          "description": "The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console."
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event definition."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.",
          "type": "string"
        },
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "numEvents": {
          "format": "int64",
          "type": "string",
          "description": "The current number of times this event has occurred."
        }
      },
      "id": "PlayerEvent",
      "type": "object"
    },
    "AchievementDefinitionsListResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinitionsListResponse`."
        },
        "items": {
          "items": {
            "$ref": "AchievementDefinition"
          },
          "type": "array",
          "description": "The achievement definitions."
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      },
      "description": "A list of achievement definition objects.",
      "id": "AchievementDefinitionsListResponse"
    },
    "PlayerAchievementListResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievementListResponse`."
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "PlayerAchievement"
          },
          "type": "array",
          "description": "The achievements."
        }
      },
      "id": "PlayerAchievementListResponse",
      "description": "A list of achievement objects."
    },
    "EventRecordFailure": {
      "description": "An event update failure resource.",
      "type": "object",
      "properties": {
        "eventId": {
          "description": "The ID of the event that was not updated.",
          "type": "string"
        },
        "failureCause": {
          "enumDescriptions": [
            "Default value. Should not use.",
            "An attempt was made to set an event that was not defined.",
            "An attempt was made to increment an event by a non-positive value."
          ],
          "type": "string",
          "enum": [
            "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID_UPDATE_VALUE"
          ],
          "description": "The cause for the update failure."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.",
          "type": "string"
        }
      },
      "id": "EventRecordFailure"
    },
    "ProfileSettings": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`."
        },
        "friendsListVisibility": {
          "type": "string",
          "enumDescriptions": [
            "Unused.",
            "The friends list is currently visible to the game.",
            "The developer does not have access to the friends list, but can call the Android API to show a consent dialog.",
            "The friends list is currently unavailable for this user, and it is not possible to request access at this time, either because the user has permanently declined or the friends feature is not available to them. In this state, any attempts to request access to the friends list will be unsuccessful."
          ],
          "enum": [
            "FRIENDS_LIST_VISIBILITY_UNSPECIFIED",
            "VISIBLE",
            "REQUEST_REQUIRED",
            "UNAVAILABLE"
          ]
        },
        "profileVisible": {
          "description": "Whether the player's profile is visible to the currently signed in player.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "ProfileSettings",
      "description": "Profile settings"
    },
    "MetagameConfig": {
      "type": "object",
      "properties": {
        "currentVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Current version of the metagame configuration data. When this data is updated, the version number will be increased by one."
        },
        "playerLevels": {
          "description": "The list of player levels.",
          "items": {
            "$ref": "PlayerLevel"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#metagameConfig`."
        }
      },
      "description": "The metagame config resource",
      "id": "MetagameConfig"
    },
    "PlayerLevel": {
      "type": "object",
      "properties": {
        "maxExperiencePoints": {
          "type": "string",
          "format": "int64",
          "description": "The maximum experience points for this level."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`."
        },
        "level": {
          "description": "The level for the user.",
          "format": "int32",
          "type": "integer"
        },
        "minExperiencePoints": {
          "type": "string",
          "description": "The minimum experience points for this level.",
          "format": "int64"
        }
      },
      "id": "PlayerLevel",
      "description": "1P/3P metadata about a user's level."
    },
    "AchievementUpdateMultipleRequest": {
      "id": "AchievementUpdateMultipleRequest",
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "AchievementUpdateRequest"
          },
          "description": "The individual achievement update requests."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleRequest`.",
          "type": "string"
        }
      },
      "description": "A list of achievement update requests."
    },
    "AchievementUpdateRequest": {
      "description": "A request to update an achievement.",
      "properties": {
        "setStepsAtLeastPayload": {
          "$ref": "GamesAchievementSetStepsAtLeast",
          "description": "The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the achievement."
        },
        "achievementId": {
          "description": "The achievement this update is being applied to.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`."
        },
        "incrementPayload": {
          "description": "The payload if an update of type `INCREMENT` was requested for the achievement.",
          "$ref": "GamesAchievementIncrement"
        },
        "updateType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked.",
            "Achievement is incremented.",
            "Achievement progress is set to at least the passed value."
          ],
          "enum": [
            "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED",
            "REVEAL",
            "UNLOCK",
            "INCREMENT",
            "SET_STEPS_AT_LEAST"
          ],
          "description": "The type of update being applied.",
          "type": "string"
        }
      },
      "id": "AchievementUpdateRequest",
      "type": "object"
    },
    "PlayerScore": {
      "properties": {
        "formattedScore": {
          "type": "string",
          "description": "The formatted score for this player score."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.",
          "type": "string"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "score": {
          "format": "int64",
          "type": "string",
          "description": "The numerical value for this player score."
        },
        "timeSpan": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "description": "The time span for this player score."
        }
      },
      "id": "PlayerScore",
      "description": "A player score.",
      "type": "object"
    },
    "ScoreSubmission": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.",
          "type": "string"
        },
        "signature": {
          "type": "string",
          "description": "Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "score": {
          "format": "int64",
          "type": "string",
          "description": "The new score being submitted."
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "leaderboardId": {
          "description": "The leaderboard this score is being submitted to.",
          "type": "string"
        }
      },
      "description": "A request to submit a score to leaderboards.",
      "id": "ScoreSubmission"
    },
    "EventBatchRecordFailure": {
      "id": "EventBatchRecordFailure",
      "type": "object",
      "description": "A batch update failure resource.",
      "properties": {
        "failureCause": {
          "type": "string",
          "enumDescriptions": [
            "Default value. Should not be used.",
            "A batch request was issued with more events than are allowed in a single batch.",
            "A batch was sent with data too far in the past to record.",
            "A batch was sent with a time range that was too short.",
            "A batch was sent with a time range that was too long.",
            "An attempt was made to record a batch of data which was already seen.",
            "An attempt was made to record data faster than the server will apply updates."
          ],
          "description": "The cause for the update failure.",
          "enum": [
            "EVENT_FAILURE_CAUSE_UNSPECIFIED",
            "TOO_LARGE",
            "TIME_PERIOD_EXPIRED",
            "TIME_PERIOD_SHORT",
            "TIME_PERIOD_LONG",
            "ALREADY_UPDATED",
            "RECORD_RATE_HIGH"
          ]
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventBatchRecordFailure`.",
          "type": "string"
        },
        "range": {
          "$ref": "EventPeriodRange",
          "description": "The time range which was rejected; empty for a request-wide failure."
        }
      }
    },
    "EventPeriodUpdate": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodUpdate`.",
          "type": "string"
        },
        "updates": {
          "items": {
            "$ref": "EventUpdateRequest"
          },
          "description": "The updates being made for this time period.",
          "type": "array"
        },
        "timePeriod": {
          "$ref": "EventPeriodRange",
          "description": "The time period being covered by this update."
        }
      },
      "id": "EventPeriodUpdate",
      "type": "object",
      "description": "An event period update resource."
    },
    "EventUpdateRequest": {
      "type": "object",
      "description": "An event period update resource.",
      "id": "EventUpdateRequest",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateRequest`."
        },
        "updateCount": {
          "description": "The number of times this event occurred in this time period.",
          "format": "int64",
          "type": "string"
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event being modified in this update."
        }
      }
    },
    "AchievementSetStepsAtLeastResponse": {
      "properties": {
        "currentSteps": {
          "format": "int32",
          "type": "integer",
          "description": "The current steps recorded for this incremental achievement."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`."
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock."
        }
      },
      "id": "AchievementSetStepsAtLeastResponse",
      "description": "An achievement set steps at least response.",
      "type": "object"
    },
    "RevisionCheckResponse": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#revisionCheckResponse`."
        },
        "apiVersion": {
          "type": "string",
          "description": "The version of the API this client revision should use when calling API methods."
        },
        "revisionStatus": {
          "description": "The result of the revision check.",
          "enum": [
            "REVISION_STATUS_UNSPECIFIED",
            "OK",
            "DEPRECATED",
            "INVALID"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The revision being used is current.",
            "There is currently a newer version available, but the revision being used still works.",
            "The revision being used is not supported in any released version."
          ],
          "type": "string"
        }
      },
      "id": "RevisionCheckResponse",
      "description": "A third party checking a revision response.",
      "type": "object"
    },
    "InstanceWebDetails": {
      "id": "InstanceWebDetails",
      "description": "The Web details resource.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceWebDetails`.",
          "type": "string"
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "launchUrl": {
          "type": "string",
          "description": "Launch URL for the game."
        }
      },
      "type": "object"
    },
    "StatsResponse": {
      "properties": {
        "avg_session_length_minutes": {
          "format": "float",
          "type": "number",
          "description": "Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information."
        },
        "spend_probability": {
          "format": "float",
          "description": "The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`."
        },
        "days_since_last_played": {
          "format": "int32",
          "description": "Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.",
          "type": "integer"
        },
        "high_spender_probability": {
          "format": "float",
          "description": "The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "total_spend_next_28_days": {
          "description": "The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.",
          "type": "number",
          "format": "float"
        },
        "num_purchases": {
          "type": "integer",
          "format": "int32",
          "description": "Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information."
        },
        "num_sessions": {
          "format": "int32",
          "type": "integer",
          "description": "The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information."
        },
        "num_sessions_percentile": {
          "format": "float",
          "type": "number",
          "description": "The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information."
        },
        "spend_percentile": {
          "format": "float",
          "description": "The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "churn_probability": {
          "description": "The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "description": "A third party stats resource.",
      "id": "StatsResponse"
    },
    "ApplicationVerifyResponse": {
      "description": "A third party application verification response resource.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationVerifyResponse`."
        },
        "player_id": {
          "type": "string",
          "description": "The ID of the player that was issued the auth token used in this request."
        },
        "alternate_player_id": {
          "description": "An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)",
          "type": "string"
        }
      },
      "id": "ApplicationVerifyResponse"
    },
    "InstanceAndroidDetails": {
      "id": "InstanceAndroidDetails",
      "type": "object",
      "properties": {
        "enablePiracyCheck": {
          "type": "boolean",
          "description": "Flag indicating whether the anti-piracy check is enabled."
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "packageName": {
          "description": "Android package name which maps to Google Play URL.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceAndroidDetails`.",
          "type": "string"
        }
      },
      "description": "The Android instance details resource."
    },
    "EventDefinition": {
      "properties": {
        "isDefaultImageUrl": {
          "type": "boolean",
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided."
        },
        "visibility": {
          "type": "string",
          "enum": [
            "EVENT_VISIBILITY_UNSPECIFIED",
            "REVEALED",
            "HIDDEN"
          ],
          "description": "The visibility of event being tracked in this definition.",
          "enumDescriptions": [
            "Default value. Should not be used.",
            "This event should be visible to all users.",
            "This event should only be shown to users that have recorded this event at least once."
          ]
        },
        "displayName": {
          "description": "The name to display for the event.",
          "type": "string"
        },
        "childEvents": {
          "items": {
            "$ref": "EventChild"
          },
          "type": "array",
          "description": "A list of events that are a child of this event."
        },
        "description": {
          "description": "Description of what this event represents.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`."
        },
        "id": {
          "type": "string",
          "description": "The ID of the event."
        },
        "imageUrl": {
          "type": "string",
          "description": "The base URL for the image that represents the event."
        }
      },
      "type": "object",
      "description": "An event definition resource.",
      "id": "EventDefinition"
    },
    "EventUpdateResponse": {
      "description": "An event period update resource.",
      "id": "EventUpdateResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.",
          "type": "string"
        },
        "playerEvents": {
          "description": "The current status of any updated events",
          "items": {
            "$ref": "PlayerEvent"
          },
          "type": "array"
        },
        "batchFailures": {
          "items": {
            "$ref": "EventBatchRecordFailure"
          },
          "description": "Any batch-wide failures which occurred applying updates.",
          "type": "array"
        },
        "eventFailures": {
          "description": "Any failures updating a particular event.",
          "items": {
            "$ref": "EventRecordFailure"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CategoryListResponse": {
      "description": "A third party list metagame categories response.",
      "properties": {
        "items": {
          "type": "array",
          "description": "The list of categories with usage data.",
          "items": {
            "$ref": "Category"
          }
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#categoryListResponse`."
        }
      },
      "type": "object",
      "id": "CategoryListResponse"
    },
    "PlayerEventListResponse": {
      "id": "PlayerEventListResponse",
      "type": "object",
      "description": "A ListByPlayer response.",
      "properties": {
        "items": {
          "description": "The player events.",
          "type": "array",
          "items": {
            "$ref": "PlayerEvent"
          }
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEventListResponse`."
        }
      }
    },
    "EventDefinitionListResponse": {
      "type": "object",
      "description": "A ListDefinitions response.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinitionListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The event definitions.",
          "items": {
            "$ref": "EventDefinition"
          }
        }
      },
      "id": "EventDefinitionListResponse"
    },
    "EventPeriodRange": {
      "id": "EventPeriodRange",
      "description": "An event period time range.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodRange`.",
          "type": "string"
        },
        "periodStartMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period begins, in millis, since 1970 UTC (Unix Epoch)."
        },
        "periodEndMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period ends, in millis, since 1970 UTC (Unix Epoch)."
        }
      }
    },
    "GamesAchievementSetStepsAtLeast": {
      "description": "The payload to request to increment an achievement.",
      "id": "GamesAchievementSetStepsAtLeast",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementSetStepsAtLeast`."
        },
        "steps": {
          "format": "int32",
          "type": "integer",
          "description": "The minimum number of steps for the achievement to be set to."
        }
      }
    },
    "PlayerLeaderboardScore": {
      "description": "A player leaderboard score object.",
      "id": "PlayerLeaderboardScore",
      "type": "object",
      "properties": {
        "friendsRank": {
          "description": "The rank of the score in the friends collection for this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.",
          "type": "string"
        },
        "timeSpan": {
          "type": "string",
          "description": "The time span of this score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ]
        },
        "leaderboard_id": {
          "type": "string",
          "description": "The ID of the leaderboard this score is in."
        },
        "scoreString": {
          "description": "The formatted value of this score.",
          "type": "string"
        },
        "publicRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly."
        },
        "socialRank": {
          "description": "The social rank of the score in this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        },
        "scoreValue": {
          "format": "int64",
          "description": "The numerical value of this score.",
          "type": "string"
        },
        "writeTimestamp": {
          "format": "int64",
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.",
          "type": "string"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        }
      }
    },
    "PlayerScoreSubmissionList": {
      "properties": {
        "scores": {
          "type": "array",
          "items": {
            "$ref": "ScoreSubmission"
          },
          "description": "The score submissions."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreSubmissionList`.",
          "type": "string"
        }
      },
      "id": "PlayerScoreSubmissionList",
      "description": "A list of score submission requests.",
      "type": "object"
    },
    "GamesAchievementIncrement": {
      "properties": {
        "steps": {
          "description": "The number of steps to be incremented.",
          "format": "int32",
          "type": "integer"
        },
        "requestId": {
          "description": "The requestId associated with an increment to an achievement.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementIncrement`."
        }
      },
      "id": "GamesAchievementIncrement",
      "type": "object",
      "description": "The payload to request to increment an achievement."
    },
    "AchievementUnlockResponse": {
      "type": "object",
      "properties": {
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUnlockResponse`."
        }
      },
      "id": "AchievementUnlockResponse",
      "description": "An achievement unlock response"
    },
    "Category": {
      "properties": {
        "experiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "Experience points earned in this category."
        },
        "category": {
          "type": "string",
          "description": "The category name."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#category`."
        }
      },
      "id": "Category",
      "description": "Data related to individual game categories.",
      "type": "object"
    }
  },
  "baseUrl": "https://games.googleapis.com/",
  "rootUrl": "https://games.googleapis.com/",
  "version": "v1",
  "documentationLink": "https://developers.google.com/games/",
  "title": "Google Play Game Services",
  "canonicalName": "Games",
  "description": "The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.",
  "servicePath": "",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "batchPath": "batch",
  "name": "games",
  "mtlsRootUrl": "https://games.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "resources": {
    "revisions": {
      "methods": {
        "check": {
          "parameters": {
            "clientRevision": {
              "required": true,
              "location": "query",
              "type": "string",
              "description": "The revision of the client SDK used by your application. Format: `[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are: * `ANDROID` - Client is running the Android SDK. * `IOS` - Client is running the iOS SDK. * `WEB_APP` - Client is running as a Web App."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/revisions/check",
          "parameterOrder": [
            "clientRevision"
          ],
          "httpMethod": "GET",
          "id": "games.revisions.check",
          "description": "Checks whether the games client is out of date.",
          "flatPath": "games/v1/revisions/check",
          "response": {
            "$ref": "RevisionCheckResponse"
          }
        }
      }
    },
    "scores": {
      "methods": {
        "submitMultiple": {
          "id": "games.scores.submitMultiple",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "request": {
            "$ref": "PlayerScoreSubmissionList"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "parameters": {
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "path": "games/v1/leaderboards/scores",
          "flatPath": "games/v1/leaderboards/scores",
          "response": {
            "$ref": "PlayerScoreListResponse"
          },
          "description": "Submits multiple scores to leaderboards."
        },
        "list": {
          "description": "Lists the scores in a leaderboard, starting from the top.",
          "path": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "leaderboardId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The ID of the leaderboard."
            },
            "collection": {
              "type": "string",
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "location": "path",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ],
              "description": "The collection of scores you're requesting.",
              "required": true
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "timeSpan": {
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "type": "string",
              "description": "The time span for the scores and ranks you're requesting.",
              "required": true,
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "location": "query"
            },
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "response": {
            "$ref": "LeaderboardScores"
          },
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "id": "games.scores.list"
        },
        "get": {
          "parameterOrder": [
            "playerId",
            "leaderboardId",
            "timeSpan"
          ],
          "parameters": {
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "timeSpan": {
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Get the high scores for all time spans. If this is used, maxResults values will be ignored.",
                "Get the all time high score.",
                "List the top scores for the current day.",
                "List the top scores for the current week."
              ],
              "description": "The time span for the scores and ranks you're requesting.",
              "location": "path",
              "required": true,
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ]
            },
            "includeRankType": {
              "location": "query",
              "description": "The types of ranks to return. If the parameter is omitted, no ranks will be returned.",
              "enumDescriptions": [
                "Default value. Should be unused.",
                "Retrieve all supported ranks. In HTTP, this parameter value can also be specified as `ALL`.",
                "Retrieve public ranks, if the player is sharing their gameplay activity publicly.",
                "(Obsolete) Retrieve the social rank.",
                "Retrieve the rank on the friends collection."
              ],
              "enum": [
                "INCLUDE_RANK_TYPE_UNSPECIFIED",
                "ALL",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "type": "integer"
            },
            "leaderboardId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application."
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.",
          "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "path": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "response": {
            "$ref": "PlayerLeaderboardScoreListResponse"
          },
          "id": "games.scores.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "submit": {
          "response": {
            "$ref": "PlayerScoreResponse"
          },
          "path": "games/v1/leaderboards/{leaderboardId}/scores",
          "parameterOrder": [
            "leaderboardId",
            "score"
          ],
          "httpMethod": "POST",
          "parameters": {
            "leaderboardId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The ID of the leaderboard."
            },
            "score": {
              "location": "query",
              "format": "int64",
              "type": "string",
              "description": "The score you're submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units.",
              "required": true
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "scoreTag": {
              "description": "Additional information about the score you're submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
              "location": "query",
              "type": "string",
              "pattern": "[a-zA-Z0-9-._~]{0,64}"
            }
          },
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
          "description": "Submits a score to the specified leaderboard.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.scores.submit"
        },
        "listWindow": {
          "response": {
            "$ref": "LeaderboardScores"
          },
          "description": "Lists the scores in a leaderboard around (and including) a player's score.",
          "parameters": {
            "resultsAbove": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "leaderboardId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The ID of the leaderboard."
            },
            "returnTopIfAbsent": {
              "description": "True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.",
              "location": "query",
              "type": "boolean"
            },
            "collection": {
              "location": "path",
              "required": true,
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ],
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "description": "The collection of scores you're requesting.",
              "type": "string"
            },
            "timeSpan": {
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "type": "string",
              "description": "The time span for the scores and ranks you're requesting.",
              "location": "query",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "required": true
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "path": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "httpMethod": "GET",
          "id": "games.scores.listWindow",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ]
        }
      }
    },
    "players": {
      "methods": {
        "list": {
          "flatPath": "games/v1/players/me/players/{collection}",
          "description": "Get the collection of players for the currently authenticated user.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "PlayerListResponse"
          },
          "parameters": {
            "maxResults": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified `maxResults`."
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "collection": {
              "location": "path",
              "description": "Collection of players being retrieved",
              "required": true,
              "enum": [
                "CONNECTED",
                "VISIBLE",
                "FRIENDS_ALL"
              ],
              "enumDescriptions": [
                "Retrieve a list of players that are also playing this game in reverse chronological order.",
                "Retrieve a list of players in the user's social graph that are visible to this game.",
                "Retrieve a list of players who are friends of the user in alphabetical order."
              ],
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            }
          },
          "parameterOrder": [
            "collection"
          ],
          "id": "games.players.list",
          "httpMethod": "GET",
          "path": "games/v1/players/me/players/{collection}"
        },
        "get": {
          "id": "games.players.get",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "Player"
          },
          "httpMethod": "GET",
          "path": "games/v1/players/{playerId}",
          "parameterOrder": [
            "playerId"
          ],
          "description": "Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.",
          "flatPath": "games/v1/players/{playerId}",
          "parameters": {
            "playerId": {
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "type": "string",
              "location": "path"
            },
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          }
        }
      }
    },
    "achievementDefinitions": {
      "methods": {
        "list": {
          "response": {
            "$ref": "AchievementDefinitionsListResponse"
          },
          "path": "games/v1/achievements",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/achievements",
          "description": "Lists all the achievement definitions for your application.",
          "id": "games.achievementDefinitions.list",
          "parameters": {
            "maxResults": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`."
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The token returned by the previous request."
            }
          },
          "parameterOrder": []
        }
      }
    },
    "snapshots": {
      "methods": {
        "list": {
          "id": "games.snapshots.list",
          "path": "games/v1/players/{playerId}/snapshots",
          "parameterOrder": [
            "playerId"
          ],
          "httpMethod": "GET",
          "flatPath": "games/v1/players/{playerId}/snapshots",
          "description": "Retrieves a list of snapshots created by your application for the player corresponding to the player ID.",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "maxResults": {
              "format": "int32",
              "description": "The maximum number of snapshot resources to return in the response, used for paging. For any response, the actual number of snapshot resources returned may be less than the specified `maxResults`.",
              "location": "query",
              "type": "integer"
            }
          },
          "response": {
            "$ref": "SnapshotListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ]
        },
        "get": {
          "id": "games.snapshots.get",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "Snapshot"
          },
          "httpMethod": "GET",
          "parameters": {
            "snapshotId": {
              "location": "path",
              "required": true,
              "description": "The ID of the snapshot.",
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "description": "Retrieves the metadata for a given snapshot ID.",
          "flatPath": "games/v1/snapshots/{snapshotId}",
          "parameterOrder": [
            "snapshotId"
          ],
          "path": "games/v1/snapshots/{snapshotId}"
        }
      }
    },
    "applications": {
      "methods": {
        "played": {
          "flatPath": "games/v1/applications/played",
          "path": "games/v1/applications/played",
          "httpMethod": "POST",
          "id": "games.applications.played",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Indicate that the currently authenticated user is playing your application.",
          "parameterOrder": []
        },
        "verify": {
          "path": "games/v1/applications/{applicationId}/verify",
          "parameters": {
            "applicationId": {
              "type": "string",
              "required": true,
              "description": "The application ID from the Google Play developer console.",
              "location": "path"
            }
          },
          "flatPath": "games/v1/applications/{applicationId}/verify",
          "parameterOrder": [
            "applicationId"
          ],
          "id": "games.applications.verify",
          "response": {
            "$ref": "ApplicationVerifyResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.",
          "httpMethod": "GET"
        },
        "get": {
          "id": "games.applications.get",
          "parameters": {
            "applicationId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The application ID from the Google Play developer console."
            },
            "platformType": {
              "description": "Restrict application details returned to the specific platform.",
              "type": "string",
              "enumDescriptions": [
                "Default value, don't use.",
                "Retrieve applications that can be played on Android.",
                "Retrieve applications that can be played on iOS.",
                "Retrieve applications that can be played on desktop web."
              ],
              "enum": [
                "PLATFORM_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "WEB_APP"
              ],
              "location": "query"
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data.",
          "flatPath": "games/v1/applications/{applicationId}",
          "parameterOrder": [
            "applicationId"
          ],
          "path": "games/v1/applications/{applicationId}",
          "response": {
            "$ref": "Application"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        }
      }
    },
    "achievements": {
      "methods": {
        "list": {
          "response": {
            "$ref": "PlayerAchievementListResponse"
          },
          "flatPath": "games/v1/players/{playerId}/achievements",
          "path": "games/v1/players/{playerId}/achievements",
          "parameterOrder": [
            "playerId"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`.",
              "location": "query"
            },
            "playerId": {
              "location": "path",
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "required": true
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "state": {
              "type": "string",
              "enum": [
                "ALL",
                "HIDDEN",
                "REVEALED",
                "UNLOCKED"
              ],
              "location": "query",
              "enumDescriptions": [
                "List all achievements. This is the default.",
                "List only hidden achievements.",
                "List only revealed achievements.",
                "List only unlocked achievements."
              ],
              "description": "Tells the server to return only achievements with the specified state. If this parameter isn't specified, all achievements are returned."
            }
          },
          "id": "games.achievements.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "description": "Lists the progress for all your application's achievements for the currently authenticated player."
        },
        "unlock": {
          "response": {
            "$ref": "AchievementUnlockResponse"
          },
          "parameterOrder": [
            "achievementId"
          ],
          "httpMethod": "POST",
          "flatPath": "games/v1/achievements/{achievementId}/unlock",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "achievementId": {
              "required": true,
              "description": "The ID of the achievement used by this method.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "games/v1/achievements/{achievementId}/unlock",
          "id": "games.achievements.unlock",
          "description": "Unlocks this achievement for the currently authenticated player."
        },
        "updateMultiple": {
          "request": {
            "$ref": "AchievementUpdateMultipleRequest"
          },
          "path": "games/v1/achievements/updateMultiple",
          "id": "games.achievements.updateMultiple",
          "response": {
            "$ref": "AchievementUpdateMultipleResponse"
          },
          "parameterOrder": [],
          "parameters": {},
          "httpMethod": "POST",
          "flatPath": "games/v1/achievements/updateMultiple",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Updates multiple achievements for the currently authenticated player."
        },
        "setStepsAtLeast": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.achievements.setStepsAtLeast",
          "path": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "description": "Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.",
          "httpMethod": "POST",
          "response": {
            "$ref": "AchievementSetStepsAtLeastResponse"
          },
          "parameterOrder": [
            "achievementId",
            "steps"
          ],
          "parameters": {
            "steps": {
              "required": true,
              "format": "int32",
              "description": "The minimum value to set the steps to.",
              "location": "query",
              "type": "integer"
            },
            "achievementId": {
              "description": "The ID of the achievement used by this method.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast"
        },
        "reveal": {
          "id": "games.achievements.reveal",
          "parameters": {
            "achievementId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The ID of the achievement used by this method."
            }
          },
          "path": "games/v1/achievements/{achievementId}/reveal",
          "response": {
            "$ref": "AchievementRevealResponse"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.",
          "parameterOrder": [
            "achievementId"
          ],
          "flatPath": "games/v1/achievements/{achievementId}/reveal"
        },
        "increment": {
          "parameters": {
            "stepsToIncrement": {
              "description": "The number of steps to increment.",
              "type": "integer",
              "required": true,
              "location": "query",
              "format": "int32"
            },
            "achievementId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The ID of the achievement used by this method."
            },
            "requestId": {
              "format": "int64",
              "description": "A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Increments the steps of the achievement with the given ID for the currently authenticated player.",
          "path": "games/v1/achievements/{achievementId}/increment",
          "parameterOrder": [
            "achievementId",
            "stepsToIncrement"
          ],
          "response": {
            "$ref": "AchievementIncrementResponse"
          },
          "httpMethod": "POST",
          "id": "games.achievements.increment",
          "flatPath": "games/v1/achievements/{achievementId}/increment"
        }
      }
    },
    "events": {
      "methods": {
        "listDefinitions": {
          "parameters": {
            "maxResults": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "The maximum number of event definitions to return in the response, used for paging. For any response, the actual number of event definitions to return may be less than the specified `maxResults`."
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "The token returned by the previous request.",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "flatPath": "games/v1/eventDefinitions",
          "description": "Returns a list of the event definitions in this application.",
          "id": "games.events.listDefinitions",
          "response": {
            "$ref": "EventDefinitionListResponse"
          },
          "path": "games/v1/eventDefinitions",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "record": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.",
          "path": "games/v1/events",
          "request": {
            "$ref": "EventRecordRequest"
          },
          "flatPath": "games/v1/events",
          "httpMethod": "POST",
          "id": "games.events.record",
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "EventUpdateResponse"
          }
        },
        "listByPlayer": {
          "path": "games/v1/events",
          "parameters": {
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of events to return in the response, used for paging. For any response, the actual number of events to return may be less than the specified maxResults."
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "id": "games.events.listByPlayer",
          "parameterOrder": [],
          "description": "Returns a list showing the current progress on events in this application for the currently authenticated user.",
          "httpMethod": "GET",
          "flatPath": "games/v1/events",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "PlayerEventListResponse"
          }
        }
      }
    },
    "leaderboards": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.leaderboards.get",
          "description": "Retrieves the metadata of the leaderboard with the given ID.",
          "httpMethod": "GET",
          "flatPath": "games/v1/leaderboards/{leaderboardId}",
          "parameterOrder": [
            "leaderboardId"
          ],
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "leaderboardId": {
              "location": "path",
              "description": "The ID of the leaderboard.",
              "required": true,
              "type": "string"
            }
          },
          "path": "games/v1/leaderboards/{leaderboardId}",
          "response": {
            "$ref": "Leaderboard"
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/leaderboards",
          "description": "Lists all the leaderboard metadata for your application.",
          "httpMethod": "GET",
          "id": "games.leaderboards.list",
          "parameterOrder": [],
          "path": "games/v1/leaderboards",
          "response": {
            "$ref": "LeaderboardListResponse"
          },
          "parameters": {
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "maxResults": {
              "description": "The maximum number of leaderboards to return in the response. For any response, the actual number of leaderboards returned may be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            }
          }
        }
      }
    },
    "stats": {
      "methods": {
        "get": {
          "path": "games/v1/stats",
          "description": "Returns engagement and spend statistics in this application for the currently authenticated user.",
          "parameters": {},
          "flatPath": "games/v1/stats",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [],
          "httpMethod": "GET",
          "id": "games.stats.get",
          "response": {
            "$ref": "StatsResponse"
          }
        }
      }
    },
    "metagame": {
      "methods": {
        "listCategoriesByPlayer": {
          "httpMethod": "GET",
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of category resources to return in the response, used for paging. For any response, the actual number of category resources returned may be less than the specified `maxResults`.",
              "location": "query"
            },
            "playerId": {
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "type": "string",
              "required": true
            },
            "collection": {
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Retrieve data for all categories. This is the default."
              ],
              "location": "path",
              "description": "The collection of categories for which data will be returned.",
              "required": true,
              "enum": [
                "COLLECTION_UNSPECIFIED",
                "ALL"
              ]
            }
          },
          "response": {
            "$ref": "CategoryListResponse"
          },
          "path": "games/v1/players/{playerId}/categories/{collection}",
          "id": "games.metagame.listCategoriesByPlayer",
          "description": "List play data aggregated per category for the player corresponding to `playerId`.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "playerId",
            "collection"
          ],
          "flatPath": "games/v1/players/{playerId}/categories/{collection}"
        },
        "getMetagameConfig": {
          "path": "games/v1/metagameConfig",
          "flatPath": "games/v1/metagameConfig",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "MetagameConfig"
          },
          "id": "games.metagame.getMetagameConfig",
          "description": "Return the metagame configuration data for the calling application.",
          "parameterOrder": [],
          "parameters": {}
        }
      }
    }
  }
}
