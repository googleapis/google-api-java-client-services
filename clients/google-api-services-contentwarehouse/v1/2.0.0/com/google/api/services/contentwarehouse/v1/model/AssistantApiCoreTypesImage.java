/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * An image represents the data about an image or a photo. IMPORTANT: The definition of the Image
 * message is being moved to //assistant/api/core_types/governed/image_type.proto. All existing
 * references will be updated to point to the new location. If you are adding a reference, use the
 * new Image message instead of this one. LINT.IfChange NextId: 13
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCoreTypesImage extends com.google.api.client.json.GenericJson {

  /**
   * A text description of the image to be used for accessibility, e.g. screen readers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String accessibilityText;

  /**
   * App identifier. This field is specific to mobile surfaces and stands for app package name for
   * Android surface, and app bundle identifier for iOS. In case identifier is specified but
   * invalid, some default icon will be used, e.g. PackageManager.getDefaultActivityIcon() for
   * Android. If you want to show image for AGSA versions which don't support this field, you can
   * specify source_url as backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appIconIdentifier;

  /**
   * This is the image that is displayed as the badge on the main image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesImage badgeImage;

  /**
   * Content of the image in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String content;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * Indicate the data source where the image is fetched.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageSource;

  /**
   * Content of image in form of JSON representation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jsonContent;

  /**
   * Text used to generate a letter drawable (a letter icon with color). It will be the default icon
   * if the source_url is empty or cannot be rendered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String letterDrawableText;

  /**
   * Url of the image provider, which is the website containing the image. For example,
   * https://www.agentx.com.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerUrl;

  /**
   * The source url of the image. For example, https://www.agentx.com/logo.png
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUrl;

  /**
   * Type of the source url.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUrlType;

  /**
   * The width and height of the image in pixels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * A text description of the image to be used for accessibility, e.g. screen readers.
   * @return value or {@code null} for none
   */
  public java.lang.String getAccessibilityText() {
    return accessibilityText;
  }

  /**
   * A text description of the image to be used for accessibility, e.g. screen readers.
   * @param accessibilityText accessibilityText or {@code null} for none
   */
  public AssistantApiCoreTypesImage setAccessibilityText(java.lang.String accessibilityText) {
    this.accessibilityText = accessibilityText;
    return this;
  }

  /**
   * App identifier. This field is specific to mobile surfaces and stands for app package name for
   * Android surface, and app bundle identifier for iOS. In case identifier is specified but
   * invalid, some default icon will be used, e.g. PackageManager.getDefaultActivityIcon() for
   * Android. If you want to show image for AGSA versions which don't support this field, you can
   * specify source_url as backup.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppIconIdentifier() {
    return appIconIdentifier;
  }

  /**
   * App identifier. This field is specific to mobile surfaces and stands for app package name for
   * Android surface, and app bundle identifier for iOS. In case identifier is specified but
   * invalid, some default icon will be used, e.g. PackageManager.getDefaultActivityIcon() for
   * Android. If you want to show image for AGSA versions which don't support this field, you can
   * specify source_url as backup.
   * @param appIconIdentifier appIconIdentifier or {@code null} for none
   */
  public AssistantApiCoreTypesImage setAppIconIdentifier(java.lang.String appIconIdentifier) {
    this.appIconIdentifier = appIconIdentifier;
    return this;
  }

  /**
   * This is the image that is displayed as the badge on the main image.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesImage getBadgeImage() {
    return badgeImage;
  }

  /**
   * This is the image that is displayed as the badge on the main image.
   * @param badgeImage badgeImage or {@code null} for none
   */
  public AssistantApiCoreTypesImage setBadgeImage(AssistantApiCoreTypesImage badgeImage) {
    this.badgeImage = badgeImage;
    return this;
  }

  /**
   * Content of the image in bytes.
   * @see #decodeContent()
   * @return value or {@code null} for none
   */
  public java.lang.String getContent() {
    return content;
  }

  /**
   * Content of the image in bytes.
   * @see #getContent()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeContent() {
    return com.google.api.client.util.Base64.decodeBase64(content);
  }

  /**
   * Content of the image in bytes.
   * @see #encodeContent()
   * @param content content or {@code null} for none
   */
  public AssistantApiCoreTypesImage setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  /**
   * Content of the image in bytes.
   * @see #setContent()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public AssistantApiCoreTypesImage encodeContent(byte[] content) {
    this.content = com.google.api.client.util.Base64.encodeBase64URLSafeString(content);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * @param height height or {@code null} for none
   */
  public AssistantApiCoreTypesImage setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Indicate the data source where the image is fetched.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageSource() {
    return imageSource;
  }

  /**
   * Indicate the data source where the image is fetched.
   * @param imageSource imageSource or {@code null} for none
   */
  public AssistantApiCoreTypesImage setImageSource(java.lang.String imageSource) {
    this.imageSource = imageSource;
    return this;
  }

  /**
   * Content of image in form of JSON representation.
   * @return value or {@code null} for none
   */
  public java.lang.String getJsonContent() {
    return jsonContent;
  }

  /**
   * Content of image in form of JSON representation.
   * @param jsonContent jsonContent or {@code null} for none
   */
  public AssistantApiCoreTypesImage setJsonContent(java.lang.String jsonContent) {
    this.jsonContent = jsonContent;
    return this;
  }

  /**
   * Text used to generate a letter drawable (a letter icon with color). It will be the default icon
   * if the source_url is empty or cannot be rendered.
   * @return value or {@code null} for none
   */
  public java.lang.String getLetterDrawableText() {
    return letterDrawableText;
  }

  /**
   * Text used to generate a letter drawable (a letter icon with color). It will be the default icon
   * if the source_url is empty or cannot be rendered.
   * @param letterDrawableText letterDrawableText or {@code null} for none
   */
  public AssistantApiCoreTypesImage setLetterDrawableText(java.lang.String letterDrawableText) {
    this.letterDrawableText = letterDrawableText;
    return this;
  }

  /**
   * Url of the image provider, which is the website containing the image. For example,
   * https://www.agentx.com.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderUrl() {
    return providerUrl;
  }

  /**
   * Url of the image provider, which is the website containing the image. For example,
   * https://www.agentx.com.
   * @param providerUrl providerUrl or {@code null} for none
   */
  public AssistantApiCoreTypesImage setProviderUrl(java.lang.String providerUrl) {
    this.providerUrl = providerUrl;
    return this;
  }

  /**
   * The source url of the image. For example, https://www.agentx.com/logo.png
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUrl() {
    return sourceUrl;
  }

  /**
   * The source url of the image. For example, https://www.agentx.com/logo.png
   * @param sourceUrl sourceUrl or {@code null} for none
   */
  public AssistantApiCoreTypesImage setSourceUrl(java.lang.String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Type of the source url.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUrlType() {
    return sourceUrlType;
  }

  /**
   * Type of the source url.
   * @param sourceUrlType sourceUrlType or {@code null} for none
   */
  public AssistantApiCoreTypesImage setSourceUrlType(java.lang.String sourceUrlType) {
    this.sourceUrlType = sourceUrlType;
    return this;
  }

  /**
   * The width and height of the image in pixels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * The width and height of the image in pixels.
   * @param width width or {@code null} for none
   */
  public AssistantApiCoreTypesImage setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public AssistantApiCoreTypesImage set(String fieldName, Object value) {
    return (AssistantApiCoreTypesImage) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCoreTypesImage clone() {
    return (AssistantApiCoreTypesImage) super.clone();
  }

}
