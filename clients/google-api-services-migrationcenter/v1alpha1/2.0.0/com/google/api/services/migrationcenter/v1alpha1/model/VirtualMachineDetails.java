/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Details of a VirtualMachine.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VirtualMachineDetails extends com.google.api.client.json.GenericJson {

  /**
   * Number of CPU cores in the VirtualMachine. Must be non-negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer coreCount;

  /**
   * VM creation timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Guest OS information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GuestOsDetails guestOs;

  /**
   * The amount of memory in the VirtualMachine. Must be non-negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryMb;

  /**
   * What family the OS belong to, if known.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String osFamily;

  /**
   * The name of the operating system running on the VirtualMachine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String osName;

  /**
   * The version of the operating system running on the virtual machine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String osVersion;

  /**
   * Platform information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PlatformDetails platform;

  /**
   * Power state of VM (poweredOn or poweredOff).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String powerState;

  /**
   * Folder name in vCenter where asset resides.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vcenterFolder;

  /**
   * vCenter URL used in collection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vcenterUrl;

  /**
   * vCenter VM ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vcenterVmId;

  /**
   * VM architecture details (vendor, cpu arch).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VirtualMachineArchitectureDetails vmArchitecture;

  /**
   * VM disk details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VirtualMachineDiskDetails vmDisks;

  /**
   * Virtual Machine display name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmName;

  /**
   * VM network details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VirtualMachineNetworkDetails vmNetwork;

  /**
   * Virtual Machine unique identifier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmUuid;

  /**
   * Number of CPU cores in the VirtualMachine. Must be non-negative.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCoreCount() {
    return coreCount;
  }

  /**
   * Number of CPU cores in the VirtualMachine. Must be non-negative.
   * @param coreCount coreCount or {@code null} for none
   */
  public VirtualMachineDetails setCoreCount(java.lang.Integer coreCount) {
    this.coreCount = coreCount;
    return this;
  }

  /**
   * VM creation timestamp.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * VM creation timestamp.
   * @param createTime createTime or {@code null} for none
   */
  public VirtualMachineDetails setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Guest OS information.
   * @return value or {@code null} for none
   */
  public GuestOsDetails getGuestOs() {
    return guestOs;
  }

  /**
   * Guest OS information.
   * @param guestOs guestOs or {@code null} for none
   */
  public VirtualMachineDetails setGuestOs(GuestOsDetails guestOs) {
    this.guestOs = guestOs;
    return this;
  }

  /**
   * The amount of memory in the VirtualMachine. Must be non-negative.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryMb() {
    return memoryMb;
  }

  /**
   * The amount of memory in the VirtualMachine. Must be non-negative.
   * @param memoryMb memoryMb or {@code null} for none
   */
  public VirtualMachineDetails setMemoryMb(java.lang.Integer memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * What family the OS belong to, if known.
   * @return value or {@code null} for none
   */
  public java.lang.String getOsFamily() {
    return osFamily;
  }

  /**
   * What family the OS belong to, if known.
   * @param osFamily osFamily or {@code null} for none
   */
  public VirtualMachineDetails setOsFamily(java.lang.String osFamily) {
    this.osFamily = osFamily;
    return this;
  }

  /**
   * The name of the operating system running on the VirtualMachine.
   * @return value or {@code null} for none
   */
  public java.lang.String getOsName() {
    return osName;
  }

  /**
   * The name of the operating system running on the VirtualMachine.
   * @param osName osName or {@code null} for none
   */
  public VirtualMachineDetails setOsName(java.lang.String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * The version of the operating system running on the virtual machine.
   * @return value or {@code null} for none
   */
  public java.lang.String getOsVersion() {
    return osVersion;
  }

  /**
   * The version of the operating system running on the virtual machine.
   * @param osVersion osVersion or {@code null} for none
   */
  public VirtualMachineDetails setOsVersion(java.lang.String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Platform information.
   * @return value or {@code null} for none
   */
  public PlatformDetails getPlatform() {
    return platform;
  }

  /**
   * Platform information.
   * @param platform platform or {@code null} for none
   */
  public VirtualMachineDetails setPlatform(PlatformDetails platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Power state of VM (poweredOn or poweredOff).
   * @return value or {@code null} for none
   */
  public java.lang.String getPowerState() {
    return powerState;
  }

  /**
   * Power state of VM (poweredOn or poweredOff).
   * @param powerState powerState or {@code null} for none
   */
  public VirtualMachineDetails setPowerState(java.lang.String powerState) {
    this.powerState = powerState;
    return this;
  }

  /**
   * Folder name in vCenter where asset resides.
   * @return value or {@code null} for none
   */
  public java.lang.String getVcenterFolder() {
    return vcenterFolder;
  }

  /**
   * Folder name in vCenter where asset resides.
   * @param vcenterFolder vcenterFolder or {@code null} for none
   */
  public VirtualMachineDetails setVcenterFolder(java.lang.String vcenterFolder) {
    this.vcenterFolder = vcenterFolder;
    return this;
  }

  /**
   * vCenter URL used in collection.
   * @return value or {@code null} for none
   */
  public java.lang.String getVcenterUrl() {
    return vcenterUrl;
  }

  /**
   * vCenter URL used in collection.
   * @param vcenterUrl vcenterUrl or {@code null} for none
   */
  public VirtualMachineDetails setVcenterUrl(java.lang.String vcenterUrl) {
    this.vcenterUrl = vcenterUrl;
    return this;
  }

  /**
   * vCenter VM ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getVcenterVmId() {
    return vcenterVmId;
  }

  /**
   * vCenter VM ID.
   * @param vcenterVmId vcenterVmId or {@code null} for none
   */
  public VirtualMachineDetails setVcenterVmId(java.lang.String vcenterVmId) {
    this.vcenterVmId = vcenterVmId;
    return this;
  }

  /**
   * VM architecture details (vendor, cpu arch).
   * @return value or {@code null} for none
   */
  public VirtualMachineArchitectureDetails getVmArchitecture() {
    return vmArchitecture;
  }

  /**
   * VM architecture details (vendor, cpu arch).
   * @param vmArchitecture vmArchitecture or {@code null} for none
   */
  public VirtualMachineDetails setVmArchitecture(VirtualMachineArchitectureDetails vmArchitecture) {
    this.vmArchitecture = vmArchitecture;
    return this;
  }

  /**
   * VM disk details.
   * @return value or {@code null} for none
   */
  public VirtualMachineDiskDetails getVmDisks() {
    return vmDisks;
  }

  /**
   * VM disk details.
   * @param vmDisks vmDisks or {@code null} for none
   */
  public VirtualMachineDetails setVmDisks(VirtualMachineDiskDetails vmDisks) {
    this.vmDisks = vmDisks;
    return this;
  }

  /**
   * Virtual Machine display name.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmName() {
    return vmName;
  }

  /**
   * Virtual Machine display name.
   * @param vmName vmName or {@code null} for none
   */
  public VirtualMachineDetails setVmName(java.lang.String vmName) {
    this.vmName = vmName;
    return this;
  }

  /**
   * VM network details.
   * @return value or {@code null} for none
   */
  public VirtualMachineNetworkDetails getVmNetwork() {
    return vmNetwork;
  }

  /**
   * VM network details.
   * @param vmNetwork vmNetwork or {@code null} for none
   */
  public VirtualMachineDetails setVmNetwork(VirtualMachineNetworkDetails vmNetwork) {
    this.vmNetwork = vmNetwork;
    return this;
  }

  /**
   * Virtual Machine unique identifier.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmUuid() {
    return vmUuid;
  }

  /**
   * Virtual Machine unique identifier.
   * @param vmUuid vmUuid or {@code null} for none
   */
  public VirtualMachineDetails setVmUuid(java.lang.String vmUuid) {
    this.vmUuid = vmUuid;
    return this;
  }

  @Override
  public VirtualMachineDetails set(String fieldName, Object value) {
    return (VirtualMachineDetails) super.set(fieldName, value);
  }

  @Override
  public VirtualMachineDetails clone() {
    return (VirtualMachineDetails) super.clone();
  }

}
