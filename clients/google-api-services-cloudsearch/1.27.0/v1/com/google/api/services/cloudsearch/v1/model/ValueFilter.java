/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Model definition for ValueFilter.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ValueFilter extends com.google.api.client.json.GenericJson {

  /**
   * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work
   * against both types of filters defined in the schema for your data source:
   *
   * 1. `operator_name`, where the query filters results by the property that matches the value.
   *
   * 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters
   * the results for the property values that are greater than or less than  the supplied value in
   * the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operatorName;

  /**
   * The value to be compared with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Value value;

  /**
   * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work
   * against both types of filters defined in the schema for your data source:
   *
   * 1. `operator_name`, where the query filters results by the property that matches the value.
   *
   * 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters
   * the results for the property values that are greater than or less than  the supplied value in
   * the query.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperatorName() {
    return operatorName;
  }

  /**
   * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work
   * against both types of filters defined in the schema for your data source:
   *
   * 1. `operator_name`, where the query filters results by the property that matches the value.
   *
   * 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters
   * the results for the property values that are greater than or less than  the supplied value in
   * the query.
   * @param operatorName operatorName or {@code null} for none
   */
  public ValueFilter setOperatorName(java.lang.String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * The value to be compared with.
   * @return value or {@code null} for none
   */
  public Value getValue() {
    return value;
  }

  /**
   * The value to be compared with.
   * @param value value or {@code null} for none
   */
  public ValueFilter setValue(Value value) {
    this.value = value;
    return this;
  }

  @Override
  public ValueFilter set(String fieldName, Object value) {
    return (ValueFilter) super.set(fieldName, value);
  }

  @Override
  public ValueFilter clone() {
    return (ValueFilter) super.clone();
  }

}
