/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.binaryauthorization.v1.model;

/**
 * Require a signed [DSSE](https://github.com/secure-systems-lab/dsse) attestation with type
 * SimpleSigning.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Binary Authorization API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SimpleSigningAttestationCheck extends com.google.api.client.json.GenericJson {

  /**
   * Required. The authenticators required by this check to verify an attestation. Typically this is
   * one or more PKIX public keys for signature verification. Only one authenticator needs to
   * consider an attestation verified in order for an attestation to be considered fully
   * authenticated. In otherwords, this list of authenticators is an "OR" of the authenticator
   * results. At least one authenticator is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AttestationAuthenticator> attestationAuthenticators;

  static {
    // hack to force ProGuard to consider AttestationAuthenticator used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AttestationAuthenticator.class);
  }

  /**
   * Optional. The projects where attestations are stored as Container Analysis Occurrences, in the
   * format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for
   * this check to pass, so a single verified attestation found in any of
   * `container_analysis_attestation_projects` is sufficient for the check to pass. A project ID
   * must be used, not a project number. When fetching Occurrences from Container Analysis, only
   * `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be
   * added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each
   * `SimpleSigningAttestationCheck` is 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> containerAnalysisAttestationProjects;

  /**
   * Required. The authenticators required by this check to verify an attestation. Typically this is
   * one or more PKIX public keys for signature verification. Only one authenticator needs to
   * consider an attestation verified in order for an attestation to be considered fully
   * authenticated. In otherwords, this list of authenticators is an "OR" of the authenticator
   * results. At least one authenticator is required.
   * @return value or {@code null} for none
   */
  public java.util.List<AttestationAuthenticator> getAttestationAuthenticators() {
    return attestationAuthenticators;
  }

  /**
   * Required. The authenticators required by this check to verify an attestation. Typically this is
   * one or more PKIX public keys for signature verification. Only one authenticator needs to
   * consider an attestation verified in order for an attestation to be considered fully
   * authenticated. In otherwords, this list of authenticators is an "OR" of the authenticator
   * results. At least one authenticator is required.
   * @param attestationAuthenticators attestationAuthenticators or {@code null} for none
   */
  public SimpleSigningAttestationCheck setAttestationAuthenticators(java.util.List<AttestationAuthenticator> attestationAuthenticators) {
    this.attestationAuthenticators = attestationAuthenticators;
    return this;
  }

  /**
   * Optional. The projects where attestations are stored as Container Analysis Occurrences, in the
   * format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for
   * this check to pass, so a single verified attestation found in any of
   * `container_analysis_attestation_projects` is sufficient for the check to pass. A project ID
   * must be used, not a project number. When fetching Occurrences from Container Analysis, only
   * `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be
   * added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each
   * `SimpleSigningAttestationCheck` is 10.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContainerAnalysisAttestationProjects() {
    return containerAnalysisAttestationProjects;
  }

  /**
   * Optional. The projects where attestations are stored as Container Analysis Occurrences, in the
   * format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for
   * this check to pass, so a single verified attestation found in any of
   * `container_analysis_attestation_projects` is sufficient for the check to pass. A project ID
   * must be used, not a project number. When fetching Occurrences from Container Analysis, only
   * `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be
   * added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each
   * `SimpleSigningAttestationCheck` is 10.
   * @param containerAnalysisAttestationProjects containerAnalysisAttestationProjects or {@code null} for none
   */
  public SimpleSigningAttestationCheck setContainerAnalysisAttestationProjects(java.util.List<java.lang.String> containerAnalysisAttestationProjects) {
    this.containerAnalysisAttestationProjects = containerAnalysisAttestationProjects;
    return this;
  }

  @Override
  public SimpleSigningAttestationCheck set(String fieldName, Object value) {
    return (SimpleSigningAttestationCheck) super.set(fieldName, value);
  }

  @Override
  public SimpleSigningAttestationCheck clone() {
    return (SimpleSigningAttestationCheck) super.clone();
  }

}
