/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1alpha.model;

/**
 * **ClusterUpgrade**: The state for the scope-level ClusterUpgrade feature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ClusterUpgradeScopeState extends com.google.api.client.json.GenericJson {

  /**
   * This scopes whose upstream_scopes contain the current scope. The scope name should be in the
   * form: `projects/{p}/locations/gloobal/scopes/{s}` Where {p} is the project, {s} is a valid
   * Scope in this project. {p} WILL match the Feature's project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> downstreamScopes;

  /**
   * Feature state for GKE clusters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClusterUpgradeGKEUpgradeFeatureState gkeState;

  /**
   * A list of memberships ignored by the feature. For example, manually upgraded clusters can be
   * ignored if they are newer than the default versions of its release channel. The membership
   * resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, ClusterUpgradeIgnoredMembership> ignored;

  static {
    // hack to force ProGuard to consider ClusterUpgradeIgnoredMembership used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ClusterUpgradeIgnoredMembership.class);
  }

  /**
   * This scopes whose upstream_scopes contain the current scope. The scope name should be in the
   * form: `projects/{p}/locations/gloobal/scopes/{s}` Where {p} is the project, {s} is a valid
   * Scope in this project. {p} WILL match the Feature's project.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDownstreamScopes() {
    return downstreamScopes;
  }

  /**
   * This scopes whose upstream_scopes contain the current scope. The scope name should be in the
   * form: `projects/{p}/locations/gloobal/scopes/{s}` Where {p} is the project, {s} is a valid
   * Scope in this project. {p} WILL match the Feature's project.
   * @param downstreamScopes downstreamScopes or {@code null} for none
   */
  public ClusterUpgradeScopeState setDownstreamScopes(java.util.List<java.lang.String> downstreamScopes) {
    this.downstreamScopes = downstreamScopes;
    return this;
  }

  /**
   * Feature state for GKE clusters.
   * @return value or {@code null} for none
   */
  public ClusterUpgradeGKEUpgradeFeatureState getGkeState() {
    return gkeState;
  }

  /**
   * Feature state for GKE clusters.
   * @param gkeState gkeState or {@code null} for none
   */
  public ClusterUpgradeScopeState setGkeState(ClusterUpgradeGKEUpgradeFeatureState gkeState) {
    this.gkeState = gkeState;
    return this;
  }

  /**
   * A list of memberships ignored by the feature. For example, manually upgraded clusters can be
   * ignored if they are newer than the default versions of its release channel. The membership
   * resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, ClusterUpgradeIgnoredMembership> getIgnored() {
    return ignored;
  }

  /**
   * A list of memberships ignored by the feature. For example, manually upgraded clusters can be
   * ignored if they are newer than the default versions of its release channel. The membership
   * resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
   * @param ignored ignored or {@code null} for none
   */
  public ClusterUpgradeScopeState setIgnored(java.util.Map<String, ClusterUpgradeIgnoredMembership> ignored) {
    this.ignored = ignored;
    return this;
  }

  @Override
  public ClusterUpgradeScopeState set(String fieldName, Object value) {
    return (ClusterUpgradeScopeState) super.set(fieldName, value);
  }

  @Override
  public ClusterUpgradeScopeState clone() {
    return (ClusterUpgradeScopeState) super.clone();
  }

}
