/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromewebstore.v1_1;

/**
 * Service definition for Chromewebstore (v1.1).
 *
 * <p>
 * The Chrome Web Store API provides access to data about apps and extensions, as well as developer tools for managing them.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developer.chrome.com/webstore/api_index" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ChromewebstoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Chromewebstore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Chrome Web Store API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://chromewebstore.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://chromewebstore.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Chromewebstore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Chromewebstore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Items collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Chromewebstore chromewebstore = new Chromewebstore(...);}
   *   {@code Chromewebstore.Items.List request = chromewebstore.items().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Items items() {
    return new Items();
  }

  /**
   * The "items" collection of methods.
   */
  public class Items {

    /**
     * Gets your own Chrome Web Store item.
     *
     * Create a request for the method "items.get".
     *
     * This request holds the parameters needed by the chromewebstore server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param itemId Unique identifier representing the Chrome App, Chrome Extension, or the Chrome Theme.
     * @return the request
     */
    public Get get(java.lang.String itemId) throws java.io.IOException {
      Get result = new Get(itemId);
      initialize(result);
      return result;
    }

    public class Get extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v1_1.model.Item> {

      private static final String REST_PATH = "chromewebstore/v1.1/items/{itemId}";

      /**
       * Gets your own Chrome Web Store item.
       *
       * Create a request for the method "items.get".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param itemId Unique identifier representing the Chrome App, Chrome Extension, or the Chrome Theme.
       * @since 1.13
       */
      protected Get(java.lang.String itemId) {
        super(Chromewebstore.this, "GET", REST_PATH, null, com.google.api.services.chromewebstore.v1_1.model.Item.class);
        this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Unique identifier representing the Chrome App, Chrome Extension, or the Chrome Theme. */
      @com.google.api.client.util.Key
      private java.lang.String itemId;

      /** Unique identifier representing the Chrome App, Chrome Extension, or the Chrome Theme.
       */
      public java.lang.String getItemId() {
        return itemId;
      }

      /** Unique identifier representing the Chrome App, Chrome Extension, or the Chrome Theme. */
      public Get setItemId(java.lang.String itemId) {
        this.itemId = itemId;
        return this;
      }

      /** Determines which subset of the item information to return. */
      @com.google.api.client.util.Key
      private java.lang.String projection;

      /** Determines which subset of the item information to return.
       */
      public java.lang.String getProjection() {
        return projection;
      }

      /** Determines which subset of the item information to return. */
      public Get setProjection(java.lang.String projection) {
        this.projection = projection;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a new item.
     *
     * Create a request for the method "items.insert".
     *
     * This request holds the parameters needed by the chromewebstore server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Insert insert() throws java.io.IOException {
      Insert result = new Insert();
      initialize(result);
      return result;
    }

    /**
     * Inserts a new item.
     *
     * Create a request for the method "items.insert".
     *
     * This request holds the parameters needed by the the chromewebstore server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     *
     * @param mediaContent The media HTTP content.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Insert insert(com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Insert result = new Insert(mediaContent);
      initialize(result);
      return result;
    }

    public class Insert extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v1_1.model.Item> {

      private static final String REST_PATH = "chromewebstore/v1.1/items";

      /**
       * Inserts a new item.
       *
       * Create a request for the method "items.insert".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Insert() {
        super(Chromewebstore.this, "POST", REST_PATH, null, com.google.api.services.chromewebstore.v1_1.model.Item.class);
      }

      /**
       * Inserts a new item.
       *
       * Create a request for the method "items.insert".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       *
       * @param mediaContent The media HTTP content.
       * @since 1.13
       */
      protected Insert(com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Chromewebstore.this, "POST", "/upload/" + getServicePath() + REST_PATH, null, com.google.api.services.chromewebstore.v1_1.model.Item.class);
        com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Insert set$Xgafv(java.lang.String $Xgafv) {
        return (Insert) super.set$Xgafv($Xgafv);
      }

      @Override
      public Insert setAccessToken(java.lang.String accessToken) {
        return (Insert) super.setAccessToken(accessToken);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setCallback(java.lang.String callback) {
        return (Insert) super.setCallback(callback);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUploadType(java.lang.String uploadType) {
        return (Insert) super.setUploadType(uploadType);
      }

      @Override
      public Insert setUploadProtocol(java.lang.String uploadProtocol) {
        return (Insert) super.setUploadProtocol(uploadProtocol);
      }

      /** The email of the publisher who owns the items. Defaults to the caller's email address. */
      @com.google.api.client.util.Key
      private java.lang.String publisherEmail;

      /** The email of the publisher who owns the items. Defaults to the caller's email address.
       */
      public java.lang.String getPublisherEmail() {
        return publisherEmail;
      }

      /** The email of the publisher who owns the items. Defaults to the caller's email address. */
      public Insert setPublisherEmail(java.lang.String publisherEmail) {
        this.publisherEmail = publisherEmail;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Publishes an item.
     *
     * Create a request for the method "items.publish".
     *
     * This request holds the parameters needed by the chromewebstore server.  After setting any
     * optional parameters, call the {@link Publish#execute()} method to invoke the remote operation.
     *
     * @param itemId The ID of the item to publish.
     * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.PublishRequest}
     * @return the request
     */
    public Publish publish(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.PublishRequest content) throws java.io.IOException {
      Publish result = new Publish(itemId, content);
      initialize(result);
      return result;
    }

    public class Publish extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v1_1.model.Item2> {

      private static final String REST_PATH = "chromewebstore/v1.1/items/{itemId}/publish";

      /**
       * Publishes an item.
       *
       * Create a request for the method "items.publish".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Publish#execute()} method to invoke the remote operation.
       * <p> {@link
       * Publish#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param itemId The ID of the item to publish.
       * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.PublishRequest}
       * @since 1.13
       */
      protected Publish(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.PublishRequest content) {
        super(Chromewebstore.this, "POST", REST_PATH, content, com.google.api.services.chromewebstore.v1_1.model.Item2.class);
        this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
      }

      @Override
      public Publish set$Xgafv(java.lang.String $Xgafv) {
        return (Publish) super.set$Xgafv($Xgafv);
      }

      @Override
      public Publish setAccessToken(java.lang.String accessToken) {
        return (Publish) super.setAccessToken(accessToken);
      }

      @Override
      public Publish setAlt(java.lang.String alt) {
        return (Publish) super.setAlt(alt);
      }

      @Override
      public Publish setCallback(java.lang.String callback) {
        return (Publish) super.setCallback(callback);
      }

      @Override
      public Publish setFields(java.lang.String fields) {
        return (Publish) super.setFields(fields);
      }

      @Override
      public Publish setKey(java.lang.String key) {
        return (Publish) super.setKey(key);
      }

      @Override
      public Publish setOauthToken(java.lang.String oauthToken) {
        return (Publish) super.setOauthToken(oauthToken);
      }

      @Override
      public Publish setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Publish) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Publish setQuotaUser(java.lang.String quotaUser) {
        return (Publish) super.setQuotaUser(quotaUser);
      }

      @Override
      public Publish setUploadType(java.lang.String uploadType) {
        return (Publish) super.setUploadType(uploadType);
      }

      @Override
      public Publish setUploadProtocol(java.lang.String uploadProtocol) {
        return (Publish) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the item to publish. */
      @com.google.api.client.util.Key
      private java.lang.String itemId;

      /** The ID of the item to publish.
       */
      public java.lang.String getItemId() {
        return itemId;
      }

      /** The ID of the item to publish. */
      public Publish setItemId(java.lang.String itemId) {
        this.itemId = itemId;
        return this;
      }

      /**
       * The deploy percentage you want to set for your item. Valid values are [0, 100]. If set to
       * any number less than 100, only that many percentage of users will be allowed to get the
       * update.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer deployPercentage;

      /** The deploy percentage you want to set for your item. Valid values are [0, 100]. If set to any
     number less than 100, only that many percentage of users will be allowed to get the update.
       */
      public java.lang.Integer getDeployPercentage() {
        return deployPercentage;
      }

      /**
       * The deploy percentage you want to set for your item. Valid values are [0, 100]. If set to
       * any number less than 100, only that many percentage of users will be allowed to get the
       * update.
       */
      public Publish setDeployPercentage(java.lang.Integer deployPercentage) {
        this.deployPercentage = deployPercentage;
        return this;
      }

      /**
       * Provide defined publishTarget in URL (case sensitive): publishTarget="trustedTesters" or
       * publishTarget="default". Defaults to publishTarget="default".
       */
      @com.google.api.client.util.Key
      private java.lang.String publishTarget;

      /** Provide defined publishTarget in URL (case sensitive): publishTarget="trustedTesters" or
     publishTarget="default". Defaults to publishTarget="default".
       */
      public java.lang.String getPublishTarget() {
        return publishTarget;
      }

      /**
       * Provide defined publishTarget in URL (case sensitive): publishTarget="trustedTesters" or
       * publishTarget="default". Defaults to publishTarget="default".
       */
      public Publish setPublishTarget(java.lang.String publishTarget) {
        this.publishTarget = publishTarget;
        return this;
      }

      /**
       * Optional. The caller request to exempt the review and directly publish because the update
       * is within the list that we can automatically validate. The API will check if the exemption
       * can be granted using real time data.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean reviewExemption;

      /** Optional. The caller request to exempt the review and directly publish because the update is within
     the list that we can automatically validate. The API will check if the exemption can be granted
     using real time data.
       */
      public java.lang.Boolean getReviewExemption() {
        return reviewExemption;
      }

      /**
       * Optional. The caller request to exempt the review and directly publish because the update
       * is within the list that we can automatically validate. The API will check if the exemption
       * can be granted using real time data.
       */
      public Publish setReviewExemption(java.lang.Boolean reviewExemption) {
        this.reviewExemption = reviewExemption;
        return this;
      }

      @Override
      public Publish set(String parameterName, Object value) {
        return (Publish) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing item.
     *
     * Create a request for the method "items.update".
     *
     * This request holds the parameters needed by the chromewebstore server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param itemId The ID of the item to upload.
     * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.Item}
     * @return the request
     */
    public Update update(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.Item content) throws java.io.IOException {
      Update result = new Update(itemId, content);
      initialize(result);
      return result;
    }

    /**
     * Updates an existing item.
     *
     * Create a request for the method "items.update".
     *
     * This request holds the parameters needed by the the chromewebstore server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param itemId The ID of the item to upload.
     * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.Item} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Update update(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.Item content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Update result = new Update(itemId, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Update extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v1_1.model.Item> {

      private static final String REST_PATH = "chromewebstore/v1.1/items/{itemId}";

      /**
       * Updates an existing item.
       *
       * Create a request for the method "items.update".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param itemId The ID of the item to upload.
       * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.Item}
       * @since 1.13
       */
      protected Update(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.Item content) {
        super(Chromewebstore.this, "PUT", REST_PATH, content, com.google.api.services.chromewebstore.v1_1.model.Item.class);
        this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
      }

      /**
       * Updates an existing item.
       *
       * Create a request for the method "items.update".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param itemId The ID of the item to upload.
       * @param content the {@link com.google.api.services.chromewebstore.v1_1.model.Item} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content.
       * @since 1.13
       */
      protected Update(java.lang.String itemId, com.google.api.services.chromewebstore.v1_1.model.Item content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Chromewebstore.this, "PUT", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.chromewebstore.v1_1.model.Item.class);
        this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
        com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the item to upload. */
      @com.google.api.client.util.Key
      private java.lang.String itemId;

      /** The ID of the item to upload.
       */
      public java.lang.String getItemId() {
        return itemId;
      }

      /** The ID of the item to upload. */
      public Update setItemId(java.lang.String itemId) {
        this.itemId = itemId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Chromewebstore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Chromewebstore}. */
    @Override
    public Chromewebstore build() {
      return new Chromewebstore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ChromewebstoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setChromewebstoreRequestInitializer(
        ChromewebstoreRequestInitializer chromewebstoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(chromewebstoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
