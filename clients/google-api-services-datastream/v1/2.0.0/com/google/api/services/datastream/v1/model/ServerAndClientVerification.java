/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * Message represents the option where Datastream will enforce the encryption and authenticate the
 * server identity as well as the client identity. ca_certificate, client_certificate and client_key
 * must be set if user selects this option.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ServerAndClientVerification extends com.google.api.client.json.GenericJson {

  /**
   * Required. Input only. PEM-encoded server root CA certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String caCertificate;

  /**
   * Required. Input only. PEM-encoded certificate used by the source database to authenticate the
   * client identity (i.e., the Datastream's identity). This certificate is signed by either a root
   * certificate trusted by the server or one or more intermediate certificates (which is stored
   * with the leaf certificate) to link the this certificate to the trusted root certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientCertificate;

  /**
   * Optional. Input only. PEM-encoded private key associated with the client certificate. This
   * value will be used during the SSL/TLS handshake, allowing the PostgreSQL server to authenticate
   * the client's identity, i.e. identity of the Datastream. Mutually exclusive with the
   * `secret_manager_stored_client_key` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientKey;

  /**
   * Required. Input only. PEM-encoded server root CA certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCaCertificate() {
    return caCertificate;
  }

  /**
   * Required. Input only. PEM-encoded server root CA certificate.
   * @param caCertificate caCertificate or {@code null} for none
   */
  public ServerAndClientVerification setCaCertificate(java.lang.String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * Required. Input only. PEM-encoded certificate used by the source database to authenticate the
   * client identity (i.e., the Datastream's identity). This certificate is signed by either a root
   * certificate trusted by the server or one or more intermediate certificates (which is stored
   * with the leaf certificate) to link the this certificate to the trusted root certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientCertificate() {
    return clientCertificate;
  }

  /**
   * Required. Input only. PEM-encoded certificate used by the source database to authenticate the
   * client identity (i.e., the Datastream's identity). This certificate is signed by either a root
   * certificate trusted by the server or one or more intermediate certificates (which is stored
   * with the leaf certificate) to link the this certificate to the trusted root certificate.
   * @param clientCertificate clientCertificate or {@code null} for none
   */
  public ServerAndClientVerification setClientCertificate(java.lang.String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * Optional. Input only. PEM-encoded private key associated with the client certificate. This
   * value will be used during the SSL/TLS handshake, allowing the PostgreSQL server to authenticate
   * the client's identity, i.e. identity of the Datastream. Mutually exclusive with the
   * `secret_manager_stored_client_key` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientKey() {
    return clientKey;
  }

  /**
   * Optional. Input only. PEM-encoded private key associated with the client certificate. This
   * value will be used during the SSL/TLS handshake, allowing the PostgreSQL server to authenticate
   * the client's identity, i.e. identity of the Datastream. Mutually exclusive with the
   * `secret_manager_stored_client_key` field.
   * @param clientKey clientKey or {@code null} for none
   */
  public ServerAndClientVerification setClientKey(java.lang.String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  @Override
  public ServerAndClientVerification set(String fieldName, Object value) {
    return (ServerAndClientVerification) super.set(fieldName, value);
  }

  @Override
  public ServerAndClientVerification clone() {
    return (ServerAndClientVerification) super.clone();
  }

}
