/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Maintenance window as defined by Oracle. https://docs.oracle.com/en-
 * us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MaintenanceWindow extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Determines the amount of time the system will wait before the start of each database
   * server patching operation. Custom action timeout is in minutes and valid value is between 15 to
   * 120 (inclusive).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer customActionTimeoutMins;

  /**
   * Optional. Days during the week when maintenance should be performed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> daysOfWeek;

  /**
   * Optional. The window of hours during the day when maintenance should be performed. The window
   * is a 4 hour slot. Valid values are: 0 - represents time slot 0:00 - 3:59 UTC 4 - represents
   * time slot 4:00 - 7:59 UTC 8 - represents time slot 8:00 - 11:59 UTC 12 - represents time slot
   * 12:00 - 15:59 UTC 16 - represents time slot 16:00 - 19:59 UTC 20 - represents time slot 20:00 -
   * 23:59 UTC
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> hoursOfDay;

  /**
   * Optional. If true, enables the configuration of a custom action timeout (waiting period)
   * between database server patching operations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isCustomActionTimeoutEnabled;

  /**
   * Optional. Lead time window allows user to set a lead time to prepare for a down time. The lead
   * time is in weeks and valid value is between 1 to 4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer leadTimeWeek;

  /**
   * Optional. Months during the year when maintenance should be performed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> months;

  /**
   * Optional. Cloud CloudExadataInfrastructure node patching method, either "ROLLING" or
   * "NONROLLING". Default value is ROLLING.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String patchingMode;

  /**
   * Optional. The maintenance window scheduling preference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String preference;

  /**
   * Optional. Weeks during the month when maintenance should be performed. Weeks start on the 1st,
   * 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based
   * on calendar dates, not days of the week.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> weeksOfMonth;

  /**
   * Optional. Determines the amount of time the system will wait before the start of each database
   * server patching operation. Custom action timeout is in minutes and valid value is between 15 to
   * 120 (inclusive).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCustomActionTimeoutMins() {
    return customActionTimeoutMins;
  }

  /**
   * Optional. Determines the amount of time the system will wait before the start of each database
   * server patching operation. Custom action timeout is in minutes and valid value is between 15 to
   * 120 (inclusive).
   * @param customActionTimeoutMins customActionTimeoutMins or {@code null} for none
   */
  public MaintenanceWindow setCustomActionTimeoutMins(java.lang.Integer customActionTimeoutMins) {
    this.customActionTimeoutMins = customActionTimeoutMins;
    return this;
  }

  /**
   * Optional. Days during the week when maintenance should be performed.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDaysOfWeek() {
    return daysOfWeek;
  }

  /**
   * Optional. Days during the week when maintenance should be performed.
   * @param daysOfWeek daysOfWeek or {@code null} for none
   */
  public MaintenanceWindow setDaysOfWeek(java.util.List<java.lang.String> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  /**
   * Optional. The window of hours during the day when maintenance should be performed. The window
   * is a 4 hour slot. Valid values are: 0 - represents time slot 0:00 - 3:59 UTC 4 - represents
   * time slot 4:00 - 7:59 UTC 8 - represents time slot 8:00 - 11:59 UTC 12 - represents time slot
   * 12:00 - 15:59 UTC 16 - represents time slot 16:00 - 19:59 UTC 20 - represents time slot 20:00 -
   * 23:59 UTC
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getHoursOfDay() {
    return hoursOfDay;
  }

  /**
   * Optional. The window of hours during the day when maintenance should be performed. The window
   * is a 4 hour slot. Valid values are: 0 - represents time slot 0:00 - 3:59 UTC 4 - represents
   * time slot 4:00 - 7:59 UTC 8 - represents time slot 8:00 - 11:59 UTC 12 - represents time slot
   * 12:00 - 15:59 UTC 16 - represents time slot 16:00 - 19:59 UTC 20 - represents time slot 20:00 -
   * 23:59 UTC
   * @param hoursOfDay hoursOfDay or {@code null} for none
   */
  public MaintenanceWindow setHoursOfDay(java.util.List<java.lang.Integer> hoursOfDay) {
    this.hoursOfDay = hoursOfDay;
    return this;
  }

  /**
   * Optional. If true, enables the configuration of a custom action timeout (waiting period)
   * between database server patching operations.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsCustomActionTimeoutEnabled() {
    return isCustomActionTimeoutEnabled;
  }

  /**
   * Optional. If true, enables the configuration of a custom action timeout (waiting period)
   * between database server patching operations.
   * @param isCustomActionTimeoutEnabled isCustomActionTimeoutEnabled or {@code null} for none
   */
  public MaintenanceWindow setIsCustomActionTimeoutEnabled(java.lang.Boolean isCustomActionTimeoutEnabled) {
    this.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
    return this;
  }

  /**
   * Optional. Lead time window allows user to set a lead time to prepare for a down time. The lead
   * time is in weeks and valid value is between 1 to 4.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLeadTimeWeek() {
    return leadTimeWeek;
  }

  /**
   * Optional. Lead time window allows user to set a lead time to prepare for a down time. The lead
   * time is in weeks and valid value is between 1 to 4.
   * @param leadTimeWeek leadTimeWeek or {@code null} for none
   */
  public MaintenanceWindow setLeadTimeWeek(java.lang.Integer leadTimeWeek) {
    this.leadTimeWeek = leadTimeWeek;
    return this;
  }

  /**
   * Optional. Months during the year when maintenance should be performed.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMonths() {
    return months;
  }

  /**
   * Optional. Months during the year when maintenance should be performed.
   * @param months months or {@code null} for none
   */
  public MaintenanceWindow setMonths(java.util.List<java.lang.String> months) {
    this.months = months;
    return this;
  }

  /**
   * Optional. Cloud CloudExadataInfrastructure node patching method, either "ROLLING" or
   * "NONROLLING". Default value is ROLLING.
   * @return value or {@code null} for none
   */
  public java.lang.String getPatchingMode() {
    return patchingMode;
  }

  /**
   * Optional. Cloud CloudExadataInfrastructure node patching method, either "ROLLING" or
   * "NONROLLING". Default value is ROLLING.
   * @param patchingMode patchingMode or {@code null} for none
   */
  public MaintenanceWindow setPatchingMode(java.lang.String patchingMode) {
    this.patchingMode = patchingMode;
    return this;
  }

  /**
   * Optional. The maintenance window scheduling preference.
   * @return value or {@code null} for none
   */
  public java.lang.String getPreference() {
    return preference;
  }

  /**
   * Optional. The maintenance window scheduling preference.
   * @param preference preference or {@code null} for none
   */
  public MaintenanceWindow setPreference(java.lang.String preference) {
    this.preference = preference;
    return this;
  }

  /**
   * Optional. Weeks during the month when maintenance should be performed. Weeks start on the 1st,
   * 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based
   * on calendar dates, not days of the week.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getWeeksOfMonth() {
    return weeksOfMonth;
  }

  /**
   * Optional. Weeks during the month when maintenance should be performed. Weeks start on the 1st,
   * 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based
   * on calendar dates, not days of the week.
   * @param weeksOfMonth weeksOfMonth or {@code null} for none
   */
  public MaintenanceWindow setWeeksOfMonth(java.util.List<java.lang.Integer> weeksOfMonth) {
    this.weeksOfMonth = weeksOfMonth;
    return this;
  }

  @Override
  public MaintenanceWindow set(String fieldName, Object value) {
    return (MaintenanceWindow) super.set(fieldName, value);
  }

  @Override
  public MaintenanceWindow clone() {
    return (MaintenanceWindow) super.clone();
  }

}
