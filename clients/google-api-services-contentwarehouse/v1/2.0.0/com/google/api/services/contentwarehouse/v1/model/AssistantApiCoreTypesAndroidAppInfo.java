/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The android app information of the provider. Like, Spotify. Next ID: 16 LINT.IfChange
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCoreTypesAndroidAppInfo extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String accountType;

  /**
   * Intent associated with the app. We include intents here as different versions of the same app
   * may support different intents. In those cases, the package_name is not enough to identify the
   * app and we should use the combination of package_name and android_intent. This field might
   * contain sensitive data, if represents ClientOp with encapsulated PII such as user query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String androidIntent;

  /**
   * Store the app unique id endpoint. This will be passed over to app to fulfill the action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appUniqueId;

  /**
   * The android app version. Deprecated because
   * https://developer.android.com/reference/android/content/pm/PackageInfo.html#getLongVersionCode
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer appVersion;

  /**
   * data_mimetype and account_type are the what AGSA uses to filter which contacts support this
   * Android app in ContactProvider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataMimetype;

  /**
   * If true, client should broadcast the intent instead of open the intent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isBroadcastIntent;

  /**
   * App is the default app for it's core functionality. For example, it will be true for Android
   * messages if it is the default app to send and receive SMS on the phone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDefault;

  /**
   * The localized app name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String localizedAppName;

  /**
   * The long android app version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long longVersionCode;

  /**
   * Store mimetype of this endpoint. We will use this as the differentiator for Assistant to know
   * whether to use the RawContact for messaging, call or video call. For example, send message
   * mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.profile" voice call mimetype
   * for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.voip.call"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mimetype;

  /**
   * The android app package of the provider, like "com.spotify.music".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageName;

  /**
   * The OemProviderType is specific for OEM system Android apps. For example, in Auto Embedded, the
   * OEM will have a system Radio/Media app. The system appâ€™s capabilities/core functionalities are
   * captured here. For physical media sources, the OEM may decide to implement one media app (thus,
   * one package name) that handles multiple physical media sources. For these cases, each physical
   * media source will be sent as different providers even though the package name is the same.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerType;

  /**
   * Id of the app's Android shortcut to be launched by Assistant. The client is expected to use the
   * Android LauncherApps API to execute this shortcut which in turn will open the app. For example,
   * Whatsapp may create an Android shortcut for a frequently messaged contact with an id
   * "contact_123". This field will contain that id and the client can execute it to open up the
   * chat with that particular contact. If this field is set, the package_name field must also be
   * set since both will be used by the LauncherApps API for execution. If this field is set, the
   * intent related fields will be ignored and not used as a fallback. Design: go/shortcut-id-in-
   * provider-open-clientop This field should only be set for devices with Android API level >= 25
   * (since that is the version from which the LauncherApps startShortcut API is available)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shortcutId;

  /**
   * The fully qualified target class name of the provider, like
   * "com.example.myapp.GetOrderService".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetClass;

  /**
   * The android app version name, like "4.1.091.05.40d", "11.2.7.21.alpha". Android Docs:
   * https://developer.android.com/reference/android/content/pm/PackageInfo#versionName
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String versionName;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAccountType() {
    return accountType;
  }

  /**
   * @param accountType accountType or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setAccountType(java.lang.String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Intent associated with the app. We include intents here as different versions of the same app
   * may support different intents. In those cases, the package_name is not enough to identify the
   * app and we should use the combination of package_name and android_intent. This field might
   * contain sensitive data, if represents ClientOp with encapsulated PII such as user query.
   * @return value or {@code null} for none
   */
  public java.lang.String getAndroidIntent() {
    return androidIntent;
  }

  /**
   * Intent associated with the app. We include intents here as different versions of the same app
   * may support different intents. In those cases, the package_name is not enough to identify the
   * app and we should use the combination of package_name and android_intent. This field might
   * contain sensitive data, if represents ClientOp with encapsulated PII such as user query.
   * @param androidIntent androidIntent or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setAndroidIntent(java.lang.String androidIntent) {
    this.androidIntent = androidIntent;
    return this;
  }

  /**
   * Store the app unique id endpoint. This will be passed over to app to fulfill the action.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppUniqueId() {
    return appUniqueId;
  }

  /**
   * Store the app unique id endpoint. This will be passed over to app to fulfill the action.
   * @param appUniqueId appUniqueId or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setAppUniqueId(java.lang.String appUniqueId) {
    this.appUniqueId = appUniqueId;
    return this;
  }

  /**
   * The android app version. Deprecated because
   * https://developer.android.com/reference/android/content/pm/PackageInfo.html#getLongVersionCode
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAppVersion() {
    return appVersion;
  }

  /**
   * The android app version. Deprecated because
   * https://developer.android.com/reference/android/content/pm/PackageInfo.html#getLongVersionCode
   * @param appVersion appVersion or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setAppVersion(java.lang.Integer appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * data_mimetype and account_type are the what AGSA uses to filter which contacts support this
   * Android app in ContactProvider.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataMimetype() {
    return dataMimetype;
  }

  /**
   * data_mimetype and account_type are the what AGSA uses to filter which contacts support this
   * Android app in ContactProvider.
   * @param dataMimetype dataMimetype or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setDataMimetype(java.lang.String dataMimetype) {
    this.dataMimetype = dataMimetype;
    return this;
  }

  /**
   * If true, client should broadcast the intent instead of open the intent.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsBroadcastIntent() {
    return isBroadcastIntent;
  }

  /**
   * If true, client should broadcast the intent instead of open the intent.
   * @param isBroadcastIntent isBroadcastIntent or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setIsBroadcastIntent(java.lang.Boolean isBroadcastIntent) {
    this.isBroadcastIntent = isBroadcastIntent;
    return this;
  }

  /**
   * App is the default app for it's core functionality. For example, it will be true for Android
   * messages if it is the default app to send and receive SMS on the phone.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDefault() {
    return isDefault;
  }

  /**
   * App is the default app for it's core functionality. For example, it will be true for Android
   * messages if it is the default app to send and receive SMS on the phone.
   * @param isDefault isDefault or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setIsDefault(java.lang.Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * The localized app name.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocalizedAppName() {
    return localizedAppName;
  }

  /**
   * The localized app name.
   * @param localizedAppName localizedAppName or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setLocalizedAppName(java.lang.String localizedAppName) {
    this.localizedAppName = localizedAppName;
    return this;
  }

  /**
   * The long android app version.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLongVersionCode() {
    return longVersionCode;
  }

  /**
   * The long android app version.
   * @param longVersionCode longVersionCode or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setLongVersionCode(java.lang.Long longVersionCode) {
    this.longVersionCode = longVersionCode;
    return this;
  }

  /**
   * Store mimetype of this endpoint. We will use this as the differentiator for Assistant to know
   * whether to use the RawContact for messaging, call or video call. For example, send message
   * mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.profile" voice call mimetype
   * for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.voip.call"
   * @return value or {@code null} for none
   */
  public java.lang.String getMimetype() {
    return mimetype;
  }

  /**
   * Store mimetype of this endpoint. We will use this as the differentiator for Assistant to know
   * whether to use the RawContact for messaging, call or video call. For example, send message
   * mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.profile" voice call mimetype
   * for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.voip.call"
   * @param mimetype mimetype or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setMimetype(java.lang.String mimetype) {
    this.mimetype = mimetype;
    return this;
  }

  /**
   * The android app package of the provider, like "com.spotify.music".
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * The android app package of the provider, like "com.spotify.music".
   * @param packageName packageName or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setPackageName(java.lang.String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * The OemProviderType is specific for OEM system Android apps. For example, in Auto Embedded, the
   * OEM will have a system Radio/Media app. The system appâ€™s capabilities/core functionalities are
   * captured here. For physical media sources, the OEM may decide to implement one media app (thus,
   * one package name) that handles multiple physical media sources. For these cases, each physical
   * media source will be sent as different providers even though the package name is the same.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderType() {
    return providerType;
  }

  /**
   * The OemProviderType is specific for OEM system Android apps. For example, in Auto Embedded, the
   * OEM will have a system Radio/Media app. The system appâ€™s capabilities/core functionalities are
   * captured here. For physical media sources, the OEM may decide to implement one media app (thus,
   * one package name) that handles multiple physical media sources. For these cases, each physical
   * media source will be sent as different providers even though the package name is the same.
   * @param providerType providerType or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setProviderType(java.lang.String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Id of the app's Android shortcut to be launched by Assistant. The client is expected to use the
   * Android LauncherApps API to execute this shortcut which in turn will open the app. For example,
   * Whatsapp may create an Android shortcut for a frequently messaged contact with an id
   * "contact_123". This field will contain that id and the client can execute it to open up the
   * chat with that particular contact. If this field is set, the package_name field must also be
   * set since both will be used by the LauncherApps API for execution. If this field is set, the
   * intent related fields will be ignored and not used as a fallback. Design: go/shortcut-id-in-
   * provider-open-clientop This field should only be set for devices with Android API level >= 25
   * (since that is the version from which the LauncherApps startShortcut API is available)
   * @return value or {@code null} for none
   */
  public java.lang.String getShortcutId() {
    return shortcutId;
  }

  /**
   * Id of the app's Android shortcut to be launched by Assistant. The client is expected to use the
   * Android LauncherApps API to execute this shortcut which in turn will open the app. For example,
   * Whatsapp may create an Android shortcut for a frequently messaged contact with an id
   * "contact_123". This field will contain that id and the client can execute it to open up the
   * chat with that particular contact. If this field is set, the package_name field must also be
   * set since both will be used by the LauncherApps API for execution. If this field is set, the
   * intent related fields will be ignored and not used as a fallback. Design: go/shortcut-id-in-
   * provider-open-clientop This field should only be set for devices with Android API level >= 25
   * (since that is the version from which the LauncherApps startShortcut API is available)
   * @param shortcutId shortcutId or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setShortcutId(java.lang.String shortcutId) {
    this.shortcutId = shortcutId;
    return this;
  }

  /**
   * The fully qualified target class name of the provider, like
   * "com.example.myapp.GetOrderService".
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetClass() {
    return targetClass;
  }

  /**
   * The fully qualified target class name of the provider, like
   * "com.example.myapp.GetOrderService".
   * @param targetClass targetClass or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setTargetClass(java.lang.String targetClass) {
    this.targetClass = targetClass;
    return this;
  }

  /**
   * The android app version name, like "4.1.091.05.40d", "11.2.7.21.alpha". Android Docs:
   * https://developer.android.com/reference/android/content/pm/PackageInfo#versionName
   * @return value or {@code null} for none
   */
  public java.lang.String getVersionName() {
    return versionName;
  }

  /**
   * The android app version name, like "4.1.091.05.40d", "11.2.7.21.alpha". Android Docs:
   * https://developer.android.com/reference/android/content/pm/PackageInfo#versionName
   * @param versionName versionName or {@code null} for none
   */
  public AssistantApiCoreTypesAndroidAppInfo setVersionName(java.lang.String versionName) {
    this.versionName = versionName;
    return this;
  }

  @Override
  public AssistantApiCoreTypesAndroidAppInfo set(String fieldName, Object value) {
    return (AssistantApiCoreTypesAndroidAppInfo) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCoreTypesAndroidAppInfo clone() {
    return (AssistantApiCoreTypesAndroidAppInfo) super.clone();
  }

}
