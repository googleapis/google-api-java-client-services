/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.saasservicemgmt.v1beta1.model;

/**
 * A unit of deployment that has its lifecycle via a CRUD API using an actuation engine under the
 * hood (e.g. based on Terraform, Helm or a custom implementation provided by a service producer). A
 * building block of a SaaS Tenant.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the SaaS Service Management API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Unit extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitCondition> conditions;

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Output only. Set of dependencies for this unit. Maximum 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitDependency> dependencies;

  /**
   * Optional. Output only. List of Units that depend on this unit. Unit can only be deprovisioned
   * if this list is empty. Maximum 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitDependency> dependents;

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. Output only. Indicates the current input variables deployed by the unit
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitVariable> inputVariables;

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Optional. Captures requested directives for performing future maintenance on the unit. This
   * includes a request for the unit to skip maintenance for a period of time and remain pinned to
   * its current release as well as controls for postponing maintenance scheduled in future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MaintenanceSettings maintenance;

  /**
   * Optional. Immutable. Indicates whether the Unit life cycle is controlled by the user or by the
   * system. Immutable once created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String managementMode;

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/units/{unit}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Output only. List of concurrent UnitOperations that are operating on this Unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> ongoingOperations;

  /**
   * Optional. Output only. Set of key/value pairs corresponding to output variables from execution
   * of actuation templates. The variables are declared in actuation configs (e.g in helm chart or
   * terraform) and the values are fetched and returned by the actuation engine upon completion of
   * execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitVariable> outputVariables;

  /**
   * Optional. Output only. List of pending (wait to be executed) UnitOperations for this unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> pendingOperations;

  /**
   * Optional. Output only. The current Release object for this Unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String release;

  /**
   * Optional. Output only. List of scheduled UnitOperations for this unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scheduledOperations;

  /**
   * Optional. Output only. Current lifecycle state of the resource (e.g. if it's being created or
   * ready to use).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Optional. Output only. If set, indicates the time when the system will start removing the unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String systemCleanupAt;

  /**
   * Optional. Output only. Indicates the system managed state of the unit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String systemManagedState;

  /**
   * Optional. Reference to the Saas Tenant resource this unit belongs to. This for example informs
   * the maintenance policies to use for scheduling future updates on a unit. (optional and
   * immutable once created)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tenant;

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Optional. Reference to the UnitKind this Unit belongs to. Immutable once set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unitKind;

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @param annotations annotations or {@code null} for none
   */
  public Unit setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * @return value or {@code null} for none
   */
  public java.util.List<UnitCondition> getConditions() {
    return conditions;
  }

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * @param conditions conditions or {@code null} for none
   */
  public Unit setConditions(java.util.List<UnitCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public Unit setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Output only. Set of dependencies for this unit. Maximum 10.
   * @return value or {@code null} for none
   */
  public java.util.List<UnitDependency> getDependencies() {
    return dependencies;
  }

  /**
   * Optional. Output only. Set of dependencies for this unit. Maximum 10.
   * @param dependencies dependencies or {@code null} for none
   */
  public Unit setDependencies(java.util.List<UnitDependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  /**
   * Optional. Output only. List of Units that depend on this unit. Unit can only be deprovisioned
   * if this list is empty. Maximum 1000.
   * @return value or {@code null} for none
   */
  public java.util.List<UnitDependency> getDependents() {
    return dependents;
  }

  /**
   * Optional. Output only. List of Units that depend on this unit. Unit can only be deprovisioned
   * if this list is empty. Maximum 1000.
   * @param dependents dependents or {@code null} for none
   */
  public Unit setDependents(java.util.List<UnitDependency> dependents) {
    this.dependents = dependents;
    return this;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @param etag etag or {@code null} for none
   */
  public Unit setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Output only. Indicates the current input variables deployed by the unit
   * @return value or {@code null} for none
   */
  public java.util.List<UnitVariable> getInputVariables() {
    return inputVariables;
  }

  /**
   * Optional. Output only. Indicates the current input variables deployed by the unit
   * @param inputVariables inputVariables or {@code null} for none
   */
  public Unit setInputVariables(java.util.List<UnitVariable> inputVariables) {
    this.inputVariables = inputVariables;
    return this;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @param labels labels or {@code null} for none
   */
  public Unit setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Optional. Captures requested directives for performing future maintenance on the unit. This
   * includes a request for the unit to skip maintenance for a period of time and remain pinned to
   * its current release as well as controls for postponing maintenance scheduled in future.
   * @return value or {@code null} for none
   */
  public MaintenanceSettings getMaintenance() {
    return maintenance;
  }

  /**
   * Optional. Captures requested directives for performing future maintenance on the unit. This
   * includes a request for the unit to skip maintenance for a period of time and remain pinned to
   * its current release as well as controls for postponing maintenance scheduled in future.
   * @param maintenance maintenance or {@code null} for none
   */
  public Unit setMaintenance(MaintenanceSettings maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Optional. Immutable. Indicates whether the Unit life cycle is controlled by the user or by the
   * system. Immutable once created.
   * @return value or {@code null} for none
   */
  public java.lang.String getManagementMode() {
    return managementMode;
  }

  /**
   * Optional. Immutable. Indicates whether the Unit life cycle is controlled by the user or by the
   * system. Immutable once created.
   * @param managementMode managementMode or {@code null} for none
   */
  public Unit setManagementMode(java.lang.String managementMode) {
    this.managementMode = managementMode;
    return this;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/units/{unit}"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/units/{unit}"
   * @param name name or {@code null} for none
   */
  public Unit setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Output only. List of concurrent UnitOperations that are operating on this Unit.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOngoingOperations() {
    return ongoingOperations;
  }

  /**
   * Optional. Output only. List of concurrent UnitOperations that are operating on this Unit.
   * @param ongoingOperations ongoingOperations or {@code null} for none
   */
  public Unit setOngoingOperations(java.util.List<java.lang.String> ongoingOperations) {
    this.ongoingOperations = ongoingOperations;
    return this;
  }

  /**
   * Optional. Output only. Set of key/value pairs corresponding to output variables from execution
   * of actuation templates. The variables are declared in actuation configs (e.g in helm chart or
   * terraform) and the values are fetched and returned by the actuation engine upon completion of
   * execution.
   * @return value or {@code null} for none
   */
  public java.util.List<UnitVariable> getOutputVariables() {
    return outputVariables;
  }

  /**
   * Optional. Output only. Set of key/value pairs corresponding to output variables from execution
   * of actuation templates. The variables are declared in actuation configs (e.g in helm chart or
   * terraform) and the values are fetched and returned by the actuation engine upon completion of
   * execution.
   * @param outputVariables outputVariables or {@code null} for none
   */
  public Unit setOutputVariables(java.util.List<UnitVariable> outputVariables) {
    this.outputVariables = outputVariables;
    return this;
  }

  /**
   * Optional. Output only. List of pending (wait to be executed) UnitOperations for this unit.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPendingOperations() {
    return pendingOperations;
  }

  /**
   * Optional. Output only. List of pending (wait to be executed) UnitOperations for this unit.
   * @param pendingOperations pendingOperations or {@code null} for none
   */
  public Unit setPendingOperations(java.util.List<java.lang.String> pendingOperations) {
    this.pendingOperations = pendingOperations;
    return this;
  }

  /**
   * Optional. Output only. The current Release object for this Unit.
   * @return value or {@code null} for none
   */
  public java.lang.String getRelease() {
    return release;
  }

  /**
   * Optional. Output only. The current Release object for this Unit.
   * @param release release or {@code null} for none
   */
  public Unit setRelease(java.lang.String release) {
    this.release = release;
    return this;
  }

  /**
   * Optional. Output only. List of scheduled UnitOperations for this unit.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScheduledOperations() {
    return scheduledOperations;
  }

  /**
   * Optional. Output only. List of scheduled UnitOperations for this unit.
   * @param scheduledOperations scheduledOperations or {@code null} for none
   */
  public Unit setScheduledOperations(java.util.List<java.lang.String> scheduledOperations) {
    this.scheduledOperations = scheduledOperations;
    return this;
  }

  /**
   * Optional. Output only. Current lifecycle state of the resource (e.g. if it's being created or
   * ready to use).
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Optional. Output only. Current lifecycle state of the resource (e.g. if it's being created or
   * ready to use).
   * @param state state or {@code null} for none
   */
  public Unit setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Optional. Output only. If set, indicates the time when the system will start removing the unit.
   * @return value or {@code null} for none
   */
  public String getSystemCleanupAt() {
    return systemCleanupAt;
  }

  /**
   * Optional. Output only. If set, indicates the time when the system will start removing the unit.
   * @param systemCleanupAt systemCleanupAt or {@code null} for none
   */
  public Unit setSystemCleanupAt(String systemCleanupAt) {
    this.systemCleanupAt = systemCleanupAt;
    return this;
  }

  /**
   * Optional. Output only. Indicates the system managed state of the unit.
   * @return value or {@code null} for none
   */
  public java.lang.String getSystemManagedState() {
    return systemManagedState;
  }

  /**
   * Optional. Output only. Indicates the system managed state of the unit.
   * @param systemManagedState systemManagedState or {@code null} for none
   */
  public Unit setSystemManagedState(java.lang.String systemManagedState) {
    this.systemManagedState = systemManagedState;
    return this;
  }

  /**
   * Optional. Reference to the Saas Tenant resource this unit belongs to. This for example informs
   * the maintenance policies to use for scheduling future updates on a unit. (optional and
   * immutable once created)
   * @return value or {@code null} for none
   */
  public java.lang.String getTenant() {
    return tenant;
  }

  /**
   * Optional. Reference to the Saas Tenant resource this unit belongs to. This for example informs
   * the maintenance policies to use for scheduling future updates on a unit. (optional and
   * immutable once created)
   * @param tenant tenant or {@code null} for none
   */
  public Unit setTenant(java.lang.String tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @param uid uid or {@code null} for none
   */
  public Unit setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Optional. Reference to the UnitKind this Unit belongs to. Immutable once set.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnitKind() {
    return unitKind;
  }

  /**
   * Optional. Reference to the UnitKind this Unit belongs to. Immutable once set.
   * @param unitKind unitKind or {@code null} for none
   */
  public Unit setUnitKind(java.lang.String unitKind) {
    this.unitKind = unitKind;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @param updateTime updateTime or {@code null} for none
   */
  public Unit setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Unit set(String fieldName, Object value) {
    return (Unit) super.set(fieldName, value);
  }

  @Override
  public Unit clone() {
    return (Unit) super.clone();
  }

}
