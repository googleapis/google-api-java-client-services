/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * A partition event record describes key range changes for a change stream partition. The changes
 * to a row defined by its primary key can be captured in one change stream partition for a specific
 * time range, and then be captured in a different change stream partition for a different time
 * range. This movement of key ranges across change stream partitions is a reflection of activities,
 * such as Spanner's dynamic splitting and load balancing, etc. Processing this event is needed if
 * users want to guarantee processing of the changes for any key in timestamp order. If time ordered
 * processing of changes for a primary key is not needed, this event can be ignored. To guarantee
 * time ordered processing for each primary key, if the event describes move-ins, the reader of this
 * partition needs to wait until the readers of the source partitions have processed all records
 * with timestamps <= this PartitionEventRecord.commit_timestamp, before advancing beyond this
 * PartitionEventRecord. If the event describes move-outs, the reader can notify the readers of the
 * destination partitions that they can continue processing.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PartitionEventRecord extends com.google.api.client.json.GenericJson {

  /**
   * Indicates the commit timestamp at which the key range change occurred.
   * DataChangeRecord.commit_timestamps, PartitionStartRecord.start_timestamps,
   * PartitionEventRecord.commit_timestamps, and PartitionEndRecord.end_timestamps can have the same
   * value in the same partition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String commitTimestamp;

  /**
   * Set when one or more key ranges are moved into the change stream partition identified by
   * partition_token. Example: Two key ranges are moved into partition (P1) from partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_in_events { source_partition_token: "P2" } move_in_events { source_partition_token: "P3" }
   * } The PartitionEventRecord returned in P2 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P2" move_out_events { destination_partition_token: "P1" }
   * } The PartitionEventRecord returned in P3 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P3" move_out_events { destination_partition_token: "P1" }
   * }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MoveInEvent> moveInEvents;

  static {
    // hack to force ProGuard to consider MoveInEvent used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MoveInEvent.class);
  }

  /**
   * Set when one or more key ranges are moved out of the change stream partition identified by
   * partition_token. Example: Two key ranges are moved out of partition (P1) to partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_out_events { destination_partition_token: "P2" } move_out_events {
   * destination_partition_token: "P3" } } The PartitionEventRecord returned in P2 will reflect the
   * move as: PartitionEventRecord { commit_timestamp: T partition_token: "P2" move_in_events {
   * source_partition_token: "P1" } } The PartitionEventRecord returned in P3 will reflect the move
   * as: PartitionEventRecord { commit_timestamp: T partition_token: "P3" move_in_events {
   * source_partition_token: "P1" } }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MoveOutEvent> moveOutEvents;

  static {
    // hack to force ProGuard to consider MoveOutEvent used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MoveOutEvent.class);
  }

  /**
   * Unique partition identifier describing the partition this event occurred on. partition_token is
   * equal to the partition token of the change stream partition currently queried to return this
   * PartitionEventRecord.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String partitionToken;

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordSequence;

  /**
   * Indicates the commit timestamp at which the key range change occurred.
   * DataChangeRecord.commit_timestamps, PartitionStartRecord.start_timestamps,
   * PartitionEventRecord.commit_timestamps, and PartitionEndRecord.end_timestamps can have the same
   * value in the same partition.
   * @return value or {@code null} for none
   */
  public String getCommitTimestamp() {
    return commitTimestamp;
  }

  /**
   * Indicates the commit timestamp at which the key range change occurred.
   * DataChangeRecord.commit_timestamps, PartitionStartRecord.start_timestamps,
   * PartitionEventRecord.commit_timestamps, and PartitionEndRecord.end_timestamps can have the same
   * value in the same partition.
   * @param commitTimestamp commitTimestamp or {@code null} for none
   */
  public PartitionEventRecord setCommitTimestamp(String commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
    return this;
  }

  /**
   * Set when one or more key ranges are moved into the change stream partition identified by
   * partition_token. Example: Two key ranges are moved into partition (P1) from partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_in_events { source_partition_token: "P2" } move_in_events { source_partition_token: "P3" }
   * } The PartitionEventRecord returned in P2 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P2" move_out_events { destination_partition_token: "P1" }
   * } The PartitionEventRecord returned in P3 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P3" move_out_events { destination_partition_token: "P1" }
   * }
   * @return value or {@code null} for none
   */
  public java.util.List<MoveInEvent> getMoveInEvents() {
    return moveInEvents;
  }

  /**
   * Set when one or more key ranges are moved into the change stream partition identified by
   * partition_token. Example: Two key ranges are moved into partition (P1) from partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_in_events { source_partition_token: "P2" } move_in_events { source_partition_token: "P3" }
   * } The PartitionEventRecord returned in P2 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P2" move_out_events { destination_partition_token: "P1" }
   * } The PartitionEventRecord returned in P3 will reflect the move as: PartitionEventRecord {
   * commit_timestamp: T partition_token: "P3" move_out_events { destination_partition_token: "P1" }
   * }
   * @param moveInEvents moveInEvents or {@code null} for none
   */
  public PartitionEventRecord setMoveInEvents(java.util.List<MoveInEvent> moveInEvents) {
    this.moveInEvents = moveInEvents;
    return this;
  }

  /**
   * Set when one or more key ranges are moved out of the change stream partition identified by
   * partition_token. Example: Two key ranges are moved out of partition (P1) to partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_out_events { destination_partition_token: "P2" } move_out_events {
   * destination_partition_token: "P3" } } The PartitionEventRecord returned in P2 will reflect the
   * move as: PartitionEventRecord { commit_timestamp: T partition_token: "P2" move_in_events {
   * source_partition_token: "P1" } } The PartitionEventRecord returned in P3 will reflect the move
   * as: PartitionEventRecord { commit_timestamp: T partition_token: "P3" move_in_events {
   * source_partition_token: "P1" } }
   * @return value or {@code null} for none
   */
  public java.util.List<MoveOutEvent> getMoveOutEvents() {
    return moveOutEvents;
  }

  /**
   * Set when one or more key ranges are moved out of the change stream partition identified by
   * partition_token. Example: Two key ranges are moved out of partition (P1) to partition (P2) and
   * partition (P3) in a single transaction at timestamp T. The PartitionEventRecord returned in P1
   * will reflect the move as: PartitionEventRecord { commit_timestamp: T partition_token: "P1"
   * move_out_events { destination_partition_token: "P2" } move_out_events {
   * destination_partition_token: "P3" } } The PartitionEventRecord returned in P2 will reflect the
   * move as: PartitionEventRecord { commit_timestamp: T partition_token: "P2" move_in_events {
   * source_partition_token: "P1" } } The PartitionEventRecord returned in P3 will reflect the move
   * as: PartitionEventRecord { commit_timestamp: T partition_token: "P3" move_in_events {
   * source_partition_token: "P1" } }
   * @param moveOutEvents moveOutEvents or {@code null} for none
   */
  public PartitionEventRecord setMoveOutEvents(java.util.List<MoveOutEvent> moveOutEvents) {
    this.moveOutEvents = moveOutEvents;
    return this;
  }

  /**
   * Unique partition identifier describing the partition this event occurred on. partition_token is
   * equal to the partition token of the change stream partition currently queried to return this
   * PartitionEventRecord.
   * @return value or {@code null} for none
   */
  public java.lang.String getPartitionToken() {
    return partitionToken;
  }

  /**
   * Unique partition identifier describing the partition this event occurred on. partition_token is
   * equal to the partition token of the change stream partition currently queried to return this
   * PartitionEventRecord.
   * @param partitionToken partitionToken or {@code null} for none
   */
  public PartitionEventRecord setPartitionToken(java.lang.String partitionToken) {
    this.partitionToken = partitionToken;
    return this;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordSequence() {
    return recordSequence;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * @param recordSequence recordSequence or {@code null} for none
   */
  public PartitionEventRecord setRecordSequence(java.lang.String recordSequence) {
    this.recordSequence = recordSequence;
    return this;
  }

  @Override
  public PartitionEventRecord set(String fieldName, Object value) {
    return (PartitionEventRecord) super.set(fieldName, value);
  }

  @Override
  public PartitionEventRecord clone() {
    return (PartitionEventRecord) super.clone();
  }

}
