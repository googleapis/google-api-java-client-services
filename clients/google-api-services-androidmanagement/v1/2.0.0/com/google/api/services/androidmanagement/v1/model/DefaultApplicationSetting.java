/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * The default application setting for a DefaultApplicationType.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DefaultApplicationSetting extends com.google.api.client.json.GenericJson {

  /**
   * Required. The scopes to which the policy should be applied. This list must not be empty or
   * contain duplicates.A NonComplianceDetail with MANAGEMENT_MODE reason and
   * DEFAULT_APPLICATION_SETTING_UNSUPPORTED_SCOPES specific reason is reported if none of the
   * specified scopes can be applied to the management mode (e.g. a fully managed device receives a
   * policy with only SCOPE_PERSONAL_PROFILE in the list).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> defaultApplicationScopes;

  /**
   * Required. The app type to set the default application.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String defaultApplicationType;

  /**
   * Required. The list of applications that can be set as the default app for a given type. This
   * list must not be empty or contain duplicates. The first app in the list that is installed and
   * qualified for the defaultApplicationType (e.g. SMS app for DEFAULT_SMS) is set as the default
   * app. The signing key certificate fingerprint of the app on the device must also match one of
   * the signing key certificate fingerprints obtained from Play Store or one of the entries in
   * ApplicationPolicy.signingKeyCerts in order to be set as the default.If the
   * defaultApplicationScopes contains SCOPE_FULLY_MANAGED or SCOPE_WORK_PROFILE, the app must have
   * an entry in applications with installType set to a value other than BLOCKED.A
   * NonComplianceDetail with APP_NOT_INSTALLED reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if none of the apps in
   * the list are installed. A NonComplianceDetail with INVALID_VALUE reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if at least one app is
   * installed but the policy fails to apply due to other reasons (e.g. the app is not of the right
   * type).When applying to SCOPE_PERSONAL_PROFILE on a company-owned device with a work profile,
   * only pre-installed system apps can be set as the default. A NonComplianceDetail with
   * INVALID_VALUE reason and DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is
   * reported if the policy fails to apply to the personal profile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DefaultApplication> defaultApplications;

  static {
    // hack to force ProGuard to consider DefaultApplication used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DefaultApplication.class);
  }

  /**
   * Required. The scopes to which the policy should be applied. This list must not be empty or
   * contain duplicates.A NonComplianceDetail with MANAGEMENT_MODE reason and
   * DEFAULT_APPLICATION_SETTING_UNSUPPORTED_SCOPES specific reason is reported if none of the
   * specified scopes can be applied to the management mode (e.g. a fully managed device receives a
   * policy with only SCOPE_PERSONAL_PROFILE in the list).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDefaultApplicationScopes() {
    return defaultApplicationScopes;
  }

  /**
   * Required. The scopes to which the policy should be applied. This list must not be empty or
   * contain duplicates.A NonComplianceDetail with MANAGEMENT_MODE reason and
   * DEFAULT_APPLICATION_SETTING_UNSUPPORTED_SCOPES specific reason is reported if none of the
   * specified scopes can be applied to the management mode (e.g. a fully managed device receives a
   * policy with only SCOPE_PERSONAL_PROFILE in the list).
   * @param defaultApplicationScopes defaultApplicationScopes or {@code null} for none
   */
  public DefaultApplicationSetting setDefaultApplicationScopes(java.util.List<java.lang.String> defaultApplicationScopes) {
    this.defaultApplicationScopes = defaultApplicationScopes;
    return this;
  }

  /**
   * Required. The app type to set the default application.
   * @return value or {@code null} for none
   */
  public java.lang.String getDefaultApplicationType() {
    return defaultApplicationType;
  }

  /**
   * Required. The app type to set the default application.
   * @param defaultApplicationType defaultApplicationType or {@code null} for none
   */
  public DefaultApplicationSetting setDefaultApplicationType(java.lang.String defaultApplicationType) {
    this.defaultApplicationType = defaultApplicationType;
    return this;
  }

  /**
   * Required. The list of applications that can be set as the default app for a given type. This
   * list must not be empty or contain duplicates. The first app in the list that is installed and
   * qualified for the defaultApplicationType (e.g. SMS app for DEFAULT_SMS) is set as the default
   * app. The signing key certificate fingerprint of the app on the device must also match one of
   * the signing key certificate fingerprints obtained from Play Store or one of the entries in
   * ApplicationPolicy.signingKeyCerts in order to be set as the default.If the
   * defaultApplicationScopes contains SCOPE_FULLY_MANAGED or SCOPE_WORK_PROFILE, the app must have
   * an entry in applications with installType set to a value other than BLOCKED.A
   * NonComplianceDetail with APP_NOT_INSTALLED reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if none of the apps in
   * the list are installed. A NonComplianceDetail with INVALID_VALUE reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if at least one app is
   * installed but the policy fails to apply due to other reasons (e.g. the app is not of the right
   * type).When applying to SCOPE_PERSONAL_PROFILE on a company-owned device with a work profile,
   * only pre-installed system apps can be set as the default. A NonComplianceDetail with
   * INVALID_VALUE reason and DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is
   * reported if the policy fails to apply to the personal profile.
   * @return value or {@code null} for none
   */
  public java.util.List<DefaultApplication> getDefaultApplications() {
    return defaultApplications;
  }

  /**
   * Required. The list of applications that can be set as the default app for a given type. This
   * list must not be empty or contain duplicates. The first app in the list that is installed and
   * qualified for the defaultApplicationType (e.g. SMS app for DEFAULT_SMS) is set as the default
   * app. The signing key certificate fingerprint of the app on the device must also match one of
   * the signing key certificate fingerprints obtained from Play Store or one of the entries in
   * ApplicationPolicy.signingKeyCerts in order to be set as the default.If the
   * defaultApplicationScopes contains SCOPE_FULLY_MANAGED or SCOPE_WORK_PROFILE, the app must have
   * an entry in applications with installType set to a value other than BLOCKED.A
   * NonComplianceDetail with APP_NOT_INSTALLED reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if none of the apps in
   * the list are installed. A NonComplianceDetail with INVALID_VALUE reason and
   * DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is reported if at least one app is
   * installed but the policy fails to apply due to other reasons (e.g. the app is not of the right
   * type).When applying to SCOPE_PERSONAL_PROFILE on a company-owned device with a work profile,
   * only pre-installed system apps can be set as the default. A NonComplianceDetail with
   * INVALID_VALUE reason and DEFAULT_APPLICATION_SETTING_FAILED_FOR_SCOPE specific reason is
   * reported if the policy fails to apply to the personal profile.
   * @param defaultApplications defaultApplications or {@code null} for none
   */
  public DefaultApplicationSetting setDefaultApplications(java.util.List<DefaultApplication> defaultApplications) {
    this.defaultApplications = defaultApplications;
    return this;
  }

  @Override
  public DefaultApplicationSetting set(String fieldName, Object value) {
    return (DefaultApplicationSetting) super.set(fieldName, value);
  }

  @Override
  public DefaultApplicationSetting clone() {
    return (DefaultApplicationSetting) super.clone();
  }

}
