/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * Filter for fixed point number data types such as NUMERIC/NUMBER
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SourceNumericFilter extends com.google.api.client.json.GenericJson {

  /**
   * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String numericFilterOption;

  /**
   * Optional. The filter will match columns with precision smaller than or equal to this number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceMaxPrecisionFilter;

  /**
   * Optional. The filter will match columns with scale smaller than or equal to this number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceMaxScaleFilter;

  /**
   * Optional. The filter will match columns with precision greater than or equal to this number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceMinPrecisionFilter;

  /**
   * Optional. The filter will match columns with scale greater than or equal to this number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceMinScaleFilter;

  /**
   * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
   * @return value or {@code null} for none
   */
  public java.lang.String getNumericFilterOption() {
    return numericFilterOption;
  }

  /**
   * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
   * @param numericFilterOption numericFilterOption or {@code null} for none
   */
  public SourceNumericFilter setNumericFilterOption(java.lang.String numericFilterOption) {
    this.numericFilterOption = numericFilterOption;
    return this;
  }

  /**
   * Optional. The filter will match columns with precision smaller than or equal to this number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceMaxPrecisionFilter() {
    return sourceMaxPrecisionFilter;
  }

  /**
   * Optional. The filter will match columns with precision smaller than or equal to this number.
   * @param sourceMaxPrecisionFilter sourceMaxPrecisionFilter or {@code null} for none
   */
  public SourceNumericFilter setSourceMaxPrecisionFilter(java.lang.Integer sourceMaxPrecisionFilter) {
    this.sourceMaxPrecisionFilter = sourceMaxPrecisionFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with scale smaller than or equal to this number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceMaxScaleFilter() {
    return sourceMaxScaleFilter;
  }

  /**
   * Optional. The filter will match columns with scale smaller than or equal to this number.
   * @param sourceMaxScaleFilter sourceMaxScaleFilter or {@code null} for none
   */
  public SourceNumericFilter setSourceMaxScaleFilter(java.lang.Integer sourceMaxScaleFilter) {
    this.sourceMaxScaleFilter = sourceMaxScaleFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with precision greater than or equal to this number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceMinPrecisionFilter() {
    return sourceMinPrecisionFilter;
  }

  /**
   * Optional. The filter will match columns with precision greater than or equal to this number.
   * @param sourceMinPrecisionFilter sourceMinPrecisionFilter or {@code null} for none
   */
  public SourceNumericFilter setSourceMinPrecisionFilter(java.lang.Integer sourceMinPrecisionFilter) {
    this.sourceMinPrecisionFilter = sourceMinPrecisionFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with scale greater than or equal to this number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceMinScaleFilter() {
    return sourceMinScaleFilter;
  }

  /**
   * Optional. The filter will match columns with scale greater than or equal to this number.
   * @param sourceMinScaleFilter sourceMinScaleFilter or {@code null} for none
   */
  public SourceNumericFilter setSourceMinScaleFilter(java.lang.Integer sourceMinScaleFilter) {
    this.sourceMinScaleFilter = sourceMinScaleFilter;
    return this;
  }

  @Override
  public SourceNumericFilter set(String fieldName, Object value) {
    return (SourceNumericFilter) super.set(fieldName, value);
  }

  @Override
  public SourceNumericFilter clone() {
    return (SourceNumericFilter) super.clone();
  }

}
