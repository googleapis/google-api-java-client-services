/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for IndexingDocjoinerDataVersionVersionInfo.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingDocjoinerDataVersionVersionInfo extends com.google.api.client.json.GenericJson {

  /**
   * Sometimes, a piece of data may not exist for a document (and we don't want to delete it), so
   * timestamp_micros won't exist. However, consideration_timestamp_micros will be set to indicate
   * we tried to update that piece of data for tracking purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long considerationTimestampMicros;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String humanReadableVersion;

  /**
   * The timestamp when a piece of data is updated (or deleted if the data doesn't exist in the
   * update).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long timestampMicros;

  /**
   * Sometimes, a piece of data may not exist for a document (and we don't want to delete it), so
   * timestamp_micros won't exist. However, consideration_timestamp_micros will be set to indicate
   * we tried to update that piece of data for tracking purposes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getConsiderationTimestampMicros() {
    return considerationTimestampMicros;
  }

  /**
   * Sometimes, a piece of data may not exist for a document (and we don't want to delete it), so
   * timestamp_micros won't exist. However, consideration_timestamp_micros will be set to indicate
   * we tried to update that piece of data for tracking purposes.
   * @param considerationTimestampMicros considerationTimestampMicros or {@code null} for none
   */
  public IndexingDocjoinerDataVersionVersionInfo setConsiderationTimestampMicros(java.lang.Long considerationTimestampMicros) {
    this.considerationTimestampMicros = considerationTimestampMicros;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getHumanReadableVersion() {
    return humanReadableVersion;
  }

  /**
   * @param humanReadableVersion humanReadableVersion or {@code null} for none
   */
  public IndexingDocjoinerDataVersionVersionInfo setHumanReadableVersion(java.lang.String humanReadableVersion) {
    this.humanReadableVersion = humanReadableVersion;
    return this;
  }

  /**
   * The timestamp when a piece of data is updated (or deleted if the data doesn't exist in the
   * update).
   * @return value or {@code null} for none
   */
  public java.lang.Long getTimestampMicros() {
    return timestampMicros;
  }

  /**
   * The timestamp when a piece of data is updated (or deleted if the data doesn't exist in the
   * update).
   * @param timestampMicros timestampMicros or {@code null} for none
   */
  public IndexingDocjoinerDataVersionVersionInfo setTimestampMicros(java.lang.Long timestampMicros) {
    this.timestampMicros = timestampMicros;
    return this;
  }

  @Override
  public IndexingDocjoinerDataVersionVersionInfo set(String fieldName, Object value) {
    return (IndexingDocjoinerDataVersionVersionInfo) super.set(fieldName, value);
  }

  @Override
  public IndexingDocjoinerDataVersionVersionInfo clone() {
    return (IndexingDocjoinerDataVersionVersionInfo) super.clone();
  }

}
