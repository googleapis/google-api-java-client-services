/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmwareengine.v1.model;

/**
 * Autoscaling policy describes the behavior of the autoscaling with respect to the resource
 * utilization. The scale-out operation is initiated if the utilization exceeds ANY of the
 * respective thresholds. The scale-in operation is initiated if the utilization is below ALL of the
 * respective thresholds.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VMware Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AutoscalingPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed memory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Thresholds consumedMemoryThresholds;

  /**
   * Optional. Utilization thresholds pertaining to CPU utilization.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Thresholds cpuThresholds;

  /**
   * Optional. Utilization thresholds pertaining to amount of granted memory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Thresholds grantedMemoryThresholds;

  /**
   * Required. The canonical identifier of the node type to add or remove. Corresponds to the
   * `NodeType`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nodeTypeId;

  /**
   * Required. Number of nodes to add to a cluster during a scale-out operation. Must be divisible
   * by 2 for stretched clusters. During a scale-in operation only one node (or 2 for stretched
   * clusters) are removed in a single iteration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scaleOutSize;

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed storage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Thresholds storageThresholds;

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed memory.
   * @return value or {@code null} for none
   */
  public Thresholds getConsumedMemoryThresholds() {
    return consumedMemoryThresholds;
  }

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed memory.
   * @param consumedMemoryThresholds consumedMemoryThresholds or {@code null} for none
   */
  public AutoscalingPolicy setConsumedMemoryThresholds(Thresholds consumedMemoryThresholds) {
    this.consumedMemoryThresholds = consumedMemoryThresholds;
    return this;
  }

  /**
   * Optional. Utilization thresholds pertaining to CPU utilization.
   * @return value or {@code null} for none
   */
  public Thresholds getCpuThresholds() {
    return cpuThresholds;
  }

  /**
   * Optional. Utilization thresholds pertaining to CPU utilization.
   * @param cpuThresholds cpuThresholds or {@code null} for none
   */
  public AutoscalingPolicy setCpuThresholds(Thresholds cpuThresholds) {
    this.cpuThresholds = cpuThresholds;
    return this;
  }

  /**
   * Optional. Utilization thresholds pertaining to amount of granted memory.
   * @return value or {@code null} for none
   */
  public Thresholds getGrantedMemoryThresholds() {
    return grantedMemoryThresholds;
  }

  /**
   * Optional. Utilization thresholds pertaining to amount of granted memory.
   * @param grantedMemoryThresholds grantedMemoryThresholds or {@code null} for none
   */
  public AutoscalingPolicy setGrantedMemoryThresholds(Thresholds grantedMemoryThresholds) {
    this.grantedMemoryThresholds = grantedMemoryThresholds;
    return this;
  }

  /**
   * Required. The canonical identifier of the node type to add or remove. Corresponds to the
   * `NodeType`.
   * @return value or {@code null} for none
   */
  public java.lang.String getNodeTypeId() {
    return nodeTypeId;
  }

  /**
   * Required. The canonical identifier of the node type to add or remove. Corresponds to the
   * `NodeType`.
   * @param nodeTypeId nodeTypeId or {@code null} for none
   */
  public AutoscalingPolicy setNodeTypeId(java.lang.String nodeTypeId) {
    this.nodeTypeId = nodeTypeId;
    return this;
  }

  /**
   * Required. Number of nodes to add to a cluster during a scale-out operation. Must be divisible
   * by 2 for stretched clusters. During a scale-in operation only one node (or 2 for stretched
   * clusters) are removed in a single iteration.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScaleOutSize() {
    return scaleOutSize;
  }

  /**
   * Required. Number of nodes to add to a cluster during a scale-out operation. Must be divisible
   * by 2 for stretched clusters. During a scale-in operation only one node (or 2 for stretched
   * clusters) are removed in a single iteration.
   * @param scaleOutSize scaleOutSize or {@code null} for none
   */
  public AutoscalingPolicy setScaleOutSize(java.lang.Integer scaleOutSize) {
    this.scaleOutSize = scaleOutSize;
    return this;
  }

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed storage.
   * @return value or {@code null} for none
   */
  public Thresholds getStorageThresholds() {
    return storageThresholds;
  }

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed storage.
   * @param storageThresholds storageThresholds or {@code null} for none
   */
  public AutoscalingPolicy setStorageThresholds(Thresholds storageThresholds) {
    this.storageThresholds = storageThresholds;
    return this;
  }

  @Override
  public AutoscalingPolicy set(String fieldName, Object value) {
    return (AutoscalingPolicy) super.set(fieldName, value);
  }

  @Override
  public AutoscalingPolicy clone() {
    return (AutoscalingPolicy) super.clone();
  }

}
