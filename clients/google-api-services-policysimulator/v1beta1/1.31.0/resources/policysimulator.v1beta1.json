{
  "id": "policysimulator:v1beta1",
  "canonicalName": "Policy Simulator",
  "basePath": "",
  "title": "Policy Simulator API",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "version_module": true,
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "location": "query",
      "description": "Data format for response."
    }
  },
  "description": "",
  "schemas": {
    "GoogleIamV1AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.",
      "properties": {
        "auditLogConfigs": {
          "type": "array",
          "description": "The configuration for logging of each type of permission.",
          "items": {
            "$ref": "GoogleIamV1AuditLogConfig"
          }
        },
        "service": {
          "type": "string",
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services."
        }
      },
      "type": "object",
      "id": "GoogleIamV1AuditConfig"
    },
    "GoogleIamV1AuditLogConfig": {
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ]
        },
        "exemptedMembers": {
          "items": {
            "type": "string"
          },
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array"
        }
      },
      "id": "GoogleIamV1AuditLogConfig",
      "type": "object",
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging."
    },
    "GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary": {
      "type": "object",
      "properties": {
        "logCount": {
          "format": "int32",
          "description": "Number of log entries replayed. log_count == unchanged_count + difference_count + error_count",
          "type": "integer"
        },
        "newestDate": {
          "$ref": "GoogleTypeDate",
          "description": "Date of newest log entry replayed."
        },
        "oldestDate": {
          "description": "Date of oldest log entry replayed.",
          "$ref": "GoogleTypeDate"
        },
        "errorCount": {
          "description": "Number of log entries with an error during replay.",
          "type": "integer",
          "format": "int32"
        },
        "unchangedCount": {
          "type": "integer",
          "description": "Number of replayed log entries with no difference between baseline and simulated",
          "format": "int32"
        },
        "differenceCount": {
          "format": "int32",
          "type": "integer",
          "description": "Number of replayed log entries with a difference between baseline and simulated policies."
        }
      },
      "id": "GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary",
      "description": "Summary statistics about the replayed log entries."
    },
    "GoogleTypeExpr": {
      "id": "GoogleTypeExpr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        }
      },
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1ReplayDiff": {
      "id": "GoogleCloudPolicysimulatorV1beta1ReplayDiff",
      "properties": {
        "accessDiff": {
          "description": "The difference in AccessState between replays.",
          "$ref": "GoogleCloudPolicysimulatorV1beta1AccessStateDiff"
        }
      },
      "description": "A successful replay of an AccessTuple that resulted in a difference between baseline and simulated.",
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1ListReplayResultsResponse": {
      "id": "GoogleCloudPolicysimulatorV1beta1ListReplayResultsResponse",
      "description": "The results of a replay.",
      "properties": {
        "replayResults": {
          "description": "The results of running a replay.",
          "items": {
            "$ref": "GoogleCloudPolicysimulatorV1beta1ReplayResult"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1AccessTuple": {
      "properties": {
        "principal": {
          "description": "Required. The member, or principal, whose access you want to check, in the form of the email address that represents that member. For example, `alice@example.com` or `my-service-account@my-project.iam.gserviceaccount.com`. The member must be a Google Account or a service account. Other types of members are not supported.",
          "type": "string"
        },
        "permission": {
          "description": "Required. The IAM permission to check for the specified member and resource. For a complete list of IAM permissions, see https://cloud.google.com/iam/help/permissions/reference. For a complete list of predefined IAM roles and the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.",
          "type": "string"
        },
        "fullResourceName": {
          "type": "string",
          "description": "Required. The full resource name that identifies the resource. For example, `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names."
        }
      },
      "description": "Information about the member, resource, and permission to check.",
      "id": "GoogleCloudPolicysimulatorV1beta1AccessTuple",
      "type": "object"
    },
    "GoogleIamV1Policy": {
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "bindings": {
          "type": "array",
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "items": {
            "$ref": "GoogleIamV1Binding"
          }
        },
        "etag": {
          "type": "string",
          "format": "byte",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        },
        "auditConfigs": {
          "items": {
            "$ref": "GoogleIamV1AuditConfig"
          },
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array"
        }
      },
      "id": "GoogleIamV1Policy"
    },
    "GoogleCloudPolicysimulatorV1beta1ReplayResult": {
      "type": "object",
      "description": "The result of replaying a single access tuple against a simulated state.",
      "properties": {
        "parent": {
          "type": "string",
          "description": "The replay the access tuple was included in."
        },
        "diff": {
          "$ref": "GoogleCloudPolicysimulatorV1beta1ReplayDiff",
          "description": "The tuple was successfully replayed and had a difference."
        },
        "accessTuple": {
          "$ref": "GoogleCloudPolicysimulatorV1beta1AccessTuple",
          "description": "The access replayed."
        },
        "lastSeenDate": {
          "$ref": "GoogleTypeDate",
          "description": "The late date this access was seen in the logs."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the replay result. Format is `PARENT/locations/{location}/replays/{replay}/results/{replay_result}` where PARENT is a project, folder, or organization. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36/results/1234`"
        },
        "error": {
          "$ref": "GoogleRpcStatus",
          "description": "The tuple was not successfully replayed."
        }
      },
      "id": "GoogleCloudPolicysimulatorV1beta1ReplayResult"
    },
    "GoogleTypeDate": {
      "id": "GoogleTypeDate",
      "properties": {
        "month": {
          "format": "int32",
          "type": "integer",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."
        },
        "year": {
          "format": "int32",
          "type": "integer",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
        },
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`."
    },
    "GoogleCloudPolicysimulatorV1beta1AccessStateDiff": {
      "id": "GoogleCloudPolicysimulatorV1beta1AccessStateDiff",
      "description": "The difference in AccessState between baseline and simulated policies. If either AccessState cannot be fully evaluated, i.e. the AccessState is one of the UNKNOWN_* values, the explanation why full evaluation was not possible is in the ExplainedAccess message.",
      "properties": {
        "baseline": {
          "$ref": "GoogleCloudPolicysimulatorV1beta1ExplainedAccess",
          "description": "The explained access when replayed against the baseline policies."
        },
        "accessChange": {
          "description": "A single value interpretation of the difference between baseline and simulated.",
          "type": "string",
          "enum": [
            "ACCESS_CHANGE_TYPE_UNSPECIFIED",
            "NO_CHANGE",
            "UNKNOWN_CHANGE",
            "ACCESS_REVOKED",
            "ACCESS_GAINED",
            "ACCESS_MAYBE_REVOKED",
            "ACCESS_MAYBE_GAINED"
          ],
          "enumDescriptions": [
            "Reserved",
            "The two ExplainedAccesses are equal. This includes the case where both baseline and simulated are UNKNOWN, but the unknown information is equivalent.",
            "The baseline and simulated accesses are both UNKNOWN, but the unknown information differs between them.",
            "The baseline access state is GRANTED and the simulated access state is NOT_GRANTED",
            "The baseline access state is NOT_GRANTED and the simulated access state is GRANTED.",
            "The baseline access state is GRANTED and the simulated access state is UNKNOWN.",
            "The baseline state is NOT_GRANTED and the simulated state is UNKNOWN."
          ]
        },
        "simulated": {
          "$ref": "GoogleCloudPolicysimulatorV1beta1ExplainedAccess",
          "description": "The explained access when replayed against the simulated policies."
        }
      },
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1BindingExplanation": {
      "type": "object",
      "properties": {
        "rolePermissionRelevance": {
          "enum": [
            "HEURISTIC_RELEVANCE_UNSPECIFIED",
            "NORMAL",
            "HIGH"
          ],
          "enumDescriptions": [
            "Reserved for future use.",
            "The data point has a limited effect on the result. Changing the data point is unlikely to affect the overall determination.",
            "The data point has a strong effect on the result. Changing the data point is likely to affect the overall determination."
          ],
          "description": "The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.",
          "type": "string"
        },
        "condition": {
          "description": "A condition expression that prevents this binding from granting access unless the expression evaluates to `true`. To learn about IAM Conditions, see http://cloud.google.com/iam/help/conditions/overview.",
          "$ref": "GoogleTypeExpr"
        },
        "rolePermission": {
          "enum": [
            "ROLE_PERMISSION_UNSPECIFIED",
            "ROLE_PERMISSION_INCLUDED",
            "ROLE_PERMISSION_NOT_INCLUDED",
            "ROLE_PERMISSION_UNKNOWN_INFO_DENIED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Reserved for future use.",
            "The permission is included in the role.",
            "The permission is not included in the role.",
            "The Simulator user is not allowed to access the binding."
          ],
          "description": "Indicates whether the role granted by this binding contains the specified permission."
        },
        "access": {
          "type": "string",
          "enum": [
            "ACCESS_STATE_UNSPECIFIED",
            "GRANTED",
            "NOT_GRANTED",
            "UNKNOWN_CONDITIONAL",
            "UNKNOWN_INFO_DENIED"
          ],
          "description": "Required. Indicates whether _this binding_ provides the specified permission to the specified member for the specified resource. This field does _not_ indicate whether the member actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the member actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.",
          "enumDescriptions": [
            "Reserved for future use.",
            "The member has the permission.",
            "The member does not have the permission.",
            "The member has the permission only if a condition expression evaluates to `true`.",
            "The Simulator user does not have access to all of the policies that Policy Troubleshooter needs to evaluate."
          ]
        },
        "role": {
          "type": "string",
          "description": "The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference."
        },
        "relevance": {
          "description": "The relevance of this binding to the overall determination for the entire policy.",
          "enum": [
            "HEURISTIC_RELEVANCE_UNSPECIFIED",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "enumDescriptions": [
            "Reserved for future use.",
            "The data point has a limited effect on the result. Changing the data point is unlikely to affect the overall determination.",
            "The data point has a strong effect on the result. Changing the data point is likely to affect the overall determination."
          ]
        },
        "memberships": {
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudPolicysimulatorV1beta1BindingExplanationAnnotatedMembership"
          },
          "description": "Indicates whether each member in the binding includes the member specified in the request, either directly or indirectly. Each key identifies a member in the binding, and each value indicates whether the member in the binding includes the member in the request. For example, suppose that a binding includes the following members: * `user:alice@example.com` * `group:product-eng@example.com` You want to troubleshoot access for `user:bob@example.com`. This user is a member of the group `group:product-eng@example.com`. For the first member in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second member in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`."
        }
      },
      "description": "Details about how a binding in a policy affects a member's ability to use a permission.",
      "id": "GoogleCloudPolicysimulatorV1beta1BindingExplanation"
    },
    "GoogleCloudPolicysimulatorV1beta1ReplayOperationMetadata": {
      "type": "object",
      "id": "GoogleCloudPolicysimulatorV1beta1ReplayOperationMetadata",
      "description": "Metadata about a ReplayAccessLogs operation.",
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time when the request was received."
        }
      }
    },
    "GoogleIamV1Binding": {
      "properties": {
        "role": {
          "type": "string",
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "GoogleTypeExpr"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "GoogleIamV1Binding",
      "description": "Associates `members` with a `role`."
    },
    "GoogleCloudPolicysimulatorV1beta1ExplainedAccess": {
      "properties": {
        "policies": {
          "description": "The set of policies causing an UNKNOWN AccessState, if any. If the Access is GRANTED or NOT_GRANTED, this list will be empty.",
          "items": {
            "$ref": "GoogleCloudPolicysimulatorV1beta1ExplainedPolicy"
          },
          "type": "array"
        },
        "errors": {
          "items": {
            "$ref": "GoogleRpcStatus"
          },
          "type": "array",
          "description": "The list of problems encountered when explaining this access. This list provides the reason why UNKNOWN information in `policies` was unknown."
        },
        "accessState": {
          "description": "The overall access state for the included set of policies.",
          "enumDescriptions": [
            "Reserved for future use.",
            "The member has the permission.",
            "The member does not have the permission.",
            "The member has the permission only if a condition expression evaluates to `true`.",
            "The Simulator user does not have access to all of the policies that Policy Troubleshooter needs to evaluate."
          ],
          "type": "string",
          "enum": [
            "ACCESS_STATE_UNSPECIFIED",
            "GRANTED",
            "NOT_GRANTED",
            "UNKNOWN_CONDITIONAL",
            "UNKNOWN_INFO_DENIED"
          ]
        }
      },
      "id": "GoogleCloudPolicysimulatorV1beta1ExplainedAccess",
      "description": "Details about how the set of Explained Policies resulted in the Access State.",
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1BindingExplanationAnnotatedMembership": {
      "description": "Details about whether the binding includes the member.",
      "id": "GoogleCloudPolicysimulatorV1beta1BindingExplanationAnnotatedMembership",
      "type": "object",
      "properties": {
        "relevance": {
          "enumDescriptions": [
            "Reserved for future use.",
            "The data point has a limited effect on the result. Changing the data point is unlikely to affect the overall determination.",
            "The data point has a strong effect on the result. Changing the data point is likely to affect the overall determination."
          ],
          "enum": [
            "HEURISTIC_RELEVANCE_UNSPECIFIED",
            "NORMAL",
            "HIGH"
          ],
          "type": "string",
          "description": "The relevance of the member's status to the overall determination for the binding."
        },
        "membership": {
          "enum": [
            "MEMBERSHIP_UNSPECIFIED",
            "MEMBERSHIP_INCLUDED",
            "MEMBERSHIP_NOT_INCLUDED",
            "MEMBERSHIP_UNKNOWN_INFO_DENIED",
            "MEMBERSHIP_UNKNOWN_UNSUPPORTED"
          ],
          "description": "Indicates whether the binding includes the member.",
          "type": "string",
          "enumDescriptions": [
            "Reserved for future use.",
            "The binding includes the member. The member can be included directly or indirectly. For example: * A member is included directly if that member is listed in the binding. * A member is included indirectly if that member is in a Google group or G Suite domain that is listed in the binding.",
            "The binding does not include the member.",
            "The Simulator user is not allowed to access the binding.",
            "The member is an unsupported type. Only Google Accounts and service accounts are supported."
          ]
        }
      }
    },
    "GoogleRpcStatus": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "type": "array"
        }
      },
      "id": "GoogleRpcStatus"
    },
    "GoogleCloudPolicysimulatorV1beta1Replay": {
      "type": "object",
      "description": "A Replay of Accesses against a simulated state.",
      "id": "GoogleCloudPolicysimulatorV1beta1Replay",
      "properties": {
        "config": {
          "$ref": "GoogleCloudPolicysimulatorV1beta1ReplayConfig",
          "description": "Required. The configuration used for the replay."
        },
        "resultsSummary": {
          "description": "Output only. Summary statistics about the replayed log entries.",
          "$ref": "GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "RUNNING",
            "SUCCEEDED",
            "FAILED"
          ],
          "enumDescriptions": [
            "Reserved.",
            "Replay has not started yet.",
            "Replay is currently running.",
            "Replay has successfully completed.",
            "Replay has finished with an error."
          ],
          "description": "Output only. The current state of the replay. https://aip.dev/216"
        },
        "name": {
          "description": "The resource name of the replay. The replay id is randomly generated on creation. Format is `PARENT/locations/{location}/replays/{replay}` where PARENT is a project, folder, or organization. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`",
          "type": "string"
        }
      }
    },
    "GoogleLongrunningListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "id": "GoogleLongrunningListOperationsResponse",
      "properties": {
        "operations": {
          "items": {
            "$ref": "GoogleLongrunningOperation"
          },
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      }
    },
    "GoogleLongrunningOperation": {
      "id": "GoogleLongrunningOperation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "GoogleRpcStatus"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "type": "object"
    },
    "GoogleCloudPolicysimulatorV1beta1ReplayConfig": {
      "type": "object",
      "description": "The configuration used for the replay.",
      "properties": {
        "policyOverlay": {
          "additionalProperties": {
            "$ref": "GoogleIamV1Policy"
          },
          "type": "object",
          "description": "The policy overlay used during the replay. Keys are full resource names and the values are the policies to apply on these resources in the simulated state."
        },
        "logSource": {
          "enum": [
            "LOG_SOURCE_UNSPECIFIED",
            "RECENT_ACCESSES"
          ],
          "enumDescriptions": [
            "An unspecified log source. Replay will default to using RECENT_ACCESSES.",
            "Retrieves the 5000 most recent accesses from the last 90 days from an internal log source. Note that the log freshness (i.e. the date of the newest log entry) may be up to 7 days stale. In other words, an access attempt that only occurred within the past 7 days may not be captured by the replay."
          ],
          "description": "The logs to use as input for the replay.",
          "type": "string"
        }
      },
      "id": "GoogleCloudPolicysimulatorV1beta1ReplayConfig"
    },
    "GoogleCloudPolicysimulatorV1beta1ExplainedPolicy": {
      "properties": {
        "policy": {
          "$ref": "GoogleIamV1Policy",
          "description": "The IAM policy attached to the resource. If the Simulator user does not have access to the policy, this field is empty."
        },
        "fullResourceName": {
          "type": "string",
          "description": "The full resource name that identifies the resource. For example, `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`. If the Simulator user does not have access to the policy, this field is omitted. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names."
        },
        "bindingExplanations": {
          "type": "array",
          "description": "Details about how each binding in the policy affects the member's ability, or inability, to use the permission for the resource. If the Simulator user does not have access to the policy, this field is omitted.",
          "items": {
            "$ref": "GoogleCloudPolicysimulatorV1beta1BindingExplanation"
          }
        },
        "access": {
          "description": "Indicates whether _this policy_ provides the specified permission to the specified member for the specified resource. This field does _not_ indicate whether the member actually has the permission for the resource. There might be another policy that overrides this policy. To determine whether the member actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.",
          "enum": [
            "ACCESS_STATE_UNSPECIFIED",
            "GRANTED",
            "NOT_GRANTED",
            "UNKNOWN_CONDITIONAL",
            "UNKNOWN_INFO_DENIED"
          ],
          "enumDescriptions": [
            "Reserved for future use.",
            "The member has the permission.",
            "The member does not have the permission.",
            "The member has the permission only if a condition expression evaluates to `true`.",
            "The Simulator user does not have access to all of the policies that Policy Troubleshooter needs to evaluate."
          ],
          "type": "string"
        },
        "relevance": {
          "enum": [
            "HEURISTIC_RELEVANCE_UNSPECIFIED",
            "NORMAL",
            "HIGH"
          ],
          "description": "The relevance of this policy to the overall determination in the TroubleshootIamPolicyResponse. If the Simulator user does not have access to the policy, this field is omitted.",
          "type": "string",
          "enumDescriptions": [
            "Reserved for future use.",
            "The data point has a limited effect on the result. Changing the data point is unlikely to affect the overall determination.",
            "The data point has a strong effect on the result. Changing the data point is likely to affect the overall determination."
          ]
        }
      },
      "type": "object",
      "description": "Details about how a specific IAM Policy contributed to the access check.",
      "id": "GoogleCloudPolicysimulatorV1beta1ExplainedPolicy"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "rootUrl": "https://policysimulator.googleapis.com/",
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "ownerDomain": "google.com",
  "resources": {
    "folders": {
      "resources": {
        "locations": {
          "resources": {
            "replays": {
              "methods": {
                "create": {
                  "path": "v1beta1/{+parent}/replays",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The parent resource where this Replay will be created. This must be a project, folder, or organization with included location. Example: `projects/my-example-project/locations/global`",
                      "pattern": "^folders/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Create a replay using the given ReplayConfig. The parent of the replay must contain all resources in the overlay. For example, if the overlay contains: ``` ReplayConfig { policy_overlay = map = { \"//cloudresourcemanager.googleapis.com/projects/project-1\": ..., \"//cloudresourcemanager.googleapis.com/projects/project-2\": ..., } ``` Then, the parent used for CreateReplay must be the organization or a folder that contains both projects as children.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleLongrunningOperation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "policysimulator.folders.locations.replays.create"
                },
                "get": {
                  "description": "Get the specified Replay.",
                  "id": "policysimulator.folders.locations.replays.get",
                  "response": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "pattern": "^folders/[^/]+/locations/[^/]+/replays/[^/]+$",
                      "type": "string",
                      "description": "Required. The name of the replay to retrieve. Format is `PARENT/locations/{location}/replays/{replay}` where PARENT is a project, folder, or organization. Example: `projects/my-example-project/locations/{location}/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`"
                    }
                  },
                  "httpMethod": "GET",
                  "path": "v1beta1/{+name}",
                  "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays/{replaysId}"
                }
              },
              "resources": {
                "results": {
                  "methods": {
                    "list": {
                      "id": "policysimulator.folders.locations.replays.results.list",
                      "description": "List the results of running a replay",
                      "response": {
                        "$ref": "GoogleCloudPolicysimulatorV1beta1ListReplayResultsResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays/{replaysId}/results",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+parent}/results",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of `ReplayResults` to return. If unspecified, at most 5000 `Replays` will be returned. The maximum value is 5000; values above 5000 will be coerced to 5000."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "A page token, received from a previous `ListReplayResults` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReplayResults` must match the call that provided the page token.",
                          "location": "query"
                        },
                        "parent": {
                          "pattern": "^folders/[^/]+/locations/[^/]+/replays/[^/]+$",
                          "description": "Required. The replay we are listing results for.",
                          "required": true,
                          "location": "path",
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "operations": {
      "methods": {
        "list": {
          "flatPath": "v1beta1/operations",
          "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
          "path": "v1beta1/operations",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "description": "The standard list page token.",
              "location": "query",
              "type": "string"
            },
            "name": {
              "location": "query",
              "description": "The name of the operation's parent resource.",
              "type": "string"
            },
            "pageSize": {
              "location": "query",
              "type": "integer",
              "description": "The standard list page size.",
              "format": "int32"
            },
            "filter": {
              "description": "The standard list filter.",
              "type": "string",
              "location": "query"
            }
          },
          "id": "policysimulator.operations.list",
          "response": {
            "$ref": "GoogleLongrunningListOperationsResponse"
          },
          "parameterOrder": []
        },
        "get": {
          "flatPath": "v1beta1/operations/{operationsId}",
          "id": "policysimulator.operations.get",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "response": {
            "$ref": "GoogleLongrunningOperation"
          },
          "path": "v1beta1/{+name}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^operations/[^/]+$",
              "required": true,
              "description": "The name of the operation resource.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ]
        }
      }
    },
    "organizations": {
      "resources": {
        "locations": {
          "resources": {
            "replays": {
              "resources": {
                "results": {
                  "methods": {
                    "list": {
                      "response": {
                        "$ref": "GoogleCloudPolicysimulatorV1beta1ListReplayResultsResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays/{replaysId}/results",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "description": "Required. The replay we are listing results for.",
                          "pattern": "^organizations/[^/]+/locations/[^/]+/replays/[^/]+$",
                          "required": true,
                          "location": "path"
                        },
                        "pageToken": {
                          "description": "A page token, received from a previous `ListReplayResults` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReplayResults` must match the call that provided the page token.",
                          "type": "string",
                          "location": "query"
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The maximum number of `ReplayResults` to return. If unspecified, at most 5000 `Replays` will be returned. The maximum value is 5000; values above 5000 will be coerced to 5000.",
                          "location": "query"
                        }
                      },
                      "id": "policysimulator.organizations.locations.replays.results.list",
                      "description": "List the results of running a replay",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "GET",
                      "path": "v1beta1/{+parent}/results"
                    }
                  }
                }
              },
              "methods": {
                "create": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+parent}/replays",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^organizations/[^/]+/locations/[^/]+$",
                      "description": "Required. The parent resource where this Replay will be created. This must be a project, folder, or organization with included location. Example: `projects/my-example-project/locations/global`"
                    }
                  },
                  "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays",
                  "request": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleLongrunningOperation"
                  },
                  "id": "policysimulator.organizations.locations.replays.create",
                  "description": "Create a replay using the given ReplayConfig. The parent of the replay must contain all resources in the overlay. For example, if the overlay contains: ``` ReplayConfig { policy_overlay = map = { \"//cloudresourcemanager.googleapis.com/projects/project-1\": ..., \"//cloudresourcemanager.googleapis.com/projects/project-2\": ..., } ``` Then, the parent used for CreateReplay must be the organization or a folder that contains both projects as children."
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "description": "Get the specified Replay.",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The name of the replay to retrieve. Format is `PARENT/locations/{location}/replays/{replay}` where PARENT is a project, folder, or organization. Example: `projects/my-example-project/locations/{location}/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`",
                      "required": true,
                      "pattern": "^organizations/[^/]+/locations/[^/]+/replays/[^/]+$"
                    }
                  },
                  "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays/{replaysId}",
                  "path": "v1beta1/{+name}",
                  "id": "policysimulator.organizations.locations.replays.get"
                }
              }
            }
          }
        }
      }
    },
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "replays": {
              "resources": {
                "results": {
                  "methods": {
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/replays/[^/]+$",
                          "type": "string",
                          "description": "Required. The replay we are listing results for.",
                          "required": true
                        },
                        "pageSize": {
                          "description": "The maximum number of `ReplayResults` to return. If unspecified, at most 5000 `Replays` will be returned. The maximum value is 5000; values above 5000 will be coerced to 5000.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "A page token, received from a previous `ListReplayResults` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReplayResults` must match the call that provided the page token.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "response": {
                        "$ref": "GoogleCloudPolicysimulatorV1beta1ListReplayResultsResponse"
                      },
                      "description": "List the results of running a replay",
                      "id": "policysimulator.projects.locations.replays.results.list",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays/{replaysId}/results",
                      "path": "v1beta1/{+parent}/results",
                      "httpMethod": "GET"
                    }
                  }
                }
              },
              "methods": {
                "create": {
                  "id": "policysimulator.projects.locations.replays.create",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. The parent resource where this Replay will be created. This must be a project, folder, or organization with included location. Example: `projects/my-example-project/locations/global`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays",
                  "response": {
                    "$ref": "GoogleLongrunningOperation"
                  },
                  "description": "Create a replay using the given ReplayConfig. The parent of the replay must contain all resources in the overlay. For example, if the overlay contains: ``` ReplayConfig { policy_overlay = map = { \"//cloudresourcemanager.googleapis.com/projects/project-1\": ..., \"//cloudresourcemanager.googleapis.com/projects/project-2\": ..., } ``` Then, the parent used for CreateReplay must be the organization or a folder that contains both projects as children.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "path": "v1beta1/{+parent}/replays",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudPolicysimulatorV1beta1Replay"
                  },
                  "httpMethod": "GET",
                  "description": "Get the specified Replay.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "policysimulator.projects.locations.replays.get",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The name of the replay to retrieve. Format is `PARENT/locations/{location}/replays/{replay}` where PARENT is a project, folder, or organization. Example: `projects/my-example-project/locations/{location}/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/replays/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays/{replaysId}",
                  "path": "v1beta1/{+name}"
                }
              }
            }
          }
        }
      }
    }
  },
  "batchPath": "batch",
  "documentationLink": "https://cloud.google.com/iam/docs/simulating-access",
  "protocol": "rest",
  "revision": "20210213",
  "servicePath": "",
  "name": "policysimulator",
  "version": "v1beta1",
  "mtlsRootUrl": "https://policysimulator.mtls.googleapis.com/",
  "baseUrl": "https://policysimulator.googleapis.com/"
}
