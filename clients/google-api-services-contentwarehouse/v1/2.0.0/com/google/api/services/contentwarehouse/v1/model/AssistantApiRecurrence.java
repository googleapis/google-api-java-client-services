/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Date-based recurrences specify repeating events. Conceptually, a recurrence is a (possibly
 * unbounded) sequence of dates on which an event falls, described by a list of constraints. A date
 * is in a recurrence if and only if it satisfies all of the constraints. Note that devices may
 * support some constraints, but not all. IMPORTANT: The definition of Recurrence proto is being
 * moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be
 * updated to point to the new location. If you are adding a reference, use the new one instead.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiRecurrence extends com.google.api.client.json.GenericJson {

  /**
   * The first day of the recurrence. If begin is not set, then the reminder will start infinitely
   * in the past.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDate begin;

  /**
   * A list of blacklisted dates to skip the alarm on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiRecurrenceDatetimeRange> blacklistedRanges;

  /**
   * Specifies the date in a month. For example, if day_of_month is 15, then it represent the 15th
   * day of the specified month.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> dayOfMonth;

  /**
   * Specifies a weekly or daily recurrence. Constraint: The date falls on one of these days of the
   * week, in 0...6 (Sunday...Saturday).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> dayOfWeek;

  /**
   * The last day of the recurrence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDate end;

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer every;

  /**
   * Specifies the month in a year. Constrain: the month falls on one of these months, in 1, 2, ...
   * 12 (January...December).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> monthOfYear;

  /**
   * The number of occurrences after which the recurrence should end.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numOccurrences;

  /**
   * Specifies the index of week in a month. For example, the second Tuesday every month, in this
   * case, week_of_month should be 2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> weekOfMonth;

  /**
   * The first day of the recurrence. If begin is not set, then the reminder will start infinitely
   * in the past.
   * @return value or {@code null} for none
   */
  public AssistantApiDate getBegin() {
    return begin;
  }

  /**
   * The first day of the recurrence. If begin is not set, then the reminder will start infinitely
   * in the past.
   * @param begin begin or {@code null} for none
   */
  public AssistantApiRecurrence setBegin(AssistantApiDate begin) {
    this.begin = begin;
    return this;
  }

  /**
   * A list of blacklisted dates to skip the alarm on.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiRecurrenceDatetimeRange> getBlacklistedRanges() {
    return blacklistedRanges;
  }

  /**
   * A list of blacklisted dates to skip the alarm on.
   * @param blacklistedRanges blacklistedRanges or {@code null} for none
   */
  public AssistantApiRecurrence setBlacklistedRanges(java.util.List<AssistantApiRecurrenceDatetimeRange> blacklistedRanges) {
    this.blacklistedRanges = blacklistedRanges;
    return this;
  }

  /**
   * Specifies the date in a month. For example, if day_of_month is 15, then it represent the 15th
   * day of the specified month.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDayOfMonth() {
    return dayOfMonth;
  }

  /**
   * Specifies the date in a month. For example, if day_of_month is 15, then it represent the 15th
   * day of the specified month.
   * @param dayOfMonth dayOfMonth or {@code null} for none
   */
  public AssistantApiRecurrence setDayOfMonth(java.util.List<java.lang.Integer> dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  /**
   * Specifies a weekly or daily recurrence. Constraint: The date falls on one of these days of the
   * week, in 0...6 (Sunday...Saturday).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDayOfWeek() {
    return dayOfWeek;
  }

  /**
   * Specifies a weekly or daily recurrence. Constraint: The date falls on one of these days of the
   * week, in 0...6 (Sunday...Saturday).
   * @param dayOfWeek dayOfWeek or {@code null} for none
   */
  public AssistantApiRecurrence setDayOfWeek(java.util.List<java.lang.Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * The last day of the recurrence.
   * @return value or {@code null} for none
   */
  public AssistantApiDate getEnd() {
    return end;
  }

  /**
   * The last day of the recurrence.
   * @param end end or {@code null} for none
   */
  public AssistantApiRecurrence setEnd(AssistantApiDate end) {
    this.end = end;
    return this;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEvery() {
    return every;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year).
   * @param every every or {@code null} for none
   */
  public AssistantApiRecurrence setEvery(java.lang.Integer every) {
    this.every = every;
    return this;
  }

  /**
   * Specifies the month in a year. Constrain: the month falls on one of these months, in 1, 2, ...
   * 12 (January...December).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getMonthOfYear() {
    return monthOfYear;
  }

  /**
   * Specifies the month in a year. Constrain: the month falls on one of these months, in 1, 2, ...
   * 12 (January...December).
   * @param monthOfYear monthOfYear or {@code null} for none
   */
  public AssistantApiRecurrence setMonthOfYear(java.util.List<java.lang.Integer> monthOfYear) {
    this.monthOfYear = monthOfYear;
    return this;
  }

  /**
   * The number of occurrences after which the recurrence should end.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumOccurrences() {
    return numOccurrences;
  }

  /**
   * The number of occurrences after which the recurrence should end.
   * @param numOccurrences numOccurrences or {@code null} for none
   */
  public AssistantApiRecurrence setNumOccurrences(java.lang.Integer numOccurrences) {
    this.numOccurrences = numOccurrences;
    return this;
  }

  /**
   * Specifies the index of week in a month. For example, the second Tuesday every month, in this
   * case, week_of_month should be 2.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getWeekOfMonth() {
    return weekOfMonth;
  }

  /**
   * Specifies the index of week in a month. For example, the second Tuesday every month, in this
   * case, week_of_month should be 2.
   * @param weekOfMonth weekOfMonth or {@code null} for none
   */
  public AssistantApiRecurrence setWeekOfMonth(java.util.List<java.lang.Integer> weekOfMonth) {
    this.weekOfMonth = weekOfMonth;
    return this;
  }

  @Override
  public AssistantApiRecurrence set(String fieldName, Object value) {
    return (AssistantApiRecurrence) super.set(fieldName, value);
  }

  @Override
  public AssistantApiRecurrence clone() {
    return (AssistantApiRecurrence) super.clone();
  }

}
