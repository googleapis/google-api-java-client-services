/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Range has 4 use cases: 1. with an explicit begin and an explicit end, e.g. "from Monday to
 * Wednesday." Both |begin| and |end| are filled in this case. 2. a point date/time expression is
 * used as a range at a finer granularity. E.g., in "first Monday of this month", "this month" is
 * used as a range. In this case, only |begin| will be filled and the |end| will be filled during
 * the grounding process. 3. a fuzzy date/time range such as "morning" or "evening." 4. with a
 * relative begin and a relative end, e.g. "from yesterday to next Monday." Note: this may be used
 * in a mixture of exact/relative begin and end. Next available ID: 14.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeRange extends com.google.api.client.json.GenericJson {

  /**
   * Deprecated fields. Do NOT use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeAbsoluteDateTime begin;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRelativeDateTime beginRelative;

  /**
   * if |duration| is set, one field from start or finish must be populated, but not both.
   * |exclusive| value is still relevant to decide if the endpoints of the range are included in the
   * range (value defined in the start/finish fields as well as the datetime value resulting of
   * offseting the duration over the given range endpoint).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeQuantity duration;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeAbsoluteDateTime end;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeRelativeDateTime endRelative;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean exclusive;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTime finish;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fuzzyRange;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeResolutionProperties properties;

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *late* morning
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rangeModifier;

  /**
   * |start| and |finish| are inclusive unless exclusive field is true. the values in start and
   * finish can be an absolute point, a relative or another range. Recurrences and repeated values
   * are not expected/allowed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTime start;

  /**
   * The field is set if the range is the result of resolving/grounding a relative datetime
   * expression referring to a part of the day. E.g. "morning", "afternoon", "evening", "night",
   * "tonight", etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String symbolicValue;

  /**
   * Deprecated fields. Do NOT use.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime getBegin() {
    return begin;
  }

  /**
   * Deprecated fields. Do NOT use.
   * @param begin begin or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setBegin(NlpSemanticParsingDatetimeAbsoluteDateTime begin) {
    this.begin = begin;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRelativeDateTime getBeginRelative() {
    return beginRelative;
  }

  /**
   * @param beginRelative beginRelative or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setBeginRelative(NlpSemanticParsingDatetimeRelativeDateTime beginRelative) {
    this.beginRelative = beginRelative;
    return this;
  }

  /**
   * if |duration| is set, one field from start or finish must be populated, but not both.
   * |exclusive| value is still relevant to decide if the endpoints of the range are included in the
   * range (value defined in the start/finish fields as well as the datetime value resulting of
   * offseting the duration over the given range endpoint).
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity getDuration() {
    return duration;
  }

  /**
   * if |duration| is set, one field from start or finish must be populated, but not both.
   * |exclusive| value is still relevant to decide if the endpoints of the range are included in the
   * range (value defined in the start/finish fields as well as the datetime value resulting of
   * offseting the duration over the given range endpoint).
   * @param duration duration or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setDuration(NlpSemanticParsingDatetimeQuantity duration) {
    this.duration = duration;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeAbsoluteDateTime getEnd() {
    return end;
  }

  /**
   * @param end end or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setEnd(NlpSemanticParsingDatetimeAbsoluteDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRelativeDateTime getEndRelative() {
    return endRelative;
  }

  /**
   * @param endRelative endRelative or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setEndRelative(NlpSemanticParsingDatetimeRelativeDateTime endRelative) {
    this.endRelative = endRelative;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExclusive() {
    return exclusive;
  }

  /**
   * @param exclusive exclusive or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setExclusive(java.lang.Boolean exclusive) {
    this.exclusive = exclusive;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime getFinish() {
    return finish;
  }

  /**
   * @param finish finish or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setFinish(NlpSemanticParsingDatetimeDateTime finish) {
    this.finish = finish;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFuzzyRange() {
    return fuzzyRange;
  }

  /**
   * @param fuzzyRange fuzzyRange or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setFuzzyRange(java.lang.String fuzzyRange) {
    this.fuzzyRange = fuzzyRange;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadata() {
    return metadata;
  }

  /**
   * @param metadata metadata or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setMetadata(java.lang.String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeResolutionProperties getProperties() {
    return properties;
  }

  /**
   * @param properties properties or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setProperties(NlpSemanticParsingDatetimeResolutionProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *late* morning
   * @return value or {@code null} for none
   */
  public java.lang.String getRangeModifier() {
    return rangeModifier;
  }

  /**
   * Modifier that return the appropriate subrange. For more information, see the description of
   * RangeOfDateTimeModifier. Example: * *late* morning
   * @param rangeModifier rangeModifier or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setRangeModifier(java.lang.String rangeModifier) {
    this.rangeModifier = rangeModifier;
    return this;
  }

  /**
   * |start| and |finish| are inclusive unless exclusive field is true. the values in start and
   * finish can be an absolute point, a relative or another range. Recurrences and repeated values
   * are not expected/allowed.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime getStart() {
    return start;
  }

  /**
   * |start| and |finish| are inclusive unless exclusive field is true. the values in start and
   * finish can be an absolute point, a relative or another range. Recurrences and repeated values
   * are not expected/allowed.
   * @param start start or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setStart(NlpSemanticParsingDatetimeDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * The field is set if the range is the result of resolving/grounding a relative datetime
   * expression referring to a part of the day. E.g. "morning", "afternoon", "evening", "night",
   * "tonight", etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getSymbolicValue() {
    return symbolicValue;
  }

  /**
   * The field is set if the range is the result of resolving/grounding a relative datetime
   * expression referring to a part of the day. E.g. "morning", "afternoon", "evening", "night",
   * "tonight", etc.
   * @param symbolicValue symbolicValue or {@code null} for none
   */
  public NlpSemanticParsingDatetimeRange setSymbolicValue(java.lang.String symbolicValue) {
    this.symbolicValue = symbolicValue;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeRange set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeRange) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeRange clone() {
    return (NlpSemanticParsingDatetimeRange) super.clone();
  }

}
