/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v1beta.model;

/**
 * Package is a reference to the software package to be installed or removed. The agent on the VM
 * instance uses the system package manager to apply the config. These are the commands that the
 * agent uses to install or remove packages. Apt install: `apt-get update && apt-get -y install
 * package1 package2 package3` remove: `apt-get -y remove package1 package2 package3` Yum install:
 * `yum -y install package1 package2 package3` remove: `yum -y remove package1 package2 package3`
 * Zypper install: `zypper install package1 package2 package3` remove: `zypper rm package1 package2`
 * Googet install: `googet -noconfirm install package1 package2 package3` remove: `googet -noconfirm
 * remove package1 package2 package3`
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OSConfigPackage extends com.google.api.client.json.GenericJson {

  /**
   * The desired_state the agent should maintain for this package. The default is to ensure the
   * package is installed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String desiredState;

  /**
   * Type of package manager that can be used to install this package. If a system does not have the
   * package manager, the package is not installed or removed no error message is returned. By
   * default, or if you specify `ANY`, the agent attempts to install and remove this package using
   * the default package manager. This is useful when creating a policy that applies to different
   * types of systems. The default behavior is ANY.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String manager;

  /**
   * Required. The name of the package. A package is uniquely identified for conflict validation by
   * checking the package name and the manager(s) that the package targets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The desired_state the agent should maintain for this package. The default is to ensure the
   * package is installed.
   * @return value or {@code null} for none
   */
  public java.lang.String getDesiredState() {
    return desiredState;
  }

  /**
   * The desired_state the agent should maintain for this package. The default is to ensure the
   * package is installed.
   * @param desiredState desiredState or {@code null} for none
   */
  public OSConfigPackage setDesiredState(java.lang.String desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Type of package manager that can be used to install this package. If a system does not have the
   * package manager, the package is not installed or removed no error message is returned. By
   * default, or if you specify `ANY`, the agent attempts to install and remove this package using
   * the default package manager. This is useful when creating a policy that applies to different
   * types of systems. The default behavior is ANY.
   * @return value or {@code null} for none
   */
  public java.lang.String getManager() {
    return manager;
  }

  /**
   * Type of package manager that can be used to install this package. If a system does not have the
   * package manager, the package is not installed or removed no error message is returned. By
   * default, or if you specify `ANY`, the agent attempts to install and remove this package using
   * the default package manager. This is useful when creating a policy that applies to different
   * types of systems. The default behavior is ANY.
   * @param manager manager or {@code null} for none
   */
  public OSConfigPackage setManager(java.lang.String manager) {
    this.manager = manager;
    return this;
  }

  /**
   * Required. The name of the package. A package is uniquely identified for conflict validation by
   * checking the package name and the manager(s) that the package targets.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The name of the package. A package is uniquely identified for conflict validation by
   * checking the package name and the manager(s) that the package targets.
   * @param name name or {@code null} for none
   */
  public OSConfigPackage setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public OSConfigPackage set(String fieldName, Object value) {
    return (OSConfigPackage) super.set(fieldName, value);
  }

  @Override
  public OSConfigPackage clone() {
    return (OSConfigPackage) super.clone();
  }

}
