/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dialogflow.v3beta1.model;

/**
 * The CA certificate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dialogflow API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert extends com.google.api.client.json.GenericJson {

  /**
   * Required. The allowed custom CA certificates (in DER format) for HTTPS verification. This
   * overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use
   * Google's default trust store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a certificate can be self-signed
   * using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey
   * example.com.key \ -out example.com.crt \ -extfile <(printf
   * "\nsubjectAltName='DNS:www.example.com'")
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cert;

  /**
   * Required. The name of the allowed custom CA certificates. This can be used to disambiguate the
   * custom CA certificates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Required. The allowed custom CA certificates (in DER format) for HTTPS verification. This
   * overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use
   * Google's default trust store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a certificate can be self-signed
   * using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey
   * example.com.key \ -out example.com.crt \ -extfile <(printf
   * "\nsubjectAltName='DNS:www.example.com'")
   * @see #decodeCert()
   * @return value or {@code null} for none
   */
  public java.lang.String getCert() {
    return cert;
  }

  /**
   * Required. The allowed custom CA certificates (in DER format) for HTTPS verification. This
   * overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use
   * Google's default trust store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a certificate can be self-signed
   * using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey
   * example.com.key \ -out example.com.crt \ -extfile <(printf
   * "\nsubjectAltName='DNS:www.example.com'")
   * @see #getCert()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCert() {
    return com.google.api.client.util.Base64.decodeBase64(cert);
  }

  /**
   * Required. The allowed custom CA certificates (in DER format) for HTTPS verification. This
   * overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use
   * Google's default trust store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a certificate can be self-signed
   * using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey
   * example.com.key \ -out example.com.crt \ -extfile <(printf
   * "\nsubjectAltName='DNS:www.example.com'")
   * @see #encodeCert()
   * @param cert cert or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert setCert(java.lang.String cert) {
    this.cert = cert;
    return this;
  }

  /**
   * Required. The allowed custom CA certificates (in DER format) for HTTPS verification. This
   * overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use
   * Google's default trust store to verify certificates. N.B. Make sure the HTTPS server
   * certificates are signed with "subject alt name". For instance a certificate can be self-signed
   * using the following command, openssl x509 -req -days 200 -in example.com.csr \ -signkey
   * example.com.key \ -out example.com.crt \ -extfile <(printf
   * "\nsubjectAltName='DNS:www.example.com'")
   * @see #setCert()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert encodeCert(byte[] cert) {
    this.cert = com.google.api.client.util.Base64.encodeBase64URLSafeString(cert);
    return this;
  }

  /**
   * Required. The name of the allowed custom CA certificates. This can be used to disambiguate the
   * custom CA certificates.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. The name of the allowed custom CA certificates. This can be used to disambiguate the
   * custom CA certificates.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  @Override
  public GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert set(String fieldName, Object value) {
    return (GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert clone() {
    return (GoogleCloudDialogflowCxV3beta1ToolTLSConfigCACert) super.clone();
  }

}
