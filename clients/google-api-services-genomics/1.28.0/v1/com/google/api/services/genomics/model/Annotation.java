/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * An annotation describes a region of reference genome. The value of an annotation may be one of
 * several canonical types, supplemented by arbitrary info tags. An annotation is not inherently
 * associated with a specific sample or individual (though a client could choose to use annotations
 * in this way). Example canonical annotation types are `GENE` and `VARIANT`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Annotation extends com.google.api.client.json.GenericJson {

  /**
   * The annotation set to which this annotation belongs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String annotationSetId;

  /**
   * The end position of the range on the reference, 0-based exclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long end;

  /**
   * The server-generated annotation ID, unique across all annotations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * A map of additional read alignment information. This must be of the form map (string key
   * mapping to a list of string values).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.util.List<java.lang.Object>> info;

  /**
   * The display name of this annotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The ID of the Google Genomics reference associated with this range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceId;

  /**
   * The display name corresponding to the reference specified by `referenceId`, for example `chr1`,
   * `1`, or `chrX`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceName;

  /**
   * Whether this range refers to the reverse strand, as opposed to the forward strand. Note that
   * regardless of this field, the start/end position of the range always refer to the forward
   * strand.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reverseStrand;

  /**
   * The start position of the range on the reference, 0-based inclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long start;

  /**
   * A transcript value represents the assertion that a particular region of the reference genome
   * may be transcribed as RNA. An alternative splicing pattern would be represented as a separate
   * transcript object. This field is only set for annotations of type `TRANSCRIPT`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Transcript transcript;

  /**
   * The data type for this annotation. Must match the containing annotation set's type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * A variant annotation, which describes the effect of a variant on the genome, the coding
   * sequence, and/or higher level consequences at the organism level e.g. pathogenicity. This field
   * is only set for annotations of type `VARIANT`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VariantAnnotation variant;

  /**
   * The annotation set to which this annotation belongs.
   * @return value or {@code null} for none
   */
  public java.lang.String getAnnotationSetId() {
    return annotationSetId;
  }

  /**
   * The annotation set to which this annotation belongs.
   * @param annotationSetId annotationSetId or {@code null} for none
   */
  public Annotation setAnnotationSetId(java.lang.String annotationSetId) {
    this.annotationSetId = annotationSetId;
    return this;
  }

  /**
   * The end position of the range on the reference, 0-based exclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * The end position of the range on the reference, 0-based exclusive.
   * @param end end or {@code null} for none
   */
  public Annotation setEnd(java.lang.Long end) {
    this.end = end;
    return this;
  }

  /**
   * The server-generated annotation ID, unique across all annotations.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The server-generated annotation ID, unique across all annotations.
   * @param id id or {@code null} for none
   */
  public Annotation setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * A map of additional read alignment information. This must be of the form map (string key
   * mapping to a list of string values).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.util.List<java.lang.Object>> getInfo() {
    return info;
  }

  /**
   * A map of additional read alignment information. This must be of the form map (string key
   * mapping to a list of string values).
   * @param info info or {@code null} for none
   */
  public Annotation setInfo(java.util.Map<String, java.util.List<java.lang.Object>> info) {
    this.info = info;
    return this;
  }

  /**
   * The display name of this annotation.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The display name of this annotation.
   * @param name name or {@code null} for none
   */
  public Annotation setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The ID of the Google Genomics reference associated with this range.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceId() {
    return referenceId;
  }

  /**
   * The ID of the Google Genomics reference associated with this range.
   * @param referenceId referenceId or {@code null} for none
   */
  public Annotation setReferenceId(java.lang.String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * The display name corresponding to the reference specified by `referenceId`, for example `chr1`,
   * `1`, or `chrX`.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceName() {
    return referenceName;
  }

  /**
   * The display name corresponding to the reference specified by `referenceId`, for example `chr1`,
   * `1`, or `chrX`.
   * @param referenceName referenceName or {@code null} for none
   */
  public Annotation setReferenceName(java.lang.String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

  /**
   * Whether this range refers to the reverse strand, as opposed to the forward strand. Note that
   * regardless of this field, the start/end position of the range always refer to the forward
   * strand.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReverseStrand() {
    return reverseStrand;
  }

  /**
   * Whether this range refers to the reverse strand, as opposed to the forward strand. Note that
   * regardless of this field, the start/end position of the range always refer to the forward
   * strand.
   * @param reverseStrand reverseStrand or {@code null} for none
   */
  public Annotation setReverseStrand(java.lang.Boolean reverseStrand) {
    this.reverseStrand = reverseStrand;
    return this;
  }

  /**
   * The start position of the range on the reference, 0-based inclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * The start position of the range on the reference, 0-based inclusive.
   * @param start start or {@code null} for none
   */
  public Annotation setStart(java.lang.Long start) {
    this.start = start;
    return this;
  }

  /**
   * A transcript value represents the assertion that a particular region of the reference genome
   * may be transcribed as RNA. An alternative splicing pattern would be represented as a separate
   * transcript object. This field is only set for annotations of type `TRANSCRIPT`.
   * @return value or {@code null} for none
   */
  public Transcript getTranscript() {
    return transcript;
  }

  /**
   * A transcript value represents the assertion that a particular region of the reference genome
   * may be transcribed as RNA. An alternative splicing pattern would be represented as a separate
   * transcript object. This field is only set for annotations of type `TRANSCRIPT`.
   * @param transcript transcript or {@code null} for none
   */
  public Annotation setTranscript(Transcript transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * The data type for this annotation. Must match the containing annotation set's type.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The data type for this annotation. Must match the containing annotation set's type.
   * @param type type or {@code null} for none
   */
  public Annotation setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * A variant annotation, which describes the effect of a variant on the genome, the coding
   * sequence, and/or higher level consequences at the organism level e.g. pathogenicity. This field
   * is only set for annotations of type `VARIANT`.
   * @return value or {@code null} for none
   */
  public VariantAnnotation getVariant() {
    return variant;
  }

  /**
   * A variant annotation, which describes the effect of a variant on the genome, the coding
   * sequence, and/or higher level consequences at the organism level e.g. pathogenicity. This field
   * is only set for annotations of type `VARIANT`.
   * @param variant variant or {@code null} for none
   */
  public Annotation setVariant(VariantAnnotation variant) {
    this.variant = variant;
    return this;
  }

  @Override
  public Annotation set(String fieldName, Object value) {
    return (Annotation) super.set(fieldName, value);
  }

  @Override
  public Annotation clone() {
    return (Annotation) super.clone();
  }

}
