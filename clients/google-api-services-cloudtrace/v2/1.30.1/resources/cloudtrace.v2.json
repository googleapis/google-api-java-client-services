{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/trace.append": {
          "description": "Write Trace data for a project or application"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "rootUrl": "https://cloudtrace.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "cloudtrace",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Stackdriver Trace API",
  "ownerName": "Google",
  "resources": {
    "projects": {
      "resources": {
        "traces": {
          "methods": {
            "batchWrite": {
              "request": {
                "$ref": "BatchWriteSpansRequest"
              },
              "description": "Sends new spans to new or existing traces. You cannot update\nexisting spans.\nIn this case, writing traces is not considered an active developer\nmethod since traces are machine generated.",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.append"
              ],
              "parameters": {
                "name": {
                  "description": "Required. The name of the project where the spans belong. The format is\n`projects/[PROJECT_ID]`.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v2/projects/{projectsId}/traces:batchWrite",
              "path": "v2/{+name}/traces:batchWrite",
              "id": "cloudtrace.projects.traces.batchWrite"
            }
          },
          "resources": {
            "spans": {
              "methods": {
                "createSpan": {
                  "response": {
                    "$ref": "Span"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/trace.append"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/traces/[^/]+/spans/[^/]+$",
                      "location": "path",
                      "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project;\nit is a 32-character hexadecimal encoding of a 16-byte array.\n\n[SPAN_ID] is a unique identifier for a span within a trace; it\nis a 16-character hexadecimal encoding of an 8-byte array."
                    }
                  },
                  "flatPath": "v2/projects/{projectsId}/traces/{tracesId}/spans/{spansId}",
                  "path": "v2/{+name}",
                  "id": "cloudtrace.projects.traces.spans.createSpan",
                  "request": {
                    "$ref": "Span"
                  },
                  "description": "Creates a new span.\nIn this case, writing traces is not considered an active developer\nmethod since traces are machine generated."
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "alt": {
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    }
  },
  "version": "v2",
  "baseUrl": "https://cloudtrace.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "Sends application trace data to Stackdriver Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Trace API directly. If you are looking to instrument your application for Stackdriver Trace, we recommend using OpenCensus.\n",
  "servicePath": "",
  "basePath": "",
  "revision": "20200203",
  "id": "cloudtrace:v2",
  "documentationLink": "https://cloud.google.com/trace",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "Attributes": {
      "properties": {
        "droppedAttributesCount": {
          "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
          "format": "int32",
          "type": "integer"
        },
        "attributeMap": {
          "additionalProperties": {
            "$ref": "AttributeValue"
          },
          "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, a signed 64-bit integer,\nor the Boolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
          "type": "object"
        }
      },
      "id": "Attributes",
      "description": "A set of attributes, each in the format `[KEY]:[VALUE]`.",
      "type": "object"
    },
    "Links": {
      "id": "Links",
      "description": "A collection of links, which are references from this span to a span\nin the same or different trace.",
      "type": "object",
      "properties": {
        "droppedLinksCount": {
          "description": "The number of dropped links after the maximum size was enforced. If\nthis value is 0, then no links were dropped.",
          "format": "int32",
          "type": "integer"
        },
        "link": {
          "description": "A collection of links.",
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        }
      }
    },
    "StackTrace": {
      "description": "A call stack appearing in a trace.",
      "type": "object",
      "properties": {
        "stackFrames": {
          "$ref": "StackFrames",
          "description": "Stack frames in this stack trace. A maximum of 128 frames are allowed."
        },
        "stackTraceHashId": {
          "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurrence of a stack trace should contain both the\n`stackFrame` content and a value in `stackTraceHashId`.\n\nSubsequent spans within the same request can refer\nto that stack trace by only setting `stackTraceHashId`.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "StackTrace"
    },
    "TruncatableString": {
      "description": "Represents a string that might be shortened to a specified length.",
      "type": "object",
      "properties": {
        "truncatedByteCount": {
          "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string",
          "description": "The shortened string. For example, if the original string is 500\nbytes long and the limit of the string is 128 bytes, then\n`value` contains the first 128 bytes of the 500-byte string.\n\nTruncation always happens on a UTF8 character boundary. If there\nare multi-byte characters in the string, then the length of the\nshortened string might be less than the size limit."
        }
      },
      "id": "TruncatableString"
    },
    "TimeEvent": {
      "properties": {
        "annotation": {
          "$ref": "Annotation",
          "description": "Text annotation with a set of attributes."
        },
        "messageEvent": {
          "description": "An event describing a message sent/received between Spans.",
          "$ref": "MessageEvent"
        },
        "time": {
          "description": "The timestamp indicating the time the event occurred.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "TimeEvent",
      "description": "A time-stamped annotation or message event in the Span.",
      "type": "object"
    },
    "MessageEvent": {
      "description": "An event describing a message sent/received between Spans.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An identifier for the MessageEvent's message that can be used to match\nSENT and RECEIVED MessageEvents. It is recommended to be unique within\na Span.",
          "format": "int64",
          "type": "string"
        },
        "compressedSizeBytes": {
          "description": "The number of compressed bytes sent or received. If missing assumed to\nbe the same size as uncompressed.",
          "format": "int64",
          "type": "string"
        },
        "uncompressedSizeBytes": {
          "type": "string",
          "description": "The number of uncompressed bytes sent or received.",
          "format": "int64"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "SENT",
            "RECEIVED"
          ],
          "description": "Type of MessageEvent. Indicates whether the message was sent or\nreceived.",
          "type": "string",
          "enumDescriptions": [
            "Unknown event type.",
            "Indicates a sent message.",
            "Indicates a received message."
          ]
        }
      },
      "id": "MessageEvent"
    },
    "StackFrame": {
      "description": "Represents a single stack frame in a stack trace.",
      "type": "object",
      "properties": {
        "functionName": {
          "$ref": "TruncatableString",
          "description": "The fully-qualified name that uniquely identifies the function or\nmethod that is active in this frame (up to 1024 bytes)."
        },
        "lineNumber": {
          "description": "The line number in `file_name` where the function call appears.",
          "format": "int64",
          "type": "string"
        },
        "loadModule": {
          "$ref": "Module",
          "description": "The binary module from where the code was loaded."
        },
        "columnNumber": {
          "description": "The column number where the function call appears, if available.\nThis is important in JavaScript because of its anonymous functions.",
          "format": "int64",
          "type": "string"
        },
        "fileName": {
          "description": "The name of the source file where the function call appears (up to 256\nbytes).",
          "$ref": "TruncatableString"
        },
        "sourceVersion": {
          "$ref": "TruncatableString",
          "description": "The version of the deployed source code (up to 128 bytes)."
        },
        "originalFunctionName": {
          "$ref": "TruncatableString",
          "description": "An un-mangled function name, if `function_name` is\n[mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can\nbe fully-qualified (up to 1024 bytes)."
        }
      },
      "id": "StackFrame"
    },
    "Link": {
      "id": "Link",
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project.",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "The relationship of the two spans is unknown.",
            "The linked span is a child of the current span.",
            "The linked span is a parent of the current span."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "CHILD_LINKED_SPAN",
            "PARENT_LINKED_SPAN"
          ],
          "description": "The relationship of the current span relative to the linked span.",
          "type": "string"
        },
        "traceId": {
          "description": "The [TRACE_ID] for a trace within a project.",
          "type": "string"
        },
        "attributes": {
          "description": "A set of attributes on the link. You have have up to  32 attributes per\nlink.",
          "$ref": "Attributes"
        },
        "spanId": {
          "description": "The [SPAN_ID] for a span within a trace.",
          "type": "string"
        }
      }
    },
    "Annotation": {
      "properties": {
        "description": {
          "description": "A user-supplied message describing the event. The maximum length for\nthe description is 256 bytes.",
          "$ref": "TruncatableString"
        },
        "attributes": {
          "description": "A set of attributes on the annotation. You can have up to 4 attributes\nper Annotation.",
          "$ref": "Attributes"
        }
      },
      "id": "Annotation",
      "description": "Text annotation with a set of attributes.",
      "type": "object"
    },
    "StackFrames": {
      "description": "A collection of stack frames, which can be truncated.",
      "type": "object",
      "properties": {
        "droppedFramesCount": {
          "description": "The number of stack frames that were dropped because there\nwere too many stack frames.\nIf this value is 0, then no stack frames were dropped.",
          "format": "int32",
          "type": "integer"
        },
        "frame": {
          "description": "Stack frames in this call stack.",
          "type": "array",
          "items": {
            "$ref": "StackFrame"
          }
        }
      },
      "id": "StackFrames"
    },
    "TimeEvents": {
      "type": "object",
      "properties": {
        "droppedAnnotationsCount": {
          "description": "The number of dropped annotations in all the included time events.\nIf the value is 0, then no annotations were dropped.",
          "format": "int32",
          "type": "integer"
        },
        "droppedMessageEventsCount": {
          "type": "integer",
          "description": "The number of dropped message events in all the included time events.\nIf the value is 0, then no message events were dropped.",
          "format": "int32"
        },
        "timeEvent": {
          "description": "A collection of `TimeEvent`s.",
          "type": "array",
          "items": {
            "$ref": "TimeEvent"
          }
        }
      },
      "id": "TimeEvents",
      "description": "A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation\non the span, consisting of either user-supplied key:value pairs, or\ndetails of a message sent/received between Spans."
    },
    "Module": {
      "description": "Binary module.",
      "type": "object",
      "properties": {
        "module": {
          "$ref": "TruncatableString",
          "description": "For example: main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so (up to 256 bytes)."
        },
        "buildId": {
          "description": "A unique identifier for the module, usually a hash of its\ncontents (up to 128 bytes).",
          "$ref": "TruncatableString"
        }
      },
      "id": "Module"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          }
        }
      },
      "id": "Status"
    },
    "BatchWriteSpansRequest": {
      "id": "BatchWriteSpansRequest",
      "description": "The request message for the `BatchWriteSpans` method.",
      "type": "object",
      "properties": {
        "spans": {
          "description": "Required. A list of new spans. The span names must not match existing\nspans, or the results are undefined.",
          "type": "array",
          "items": {
            "$ref": "Span"
          }
        }
      }
    },
    "Span": {
      "description": "A span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Often, a trace contains a root span\nthat describes the end-to-end latency, and one or more subspans for\nits sub-operations. A trace can also contain multiple root spans,\nor none at all. Spans do not need to be contiguous&mdash;there may be\ngaps or overlaps between spans in a trace.",
      "type": "object",
      "properties": {
        "endTime": {
          "description": "Required. The end time of the span. On the client side, this is the time kept by\nthe local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.",
          "format": "google-datetime",
          "type": "string"
        },
        "spanKind": {
          "enumDescriptions": [
            "Unspecified. Do NOT use as default.\nImplementations MAY assume SpanKind.INTERNAL to be default.",
            "Indicates that the span is used internally. Default value.",
            "Indicates that the span covers server-side handling of an RPC or other\nremote network request.",
            "Indicates that the span covers the client-side wrapper around an RPC or\nother remote request.",
            "Indicates that the span describes producer sending a message to a broker.\nUnlike client and  server, there is no direct critical path latency\nrelationship between producer and consumer spans (e.g. publishing a\nmessage to a pubsub service).",
            "Indicates that the span describes consumer recieving a message from a\nbroker. Unlike client and  server, there is no direct critical path\nlatency relationship between producer and consumer spans (e.g. receiving\na message from a pubsub service subscription)."
          ],
          "enum": [
            "SPAN_KIND_UNSPECIFIED",
            "INTERNAL",
            "SERVER",
            "CLIENT",
            "PRODUCER",
            "CONSUMER"
          ],
          "description": "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `CLIENT` (caller)\nand `SERVER` (callee) to identify an RPC call.",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "description": "Required. The start time of the span. On the client side, this is the time kept by\nthe local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.",
          "format": "google-datetime"
        },
        "displayName": {
          "$ref": "TruncatableString",
          "description": "Required. A description of the span's operation (up to 128 bytes).\nStackdriver Trace displays the description in the\nGoogle Cloud Platform Console.\nFor example, the display name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name within an application and at the same call point.\nThis makes it easier to correlate spans in different traces."
        },
        "timeEvents": {
          "description": "A set of time events. You can have up to 32 annotations and 128 message\nevents per span.",
          "$ref": "TimeEvents"
        },
        "links": {
          "$ref": "Links",
          "description": "Links associated with the span. You can have up to 128 links per Span."
        },
        "attributes": {
          "$ref": "Attributes",
          "description": "A set of attributes on the span. You can have up to 32 attributes per\nspan."
        },
        "spanId": {
          "type": "string",
          "description": "Required. The [SPAN_ID] portion of the span's resource name."
        },
        "childSpanCount": {
          "description": "Optional. The number of child spans that were generated while this span\nwas active. If set, allows implementation to detect missing child spans.",
          "format": "int32",
          "type": "integer"
        },
        "sameProcessAsParentSpan": {
          "description": "Optional. Set this parameter to indicate whether this span is in\nthe same process as its parent. If you do not set this parameter,\nStackdriver Trace is unable to take advantage of this helpful\ninformation.",
          "type": "boolean"
        },
        "status": {
          "$ref": "Status",
          "description": "Optional. The final status for this span."
        },
        "name": {
          "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project;\nit is a 32-character hexadecimal encoding of a 16-byte array.\n\n[SPAN_ID] is a unique identifier for a span within a trace; it\nis a 16-character hexadecimal encoding of an 8-byte array.",
          "type": "string"
        },
        "stackTrace": {
          "description": "Stack trace captured at the start of the span.",
          "$ref": "StackTrace"
        },
        "parentSpanId": {
          "description": "The [SPAN_ID] of this span's parent span. If this is a root span,\nthen this field must be empty.",
          "type": "string"
        }
      },
      "id": "Span"
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "AttributeValue": {
      "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
      "type": "object",
      "properties": {
        "intValue": {
          "description": "A 64-bit signed integer.",
          "format": "int64",
          "type": "string"
        },
        "stringValue": {
          "$ref": "TruncatableString",
          "description": "A string up to 256 bytes long."
        },
        "boolValue": {
          "description": "A Boolean value represented by `true` or `false`.",
          "type": "boolean"
        }
      },
      "id": "AttributeValue"
    }
  },
  "protocol": "rest",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "canonicalName": "Cloud Trace"
}
