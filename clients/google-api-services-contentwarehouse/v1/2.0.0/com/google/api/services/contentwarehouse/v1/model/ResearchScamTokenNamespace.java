/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for ResearchScamTokenNamespace.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScamTokenNamespace extends com.google.api.client.json.GenericJson {

  /**
   * If present, override |string_blacklist_tokens|.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> bytesBlocklistTokens;

  /**
   * If present, override |string_tokens|
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> bytesTokens;

  /**
   * / NAMESPACE - the string name of the namespace that this proto is specifying, such as "color",
   * "shape", "geo", or "tags". Recall that your overall query is an AND across namespaces.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String namespace;

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> stringBlacklistTokens;

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> stringTokens;

  /**
   * TODO(qhliao) rename to |uint64_blocklist_tokens| eventually.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.math.BigInteger> uint64BlacklistTokens;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.math.BigInteger> uint64Tokens;

  /**
   * If present, override |string_blacklist_tokens|.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBytesBlocklistTokens() {
    return bytesBlocklistTokens;
  }

  /**
   * If present, override |string_blacklist_tokens|.
   * @param bytesBlocklistTokens bytesBlocklistTokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setBytesBlocklistTokens(java.util.List<java.lang.String> bytesBlocklistTokens) {
    this.bytesBlocklistTokens = bytesBlocklistTokens;
    return this;
  }

  /**
   * If present, override |string_tokens|
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBytesTokens() {
    return bytesTokens;
  }

  /**
   * If present, override |string_tokens|
   * @param bytesTokens bytesTokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setBytesTokens(java.util.List<java.lang.String> bytesTokens) {
    this.bytesTokens = bytesTokens;
    return this;
  }

  /**
   * / NAMESPACE - the string name of the namespace that this proto is specifying, such as "color",
   * "shape", "geo", or "tags". Recall that your overall query is an AND across namespaces.
   * @return value or {@code null} for none
   */
  public java.lang.String getNamespace() {
    return namespace;
  }

  /**
   * / NAMESPACE - the string name of the namespace that this proto is specifying, such as "color",
   * "shape", "geo", or "tags". Recall that your overall query is an AND across namespaces.
   * @param namespace namespace or {@code null} for none
   */
  public ResearchScamTokenNamespace setNamespace(java.lang.String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getStringBlacklistTokens() {
    return stringBlacklistTokens;
  }

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * @param stringBlacklistTokens stringBlacklistTokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setStringBlacklistTokens(java.util.List<java.lang.String> stringBlacklistTokens) {
    this.stringBlacklistTokens = stringBlacklistTokens;
    return this;
  }

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getStringTokens() {
    return stringTokens;
  }

  /**
   * New use cases should prefer |bytes_tokens|, go/fast/11#bytes-vs-string When migrate, need to be
   * consistent in both dataset and query.
   * @param stringTokens stringTokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setStringTokens(java.util.List<java.lang.String> stringTokens) {
    this.stringTokens = stringTokens;
    return this;
  }

  /**
   * TODO(qhliao) rename to |uint64_blocklist_tokens| eventually.
   * @return value or {@code null} for none
   */
  public java.util.List<java.math.BigInteger> getUint64BlacklistTokens() {
    return uint64BlacklistTokens;
  }

  /**
   * TODO(qhliao) rename to |uint64_blocklist_tokens| eventually.
   * @param uint64BlacklistTokens uint64BlacklistTokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setUint64BlacklistTokens(java.util.List<java.math.BigInteger> uint64BlacklistTokens) {
    this.uint64BlacklistTokens = uint64BlacklistTokens;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.math.BigInteger> getUint64Tokens() {
    return uint64Tokens;
  }

  /**
   * @param uint64Tokens uint64Tokens or {@code null} for none
   */
  public ResearchScamTokenNamespace setUint64Tokens(java.util.List<java.math.BigInteger> uint64Tokens) {
    this.uint64Tokens = uint64Tokens;
    return this;
  }

  @Override
  public ResearchScamTokenNamespace set(String fieldName, Object value) {
    return (ResearchScamTokenNamespace) super.set(fieldName, value);
  }

  @Override
  public ResearchScamTokenNamespace clone() {
    return (ResearchScamTokenNamespace) super.clone();
  }

}
