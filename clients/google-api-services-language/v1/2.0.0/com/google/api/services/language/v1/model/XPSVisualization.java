/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1.model;

/**
 * Visualization configurations for image explanation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSVisualization extends com.google.api.client.json.GenericJson {

  /**
   * Excludes attributions below the specified percentile, from the highlighted areas. Defaults to
   * 62.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float clipPercentLowerbound;

  /**
   * Excludes attributions above the specified percentile from the highlighted areas. Using the
   * clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out
   * noise and making it easier to see areas of strong attribution. Defaults to 99.9.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float clipPercentUpperbound;

  /**
   * The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated
   * Gradients attribution, which shows positive attributions in green and negative in pink.
   * Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in
   * yellow and the least influential in blue.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String colorMap;

  /**
   * How the original image is displayed in the visualization. Adjusting the overlay can help
   * increase visual clarity if the original image makes it difficult to view the visualization.
   * Defaults to NONE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String overlayType;

  /**
   * Whether to only highlight pixels with positive contributions, negative or both. Defaults to
   * POSITIVE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String polarity;

  /**
   * Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES
   * shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Excludes attributions below the specified percentile, from the highlighted areas. Defaults to
   * 62.
   * @return value or {@code null} for none
   */
  public java.lang.Float getClipPercentLowerbound() {
    return clipPercentLowerbound;
  }

  /**
   * Excludes attributions below the specified percentile, from the highlighted areas. Defaults to
   * 62.
   * @param clipPercentLowerbound clipPercentLowerbound or {@code null} for none
   */
  public XPSVisualization setClipPercentLowerbound(java.lang.Float clipPercentLowerbound) {
    this.clipPercentLowerbound = clipPercentLowerbound;
    return this;
  }

  /**
   * Excludes attributions above the specified percentile from the highlighted areas. Using the
   * clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out
   * noise and making it easier to see areas of strong attribution. Defaults to 99.9.
   * @return value or {@code null} for none
   */
  public java.lang.Float getClipPercentUpperbound() {
    return clipPercentUpperbound;
  }

  /**
   * Excludes attributions above the specified percentile from the highlighted areas. Using the
   * clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out
   * noise and making it easier to see areas of strong attribution. Defaults to 99.9.
   * @param clipPercentUpperbound clipPercentUpperbound or {@code null} for none
   */
  public XPSVisualization setClipPercentUpperbound(java.lang.Float clipPercentUpperbound) {
    this.clipPercentUpperbound = clipPercentUpperbound;
    return this;
  }

  /**
   * The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated
   * Gradients attribution, which shows positive attributions in green and negative in pink.
   * Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in
   * yellow and the least influential in blue.
   * @return value or {@code null} for none
   */
  public java.lang.String getColorMap() {
    return colorMap;
  }

  /**
   * The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated
   * Gradients attribution, which shows positive attributions in green and negative in pink.
   * Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in
   * yellow and the least influential in blue.
   * @param colorMap colorMap or {@code null} for none
   */
  public XPSVisualization setColorMap(java.lang.String colorMap) {
    this.colorMap = colorMap;
    return this;
  }

  /**
   * How the original image is displayed in the visualization. Adjusting the overlay can help
   * increase visual clarity if the original image makes it difficult to view the visualization.
   * Defaults to NONE.
   * @return value or {@code null} for none
   */
  public java.lang.String getOverlayType() {
    return overlayType;
  }

  /**
   * How the original image is displayed in the visualization. Adjusting the overlay can help
   * increase visual clarity if the original image makes it difficult to view the visualization.
   * Defaults to NONE.
   * @param overlayType overlayType or {@code null} for none
   */
  public XPSVisualization setOverlayType(java.lang.String overlayType) {
    this.overlayType = overlayType;
    return this;
  }

  /**
   * Whether to only highlight pixels with positive contributions, negative or both. Defaults to
   * POSITIVE.
   * @return value or {@code null} for none
   */
  public java.lang.String getPolarity() {
    return polarity;
  }

  /**
   * Whether to only highlight pixels with positive contributions, negative or both. Defaults to
   * POSITIVE.
   * @param polarity polarity or {@code null} for none
   */
  public XPSVisualization setPolarity(java.lang.String polarity) {
    this.polarity = polarity;
    return this;
  }

  /**
   * Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES
   * shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES
   * shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
   * @param type type or {@code null} for none
   */
  public XPSVisualization setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public XPSVisualization set(String fieldName, Object value) {
    return (XPSVisualization) super.set(fieldName, value);
  }

  @Override
  public XPSVisualization clone() {
    return (XPSVisualization) super.clone();
  }

}
