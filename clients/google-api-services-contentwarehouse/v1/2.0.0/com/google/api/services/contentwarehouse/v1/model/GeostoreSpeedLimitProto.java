/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A speed limit, containing both the limit and the conditions in which it applies.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreSpeedLimitProto extends com.google.api.client.json.GenericJson {

  /**
   * The type of speed limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * The conditions under which this speed limit is applicable. If multiple conditions are set, at
   * least one of them must be true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreRoadConditionalProto> condition;

  static {
    // hack to force ProGuard to consider GeostoreRoadConditionalProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreRoadConditionalProto.class);
  }

  /**
   * A constant speed limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreSpeedProto speedWithUnit;

  /**
   * A speed limit with no limit value. When there is no speed limit in place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreUnlimitedSpeedProto unlimitedSpeed;

  /**
   * A dynamic speed limit that can vary within a range of values based on road conditions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreVariableSpeedProto variableSpeed;

  /**
   * The type of speed limit.
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * The type of speed limit.
   * @param category category or {@code null} for none
   */
  public GeostoreSpeedLimitProto setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * The conditions under which this speed limit is applicable. If multiple conditions are set, at
   * least one of them must be true.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreRoadConditionalProto> getCondition() {
    return condition;
  }

  /**
   * The conditions under which this speed limit is applicable. If multiple conditions are set, at
   * least one of them must be true.
   * @param condition condition or {@code null} for none
   */
  public GeostoreSpeedLimitProto setCondition(java.util.List<GeostoreRoadConditionalProto> condition) {
    this.condition = condition;
    return this;
  }

  /**
   * A constant speed limit.
   * @return value or {@code null} for none
   */
  public GeostoreSpeedProto getSpeedWithUnit() {
    return speedWithUnit;
  }

  /**
   * A constant speed limit.
   * @param speedWithUnit speedWithUnit or {@code null} for none
   */
  public GeostoreSpeedLimitProto setSpeedWithUnit(GeostoreSpeedProto speedWithUnit) {
    this.speedWithUnit = speedWithUnit;
    return this;
  }

  /**
   * A speed limit with no limit value. When there is no speed limit in place.
   * @return value or {@code null} for none
   */
  public GeostoreUnlimitedSpeedProto getUnlimitedSpeed() {
    return unlimitedSpeed;
  }

  /**
   * A speed limit with no limit value. When there is no speed limit in place.
   * @param unlimitedSpeed unlimitedSpeed or {@code null} for none
   */
  public GeostoreSpeedLimitProto setUnlimitedSpeed(GeostoreUnlimitedSpeedProto unlimitedSpeed) {
    this.unlimitedSpeed = unlimitedSpeed;
    return this;
  }

  /**
   * A dynamic speed limit that can vary within a range of values based on road conditions.
   * @return value or {@code null} for none
   */
  public GeostoreVariableSpeedProto getVariableSpeed() {
    return variableSpeed;
  }

  /**
   * A dynamic speed limit that can vary within a range of values based on road conditions.
   * @param variableSpeed variableSpeed or {@code null} for none
   */
  public GeostoreSpeedLimitProto setVariableSpeed(GeostoreVariableSpeedProto variableSpeed) {
    this.variableSpeed = variableSpeed;
    return this;
  }

  @Override
  public GeostoreSpeedLimitProto set(String fieldName, Object value) {
    return (GeostoreSpeedLimitProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreSpeedLimitProto clone() {
    return (GeostoreSpeedLimitProto) super.clone();
  }

}
