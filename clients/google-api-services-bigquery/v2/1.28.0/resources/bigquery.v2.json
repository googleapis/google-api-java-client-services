{
  "protocol": "rest",
  "icons": {
    "x32": "https://www.google.com/images/icons/product/search-32.gif",
    "x16": "https://www.google.com/images/icons/product/search-16.gif"
  },
  "version": "v2",
  "baseUrl": "https://www.googleapis.com/bigquery/v2/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/devstorage.full_control": {
          "description": "Manage your data and permissions in Google Cloud Storage"
        },
        "https://www.googleapis.com/auth/devstorage.read_only": {
          "description": "View your data in Google Cloud Storage"
        },
        "https://www.googleapis.com/auth/devstorage.read_write": {
          "description": "Manage your data in Google Cloud Storage"
        },
        "https://www.googleapis.com/auth/bigquery": {
          "description": "View and manage your data in Google BigQuery"
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/bigquery.insertdata": {
          "description": "Insert data into Google BigQuery"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/bigquery.readonly": {
          "description": "View your data in Google BigQuery"
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "description": "A data platform for customers to create, manage, share and query data.",
  "servicePath": "bigquery/v2/",
  "rootUrl": "https://www.googleapis.com/",
  "basePath": "/bigquery/v2/",
  "ownerDomain": "google.com",
  "name": "bigquery",
  "batchPath": "batch/bigquery/v2",
  "revision": "20190724",
  "documentationLink": "https://cloud.google.com/bigquery/",
  "id": "bigquery:v2",
  "title": "BigQuery API",
  "discoveryVersion": "v1",
  "ownerName": "Google",
  "resources": {
    "jobs": {
      "methods": {
        "query": {
          "parameters": {
            "projectId": {
              "description": "Project ID of the project billed for the query",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "path": "projects/{projectId}/queries",
          "id": "bigquery.jobs.query",
          "request": {
            "$ref": "QueryRequest"
          },
          "description": "Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.",
          "response": {
            "$ref": "QueryResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "POST"
        },
        "list": {
          "path": "projects/{projectId}/jobs",
          "id": "bigquery.jobs.list",
          "description": "Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.",
          "response": {
            "$ref": "JobList"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "Includes all job data",
                "Does not include the job configuration"
              ],
              "location": "query",
              "enum": [
                "full",
                "minimal"
              ],
              "description": "Restrict information returned to a set of selected fields"
            },
            "projectId": {
              "description": "Project ID of the jobs to list",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "minCreationTime": {
              "description": "Min value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created after or at this timestamp are returned",
              "format": "uint64",
              "type": "string",
              "location": "query"
            },
            "allUsers": {
              "location": "query",
              "description": "Whether to display jobs owned by all users in the project. Default false",
              "type": "boolean"
            },
            "pageToken": {
              "location": "query",
              "description": "Page token, returned by a previous call, to request the next page of results",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "Maximum number of results to return",
              "format": "uint32",
              "type": "integer"
            },
            "maxCreationTime": {
              "type": "string",
              "location": "query",
              "description": "Max value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created before or at this timestamp are returned",
              "format": "uint64"
            },
            "stateFilter": {
              "type": "string",
              "repeated": true,
              "enumDescriptions": [
                "Finished jobs",
                "Pending jobs",
                "Running jobs"
              ],
              "location": "query",
              "description": "Filter for job state",
              "enum": [
                "done",
                "pending",
                "running"
              ]
            }
          }
        },
        "getQueryResults": {
          "path": "projects/{projectId}/queries/{jobId}",
          "id": "bigquery.jobs.getQueryResults",
          "description": "Retrieves the results of a query job.",
          "response": {
            "$ref": "GetQueryResultsResponse"
          },
          "parameterOrder": [
            "projectId",
            "jobId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "jobId": {
              "description": "[Required] Job ID of the query job",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "[Required] Project ID of the query job"
            },
            "startIndex": {
              "location": "query",
              "description": "Zero-based index of the starting row",
              "format": "uint64",
              "type": "string"
            },
            "location": {
              "type": "string",
              "location": "query",
              "description": "The geographic location where the job should run. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location."
            },
            "pageToken": {
              "location": "query",
              "description": "Page token, returned by a previous call, to request the next page of results",
              "type": "string"
            },
            "timeoutMs": {
              "location": "query",
              "description": "How long to wait for the query to complete, in milliseconds, before returning. Default is 10 seconds. If the timeout passes before the job completes, the 'jobComplete' field in the response will be false",
              "format": "uint32",
              "type": "integer"
            },
            "maxResults": {
              "location": "query",
              "description": "Maximum number of results to read",
              "format": "uint32",
              "type": "integer"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ]
        },
        "cancel": {
          "response": {
            "$ref": "JobCancelResponse"
          },
          "parameterOrder": [
            "projectId",
            "jobId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "jobId": {
              "location": "path",
              "description": "[Required] Job ID of the job to cancel",
              "type": "string",
              "required": true
            },
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "[Required] Project ID of the job to cancel"
            },
            "location": {
              "description": "The geographic location of the job. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "projects/{projectId}/jobs/{jobId}/cancel",
          "id": "bigquery.jobs.cancel",
          "description": "Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs."
        },
        "insert": {
          "supportsMediaUpload": true,
          "httpMethod": "POST",
          "parameterOrder": [
            "projectId"
          ],
          "response": {
            "$ref": "Job"
          },
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the project that will be billed for the job",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/devstorage.full_control",
            "https://www.googleapis.com/auth/devstorage.read_only",
            "https://www.googleapis.com/auth/devstorage.read_write"
          ],
          "mediaUpload": {
            "protocols": {
              "simple": {
                "multipart": true,
                "path": "/upload/bigquery/v2/projects/{projectId}/jobs"
              },
              "resumable": {
                "path": "/resumable/upload/bigquery/v2/projects/{projectId}/jobs",
                "multipart": true
              }
            },
            "accept": [
              "*/*"
            ]
          },
          "id": "bigquery.jobs.insert",
          "path": "projects/{projectId}/jobs",
          "request": {
            "$ref": "Job"
          },
          "description": "Starts a new asynchronous job. Requires the Can View project role."
        },
        "get": {
          "description": "Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.",
          "response": {
            "$ref": "Job"
          },
          "parameterOrder": [
            "projectId",
            "jobId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "jobId": {
              "location": "path",
              "description": "[Required] Job ID of the requested job",
              "type": "string",
              "required": true
            },
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "[Required] Project ID of the requested job"
            },
            "location": {
              "location": "query",
              "description": "The geographic location of the job. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.",
              "type": "string"
            }
          },
          "path": "projects/{projectId}/jobs/{jobId}",
          "id": "bigquery.jobs.get"
        }
      }
    },
    "projects": {
      "methods": {
        "getServiceAccount": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Project ID for which the service account is requested."
            }
          },
          "path": "projects/{projectId}/serviceAccount",
          "id": "bigquery.projects.getServiceAccount",
          "description": "Returns the email address of the service account for your project used for interactions with Google Cloud KMS.",
          "response": {
            "$ref": "GetServiceAccountResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "GET"
        },
        "list": {
          "id": "bigquery.projects.list",
          "path": "projects",
          "description": "Lists all projects to which you have been granted any project role.",
          "httpMethod": "GET",
          "response": {
            "$ref": "ProjectList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Page token, returned by a previous call, to request the next page of results"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return",
              "format": "uint32"
            }
          }
        }
      }
    },
    "tabledata": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of the table to read",
              "type": "string",
              "required": true
            },
            "projectId": {
              "description": "Project ID of the table to read",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "selectedFields": {
              "description": "List of fields to return (comma-separated). If unspecified, all fields are returned",
              "type": "string",
              "location": "query"
            },
            "startIndex": {
              "type": "string",
              "location": "query",
              "description": "Zero-based index of the starting row to read",
              "format": "uint64"
            },
            "pageToken": {
              "description": "Page token, returned by a previous call, identifying the result set",
              "type": "string",
              "location": "query"
            },
            "tableId": {
              "location": "path",
              "description": "Table ID of the table to read",
              "type": "string",
              "required": true
            },
            "maxResults": {
              "description": "Maximum number of results to return",
              "format": "uint32",
              "type": "integer",
              "location": "query"
            }
          },
          "id": "bigquery.tabledata.list",
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data",
          "description": "Retrieves table data from a specified set of rows. Requires the READER dataset role.",
          "httpMethod": "GET",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "response": {
            "$ref": "TableDataList"
          }
        },
        "insertAll": {
          "request": {
            "$ref": "TableDataInsertAllRequest"
          },
          "description": "Streams data into BigQuery one record at a time without needing to run a load job. Requires the WRITER dataset role.",
          "httpMethod": "POST",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "response": {
            "$ref": "TableDataInsertAllResponse"
          },
          "parameters": {
            "tableId": {
              "location": "path",
              "description": "Table ID of the destination table.",
              "type": "string",
              "required": true
            },
            "projectId": {
              "location": "path",
              "description": "Project ID of the destination table.",
              "type": "string",
              "required": true
            },
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of the destination table.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.insertdata",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "bigquery.tabledata.insertAll",
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll"
        }
      }
    },
    "tables": {
      "methods": {
        "insert": {
          "path": "projects/{projectId}/datasets/{datasetId}/tables",
          "id": "bigquery.tables.insert",
          "description": "Creates a new, empty table in the dataset.",
          "request": {
            "$ref": "Table"
          },
          "response": {
            "$ref": "Table"
          },
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "datasetId": {
              "description": "Dataset ID of the new table",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projectId": {
              "location": "path",
              "description": "Project ID of the new table",
              "type": "string",
              "required": true
            }
          }
        },
        "get": {
          "description": "Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Table"
          },
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "parameters": {
            "tableId": {
              "description": "Table ID of the requested table",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projectId": {
              "location": "path",
              "description": "Project ID of the requested table",
              "type": "string",
              "required": true
            },
            "datasetId": {
              "description": "Dataset ID of the requested table",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "selectedFields": {
              "description": "List of fields to return (comma-separated). If unspecified, all fields are returned",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "id": "bigquery.tables.get",
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}"
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "response": {
            "$ref": "Table"
          },
          "parameters": {
            "tableId": {
              "location": "path",
              "description": "Table ID of the table to update",
              "type": "string",
              "required": true
            },
            "projectId": {
              "description": "Project ID of the table to update",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "datasetId": {
              "description": "Dataset ID of the table to update",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "bigquery.tables.patch",
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
          "request": {
            "$ref": "Table"
          },
          "description": "Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics."
        },
        "update": {
          "description": "Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource.",
          "request": {
            "$ref": "Table"
          },
          "response": {
            "$ref": "Table"
          },
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the table to update",
              "type": "string",
              "required": true
            },
            "datasetId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Dataset ID of the table to update"
            },
            "tableId": {
              "description": "Table ID of the table to update",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
          "id": "bigquery.tables.update"
        },
        "delete": {
          "path": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
          "id": "bigquery.tables.delete",
          "description": "Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "tableId"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the table to delete",
              "type": "string",
              "required": true
            },
            "datasetId": {
              "description": "Dataset ID of the table to delete",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "tableId": {
              "location": "path",
              "description": "Table ID of the table to delete",
              "type": "string",
              "required": true
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "Page token, returned by a previous call, to request the next page of results",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "Maximum number of results to return",
              "format": "uint32",
              "type": "integer"
            },
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Project ID of the tables to list"
            },
            "datasetId": {
              "description": "Dataset ID of the tables to list",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "bigquery.tables.list",
          "path": "projects/{projectId}/datasets/{datasetId}/tables",
          "description": "Lists all tables in the specified dataset. Requires the READER dataset role.",
          "httpMethod": "GET",
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "response": {
            "$ref": "TableList"
          }
        }
      }
    },
    "datasets": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the new dataset",
              "type": "string",
              "required": true
            }
          },
          "path": "projects/{projectId}/datasets",
          "id": "bigquery.datasets.insert",
          "description": "Creates a new empty dataset.",
          "request": {
            "$ref": "Dataset"
          },
          "response": {
            "$ref": "Dataset"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "POST"
        },
        "get": {
          "description": "Returns the dataset specified by datasetID.",
          "httpMethod": "GET",
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "response": {
            "$ref": "Dataset"
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Project ID of the requested dataset"
            },
            "datasetId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Dataset ID of the requested dataset"
            }
          },
          "id": "bigquery.datasets.get",
          "path": "projects/{projectId}/datasets/{datasetId}"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "description": "Project ID of the dataset being updated",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of the dataset being updated",
              "type": "string",
              "required": true
            }
          },
          "path": "projects/{projectId}/datasets/{datasetId}",
          "id": "bigquery.datasets.patch",
          "description": "Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports patch semantics.",
          "request": {
            "$ref": "Dataset"
          },
          "response": {
            "$ref": "Dataset"
          },
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "PATCH"
        },
        "update": {
          "httpMethod": "PUT",
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "response": {
            "$ref": "Dataset"
          },
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the dataset being updated",
              "type": "string",
              "required": true
            },
            "datasetId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Dataset ID of the dataset being updated"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "bigquery.datasets.update",
          "path": "projects/{projectId}/datasets/{datasetId}",
          "request": {
            "$ref": "Dataset"
          },
          "description": "Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource."
        },
        "delete": {
          "description": "Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.",
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of dataset being deleted",
              "type": "string",
              "required": true
            },
            "deleteContents": {
              "type": "boolean",
              "location": "query",
              "description": "If True, delete all the tables in the dataset. If False and the dataset contains tables, the request will fail. Default is False"
            },
            "projectId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Project ID of the dataset being deleted"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "bigquery.datasets.delete",
          "path": "projects/{projectId}/datasets/{datasetId}"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/bigquery.readonly",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "all": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list all datasets, including hidden ones"
            },
            "filter": {
              "type": "string",
              "location": "query",
              "description": "An expression for filtering the results of the request by label. The syntax is \"labels.\u003cname\u003e[:\u003cvalue\u003e]\". Multiple filters can be ANDed together by connecting with a space. Example: \"labels.department:receiving labels.active\". See Filtering datasets using labels for details."
            },
            "pageToken": {
              "description": "Page token, returned by a previous call, to request the next page of results",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "The maximum number of results to return",
              "format": "uint32"
            },
            "projectId": {
              "location": "path",
              "description": "Project ID of the datasets to be listed",
              "type": "string",
              "required": true
            }
          },
          "path": "projects/{projectId}/datasets",
          "id": "bigquery.datasets.list",
          "description": "Lists all datasets in the specified project to which you have been granted the READER dataset role.",
          "response": {
            "$ref": "DatasetList"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "routines": {
      "methods": {
        "delete": {
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}",
          "path": "projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}",
          "id": "bigquery.routines.delete",
          "description": "Deletes the routine specified by routineId from the dataset.",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "routineId"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the routine to delete"
            },
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the routine to delete",
              "required": true,
              "type": "string"
            },
            "routineId": {
              "description": "Routine ID of the routine to delete",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path"
            }
          }
        },
        "insert": {
          "path": "projects/{+projectId}/datasets/{+datasetId}/routines",
          "id": "bigquery.routines.insert",
          "request": {
            "$ref": "Routine"
          },
          "description": "Creates a new routine in the dataset.",
          "response": {
            "$ref": "Routine"
          },
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the new routine",
              "required": true,
              "type": "string"
            },
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the new routine",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines"
        },
        "get": {
          "id": "bigquery.routines.get",
          "path": "projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}",
          "description": "Gets the specified routine resource by routine ID.",
          "httpMethod": "GET",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "routineId"
          ],
          "response": {
            "$ref": "Routine"
          },
          "parameters": {
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of the requested routine",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            },
            "routineId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Routine ID of the requested routine"
            },
            "fieldMask": {
              "location": "query",
              "description": "If set, only the Routine fields in the field mask are returned in the\nresponse. If unset, all Routine fields are returned.",
              "format": "google-fieldmask",
              "type": "string"
            },
            "projectId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the requested routine"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}"
        },
        "list": {
          "response": {
            "$ref": "ListRoutinesResponse"
          },
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "projectId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the routines to list",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of results to return in a single response page.\nLeverage the page tokens to iterate through the entire collection.",
              "format": "uint32",
              "type": "integer"
            },
            "datasetId": {
              "description": "Dataset ID of the routines to list",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path"
            },
            "pageToken": {
              "description": "Page token, returned by a previous call, to request the next page of\nresults",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines",
          "path": "projects/{+projectId}/datasets/{+datasetId}/routines",
          "id": "bigquery.routines.list",
          "description": "Lists all routines in the specified dataset. Requires the READER dataset\nrole."
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "description": "Project ID of the routine to update",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path"
            },
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the routine to update",
              "required": true,
              "type": "string"
            },
            "routineId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Routine ID of the routine to update"
            }
          },
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}",
          "path": "projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}",
          "id": "bigquery.routines.update",
          "request": {
            "$ref": "Routine"
          },
          "description": "Updates information in an existing routine. The update method replaces the\nentire Routine resource.",
          "response": {
            "$ref": "Routine"
          },
          "parameterOrder": [
            "projectId",
            "datasetId",
            "routineId"
          ],
          "httpMethod": "PUT"
        }
      }
    },
    "models": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the model to delete.",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            },
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the model to delete.",
              "required": true,
              "type": "string"
            },
            "modelId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Model ID of the model to delete.",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
          "path": "projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}",
          "id": "bigquery.models.delete",
          "description": "Deletes the model specified by modelId from the dataset.",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "modelId"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "response": {
            "$ref": "Model"
          },
          "parameterOrder": [
            "projectId",
            "datasetId",
            "modelId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the requested model.",
              "required": true,
              "type": "string"
            },
            "modelId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Model ID of the requested model."
            },
            "projectId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the requested model."
            }
          },
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
          "path": "projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}",
          "id": "bigquery.models.get",
          "description": "Gets the specified model resource by model ID."
        },
        "list": {
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models",
          "path": "projects/{+projectId}/datasets/{+datasetId}/models",
          "id": "bigquery.models.list",
          "description": "Lists all models in the specified dataset. Requires the READER dataset\nrole.",
          "response": {
            "$ref": "ListModelsResponse"
          },
          "parameterOrder": [
            "projectId",
            "datasetId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Page token, returned by a previous call to request the next page of\nresults"
            },
            "projectId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Project ID of the models to list."
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of results to return in a single response page.\nLeverage the page tokens to iterate through the entire collection.",
              "format": "uint32",
              "type": "integer"
            },
            "datasetId": {
              "location": "path",
              "description": "Dataset ID of the models to list.",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            }
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "projectId",
            "datasetId",
            "modelId"
          ],
          "response": {
            "$ref": "Model"
          },
          "parameters": {
            "projectId": {
              "location": "path",
              "description": "Project ID of the model to patch.",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            },
            "datasetId": {
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Dataset ID of the model to patch.",
              "required": true,
              "type": "string"
            },
            "modelId": {
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Model ID of the model to patch."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/bigquery",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
          "id": "bigquery.models.patch",
          "path": "projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}",
          "description": "Patch specific fields in the specified model.",
          "request": {
            "$ref": "Model"
          }
        }
      }
    }
  },
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "quotaUser": {
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "default": "json",
      "enum": [
        "json"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "description": "Data format for the response."
    },
    "userIp": {
      "location": "query",
      "description": "Deprecated. Please use quotaUser instead.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "schemas": {
    "Dataset": {
      "type": "object",
      "properties": {
        "datasetReference": {
          "description": "[Required] A reference that identifies the dataset.",
          "$ref": "DatasetReference"
        },
        "id": {
          "description": "[Output-only] The fully-qualified unique name of the dataset in the format projectId:datasetId. The dataset name without the project name is given in the datasetId field. When creating a new dataset, leave this field blank, and instead specify the datasetId field.",
          "type": "string"
        },
        "location": {
          "description": "The geographic location where the dataset should reside. The default value is US. See details at https://cloud.google.com/bigquery/docs/locations.",
          "type": "string"
        },
        "friendlyName": {
          "description": "[Optional] A descriptive name for the dataset.",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "[Output-only] The date when this dataset or any of its tables was last modified, in milliseconds since the epoch.",
          "format": "int64",
          "type": "string"
        },
        "defaultEncryptionConfiguration": {
          "$ref": "EncryptionConfiguration"
        },
        "labels": {
          "description": "The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See Creating and Updating Dataset Labels for more information.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "selfLink": {
          "description": "[Output-only] A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource.",
          "type": "string"
        },
        "defaultPartitionExpirationMs": {
          "description": "[Optional] The default partition expiration for all partitioned tables in the dataset, in milliseconds. Once this property is set, all newly-created partitioned tables in the dataset will have an expirationMs property in the timePartitioning settings set to this value, and changing the value will only affect new tables, not existing ones. The storage in a partition will have an expiration time of its partition time plus this value. Setting this property overrides the use of defaultTableExpirationMs for partitioned tables: only one of defaultTableExpirationMs and defaultPartitionExpirationMs will be used for any new partitioned table. If you provide an explicit timePartitioning.expirationMs when creating or updating a partitioned table, that value takes precedence over the default partition expiration time indicated by this property.",
          "format": "int64",
          "type": "string"
        },
        "access": {
          "description": "[Optional] An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER;",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "view": {
                "$ref": "TableReference",
                "description": "[Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation."
              },
              "groupByEmail": {
                "description": "[Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \"group:GROUP\".",
                "type": "string"
              },
              "userByEmail": {
                "description": "[Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \"user:EMAIL\" or \"serviceAccount:EMAIL\".",
                "type": "string"
              },
              "domain": {
                "description": "[Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \"example.com\". Maps to IAM policy member \"domain:DOMAIN\".",
                "type": "string"
              },
              "iamMember": {
                "type": "string",
                "description": "[Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group."
              },
              "specialGroup": {
                "type": "string",
                "description": "[Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members."
              },
              "role": {
                "description": "[Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \"roles/bigquery.dataOwner\", it will be returned back as \"OWNER\".",
                "type": "string"
              }
            }
          }
        },
        "description": {
          "description": "[Optional] A user-friendly description of the dataset.",
          "type": "string"
        },
        "kind": {
          "description": "[Output-only] The resource type.",
          "type": "string",
          "default": "bigquery#dataset"
        },
        "defaultTableExpirationMs": {
          "description": "[Optional] The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour). Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "description": "[Output-only] A hash of the resource.",
          "type": "string"
        },
        "creationTime": {
          "description": "[Output-only] The time when this dataset was created, in milliseconds since the epoch.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "Dataset"
    },
    "ModelDefinition": {
      "id": "ModelDefinition",
      "type": "object",
      "properties": {
        "modelOptions": {
          "description": "[Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.",
          "type": "object",
          "properties": {
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "lossType": {
              "type": "string"
            },
            "modelType": {
              "type": "string"
            }
          }
        },
        "trainingRuns": {
          "description": "[Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.",
          "type": "array",
          "items": {
            "$ref": "BqmlTrainingRun"
          }
        }
      }
    },
    "DatasetReference": {
      "type": "object",
      "properties": {
        "projectId": {
          "description": "[Optional] The ID of the project containing this dataset.",
          "annotations": {
            "required": [
              "bigquery.datasets.update"
            ]
          },
          "type": "string"
        },
        "datasetId": {
          "type": "string",
          "description": "[Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
          "annotations": {
            "required": [
              "bigquery.datasets.update"
            ]
          }
        }
      },
      "id": "DatasetReference"
    },
    "JobStatus": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "[Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.",
          "type": "array",
          "items": {
            "$ref": "ErrorProto"
          }
        },
        "state": {
          "type": "string",
          "description": "[Output-only] Running state of the job."
        },
        "errorResult": {
          "$ref": "ErrorProto",
          "description": "[Output-only] Final error result of the job. If present, indicates that the job has completed and was unsuccessful."
        }
      },
      "id": "JobStatus"
    },
    "JobStatistics3": {
      "type": "object",
      "properties": {
        "badRecords": {
          "description": "[Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.",
          "format": "int64",
          "type": "string"
        },
        "inputFileBytes": {
          "description": "[Output-only] Number of bytes of source data in a load job.",
          "format": "int64",
          "type": "string"
        },
        "inputFiles": {
          "type": "string",
          "description": "[Output-only] Number of source files in a load job.",
          "format": "int64"
        },
        "outputRows": {
          "description": "[Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.",
          "format": "int64",
          "type": "string"
        },
        "outputBytes": {
          "description": "[Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "JobStatistics3"
    },
    "ListModelsResponse": {
      "id": "ListModelsResponse",
      "type": "object",
      "properties": {
        "models": {
          "description": "Models in the requested dataset. Only the following fields are populated:\nmodel_reference, model_type, creation_time, last_modified_time and\nlabels.",
          "type": "array",
          "items": {
            "$ref": "Model"
          }
        },
        "nextPageToken": {
          "description": "A token to request the next page of results.",
          "type": "string"
        }
      }
    },
    "HivePartitioningOptions": {
      "type": "object",
      "properties": {
        "sourceUriPrefix": {
          "description": "[Optional, Trusted Tester] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).",
          "type": "string"
        },
        "mode": {
          "description": "[Optional, Trusted Tester] When set, what mode of hive partitioning to use when reading data. Two modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.",
          "type": "string"
        }
      },
      "id": "HivePartitioningOptions"
    },
    "EvaluationMetrics": {
      "description": "Evaluation metrics of a model. These are either computed on all training\ndata or just the eval data based on whether eval data was used during\ntraining. These are not present for imported models.",
      "type": "object",
      "properties": {
        "multiClassClassificationMetrics": {
          "$ref": "MultiClassClassificationMetrics",
          "description": "Populated for multi-class classification/classifier models."
        },
        "clusteringMetrics": {
          "$ref": "ClusteringMetrics",
          "description": "[Beta] Populated for clustering models."
        },
        "binaryClassificationMetrics": {
          "$ref": "BinaryClassificationMetrics",
          "description": "Populated for binary classification/classifier models."
        },
        "regressionMetrics": {
          "$ref": "RegressionMetrics",
          "description": "Populated for regression models and explicit feedback type matrix\nfactorization models."
        }
      },
      "id": "EvaluationMetrics"
    },
    "StandardSqlField": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Optional. The name of this field. Can be absent for struct fields.",
          "type": "string"
        },
        "type": {
          "$ref": "StandardSqlDataType",
          "description": "Optional. The type of this parameter. Absent if not explicitly\nspecified (e.g., CREATE FUNCTION statement can omit the return type;\nin this case the output parameter does not have this \"type\" field)."
        }
      },
      "id": "StandardSqlField",
      "description": "A field or a column."
    },
    "Streamingbuffer": {
      "type": "object",
      "properties": {
        "estimatedBytes": {
          "description": "[Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.",
          "format": "uint64",
          "type": "string"
        },
        "estimatedRows": {
          "description": "[Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.",
          "format": "uint64",
          "type": "string"
        },
        "oldestEntryTime": {
          "description": "[Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.",
          "format": "uint64",
          "type": "string"
        }
      },
      "id": "Streamingbuffer"
    },
    "Entry": {
      "type": "object",
      "properties": {
        "predictedLabel": {
          "description": "The predicted label. For confidence_threshold \u003e 0, we will\nalso add an entry indicating the number of items under the\nconfidence threshold.",
          "type": "string"
        },
        "itemCount": {
          "type": "string",
          "description": "Number of items being predicted as this label.",
          "format": "int64"
        }
      },
      "id": "Entry",
      "description": "A single entry in the confusion matrix."
    },
    "Table": {
      "id": "Table",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "[Output-only] Describes the table type. The following values are supported: TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL query. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is persisted. EXTERNAL: A table that references data stored in an external storage system, such as Google Cloud Storage. The default value is TABLE."
        },
        "clustering": {
          "$ref": "Clustering",
          "description": "[Beta] Clustering specification for the table. Must be specified with partitioning, data in the table will be first partitioned and subsequently clustered."
        },
        "numRows": {
          "description": "[Output-only] The number of rows of data in this table, excluding any data in the streaming buffer.",
          "format": "uint64",
          "type": "string"
        },
        "view": {
          "$ref": "ViewDefinition",
          "description": "[Optional] The view definition."
        },
        "numLongTermBytes": {
          "description": "[Output-only] The number of bytes in the table that are considered \"long-term storage\".",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "[Output-only] A hash of the table metadata. Used to ensure there were no concurrent modifications to the resource when attempting an update. Not guaranteed to change when the table contents or the fields numRows, numBytes, numLongTermBytes or lastModifiedTime change."
        },
        "encryptionConfiguration": {
          "$ref": "EncryptionConfiguration",
          "description": "Custom encryption configuration (e.g., Cloud KMS keys)."
        },
        "streamingBuffer": {
          "$ref": "Streamingbuffer",
          "description": "[Output-only] Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer."
        },
        "location": {
          "description": "[Output-only] The geographic location where the table resides. This value is inherited from the dataset.",
          "type": "string"
        },
        "numBytes": {
          "type": "string",
          "description": "[Output-only] The size of this table in bytes, excluding any data in the streaming buffer.",
          "format": "int64"
        },
        "timePartitioning": {
          "description": "Time-based partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.",
          "$ref": "TimePartitioning"
        },
        "friendlyName": {
          "type": "string",
          "description": "[Optional] A descriptive name for this table."
        },
        "numPhysicalBytes": {
          "description": "[Output-only] [TrustedTester] The physical size of this table in bytes, excluding any data in the streaming buffer. This includes compression and storage used for time travel.",
          "format": "int64",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
          "type": "object"
        },
        "externalDataConfiguration": {
          "$ref": "ExternalDataConfiguration",
          "description": "[Optional] Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table."
        },
        "selfLink": {
          "description": "[Output-only] A URL that can be used to access this resource again.",
          "type": "string"
        },
        "model": {
          "$ref": "ModelDefinition",
          "description": "[Output-only, Beta] Present iff this table represents a ML model. Describes the training information for the model, and it is required to run 'PREDICT' queries."
        },
        "expirationTime": {
          "description": "[Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "[Output-only] The type of the resource.",
          "type": "string",
          "default": "bigquery#table"
        },
        "description": {
          "description": "[Optional] A user-friendly description of this table.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "[Output-only] The time when this table was created, in milliseconds since the epoch.",
          "format": "int64"
        },
        "rangePartitioning": {
          "$ref": "RangePartitioning",
          "description": "[TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified."
        },
        "schema": {
          "$ref": "TableSchema",
          "description": "[Optional] Describes the schema of this table."
        },
        "id": {
          "type": "string",
          "description": "[Output-only] An opaque ID uniquely identifying the table."
        },
        "requirePartitionFilter": {
          "description": "[Beta] [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.",
          "type": "boolean",
          "default": "false"
        },
        "materializedView": {
          "$ref": "MaterializedViewDefinition",
          "description": "[Optional] Materialized view definition."
        },
        "tableReference": {
          "description": "[Required] Reference describing the ID of this table.",
          "$ref": "TableReference"
        },
        "lastModifiedTime": {
          "description": "[Output-only] The time when this table was last modified, in milliseconds since the epoch.",
          "format": "uint64",
          "type": "string"
        }
      }
    },
    "ConfusionMatrix": {
      "type": "object",
      "properties": {
        "confidenceThreshold": {
          "description": "Confidence threshold used when computing the entries of the\nconfusion matrix.",
          "format": "double",
          "type": "number"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "Row"
          },
          "description": "One row per actual label."
        }
      },
      "id": "ConfusionMatrix",
      "description": "Confusion matrix for multi-class classification models."
    },
    "TableCell": {
      "type": "object",
      "properties": {
        "v": {
          "type": "any"
        }
      },
      "id": "TableCell"
    },
    "MaterializedViewDefinition": {
      "type": "object",
      "properties": {
        "query": {
          "description": "[Required] A query whose result is persisted.",
          "type": "string"
        },
        "lastRefreshTime": {
          "type": "string",
          "description": "[Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.",
          "format": "int64"
        }
      },
      "id": "MaterializedViewDefinition"
    },
    "QueryParameterValue": {
      "type": "object",
      "properties": {
        "structValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "QueryParameterValue"
          },
          "description": "[Optional] The struct field values, in order of the struct type's declaration."
        },
        "arrayValues": {
          "type": "array",
          "items": {
            "$ref": "QueryParameterValue"
          },
          "description": "[Optional] The array values, if this is an array type."
        },
        "value": {
          "description": "[Optional] The value of this value, if a simple scalar type.",
          "type": "string"
        }
      },
      "id": "QueryParameterValue"
    },
    "TableReference": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "[Required] The ID of the project containing this table.",
          "annotations": {
            "required": [
              "bigquery.tables.update"
            ]
          }
        },
        "datasetId": {
          "description": "[Required] The ID of the dataset containing this table.",
          "annotations": {
            "required": [
              "bigquery.tables.update"
            ]
          },
          "type": "string"
        },
        "tableId": {
          "description": "[Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
          "annotations": {
            "required": [
              "bigquery.tables.update"
            ]
          },
          "type": "string"
        }
      },
      "id": "TableReference"
    },
    "Model": {
      "id": "Model",
      "type": "object",
      "properties": {
        "labelColumns": {
          "description": "Output only. Label columns that were used to train this model.\nThe output of the model will have a \"predicted_\" prefix to these columns.",
          "type": "array",
          "items": {
            "$ref": "StandardSqlField"
          }
        },
        "modelType": {
          "description": "Output only. Type of the model resource.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Linear regression model.",
            "Logistic regression based classification model.",
            "[Beta] K-means clustering model.",
            "[Beta] An imported TensorFlow model."
          ],
          "enum": [
            "MODEL_TYPE_UNSPECIFIED",
            "LINEAR_REGRESSION",
            "LOGISTIC_REGRESSION",
            "KMEANS",
            "TENSORFLOW"
          ]
        },
        "featureColumns": {
          "description": "Output only. Input feature columns that were used to train this model.",
          "type": "array",
          "items": {
            "$ref": "StandardSqlField"
          }
        },
        "expirationTime": {
          "description": "[Optional] The time when this model expires, in milliseconds since the\nepoch. If not present, the model will persist indefinitely. Expired models\nwill be deleted and their storage reclaimed.  The defaultTableExpirationMs\nproperty of the encapsulating dataset can be used to set a default\nexpirationTime on newly created models.",
          "format": "int64",
          "type": "string"
        },
        "trainingRuns": {
          "type": "array",
          "items": {
            "$ref": "TrainingRun"
          },
          "description": "Output only. Information for all training runs in increasing order of\nstart_time."
        },
        "modelReference": {
          "$ref": "ModelReference",
          "description": "Required. Unique identifier for this model."
        },
        "description": {
          "description": "[Optional] A user-friendly description of this model.",
          "type": "string"
        },
        "etag": {
          "description": "Output only. A hash of this resource.",
          "type": "string"
        },
        "creationTime": {
          "description": "Output only. The time when this model was created, in millisecs since the\nepoch.",
          "format": "int64",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Output only. The geographic location where the model resides. This value\nis inherited from the dataset."
        },
        "friendlyName": {
          "description": "[Optional] A descriptive name for this model.",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Output only. The time when this model was last modified, in millisecs\nsince the epoch.",
          "format": "int64",
          "type": "string"
        },
        "labels": {
          "description": "[Optional] The labels associated with this model. You can use these to\norganize and group your models. Label keys and values can be no longer\nthan 63 characters, can only contain lowercase letters, numeric\ncharacters, underscores and dashes. International characters are allowed.\nLabel values are optional. Label keys must start with a letter and each\nlabel in the list must have a different key.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StandardSqlStructType": {
      "id": "StandardSqlStructType",
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "StandardSqlField"
          }
        }
      }
    },
    "StandardSqlDataType": {
      "type": "object",
      "properties": {
        "structType": {
          "$ref": "StandardSqlStructType",
          "description": "The fields of this struct, in order, if type_kind = \"STRUCT\"."
        },
        "arrayElementType": {
          "$ref": "StandardSqlDataType",
          "description": "The type of the array's elements, if type_kind = \"ARRAY\"."
        },
        "typeKind": {
          "description": "Required. The top level type of this field.\nCan be any standard SQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").",
          "type": "string",
          "enumDescriptions": [
            "Invalid type.",
            "Encoded as a string in decimal format.",
            "Encoded as a boolean \"false\" or \"true\".",
            "Encoded as a number, or string \"NaN\", \"Infinity\" or \"-Infinity\".",
            "Encoded as a string value.",
            "Encoded as a base64 string per RFC 4648, section 4.",
            "Encoded as an RFC 3339 timestamp with mandatory \"Z\" time zone string:\n1985-04-12T23:20:50.52Z",
            "Encoded as RFC 3339 full-date format string: 1985-04-12",
            "Encoded as RFC 3339 partial-time format string: 23:20:50.52",
            "Encoded as RFC 3339 full-date \"T\" partial-time: 1985-04-12T23:20:50.52",
            "Encoded as WKT",
            "Encoded as a decimal string.",
            "Encoded as a list with types matching Type.array_type.",
            "Encoded as a list with fields of type Type.struct_type[i]. List is used\nbecause a JSON object cannot have duplicate field names."
          ],
          "enum": [
            "TYPE_KIND_UNSPECIFIED",
            "INT64",
            "BOOL",
            "FLOAT64",
            "STRING",
            "BYTES",
            "TIMESTAMP",
            "DATE",
            "TIME",
            "DATETIME",
            "GEOGRAPHY",
            "NUMERIC",
            "ARRAY",
            "STRUCT"
          ]
        }
      },
      "id": "StandardSqlDataType",
      "description": "The type of a variable, e.g., a function argument.\nExamples:\nINT64: {type_kind=\"INT64\"}\nARRAY\u003cSTRING\u003e: {type_kind=\"ARRAY\", array_element_type=\"STRING\"}\nSTRUCT\u003cx STRING, y ARRAY\u003cDATE\u003e\u003e:\n  {type_kind=\"STRUCT\",\n   struct_type={fields=[\n     {name=\"x\", type={type_kind=\"STRING\"}},\n     {name=\"y\", type={type_kind=\"ARRAY\", array_element_type=\"DATE\"}}\n   ]}}"
    },
    "JobStatistics4": {
      "type": "object",
      "properties": {
        "destinationUriFileCounts": {
          "description": "[Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "string"
          }
        },
        "inputBytes": {
          "type": "string",
          "description": "[Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.",
          "format": "int64"
        }
      },
      "id": "JobStatistics4"
    },
    "ModelReference": {
      "description": "Id path of a model.",
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "[Required] The ID of the project containing this model."
        },
        "datasetId": {
          "description": "[Required] The ID of the dataset containing this model.",
          "type": "string"
        },
        "modelId": {
          "type": "string",
          "description": "[Required] The ID of the model. The ID must contain only\nletters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum\nlength is 1,024 characters."
        }
      },
      "id": "ModelReference"
    },
    "CsvOptions": {
      "type": "object",
      "properties": {
        "quote": {
          "description": "[Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.",
          "type": "string",
          "default": "\"",
          "pattern": ".?"
        },
        "skipLeadingRows": {
          "description": "[Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.",
          "format": "int64",
          "type": "string"
        },
        "allowJaggedRows": {
          "type": "boolean",
          "description": "[Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false."
        },
        "fieldDelimiter": {
          "type": "string",
          "description": "[Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence \"\\t\" to specify a tab separator. The default value is a comma (',')."
        },
        "encoding": {
          "description": "[Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.",
          "type": "string"
        },
        "allowQuotedNewlines": {
          "description": "[Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.",
          "type": "boolean"
        }
      },
      "id": "CsvOptions"
    },
    "JobConfigurationExtract": {
      "id": "JobConfigurationExtract",
      "type": "object",
      "properties": {
        "printHeader": {
          "description": "[Optional] Whether to print out a header row in the results. Default is true.",
          "type": "boolean",
          "default": "true"
        },
        "compression": {
          "description": "[Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.",
          "type": "string"
        },
        "destinationUris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "[Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written."
        },
        "sourceTable": {
          "$ref": "TableReference",
          "description": "[Required] A reference to the table being exported."
        },
        "destinationFormat": {
          "description": "[Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO. The default value is CSV. Tables with nested or repeated fields cannot be exported as CSV.",
          "type": "string"
        },
        "destinationUri": {
          "description": "[Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.",
          "type": "string"
        },
        "fieldDelimiter": {
          "type": "string",
          "description": "[Optional] Delimiter to use between fields in the exported data. Default is ','"
        }
      }
    },
    "ClusterInfo": {
      "description": "Information about a single cluster for clustering model.",
      "type": "object",
      "properties": {
        "centroidId": {
          "description": "Centroid id.",
          "format": "int64",
          "type": "string"
        },
        "clusterRadius": {
          "type": "number",
          "description": "Cluster radius, the average distance from centroid\nto each point assigned to the cluster.",
          "format": "double"
        },
        "clusterSize": {
          "description": "Cluster size, the total number of points assigned to the cluster.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "ClusterInfo"
    },
    "JobConfigurationQuery": {
      "type": "object",
      "properties": {
        "query": {
          "description": "[Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.",
          "type": "string"
        },
        "userDefinedFunctionResources": {
          "type": "array",
          "items": {
            "$ref": "UserDefinedFunctionResource"
          },
          "description": "Describes user-defined function resources used in the query."
        },
        "destinationTable": {
          "description": "[Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.",
          "$ref": "TableReference"
        },
        "queryParameters": {
          "description": "Query parameters for standard SQL queries.",
          "type": "array",
          "items": {
            "$ref": "QueryParameter"
          }
        },
        "useLegacySql": {
          "type": "boolean",
          "default": "true",
          "description": "Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false."
        },
        "clustering": {
          "$ref": "Clustering",
          "description": "[Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered."
        },
        "destinationEncryptionConfiguration": {
          "description": "Custom encryption configuration (e.g., Cloud KMS keys).",
          "$ref": "EncryptionConfiguration"
        },
        "createDisposition": {
          "description": "[Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.",
          "type": "string"
        },
        "maximumBytesBilled": {
          "type": "string",
          "description": "[Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.",
          "format": "int64"
        },
        "schemaUpdateOptions": {
          "description": "Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "type": "string",
          "description": "[Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE."
        },
        "allowLargeResults": {
          "type": "boolean",
          "default": "false",
          "description": "[Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size."
        },
        "rangePartitioning": {
          "description": "[TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.",
          "$ref": "RangePartitioning"
        },
        "parameterMode": {
          "description": "Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.",
          "type": "string"
        },
        "useQueryCache": {
          "type": "boolean",
          "default": "true",
          "description": "[Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true."
        },
        "flattenResults": {
          "type": "boolean",
          "default": "true",
          "description": "[Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened."
        },
        "tableDefinitions": {
          "additionalProperties": {
            "$ref": "ExternalDataConfiguration"
          },
          "description": "[Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.",
          "type": "object"
        },
        "defaultDataset": {
          "$ref": "DatasetReference",
          "description": "[Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names."
        },
        "maximumBillingTier": {
          "description": "[Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.",
          "format": "int32",
          "type": "integer",
          "default": "1"
        },
        "writeDisposition": {
          "description": "[Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.",
          "type": "string"
        },
        "timePartitioning": {
          "description": "Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.",
          "$ref": "TimePartitioning"
        },
        "preserveNulls": {
          "description": "[Deprecated] This property is deprecated.",
          "type": "boolean"
        }
      },
      "id": "JobConfigurationQuery"
    },
    "JobReference": {
      "type": "object",
      "properties": {
        "location": {
          "description": "The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.",
          "type": "string"
        },
        "jobId": {
          "type": "string",
          "description": "[Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.",
          "annotations": {
            "required": [
              "bigquery.jobs.getQueryResults"
            ]
          }
        },
        "projectId": {
          "description": "[Required] The ID of the project containing this job.",
          "annotations": {
            "required": [
              "bigquery.jobs.getQueryResults"
            ]
          },
          "type": "string"
        }
      },
      "id": "JobReference"
    },
    "QueryParameterType": {
      "type": "object",
      "properties": {
        "arrayType": {
          "$ref": "QueryParameterType",
          "description": "[Optional] The type of the array's elements, if this is an array."
        },
        "type": {
          "description": "[Required] The top level type of this field.",
          "type": "string"
        },
        "structTypes": {
          "description": "[Optional] The types of the fields of this struct, in order, if this is a struct.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "[Optional] The name of this field.",
                "type": "string"
              },
              "description": {
                "description": "[Optional] Human-oriented description of the field.",
                "type": "string"
              },
              "type": {
                "description": "[Required] The type of this field.",
                "$ref": "QueryParameterType"
              }
            }
          }
        }
      },
      "id": "QueryParameterType"
    },
    "TimePartitioning": {
      "type": "object",
      "properties": {
        "expirationMs": {
          "type": "string",
          "description": "[Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.",
          "format": "int64"
        },
        "type": {
          "description": "[Required] The only type supported is DAY, which will generate one partition per day.",
          "type": "string"
        },
        "requirePartitionFilter": {
          "type": "boolean"
        },
        "field": {
          "description": "[Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.",
          "type": "string"
        }
      },
      "id": "TimePartitioning"
    },
    "ViewDefinition": {
      "type": "object",
      "properties": {
        "useLegacySql": {
          "description": "Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.",
          "type": "boolean"
        },
        "query": {
          "type": "string",
          "description": "[Required] A query that BigQuery executes when the view is referenced."
        },
        "userDefinedFunctionResources": {
          "description": "Describes user-defined function resources used in the query.",
          "type": "array",
          "items": {
            "$ref": "UserDefinedFunctionResource"
          }
        }
      },
      "id": "ViewDefinition"
    },
    "JobStatistics": {
      "type": "object",
      "properties": {
        "numChildJobs": {
          "description": "[Output-only] Number of child jobs executed.",
          "format": "int64",
          "type": "string"
        },
        "totalSlotMs": {
          "description": "[Output-only] Slot-milliseconds for the job.",
          "format": "int64",
          "type": "string"
        },
        "parentJobId": {
          "type": "string",
          "description": "[Output-only] If this is a child job, the id of the parent."
        },
        "reservation_id": {
          "description": "[Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.",
          "type": "string"
        },
        "quotaDeferments": {
          "description": "[Output-only] Quotas which delayed this job's start time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reservationUsage": {
          "description": "[Output-only] Job resource usage breakdown by reservation.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "[Output-only] Reservation name or \"unreserved\" for on-demand resources usage.",
                "type": "string"
              },
              "slotMs": {
                "type": "string",
                "description": "[Output-only] Slot-milliseconds the job spent in the given reservation.",
                "format": "int64"
              }
            }
          }
        },
        "creationTime": {
          "description": "[Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.",
          "format": "int64",
          "type": "string"
        },
        "load": {
          "$ref": "JobStatistics3",
          "description": "[Output-only] Statistics for a load job."
        },
        "extract": {
          "$ref": "JobStatistics4",
          "description": "[Output-only] Statistics for an extract job."
        },
        "endTime": {
          "description": "[Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.",
          "format": "int64",
          "type": "string"
        },
        "completionRatio": {
          "description": "[TrustedTester] [Output-only] Job progress (0.0 -\u003e 1.0) for LOAD and EXTRACT jobs.",
          "format": "double",
          "type": "number"
        },
        "startTime": {
          "description": "[Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.",
          "format": "int64",
          "type": "string"
        },
        "query": {
          "description": "[Output-only] Statistics for a query job.",
          "$ref": "JobStatistics2"
        },
        "totalBytesProcessed": {
          "description": "[Output-only] [Deprecated] Use the bytes processed in the query statistics instead.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "JobStatistics"
    },
    "BigQueryModelTraining": {
      "type": "object",
      "properties": {
        "currentIteration": {
          "description": "[Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.",
          "format": "int32",
          "type": "integer"
        },
        "expectedTotalIterations": {
          "description": "[Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "BigQueryModelTraining"
    },
    "LocationMetadata": {
      "description": "BigQuery-specific metadata about a location. This will be set on\ngoogle.cloud.location.Location.metadata in Cloud Location API\nresponses.",
      "type": "object",
      "properties": {
        "legacyLocationId": {
          "description": "The legacy BigQuery location ID, e.g. “EU” for the “europe” location.\nThis is for any API consumers that need the legacy “US” and “EU” locations.",
          "type": "string"
        }
      },
      "id": "LocationMetadata"
    },
    "ProjectList": {
      "id": "ProjectList",
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "An opaque ID of this project.",
                "type": "string"
              },
              "projectReference": {
                "$ref": "ProjectReference",
                "description": "A unique reference to this project."
              },
              "friendlyName": {
                "description": "A descriptive name for this project.",
                "type": "string"
              },
              "numericId": {
                "description": "The numeric ID of this project.",
                "format": "uint64",
                "type": "string"
              },
              "kind": {
                "description": "The resource type.",
                "type": "string",
                "default": "bigquery#project"
              }
            }
          },
          "description": "Projects to which you have at least READ access."
        },
        "nextPageToken": {
          "description": "A token to request the next page of results.",
          "type": "string"
        },
        "totalItems": {
          "description": "The total number of projects in the list.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "description": "The type of list.",
          "type": "string",
          "default": "bigquery#projectList"
        },
        "etag": {
          "description": "A hash of the page of results",
          "type": "string"
        }
      }
    },
    "Row": {
      "description": "A single row in the confusion matrix.",
      "type": "object",
      "properties": {
        "entries": {
          "description": "Info describing predicted label distribution.",
          "type": "array",
          "items": {
            "$ref": "Entry"
          }
        },
        "actualLabel": {
          "description": "The original label of this row.",
          "type": "string"
        }
      },
      "id": "Row"
    },
    "RegressionMetrics": {
      "type": "object",
      "properties": {
        "meanAbsoluteError": {
          "description": "Mean absolute error.",
          "format": "double",
          "type": "number"
        },
        "meanSquaredError": {
          "description": "Mean squared error.",
          "format": "double",
          "type": "number"
        },
        "rSquared": {
          "description": "R^2 score.",
          "format": "double",
          "type": "number"
        },
        "medianAbsoluteError": {
          "type": "number",
          "description": "Median absolute error.",
          "format": "double"
        },
        "meanSquaredLogError": {
          "description": "Mean squared log error.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "RegressionMetrics",
      "description": "Evaluation metrics for regression and explicit feedback type matrix\nfactorization models."
    },
    "JsonValue": {
      "type": "any",
      "id": "JsonValue"
    },
    "GetQueryResultsResponse": {
      "type": "object",
      "properties": {
        "rows": {
          "description": "An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully.",
          "type": "array",
          "items": {
            "$ref": "TableRow"
          }
        },
        "pageToken": {
          "description": "A token used for paging results.",
          "type": "string"
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#getQueryResultsResponse"
        },
        "etag": {
          "description": "A hash of this response.",
          "type": "string"
        },
        "jobReference": {
          "$ref": "JobReference",
          "description": "Reference to the BigQuery Job that was created to run the query. This field will be present even if the original request timed out, in which case GetQueryResults can be used to read the results once the query has completed. Since this API only returns the first page of results, subsequent pages can be fetched via the same mechanism (GetQueryResults)."
        },
        "cacheHit": {
          "description": "Whether the query result was fetched from the query cache.",
          "type": "boolean"
        },
        "schema": {
          "$ref": "TableSchema",
          "description": "The schema of the results. Present only when the query completes successfully."
        },
        "errors": {
          "description": "[Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.",
          "type": "array",
          "items": {
            "$ref": "ErrorProto"
          }
        },
        "totalBytesProcessed": {
          "description": "The total number of bytes processed for this query.",
          "format": "int64",
          "type": "string"
        },
        "totalRows": {
          "description": "The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.",
          "format": "uint64",
          "type": "string"
        },
        "jobComplete": {
          "description": "Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.",
          "type": "boolean"
        },
        "numDmlAffectedRows": {
          "description": "[Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "GetQueryResultsResponse"
    },
    "RoutineReference": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "[Required] The ID of the project containing this routine."
        },
        "datasetId": {
          "description": "[Required] The ID of the dataset containing this routine.",
          "type": "string"
        },
        "routineId": {
          "type": "string",
          "description": "[Required] The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters."
        }
      },
      "id": "RoutineReference"
    },
    "JobList": {
      "id": "JobList",
      "type": "object",
      "properties": {
        "jobs": {
          "description": "List of jobs that were requested.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "configuration": {
                "$ref": "JobConfiguration",
                "description": "[Full-projection-only] Specifies the job configuration."
              },
              "user_email": {
                "description": "[Full-projection-only] Email address of the user who ran the job.",
                "type": "string"
              },
              "errorResult": {
                "$ref": "ErrorProto",
                "description": "A result object that will be present only if the job has failed."
              },
              "kind": {
                "description": "The resource type.",
                "type": "string",
                "default": "bigquery#job"
              },
              "jobReference": {
                "description": "Job reference uniquely identifying the job.",
                "$ref": "JobReference"
              },
              "status": {
                "$ref": "JobStatus",
                "description": "[Full-projection-only] Describes the state of the job."
              },
              "state": {
                "type": "string",
                "description": "Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed."
              },
              "statistics": {
                "description": "[Output-only] Information about the job, including starting time and ending time of the job.",
                "$ref": "JobStatistics"
              },
              "id": {
                "description": "Unique opaque ID of the job.",
                "type": "string"
              }
            }
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to request the next page of results."
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#jobList"
        },
        "etag": {
          "description": "A hash of this page of results.",
          "type": "string"
        }
      }
    },
    "IterationResult": {
      "description": "Information about a single iteration of the training run.",
      "type": "object",
      "properties": {
        "trainingLoss": {
          "description": "Loss computed on the training data at the end of iteration.",
          "format": "double",
          "type": "number"
        },
        "evalLoss": {
          "type": "number",
          "description": "Loss computed on the eval data at the end of iteration.",
          "format": "double"
        },
        "index": {
          "description": "Index of the iteration, 0 based.",
          "format": "int32",
          "type": "integer"
        },
        "learnRate": {
          "description": "Learn rate used for this iteration.",
          "format": "double",
          "type": "number"
        },
        "durationMs": {
          "type": "string",
          "description": "Time taken to run the iteration in milliseconds.",
          "format": "int64"
        },
        "clusterInfos": {
          "type": "array",
          "items": {
            "$ref": "ClusterInfo"
          },
          "description": "[Beta] Information about top clusters for clustering models."
        }
      },
      "id": "IterationResult"
    },
    "TableDataList": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "TableRow"
          },
          "description": "Rows of results."
        },
        "pageToken": {
          "type": "string",
          "description": "A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing."
        },
        "kind": {
          "type": "string",
          "default": "bigquery#tableDataList",
          "description": "The resource type of the response."
        },
        "totalRows": {
          "description": "The total number of rows in the complete table.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "A hash of this page of results."
        }
      },
      "id": "TableDataList"
    },
    "JobStatistics2": {
      "type": "object",
      "properties": {
        "ddlTargetTable": {
          "$ref": "TableReference",
          "description": "The DDL target table. Present only for CREATE/DROP TABLE/VIEW queries."
        },
        "totalPartitionsProcessed": {
          "type": "string",
          "description": "[Output-only] Total number of partitions processed from all partitioned tables referenced in the job.",
          "format": "int64"
        },
        "schema": {
          "$ref": "TableSchema",
          "description": "[Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries."
        },
        "modelTrainingExpectedTotalIteration": {
          "type": "string",
          "description": "[Output-only, Beta] Deprecated; do not use.",
          "format": "int64"
        },
        "estimatedBytesProcessed": {
          "description": "[Output-only] The original estimate of bytes processed for the job.",
          "format": "int64",
          "type": "string"
        },
        "referencedTables": {
          "type": "array",
          "items": {
            "$ref": "TableReference"
          },
          "description": "[Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list."
        },
        "modelTrainingCurrentIteration": {
          "description": "[Output-only, Beta] Deprecated; do not use.",
          "format": "int32",
          "type": "integer"
        },
        "numDmlAffectedRows": {
          "description": "[Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.",
          "format": "int64",
          "type": "string"
        },
        "totalBytesProcessed": {
          "description": "[Output-only] Total bytes processed for the job.",
          "format": "int64",
          "type": "string"
        },
        "billingTier": {
          "description": "[Output-only] Billing tier for the job.",
          "format": "int32",
          "type": "integer"
        },
        "ddlOperationPerformed": {
          "description": "The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): \"CREATE\": The query created the DDL target. \"SKIP\": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. \"REPLACE\": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. \"DROP\": The query deleted the DDL target.",
          "type": "string"
        },
        "statementType": {
          "description": "The type of query statement, if valid. Possible values (new values might be added in the future): \"SELECT\": SELECT query. \"INSERT\": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. \"UPDATE\": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. \"DELETE\": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. \"MERGE\": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. \"ALTER_TABLE\": ALTER TABLE query. \"ALTER_VIEW\": ALTER VIEW query. \"CREATE_FUNCTION\": CREATE FUNCTION query. \"CREATE_MODEL\": CREATE [OR REPLACE] MODEL ... AS SELECT ... . \"CREATE_PROCEDURE\": CREATE PROCEDURE query. \"CREATE_TABLE\": CREATE [OR REPLACE] TABLE without AS SELECT. \"CREATE_TABLE_AS_SELECT\": CREATE [OR REPLACE] TABLE ... AS SELECT ... . \"CREATE_VIEW\": CREATE [OR REPLACE] VIEW ... AS SELECT ... . \"DROP_FUNCTION\" : DROP FUNCTION query. \"DROP_PROCEDURE\": DROP PROCEDURE query. \"DROP_TABLE\": DROP TABLE query. \"DROP_VIEW\": DROP VIEW query.",
          "type": "string"
        },
        "totalSlotMs": {
          "description": "[Output-only] Slot-milliseconds for the job.",
          "format": "int64",
          "type": "string"
        },
        "totalBytesProcessedAccuracy": {
          "description": "[Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.",
          "type": "string"
        },
        "totalBytesBilled": {
          "description": "[Output-only] Total bytes billed for the job.",
          "format": "int64",
          "type": "string"
        },
        "modelTraining": {
          "$ref": "BigQueryModelTraining",
          "description": "[Output-only, Beta] Information about create model query job progress."
        },
        "referencedRoutines": {
          "description": "[Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.",
          "type": "array",
          "items": {
            "$ref": "RoutineReference"
          }
        },
        "timeline": {
          "type": "array",
          "items": {
            "$ref": "QueryTimelineSample"
          },
          "description": "[Output-only] [Beta] Describes a timeline of job execution."
        },
        "reservationUsage": {
          "description": "[Output-only] Job resource usage breakdown by reservation.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "[Output-only] Reservation name or \"unreserved\" for on-demand resources usage.",
                "type": "string"
              },
              "slotMs": {
                "description": "[Output-only] Slot-milliseconds the job spent in the given reservation.",
                "format": "int64",
                "type": "string"
              }
            }
          }
        },
        "cacheHit": {
          "type": "boolean",
          "description": "[Output-only] Whether the query result was fetched from the query cache."
        },
        "undeclaredQueryParameters": {
          "type": "array",
          "items": {
            "$ref": "QueryParameter"
          },
          "description": "Standard SQL only: list of undeclared query parameters detected during a dry run validation."
        },
        "queryPlan": {
          "description": "[Output-only] Describes execution plan for the query.",
          "type": "array",
          "items": {
            "$ref": "ExplainQueryStage"
          }
        },
        "ddlTargetRoutine": {
          "description": "The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.",
          "$ref": "RoutineReference"
        }
      },
      "id": "JobStatistics2"
    },
    "JobCancelResponse": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "Job",
          "description": "The final state of the job."
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#jobCancelResponse"
        }
      },
      "id": "JobCancelResponse"
    },
    "ProjectReference": {
      "type": "object",
      "properties": {
        "projectId": {
          "description": "[Required] ID of the project. Can be either the numeric ID or the assigned ID of the project.",
          "type": "string"
        }
      },
      "id": "ProjectReference"
    },
    "QueryResponse": {
      "type": "object",
      "properties": {
        "rows": {
          "description": "An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.",
          "type": "array",
          "items": {
            "$ref": "TableRow"
          }
        },
        "errors": {
          "description": "[Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.",
          "type": "array",
          "items": {
            "$ref": "ErrorProto"
          }
        },
        "pageToken": {
          "description": "A token used for paging results.",
          "type": "string"
        },
        "kind": {
          "description": "The resource type.",
          "type": "string",
          "default": "bigquery#queryResponse"
        },
        "jobComplete": {
          "description": "Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.",
          "type": "boolean"
        },
        "numDmlAffectedRows": {
          "description": "[Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.",
          "format": "int64",
          "type": "string"
        },
        "totalBytesProcessed": {
          "description": "The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.",
          "format": "int64",
          "type": "string"
        },
        "totalRows": {
          "type": "string",
          "description": "The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.",
          "format": "uint64"
        },
        "jobReference": {
          "$ref": "JobReference",
          "description": "Reference to the Job that was created to run the query. This field will be present even if the original request timed out, in which case GetQueryResults can be used to read the results once the query has completed. Since this API only returns the first page of results, subsequent pages can be fetched via the same mechanism (GetQueryResults)."
        },
        "cacheHit": {
          "description": "Whether the query result was fetched from the query cache.",
          "type": "boolean"
        },
        "schema": {
          "$ref": "TableSchema",
          "description": "The schema of the results. Present only when the query completes successfully."
        }
      },
      "id": "QueryResponse"
    },
    "ExplainQueryStage": {
      "type": "object",
      "properties": {
        "waitMsAvg": {
          "description": "Milliseconds the average shard spent waiting to be scheduled.",
          "format": "int64",
          "type": "string"
        },
        "recordsRead": {
          "description": "Number of records read into the stage.",
          "format": "int64",
          "type": "string"
        },
        "writeMsAvg": {
          "description": "Milliseconds the average shard spent on writing output.",
          "format": "int64",
          "type": "string"
        },
        "waitRatioMax": {
          "description": "Relative amount of time the slowest shard spent waiting to be scheduled.",
          "format": "double",
          "type": "number"
        },
        "waitMsMax": {
          "description": "Milliseconds the slowest shard spent waiting to be scheduled.",
          "format": "int64",
          "type": "string"
        },
        "writeRatioAvg": {
          "type": "number",
          "description": "Relative amount of time the average shard spent on writing output.",
          "format": "double"
        },
        "computeRatioAvg": {
          "description": "Relative amount of time the average shard spent on CPU-bound tasks.",
          "format": "double",
          "type": "number"
        },
        "completedParallelInputs": {
          "description": "Number of parallel input segments completed.",
          "format": "int64",
          "type": "string"
        },
        "waitRatioAvg": {
          "description": "Relative amount of time the average shard spent waiting to be scheduled.",
          "format": "double",
          "type": "number"
        },
        "recordsWritten": {
          "description": "Number of records written by the stage.",
          "format": "int64",
          "type": "string"
        },
        "readRatioMax": {
          "description": "Relative amount of time the slowest shard spent reading input.",
          "format": "double",
          "type": "number"
        },
        "readRatioAvg": {
          "type": "number",
          "description": "Relative amount of time the average shard spent reading input.",
          "format": "double"
        },
        "id": {
          "type": "string",
          "description": "Unique ID for stage within plan.",
          "format": "int64"
        },
        "endMs": {
          "description": "Stage end time represented as milliseconds since epoch.",
          "format": "int64",
          "type": "string"
        },
        "writeRatioMax": {
          "description": "Relative amount of time the slowest shard spent on writing output.",
          "format": "double",
          "type": "number"
        },
        "computeMsAvg": {
          "type": "string",
          "description": "Milliseconds the average shard spent on CPU-bound tasks.",
          "format": "int64"
        },
        "inputStages": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "string"
          },
          "description": "IDs for stages that are inputs to this stage."
        },
        "computeMsMax": {
          "description": "Milliseconds the slowest shard spent on CPU-bound tasks.",
          "format": "int64",
          "type": "string"
        },
        "readMsMax": {
          "description": "Milliseconds the slowest shard spent reading input.",
          "format": "int64",
          "type": "string"
        },
        "shuffleOutputBytes": {
          "description": "Total number of bytes written to shuffle.",
          "format": "int64",
          "type": "string"
        },
        "parallelInputs": {
          "description": "Number of parallel input segments to be processed.",
          "format": "int64",
          "type": "string"
        },
        "status": {
          "description": "Current status for the stage.",
          "type": "string"
        },
        "name": {
          "description": "Human-readable name for stage.",
          "type": "string"
        },
        "computeRatioMax": {
          "type": "number",
          "description": "Relative amount of time the slowest shard spent on CPU-bound tasks.",
          "format": "double"
        },
        "steps": {
          "description": "List of operations within the stage in dependency order (approximately chronological).",
          "type": "array",
          "items": {
            "$ref": "ExplainQueryStep"
          }
        },
        "startMs": {
          "description": "Stage start time represented as milliseconds since epoch.",
          "format": "int64",
          "type": "string"
        },
        "writeMsMax": {
          "type": "string",
          "description": "Milliseconds the slowest shard spent on writing output.",
          "format": "int64"
        },
        "shuffleOutputBytesSpilled": {
          "description": "Total number of bytes written to shuffle and spilled to disk.",
          "format": "int64",
          "type": "string"
        },
        "readMsAvg": {
          "description": "Milliseconds the average shard spent reading input.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "ExplainQueryStage"
    },
    "Job": {
      "type": "object",
      "properties": {
        "jobReference": {
          "description": "[Optional] Reference describing the unique-per-user name of the job.",
          "$ref": "JobReference"
        },
        "status": {
          "$ref": "JobStatus",
          "description": "[Output-only] The status of this job. Examine this value when polling an asynchronous job to see if the job is complete."
        },
        "statistics": {
          "$ref": "JobStatistics",
          "description": "[Output-only] Information about the job, including starting time and ending time of the job."
        },
        "selfLink": {
          "type": "string",
          "description": "[Output-only] A URL that can be used to access this resource again."
        },
        "id": {
          "type": "string",
          "description": "[Output-only] Opaque ID field of the job"
        },
        "configuration": {
          "$ref": "JobConfiguration",
          "description": "[Required] Describes the job configuration."
        },
        "user_email": {
          "type": "string",
          "description": "[Output-only] Email address of the user who ran the job."
        },
        "kind": {
          "description": "[Output-only] The type of the resource.",
          "type": "string",
          "default": "bigquery#job"
        },
        "etag": {
          "type": "string",
          "description": "[Output-only] A hash of this resource."
        }
      },
      "id": "Job"
    },
    "EncryptionConfiguration": {
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "[Optional] Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.",
          "type": "string"
        }
      },
      "id": "EncryptionConfiguration"
    },
    "BigtableOptions": {
      "type": "object",
      "properties": {
        "readRowkeyAsString": {
          "description": "[Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.",
          "type": "boolean"
        },
        "columnFamilies": {
          "description": "[Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.",
          "type": "array",
          "items": {
            "$ref": "BigtableColumnFamily"
          }
        },
        "ignoreUnspecifiedColumnFamilies": {
          "description": "[Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.",
          "type": "boolean"
        }
      },
      "id": "BigtableOptions"
    },
    "TableSchema": {
      "id": "TableSchema",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Describes the fields in a table.",
          "type": "array",
          "items": {
            "$ref": "TableFieldSchema"
          }
        }
      }
    },
    "ListRoutinesResponse": {
      "type": "object",
      "properties": {
        "routines": {
          "type": "array",
          "items": {
            "$ref": "Routine"
          },
          "description": "Routines in the requested dataset. Only the following fields are populated:\netag, project_id, dataset_id, routine_id, routine_type, creation_time,\nlast_modified_time, language."
        },
        "nextPageToken": {
          "description": "A token to request the next page of results.",
          "type": "string"
        }
      },
      "id": "ListRoutinesResponse"
    },
    "DestinationTableProperties": {
      "type": "object",
      "properties": {
        "description": {
          "description": "[Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.",
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail."
        },
        "friendlyName": {
          "description": "[Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.",
          "type": "string"
        }
      },
      "id": "DestinationTableProperties"
    },
    "TrainingOptions": {
      "type": "object",
      "properties": {
        "distanceType": {
          "enumDescriptions": [
            "",
            "Eculidean distance.",
            "Cosine distance."
          ],
          "enum": [
            "DISTANCE_TYPE_UNSPECIFIED",
            "EUCLIDEAN",
            "COSINE"
          ],
          "description": "[Beta] Distance type for clustering models.",
          "type": "string"
        },
        "learnRate": {
          "description": "Learning rate in training. Used only for iterative training algorithms.",
          "format": "double",
          "type": "number"
        },
        "optimizationStrategy": {
          "description": "Optimization strategy for training linear regression models.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Uses an iterative batch gradient descent algorithm.",
            "Uses a normal equation to solve linear regression problem."
          ],
          "enum": [
            "OPTIMIZATION_STRATEGY_UNSPECIFIED",
            "BATCH_GRADIENT_DESCENT",
            "NORMAL_EQUATION"
          ]
        },
        "maxIterations": {
          "description": "The maximum number of iterations in training. Used only for iterative\ntraining algorithms.",
          "format": "int64",
          "type": "string"
        },
        "dataSplitColumn": {
          "description": "The column to split data with. This column won't be used as a\nfeature.\n1. When data_split_method is CUSTOM, the corresponding column should\nbe boolean. The rows with true value tag are eval data, and the false\nare training data.\n2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION\nrows (from smallest to largest) in the corresponding column are used\nas training data, and the rest are eval data. It respects the order\nin Orderable data types:\nhttps://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties",
          "type": "string"
        },
        "labelClassWeights": {
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Weights associated with each label class, for rebalancing the\ntraining data. Only applicable for classification models.",
          "type": "object"
        },
        "l2Regularization": {
          "type": "number",
          "description": "L2 regularization coefficient.",
          "format": "double"
        },
        "earlyStop": {
          "type": "boolean",
          "description": "Whether to stop early when the loss doesn't improve significantly\nany more (compared to min_relative_progress). Used only for iterative\ntraining algorithms."
        },
        "dataSplitEvalFraction": {
          "description": "The fraction of evaluation data over the whole input data. The rest\nof data will be used as training data. The format should be double.\nAccurate to two decimal places.\nDefault value is 0.2.",
          "format": "double",
          "type": "number"
        },
        "modelUri": {
          "type": "string",
          "description": "[Beta] Google Cloud Storage URI from which the model was imported. Only\napplicable for imported models."
        },
        "minRelativeProgress": {
          "description": "When early_stop is true, stops training when accuracy improvement is\nless than 'min_relative_progress'. Used only for iterative training\nalgorithms.",
          "format": "double",
          "type": "number"
        },
        "initialLearnRate": {
          "type": "number",
          "description": "Specifies the initial learning rate for the line search learn rate\nstrategy.",
          "format": "double"
        },
        "numClusters": {
          "description": "[Beta] Number of clusters for clustering models.",
          "format": "int64",
          "type": "string"
        },
        "inputLabelColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name of input label columns in training data."
        },
        "learnRateStrategy": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Use line search to determine learning rate.",
            "Use a constant learning rate."
          ],
          "enum": [
            "LEARN_RATE_STRATEGY_UNSPECIFIED",
            "LINE_SEARCH",
            "CONSTANT"
          ],
          "description": "The strategy to determine learn rate for the current iteration."
        },
        "warmStart": {
          "description": "Whether to train a model from the last checkpoint.",
          "type": "boolean"
        },
        "lossType": {
          "enum": [
            "LOSS_TYPE_UNSPECIFIED",
            "MEAN_SQUARED_LOSS",
            "MEAN_LOG_LOSS"
          ],
          "description": "Type of loss function used during training run.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Mean squared loss, used for linear regression.",
            "Mean log loss, used for logistic regression."
          ]
        },
        "dataSplitMethod": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Splits data randomly.",
            "Splits data with the user provided tags.",
            "Splits data sequentially.",
            "Data split will be skipped.",
            "Splits data automatically: Uses NO_SPLIT if the data size is small.\nOtherwise uses RANDOM."
          ],
          "enum": [
            "DATA_SPLIT_METHOD_UNSPECIFIED",
            "RANDOM",
            "CUSTOM",
            "SEQUENTIAL",
            "NO_SPLIT",
            "AUTO_SPLIT"
          ],
          "description": "The data split type for training and evaluation, e.g. RANDOM."
        },
        "l1Regularization": {
          "type": "number",
          "description": "L1 regularization coefficient.",
          "format": "double"
        }
      },
      "id": "TrainingOptions"
    },
    "TrainingRun": {
      "type": "object",
      "properties": {
        "evaluationMetrics": {
          "$ref": "EvaluationMetrics",
          "description": "The evaluation metrics over training/eval data that were computed at the\nend of training."
        },
        "trainingOptions": {
          "description": "Options that were used for this training run, includes\nuser specified and default options that were used.",
          "$ref": "TrainingOptions"
        },
        "startTime": {
          "description": "The start time of this training run.",
          "format": "google-datetime",
          "type": "string"
        },
        "results": {
          "description": "Output of each iteration run, results.size() \u003c= max_iterations.",
          "type": "array",
          "items": {
            "$ref": "IterationResult"
          }
        }
      },
      "id": "TrainingRun",
      "description": "Information about a single training query run for the model."
    },
    "Routine": {
      "type": "object",
      "properties": {
        "returnType": {
          "description": "Optional if language = \"SQL\"; required otherwise.\n\nIf absent, the return type is inferred from definition_body at query time\nin each query that references this routine. If present, then the evaluated\nresult will be cast to the specified returned type at query time.\n\nFor example, for the functions created with the following statements:\n\n* `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);`\n\n* `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));`\n\n* `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));`\n\nThe return_type is `{type_kind: \"FLOAT64\"}` for `Add` and `Decrement`, and\nis absent for `Increment` (inferred as FLOAT64 at query time).\n\nSuppose the function `Add` is replaced by\n  `CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);`\n\nThen the inferred return type of `Increment` is automatically changed to\nINT64 at query time, while the return type of `Decrement` remains FLOAT64.",
          "$ref": "StandardSqlDataType"
        },
        "language": {
          "enumDescriptions": [
            "",
            "SQL language.",
            "JavaScript language."
          ],
          "enum": [
            "LANGUAGE_UNSPECIFIED",
            "SQL",
            "JAVASCRIPT"
          ],
          "description": "Optional. Defaults to \"SQL\".",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Output only. The time when this routine was last modified, in milliseconds\nsince the epoch.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "description": "Output only. A hash of this resource.",
          "type": "string"
        },
        "definitionBody": {
          "description": "Required. The body of the routine.\n\nFor functions, this is the expression in the AS clause.\n\nIf language=SQL, it is the substring inside (but excluding) the\nparentheses. For example, for the function created with the following\nstatement:\n\n`CREATE FUNCTION JoinLines(x string, y string) as (concat(x, \"\\n\", y))`\n\nThe definition_body is `concat(x, \"\\n\", y)` (\\n is not replaced with\nlinebreak).\n\nIf language=JAVASCRIPT, it is the evaluated string in the AS clause.\nFor example, for the function created with the following statement:\n\n`CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return \"\\n\";\\n'`\n\nThe definition_body is\n\n`return \"\\n\";\\n`\n\nNote that both \\n are replaced with linebreaks.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "Output only. The time when this routine was created, in milliseconds since\nthe epoch.",
          "format": "int64"
        },
        "routineType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Non-builtin permanent scalar function.",
            "Stored procedure."
          ],
          "enum": [
            "ROUTINE_TYPE_UNSPECIFIED",
            "SCALAR_FUNCTION",
            "PROCEDURE"
          ],
          "description": "Required."
        },
        "routineReference": {
          "$ref": "RoutineReference",
          "description": "Required. Reference describing the ID of this routine."
        },
        "arguments": {
          "description": "Optional.",
          "type": "array",
          "items": {
            "$ref": "Argument"
          }
        },
        "importedLibraries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. If language = \"JAVASCRIPT\", this field stores the path of the\nimported JAVASCRIPT libraries."
        }
      },
      "id": "Routine",
      "description": "A user-defined function or a stored procedure."
    },
    "JobConfiguration": {
      "type": "object",
      "properties": {
        "load": {
          "$ref": "JobConfigurationLoad",
          "description": "[Pick one] Configures a load job."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
          "type": "object"
        },
        "dryRun": {
          "description": "[Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.",
          "type": "boolean"
        },
        "jobType": {
          "description": "[Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.",
          "type": "string"
        },
        "extract": {
          "$ref": "JobConfigurationExtract",
          "description": "[Pick one] Configures an extract job."
        },
        "copy": {
          "$ref": "JobConfigurationTableCopy",
          "description": "[Pick one] Copies a table."
        },
        "jobTimeoutMs": {
          "description": "[Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.",
          "format": "int64",
          "type": "string"
        },
        "query": {
          "$ref": "JobConfigurationQuery",
          "description": "[Pick one] Configures a query job."
        }
      },
      "id": "JobConfiguration"
    },
    "UserDefinedFunctionResource": {
      "type": "object",
      "properties": {
        "resourceUri": {
          "type": "string",
          "description": "[Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path)."
        },
        "inlineCode": {
          "description": "[Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.",
          "type": "string"
        }
      },
      "id": "UserDefinedFunctionResource"
    },
    "AggregateClassificationMetrics": {
      "id": "AggregateClassificationMetrics",
      "description": "Aggregate metrics for classification/classifier models. For multi-class\nmodels, the metrics are either macro-averaged or micro-averaged. When\nmacro-averaged, the metrics are calculated for each label and then an\nunweighted average is taken of those values. When micro-averaged, the\nmetric is calculated globally by counting the total number of correctly\npredicted rows.",
      "type": "object",
      "properties": {
        "accuracy": {
          "type": "number",
          "description": "Accuracy is the fraction of predictions given the correct label. For\nmulticlass this is a micro-averaged metric.",
          "format": "double"
        },
        "recall": {
          "description": "Recall is the fraction of actual positive labels that were given a\npositive prediction. For multiclass this is a macro-averaged metric.",
          "format": "double",
          "type": "number"
        },
        "threshold": {
          "description": "Threshold at which the metrics are computed. For binary\nclassification models this is the positive class threshold.\nFor multi-class classfication models this is the confidence\nthreshold.",
          "format": "double",
          "type": "number"
        },
        "rocAuc": {
          "description": "Area Under a ROC Curve. For multiclass this is a macro-averaged\nmetric.",
          "format": "double",
          "type": "number"
        },
        "logLoss": {
          "description": "Logarithmic Loss. For multiclass this is a macro-averaged metric.",
          "format": "double",
          "type": "number"
        },
        "f1Score": {
          "description": "The F1 score is an average of recall and precision. For multiclass\nthis is a macro-averaged metric.",
          "format": "double",
          "type": "number"
        },
        "precision": {
          "description": "Precision is the fraction of actual positive predictions that had\npositive actual labels. For multiclass this is a macro-averaged\nmetric treating each class as a binary classifier.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "JsonObject": {
      "type": "object",
      "id": "JsonObject",
      "additionalProperties": {
        "$ref": "JsonValue"
      },
      "description": "Represents a single JSON object."
    },
    "Argument": {
      "description": "Input/output argument of a function or a stored procedure.",
      "type": "object",
      "properties": {
        "argumentKind": {
          "type": "string",
          "enumDescriptions": [
            "",
            "The argument is a variable with fully specified type, which can be a\nstruct or an array, but not a table.",
            "The argument is any type, including struct or array, but not a table.\nTo be added: FIXED_TABLE, ANY_TABLE"
          ],
          "enum": [
            "ARGUMENT_KIND_UNSPECIFIED",
            "FIXED_TYPE",
            "ANY_TYPE"
          ],
          "description": "Optional. Defaults to FIXED_TYPE."
        },
        "mode": {
          "description": "Optional. Specifies whether the argument is input or output.\nCan be set for procedures only.",
          "type": "string",
          "enumDescriptions": [
            "",
            "The argument is input-only.",
            "The argument is output-only.",
            "The argument is both an input and an output."
          ],
          "enum": [
            "MODE_UNSPECIFIED",
            "IN",
            "OUT",
            "INOUT"
          ]
        },
        "dataType": {
          "description": "Required unless argument_kind = ANY_TYPE.",
          "$ref": "StandardSqlDataType"
        },
        "name": {
          "type": "string",
          "description": "Optional. The name of this argument. Can be absent for function return\nargument."
        }
      },
      "id": "Argument"
    },
    "ExplainQueryStep": {
      "type": "object",
      "properties": {
        "substeps": {
          "description": "Human-readable stage descriptions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "type": "string",
          "description": "Machine-readable operation type."
        }
      },
      "id": "ExplainQueryStep"
    },
    "DatasetList": {
      "type": "object",
      "properties": {
        "datasets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The fully-qualified, unique, opaque ID of the dataset.",
                "type": "string"
              },
              "location": {
                "type": "string",
                "description": "The geographic location where the data resides."
              },
              "friendlyName": {
                "type": "string",
                "description": "A descriptive name for the dataset, if one exists."
              },
              "kind": {
                "description": "The resource type. This property always returns the value \"bigquery#dataset\".",
                "type": "string",
                "default": "bigquery#dataset"
              },
              "labels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The labels associated with this dataset. You can use these to organize and group your datasets.",
                "type": "object"
              },
              "datasetReference": {
                "$ref": "DatasetReference",
                "description": "The dataset reference. Use this property to access specific parts of the dataset's ID, such as project ID or dataset ID."
              }
            }
          },
          "description": "An array of the dataset resources in the project. Each resource contains basic information. For full information about a particular dataset resource, use the Datasets: get method. This property is omitted when there are no datasets in the project."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be used to request the next results page. This property is omitted on the final results page."
        },
        "kind": {
          "description": "The list type. This property always returns the value \"bigquery#datasetList\".",
          "type": "string",
          "default": "bigquery#datasetList"
        },
        "etag": {
          "description": "A hash value of the results page. You can use this property to determine if the page has changed since the last request.",
          "type": "string"
        }
      },
      "id": "DatasetList"
    },
    "QueryParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "[Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query."
        },
        "parameterType": {
          "$ref": "QueryParameterType",
          "description": "[Required] The type of this parameter."
        },
        "parameterValue": {
          "$ref": "QueryParameterValue",
          "description": "[Required] The value of this parameter."
        }
      },
      "id": "QueryParameter"
    },
    "JobConfigurationTableCopy": {
      "type": "object",
      "properties": {
        "sourceTable": {
          "$ref": "TableReference",
          "description": "[Pick one] Source table to copy."
        },
        "writeDisposition": {
          "description": "[Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.",
          "type": "string"
        },
        "destinationTable": {
          "$ref": "TableReference",
          "description": "[Required] The destination table"
        },
        "destinationEncryptionConfiguration": {
          "$ref": "EncryptionConfiguration",
          "description": "Custom encryption configuration (e.g., Cloud KMS keys)."
        },
        "sourceTables": {
          "description": "[Pick one] Source tables to copy.",
          "type": "array",
          "items": {
            "$ref": "TableReference"
          }
        },
        "createDisposition": {
          "description": "[Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.",
          "type": "string"
        }
      },
      "id": "JobConfigurationTableCopy"
    },
    "BinaryConfusionMatrix": {
      "id": "BinaryConfusionMatrix",
      "description": "Confusion matrix for binary classification models.",
      "type": "object",
      "properties": {
        "falsePositives": {
          "description": "Number of false samples predicted as true.",
          "format": "int64",
          "type": "string"
        },
        "trueNegatives": {
          "type": "string",
          "description": "Number of true samples predicted as false.",
          "format": "int64"
        },
        "f1Score": {
          "description": "The equally weighted average of recall and precision.",
          "format": "double",
          "type": "number"
        },
        "precision": {
          "description": "The fraction of actual positive predictions that had positive actual\nlabels.",
          "format": "double",
          "type": "number"
        },
        "positiveClassThreshold": {
          "description": "Threshold value used when computing each of the following metric.",
          "format": "double",
          "type": "number"
        },
        "accuracy": {
          "description": "The fraction of predictions given the correct label.",
          "format": "double",
          "type": "number"
        },
        "truePositives": {
          "type": "string",
          "description": "Number of true samples predicted as true.",
          "format": "int64"
        },
        "recall": {
          "description": "The fraction of actual positive labels that were given a positive\nprediction.",
          "format": "double",
          "type": "number"
        },
        "falseNegatives": {
          "description": "Number of false samples predicted as false.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "TableRow": {
      "type": "object",
      "properties": {
        "f": {
          "type": "array",
          "items": {
            "$ref": "TableCell"
          },
          "description": "Represents a single row in the result set, consisting of one or more fields."
        }
      },
      "id": "TableRow"
    },
    "QueryTimelineSample": {
      "type": "object",
      "properties": {
        "totalSlotMs": {
          "description": "Cumulative slot-ms consumed by the query.",
          "format": "int64",
          "type": "string"
        },
        "activeUnits": {
          "description": "Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.",
          "format": "int64",
          "type": "string"
        },
        "completedUnits": {
          "type": "string",
          "description": "Total parallel units of work completed by this query.",
          "format": "int64"
        },
        "elapsedMs": {
          "description": "Milliseconds elapsed since the start of query execution.",
          "format": "int64",
          "type": "string"
        },
        "pendingUnits": {
          "description": "Total parallel units of work remaining for the active stages.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "QueryTimelineSample"
    },
    "MultiClassClassificationMetrics": {
      "description": "Evaluation metrics for multi-class classification/classifier models.",
      "type": "object",
      "properties": {
        "aggregateClassificationMetrics": {
          "$ref": "AggregateClassificationMetrics",
          "description": "Aggregate classification metrics."
        },
        "confusionMatrixList": {
          "type": "array",
          "items": {
            "$ref": "ConfusionMatrix"
          },
          "description": "Confusion matrix at different thresholds."
        }
      },
      "id": "MultiClassClassificationMetrics"
    },
    "QueryRequest": {
      "type": "object",
      "properties": {
        "parameterMode": {
          "description": "Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.",
          "type": "string"
        },
        "useQueryCache": {
          "description": "[Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true.",
          "type": "boolean",
          "default": "true"
        },
        "defaultDataset": {
          "$ref": "DatasetReference",
          "description": "[Optional] Specifies the default datasetId and projectId to assume for any unqualified table names in the query. If not set, all table names in the query string must be qualified in the format 'datasetId.tableId'."
        },
        "location": {
          "description": "The geographic location where the job should run. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.",
          "type": "string"
        },
        "preserveNulls": {
          "description": "[Deprecated] This property is deprecated.",
          "type": "boolean"
        },
        "maxResults": {
          "description": "[Optional] The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.",
          "format": "uint32",
          "type": "integer"
        },
        "query": {
          "description": "[Required] A query string, following the BigQuery query syntax, of the query to execute. Example: \"SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]\".",
          "annotations": {
            "required": [
              "bigquery.jobs.query"
            ]
          },
          "type": "string"
        },
        "dryRun": {
          "type": "boolean",
          "description": "[Optional] If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is false."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "QueryParameter"
          },
          "description": "Query parameters for Standard SQL queries."
        },
        "useLegacySql": {
          "description": "Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.",
          "type": "boolean",
          "default": "true"
        },
        "timeoutMs": {
          "description": "[Optional] How long to wait for the query to complete, in milliseconds, before the request times out and returns. Note that this is only a timeout for the request, not the query. If the query takes longer to run than the timeout value, the call returns without any results and with the 'jobComplete' flag set to false. You can call GetQueryResults() to wait for the query to complete and read the results. The default value is 10000 milliseconds (10 seconds).",
          "format": "uint32",
          "type": "integer"
        },
        "kind": {
          "description": "The resource type of the request.",
          "type": "string",
          "default": "bigquery#queryRequest"
        }
      },
      "id": "QueryRequest"
    },
    "ErrorProto": {
      "id": "ErrorProto",
      "type": "object",
      "properties": {
        "reason": {
          "description": "A short error code that summarizes the error.",
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the error."
        },
        "location": {
          "description": "Specifies where the error occurred, if present.",
          "type": "string"
        },
        "debugInfo": {
          "description": "Debugging information. This property is internal to Google and should not be used.",
          "type": "string"
        }
      }
    },
    "BinaryClassificationMetrics": {
      "id": "BinaryClassificationMetrics",
      "description": "Evaluation metrics for binary classification/classifier models.",
      "type": "object",
      "properties": {
        "binaryConfusionMatrixList": {
          "description": "Binary confusion matrix at multiple thresholds.",
          "type": "array",
          "items": {
            "$ref": "BinaryConfusionMatrix"
          }
        },
        "aggregateClassificationMetrics": {
          "$ref": "AggregateClassificationMetrics",
          "description": "Aggregate classification metrics."
        },
        "negativeLabel": {
          "description": "Label representing the negative class.",
          "type": "string"
        },
        "positiveLabel": {
          "description": "Label representing the positive class.",
          "type": "string"
        }
      }
    },
    "Clustering": {
      "type": "object",
      "properties": {
        "fields": {
          "description": "[Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Clustering"
    },
    "BqmlTrainingRun": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "[Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user."
        },
        "iterationResults": {
          "description": "[Output-only, Beta] List of each iteration results.",
          "type": "array",
          "items": {
            "$ref": "BqmlIterationResult"
          }
        },
        "startTime": {
          "description": "[Output-only, Beta] Training run start time in milliseconds since the epoch.",
          "format": "date-time",
          "type": "string"
        },
        "trainingOptions": {
          "description": "[Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.",
          "type": "object",
          "properties": {
            "lineSearchInitLearnRate": {
              "format": "double",
              "type": "number"
            },
            "earlyStop": {
              "type": "boolean"
            },
            "l1Reg": {
              "type": "number",
              "format": "double"
            },
            "maxIteration": {
              "type": "string",
              "format": "int64"
            },
            "learnRate": {
              "type": "number",
              "format": "double"
            },
            "minRelProgress": {
              "format": "double",
              "type": "number"
            },
            "l2Reg": {
              "format": "double",
              "type": "number"
            },
            "warmStart": {
              "type": "boolean"
            },
            "learnRateStrategy": {
              "type": "string"
            }
          }
        }
      },
      "id": "BqmlTrainingRun"
    },
    "BigtableColumnFamily": {
      "type": "object",
      "properties": {
        "encoding": {
          "description": "[Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.",
          "type": "string"
        },
        "columns": {
          "description": "[Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.",
          "type": "array",
          "items": {
            "$ref": "BigtableColumn"
          }
        },
        "type": {
          "description": "[Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.",
          "type": "string"
        },
        "familyId": {
          "description": "Identifier of the column family.",
          "type": "string"
        },
        "onlyReadLatest": {
          "description": "[Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.",
          "type": "boolean"
        }
      },
      "id": "BigtableColumnFamily"
    },
    "RangePartitioning": {
      "type": "object",
      "properties": {
        "range": {
          "type": "object",
          "properties": {
            "interval": {
              "description": "[TrustedTester] [Required] The width of each interval.",
              "format": "int64",
              "type": "string"
            },
            "start": {
              "type": "string",
              "description": "[TrustedTester] [Required] The start of range partitioning, inclusive.",
              "format": "int64"
            },
            "end": {
              "description": "[TrustedTester] [Required] The end of range partitioning, exclusive.",
              "format": "int64",
              "type": "string"
            }
          },
          "description": "[TrustedTester] [Required] Defines the ranges for range partitioning."
        },
        "field": {
          "type": "string",
          "description": "[TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64."
        }
      },
      "id": "RangePartitioning"
    },
    "JobConfigurationLoad": {
      "id": "JobConfigurationLoad",
      "type": "object",
      "properties": {
        "maxBadRecords": {
          "description": "[Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.",
          "format": "int32",
          "type": "integer"
        },
        "sourceUris": {
          "description": "[Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowJaggedRows": {
          "description": "[Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.",
          "type": "boolean"
        },
        "fieldDelimiter": {
          "description": "[Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence \"\\t\" to specify a tab separator. The default value is a comma (',').",
          "type": "string"
        },
        "projectionFields": {
          "description": "If sourceFormat is set to \"DATASTORE_BACKUP\", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowQuotedNewlines": {
          "type": "boolean",
          "description": "Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false."
        },
        "useAvroLogicalTypes": {
          "description": "[Optional] If sourceFormat is set to \"AVRO\", indicates whether to enable interpreting logical types into their corresponding types (ie. TIMESTAMP), instead of only using their raw types (ie. INTEGER).",
          "type": "boolean"
        },
        "hivePartitioningOptions": {
          "$ref": "HivePartitioningOptions",
          "description": "[Optional, Trusted Tester] Options to configure hive partitioning support."
        },
        "timePartitioning": {
          "$ref": "TimePartitioning",
          "description": "Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified."
        },
        "skipLeadingRows": {
          "description": "[Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.",
          "format": "int32",
          "type": "integer"
        },
        "autodetect": {
          "type": "boolean",
          "description": "[Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources."
        },
        "destinationEncryptionConfiguration": {
          "$ref": "EncryptionConfiguration",
          "description": "Custom encryption configuration (e.g., Cloud KMS keys)."
        },
        "schemaUpdateOptions": {
          "description": "Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schemaInline": {
          "description": "[Deprecated] The inline schema. For CSV schemas, specify as \"Field1:Type1[,Field2:Type2]*\". For example, \"foo:STRING, bar:INTEGER, baz:FLOAT\".",
          "type": "string"
        },
        "rangePartitioning": {
          "$ref": "RangePartitioning",
          "description": "[TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified."
        },
        "nullMarker": {
          "type": "string",
          "description": "[Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify \"\\N\", BigQuery interprets \"\\N\" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value."
        },
        "schema": {
          "description": "[Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.",
          "$ref": "TableSchema"
        },
        "schemaInlineFormat": {
          "description": "[Deprecated] The format of the schemaInline property.",
          "type": "string"
        },
        "quote": {
          "pattern": ".?",
          "description": "[Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.",
          "type": "string",
          "default": "\""
        },
        "writeDisposition": {
          "type": "string",
          "description": "[Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion."
        },
        "destinationTableProperties": {
          "$ref": "DestinationTableProperties",
          "description": "[Beta] [Optional] Properties with which to create the destination table if it is new."
        },
        "sourceFormat": {
          "type": "string",
          "description": "[Optional] The format of the data files. For CSV files, specify \"CSV\". For datastore backups, specify \"DATASTORE_BACKUP\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro, specify \"AVRO\". For parquet, specify \"PARQUET\". For orc, specify \"ORC\". The default value is CSV."
        },
        "ignoreUnknownValues": {
          "description": "[Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names",
          "type": "boolean"
        },
        "destinationTable": {
          "$ref": "TableReference",
          "description": "[Required] The destination table to load the data into."
        },
        "encoding": {
          "description": "[Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.",
          "type": "string"
        },
        "clustering": {
          "$ref": "Clustering",
          "description": "[Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered."
        },
        "hivePartitioningMode": {
          "description": "[Optional, Trusted Tester] If hive partitioning is enabled, which mode to use. Two modes are supported: - AUTO: automatically infer partition key name(s) and type(s). - STRINGS: automatic infer partition key name(s). All types are strings. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error.",
          "type": "string"
        },
        "createDisposition": {
          "type": "string",
          "description": "[Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion."
        }
      }
    },
    "ExternalDataConfiguration": {
      "type": "object",
      "properties": {
        "hivePartitioningOptions": {
          "$ref": "HivePartitioningOptions",
          "description": "[Optional, Trusted Tester] Options to configure hive partitioning support."
        },
        "googleSheetsOptions": {
          "$ref": "GoogleSheetsOptions",
          "description": "[Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS."
        },
        "autodetect": {
          "type": "boolean",
          "description": "Try to detect schema and format options automatically. Any option specified explicitly will be honored."
        },
        "ignoreUnknownValues": {
          "description": "[Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.",
          "type": "boolean"
        },
        "sourceFormat": {
          "description": "[Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".",
          "type": "string"
        },
        "compression": {
          "description": "[Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.",
          "type": "string"
        },
        "hivePartitioningMode": {
          "type": "string",
          "description": "[Optional, Trusted Tester] If hive partitioning is enabled, which mode to use. Two modes are supported: - AUTO: automatically infer partition key name(s) and type(s). - STRINGS: automatic infer partition key name(s). All types are strings. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error. Note: this setting is in the process of being deprecated in favor of hivePartitioningOptions."
        },
        "maxBadRecords": {
          "type": "integer",
          "description": "[Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.",
          "format": "int32"
        },
        "sourceUris": {
          "description": "[Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "csvOptions": {
          "description": "Additional properties to set if sourceFormat is set to CSV.",
          "$ref": "CsvOptions"
        },
        "bigtableOptions": {
          "$ref": "BigtableOptions",
          "description": "[Optional] Additional options if sourceFormat is set to BIGTABLE."
        },
        "schema": {
          "description": "[Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.",
          "$ref": "TableSchema"
        }
      },
      "id": "ExternalDataConfiguration"
    },
    "GoogleSheetsOptions": {
      "type": "object",
      "properties": {
        "range": {
          "type": "string",
          "description": "[Beta] [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20"
        },
        "skipLeadingRows": {
          "type": "string",
          "description": "[Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N \u003e 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.",
          "format": "int64"
        }
      },
      "id": "GoogleSheetsOptions"
    },
    "TableDataInsertAllRequest": {
      "type": "object",
      "properties": {
        "rows": {
          "description": "The rows to insert.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "insertId": {
                "description": "[Optional] A unique ID for each row. BigQuery uses this property to detect duplicate insertion requests on a best-effort basis.",
                "type": "string"
              },
              "json": {
                "$ref": "JsonObject",
                "description": "[Required] A JSON object that contains a row of data. The object's properties and values must match the destination table's schema."
              }
            }
          }
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#tableDataInsertAllRequest"
        },
        "templateSuffix": {
          "type": "string",
          "description": "If specified, treats the destination table as a base template, and inserts the rows into an instance table named \"{destination}{templateSuffix}\". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables."
        },
        "ignoreUnknownValues": {
          "description": "[Optional] Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.",
          "type": "boolean"
        },
        "skipInvalidRows": {
          "description": "[Optional] Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.",
          "type": "boolean"
        }
      },
      "id": "TableDataInsertAllRequest"
    },
    "TableList": {
      "type": "object",
      "properties": {
        "totalItems": {
          "description": "The total number of tables in the dataset.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "description": "The type of list.",
          "type": "string",
          "default": "bigquery#tableList"
        },
        "tables": {
          "description": "Tables in the requested dataset.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of table. Possible values are: TABLE, VIEW.",
                "type": "string"
              },
              "clustering": {
                "$ref": "Clustering",
                "description": "[Beta] Clustering specification for this table, if configured."
              },
              "id": {
                "description": "An opaque ID of the table",
                "type": "string"
              },
              "expirationTime": {
                "type": "string",
                "description": "[Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.",
                "format": "int64"
              },
              "tableReference": {
                "$ref": "TableReference",
                "description": "A reference uniquely identifying the table."
              },
              "friendlyName": {
                "description": "The user-friendly name for this table.",
                "type": "string"
              },
              "timePartitioning": {
                "$ref": "TimePartitioning",
                "description": "The time-based partitioning specification for this table, if configured."
              },
              "kind": {
                "description": "The resource type.",
                "type": "string",
                "default": "bigquery#table"
              },
              "view": {
                "description": "Additional details for a view.",
                "type": "object",
                "properties": {
                  "useLegacySql": {
                    "description": "True if view is defined in legacy SQL dialect, false if in standard SQL.",
                    "type": "boolean"
                  }
                }
              },
              "creationTime": {
                "type": "string",
                "description": "The time when this table was created, in milliseconds since the epoch.",
                "format": "int64"
              },
              "labels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The labels associated with this table. You can use these to organize and group your tables.",
                "type": "object"
              }
            }
          }
        },
        "etag": {
          "description": "A hash of this page of results.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "A token to request the next page of results.",
          "type": "string"
        }
      },
      "id": "TableList"
    },
    "BigtableColumn": {
      "type": "object",
      "properties": {
        "qualifierString": {
          "type": "string"
        },
        "encoding": {
          "description": "[Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "[Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels."
        },
        "onlyReadLatest": {
          "description": "[Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.",
          "type": "boolean"
        },
        "qualifierEncoded": {
          "description": "[Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.",
          "format": "byte",
          "type": "string"
        },
        "fieldName": {
          "description": "[Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.",
          "type": "string"
        }
      },
      "id": "BigtableColumn"
    },
    "TableFieldSchema": {
      "type": "object",
      "properties": {
        "description": {
          "description": "[Optional] The field description. The maximum length is 1,024 characters.",
          "type": "string"
        },
        "fields": {
          "description": "[Optional] Describes the nested schema fields if the type property is set to RECORD.",
          "type": "array",
          "items": {
            "$ref": "TableFieldSchema"
          }
        },
        "name": {
          "description": "[Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.",
          "type": "string"
        },
        "type": {
          "description": "[Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).",
          "type": "string"
        },
        "categories": {
          "type": "object",
          "properties": {
            "names": {
              "description": "A list of category resource names. For example, \"projects/1/taxonomies/2/categories/3\". At most 5 categories are allowed.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "[Optional] The categories attached to this field, used for field-level access control."
        },
        "mode": {
          "description": "[Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.",
          "type": "string"
        }
      },
      "id": "TableFieldSchema"
    },
    "BqmlIterationResult": {
      "type": "object",
      "properties": {
        "learnRate": {
          "type": "number",
          "description": "[Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.",
          "format": "double"
        },
        "durationMs": {
          "description": "[Output-only, Beta] Time taken to run the training iteration in milliseconds.",
          "format": "int64",
          "type": "string"
        },
        "trainingLoss": {
          "description": "[Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.",
          "format": "double",
          "type": "number"
        },
        "evalLoss": {
          "description": "[Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.",
          "format": "double",
          "type": "number"
        },
        "index": {
          "description": "[Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "BqmlIterationResult"
    },
    "TableDataInsertAllResponse": {
      "type": "object",
      "properties": {
        "insertErrors": {
          "description": "An array of errors for rows that were not inserted.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "errors": {
                "description": "Error information for the row indicated by the index property.",
                "type": "array",
                "items": {
                  "$ref": "ErrorProto"
                }
              },
              "index": {
                "description": "The index of the row that error applies to.",
                "format": "uint32",
                "type": "integer"
              }
            }
          }
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#tableDataInsertAllResponse"
        }
      },
      "id": "TableDataInsertAllResponse"
    },
    "ClusteringMetrics": {
      "id": "ClusteringMetrics",
      "description": "Evaluation metrics for clustering models.",
      "type": "object",
      "properties": {
        "meanSquaredDistance": {
          "description": "Mean of squared distances between each sample to its cluster centroid.",
          "format": "double",
          "type": "number"
        },
        "daviesBouldinIndex": {
          "description": "Davies-Bouldin index.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "GetServiceAccountResponse": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The service account email address.",
          "type": "string"
        },
        "kind": {
          "description": "The resource type of the response.",
          "type": "string",
          "default": "bigquery#getServiceAccountResponse"
        }
      },
      "id": "GetServiceAccountResponse"
    }
  }
}
