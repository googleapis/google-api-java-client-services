/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.storagebatchoperations.v1.model;

/**
 * Describes options to delete an object.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Storage Batch Operations API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DeleteObject extends com.google.api.client.json.GenericJson {

  /**
   * Required. Controls deletion behavior when versioning is enabled for the object's bucket. If
   * true both live and noncurrent objects will be permanently deleted. Otherwise live objects in
   * versioned buckets will become noncurrent and objects that were already noncurrent will be
   * skipped. This setting doesn't have any impact on the Soft Delete feature. All objects deleted
   * by this service can be be restored for the duration of the Soft Delete retention duration if
   * enabled. If enabled and the manifest doesn't specify an object's generation, a
   * GetObjectMetadata call (a Class B operation) will be made to determine the live object
   * generation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean permanentObjectDeletionEnabled;

  /**
   * Required. Controls deletion behavior when versioning is enabled for the object's bucket. If
   * true both live and noncurrent objects will be permanently deleted. Otherwise live objects in
   * versioned buckets will become noncurrent and objects that were already noncurrent will be
   * skipped. This setting doesn't have any impact on the Soft Delete feature. All objects deleted
   * by this service can be be restored for the duration of the Soft Delete retention duration if
   * enabled. If enabled and the manifest doesn't specify an object's generation, a
   * GetObjectMetadata call (a Class B operation) will be made to determine the live object
   * generation.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPermanentObjectDeletionEnabled() {
    return permanentObjectDeletionEnabled;
  }

  /**
   * Required. Controls deletion behavior when versioning is enabled for the object's bucket. If
   * true both live and noncurrent objects will be permanently deleted. Otherwise live objects in
   * versioned buckets will become noncurrent and objects that were already noncurrent will be
   * skipped. This setting doesn't have any impact on the Soft Delete feature. All objects deleted
   * by this service can be be restored for the duration of the Soft Delete retention duration if
   * enabled. If enabled and the manifest doesn't specify an object's generation, a
   * GetObjectMetadata call (a Class B operation) will be made to determine the live object
   * generation.
   * @param permanentObjectDeletionEnabled permanentObjectDeletionEnabled or {@code null} for none
   */
  public DeleteObject setPermanentObjectDeletionEnabled(java.lang.Boolean permanentObjectDeletionEnabled) {
    this.permanentObjectDeletionEnabled = permanentObjectDeletionEnabled;
    return this;
  }

  @Override
  public DeleteObject set(String fieldName, Object value) {
    return (DeleteObject) super.set(fieldName, value);
  }

  @Override
  public DeleteObject clone() {
    return (DeleteObject) super.clone();
  }

}
