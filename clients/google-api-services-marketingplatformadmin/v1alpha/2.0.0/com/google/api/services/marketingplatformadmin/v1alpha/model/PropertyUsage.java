/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.marketingplatformadmin.v1alpha.model;

/**
 * Contains the count of events received by the property, along with metadata that influences the
 * volume of `billable` events.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Marketing Platform Admin API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PropertyUsage extends com.google.api.client.json.GenericJson {

  /**
   * The ID of the property's parent account.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long accountId;

  /**
   * The number of events for which the property is billed in the requested month.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long billableEventCount;

  /**
   * The display name of the property.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The name of the Google Analytics Admin API property resource. Format:
   * analyticsadmin.googleapis.com/properties/{property_id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String property;

  /**
   * The subtype of the analytics property. This affects the billable event count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String propertyType;

  /**
   * The service level of the property.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceLevel;

  /**
   * Total event count that the property received during the requested month.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long totalEventCount;

  /**
   * The ID of the property's parent account.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAccountId() {
    return accountId;
  }

  /**
   * The ID of the property's parent account.
   * @param accountId accountId or {@code null} for none
   */
  public PropertyUsage setAccountId(java.lang.Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The number of events for which the property is billed in the requested month.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBillableEventCount() {
    return billableEventCount;
  }

  /**
   * The number of events for which the property is billed in the requested month.
   * @param billableEventCount billableEventCount or {@code null} for none
   */
  public PropertyUsage setBillableEventCount(java.lang.Long billableEventCount) {
    this.billableEventCount = billableEventCount;
    return this;
  }

  /**
   * The display name of the property.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name of the property.
   * @param displayName displayName or {@code null} for none
   */
  public PropertyUsage setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the Google Analytics Admin API property resource. Format:
   * analyticsadmin.googleapis.com/properties/{property_id}
   * @return value or {@code null} for none
   */
  public java.lang.String getProperty() {
    return property;
  }

  /**
   * The name of the Google Analytics Admin API property resource. Format:
   * analyticsadmin.googleapis.com/properties/{property_id}
   * @param property property or {@code null} for none
   */
  public PropertyUsage setProperty(java.lang.String property) {
    this.property = property;
    return this;
  }

  /**
   * The subtype of the analytics property. This affects the billable event count.
   * @return value or {@code null} for none
   */
  public java.lang.String getPropertyType() {
    return propertyType;
  }

  /**
   * The subtype of the analytics property. This affects the billable event count.
   * @param propertyType propertyType or {@code null} for none
   */
  public PropertyUsage setPropertyType(java.lang.String propertyType) {
    this.propertyType = propertyType;
    return this;
  }

  /**
   * The service level of the property.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceLevel() {
    return serviceLevel;
  }

  /**
   * The service level of the property.
   * @param serviceLevel serviceLevel or {@code null} for none
   */
  public PropertyUsage setServiceLevel(java.lang.String serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

  /**
   * Total event count that the property received during the requested month.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTotalEventCount() {
    return totalEventCount;
  }

  /**
   * Total event count that the property received during the requested month.
   * @param totalEventCount totalEventCount or {@code null} for none
   */
  public PropertyUsage setTotalEventCount(java.lang.Long totalEventCount) {
    this.totalEventCount = totalEventCount;
    return this;
  }

  @Override
  public PropertyUsage set(String fieldName, Object value) {
    return (PropertyUsage) super.set(fieldName, value);
  }

  @Override
  public PropertyUsage clone() {
    return (PropertyUsage) super.clone();
  }

}
