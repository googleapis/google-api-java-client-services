/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasedataconnect.v1beta.model;

/**
 * GraphqlErrorExtensions contains additional information of `GraphqlError`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Data Connect API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GraphqlErrorExtensions extends com.google.api.client.json.GenericJson {

  /**
   * Maps to canonical gRPC codes. If not specified, it represents `Code.INTERNAL`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String code;

  /**
   * More detailed error message to assist debugging. It contains application business logic that
   * are inappropriate to leak publicly. In the emulator, Data Connect API always includes it to
   * assist local development and debugging. In the backend, ConnectorService always hides it.
   * GraphqlService without impersonation always include it. GraphqlService with impersonation
   * includes it only if explicitly opted-in with `include_debug_details` in
   * `GraphqlRequestExtensions`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String debugDetails;

  /**
   * The source file name where the error occurred. Included only for `UpdateSchema` and
   * `UpdateConnector`, it corresponds to `File.path` of the provided `Source`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String file;

  /**
   * Warning level describes the severity and required action to suppress this warning when Firebase
   * CLI run into it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String warningLevel;

  /**
   * Workarounds provide suggestions to address the compile errors or warnings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Workaround> workarounds;

  /**
   * Maps to canonical gRPC codes. If not specified, it represents `Code.INTERNAL`.
   * @return value or {@code null} for none
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * Maps to canonical gRPC codes. If not specified, it represents `Code.INTERNAL`.
   * @param code code or {@code null} for none
   */
  public GraphqlErrorExtensions setCode(java.lang.String code) {
    this.code = code;
    return this;
  }

  /**
   * More detailed error message to assist debugging. It contains application business logic that
   * are inappropriate to leak publicly. In the emulator, Data Connect API always includes it to
   * assist local development and debugging. In the backend, ConnectorService always hides it.
   * GraphqlService without impersonation always include it. GraphqlService with impersonation
   * includes it only if explicitly opted-in with `include_debug_details` in
   * `GraphqlRequestExtensions`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDebugDetails() {
    return debugDetails;
  }

  /**
   * More detailed error message to assist debugging. It contains application business logic that
   * are inappropriate to leak publicly. In the emulator, Data Connect API always includes it to
   * assist local development and debugging. In the backend, ConnectorService always hides it.
   * GraphqlService without impersonation always include it. GraphqlService with impersonation
   * includes it only if explicitly opted-in with `include_debug_details` in
   * `GraphqlRequestExtensions`.
   * @param debugDetails debugDetails or {@code null} for none
   */
  public GraphqlErrorExtensions setDebugDetails(java.lang.String debugDetails) {
    this.debugDetails = debugDetails;
    return this;
  }

  /**
   * The source file name where the error occurred. Included only for `UpdateSchema` and
   * `UpdateConnector`, it corresponds to `File.path` of the provided `Source`.
   * @return value or {@code null} for none
   */
  public java.lang.String getFile() {
    return file;
  }

  /**
   * The source file name where the error occurred. Included only for `UpdateSchema` and
   * `UpdateConnector`, it corresponds to `File.path` of the provided `Source`.
   * @param file file or {@code null} for none
   */
  public GraphqlErrorExtensions setFile(java.lang.String file) {
    this.file = file;
    return this;
  }

  /**
   * Warning level describes the severity and required action to suppress this warning when Firebase
   * CLI run into it.
   * @return value or {@code null} for none
   */
  public java.lang.String getWarningLevel() {
    return warningLevel;
  }

  /**
   * Warning level describes the severity and required action to suppress this warning when Firebase
   * CLI run into it.
   * @param warningLevel warningLevel or {@code null} for none
   */
  public GraphqlErrorExtensions setWarningLevel(java.lang.String warningLevel) {
    this.warningLevel = warningLevel;
    return this;
  }

  /**
   * Workarounds provide suggestions to address the compile errors or warnings.
   * @return value or {@code null} for none
   */
  public java.util.List<Workaround> getWorkarounds() {
    return workarounds;
  }

  /**
   * Workarounds provide suggestions to address the compile errors or warnings.
   * @param workarounds workarounds or {@code null} for none
   */
  public GraphqlErrorExtensions setWorkarounds(java.util.List<Workaround> workarounds) {
    this.workarounds = workarounds;
    return this;
  }

  @Override
  public GraphqlErrorExtensions set(String fieldName, Object value) {
    return (GraphqlErrorExtensions) super.set(fieldName, value);
  }

  @Override
  public GraphqlErrorExtensions clone() {
    return (GraphqlErrorExtensions) super.clone();
  }

}
