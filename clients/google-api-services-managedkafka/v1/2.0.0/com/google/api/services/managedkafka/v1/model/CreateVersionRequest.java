/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * Request for CreateVersion.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CreateVersionRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The schema ID of the schema. If not specified, the schema ID will be generated by the
   * server. If the schema ID is specified, it must not be used by an existing schema that is
   * different from the schema to be created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer id;

  /**
   * Optional. If true, the schema will be normalized before being stored. The default is false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean normalize;

  /**
   * Optional. The schema references used by the schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SchemaReference> references;

  /**
   * Required. The schema payload
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String schema;

  /**
   * Optional. The type of the schema. It is optional. If not specified, the schema type will be
   * AVRO.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String schemaType;

  /**
   * Optional. The version to create. It is optional. If not specified, the version will be created
   * with the max version ID of the subject increased by 1. If the version ID is specified, it will
   * be used as the new version ID and must not be used by an existing version of the subject.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer version;

  /**
   * Optional. The schema ID of the schema. If not specified, the schema ID will be generated by the
   * server. If the schema ID is specified, it must not be used by an existing schema that is
   * different from the schema to be created.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Optional. The schema ID of the schema. If not specified, the schema ID will be generated by the
   * server. If the schema ID is specified, it must not be used by an existing schema that is
   * different from the schema to be created.
   * @param id id or {@code null} for none
   */
  public CreateVersionRequest setId(java.lang.Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Optional. If true, the schema will be normalized before being stored. The default is false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNormalize() {
    return normalize;
  }

  /**
   * Optional. If true, the schema will be normalized before being stored. The default is false.
   * @param normalize normalize or {@code null} for none
   */
  public CreateVersionRequest setNormalize(java.lang.Boolean normalize) {
    this.normalize = normalize;
    return this;
  }

  /**
   * Optional. The schema references used by the schema.
   * @return value or {@code null} for none
   */
  public java.util.List<SchemaReference> getReferences() {
    return references;
  }

  /**
   * Optional. The schema references used by the schema.
   * @param references references or {@code null} for none
   */
  public CreateVersionRequest setReferences(java.util.List<SchemaReference> references) {
    this.references = references;
    return this;
  }

  /**
   * Required. The schema payload
   * @return value or {@code null} for none
   */
  public java.lang.String getSchema() {
    return schema;
  }

  /**
   * Required. The schema payload
   * @param schema schema or {@code null} for none
   */
  public CreateVersionRequest setSchema(java.lang.String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Optional. The type of the schema. It is optional. If not specified, the schema type will be
   * AVRO.
   * @return value or {@code null} for none
   */
  public java.lang.String getSchemaType() {
    return schemaType;
  }

  /**
   * Optional. The type of the schema. It is optional. If not specified, the schema type will be
   * AVRO.
   * @param schemaType schemaType or {@code null} for none
   */
  public CreateVersionRequest setSchemaType(java.lang.String schemaType) {
    this.schemaType = schemaType;
    return this;
  }

  /**
   * Optional. The version to create. It is optional. If not specified, the version will be created
   * with the max version ID of the subject increased by 1. If the version ID is specified, it will
   * be used as the new version ID and must not be used by an existing version of the subject.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Optional. The version to create. It is optional. If not specified, the version will be created
   * with the max version ID of the subject increased by 1. If the version ID is specified, it will
   * be used as the new version ID and must not be used by an existing version of the subject.
   * @param version version or {@code null} for none
   */
  public CreateVersionRequest setVersion(java.lang.Integer version) {
    this.version = version;
    return this;
  }

  @Override
  public CreateVersionRequest set(String fieldName, Object value) {
    return (CreateVersionRequest) super.set(fieldName, value);
  }

  @Override
  public CreateVersionRequest clone() {
    return (CreateVersionRequest) super.clone();
  }

}
