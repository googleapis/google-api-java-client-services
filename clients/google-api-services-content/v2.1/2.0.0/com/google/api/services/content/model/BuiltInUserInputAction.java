/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.content.model;

/**
 * Action that is implemented and performed in (your) third-party application. The application needs
 * to show an additional content and input form to the merchant. They can start the action only when
 * they provided all required inputs. The application will request processing of the action by
 * calling the [triggeraction method](https://developers.google.com/shopping-
 * content/reference/rest/v2.1/merchantsupport/triggeraction).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Content API for Shopping. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuiltInUserInputAction extends com.google.api.client.json.GenericJson {

  /**
   * Internal details. Not for display but need to be sent back when triggering the action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String actionContext;

  /**
   * Actions may provide multiple different flows. Merchant selects one that fits best to their
   * intent. Selecting the flow is the first step in user's interaction with the action. It affects
   * what input fields will be available and required and also how the request will be processed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ActionFlow> flows;

  static {
    // hack to force ProGuard to consider ActionFlow used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ActionFlow.class);
  }

  /**
   * Internal details. Not for display but need to be sent back when triggering the action.
   * @return value or {@code null} for none
   */
  public java.lang.String getActionContext() {
    return actionContext;
  }

  /**
   * Internal details. Not for display but need to be sent back when triggering the action.
   * @param actionContext actionContext or {@code null} for none
   */
  public BuiltInUserInputAction setActionContext(java.lang.String actionContext) {
    this.actionContext = actionContext;
    return this;
  }

  /**
   * Actions may provide multiple different flows. Merchant selects one that fits best to their
   * intent. Selecting the flow is the first step in user's interaction with the action. It affects
   * what input fields will be available and required and also how the request will be processed.
   * @return value or {@code null} for none
   */
  public java.util.List<ActionFlow> getFlows() {
    return flows;
  }

  /**
   * Actions may provide multiple different flows. Merchant selects one that fits best to their
   * intent. Selecting the flow is the first step in user's interaction with the action. It affects
   * what input fields will be available and required and also how the request will be processed.
   * @param flows flows or {@code null} for none
   */
  public BuiltInUserInputAction setFlows(java.util.List<ActionFlow> flows) {
    this.flows = flows;
    return this;
  }

  @Override
  public BuiltInUserInputAction set(String fieldName, Object value) {
    return (BuiltInUserInputAction) super.set(fieldName, value);
  }

  @Override
  public BuiltInUserInputAction clone() {
    return (BuiltInUserInputAction) super.clone();
  }

}
