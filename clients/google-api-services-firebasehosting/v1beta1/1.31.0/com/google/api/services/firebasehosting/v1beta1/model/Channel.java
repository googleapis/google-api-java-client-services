/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1.model;

/**
 * A `Channel` represents a stream of releases for a site. All sites have a default `live` channel
 * that serves content to the live Firebase-provided domains and any connected custom domains.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Hosting API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Channel extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The time at which the channel was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * The time at which the channel will be automatically deleted. If null, the channel will not be
   * automatically deleted. This field is present in output whether set directly or via the `ttl`
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Text labels used for extra metadata and/or filtering.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The fully-qualified identifier of the Channel.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The current release for the channel, if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Release release;

  /**
   * The number of previous releases to retain on the channel for rollback or other purposes. Must
   * be a number between 1-100. Defaults to 10 for new channels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer retainedReleaseCount;

  /**
   * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past
   * the time of the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String ttl;

  /**
   * Output only. The time at which the channel was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The URL at which the channel can be viewed. For the `live` channel, the content of
   * the current release may also be visible at other URLs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Output only. The time at which the channel was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time at which the channel was created.
   * @param createTime createTime or {@code null} for none
   */
  public Channel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time at which the channel will be automatically deleted. If null, the channel will not be
   * automatically deleted. This field is present in output whether set directly or via the `ttl`
   * field.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * The time at which the channel will be automatically deleted. If null, the channel will not be
   * automatically deleted. This field is present in output whether set directly or via the `ttl`
   * field.
   * @param expireTime expireTime or {@code null} for none
   */
  public Channel setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Text labels used for extra metadata and/or filtering.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Text labels used for extra metadata and/or filtering.
   * @param labels labels or {@code null} for none
   */
  public Channel setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The fully-qualified identifier of the Channel.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The fully-qualified identifier of the Channel.
   * @param name name or {@code null} for none
   */
  public Channel setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The current release for the channel, if any.
   * @return value or {@code null} for none
   */
  public Release getRelease() {
    return release;
  }

  /**
   * Output only. The current release for the channel, if any.
   * @param release release or {@code null} for none
   */
  public Channel setRelease(Release release) {
    this.release = release;
    return this;
  }

  /**
   * The number of previous releases to retain on the channel for rollback or other purposes. Must
   * be a number between 1-100. Defaults to 10 for new channels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRetainedReleaseCount() {
    return retainedReleaseCount;
  }

  /**
   * The number of previous releases to retain on the channel for rollback or other purposes. Must
   * be a number between 1-100. Defaults to 10 for new channels.
   * @param retainedReleaseCount retainedReleaseCount or {@code null} for none
   */
  public Channel setRetainedReleaseCount(java.lang.Integer retainedReleaseCount) {
    this.retainedReleaseCount = retainedReleaseCount;
    return this;
  }

  /**
   * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past
   * the time of the request.
   * @return value or {@code null} for none
   */
  public String getTtl() {
    return ttl;
  }

  /**
   * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past
   * the time of the request.
   * @param ttl ttl or {@code null} for none
   */
  public Channel setTtl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Output only. The time at which the channel was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time at which the channel was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Channel setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The URL at which the channel can be viewed. For the `live` channel, the content of
   * the current release may also be visible at other URLs.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Output only. The URL at which the channel can be viewed. For the `live` channel, the content of
   * the current release may also be visible at other URLs.
   * @param url url or {@code null} for none
   */
  public Channel setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public Channel set(String fieldName, Object value) {
    return (Channel) super.set(fieldName, value);
  }

  @Override
  public Channel clone() {
    return (Channel) super.clone();
  }

}
