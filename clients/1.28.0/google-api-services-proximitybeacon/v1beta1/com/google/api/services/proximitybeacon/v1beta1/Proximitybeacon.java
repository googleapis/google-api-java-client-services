/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1;

/**
 * Service definition for Proximitybeacon (v1beta1).
 *
 * <p>
 * Registers, manages, indexes, and searches beacons.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/beacons/proximity/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ProximitybeaconRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Proximitybeacon extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Proximity Beacon API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://proximitybeacon.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Proximitybeacon(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Proximitybeacon(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Beaconinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
   *   {@code Proximitybeacon.Beaconinfo.List request = proximitybeacon.beaconinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Beaconinfo beaconinfo() {
    return new Beaconinfo();
  }

  /**
   * The "beaconinfo" collection of methods.
   */
  public class Beaconinfo {

    /**
     * Given one or more beacon observations, returns any beacon information and attachments accessible
     * to your application. Authorize by using the [API
     * key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key) for
     * the application.
     *
     * Create a request for the method "beaconinfo.getforobserved".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Getforobserved#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsRequest}
     * @return the request
     */
    public Getforobserved getforobserved(com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsRequest content) throws java.io.IOException {
      Getforobserved result = new Getforobserved(content);
      initialize(result);
      return result;
    }

    public class Getforobserved extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsResponse> {

      private static final String REST_PATH = "v1beta1/beaconinfo:getforobserved";

      /**
       * Given one or more beacon observations, returns any beacon information and attachments
       * accessible to your application. Authorize by using the [API
       * key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key) for
       * the application.
       *
       * Create a request for the method "beaconinfo.getforobserved".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Getforobserved#execute()} method to invoke the remote
       * operation. <p> {@link Getforobserved#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsRequest}
       * @since 1.13
       */
      protected Getforobserved(com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsRequest content) {
        super(Proximitybeacon.this, "POST", REST_PATH, content, com.google.api.services.proximitybeacon.v1beta1.model.GetInfoForObservedBeaconsResponse.class);
      }

      @Override
      public Getforobserved set$Xgafv(java.lang.String $Xgafv) {
        return (Getforobserved) super.set$Xgafv($Xgafv);
      }

      @Override
      public Getforobserved setAccessToken(java.lang.String accessToken) {
        return (Getforobserved) super.setAccessToken(accessToken);
      }

      @Override
      public Getforobserved setAlt(java.lang.String alt) {
        return (Getforobserved) super.setAlt(alt);
      }

      @Override
      public Getforobserved setCallback(java.lang.String callback) {
        return (Getforobserved) super.setCallback(callback);
      }

      @Override
      public Getforobserved setFields(java.lang.String fields) {
        return (Getforobserved) super.setFields(fields);
      }

      @Override
      public Getforobserved setKey(java.lang.String key) {
        return (Getforobserved) super.setKey(key);
      }

      @Override
      public Getforobserved setOauthToken(java.lang.String oauthToken) {
        return (Getforobserved) super.setOauthToken(oauthToken);
      }

      @Override
      public Getforobserved setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getforobserved) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getforobserved setQuotaUser(java.lang.String quotaUser) {
        return (Getforobserved) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getforobserved setUploadType(java.lang.String uploadType) {
        return (Getforobserved) super.setUploadType(uploadType);
      }

      @Override
      public Getforobserved setUploadProtocol(java.lang.String uploadProtocol) {
        return (Getforobserved) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Getforobserved set(String parameterName, Object value) {
        return (Getforobserved) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Beacons collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
   *   {@code Proximitybeacon.Beacons.List request = proximitybeacon.beacons().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Beacons beacons() {
    return new Beacons();
  }

  /**
   * The "beacons" collection of methods.
   */
  public class Beacons {

    /**
     * Activates a beacon. A beacon that is active will return information and attachment data when
     * queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do
     * nothing (but will return a successful response code).
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.activate".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Activate#execute()} method to invoke the remote operation.
     *
     * @param beaconName Beacon that should be activated. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the
     *        beacon's "stable" UID.
    Required.
     * @return the request
     */
    public Activate activate(java.lang.String beaconName) throws java.io.IOException {
      Activate result = new Activate(beaconName);
      initialize(result);
      return result;
    }

    public class Activate extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Empty> {

      private static final String REST_PATH = "v1beta1/{+beaconName}:activate";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Activates a beacon. A beacon that is active will return information and attachment data when
       * queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will
       * do nothing (but will return a successful response code).
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.activate".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Activate#execute()} method to invoke the remote operation.
       * <p> {@link
       * Activate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Beacon that should be activated. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the
     *        beacon's "stable" UID.
    Required.
       * @since 1.13
       */
      protected Activate(java.lang.String beaconName) {
        super(Proximitybeacon.this, "POST", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Empty.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public Activate set$Xgafv(java.lang.String $Xgafv) {
        return (Activate) super.set$Xgafv($Xgafv);
      }

      @Override
      public Activate setAccessToken(java.lang.String accessToken) {
        return (Activate) super.setAccessToken(accessToken);
      }

      @Override
      public Activate setAlt(java.lang.String alt) {
        return (Activate) super.setAlt(alt);
      }

      @Override
      public Activate setCallback(java.lang.String callback) {
        return (Activate) super.setCallback(callback);
      }

      @Override
      public Activate setFields(java.lang.String fields) {
        return (Activate) super.setFields(fields);
      }

      @Override
      public Activate setKey(java.lang.String key) {
        return (Activate) super.setKey(key);
      }

      @Override
      public Activate setOauthToken(java.lang.String oauthToken) {
        return (Activate) super.setOauthToken(oauthToken);
      }

      @Override
      public Activate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Activate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Activate setQuotaUser(java.lang.String quotaUser) {
        return (Activate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Activate setUploadType(java.lang.String uploadType) {
        return (Activate) super.setUploadType(uploadType);
      }

      @Override
      public Activate setUploadProtocol(java.lang.String uploadProtocol) {
        return (Activate) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Beacon that should be activated. A beacon name has the format "beacons/N!beaconId" where
       * the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's
       * type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or
       * `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Beacon that should be activated. A beacon name has the format "beacons/N!beaconId" where the
     beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible
     values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For
     Eddystone-EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Beacon that should be activated. A beacon name has the format "beacons/N!beaconId" where
       * the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's
       * type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or
       * `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      public Activate setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to activate. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to activate. If the project id is not specified then the project
     making the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to activate. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      public Activate setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Activate set(String parameterName, Object value) {
        return (Activate) super.set(parameterName, value);
      }
    }
    /**
     * Deactivates a beacon. Once deactivated, the API will not return information nor attachment data
     * for the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already
     * inactive beacon will do nothing (but will return a successful response code).
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.deactivate".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Deactivate#execute()} method to invoke the remote operation.
     *
     * @param beaconName Beacon that should be deactivated. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the
     *        beacon's "stable" UID.
    Required.
     * @return the request
     */
    public Deactivate deactivate(java.lang.String beaconName) throws java.io.IOException {
      Deactivate result = new Deactivate(beaconName);
      initialize(result);
      return result;
    }

    public class Deactivate extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Empty> {

      private static final String REST_PATH = "v1beta1/{+beaconName}:deactivate";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Deactivates a beacon. Once deactivated, the API will not return information nor attachment data
       * for the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already
       * inactive beacon will do nothing (but will return a successful response code).
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.deactivate".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Deactivate#execute()} method to invoke the remote
       * operation. <p> {@link
       * Deactivate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Beacon that should be deactivated. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the
     *        beacon's "stable" UID.
    Required.
       * @since 1.13
       */
      protected Deactivate(java.lang.String beaconName) {
        super(Proximitybeacon.this, "POST", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Empty.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public Deactivate set$Xgafv(java.lang.String $Xgafv) {
        return (Deactivate) super.set$Xgafv($Xgafv);
      }

      @Override
      public Deactivate setAccessToken(java.lang.String accessToken) {
        return (Deactivate) super.setAccessToken(accessToken);
      }

      @Override
      public Deactivate setAlt(java.lang.String alt) {
        return (Deactivate) super.setAlt(alt);
      }

      @Override
      public Deactivate setCallback(java.lang.String callback) {
        return (Deactivate) super.setCallback(callback);
      }

      @Override
      public Deactivate setFields(java.lang.String fields) {
        return (Deactivate) super.setFields(fields);
      }

      @Override
      public Deactivate setKey(java.lang.String key) {
        return (Deactivate) super.setKey(key);
      }

      @Override
      public Deactivate setOauthToken(java.lang.String oauthToken) {
        return (Deactivate) super.setOauthToken(oauthToken);
      }

      @Override
      public Deactivate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Deactivate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Deactivate setQuotaUser(java.lang.String quotaUser) {
        return (Deactivate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Deactivate setUploadType(java.lang.String uploadType) {
        return (Deactivate) super.setUploadType(uploadType);
      }

      @Override
      public Deactivate setUploadProtocol(java.lang.String uploadProtocol) {
        return (Deactivate) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Beacon that should be deactivated. A beacon name has the format "beacons/N!beaconId" where
       * the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's
       * type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or
       * `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Beacon that should be deactivated. A beacon name has the format "beacons/N!beaconId" where the
     beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible
     values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For
     Eddystone-EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Beacon that should be deactivated. A beacon name has the format "beacons/N!beaconId" where
       * the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's
       * type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or
       * `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      public Deactivate setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to deactivate. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to deactivate. If the project id is not specified then the project
     making the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to deactivate. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      public Deactivate setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Deactivate set(String parameterName, Object value) {
        return (Deactivate) super.set(parameterName, value);
      }
    }
    /**
     * Decommissions the specified beacon in the service. This beacon will no longer be returned from
     * `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a
     * beacon with this ID again.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.decommission".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Decommission#execute()} method to invoke the remote
     * operation.
     *
     * @param beaconName Beacon that should be decommissioned. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID of the
     *        beacon's "stable" UID.
    Required.
     * @return the request
     */
    public Decommission decommission(java.lang.String beaconName) throws java.io.IOException {
      Decommission result = new Decommission(beaconName);
      initialize(result);
      return result;
    }

    public class Decommission extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Empty> {

      private static final String REST_PATH = "v1beta1/{+beaconName}:decommission";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Decommissions the specified beacon in the service. This beacon will no longer be returned from
       * `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register
       * a beacon with this ID again.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.decommission".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Decommission#execute()} method to invoke the remote
       * operation. <p> {@link
       * Decommission#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Beacon that should be decommissioned. A beacon name has the format
    "beacons/N!beaconId" where the
     *        beaconId is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type.
     *        Possible values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
     *        for AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID of the
     *        beacon's "stable" UID.
    Required.
       * @since 1.13
       */
      protected Decommission(java.lang.String beaconName) {
        super(Proximitybeacon.this, "POST", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Empty.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public Decommission set$Xgafv(java.lang.String $Xgafv) {
        return (Decommission) super.set$Xgafv($Xgafv);
      }

      @Override
      public Decommission setAccessToken(java.lang.String accessToken) {
        return (Decommission) super.setAccessToken(accessToken);
      }

      @Override
      public Decommission setAlt(java.lang.String alt) {
        return (Decommission) super.setAlt(alt);
      }

      @Override
      public Decommission setCallback(java.lang.String callback) {
        return (Decommission) super.setCallback(callback);
      }

      @Override
      public Decommission setFields(java.lang.String fields) {
        return (Decommission) super.setFields(fields);
      }

      @Override
      public Decommission setKey(java.lang.String key) {
        return (Decommission) super.setKey(key);
      }

      @Override
      public Decommission setOauthToken(java.lang.String oauthToken) {
        return (Decommission) super.setOauthToken(oauthToken);
      }

      @Override
      public Decommission setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Decommission) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Decommission setQuotaUser(java.lang.String quotaUser) {
        return (Decommission) super.setQuotaUser(quotaUser);
      }

      @Override
      public Decommission setUploadType(java.lang.String uploadType) {
        return (Decommission) super.setUploadType(uploadType);
      }

      @Override
      public Decommission setUploadProtocol(java.lang.String uploadProtocol) {
        return (Decommission) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Beacon that should be decommissioned. A beacon name has the format "beacons/N!beaconId"
       * where the beaconId is the base16 ID broadcast by the beacon and N is a code for the
       * beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       * iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current
       * EID of the beacon's "stable" UID. Required.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Beacon that should be decommissioned. A beacon name has the format "beacons/N!beaconId" where the
     beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible
     values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For
     Eddystone-EID beacons, you may use either the current EID of the beacon's "stable" UID. Required.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Beacon that should be decommissioned. A beacon name has the format "beacons/N!beaconId"
       * where the beaconId is the base16 ID broadcast by the beacon and N is a code for the
       * beacon's type. Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       * iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may use either the current
       * EID of the beacon's "stable" UID. Required.
       */
      public Decommission setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to decommission. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to decommission. If the project id is not specified then the project
     making the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to decommission. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      public Decommission setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Decommission set(String parameterName, Object value) {
        return (Decommission) super.set(parameterName, value);
      }
    }
    /**
     * Deletes the specified beacon including all diagnostics data for the beacon as well as any
     * attachments on the beacon (including those belonging to other projects). This operation cannot be
     * undone.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.delete".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param beaconName Beacon that should be deleted. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    for
     *        AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the beacon's
     *        "stable" UID.
    Required.
     * @return the request
     */
    public Delete delete(java.lang.String beaconName) throws java.io.IOException {
      Delete result = new Delete(beaconName);
      initialize(result);
      return result;
    }

    public class Delete extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Empty> {

      private static final String REST_PATH = "v1beta1/{+beaconName}";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Deletes the specified beacon including all diagnostics data for the beacon as well as any
       * attachments on the beacon (including those belonging to other projects). This operation cannot
       * be undone.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.delete".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Beacon that should be deleted. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    for
     *        AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the beacon's
     *        "stable" UID.
    Required.
       * @since 1.13
       */
      protected Delete(java.lang.String beaconName) {
        super(Proximitybeacon.this, "DELETE", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Empty.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Beacon that should be deleted. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
       * for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Beacon that should be deleted. A beacon name has the format "beacons/N!beaconId" where the beaconId
     is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are
     `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-
     EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Beacon that should be deleted. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
       * for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      public Delete setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to delete. If not provided, the project that is making the
       * request is used. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to delete. If not provided, the project that is making the request is
     used. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to delete. If not provided, the project that is making the
       * request is used. Optional.
       */
      public Delete setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Returns detailed information about the specified beacon.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
     * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Requests may supply an Eddystone-EID beacon name in the form: `beacons/4!beaconId` where the
     * `beaconId` is the base16 ephemeral ID broadcast by the beacon. The returned `Beacon` object will
     * contain the beacon's stable Eddystone-UID. Clients not authorized to resolve the beacon's
     * ephemeral Eddystone-EID broadcast will receive an error.
     *
     * Create a request for the method "beacons.get".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param beaconName Resource name of this beacon. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    for
     *        AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the beacon's
     *        "stable" UID.
    Required.
     * @return the request
     */
    public Get get(java.lang.String beaconName) throws java.io.IOException {
      Get result = new Get(beaconName);
      initialize(result);
      return result;
    }

    public class Get extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Beacon> {

      private static final String REST_PATH = "v1beta1/{+beaconName}";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Returns detailed information about the specified beacon.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
       * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Requests may supply an Eddystone-EID beacon name in the form: `beacons/4!beaconId` where the
       * `beaconId` is the base16 ephemeral ID broadcast by the beacon. The returned `Beacon` object
       * will contain the beacon's stable Eddystone-UID. Clients not authorized to resolve the beacon's
       * ephemeral Eddystone-EID broadcast will receive an error.
       *
       * Create a request for the method "beacons.get".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Resource name of this beacon. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
    for
     *        AltBeacon. For Eddystone-EID beacons, you may use either the
    current EID or the beacon's
     *        "stable" UID.
    Required.
       * @since 1.13
       */
      protected Get(java.lang.String beaconName) {
        super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Beacon.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
       * for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the beaconId
     is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are
     `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-
     EID beacons, you may use either the current EID or the beacon's "stable" UID. Required.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
       * for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the
       * beacon's "stable" UID. Required.
       */
      public Get setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to request. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to request. If the project id is not specified then the project making
     the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to request. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      public Get setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Searches the beacon registry for beacons that match the given search criteria. Only those beacons
     * that the client has permission to list will be returned.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
     * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.list".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.ListBeaconsResponse> {

      private static final String REST_PATH = "v1beta1/beacons";

      /**
       * Searches the beacon registry for beacons that match the given search criteria. Only those
       * beacons that the client has permission to list will be returned.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
       * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.list".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.ListBeaconsResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The maximum number of records to return for this request, up to a server-defined upper
       * limit.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of records to return for this request, up to a server-defined upper limit.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of records to return for this request, up to a server-defined upper
       * limit.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /** A pagination token obtained from a previous request to list beacons. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A pagination token obtained from a previous request to list beacons.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** A pagination token obtained from a previous request to list beacons. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * The project id to list beacons under. If not present then the project credential that made
       * the request is used as the project. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id to list beacons under. If not present then the project credential that made the
     request is used as the project. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id to list beacons under. If not present then the project credential that made
       * the request is used as the project. Optional.
       */
      public List setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      /**
       * Filter query string that supports the following field filters:
       *
       * * **description:`""`** For example: **description:"Room 3"** Returns beacons whose
       * description matches tokens in the string "Room 3" (not necessarily that exact string). The
       * string must be double-quoted. * **status:``** For example: **status:active** Returns
       * beacons whose status matches the given value. Values must be one of the Beacon.Status enum
       * values (case insensitive). Accepts multiple filters which will be combined with OR logic. *
       * **stability:``** For example: **stability:mobile** Returns beacons whose expected stability
       * matches the given value. Values must be one of the Beacon.Stability enum values (case
       * insensitive). Accepts multiple filters which will be combined with OR logic. *
       * **place\_id:`""`** For example: **place\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="** Returns
       * beacons explicitly registered at the given place, expressed as a Place ID obtained from
       * [Google Places API](/places/place-id). Does not match places inside the given place. Does
       * not consider the beacon's actual location (which may be different from its registered
       * place). Accepts multiple filters that will be combined with OR logic. The place ID must be
       * double-quoted. * **registration\_time`[<|>|<=|>=]`** For example:
       * **registration\_time>=1433116800** Returns beacons whose registration time matches the
       * given filter. Supports the operators: <, >, <=, and >=. Timestamp must be expressed as an
       * integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters
       * that will be combined with AND logic, to support "between" semantics. If more than two are
       * supplied, the latter ones are ignored. * **lat:` lng: radius:`** For example:
       * **lat:51.1232343 lng:-1.093852 radius:1000** Returns beacons whose registered location is
       * within the given circle. When any of these fields are given, all are required. Latitude and
       * longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0
       * respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000
       * km). * **property:`"="`** For example: **property:"battery-type=CR2032"** Returns beacons
       * which have a property of the given name and value. Supports multiple filters which will be
       * combined with OR logic. The entire name=value string must be double-quoted as one string. *
       * **attachment\_type:`""`** For example: **attachment_type:"my-namespace/my-type"** Returns
       * beacons having at least one attachment of the given namespaced type. Supports "any within
       * this namespace" via the partial wildcard syntax: "my-namespace". Supports multiple filters
       * which will be combined with OR logic. The string must be double-quoted. *
       * **indoor\_level:`""`** For example: **indoor\_level:"1"** Returns beacons which are located
       * on the given indoor level. Accepts multiple filters that will be combined with OR logic.
       *
       * Multiple filters on the same field are combined with OR logic (except registration_time
       * which is combined with AND logic). Multiple filters on different fields are combined with
       * AND logic. Filters should be separated by spaces.
       *
       * As with any HTTP query string parameter, the whole filter expression must be URL-encoded.
       *
       * Example REST request: `GET
       * /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
       */
      @com.google.api.client.util.Key
      private java.lang.String q;

      /** Filter query string that supports the following field filters:

     * **description:`""`** For example: **description:"Room 3"** Returns beacons whose description
     matches tokens in the string "Room 3" (not necessarily that exact string). The string must be
     double-quoted. * **status:``** For example: **status:active** Returns beacons whose status matches
     the given value. Values must be one of the Beacon.Status enum values (case insensitive). Accepts
     multiple filters which will be combined with OR logic. * **stability:``** For example:
     **stability:mobile** Returns beacons whose expected stability matches the given value. Values must
     be one of the Beacon.Stability enum values (case insensitive). Accepts multiple filters which will
     be combined with OR logic. * **place\_id:`""`** For example:
     **place\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="** Returns beacons explicitly registered at the given
     place, expressed as a Place ID obtained from [Google Places API](/places/place-id). Does not match
     places inside the given place. Does not consider the beacon's actual location (which may be
     different from its registered place). Accepts multiple filters that will be combined with OR logic.
     The place ID must be double-quoted. * **registration\_time`[<|>|<=|>=]`** For example:
     **registration\_time>=1433116800** Returns beacons whose registration time matches the given
     filter. Supports the operators: <, >, <=, and >=. Timestamp must be expressed as an integer number
     of seconds since midnight January 1, 1970 UTC. Accepts at most two filters that will be combined
     with AND logic, to support "between" semantics. If more than two are supplied, the latter ones are
     ignored. * **lat:` lng: radius:`** For example: **lat:51.1232343 lng:-1.093852 radius:1000**
     Returns beacons whose registered location is within the given circle. When any of these fields are
     given, all are required. Latitude and longitude must be decimal degrees between -90.0 and 90.0 and
     between -180.0 and 180.0 respectively. Radius must be an integer number of meters between 10 and
     1,000,000 (1000 km). * **property:`"="`** For example: **property:"battery-type=CR2032"** Returns
     beacons which have a property of the given name and value. Supports multiple filters which will be
     combined with OR logic. The entire name=value string must be double-quoted as one string. *
     **attachment\_type:`""`** For example: **attachment_type:"my-namespace/my-type"** Returns beacons
     having at least one attachment of the given namespaced type. Supports "any within this namespace"
     via the partial wildcard syntax: "my-namespace". Supports multiple filters which will be combined
     with OR logic. The string must be double-quoted. * **indoor\_level:`""`** For example:
     **indoor\_level:"1"** Returns beacons which are located on the given indoor level. Accepts multiple
     filters that will be combined with OR logic.

     Multiple filters on the same field are combined with OR logic (except registration_time which is
     combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters
     should be separated by spaces.

     As with any HTTP query string parameter, the whole filter expression must be URL-encoded.

     Example REST request: `GET
     /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
       */
      public java.lang.String getQ() {
        return q;
      }

      /**
       * Filter query string that supports the following field filters:
       *
       * * **description:`""`** For example: **description:"Room 3"** Returns beacons whose
       * description matches tokens in the string "Room 3" (not necessarily that exact string). The
       * string must be double-quoted. * **status:``** For example: **status:active** Returns
       * beacons whose status matches the given value. Values must be one of the Beacon.Status enum
       * values (case insensitive). Accepts multiple filters which will be combined with OR logic. *
       * **stability:``** For example: **stability:mobile** Returns beacons whose expected stability
       * matches the given value. Values must be one of the Beacon.Stability enum values (case
       * insensitive). Accepts multiple filters which will be combined with OR logic. *
       * **place\_id:`""`** For example: **place\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="** Returns
       * beacons explicitly registered at the given place, expressed as a Place ID obtained from
       * [Google Places API](/places/place-id). Does not match places inside the given place. Does
       * not consider the beacon's actual location (which may be different from its registered
       * place). Accepts multiple filters that will be combined with OR logic. The place ID must be
       * double-quoted. * **registration\_time`[<|>|<=|>=]`** For example:
       * **registration\_time>=1433116800** Returns beacons whose registration time matches the
       * given filter. Supports the operators: <, >, <=, and >=. Timestamp must be expressed as an
       * integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters
       * that will be combined with AND logic, to support "between" semantics. If more than two are
       * supplied, the latter ones are ignored. * **lat:` lng: radius:`** For example:
       * **lat:51.1232343 lng:-1.093852 radius:1000** Returns beacons whose registered location is
       * within the given circle. When any of these fields are given, all are required. Latitude and
       * longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0
       * respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000
       * km). * **property:`"="`** For example: **property:"battery-type=CR2032"** Returns beacons
       * which have a property of the given name and value. Supports multiple filters which will be
       * combined with OR logic. The entire name=value string must be double-quoted as one string. *
       * **attachment\_type:`""`** For example: **attachment_type:"my-namespace/my-type"** Returns
       * beacons having at least one attachment of the given namespaced type. Supports "any within
       * this namespace" via the partial wildcard syntax: "my-namespace". Supports multiple filters
       * which will be combined with OR logic. The string must be double-quoted. *
       * **indoor\_level:`""`** For example: **indoor\_level:"1"** Returns beacons which are located
       * on the given indoor level. Accepts multiple filters that will be combined with OR logic.
       *
       * Multiple filters on the same field are combined with OR logic (except registration_time
       * which is combined with AND logic). Multiple filters on different fields are combined with
       * AND logic. Filters should be separated by spaces.
       *
       * As with any HTTP query string parameter, the whole filter expression must be URL-encoded.
       *
       * Example REST request: `GET
       * /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
       */
      public List setQ(java.lang.String q) {
        this.q = q;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within
     * the system. An ID can be registered only once.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.register".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Register#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Beacon}
     * @return the request
     */
    public Register register(com.google.api.services.proximitybeacon.v1beta1.model.Beacon content) throws java.io.IOException {
      Register result = new Register(content);
      initialize(result);
      return result;
    }

    public class Register extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Beacon> {

      private static final String REST_PATH = "v1beta1/beacons:register";

      /**
       * Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique
       * within the system. An ID can be registered only once.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.register".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Register#execute()} method to invoke the remote operation.
       * <p> {@link
       * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Beacon}
       * @since 1.13
       */
      protected Register(com.google.api.services.proximitybeacon.v1beta1.model.Beacon content) {
        super(Proximitybeacon.this, "POST", REST_PATH, content, com.google.api.services.proximitybeacon.v1beta1.model.Beacon.class);
      }

      @Override
      public Register set$Xgafv(java.lang.String $Xgafv) {
        return (Register) super.set$Xgafv($Xgafv);
      }

      @Override
      public Register setAccessToken(java.lang.String accessToken) {
        return (Register) super.setAccessToken(accessToken);
      }

      @Override
      public Register setAlt(java.lang.String alt) {
        return (Register) super.setAlt(alt);
      }

      @Override
      public Register setCallback(java.lang.String callback) {
        return (Register) super.setCallback(callback);
      }

      @Override
      public Register setFields(java.lang.String fields) {
        return (Register) super.setFields(fields);
      }

      @Override
      public Register setKey(java.lang.String key) {
        return (Register) super.setKey(key);
      }

      @Override
      public Register setOauthToken(java.lang.String oauthToken) {
        return (Register) super.setOauthToken(oauthToken);
      }

      @Override
      public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Register) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Register setQuotaUser(java.lang.String quotaUser) {
        return (Register) super.setQuotaUser(quotaUser);
      }

      @Override
      public Register setUploadType(java.lang.String uploadType) {
        return (Register) super.setUploadType(uploadType);
      }

      @Override
      public Register setUploadProtocol(java.lang.String uploadProtocol) {
        return (Register) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The project id of the project the beacon will be registered to. If the project id is not
       * specified then the project making the request is used. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the project the beacon will be registered to. If the project id is not specified
     then the project making the request is used. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the project the beacon will be registered to. If the project id is not
       * specified then the project making the request is used. Optional.
       */
      public Register setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Register set(String parameterName, Object value) {
        return (Register) super.set(parameterName, value);
      }
    }
    /**
     * Updates the information about the specified beacon. **Any field that you do not populate in the
     * submitted beacon will be permanently erased**, so you should follow the "read, modify, write"
     * pattern to avoid inadvertently destroying data.
     *
     * Changes to the beacon status via this method will be  silently ignored. To update beacon status,
     * use the separate methods on this API for activation, deactivation, and decommissioning.
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
     * owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "beacons.update".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param beaconName Resource name of this beacon. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
    This field must be
     *        left empty when registering. After reading a beacon,
    clients can use the name for future
     *        operations.
     * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Beacon}
     * @return the request
     */
    public Update update(java.lang.String beaconName, com.google.api.services.proximitybeacon.v1beta1.model.Beacon content) throws java.io.IOException {
      Update result = new Update(beaconName, content);
      initialize(result);
      return result;
    }

    public class Update extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Beacon> {

      private static final String REST_PATH = "v1beta1/{+beaconName}";

      private final java.util.regex.Pattern BEACON_NAME_PATTERN =
          java.util.regex.Pattern.compile("^beacons/[^/]+$");

      /**
       * Updates the information about the specified beacon. **Any field that you do not populate in the
       * submitted beacon will be permanently erased**, so you should follow the "read, modify, write"
       * pattern to avoid inadvertently destroying data.
       *
       * Changes to the beacon status via this method will be  silently ignored. To update beacon
       * status, use the separate methods on this API for activation, deactivation, and decommissioning.
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "beacons.update".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param beaconName Resource name of this beacon. A beacon name has the format
    "beacons/N!beaconId" where the beaconId
     *        is the base16 ID broadcast by
    the beacon and N is a code for the beacon's type. Possible
     *        values are
    `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
    This field must be
     *        left empty when registering. After reading a beacon,
    clients can use the name for future
     *        operations.
       * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Beacon}
       * @since 1.13
       */
      protected Update(java.lang.String beaconName, com.google.api.services.proximitybeacon.v1beta1.model.Beacon content) {
        super(Proximitybeacon.this, "PUT", REST_PATH, content, com.google.api.services.proximitybeacon.v1beta1.model.Beacon.class);
        this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
       *
       * This field must be left empty when registering. After reading a beacon, clients can use the
       * name for future operations.
       */
      @com.google.api.client.util.Key
      private java.lang.String beaconName;

      /** Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the beaconId
     is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are
     `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.

     This field must be left empty when registering. After reading a beacon, clients can use the name
     for future operations.
       */
      public java.lang.String getBeaconName() {
        return beaconName;
      }

      /**
       * Resource name of this beacon. A beacon name has the format "beacons/N!beaconId" where the
       * beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       * Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
       *
       * This field must be left empty when registering. After reading a beacon, clients can use the
       * name for future operations.
       */
      public Update setBeaconName(java.lang.String beaconName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
              "Parameter beaconName must conform to the pattern " +
              "^beacons/[^/]+$");
        }
        this.beaconName = beaconName;
        return this;
      }

      /**
       * The project id of the beacon to update. If the project id is not specified then the project
       * making the request is used. The project id must match the project that owns the beacon.
       * Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the beacon to update. If the project id is not specified then the project making
     the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the beacon to update. If the project id is not specified then the project
       * making the request is used. The project id must match the project that owns the beacon.
       * Optional.
       */
      public Update setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Attachments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
     *   {@code Proximitybeacon.Attachments.List request = proximitybeacon.attachments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Attachments attachments() {
      return new Attachments();
    }

    /**
     * The "attachments" collection of methods.
     */
    public class Attachments {

      /**
       * Deletes multiple attachments on a given beacon. This operation is permanent and cannot be undone.
       *
       * You can optionally specify `namespacedType` to choose which attachments should be deleted. If you
       * do not specify `namespacedType`,  all your attachments on the given beacon will be deleted. You
       * also may explicitly specify `*` to delete all.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "attachments.batchDelete".
       *
       * This request holds the parameters needed by the proximitybeacon server.  After setting any
       * optional parameters, call the {@link BatchDelete#execute()} method to invoke the remote
       * operation.
       *
       * @param beaconName The beacon whose attachments should be deleted. A beacon name has the
      format "beacons/N!beaconId"
       *        where the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the
       *        beacon's type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       *        iBeacon, or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current
       *        EID or the beacon's "stable" UID.
      Required.
       * @return the request
       */
      public BatchDelete batchDelete(java.lang.String beaconName) throws java.io.IOException {
        BatchDelete result = new BatchDelete(beaconName);
        initialize(result);
        return result;
      }

      public class BatchDelete extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.DeleteAttachmentsResponse> {

        private static final String REST_PATH = "v1beta1/{+beaconName}/attachments:batchDelete";

        private final java.util.regex.Pattern BEACON_NAME_PATTERN =
            java.util.regex.Pattern.compile("^beacons/[^/]+$");

        /**
         * Deletes multiple attachments on a given beacon. This operation is permanent and cannot be
         * undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments should be deleted. If
         * you do not specify `namespacedType`,  all your attachments on the given beacon will be deleted.
         * You also may explicitly specify `*` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
         * owner** or **Can edit** permissions in the Google Developers Console project.
         *
         * Create a request for the method "attachments.batchDelete".
         *
         * This request holds the parameters needed by the the proximitybeacon server.  After setting any
         * optional parameters, call the {@link BatchDelete#execute()} method to invoke the remote
         * operation. <p> {@link
         * BatchDelete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param beaconName The beacon whose attachments should be deleted. A beacon name has the
      format "beacons/N!beaconId"
       *        where the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the
       *        beacon's type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       *        iBeacon, or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current
       *        EID or the beacon's "stable" UID.
      Required.
         * @since 1.13
         */
        protected BatchDelete(java.lang.String beaconName) {
          super(Proximitybeacon.this, "POST", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.DeleteAttachmentsResponse.class);
          this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
        }

        @Override
        public BatchDelete set$Xgafv(java.lang.String $Xgafv) {
          return (BatchDelete) super.set$Xgafv($Xgafv);
        }

        @Override
        public BatchDelete setAccessToken(java.lang.String accessToken) {
          return (BatchDelete) super.setAccessToken(accessToken);
        }

        @Override
        public BatchDelete setAlt(java.lang.String alt) {
          return (BatchDelete) super.setAlt(alt);
        }

        @Override
        public BatchDelete setCallback(java.lang.String callback) {
          return (BatchDelete) super.setCallback(callback);
        }

        @Override
        public BatchDelete setFields(java.lang.String fields) {
          return (BatchDelete) super.setFields(fields);
        }

        @Override
        public BatchDelete setKey(java.lang.String key) {
          return (BatchDelete) super.setKey(key);
        }

        @Override
        public BatchDelete setOauthToken(java.lang.String oauthToken) {
          return (BatchDelete) super.setOauthToken(oauthToken);
        }

        @Override
        public BatchDelete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (BatchDelete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public BatchDelete setQuotaUser(java.lang.String quotaUser) {
          return (BatchDelete) super.setQuotaUser(quotaUser);
        }

        @Override
        public BatchDelete setUploadType(java.lang.String uploadType) {
          return (BatchDelete) super.setUploadType(uploadType);
        }

        @Override
        public BatchDelete setUploadProtocol(java.lang.String uploadProtocol) {
          return (BatchDelete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The beacon whose attachments should be deleted. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        @com.google.api.client.util.Key
        private java.lang.String beaconName;

        /** The beacon whose attachments should be deleted. A beacon name has the format "beacons/N!beaconId"
       where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for
       AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable"
       UID. Required.
         */
        public java.lang.String getBeaconName() {
          return beaconName;
        }

        /**
         * The beacon whose attachments should be deleted. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        public BatchDelete setBeaconName(java.lang.String beaconName) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
          this.beaconName = beaconName;
          return this;
        }

        /**
         * Specifies the namespace and type of attachments to delete in `namespace/type` format.
         * Accepts `*` to specify "all types in all namespaces". Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String namespacedType;

        /** Specifies the namespace and type of attachments to delete in `namespace/type` format. Accepts `*`
       to specify "all types in all namespaces". Optional.
         */
        public java.lang.String getNamespacedType() {
          return namespacedType;
        }

        /**
         * Specifies the namespace and type of attachments to delete in `namespace/type` format.
         * Accepts `*` to specify "all types in all namespaces". Optional.
         */
        public BatchDelete setNamespacedType(java.lang.String namespacedType) {
          this.namespacedType = namespacedType;
          return this;
        }

        /**
         * The project id to delete beacon attachments under. This field can be used when "*" is
         * specified to mean all attachment namespaces. Projects may have multiple attachments with
         * multiple namespaces. If "*" is specified and the projectId string is empty, then the
         * project making the request is used. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** The project id to delete beacon attachments under. This field can be used when "*" is specified to
       mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If
       "*" is specified and the projectId string is empty, then the project making the request is used.
       Optional.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /**
         * The project id to delete beacon attachments under. This field can be used when "*" is
         * specified to mean all attachment namespaces. Projects may have multiple attachments with
         * multiple namespaces. If "*" is specified and the projectId string is empty, then the
         * project making the request is used. Optional.
         */
        public BatchDelete setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @Override
        public BatchDelete set(String parameterName, Object value) {
          return (BatchDelete) super.set(parameterName, value);
        }
      }
      /**
       * Associates the given data with the specified beacon. Attachment data must contain two parts:
       *
       * A namespaced type. The actual attachment data itself.
       *
       * The namespaced type consists of two parts, the namespace and the type. The namespace must be one
       * of the values returned by the `namespaces` endpoint, while the type can be a string of any
       * characters except for the forward slash (`/`) up to 100 characters in length.
       *
       * Attachment data can be up to 1024 bytes long.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "attachments.create".
       *
       * This request holds the parameters needed by the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param beaconName Beacon on which the attachment should be created. A beacon name has the
      format "beacons/N!beaconId"
       *        where the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the
       *        beacon's type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       *        iBeacon, or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current
       *        EID or the beacon's "stable" UID.
      Required.
       * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment}
       * @return the request
       */
      public Create create(java.lang.String beaconName, com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment content) throws java.io.IOException {
        Create result = new Create(beaconName, content);
        initialize(result);
        return result;
      }

      public class Create extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment> {

        private static final String REST_PATH = "v1beta1/{+beaconName}/attachments";

        private final java.util.regex.Pattern BEACON_NAME_PATTERN =
            java.util.regex.Pattern.compile("^beacons/[^/]+$");

        /**
         * Associates the given data with the specified beacon. Attachment data must contain two parts:
         *
         * A namespaced type. The actual attachment data itself.
         *
         * The namespaced type consists of two parts, the namespace and the type. The namespace must be
         * one of the values returned by the `namespaces` endpoint, while the type can be a string of any
         * characters except for the forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
         * owner** or **Can edit** permissions in the Google Developers Console project.
         *
         * Create a request for the method "attachments.create".
         *
         * This request holds the parameters needed by the the proximitybeacon server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param beaconName Beacon on which the attachment should be created. A beacon name has the
      format "beacons/N!beaconId"
       *        where the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the
       *        beacon's type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for
       *        iBeacon, or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current
       *        EID or the beacon's "stable" UID.
      Required.
         * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment}
         * @since 1.13
         */
        protected Create(java.lang.String beaconName, com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment content) {
          super(Proximitybeacon.this, "POST", REST_PATH, content, com.google.api.services.proximitybeacon.v1beta1.model.BeaconAttachment.class);
          this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Beacon on which the attachment should be created. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        @com.google.api.client.util.Key
        private java.lang.String beaconName;

        /** Beacon on which the attachment should be created. A beacon name has the format "beacons/N!beaconId"
       where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for
       AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable"
       UID. Required.
         */
        public java.lang.String getBeaconName() {
          return beaconName;
        }

        /**
         * Beacon on which the attachment should be created. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        public Create setBeaconName(java.lang.String beaconName) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
          this.beaconName = beaconName;
          return this;
        }

        /**
         * The project id of the project the attachment will belong to. If the project id is not
         * specified then the project making the request is used. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** The project id of the project the attachment will belong to. If the project id is not specified
       then the project making the request is used. Optional.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /**
         * The project id of the project the attachment will belong to. If the project id is not
         * specified then the project making the request is used. Optional.
         */
        public Create setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the specified attachment for the given beacon. Each attachment has a unique attachment
       * name (`attachmentName`) which is returned when you fetch the attachment data via this API. You
       * specify this with the delete request to control which attachment is removed. This operation
       * cannot be undone.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
       * owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "attachments.delete".
       *
       * This request holds the parameters needed by the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param attachmentName The attachment name (`attachmentName`) of
      the attachment to remove. For example:
       *        `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
      Eddystone-EID
       *        beacons, the beacon ID portion (`3!893737abc9`) may be the
      beacon's current EID, or its
       *        "stable" Eddystone-UID.
      Required.
       * @return the request
       */
      public Delete delete(java.lang.String attachmentName) throws java.io.IOException {
        Delete result = new Delete(attachmentName);
        initialize(result);
        return result;
      }

      public class Delete extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+attachmentName}";

        private final java.util.regex.Pattern ATTACHMENT_NAME_PATTERN =
            java.util.regex.Pattern.compile("^beacons/[^/]+/attachments/[^/]+$");

        /**
         * Deletes the specified attachment for the given beacon. Each attachment has a unique attachment
         * name (`attachmentName`) which is returned when you fetch the attachment data via this API. You
         * specify this with the delete request to control which attachment is removed. This operation
         * cannot be undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with **Is
         * owner** or **Can edit** permissions in the Google Developers Console project.
         *
         * Create a request for the method "attachments.delete".
         *
         * This request holds the parameters needed by the the proximitybeacon server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param attachmentName The attachment name (`attachmentName`) of
      the attachment to remove. For example:
       *        `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
      Eddystone-EID
       *        beacons, the beacon ID portion (`3!893737abc9`) may be the
      beacon's current EID, or its
       *        "stable" Eddystone-UID.
      Required.
         * @since 1.13
         */
        protected Delete(java.lang.String attachmentName) {
          super(Proximitybeacon.this, "DELETE", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.Empty.class);
          this.attachmentName = com.google.api.client.util.Preconditions.checkNotNull(attachmentName, "Required parameter attachmentName must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(ATTACHMENT_NAME_PATTERN.matcher(attachmentName).matches(),
                "Parameter attachmentName must conform to the pattern " +
                "^beacons/[^/]+/attachments/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The attachment name (`attachmentName`) of the attachment to remove. For example:
         * `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For Eddystone-EID
         * beacons, the beacon ID portion (`3!893737abc9`) may be the beacon's current EID, or its
         * "stable" Eddystone-UID. Required.
         */
        @com.google.api.client.util.Key
        private java.lang.String attachmentName;

        /** The attachment name (`attachmentName`) of the attachment to remove. For example:
       `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For Eddystone-EID beacons, the
       beacon ID portion (`3!893737abc9`) may be the beacon's current EID, or its "stable" Eddystone-UID.
       Required.
         */
        public java.lang.String getAttachmentName() {
          return attachmentName;
        }

        /**
         * The attachment name (`attachmentName`) of the attachment to remove. For example:
         * `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For Eddystone-EID
         * beacons, the beacon ID portion (`3!893737abc9`) may be the beacon's current EID, or its
         * "stable" Eddystone-UID. Required.
         */
        public Delete setAttachmentName(java.lang.String attachmentName) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(ATTACHMENT_NAME_PATTERN.matcher(attachmentName).matches(),
                "Parameter attachmentName must conform to the pattern " +
                "^beacons/[^/]+/attachments/[^/]+$");
          }
          this.attachmentName = attachmentName;
          return this;
        }

        /**
         * The project id of the attachment to delete. If not provided, the project that is making
         * the request is used. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** The project id of the attachment to delete. If not provided, the project that is making the request
       is used. Optional.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /**
         * The project id of the attachment to delete. If not provided, the project that is making
         * the request is used. Optional.
         */
        public Delete setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns the attachments for the specified beacon that match the specified namespaced-type
       * pattern.
       *
       * To control which namespaced types are returned, you add the `namespacedType` query parameter to
       * the request. You must either use `*`, to return all attachments, or the namespace must be one of
       * the ones returned from the  `namespaces` endpoint.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
       * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "attachments.list".
       *
       * This request holds the parameters needed by the proximitybeacon server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param beaconName Beacon whose attachments should be fetched. A beacon name has the
      format "beacons/N!beaconId" where
       *        the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the beacon's
       *        type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon,
       *        or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current EID or the
       *        beacon's "stable" UID.
      Required.
       * @return the request
       */
      public List list(java.lang.String beaconName) throws java.io.IOException {
        List result = new List(beaconName);
        initialize(result);
        return result;
      }

      public class List extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.ListBeaconAttachmentsResponse> {

        private static final String REST_PATH = "v1beta1/{+beaconName}/attachments";

        private final java.util.regex.Pattern BEACON_NAME_PATTERN =
            java.util.regex.Pattern.compile("^beacons/[^/]+$");

        /**
         * Returns the attachments for the specified beacon that match the specified namespaced-type
         * pattern.
         *
         * To control which namespaced types are returned, you add the `namespacedType` query parameter to
         * the request. You must either use `*`, to return all attachments, or the namespace must be one
         * of the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
         * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
         *
         * Create a request for the method "attachments.list".
         *
         * This request holds the parameters needed by the the proximitybeacon server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param beaconName Beacon whose attachments should be fetched. A beacon name has the
      format "beacons/N!beaconId" where
       *        the beaconId is the base16 ID broadcast
      by the beacon and N is a code for the beacon's
       *        type. Possible values are
      `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon,
       *        or `5`
      for AltBeacon. For Eddystone-EID beacons, you may use either the
      current EID or the
       *        beacon's "stable" UID.
      Required.
         * @since 1.13
         */
        protected List(java.lang.String beaconName) {
          super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.ListBeaconAttachmentsResponse.class);
          this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Beacon whose attachments should be fetched. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        @com.google.api.client.util.Key
        private java.lang.String beaconName;

        /** Beacon whose attachments should be fetched. A beacon name has the format "beacons/N!beaconId" where
       the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type.
       Possible values are `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5` for
       AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon's "stable"
       UID. Required.
         */
        public java.lang.String getBeaconName() {
          return beaconName;
        }

        /**
         * Beacon whose attachments should be fetched. A beacon name has the format
         * "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by the beacon and N is
         * a code for the beacon's type. Possible values are `3` for Eddystone-UID, `4` for
         * Eddystone-EID, `1` for iBeacon, or `5` for AltBeacon. For Eddystone-EID beacons, you may
         * use either the current EID or the beacon's "stable" UID. Required.
         */
        public List setBeaconName(java.lang.String beaconName) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
          this.beaconName = beaconName;
          return this;
        }

        /**
         * Specifies the namespace and type of attachment to include in response in namespace/type
         * format. Accepts `*` to specify "all types in all namespaces".
         */
        @com.google.api.client.util.Key
        private java.lang.String namespacedType;

        /** Specifies the namespace and type of attachment to include in response in namespace/type format.
       Accepts `*` to specify "all types in all namespaces".
         */
        public java.lang.String getNamespacedType() {
          return namespacedType;
        }

        /**
         * Specifies the namespace and type of attachment to include in response in namespace/type
         * format. Accepts `*` to specify "all types in all namespaces".
         */
        public List setNamespacedType(java.lang.String namespacedType) {
          this.namespacedType = namespacedType;
          return this;
        }

        /**
         * The project id to list beacon attachments under. This field can be used when "*" is
         * specified to mean all attachment namespaces. Projects may have multiple attachments with
         * multiple namespaces. If "*" is specified and the projectId string is empty, then the
         * project making the request is used. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** The project id to list beacon attachments under. This field can be used when "*" is specified to
       mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If
       "*" is specified and the projectId string is empty, then the project making the request is used.
       Optional.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /**
         * The project id to list beacon attachments under. This field can be used when "*" is
         * specified to mean all attachment namespaces. Projects may have multiple attachments with
         * multiple namespaces. If "*" is specified and the projectId string is empty, then the
         * project making the request is used. Optional.
         */
        public List setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Diagnostics collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
     *   {@code Proximitybeacon.Diagnostics.List request = proximitybeacon.diagnostics().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Diagnostics diagnostics() {
      return new Diagnostics();
    }

    /**
     * The "diagnostics" collection of methods.
     */
    public class Diagnostics {

      /**
       * List the diagnostics for a single beacon. You can also list diagnostics for all the beacons owned
       * by your Google Developers Console project by using the beacon name `beacons/-`.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
       * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "diagnostics.list".
       *
       * This request holds the parameters needed by the proximitybeacon server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param beaconName Beacon that the diagnostics are for.
       * @return the request
       */
      public List list(java.lang.String beaconName) throws java.io.IOException {
        List result = new List(beaconName);
        initialize(result);
        return result;
      }

      public class List extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.ListDiagnosticsResponse> {

        private static final String REST_PATH = "v1beta1/{+beaconName}/diagnostics";

        private final java.util.regex.Pattern BEACON_NAME_PATTERN =
            java.util.regex.Pattern.compile("^beacons/[^/]+$");

        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for all the beacons
         * owned by your Google Developers Console project by using the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
         * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
         *
         * Create a request for the method "diagnostics.list".
         *
         * This request holds the parameters needed by the the proximitybeacon server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param beaconName Beacon that the diagnostics are for.
         * @since 1.13
         */
        protected List(java.lang.String beaconName) {
          super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.ListDiagnosticsResponse.class);
          this.beaconName = com.google.api.client.util.Preconditions.checkNotNull(beaconName, "Required parameter beaconName must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Beacon that the diagnostics are for. */
        @com.google.api.client.util.Key
        private java.lang.String beaconName;

        /** Beacon that the diagnostics are for.
         */
        public java.lang.String getBeaconName() {
          return beaconName;
        }

        /** Beacon that the diagnostics are for. */
        public List setBeaconName(java.lang.String beaconName) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(BEACON_NAME_PATTERN.matcher(beaconName).matches(),
                "Parameter beaconName must conform to the pattern " +
                "^beacons/[^/]+$");
          }
          this.beaconName = beaconName;
          return this;
        }

        /**
         * Requests only beacons that have the given alert. For example, to find beacons that have
         * low batteries use `alert_filter=LOW_BATTERY`.
         */
        @com.google.api.client.util.Key
        private java.lang.String alertFilter;

        /** Requests only beacons that have the given alert. For example, to find beacons that have low
       batteries use `alert_filter=LOW_BATTERY`.
         */
        public java.lang.String getAlertFilter() {
          return alertFilter;
        }

        /**
         * Requests only beacons that have the given alert. For example, to find beacons that have
         * low batteries use `alert_filter=LOW_BATTERY`.
         */
        public List setAlertFilter(java.lang.String alertFilter) {
          this.alertFilter = alertFilter;
          return this;
        }

        /**
         * Specifies the maximum number of results to return. Defaults to 10. Maximum 1000.
         * Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Specifies the maximum number of results to return. Defaults to 10. Maximum 1000. Optional.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Specifies the maximum number of results to return. Defaults to 10. Maximum 1000.
         * Optional.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Requests results that occur after the `page_token`, obtained from the response to a
         * previous request. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Requests results that occur after the `page_token`, obtained from the response to a previous
       request. Optional.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Requests results that occur after the `page_token`, obtained from the response to a
         * previous request. Optional.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /**
         * Requests only diagnostic records for the given project id. If not set, then the project
         * making the request will be used for looking up diagnostic records. Optional.
         */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** Requests only diagnostic records for the given project id. If not set, then the project making the
       request will be used for looking up diagnostic records. Optional.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /**
         * Requests only diagnostic records for the given project id. If not set, then the project
         * making the request will be used for looking up diagnostic records. Optional.
         */
        public List setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Namespaces collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
   *   {@code Proximitybeacon.Namespaces.List request = proximitybeacon.namespaces().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Namespaces namespaces() {
    return new Namespaces();
  }

  /**
   * The "namespaces" collection of methods.
   */
  public class Namespaces {

    /**
     * Lists all attachment namespaces owned by your Google Developers Console project. Attachment data
     * associated with a beacon must include a namespaced type, and the namespace must be owned by your
     * project.
     *
     * Authenticate using an [OAuth access
     * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
     * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
     *
     * Create a request for the method "namespaces.list".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.ListNamespacesResponse> {

      private static final String REST_PATH = "v1beta1/namespaces";

      /**
       * Lists all attachment namespaces owned by your Google Developers Console project. Attachment
       * data associated with a beacon must include a namespaced type, and the namespace must be owned
       * by your project.
       *
       * Authenticate using an [OAuth access
       * token](https://developers.google.com/identity/protocols/OAuth2) from a signed-in user with
       * **viewer**, **Is owner** or **Can edit** permissions in the Google Developers Console project.
       *
       * Create a request for the method "namespaces.list".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.ListNamespacesResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The project id to list namespaces under. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id to list namespaces under. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id to list namespaces under. Optional.
       */
      public List setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the information about the specified namespace. Only the namespace visibility can be
     * updated.
     *
     * Create a request for the method "namespaces.update".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param namespaceName Resource name of this namespace. Namespaces names have the format:
    namespaces/namespace.
     * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Namespace}
     * @return the request
     */
    public Update update(java.lang.String namespaceName, com.google.api.services.proximitybeacon.v1beta1.model.Namespace content) throws java.io.IOException {
      Update result = new Update(namespaceName, content);
      initialize(result);
      return result;
    }

    public class Update extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.Namespace> {

      private static final String REST_PATH = "v1beta1/{+namespaceName}";

      private final java.util.regex.Pattern NAMESPACE_NAME_PATTERN =
          java.util.regex.Pattern.compile("^namespaces/[^/]+$");

      /**
       * Updates the information about the specified namespace. Only the namespace visibility can be
       * updated.
       *
       * Create a request for the method "namespaces.update".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param namespaceName Resource name of this namespace. Namespaces names have the format:
    namespaces/namespace.
       * @param content the {@link com.google.api.services.proximitybeacon.v1beta1.model.Namespace}
       * @since 1.13
       */
      protected Update(java.lang.String namespaceName, com.google.api.services.proximitybeacon.v1beta1.model.Namespace content) {
        super(Proximitybeacon.this, "PUT", REST_PATH, content, com.google.api.services.proximitybeacon.v1beta1.model.Namespace.class);
        this.namespaceName = com.google.api.client.util.Preconditions.checkNotNull(namespaceName, "Required parameter namespaceName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAMESPACE_NAME_PATTERN.matcher(namespaceName).matches(),
              "Parameter namespaceName must conform to the pattern " +
              "^namespaces/[^/]+$");
        }
      }

      @Override
      public Update set$Xgafv(java.lang.String $Xgafv) {
        return (Update) super.set$Xgafv($Xgafv);
      }

      @Override
      public Update setAccessToken(java.lang.String accessToken) {
        return (Update) super.setAccessToken(accessToken);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setCallback(java.lang.String callback) {
        return (Update) super.setCallback(callback);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUploadType(java.lang.String uploadType) {
        return (Update) super.setUploadType(uploadType);
      }

      @Override
      public Update setUploadProtocol(java.lang.String uploadProtocol) {
        return (Update) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
       */
      @com.google.api.client.util.Key
      private java.lang.String namespaceName;

      /** Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
       */
      public java.lang.String getNamespaceName() {
        return namespaceName;
      }

      /**
       * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
       */
      public Update setNamespaceName(java.lang.String namespaceName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAMESPACE_NAME_PATTERN.matcher(namespaceName).matches(),
              "Parameter namespaceName must conform to the pattern " +
              "^namespaces/[^/]+$");
        }
        this.namespaceName = namespaceName;
        return this;
      }

      /**
       * The project id of the namespace to update. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project id of the namespace to update. If the project id is not specified then the project
     making the request is used. The project id must match the project that owns the beacon. Optional.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /**
       * The project id of the namespace to update. If the project id is not specified then the
       * project making the request is used. The project id must match the project that owns the
       * beacon. Optional.
       */
      public Update setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the V1beta1 collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Proximitybeacon proximitybeacon = new Proximitybeacon(...);}
   *   {@code Proximitybeacon.V1beta1.List request = proximitybeacon.v1beta1().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public V1beta1 v1beta1() {
    return new V1beta1();
  }

  /**
   * The "v1beta1" collection of methods.
   */
  public class V1beta1 {

    /**
     * Gets the Proximity Beacon API's current public key and associated parameters used to initiate the
     * Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID
     * format. This key changes periodically; clients may cache it and re-use the same public key to
     * provision and register multiple beacons. However, clients should be prepared to refresh this key
     * when they encounter an error registering an Eddystone-EID beacon.
     *
     * Create a request for the method "v1beta1.getEidparams".
     *
     * This request holds the parameters needed by the proximitybeacon server.  After setting any
     * optional parameters, call the {@link GetEidparams#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetEidparams getEidparams() throws java.io.IOException {
      GetEidparams result = new GetEidparams();
      initialize(result);
      return result;
    }

    public class GetEidparams extends ProximitybeaconRequest<com.google.api.services.proximitybeacon.v1beta1.model.EphemeralIdRegistrationParams> {

      private static final String REST_PATH = "v1beta1/eidparams";

      /**
       * Gets the Proximity Beacon API's current public key and associated parameters used to initiate
       * the Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID
       * format. This key changes periodically; clients may cache it and re-use the same public key to
       * provision and register multiple beacons. However, clients should be prepared to refresh this
       * key when they encounter an error registering an Eddystone-EID beacon.
       *
       * Create a request for the method "v1beta1.getEidparams".
       *
       * This request holds the parameters needed by the the proximitybeacon server.  After setting any
       * optional parameters, call the {@link GetEidparams#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetEidparams#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetEidparams() {
        super(Proximitybeacon.this, "GET", REST_PATH, null, com.google.api.services.proximitybeacon.v1beta1.model.EphemeralIdRegistrationParams.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetEidparams set$Xgafv(java.lang.String $Xgafv) {
        return (GetEidparams) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetEidparams setAccessToken(java.lang.String accessToken) {
        return (GetEidparams) super.setAccessToken(accessToken);
      }

      @Override
      public GetEidparams setAlt(java.lang.String alt) {
        return (GetEidparams) super.setAlt(alt);
      }

      @Override
      public GetEidparams setCallback(java.lang.String callback) {
        return (GetEidparams) super.setCallback(callback);
      }

      @Override
      public GetEidparams setFields(java.lang.String fields) {
        return (GetEidparams) super.setFields(fields);
      }

      @Override
      public GetEidparams setKey(java.lang.String key) {
        return (GetEidparams) super.setKey(key);
      }

      @Override
      public GetEidparams setOauthToken(java.lang.String oauthToken) {
        return (GetEidparams) super.setOauthToken(oauthToken);
      }

      @Override
      public GetEidparams setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetEidparams) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetEidparams setQuotaUser(java.lang.String quotaUser) {
        return (GetEidparams) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetEidparams setUploadType(java.lang.String uploadType) {
        return (GetEidparams) super.setUploadType(uploadType);
      }

      @Override
      public GetEidparams setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetEidparams) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetEidparams set(String parameterName, Object value) {
        return (GetEidparams) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Proximitybeacon}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Proximitybeacon}. */
    @Override
    public Proximitybeacon build() {
      return new Proximitybeacon(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ProximitybeaconRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setProximitybeaconRequestInitializer(
        ProximitybeaconRequestInitializer proximitybeaconRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(proximitybeaconRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
