/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * An image with regions within it. NEXT_ID: 11
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageRegionsImageRegions extends com.google.api.client.json.GenericJson {

  /**
   * The final_porn_score for the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float finalPornScore;

  /**
   * The final_violence_score for the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float finalViolenceScore;

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageContentFlowProtoProd flowOutput;

  /**
   * True if the image has a 300k thumb.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean has300kThumb;

  /**
   * True if the image has navboost.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasNavboost;

  /**
   * True if the image is iu-inappropriate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isIuInappropriate;

  /**
   * The pedo_score of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float pedoScore;

  /**
   * The precomputed restricts for the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PrecomputedRestricts precomputedRestricts;

  /**
   * The racy_score of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float racyScore;

  /**
   * The list of regions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageRegionsImageRegion> region;

  static {
    // hack to force ProGuard to consider ImageRegionsImageRegion used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ImageRegionsImageRegion.class);
  }

  /**
   * The final_porn_score for the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFinalPornScore() {
    return finalPornScore;
  }

  /**
   * The final_porn_score for the image.
   * @param finalPornScore finalPornScore or {@code null} for none
   */
  public ImageRegionsImageRegions setFinalPornScore(java.lang.Float finalPornScore) {
    this.finalPornScore = finalPornScore;
    return this;
  }

  /**
   * The final_violence_score for the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFinalViolenceScore() {
    return finalViolenceScore;
  }

  /**
   * The final_violence_score for the image.
   * @param finalViolenceScore finalViolenceScore or {@code null} for none
   */
  public ImageRegionsImageRegions setFinalViolenceScore(java.lang.Float finalViolenceScore) {
    this.finalViolenceScore = finalViolenceScore;
    return this;
  }

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst).
   * @return value or {@code null} for none
   */
  public ImageContentFlowProtoProd getFlowOutput() {
    return flowOutput;
  }

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst).
   * @param flowOutput flowOutput or {@code null} for none
   */
  public ImageRegionsImageRegions setFlowOutput(ImageContentFlowProtoProd flowOutput) {
    this.flowOutput = flowOutput;
    return this;
  }

  /**
   * True if the image has a 300k thumb.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHas300kThumb() {
    return has300kThumb;
  }

  /**
   * True if the image has a 300k thumb.
   * @param has300kThumb has300kThumb or {@code null} for none
   */
  public ImageRegionsImageRegions setHas300kThumb(java.lang.Boolean has300kThumb) {
    this.has300kThumb = has300kThumb;
    return this;
  }

  /**
   * True if the image has navboost.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasNavboost() {
    return hasNavboost;
  }

  /**
   * True if the image has navboost.
   * @param hasNavboost hasNavboost or {@code null} for none
   */
  public ImageRegionsImageRegions setHasNavboost(java.lang.Boolean hasNavboost) {
    this.hasNavboost = hasNavboost;
    return this;
  }

  /**
   * True if the image is iu-inappropriate.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsIuInappropriate() {
    return isIuInappropriate;
  }

  /**
   * True if the image is iu-inappropriate.
   * @param isIuInappropriate isIuInappropriate or {@code null} for none
   */
  public ImageRegionsImageRegions setIsIuInappropriate(java.lang.Boolean isIuInappropriate) {
    this.isIuInappropriate = isIuInappropriate;
    return this;
  }

  /**
   * The pedo_score of the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPedoScore() {
    return pedoScore;
  }

  /**
   * The pedo_score of the image.
   * @param pedoScore pedoScore or {@code null} for none
   */
  public ImageRegionsImageRegions setPedoScore(java.lang.Float pedoScore) {
    this.pedoScore = pedoScore;
    return this;
  }

  /**
   * The precomputed restricts for the image.
   * @return value or {@code null} for none
   */
  public PrecomputedRestricts getPrecomputedRestricts() {
    return precomputedRestricts;
  }

  /**
   * The precomputed restricts for the image.
   * @param precomputedRestricts precomputedRestricts or {@code null} for none
   */
  public ImageRegionsImageRegions setPrecomputedRestricts(PrecomputedRestricts precomputedRestricts) {
    this.precomputedRestricts = precomputedRestricts;
    return this;
  }

  /**
   * The racy_score of the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRacyScore() {
    return racyScore;
  }

  /**
   * The racy_score of the image.
   * @param racyScore racyScore or {@code null} for none
   */
  public ImageRegionsImageRegions setRacyScore(java.lang.Float racyScore) {
    this.racyScore = racyScore;
    return this;
  }

  /**
   * The list of regions.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageRegionsImageRegion> getRegion() {
    return region;
  }

  /**
   * The list of regions.
   * @param region region or {@code null} for none
   */
  public ImageRegionsImageRegions setRegion(java.util.List<ImageRegionsImageRegion> region) {
    this.region = region;
    return this;
  }

  @Override
  public ImageRegionsImageRegions set(String fieldName, Object value) {
    return (ImageRegionsImageRegions) super.set(fieldName, value);
  }

  @Override
  public ImageRegionsImageRegions clone() {
    return (ImageRegionsImageRegions) super.clone();
  }

}
