/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.certificatemanager.v1.model;

/**
 * CNAME troubleshooting information.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CNAME extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The expected value of the CNAME record for the domain, equals to
   * `dns_resource_record.data` in the corresponding `DnsAuthorization`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String expectedData;

  /**
   * Output only. The name of the CNAME record for the domain, equals to `dns_resource_record.name`
   * in the corresponding `DnsAuthorization`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The resolved CNAME chain. Empty list if the CNAME record for `CNAME.name` is not
   * found. Otherwise the first item is the value of the CNAME record for `CNAME.name`. If the CNAME
   * chain is longer, the second item is the value of the CNAME record for the first item, and so
   * on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> resolvedData;

  /**
   * Output only. The expected value of the CNAME record for the domain, equals to
   * `dns_resource_record.data` in the corresponding `DnsAuthorization`.
   * @return value or {@code null} for none
   */
  public java.lang.String getExpectedData() {
    return expectedData;
  }

  /**
   * Output only. The expected value of the CNAME record for the domain, equals to
   * `dns_resource_record.data` in the corresponding `DnsAuthorization`.
   * @param expectedData expectedData or {@code null} for none
   */
  public CNAME setExpectedData(java.lang.String expectedData) {
    this.expectedData = expectedData;
    return this;
  }

  /**
   * Output only. The name of the CNAME record for the domain, equals to `dns_resource_record.name`
   * in the corresponding `DnsAuthorization`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The name of the CNAME record for the domain, equals to `dns_resource_record.name`
   * in the corresponding `DnsAuthorization`.
   * @param name name or {@code null} for none
   */
  public CNAME setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resolved CNAME chain. Empty list if the CNAME record for `CNAME.name` is not
   * found. Otherwise the first item is the value of the CNAME record for `CNAME.name`. If the CNAME
   * chain is longer, the second item is the value of the CNAME record for the first item, and so
   * on.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getResolvedData() {
    return resolvedData;
  }

  /**
   * Output only. The resolved CNAME chain. Empty list if the CNAME record for `CNAME.name` is not
   * found. Otherwise the first item is the value of the CNAME record for `CNAME.name`. If the CNAME
   * chain is longer, the second item is the value of the CNAME record for the first item, and so
   * on.
   * @param resolvedData resolvedData or {@code null} for none
   */
  public CNAME setResolvedData(java.util.List<java.lang.String> resolvedData) {
    this.resolvedData = resolvedData;
    return this;
  }

  @Override
  public CNAME set(String fieldName, Object value) {
    return (CNAME) super.set(fieldName, value);
  }

  @Override
  public CNAME clone() {
    return (CNAME) super.clone();
  }

}
