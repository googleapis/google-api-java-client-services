/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * Cloud repository for storing output.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Loss Prevention (DLP) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2OutputStorageConfig extends com.google.api.client.json.GenericJson {

  /**
   * Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and
   * must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending
   * to an existing table, any columns from the predefined schema that are missing will be added. No
   * columns in the existing table will be deleted.
   *
   * If unspecified, then all available columns will be used for a new table or an (existing) table
   * with no schema, and no changes will be made to an existing table that has a schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String outputSchema;

  /**
   * Store findings in an existing table or a new table in an existing dataset. If table_id is not
   * set a new one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for generating the date
   * details.
   *
   * For Inspect, each column in an existing output table must have the same name, type, and mode of
   * a field in the `Finding` object.
   *
   * For Risk, an existing output table should be the output of a previous Risk analysis job run on
   * the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that
   * analyze the same table but compute a different privacy metric, or use different sets of quasi-
   * identifiers, cannot store their results in the same table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2BigQueryTable table;

  /**
   * Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and
   * must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending
   * to an existing table, any columns from the predefined schema that are missing will be added. No
   * columns in the existing table will be deleted.
   *
   * If unspecified, then all available columns will be used for a new table or an (existing) table
   * with no schema, and no changes will be made to an existing table that has a schema.
   * @return value or {@code null} for none
   */
  public java.lang.String getOutputSchema() {
    return outputSchema;
  }

  /**
   * Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and
   * must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending
   * to an existing table, any columns from the predefined schema that are missing will be added. No
   * columns in the existing table will be deleted.
   *
   * If unspecified, then all available columns will be used for a new table or an (existing) table
   * with no schema, and no changes will be made to an existing table that has a schema.
   * @param outputSchema outputSchema or {@code null} for none
   */
  public GooglePrivacyDlpV2OutputStorageConfig setOutputSchema(java.lang.String outputSchema) {
    this.outputSchema = outputSchema;
    return this;
  }

  /**
   * Store findings in an existing table or a new table in an existing dataset. If table_id is not
   * set a new one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for generating the date
   * details.
   *
   * For Inspect, each column in an existing output table must have the same name, type, and mode of
   * a field in the `Finding` object.
   *
   * For Risk, an existing output table should be the output of a previous Risk analysis job run on
   * the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that
   * analyze the same table but compute a different privacy metric, or use different sets of quasi-
   * identifiers, cannot store their results in the same table.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2BigQueryTable getTable() {
    return table;
  }

  /**
   * Store findings in an existing table or a new table in an existing dataset. If table_id is not
   * set a new one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for generating the date
   * details.
   *
   * For Inspect, each column in an existing output table must have the same name, type, and mode of
   * a field in the `Finding` object.
   *
   * For Risk, an existing output table should be the output of a previous Risk analysis job run on
   * the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that
   * analyze the same table but compute a different privacy metric, or use different sets of quasi-
   * identifiers, cannot store their results in the same table.
   * @param table table or {@code null} for none
   */
  public GooglePrivacyDlpV2OutputStorageConfig setTable(GooglePrivacyDlpV2BigQueryTable table) {
    this.table = table;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2OutputStorageConfig set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2OutputStorageConfig) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2OutputStorageConfig clone() {
    return (GooglePrivacyDlpV2OutputStorageConfig) super.clone();
  }

}
