/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.fusiontables.model;

/**
 * Represents a response to a SQL statement.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Fusion Tables API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Sqlresponse extends com.google.api.client.json.GenericJson {

  /**
   * Columns in the table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> columns;

  /**
   * The kind of item this is. For responses to SQL queries, this is always
   * fusiontables#sqlresponse.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The rows in the table. For each cell we print out whatever cell value (e.g., numeric, string)
   * exists. Thus it is important that each cell contains only one value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.util.List<java.lang.Object>> rows;

  /**
   * Columns in the table.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getColumns() {
    return columns;
  }

  /**
   * Columns in the table.
   * @param columns columns or {@code null} for none
   */
  public Sqlresponse setColumns(java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  /**
   * The kind of item this is. For responses to SQL queries, this is always
   * fusiontables#sqlresponse.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The kind of item this is. For responses to SQL queries, this is always
   * fusiontables#sqlresponse.
   * @param kind kind or {@code null} for none
   */
  public Sqlresponse setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The rows in the table. For each cell we print out whatever cell value (e.g., numeric, string)
   * exists. Thus it is important that each cell contains only one value.
   * @return value or {@code null} for none
   */
  public java.util.List<java.util.List<java.lang.Object>> getRows() {
    return rows;
  }

  /**
   * The rows in the table. For each cell we print out whatever cell value (e.g., numeric, string)
   * exists. Thus it is important that each cell contains only one value.
   * @param rows rows or {@code null} for none
   */
  public Sqlresponse setRows(java.util.List<java.util.List<java.lang.Object>> rows) {
    this.rows = rows;
    return this;
  }

  @Override
  public Sqlresponse set(String fieldName, Object value) {
    return (Sqlresponse) super.set(fieldName, value);
  }

  @Override
  public Sqlresponse clone() {
    return (Sqlresponse) super.clone();
  }

}
