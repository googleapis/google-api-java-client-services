/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Contact meta data. Next ID: 30
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantLogsCommunicationPersonalContactDataLog extends com.google.api.client.json.GenericJson {

  /**
   * Google AccountProvenance of the contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsCommunicationGoogleAccountProvenance accountProvenance;

  /**
   * Populated if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float commonNameAliasConfidence;

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conceptId;

  /**
   * Integer value corresponding to DeviceContactExtraMetadata.Attribute enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=933=320308954
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> deviceContactAttributes;

  /**
   * # emails stored for the contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer emailIdCount;

  /**
   * Populate only if ContactRecognitionAlternate.Source is 'FUZZY_CONTACT_MATCH'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsCommunicationFuzzyNgramMatchLog> fuzzyNgramMatch;

  static {
    // hack to force ProGuard to consider AssistantLogsCommunicationFuzzyNgramMatchLog used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AssistantLogsCommunicationFuzzyNgramMatchLog.class);
  }

  /**
   * Contact owner's gaia id from
   * cs/symbol::symbol:quality_qrewrite.PersonalContactData.shared_contact_owner_gaia_id. Only
   * populated for is_shared = true and non sign-out mode and user is not the owner of the
   * contact(shared contact from other user). This field is not being logged in P2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long gaiaId;

  /**
   * Boolean value indicating whether selected contact is from different account than the logged in
   * account.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isContactFromSecondaryAccount;

  /**
   * If this is a shared contact. This is true in 2 cases: - User is calling their own contacts that
   * have been marked as shared. - User is calling shared contacts from some other user's contact
   * list. This field is not being logged in P2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isShared;

  /**
   * Indicate the contact matches the transliterated query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isTransliteratedMatch;

  /**
   * True if the contact is a vanity contact(has email = user's email address).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isVanityContact;

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isVisibleToGuestsRelationship;

  /**
   * The matched name type of a contact candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matchedNameType;

  /**
   * Alternate recognition term which was used to match this contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matchedRecognitionAlternateName;

  /**
   * Ngram matched by starlight lookup for fuzzy matching in fulfillment. We need this to analyze
   * how many contacts are returned by starlight lookup that is not matched by fuzzy matching. For
   * example, "Komal Dear" is matched to "Komal Dr" by fuzzy match. When doing starlight lookup,
   * "Komal" and "Dr" will be looked up separately. So "Dr xxx" will also be returned. We want to
   * see how often this happens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> matchedStarlightLookupName;

  /**
   * PersonMetadata of the selected contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsCommunicationPersonMetadataLog metadata;

  /**
   * The indices of the contact in |candidate_contact| whose name matches the
   * |selected_contact_data|. |candidate_contact|:
   * http://google3/logs/proto/assistant/contact.proto?l=111=306283376 |selected_contact_data|:
   * http://google3/logs/proto/assistant/contact.proto?l=108=306283376
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> nameMatchedContactIndex;

  /**
   * The original name in the query as transcribed by ASR.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originalQueryName;

  /**
   * Information regarding the phone endpoints of the selected contact. Currently it is only logged
   * for selected candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsCommunicationPhoneLog> phone;

  /**
   * # phone_numbers stored for the contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer phoneNumberCount;

  /**
   * Encodes if pkg_person was resolved via a name or relationship reference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pkgReferenceType;

  /**
   * Populate only if ContactRecognitionAlternate.Source is not NONE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float recognitionAlternateScore;

  /**
   * Recognition alternative source type. If not none, then it indicates the personal contact data
   * is alternative and how the alternative is fulfilled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recognitionAlternateSource;

  /**
   * The number of resolved relationship names and contact pointers from Assistant Memory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer relationshipMemoryCount;

  /**
   * Information regarding the selected phone endpoint. Currently it is only logged for selected
   * candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsCommunicationPhoneLog selectedPhone;

  /**
   * Shortcut information of the contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MajelContactInformationShortcutInformation shortcutContactInfo;

  /**
   * The contact source of a contact candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Integer value corresponding to SystemContactGroup enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=3151=320308954
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> systemContactGroupId;

  /**
   * DEPRECATED. Use phone instead. Used before 2020-01-13. Number of phone numbers annotated with
   * Whatsapp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer whatsappPhoneNumberCount;

  /**
   * Google AccountProvenance of the contact.
   * @return value or {@code null} for none
   */
  public AssistantLogsCommunicationGoogleAccountProvenance getAccountProvenance() {
    return accountProvenance;
  }

  /**
   * Google AccountProvenance of the contact.
   * @param accountProvenance accountProvenance or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setAccountProvenance(AssistantLogsCommunicationGoogleAccountProvenance accountProvenance) {
    this.accountProvenance = accountProvenance;
    return this;
  }

  /**
   * Populated if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCommonNameAliasConfidence() {
    return commonNameAliasConfidence;
  }

  /**
   * Populated if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
   * @param commonNameAliasConfidence commonNameAliasConfidence or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setCommonNameAliasConfidence(java.lang.Float commonNameAliasConfidence) {
    this.commonNameAliasConfidence = commonNameAliasConfidence;
    return this;
  }

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * @return value or {@code null} for none
   */
  public java.lang.String getConceptId() {
    return conceptId;
  }

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * @param conceptId conceptId or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setConceptId(java.lang.String conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * Integer value corresponding to DeviceContactExtraMetadata.Attribute enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=933=320308954
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDeviceContactAttributes() {
    return deviceContactAttributes;
  }

  /**
   * Integer value corresponding to DeviceContactExtraMetadata.Attribute enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=933=320308954
   * @param deviceContactAttributes deviceContactAttributes or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setDeviceContactAttributes(java.util.List<java.lang.Integer> deviceContactAttributes) {
    this.deviceContactAttributes = deviceContactAttributes;
    return this;
  }

  /**
   * # emails stored for the contact.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEmailIdCount() {
    return emailIdCount;
  }

  /**
   * # emails stored for the contact.
   * @param emailIdCount emailIdCount or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setEmailIdCount(java.lang.Integer emailIdCount) {
    this.emailIdCount = emailIdCount;
    return this;
  }

  /**
   * Populate only if ContactRecognitionAlternate.Source is 'FUZZY_CONTACT_MATCH'.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsCommunicationFuzzyNgramMatchLog> getFuzzyNgramMatch() {
    return fuzzyNgramMatch;
  }

  /**
   * Populate only if ContactRecognitionAlternate.Source is 'FUZZY_CONTACT_MATCH'.
   * @param fuzzyNgramMatch fuzzyNgramMatch or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setFuzzyNgramMatch(java.util.List<AssistantLogsCommunicationFuzzyNgramMatchLog> fuzzyNgramMatch) {
    this.fuzzyNgramMatch = fuzzyNgramMatch;
    return this;
  }

  /**
   * Contact owner's gaia id from
   * cs/symbol::symbol:quality_qrewrite.PersonalContactData.shared_contact_owner_gaia_id. Only
   * populated for is_shared = true and non sign-out mode and user is not the owner of the
   * contact(shared contact from other user). This field is not being logged in P2.
   * @return value or {@code null} for none
   */
  public java.lang.Long getGaiaId() {
    return gaiaId;
  }

  /**
   * Contact owner's gaia id from
   * cs/symbol::symbol:quality_qrewrite.PersonalContactData.shared_contact_owner_gaia_id. Only
   * populated for is_shared = true and non sign-out mode and user is not the owner of the
   * contact(shared contact from other user). This field is not being logged in P2.
   * @param gaiaId gaiaId or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setGaiaId(java.lang.Long gaiaId) {
    this.gaiaId = gaiaId;
    return this;
  }

  /**
   * Boolean value indicating whether selected contact is from different account than the logged in
   * account.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsContactFromSecondaryAccount() {
    return isContactFromSecondaryAccount;
  }

  /**
   * Boolean value indicating whether selected contact is from different account than the logged in
   * account.
   * @param isContactFromSecondaryAccount isContactFromSecondaryAccount or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setIsContactFromSecondaryAccount(java.lang.Boolean isContactFromSecondaryAccount) {
    this.isContactFromSecondaryAccount = isContactFromSecondaryAccount;
    return this;
  }

  /**
   * If this is a shared contact. This is true in 2 cases: - User is calling their own contacts that
   * have been marked as shared. - User is calling shared contacts from some other user's contact
   * list. This field is not being logged in P2.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsShared() {
    return isShared;
  }

  /**
   * If this is a shared contact. This is true in 2 cases: - User is calling their own contacts that
   * have been marked as shared. - User is calling shared contacts from some other user's contact
   * list. This field is not being logged in P2.
   * @param isShared isShared or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setIsShared(java.lang.Boolean isShared) {
    this.isShared = isShared;
    return this;
  }

  /**
   * Indicate the contact matches the transliterated query.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsTransliteratedMatch() {
    return isTransliteratedMatch;
  }

  /**
   * Indicate the contact matches the transliterated query.
   * @param isTransliteratedMatch isTransliteratedMatch or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setIsTransliteratedMatch(java.lang.Boolean isTransliteratedMatch) {
    this.isTransliteratedMatch = isTransliteratedMatch;
    return this;
  }

  /**
   * True if the contact is a vanity contact(has email = user's email address).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsVanityContact() {
    return isVanityContact;
  }

  /**
   * True if the contact is a vanity contact(has email = user's email address).
   * @param isVanityContact isVanityContact or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setIsVanityContact(java.lang.Boolean isVanityContact) {
    this.isVanityContact = isVanityContact;
    return this;
  }

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsVisibleToGuestsRelationship() {
    return isVisibleToGuestsRelationship;
  }

  /**
   * If the lookup was done using relationship which is visible to guests. This value will only be
   * set if lookup was done using relationship. E.g. user has a guest relationship (doctor) ->
   * (John) And user says "call doctor", then this value will be true.
   * @param isVisibleToGuestsRelationship isVisibleToGuestsRelationship or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setIsVisibleToGuestsRelationship(java.lang.Boolean isVisibleToGuestsRelationship) {
    this.isVisibleToGuestsRelationship = isVisibleToGuestsRelationship;
    return this;
  }

  /**
   * The matched name type of a contact candidate.
   * @return value or {@code null} for none
   */
  public java.lang.String getMatchedNameType() {
    return matchedNameType;
  }

  /**
   * The matched name type of a contact candidate.
   * @param matchedNameType matchedNameType or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setMatchedNameType(java.lang.String matchedNameType) {
    this.matchedNameType = matchedNameType;
    return this;
  }

  /**
   * Alternate recognition term which was used to match this contact.
   * @return value or {@code null} for none
   */
  public java.lang.String getMatchedRecognitionAlternateName() {
    return matchedRecognitionAlternateName;
  }

  /**
   * Alternate recognition term which was used to match this contact.
   * @param matchedRecognitionAlternateName matchedRecognitionAlternateName or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setMatchedRecognitionAlternateName(java.lang.String matchedRecognitionAlternateName) {
    this.matchedRecognitionAlternateName = matchedRecognitionAlternateName;
    return this;
  }

  /**
   * Ngram matched by starlight lookup for fuzzy matching in fulfillment. We need this to analyze
   * how many contacts are returned by starlight lookup that is not matched by fuzzy matching. For
   * example, "Komal Dear" is matched to "Komal Dr" by fuzzy match. When doing starlight lookup,
   * "Komal" and "Dr" will be looked up separately. So "Dr xxx" will also be returned. We want to
   * see how often this happens.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMatchedStarlightLookupName() {
    return matchedStarlightLookupName;
  }

  /**
   * Ngram matched by starlight lookup for fuzzy matching in fulfillment. We need this to analyze
   * how many contacts are returned by starlight lookup that is not matched by fuzzy matching. For
   * example, "Komal Dear" is matched to "Komal Dr" by fuzzy match. When doing starlight lookup,
   * "Komal" and "Dr" will be looked up separately. So "Dr xxx" will also be returned. We want to
   * see how often this happens.
   * @param matchedStarlightLookupName matchedStarlightLookupName or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setMatchedStarlightLookupName(java.util.List<java.lang.String> matchedStarlightLookupName) {
    this.matchedStarlightLookupName = matchedStarlightLookupName;
    return this;
  }

  /**
   * PersonMetadata of the selected contact.
   * @return value or {@code null} for none
   */
  public AssistantLogsCommunicationPersonMetadataLog getMetadata() {
    return metadata;
  }

  /**
   * PersonMetadata of the selected contact.
   * @param metadata metadata or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setMetadata(AssistantLogsCommunicationPersonMetadataLog metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The indices of the contact in |candidate_contact| whose name matches the
   * |selected_contact_data|. |candidate_contact|:
   * http://google3/logs/proto/assistant/contact.proto?l=111=306283376 |selected_contact_data|:
   * http://google3/logs/proto/assistant/contact.proto?l=108=306283376
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getNameMatchedContactIndex() {
    return nameMatchedContactIndex;
  }

  /**
   * The indices of the contact in |candidate_contact| whose name matches the
   * |selected_contact_data|. |candidate_contact|:
   * http://google3/logs/proto/assistant/contact.proto?l=111=306283376 |selected_contact_data|:
   * http://google3/logs/proto/assistant/contact.proto?l=108=306283376
   * @param nameMatchedContactIndex nameMatchedContactIndex or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setNameMatchedContactIndex(java.util.List<java.lang.Integer> nameMatchedContactIndex) {
    this.nameMatchedContactIndex = nameMatchedContactIndex;
    return this;
  }

  /**
   * The original name in the query as transcribed by ASR.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginalQueryName() {
    return originalQueryName;
  }

  /**
   * The original name in the query as transcribed by ASR.
   * @param originalQueryName originalQueryName or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setOriginalQueryName(java.lang.String originalQueryName) {
    this.originalQueryName = originalQueryName;
    return this;
  }

  /**
   * Information regarding the phone endpoints of the selected contact. Currently it is only logged
   * for selected candidate.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsCommunicationPhoneLog> getPhone() {
    return phone;
  }

  /**
   * Information regarding the phone endpoints of the selected contact. Currently it is only logged
   * for selected candidate.
   * @param phone phone or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setPhone(java.util.List<AssistantLogsCommunicationPhoneLog> phone) {
    this.phone = phone;
    return this;
  }

  /**
   * # phone_numbers stored for the contact.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPhoneNumberCount() {
    return phoneNumberCount;
  }

  /**
   * # phone_numbers stored for the contact.
   * @param phoneNumberCount phoneNumberCount or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setPhoneNumberCount(java.lang.Integer phoneNumberCount) {
    this.phoneNumberCount = phoneNumberCount;
    return this;
  }

  /**
   * Encodes if pkg_person was resolved via a name or relationship reference.
   * @return value or {@code null} for none
   */
  public java.lang.String getPkgReferenceType() {
    return pkgReferenceType;
  }

  /**
   * Encodes if pkg_person was resolved via a name or relationship reference.
   * @param pkgReferenceType pkgReferenceType or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setPkgReferenceType(java.lang.String pkgReferenceType) {
    this.pkgReferenceType = pkgReferenceType;
    return this;
  }

  /**
   * Populate only if ContactRecognitionAlternate.Source is not NONE.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRecognitionAlternateScore() {
    return recognitionAlternateScore;
  }

  /**
   * Populate only if ContactRecognitionAlternate.Source is not NONE.
   * @param recognitionAlternateScore recognitionAlternateScore or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setRecognitionAlternateScore(java.lang.Float recognitionAlternateScore) {
    this.recognitionAlternateScore = recognitionAlternateScore;
    return this;
  }

  /**
   * Recognition alternative source type. If not none, then it indicates the personal contact data
   * is alternative and how the alternative is fulfilled.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecognitionAlternateSource() {
    return recognitionAlternateSource;
  }

  /**
   * Recognition alternative source type. If not none, then it indicates the personal contact data
   * is alternative and how the alternative is fulfilled.
   * @param recognitionAlternateSource recognitionAlternateSource or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setRecognitionAlternateSource(java.lang.String recognitionAlternateSource) {
    this.recognitionAlternateSource = recognitionAlternateSource;
    return this;
  }

  /**
   * The number of resolved relationship names and contact pointers from Assistant Memory.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRelationshipMemoryCount() {
    return relationshipMemoryCount;
  }

  /**
   * The number of resolved relationship names and contact pointers from Assistant Memory.
   * @param relationshipMemoryCount relationshipMemoryCount or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setRelationshipMemoryCount(java.lang.Integer relationshipMemoryCount) {
    this.relationshipMemoryCount = relationshipMemoryCount;
    return this;
  }

  /**
   * Information regarding the selected phone endpoint. Currently it is only logged for selected
   * candidate.
   * @return value or {@code null} for none
   */
  public AssistantLogsCommunicationPhoneLog getSelectedPhone() {
    return selectedPhone;
  }

  /**
   * Information regarding the selected phone endpoint. Currently it is only logged for selected
   * candidate.
   * @param selectedPhone selectedPhone or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setSelectedPhone(AssistantLogsCommunicationPhoneLog selectedPhone) {
    this.selectedPhone = selectedPhone;
    return this;
  }

  /**
   * Shortcut information of the contact.
   * @return value or {@code null} for none
   */
  public MajelContactInformationShortcutInformation getShortcutContactInfo() {
    return shortcutContactInfo;
  }

  /**
   * Shortcut information of the contact.
   * @param shortcutContactInfo shortcutContactInfo or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setShortcutContactInfo(MajelContactInformationShortcutInformation shortcutContactInfo) {
    this.shortcutContactInfo = shortcutContactInfo;
    return this;
  }

  /**
   * The contact source of a contact candidate.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * The contact source of a contact candidate.
   * @param source source or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * Integer value corresponding to SystemContactGroup enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=3151=320308954
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getSystemContactGroupId() {
    return systemContactGroupId;
  }

  /**
   * Integer value corresponding to SystemContactGroup enum.
   * http://google3/social/graph/wire/proto/merged_person.proto?l=3151=320308954
   * @param systemContactGroupId systemContactGroupId or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setSystemContactGroupId(java.util.List<java.lang.Integer> systemContactGroupId) {
    this.systemContactGroupId = systemContactGroupId;
    return this;
  }

  /**
   * DEPRECATED. Use phone instead. Used before 2020-01-13. Number of phone numbers annotated with
   * Whatsapp.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWhatsappPhoneNumberCount() {
    return whatsappPhoneNumberCount;
  }

  /**
   * DEPRECATED. Use phone instead. Used before 2020-01-13. Number of phone numbers annotated with
   * Whatsapp.
   * @param whatsappPhoneNumberCount whatsappPhoneNumberCount or {@code null} for none
   */
  public AssistantLogsCommunicationPersonalContactDataLog setWhatsappPhoneNumberCount(java.lang.Integer whatsappPhoneNumberCount) {
    this.whatsappPhoneNumberCount = whatsappPhoneNumberCount;
    return this;
  }

  @Override
  public AssistantLogsCommunicationPersonalContactDataLog set(String fieldName, Object value) {
    return (AssistantLogsCommunicationPersonalContactDataLog) super.set(fieldName, value);
  }

  @Override
  public AssistantLogsCommunicationPersonalContactDataLog clone() {
    return (AssistantLogsCommunicationPersonalContactDataLog) super.clone();
  }

}
