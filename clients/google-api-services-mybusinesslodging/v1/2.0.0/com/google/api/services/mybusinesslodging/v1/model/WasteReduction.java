/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinesslodging.v1.model;

/**
 * Waste reduction practices implemented at the hotel.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Lodging API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WasteReduction extends com.google.api.client.json.GenericJson {

  /**
   * Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are
   * compostable, and reusable utensils are offered wherever possible. Compostable materials are
   * capable of undergoing biological decomposition in a compost site, such that material is not
   * visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and
   * biomass.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean compostableFoodContainersAndCutlery;

  /**
   * Compostable food containers and cutlery exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compostableFoodContainersAndCutleryException;

  /**
   * Composts excess food. The property has a program and/or policy for diverting waste from
   * landfill by composting food and yard waste, either through compost collection and off-site
   * processing or on-site compost processing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean compostsExcessFood;

  /**
   * Composts excess food exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compostsExcessFoodException;

  /**
   * Donates excess food. The property has a program and/or policy for diverting waste from landfill
   * that may include efforts to donate for human consumption or divert food for animal feed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean donatesExcessFood;

  /**
   * Donates excess food exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String donatesExcessFoodException;

  /**
   * Food waste reduction program. The property has established a food waste reduction and donation
   * program, aiming to reduce food waste by half. These programs typically use tools such as the
   * Hotel Kitchen Toolkit and others to track waste and measure progress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean foodWasteReductionProgram;

  /**
   * Food waste reduction program exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String foodWasteReductionProgramException;

  /**
   * No single use plastic straws. The property bans single-use plastic straws.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean noSingleUsePlasticStraws;

  /**
   * No single use plastic straws exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String noSingleUsePlasticStrawsException;

  /**
   * No single use plastic water bottles. The property bans single-use plastic water bottles.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean noSingleUsePlasticWaterBottles;

  /**
   * No single use plastic water bottles exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String noSingleUsePlasticWaterBottlesException;

  /**
   * No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food
   * service items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean noStyrofoamFoodContainers;

  /**
   * No styrofoam food containers exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String noStyrofoamFoodContainersException;

  /**
   * Recycling program. The property has a recycling program, aligned with LEED waste requirements,
   * and a policy outlining efforts to send less than 50% of waste to landfill. The recycling
   * program includes storage locations for recyclable materials, including mixed paper, corrugated
   * cardboard, glass, plastics, and metals.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean recyclingProgram;

  /**
   * Recycling program exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recyclingProgramException;

  /**
   * Refillable toiletry containers. The property has replaced miniature individual containers with
   * refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean refillableToiletryContainers;

  /**
   * Refillable toiletry containers exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refillableToiletryContainersException;

  /**
   * Safely disposes batteries. The property safely stores and disposes batteries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean safelyDisposesBatteries;

  /**
   * Safely disposes batteries exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String safelyDisposesBatteriesException;

  /**
   * Safely disposes electronics. The property has a reputable recycling program that keeps
   * hazardous electronic parts and chemical compounds out of landfills, dumps and other
   * unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified
   * electronics recyclers).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean safelyDisposesElectronics;

  /**
   * Safely disposes electronics exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String safelyDisposesElectronicsException;

  /**
   * Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean safelyDisposesLightbulbs;

  /**
   * Safely disposes lightbulbs exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String safelyDisposesLightbulbsException;

  /**
   * Safely handles hazardous substances. The property has a hazardous waste management program
   * aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for
   * hazardous waste disposal and recycling. Hazardous means substances that are classified as
   * "hazardous" by an authoritative body (such as OSHA or DOT), are labeled with signal words such
   * as "Danger," "Caution," "Warning," or are flammable, corrosive, or ignitable. Requirements
   * include: - The property shall maintain records of the efforts it has made to replace the
   * hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous
   * materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool
   * maintenance shall be stored in clearly labeled containers. These containers shall be checked
   * regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed
   * to collect spills, drips, or leaching of chemicals.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean safelyHandlesHazardousSubstances;

  /**
   * Safely handles hazardous substances exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String safelyHandlesHazardousSubstancesException;

  /**
   * Soap donation program. The property participates in a soap donation program such as Clean the
   * World or something similar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean soapDonationProgram;

  /**
   * Soap donation program exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String soapDonationProgramException;

  /**
   * Toiletry donation program. The property participates in a toiletry donation program such as
   * Clean the World or something similar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean toiletryDonationProgram;

  /**
   * Toiletry donation program exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String toiletryDonationProgramException;

  /**
   * Water bottle filling stations. The property offers water stations throughout the building for
   * guest use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean waterBottleFillingStations;

  /**
   * Water bottle filling stations exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String waterBottleFillingStationsException;

  /**
   * Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are
   * compostable, and reusable utensils are offered wherever possible. Compostable materials are
   * capable of undergoing biological decomposition in a compost site, such that material is not
   * visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and
   * biomass.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCompostableFoodContainersAndCutlery() {
    return compostableFoodContainersAndCutlery;
  }

  /**
   * Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are
   * compostable, and reusable utensils are offered wherever possible. Compostable materials are
   * capable of undergoing biological decomposition in a compost site, such that material is not
   * visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and
   * biomass.
   * @param compostableFoodContainersAndCutlery compostableFoodContainersAndCutlery or {@code null} for none
   */
  public WasteReduction setCompostableFoodContainersAndCutlery(java.lang.Boolean compostableFoodContainersAndCutlery) {
    this.compostableFoodContainersAndCutlery = compostableFoodContainersAndCutlery;
    return this;
  }

  /**
   * Compostable food containers and cutlery exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompostableFoodContainersAndCutleryException() {
    return compostableFoodContainersAndCutleryException;
  }

  /**
   * Compostable food containers and cutlery exception.
   * @param compostableFoodContainersAndCutleryException compostableFoodContainersAndCutleryException or {@code null} for none
   */
  public WasteReduction setCompostableFoodContainersAndCutleryException(java.lang.String compostableFoodContainersAndCutleryException) {
    this.compostableFoodContainersAndCutleryException = compostableFoodContainersAndCutleryException;
    return this;
  }

  /**
   * Composts excess food. The property has a program and/or policy for diverting waste from
   * landfill by composting food and yard waste, either through compost collection and off-site
   * processing or on-site compost processing.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCompostsExcessFood() {
    return compostsExcessFood;
  }

  /**
   * Composts excess food. The property has a program and/or policy for diverting waste from
   * landfill by composting food and yard waste, either through compost collection and off-site
   * processing or on-site compost processing.
   * @param compostsExcessFood compostsExcessFood or {@code null} for none
   */
  public WasteReduction setCompostsExcessFood(java.lang.Boolean compostsExcessFood) {
    this.compostsExcessFood = compostsExcessFood;
    return this;
  }

  /**
   * Composts excess food exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompostsExcessFoodException() {
    return compostsExcessFoodException;
  }

  /**
   * Composts excess food exception.
   * @param compostsExcessFoodException compostsExcessFoodException or {@code null} for none
   */
  public WasteReduction setCompostsExcessFoodException(java.lang.String compostsExcessFoodException) {
    this.compostsExcessFoodException = compostsExcessFoodException;
    return this;
  }

  /**
   * Donates excess food. The property has a program and/or policy for diverting waste from landfill
   * that may include efforts to donate for human consumption or divert food for animal feed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDonatesExcessFood() {
    return donatesExcessFood;
  }

  /**
   * Donates excess food. The property has a program and/or policy for diverting waste from landfill
   * that may include efforts to donate for human consumption or divert food for animal feed.
   * @param donatesExcessFood donatesExcessFood or {@code null} for none
   */
  public WasteReduction setDonatesExcessFood(java.lang.Boolean donatesExcessFood) {
    this.donatesExcessFood = donatesExcessFood;
    return this;
  }

  /**
   * Donates excess food exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getDonatesExcessFoodException() {
    return donatesExcessFoodException;
  }

  /**
   * Donates excess food exception.
   * @param donatesExcessFoodException donatesExcessFoodException or {@code null} for none
   */
  public WasteReduction setDonatesExcessFoodException(java.lang.String donatesExcessFoodException) {
    this.donatesExcessFoodException = donatesExcessFoodException;
    return this;
  }

  /**
   * Food waste reduction program. The property has established a food waste reduction and donation
   * program, aiming to reduce food waste by half. These programs typically use tools such as the
   * Hotel Kitchen Toolkit and others to track waste and measure progress.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFoodWasteReductionProgram() {
    return foodWasteReductionProgram;
  }

  /**
   * Food waste reduction program. The property has established a food waste reduction and donation
   * program, aiming to reduce food waste by half. These programs typically use tools such as the
   * Hotel Kitchen Toolkit and others to track waste and measure progress.
   * @param foodWasteReductionProgram foodWasteReductionProgram or {@code null} for none
   */
  public WasteReduction setFoodWasteReductionProgram(java.lang.Boolean foodWasteReductionProgram) {
    this.foodWasteReductionProgram = foodWasteReductionProgram;
    return this;
  }

  /**
   * Food waste reduction program exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getFoodWasteReductionProgramException() {
    return foodWasteReductionProgramException;
  }

  /**
   * Food waste reduction program exception.
   * @param foodWasteReductionProgramException foodWasteReductionProgramException or {@code null} for none
   */
  public WasteReduction setFoodWasteReductionProgramException(java.lang.String foodWasteReductionProgramException) {
    this.foodWasteReductionProgramException = foodWasteReductionProgramException;
    return this;
  }

  /**
   * No single use plastic straws. The property bans single-use plastic straws.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNoSingleUsePlasticStraws() {
    return noSingleUsePlasticStraws;
  }

  /**
   * No single use plastic straws. The property bans single-use plastic straws.
   * @param noSingleUsePlasticStraws noSingleUsePlasticStraws or {@code null} for none
   */
  public WasteReduction setNoSingleUsePlasticStraws(java.lang.Boolean noSingleUsePlasticStraws) {
    this.noSingleUsePlasticStraws = noSingleUsePlasticStraws;
    return this;
  }

  /**
   * No single use plastic straws exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getNoSingleUsePlasticStrawsException() {
    return noSingleUsePlasticStrawsException;
  }

  /**
   * No single use plastic straws exception.
   * @param noSingleUsePlasticStrawsException noSingleUsePlasticStrawsException or {@code null} for none
   */
  public WasteReduction setNoSingleUsePlasticStrawsException(java.lang.String noSingleUsePlasticStrawsException) {
    this.noSingleUsePlasticStrawsException = noSingleUsePlasticStrawsException;
    return this;
  }

  /**
   * No single use plastic water bottles. The property bans single-use plastic water bottles.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNoSingleUsePlasticWaterBottles() {
    return noSingleUsePlasticWaterBottles;
  }

  /**
   * No single use plastic water bottles. The property bans single-use plastic water bottles.
   * @param noSingleUsePlasticWaterBottles noSingleUsePlasticWaterBottles or {@code null} for none
   */
  public WasteReduction setNoSingleUsePlasticWaterBottles(java.lang.Boolean noSingleUsePlasticWaterBottles) {
    this.noSingleUsePlasticWaterBottles = noSingleUsePlasticWaterBottles;
    return this;
  }

  /**
   * No single use plastic water bottles exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getNoSingleUsePlasticWaterBottlesException() {
    return noSingleUsePlasticWaterBottlesException;
  }

  /**
   * No single use plastic water bottles exception.
   * @param noSingleUsePlasticWaterBottlesException noSingleUsePlasticWaterBottlesException or {@code null} for none
   */
  public WasteReduction setNoSingleUsePlasticWaterBottlesException(java.lang.String noSingleUsePlasticWaterBottlesException) {
    this.noSingleUsePlasticWaterBottlesException = noSingleUsePlasticWaterBottlesException;
    return this;
  }

  /**
   * No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food
   * service items.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNoStyrofoamFoodContainers() {
    return noStyrofoamFoodContainers;
  }

  /**
   * No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food
   * service items.
   * @param noStyrofoamFoodContainers noStyrofoamFoodContainers or {@code null} for none
   */
  public WasteReduction setNoStyrofoamFoodContainers(java.lang.Boolean noStyrofoamFoodContainers) {
    this.noStyrofoamFoodContainers = noStyrofoamFoodContainers;
    return this;
  }

  /**
   * No styrofoam food containers exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getNoStyrofoamFoodContainersException() {
    return noStyrofoamFoodContainersException;
  }

  /**
   * No styrofoam food containers exception.
   * @param noStyrofoamFoodContainersException noStyrofoamFoodContainersException or {@code null} for none
   */
  public WasteReduction setNoStyrofoamFoodContainersException(java.lang.String noStyrofoamFoodContainersException) {
    this.noStyrofoamFoodContainersException = noStyrofoamFoodContainersException;
    return this;
  }

  /**
   * Recycling program. The property has a recycling program, aligned with LEED waste requirements,
   * and a policy outlining efforts to send less than 50% of waste to landfill. The recycling
   * program includes storage locations for recyclable materials, including mixed paper, corrugated
   * cardboard, glass, plastics, and metals.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRecyclingProgram() {
    return recyclingProgram;
  }

  /**
   * Recycling program. The property has a recycling program, aligned with LEED waste requirements,
   * and a policy outlining efforts to send less than 50% of waste to landfill. The recycling
   * program includes storage locations for recyclable materials, including mixed paper, corrugated
   * cardboard, glass, plastics, and metals.
   * @param recyclingProgram recyclingProgram or {@code null} for none
   */
  public WasteReduction setRecyclingProgram(java.lang.Boolean recyclingProgram) {
    this.recyclingProgram = recyclingProgram;
    return this;
  }

  /**
   * Recycling program exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecyclingProgramException() {
    return recyclingProgramException;
  }

  /**
   * Recycling program exception.
   * @param recyclingProgramException recyclingProgramException or {@code null} for none
   */
  public WasteReduction setRecyclingProgramException(java.lang.String recyclingProgramException) {
    this.recyclingProgramException = recyclingProgramException;
    return this;
  }

  /**
   * Refillable toiletry containers. The property has replaced miniature individual containers with
   * refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRefillableToiletryContainers() {
    return refillableToiletryContainers;
  }

  /**
   * Refillable toiletry containers. The property has replaced miniature individual containers with
   * refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
   * @param refillableToiletryContainers refillableToiletryContainers or {@code null} for none
   */
  public WasteReduction setRefillableToiletryContainers(java.lang.Boolean refillableToiletryContainers) {
    this.refillableToiletryContainers = refillableToiletryContainers;
    return this;
  }

  /**
   * Refillable toiletry containers exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getRefillableToiletryContainersException() {
    return refillableToiletryContainersException;
  }

  /**
   * Refillable toiletry containers exception.
   * @param refillableToiletryContainersException refillableToiletryContainersException or {@code null} for none
   */
  public WasteReduction setRefillableToiletryContainersException(java.lang.String refillableToiletryContainersException) {
    this.refillableToiletryContainersException = refillableToiletryContainersException;
    return this;
  }

  /**
   * Safely disposes batteries. The property safely stores and disposes batteries.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSafelyDisposesBatteries() {
    return safelyDisposesBatteries;
  }

  /**
   * Safely disposes batteries. The property safely stores and disposes batteries.
   * @param safelyDisposesBatteries safelyDisposesBatteries or {@code null} for none
   */
  public WasteReduction setSafelyDisposesBatteries(java.lang.Boolean safelyDisposesBatteries) {
    this.safelyDisposesBatteries = safelyDisposesBatteries;
    return this;
  }

  /**
   * Safely disposes batteries exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSafelyDisposesBatteriesException() {
    return safelyDisposesBatteriesException;
  }

  /**
   * Safely disposes batteries exception.
   * @param safelyDisposesBatteriesException safelyDisposesBatteriesException or {@code null} for none
   */
  public WasteReduction setSafelyDisposesBatteriesException(java.lang.String safelyDisposesBatteriesException) {
    this.safelyDisposesBatteriesException = safelyDisposesBatteriesException;
    return this;
  }

  /**
   * Safely disposes electronics. The property has a reputable recycling program that keeps
   * hazardous electronic parts and chemical compounds out of landfills, dumps and other
   * unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified
   * electronics recyclers).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSafelyDisposesElectronics() {
    return safelyDisposesElectronics;
  }

  /**
   * Safely disposes electronics. The property has a reputable recycling program that keeps
   * hazardous electronic parts and chemical compounds out of landfills, dumps and other
   * unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified
   * electronics recyclers).
   * @param safelyDisposesElectronics safelyDisposesElectronics or {@code null} for none
   */
  public WasteReduction setSafelyDisposesElectronics(java.lang.Boolean safelyDisposesElectronics) {
    this.safelyDisposesElectronics = safelyDisposesElectronics;
    return this;
  }

  /**
   * Safely disposes electronics exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSafelyDisposesElectronicsException() {
    return safelyDisposesElectronicsException;
  }

  /**
   * Safely disposes electronics exception.
   * @param safelyDisposesElectronicsException safelyDisposesElectronicsException or {@code null} for none
   */
  public WasteReduction setSafelyDisposesElectronicsException(java.lang.String safelyDisposesElectronicsException) {
    this.safelyDisposesElectronicsException = safelyDisposesElectronicsException;
    return this;
  }

  /**
   * Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSafelyDisposesLightbulbs() {
    return safelyDisposesLightbulbs;
  }

  /**
   * Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
   * @param safelyDisposesLightbulbs safelyDisposesLightbulbs or {@code null} for none
   */
  public WasteReduction setSafelyDisposesLightbulbs(java.lang.Boolean safelyDisposesLightbulbs) {
    this.safelyDisposesLightbulbs = safelyDisposesLightbulbs;
    return this;
  }

  /**
   * Safely disposes lightbulbs exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSafelyDisposesLightbulbsException() {
    return safelyDisposesLightbulbsException;
  }

  /**
   * Safely disposes lightbulbs exception.
   * @param safelyDisposesLightbulbsException safelyDisposesLightbulbsException or {@code null} for none
   */
  public WasteReduction setSafelyDisposesLightbulbsException(java.lang.String safelyDisposesLightbulbsException) {
    this.safelyDisposesLightbulbsException = safelyDisposesLightbulbsException;
    return this;
  }

  /**
   * Safely handles hazardous substances. The property has a hazardous waste management program
   * aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for
   * hazardous waste disposal and recycling. Hazardous means substances that are classified as
   * "hazardous" by an authoritative body (such as OSHA or DOT), are labeled with signal words such
   * as "Danger," "Caution," "Warning," or are flammable, corrosive, or ignitable. Requirements
   * include: - The property shall maintain records of the efforts it has made to replace the
   * hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous
   * materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool
   * maintenance shall be stored in clearly labeled containers. These containers shall be checked
   * regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed
   * to collect spills, drips, or leaching of chemicals.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSafelyHandlesHazardousSubstances() {
    return safelyHandlesHazardousSubstances;
  }

  /**
   * Safely handles hazardous substances. The property has a hazardous waste management program
   * aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for
   * hazardous waste disposal and recycling. Hazardous means substances that are classified as
   * "hazardous" by an authoritative body (such as OSHA or DOT), are labeled with signal words such
   * as "Danger," "Caution," "Warning," or are flammable, corrosive, or ignitable. Requirements
   * include: - The property shall maintain records of the efforts it has made to replace the
   * hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous
   * materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool
   * maintenance shall be stored in clearly labeled containers. These containers shall be checked
   * regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed
   * to collect spills, drips, or leaching of chemicals.
   * @param safelyHandlesHazardousSubstances safelyHandlesHazardousSubstances or {@code null} for none
   */
  public WasteReduction setSafelyHandlesHazardousSubstances(java.lang.Boolean safelyHandlesHazardousSubstances) {
    this.safelyHandlesHazardousSubstances = safelyHandlesHazardousSubstances;
    return this;
  }

  /**
   * Safely handles hazardous substances exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSafelyHandlesHazardousSubstancesException() {
    return safelyHandlesHazardousSubstancesException;
  }

  /**
   * Safely handles hazardous substances exception.
   * @param safelyHandlesHazardousSubstancesException safelyHandlesHazardousSubstancesException or {@code null} for none
   */
  public WasteReduction setSafelyHandlesHazardousSubstancesException(java.lang.String safelyHandlesHazardousSubstancesException) {
    this.safelyHandlesHazardousSubstancesException = safelyHandlesHazardousSubstancesException;
    return this;
  }

  /**
   * Soap donation program. The property participates in a soap donation program such as Clean the
   * World or something similar.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSoapDonationProgram() {
    return soapDonationProgram;
  }

  /**
   * Soap donation program. The property participates in a soap donation program such as Clean the
   * World or something similar.
   * @param soapDonationProgram soapDonationProgram or {@code null} for none
   */
  public WasteReduction setSoapDonationProgram(java.lang.Boolean soapDonationProgram) {
    this.soapDonationProgram = soapDonationProgram;
    return this;
  }

  /**
   * Soap donation program exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSoapDonationProgramException() {
    return soapDonationProgramException;
  }

  /**
   * Soap donation program exception.
   * @param soapDonationProgramException soapDonationProgramException or {@code null} for none
   */
  public WasteReduction setSoapDonationProgramException(java.lang.String soapDonationProgramException) {
    this.soapDonationProgramException = soapDonationProgramException;
    return this;
  }

  /**
   * Toiletry donation program. The property participates in a toiletry donation program such as
   * Clean the World or something similar.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getToiletryDonationProgram() {
    return toiletryDonationProgram;
  }

  /**
   * Toiletry donation program. The property participates in a toiletry donation program such as
   * Clean the World or something similar.
   * @param toiletryDonationProgram toiletryDonationProgram or {@code null} for none
   */
  public WasteReduction setToiletryDonationProgram(java.lang.Boolean toiletryDonationProgram) {
    this.toiletryDonationProgram = toiletryDonationProgram;
    return this;
  }

  /**
   * Toiletry donation program exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getToiletryDonationProgramException() {
    return toiletryDonationProgramException;
  }

  /**
   * Toiletry donation program exception.
   * @param toiletryDonationProgramException toiletryDonationProgramException or {@code null} for none
   */
  public WasteReduction setToiletryDonationProgramException(java.lang.String toiletryDonationProgramException) {
    this.toiletryDonationProgramException = toiletryDonationProgramException;
    return this;
  }

  /**
   * Water bottle filling stations. The property offers water stations throughout the building for
   * guest use.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWaterBottleFillingStations() {
    return waterBottleFillingStations;
  }

  /**
   * Water bottle filling stations. The property offers water stations throughout the building for
   * guest use.
   * @param waterBottleFillingStations waterBottleFillingStations or {@code null} for none
   */
  public WasteReduction setWaterBottleFillingStations(java.lang.Boolean waterBottleFillingStations) {
    this.waterBottleFillingStations = waterBottleFillingStations;
    return this;
  }

  /**
   * Water bottle filling stations exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getWaterBottleFillingStationsException() {
    return waterBottleFillingStationsException;
  }

  /**
   * Water bottle filling stations exception.
   * @param waterBottleFillingStationsException waterBottleFillingStationsException or {@code null} for none
   */
  public WasteReduction setWaterBottleFillingStationsException(java.lang.String waterBottleFillingStationsException) {
    this.waterBottleFillingStationsException = waterBottleFillingStationsException;
    return this;
  }

  @Override
  public WasteReduction set(String fieldName, Object value) {
    return (WasteReduction) super.set(fieldName, value);
  }

  @Override
  public WasteReduction clone() {
    return (WasteReduction) super.clone();
  }

}
