/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protocol buffer represents the 2D polygon connecting two segments at an intersection.
 * Collectively, sweep polygons represent intersections for real road width rendering. Notes: -
 * Sweeps represent geometry between the *end* of one segment and the *end* of the other segment
 * (modulo retraction values). - Sweeps are strongly referenced, meaning geometry is stored on both
 * segments involved in the sweep. For example, in the diagram below, the sweep between A and B
 * would be stored on both segment A and segment B. | B | v --A--> - Sweeps are not strictly stored
 * on adjacent segments. Disconnected segments (e.g., segments separated by an intersection group)
 * may also contain sweeps.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreSweepProto extends com.google.api.client.json.GenericJson {

  /**
   * The segment feature connected to this segment via the sweep geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto otherSegmentFeatureId;

  /**
   * Polygonal geometry representing the area between this segment and the other segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePolygonProto polygon;

  /**
   * Describes parameters for generating the edge of this sweep that starts at
   * edge_follows_segment_end_fraction. The other side of the sweep should be described on the sweep
   * present on the sibling pair.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreCurveConnectionProto sweepCurve;

  /**
   * A token that can be used to identify the version of the data about this sweep.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sweepToken;

  /**
   * The segment feature connected to this segment via the sweep geometry.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getOtherSegmentFeatureId() {
    return otherSegmentFeatureId;
  }

  /**
   * The segment feature connected to this segment via the sweep geometry.
   * @param otherSegmentFeatureId otherSegmentFeatureId or {@code null} for none
   */
  public GeostoreSweepProto setOtherSegmentFeatureId(GeostoreFeatureIdProto otherSegmentFeatureId) {
    this.otherSegmentFeatureId = otherSegmentFeatureId;
    return this;
  }

  /**
   * Polygonal geometry representing the area between this segment and the other segment.
   * @return value or {@code null} for none
   */
  public GeostorePolygonProto getPolygon() {
    return polygon;
  }

  /**
   * Polygonal geometry representing the area between this segment and the other segment.
   * @param polygon polygon or {@code null} for none
   */
  public GeostoreSweepProto setPolygon(GeostorePolygonProto polygon) {
    this.polygon = polygon;
    return this;
  }

  /**
   * Describes parameters for generating the edge of this sweep that starts at
   * edge_follows_segment_end_fraction. The other side of the sweep should be described on the sweep
   * present on the sibling pair.
   * @return value or {@code null} for none
   */
  public GeostoreCurveConnectionProto getSweepCurve() {
    return sweepCurve;
  }

  /**
   * Describes parameters for generating the edge of this sweep that starts at
   * edge_follows_segment_end_fraction. The other side of the sweep should be described on the sweep
   * present on the sibling pair.
   * @param sweepCurve sweepCurve or {@code null} for none
   */
  public GeostoreSweepProto setSweepCurve(GeostoreCurveConnectionProto sweepCurve) {
    this.sweepCurve = sweepCurve;
    return this;
  }

  /**
   * A token that can be used to identify the version of the data about this sweep.
   * @return value or {@code null} for none
   */
  public java.lang.String getSweepToken() {
    return sweepToken;
  }

  /**
   * A token that can be used to identify the version of the data about this sweep.
   * @param sweepToken sweepToken or {@code null} for none
   */
  public GeostoreSweepProto setSweepToken(java.lang.String sweepToken) {
    this.sweepToken = sweepToken;
    return this;
  }

  @Override
  public GeostoreSweepProto set(String fieldName, Object value) {
    return (GeostoreSweepProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreSweepProto clone() {
    return (GeostoreSweepProto) super.clone();
  }

}
