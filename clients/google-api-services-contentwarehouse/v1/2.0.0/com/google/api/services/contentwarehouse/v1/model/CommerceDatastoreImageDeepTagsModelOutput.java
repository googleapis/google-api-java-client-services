/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for CommerceDatastoreImageDeepTagsModelOutput.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CommerceDatastoreImageDeepTagsModelOutput extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag backgroundType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag collage;

  /**
   * We are looking to deploy a model for the Ads team to identify images with bad cropping. The
   * model will be for Ads only and we will not populate the cropping field in CDS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag cropping;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag modelType;

  /**
   * Tag corresponds to the shopping non-family safe (nfs) image signal.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag nfs;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag objectCount;

  /**
   * Tag corresponding to unwanted text overlay (watermarks, logos, promotional elements, artifacts,
   * etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag overlay;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreDeepTag selfie;

  /**
   * Tag corresponding to the text overlay classifier (watermarks, logos, promotional elements,
   * artifacts, etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CommerceDatastoreDeepTag> textOverlay;

  static {
    // hack to force ProGuard to consider CommerceDatastoreDeepTag used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CommerceDatastoreDeepTag.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long version;

  /**
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getBackgroundType() {
    return backgroundType;
  }

  /**
   * @param backgroundType backgroundType or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setBackgroundType(CommerceDatastoreDeepTag backgroundType) {
    this.backgroundType = backgroundType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getCollage() {
    return collage;
  }

  /**
   * @param collage collage or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setCollage(CommerceDatastoreDeepTag collage) {
    this.collage = collage;
    return this;
  }

  /**
   * We are looking to deploy a model for the Ads team to identify images with bad cropping. The
   * model will be for Ads only and we will not populate the cropping field in CDS.
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getCropping() {
    return cropping;
  }

  /**
   * We are looking to deploy a model for the Ads team to identify images with bad cropping. The
   * model will be for Ads only and we will not populate the cropping field in CDS.
   * @param cropping cropping or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setCropping(CommerceDatastoreDeepTag cropping) {
    this.cropping = cropping;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getModelType() {
    return modelType;
  }

  /**
   * @param modelType modelType or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setModelType(CommerceDatastoreDeepTag modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Tag corresponds to the shopping non-family safe (nfs) image signal.
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getNfs() {
    return nfs;
  }

  /**
   * Tag corresponds to the shopping non-family safe (nfs) image signal.
   * @param nfs nfs or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setNfs(CommerceDatastoreDeepTag nfs) {
    this.nfs = nfs;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getObjectCount() {
    return objectCount;
  }

  /**
   * @param objectCount objectCount or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setObjectCount(CommerceDatastoreDeepTag objectCount) {
    this.objectCount = objectCount;
    return this;
  }

  /**
   * Tag corresponding to unwanted text overlay (watermarks, logos, promotional elements, artifacts,
   * etc).
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getOverlay() {
    return overlay;
  }

  /**
   * Tag corresponding to unwanted text overlay (watermarks, logos, promotional elements, artifacts,
   * etc).
   * @param overlay overlay or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setOverlay(CommerceDatastoreDeepTag overlay) {
    this.overlay = overlay;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CommerceDatastoreDeepTag getSelfie() {
    return selfie;
  }

  /**
   * @param selfie selfie or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setSelfie(CommerceDatastoreDeepTag selfie) {
    this.selfie = selfie;
    return this;
  }

  /**
   * Tag corresponding to the text overlay classifier (watermarks, logos, promotional elements,
   * artifacts, etc).
   * @return value or {@code null} for none
   */
  public java.util.List<CommerceDatastoreDeepTag> getTextOverlay() {
    return textOverlay;
  }

  /**
   * Tag corresponding to the text overlay classifier (watermarks, logos, promotional elements,
   * artifacts, etc).
   * @param textOverlay textOverlay or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setTextOverlay(java.util.List<CommerceDatastoreDeepTag> textOverlay) {
    this.textOverlay = textOverlay;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getVersion() {
    return version;
  }

  /**
   * @param version version or {@code null} for none
   */
  public CommerceDatastoreImageDeepTagsModelOutput setVersion(java.lang.Long version) {
    this.version = version;
    return this;
  }

  @Override
  public CommerceDatastoreImageDeepTagsModelOutput set(String fieldName, Object value) {
    return (CommerceDatastoreImageDeepTagsModelOutput) super.set(fieldName, value);
  }

  @Override
  public CommerceDatastoreImageDeepTagsModelOutput clone() {
    return (CommerceDatastoreImageDeepTagsModelOutput) super.clone();
  }

}
