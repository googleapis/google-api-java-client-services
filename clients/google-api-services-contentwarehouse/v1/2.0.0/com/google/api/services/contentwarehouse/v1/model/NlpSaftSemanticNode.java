/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Semantic node for annotating semantic constructions in documents. A set of SemanticNode instances
 * represents a directed acyclic graph with an adjacency list representation. Each node can
 * optionally be connected to some existing type system, such as PropBank. Each node can optionally
 * be connected to one or more concrete elements in a SAFT document, specifically, an entity
 * mention, a measure and/or a token span (Phrase). Next available id: 23
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSaftSemanticNode extends com.google.api.client.json.GenericJson {

  /**
   * The arcs from this node. For example, if this node is the root of a subgraph representing a
   * predicate-argument structure, this node will typically refer to the predicate, and there will
   * typically be one arc per argument.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSaftSemanticNodeArc> arc;

  /**
   * Confidence score for the annotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidence;

  /**
   * Human-readable description of the information in the subgraph represented by this node. This
   * field is only meant for display purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The entity and mention fields specify a unique entity mention referred to by this semantic
   * node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer entity;

  /**
   * Indicates whether the semantic node is not explicit (grounded) in the text (e.g. pro-drop for a
   * text author or an implicit predicate node for interpreting a compound noun), rather than any
   * explicit phrase or text inside the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean implicit;

  /**
   * Application-specific information about this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet info;

  /**
   * Encodes the kind of this node and, possibly, the entire subgraph rooted at this node. For
   * example, if this node represents a predicate-argument structure in PropBank, then this node's
   * kind will be PROPBANK, its phrase field will be set to correspond to the span of tokens
   * corresponding to the predicate (such as a verb) and it will have one arc per argument. If the
   * kind is MONOTONIC this node corresponds to a semantic graph node, and arcs correspond to
   * semantic graph edges outgoing from the node. If the kind field is not set, then this node is
   * not directly connected to any type system. In such a case, this node may still optionally have
   * a concrete "payload" in the form of references to an entity mention, measure or span of tokens
   * (Phrase) in a SAFT document. The values or existence of the kind field need not be identical in
   * any subgraph. For example, even if this node's kind field is not set, it may still be the
   * destination node of an arc from some other node whose kind field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The index of the measure referred to by this semantic node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer measure;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mention;

  /**
   * Phrase (span of text) for this node. This field does not need to be set, but if it is, this
   * node has a textual "payload" corresponding to the specified token span. For example, if this
   * node is the root of a subgraph corresponding to a predicate-argument structure, then the phrase
   * field will be set to be the span of tokens corresponding to the predicate (e.g., a verb).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSaftPhrase phrase;

  /**
   * Arbitrary type string for this semantic node, or for the subgraph rooted at this node. This
   * type string might come from an external resource, type system or ontology that contains a
   * predefined set of types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Arbitrary value string for this semantic node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * The arcs from this node. For example, if this node is the root of a subgraph representing a
   * predicate-argument structure, this node will typically refer to the predicate, and there will
   * typically be one arc per argument.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSaftSemanticNodeArc> getArc() {
    return arc;
  }

  /**
   * The arcs from this node. For example, if this node is the root of a subgraph representing a
   * predicate-argument structure, this node will typically refer to the predicate, and there will
   * typically be one arc per argument.
   * @param arc arc or {@code null} for none
   */
  public NlpSaftSemanticNode setArc(java.util.List<NlpSaftSemanticNodeArc> arc) {
    this.arc = arc;
    return this;
  }

  /**
   * Confidence score for the annotation.
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidence() {
    return confidence;
  }

  /**
   * Confidence score for the annotation.
   * @param confidence confidence or {@code null} for none
   */
  public NlpSaftSemanticNode setConfidence(java.lang.Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Human-readable description of the information in the subgraph represented by this node. This
   * field is only meant for display purposes.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Human-readable description of the information in the subgraph represented by this node. This
   * field is only meant for display purposes.
   * @param description description or {@code null} for none
   */
  public NlpSaftSemanticNode setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The entity and mention fields specify a unique entity mention referred to by this semantic
   * node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEntity() {
    return entity;
  }

  /**
   * The entity and mention fields specify a unique entity mention referred to by this semantic
   * node.
   * @param entity entity or {@code null} for none
   */
  public NlpSaftSemanticNode setEntity(java.lang.Integer entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Indicates whether the semantic node is not explicit (grounded) in the text (e.g. pro-drop for a
   * text author or an implicit predicate node for interpreting a compound noun), rather than any
   * explicit phrase or text inside the document.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getImplicit() {
    return implicit;
  }

  /**
   * Indicates whether the semantic node is not explicit (grounded) in the text (e.g. pro-drop for a
   * text author or an implicit predicate node for interpreting a compound noun), rather than any
   * explicit phrase or text inside the document.
   * @param implicit implicit or {@code null} for none
   */
  public NlpSaftSemanticNode setImplicit(java.lang.Boolean implicit) {
    this.implicit = implicit;
    return this;
  }

  /**
   * Application-specific information about this node.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getInfo() {
    return info;
  }

  /**
   * Application-specific information about this node.
   * @param info info or {@code null} for none
   */
  public NlpSaftSemanticNode setInfo(Proto2BridgeMessageSet info) {
    this.info = info;
    return this;
  }

  /**
   * Encodes the kind of this node and, possibly, the entire subgraph rooted at this node. For
   * example, if this node represents a predicate-argument structure in PropBank, then this node's
   * kind will be PROPBANK, its phrase field will be set to correspond to the span of tokens
   * corresponding to the predicate (such as a verb) and it will have one arc per argument. If the
   * kind is MONOTONIC this node corresponds to a semantic graph node, and arcs correspond to
   * semantic graph edges outgoing from the node. If the kind field is not set, then this node is
   * not directly connected to any type system. In such a case, this node may still optionally have
   * a concrete "payload" in the form of references to an entity mention, measure or span of tokens
   * (Phrase) in a SAFT document. The values or existence of the kind field need not be identical in
   * any subgraph. For example, even if this node's kind field is not set, it may still be the
   * destination node of an arc from some other node whose kind field is set.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Encodes the kind of this node and, possibly, the entire subgraph rooted at this node. For
   * example, if this node represents a predicate-argument structure in PropBank, then this node's
   * kind will be PROPBANK, its phrase field will be set to correspond to the span of tokens
   * corresponding to the predicate (such as a verb) and it will have one arc per argument. If the
   * kind is MONOTONIC this node corresponds to a semantic graph node, and arcs correspond to
   * semantic graph edges outgoing from the node. If the kind field is not set, then this node is
   * not directly connected to any type system. In such a case, this node may still optionally have
   * a concrete "payload" in the form of references to an entity mention, measure or span of tokens
   * (Phrase) in a SAFT document. The values or existence of the kind field need not be identical in
   * any subgraph. For example, even if this node's kind field is not set, it may still be the
   * destination node of an arc from some other node whose kind field is set.
   * @param kind kind or {@code null} for none
   */
  public NlpSaftSemanticNode setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The index of the measure referred to by this semantic node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMeasure() {
    return measure;
  }

  /**
   * The index of the measure referred to by this semantic node.
   * @param measure measure or {@code null} for none
   */
  public NlpSaftSemanticNode setMeasure(java.lang.Integer measure) {
    this.measure = measure;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMention() {
    return mention;
  }

  /**
   * @param mention mention or {@code null} for none
   */
  public NlpSaftSemanticNode setMention(java.lang.Integer mention) {
    this.mention = mention;
    return this;
  }

  /**
   * Phrase (span of text) for this node. This field does not need to be set, but if it is, this
   * node has a textual "payload" corresponding to the specified token span. For example, if this
   * node is the root of a subgraph corresponding to a predicate-argument structure, then the phrase
   * field will be set to be the span of tokens corresponding to the predicate (e.g., a verb).
   * @return value or {@code null} for none
   */
  public NlpSaftPhrase getPhrase() {
    return phrase;
  }

  /**
   * Phrase (span of text) for this node. This field does not need to be set, but if it is, this
   * node has a textual "payload" corresponding to the specified token span. For example, if this
   * node is the root of a subgraph corresponding to a predicate-argument structure, then the phrase
   * field will be set to be the span of tokens corresponding to the predicate (e.g., a verb).
   * @param phrase phrase or {@code null} for none
   */
  public NlpSaftSemanticNode setPhrase(NlpSaftPhrase phrase) {
    this.phrase = phrase;
    return this;
  }

  /**
   * Arbitrary type string for this semantic node, or for the subgraph rooted at this node. This
   * type string might come from an external resource, type system or ontology that contains a
   * predefined set of types.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Arbitrary type string for this semantic node, or for the subgraph rooted at this node. This
   * type string might come from an external resource, type system or ontology that contains a
   * predefined set of types.
   * @param type type or {@code null} for none
   */
  public NlpSaftSemanticNode setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Arbitrary value string for this semantic node.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Arbitrary value string for this semantic node.
   * @param value value or {@code null} for none
   */
  public NlpSaftSemanticNode setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public NlpSaftSemanticNode set(String fieldName, Object value) {
    return (NlpSaftSemanticNode) super.set(fieldName, value);
  }

  @Override
  public NlpSaftSemanticNode clone() {
    return (NlpSaftSemanticNode) super.clone();
  }

}
