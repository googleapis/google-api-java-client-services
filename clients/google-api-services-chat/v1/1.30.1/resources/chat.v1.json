{
  "ownerDomain": "google.com",
  "rootUrl": "https://chat.googleapis.com/",
  "servicePath": "",
  "protocol": "rest",
  "batchPath": "batch",
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "kind": "discovery#restDescription",
  "parameters": {
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean",
      "default": "true"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    }
  },
  "schemas": {
    "CardAction": {
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        },
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "OnClick"
        }
      },
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "type": "object",
      "id": "CardAction"
    },
    "DriveDataRef": {
      "type": "object",
      "description": "A reference to the data of a drive attachment.",
      "properties": {
        "driveFileId": {
          "description": "The id for the drive file, for use with the Drive API.",
          "type": "string"
        }
      },
      "id": "DriveDataRef"
    },
    "FormAction": {
      "id": "FormAction",
      "type": "object",
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "properties": {
        "actionMethodName": {
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired.",
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          },
          "description": "List of action parameters."
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "A message in Hangouts Chat.",
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time at which the message was created in Hangouts Chat server."
        },
        "thread": {
          "$ref": "Thread",
          "description": "The thread the message belongs to."
        },
        "argumentText": {
          "description": "Plain-text body of the message with all bot mentions stripped out.",
          "type": "string"
        },
        "annotations": {
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "Card"
          },
          "description": "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message."
        },
        "actionResponse": {
          "description": "Input only. Parameters that a bot can use to configure how its response is posted.",
          "$ref": "ActionResponse"
        },
        "text": {
          "type": "string",
          "description": "Plain-text body of the message."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "Attachment"
          },
          "description": "User uploaded attachment."
        },
        "previewText": {
          "type": "string",
          "description": "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips."
        },
        "space": {
          "$ref": "Space",
          "description": "The space the message belongs to."
        },
        "sender": {
          "description": "The user who created the message.",
          "$ref": "User"
        },
        "name": {
          "description": "Resource name, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
          "type": "string"
        },
        "fallbackText": {
          "type": "string",
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications)."
        }
      }
    },
    "ListMembershipsResponse": {
      "type": "object",
      "id": "ListMembershipsResponse",
      "properties": {
        "memberships": {
          "items": {
            "$ref": "Membership"
          },
          "type": "array",
          "description": "List of memberships in the requested (or first) page."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results."
        }
      }
    },
    "DeprecatedEvent": {
      "properties": {
        "space": {
          "$ref": "Space",
          "description": "The room or DM in which the event occurred."
        },
        "threadKey": {
          "description": "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
          "type": "string"
        },
        "action": {
          "$ref": "FormAction",
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/hangouts/chat/how-tos/cards-onclick) for more information."
        },
        "user": {
          "$ref": "User",
          "description": "The user that triggered the event."
        },
        "configCompleteRedirectUrl": {
          "type": "string",
          "description": "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Hangouts Chat. See the [Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p) for more information."
        },
        "type": {
          "type": "string",
          "description": "The type of the event.",
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a room or direct message.",
            "The bot was added to a room or DM.",
            "The bot was removed from a room or DM.",
            "The bot's interactive card was clicked."
          ]
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        },
        "eventTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp indicating when the event was dispatched."
        },
        "token": {
          "type": "string",
          "description": "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Hangouts Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page."
        }
      },
      "description": "Hangouts Chat events.",
      "id": "DeprecatedEvent",
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {}
    },
    "Button": {
      "id": "Button",
      "type": "object",
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "imageButton": {
          "$ref": "ImageButton",
          "description": "A button with image and onclick action."
        },
        "textButton": {
          "description": "A button with text and onclick action.",
          "$ref": "TextButton"
        }
      }
    },
    "Attachment": {
      "id": "Attachment",
      "type": "object",
      "description": "An attachment in Hangouts Chat.",
      "properties": {
        "contentType": {
          "description": "The content type (MIME type) of the file.",
          "type": "string"
        },
        "downloadUri": {
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content.",
          "type": "string"
        },
        "attachmentDataRef": {
          "$ref": "AttachmentDataRef",
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data."
        },
        "thumbnailUri": {
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
          "type": "string"
        },
        "driveDataRef": {
          "description": "A reference to the drive attachment. This is used with the Drive API.",
          "$ref": "DriveDataRef"
        },
        "source": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The source of the attachment.",
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ]
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        }
      }
    },
    "Space": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Output only. The display name (only if the space is a room). Please note that this field might not be populated in direct messages between humans."
        },
        "threaded": {
          "description": "Whether the messages are threaded in this space.",
          "type": "boolean"
        },
        "type": {
          "description": "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Multi-user spaces such as rooms and DMs between humans.",
            "1:1 Direct Message between a human and a bot, where all messages are flat."
          ]
        },
        "singleUserBotDm": {
          "description": "Whether the space is a DM between a bot and a single human.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs"
        }
      },
      "id": "Space",
      "description": "A room or DM in Hangouts Chat.",
      "type": "object"
    },
    "ActionParameter": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        }
      },
      "id": "ActionParameter",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "type": "object"
    },
    "Annotation": {
      "id": "Annotation",
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned."
          ],
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION"
          ],
          "description": "The type of this annotation.",
          "type": "string"
        },
        "userMention": {
          "$ref": "UserMentionMetadata",
          "description": "The metadata of user mention."
        },
        "startIndex": {
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.",
          "type": "integer",
          "format": "int32"
        },
        "length": {
          "format": "int32",
          "type": "integer",
          "description": "Length of the substring in the plain-text message body this annotation corresponds to."
        }
      }
    },
    "OpenLink": {
      "type": "object",
      "description": "A link that opens a new window.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to open."
        }
      },
      "id": "OpenLink"
    },
    "TextParagraph": {
      "id": "TextParagraph",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "description": "A paragraph of text. Formatted text supported."
    },
    "KeyValue": {
      "type": "object",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "properties": {
        "bottomLabel": {
          "description": "The text of the bottom label. Formatted text supported.",
          "type": "string"
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "Button"
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "content": {
          "type": "string",
          "description": "The text of the content. Formatted text supported and always required."
        },
        "icon": {
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        }
      },
      "id": "KeyValue"
    },
    "User": {
      "type": "object",
      "description": "A user in Hangouts Chat.",
      "properties": {
        "displayName": {
          "description": "The user's display name.",
          "type": "string"
        },
        "domainId": {
          "description": "Obfuscated domain information.",
          "type": "string"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Bot user."
          ],
          "description": "User type."
        },
        "name": {
          "description": "Resource name, in the format \"users/*\".",
          "type": "string"
        }
      },
      "id": "User"
    },
    "ListSpacesResponse": {
      "id": "ListSpacesResponse",
      "properties": {
        "spaces": {
          "description": "List of spaces in the requested (or first) page.",
          "items": {
            "$ref": "Space"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TextButton": {
      "type": "object",
      "id": "TextButton",
      "description": "A button with text and onclick action.",
      "properties": {
        "onClick": {
          "description": "The onclick action of the button.",
          "$ref": "OnClick"
        },
        "text": {
          "description": "The text of the button.",
          "type": "string"
        }
      }
    },
    "OnClick": {
      "id": "OnClick",
      "description": "An onclick action (e.g. open a link).",
      "properties": {
        "openLink": {
          "description": "This onclick triggers an open link action if specified.",
          "$ref": "OpenLink"
        },
        "action": {
          "$ref": "FormAction",
          "description": "A form action will be trigger by this onclick if specified."
        }
      },
      "type": "object"
    },
    "Section": {
      "properties": {
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "WidgetMarkup"
          },
          "type": "array"
        },
        "header": {
          "description": "The header of the section, text formatted supported.",
          "type": "string"
        }
      },
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "id": "Section",
      "type": "object"
    },
    "Membership": {
      "id": "Membership",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the membership, in the form \"spaces/*/members/*\". Example: spaces/AAAAMpdlehY/members/105115627578887013105",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The creation time of the membership a.k.a the time at which the member joined the space, if applicable."
        },
        "state": {
          "description": "State of the membership.",
          "type": "string",
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ],
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ]
        },
        "member": {
          "description": "Member details.",
          "$ref": "User"
        }
      },
      "description": "Represents a membership relation in Hangouts Chat."
    },
    "ImageButton": {
      "properties": {
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "The icon specified by an enum that indices to an icon provided by Chat API.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        },
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."
        }
      },
      "type": "object",
      "id": "ImageButton",
      "description": "An image button with an onclick action."
    },
    "Media": {
      "description": "Media resource.",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the media resource."
        }
      },
      "id": "Media",
      "type": "object"
    },
    "Image": {
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        },
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        }
      },
      "description": "An image that is specified by a URL and can have an onclick action.",
      "type": "object",
      "id": "Image"
    },
    "Card": {
      "properties": {
        "cardActions": {
          "description": "The actions of this card.",
          "items": {
            "$ref": "CardAction"
          },
          "type": "array"
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "CardHeader"
        },
        "sections": {
          "items": {
            "$ref": "Section"
          },
          "description": "Sections are separated by a line divider.",
          "type": "array"
        },
        "name": {
          "description": "Name of the card.",
          "type": "string"
        }
      },
      "id": "Card",
      "type": "object",
      "description": "A card is a UI element that can contain UI widgets such as texts, images."
    },
    "UserMentionMetadata": {
      "type": "object",
      "description": "Annotation metadata for user mentions (@).",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ],
          "description": "The type of user mention."
        },
        "user": {
          "$ref": "User",
          "description": "The user mentioned."
        }
      },
      "id": "UserMentionMetadata"
    },
    "CardHeader": {
      "type": "object",
      "id": "CardHeader",
      "properties": {
        "imageStyle": {
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "type": "string",
          "description": "The image's type (e.g. square border or circular border).",
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ]
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "title": {
          "type": "string",
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."
        }
      }
    },
    "Thread": {
      "properties": {
        "name": {
          "description": "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A thread in Hangouts Chat.",
      "id": "Thread"
    },
    "ActionResponse": {
      "description": "Parameters that a bot can use to configure how it's response is posted.",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)"
        },
        "type": {
          "type": "string",
          "description": "The type of bot response.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "REQUEST_CONFIG"
          ],
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the bot's own message. (Only after CARD_CLICKED events.)",
            "Privately ask the user for additional auth or config."
          ]
        }
      },
      "type": "object",
      "id": "ActionResponse"
    },
    "WidgetMarkup": {
      "properties": {
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "KeyValue"
        },
        "buttons": {
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array",
          "items": {
            "$ref": "Button"
          }
        },
        "image": {
          "$ref": "Image",
          "description": "Display an image in this widget."
        },
        "textParagraph": {
          "$ref": "TextParagraph",
          "description": "Display a text paragraph in this widget."
        }
      },
      "id": "WidgetMarkup",
      "type": "object",
      "description": "A widget is a UI element that presents texts, images, etc."
    },
    "AttachmentDataRef": {
      "id": "AttachmentDataRef",
      "properties": {
        "resourceName": {
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A reference to the data of an attachment."
    }
  },
  "baseUrl": "https://chat.googleapis.com/",
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "basePath": "",
  "description": "Enables bots to fetch information and perform actions in Hangouts Chat.",
  "id": "chat:v1",
  "revision": "20200801",
  "title": "Hangouts Chat API",
  "resources": {
    "spaces": {
      "resources": {
        "messages": {
          "methods": {
            "get": {
              "id": "chat.spaces.messages.get",
              "path": "v1/{+name}",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Message"
              },
              "parameters": {
                "name": {
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4"
                }
              },
              "httpMethod": "GET",
              "description": "Returns a message."
            },
            "create": {
              "response": {
                "$ref": "Message"
              },
              "parameters": {
                "threadKey": {
                  "location": "query",
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "type": "string"
                },
                "parent": {
                  "required": true,
                  "pattern": "^spaces/[^/]+$",
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "type": "string",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "id": "chat.spaces.messages.create",
              "description": "Creates a message.",
              "flatPath": "v1/spaces/{spacesId}/messages"
            },
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "id": "chat.spaces.messages.delete",
              "httpMethod": "DELETE",
              "description": "Deletes a message.",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "parameters": {
                "name": {
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path",
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ]
            },
            "update": {
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "path": "v1/{+name}",
              "response": {
                "$ref": "Message"
              },
              "httpMethod": "PUT",
              "description": "Updates a message.",
              "id": "chat.spaces.messages.update",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "Message"
              },
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "location": "query",
                  "description": "Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards",
                  "format": "google-fieldmask"
                },
                "name": {
                  "description": "Resource name, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "Attachment"
                  },
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}",
                  "parameters": {
                    "name": {
                      "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                      "type": "string",
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "chat.spaces.messages.attachments.get",
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API."
                }
              }
            }
          }
        },
        "members": {
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "description": "Returns a membership.",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "location": "path",
                  "description": "Required. Resource name of the membership to be retrieved, in the form \"spaces/*/members/*\". Example: spaces/AAAAMpdlehY/members/105115627578887013105",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Membership"
              },
              "id": "chat.spaces.members.get",
              "path": "v1/{+name}"
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "path": "v1/{+parent}/members",
              "flatPath": "v1/spaces/{spacesId}/members",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "Required. The resource name of the space for which membership list is to be fetched, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "pattern": "^spaces/[^/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "A token identifying a page of results the server should return.",
                  "location": "query"
                }
              },
              "description": "Lists human memberships in a space.",
              "id": "chat.spaces.members.list"
            }
          }
        }
      },
      "methods": {
        "get": {
          "path": "v1/{+name}",
          "description": "Returns a space.",
          "httpMethod": "GET",
          "flatPath": "v1/spaces/{spacesId}",
          "response": {
            "$ref": "Space"
          },
          "parameters": {
            "name": {
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^spaces/[^/]+$"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "id": "chat.spaces.get"
        },
        "list": {
          "response": {
            "$ref": "ListSpacesResponse"
          },
          "httpMethod": "GET",
          "flatPath": "v1/spaces",
          "description": "Lists spaces the caller is a member of.",
          "id": "chat.spaces.list",
          "path": "v1/spaces",
          "parameterOrder": [],
          "parameters": {
            "pageToken": {
              "description": "A token identifying a page of results the server should return.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "format": "int32",
              "type": "integer",
              "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
              "location": "query"
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "download": {
          "path": "v1/media/{+resourceName}",
          "httpMethod": "GET",
          "parameters": {
            "resourceName": {
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name.",
              "location": "path",
              "required": true,
              "pattern": "^.*$",
              "type": "string"
            }
          },
          "supportsMediaDownload": true,
          "flatPath": "v1/media/{mediaId}",
          "parameterOrder": [
            "resourceName"
          ],
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "response": {
            "$ref": "Media"
          },
          "id": "chat.media.download"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "version_module": true,
  "canonicalName": "Hangouts Chat",
  "version": "v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "name": "chat"
}
