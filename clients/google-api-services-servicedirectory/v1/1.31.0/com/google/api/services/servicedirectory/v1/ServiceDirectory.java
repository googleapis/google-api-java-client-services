/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.servicedirectory.v1;

/**
 * Service definition for ServiceDirectory (v1).
 *
 * <p>
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/service-directory" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ServiceDirectoryRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ServiceDirectory extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Service Directory API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://servicedirectory.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://servicedirectory.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ServiceDirectory(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ServiceDirectory(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ServiceDirectory servicedirectory = new ServiceDirectory(...);}
   *   {@code ServiceDirectory.Projects.List request = servicedirectory.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ServiceDirectory servicedirectory = new ServiceDirectory(...);}
     *   {@code ServiceDirectory.Locations.List request = servicedirectory.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the servicedirectory server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the servicedirectory server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the servicedirectory server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the servicedirectory server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The standard list filter. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The standard list filter.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The standard list filter. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The standard list page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The standard list page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The standard list page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The standard list page token. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The standard list page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The standard list page token. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Namespaces collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ServiceDirectory servicedirectory = new ServiceDirectory(...);}
       *   {@code ServiceDirectory.Namespaces.List request = servicedirectory.namespaces().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Namespaces namespaces() {
        return new Namespaces();
      }

      /**
       * The "namespaces" collection of methods.
       */
      public class Namespaces {

        /**
         * Creates a namespace, and returns the new Namespace.
         *
         * Create a request for the method "namespaces.create".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The resource name of the project and location the namespace will be created in.
         * @param content the {@link com.google.api.services.servicedirectory.v1.model.Namespace}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Namespace content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Namespace> {

          private static final String REST_PATH = "v1/{+parent}/namespaces";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a namespace, and returns the new Namespace.
           *
           * Create a request for the method "namespaces.create".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The resource name of the project and location the namespace will be created in.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.Namespace}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Namespace content) {
            super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Namespace.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the project and location the namespace will be created
           * in.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The resource name of the project and location the namespace will be created in.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The resource name of the project and location the namespace will be created
           * in.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
           * Specifically, the name must be 1-63 characters long and match the regular expression
           * `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a lowercase
           * letter, and all following characters must be a dash, lowercase letter, or digit, except
           * the last character, which cannot be a dash.
           */
          @com.google.api.client.util.Key
          private java.lang.String namespaceId;

          /** Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the
         name must be 1-63 characters long and match the regular expression
         `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a lowercase letter, and
         all following characters must be a dash, lowercase letter, or digit, except the last character,
         which cannot be a dash.
           */
          public java.lang.String getNamespaceId() {
            return namespaceId;
          }

          /**
           * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
           * Specifically, the name must be 1-63 characters long and match the regular expression
           * `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a lowercase
           * letter, and all following characters must be a dash, lowercase letter, or digit, except
           * the last character, which cannot be a dash.
           */
          public Create setNamespaceId(java.lang.String namespaceId) {
            this.namespaceId = namespaceId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a namespace. This also deletes all services and endpoints in the namespace.
         *
         * Create a request for the method "namespaces.delete".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the namespace to delete.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Deletes a namespace. This also deletes all services and endpoints in the namespace.
           *
           * Create a request for the method "namespaces.delete".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the namespace to delete.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(ServiceDirectory.this, "DELETE", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the namespace to delete. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the namespace to delete.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the namespace to delete. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a namespace.
         *
         * Create a request for the method "namespaces.get".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the namespace to retrieve.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Namespace> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Gets a namespace.
           *
           * Create a request for the method "namespaces.get".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the namespace to retrieve.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Namespace.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the namespace to retrieve. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the namespace to retrieve.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the namespace to retrieve. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Gets the IAM Policy for a resource (namespace or service only).
         *
         * Create a request for the method "namespaces.getIamPolicy".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for
         *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest}
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest content) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Gets the IAM Policy for a resource (namespace or service only).
           *
           * Create a request for the method "namespaces.getIamPolicy".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for
         *        the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest}
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest content) {
            super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See the operation
           * documentation for the appropriate value for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
         the appropriate value for this field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See the operation
           * documentation for the appropriate value for this field.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Lists all namespaces.
         *
         * Create a request for the method "namespaces.list".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The resource name of the project and location whose namespaces we'd like to list.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.ListNamespacesResponse> {

          private static final String REST_PATH = "v1/{+parent}/namespaces";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists all namespaces.
           *
           * Create a request for the method "namespaces.list".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The resource name of the project and location whose namespaces we'd like to list.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.ListNamespacesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the project and location whose namespaces we'd like to
           * list.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The resource name of the project and location whose namespaces we'd like to list.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The resource name of the project and location whose namespaces we'd like to
           * list.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. The filter to list result by. General filter string syntax: () can be "name",
           * or "labels." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS,
           * and is roughly the same as "=". must be the same data type as field. can be "AND, OR,
           * NOT". Examples of valid filters: * "labels.owner" returns Namespaces that have a label
           * with the key "owner" this is the same as "labels:owner". * "labels.protocol=gRPC"
           * returns Namespaces that have key/value "protocol=gRPC". * "name>projects/my-
           * project/locations/us-east/namespaces/namespace-c" returns Namespaces that have name
           * that is alphabetically later than the string, so "namespace-e" will be returned but
           * "namespace-a" will not be. * "labels.owner!=sd AND labels.foo=bar" returns Namespaces
           * that have "owner" in label key but value is not "sd" AND have key/value foo=bar. *
           * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't have a field
           * called "doesnotexist". Since the filter does not match any Namespaces, it returns no
           * results.
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. The filter to list result by. General filter string syntax: () can be "name", or
         "labels." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and is roughly
         the same as "=". must be the same data type as field. can be "AND, OR, NOT". Examples of valid
         filters: * "labels.owner" returns Namespaces that have a label with the key "owner" this is the
         same as "labels:owner". * "labels.protocol=gRPC" returns Namespaces that have key/value
         "protocol=gRPC". * "name>projects/my-project/locations/us-east/namespaces/namespace-c" returns
         Namespaces that have name that is alphabetically later than the string, so "namespace-e" will be
         returned but "namespace-a" will not be. * "labels.owner!=sd AND labels.foo=bar" returns Namespaces
         that have "owner" in label key but value is not "sd" AND have key/value foo=bar. *
         "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't have a field called
         "doesnotexist". Since the filter does not match any Namespaces, it returns no results.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * Optional. The filter to list result by. General filter string syntax: () can be "name",
           * or "labels." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS,
           * and is roughly the same as "=". must be the same data type as field. can be "AND, OR,
           * NOT". Examples of valid filters: * "labels.owner" returns Namespaces that have a label
           * with the key "owner" this is the same as "labels:owner". * "labels.protocol=gRPC"
           * returns Namespaces that have key/value "protocol=gRPC". * "name>projects/my-
           * project/locations/us-east/namespaces/namespace-c" returns Namespaces that have name
           * that is alphabetically later than the string, so "namespace-e" will be returned but
           * "namespace-a" will not be. * "labels.owner!=sd AND labels.foo=bar" returns Namespaces
           * that have "owner" in label key but value is not "sd" AND have key/value foo=bar. *
           * "doesnotexist.foo=bar" returns an empty list. Note that Namespace doesn't have a field
           * called "doesnotexist". Since the filter does not match any Namespaces, it returns no
           * results.
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. The order to list result by. General order by string syntax: () (,) allows
           * values {"name"} ascending or descending order by . If this is left blank, "asc" is
           * used. Note that an empty order_by string result in default order, which is order by
           * name in ascending order.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. The order to list result by. General order by string syntax: () (,) allows values
         {"name"} ascending or descending order by . If this is left blank, "asc" is used. Note that an
         empty order_by string result in default order, which is order by name in ascending order.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. The order to list result by. General order by string syntax: () (,) allows
           * values {"name"} ascending or descending order by . If this is left blank, "asc" is
           * used. Note that an empty order_by string result in default order, which is order by
           * name in ascending order.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. The maximum number of items to return. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. The maximum number of items to return.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. The maximum number of items to return. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Optional. The next_page_token value returned from a previous List request, if any. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The next_page_token value returned from a previous List request, if any.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Optional. The next_page_token value returned from a previous List request, if any. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a namespace.
         *
         * Create a request for the method "namespaces.patch".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Immutable. The resource name for the namespace in the format 'projects/locations/namespaces'.
         * @param content the {@link com.google.api.services.servicedirectory.v1.model.Namespace}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Namespace content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Namespace> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Updates a namespace.
           *
           * Create a request for the method "namespaces.patch".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Immutable. The resource name for the namespace in the format 'projects/locations/namespaces'.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.Namespace}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Namespace content) {
            super(ServiceDirectory.this, "PATCH", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Namespace.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Immutable. The resource name for the namespace in the format
           * 'projects/locations/namespaces'.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Immutable. The resource name for the namespace in the format 'projects/locations/namespaces'.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Immutable. The resource name for the namespace in the format
           * 'projects/locations/namespaces'.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** Required. List of fields to be updated in this request. */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. List of fields to be updated in this request.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /** Required. List of fields to be updated in this request. */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Sets the IAM Policy for a resource (namespace or service only).
         *
         * Create a request for the method "namespaces.setIamPolicy".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for
         *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Sets the IAM Policy for a resource (namespace or service only).
           *
           * Create a request for the method "namespaces.setIamPolicy".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for
         *        the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest content) {
            super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See the operation
           * documentation for the appropriate value for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
         the appropriate value for this field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See the operation
           * documentation for the appropriate value for this field.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Tests IAM permissions for a resource (namespace or service only).
         *
         * Create a request for the method "namespaces.testIamPermissions".
         *
         * This request holds the parameters needed by the servicedirectory server.  After setting any
         * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation
         *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

          /**
           * Tests IAM permissions for a resource (namespace or service only).
           *
           * Create a request for the method "namespaces.testIamPermissions".
           *
           * This request holds the parameters needed by the the servicedirectory server.  After setting any
           * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
           * operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.services.A
           * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation
         *        documentation for the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest content) {
            super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See the
           * operation documentation for the appropriate value for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy detail is being requested. See the operation
         documentation for the appropriate value for this field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See the
           * operation documentation for the appropriate value for this field.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Services collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ServiceDirectory servicedirectory = new ServiceDirectory(...);}
         *   {@code ServiceDirectory.Services.List request = servicedirectory.services().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Services services() {
          return new Services();
        }

        /**
         * The "services" collection of methods.
         */
        public class Services {

          /**
           * Creates a service, and returns the new Service.
           *
           * Create a request for the method "services.create".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The resource name of the namespace this service will belong to.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.Service}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Service content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Service> {

            private static final String REST_PATH = "v1/{+parent}/services";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

            /**
             * Creates a service, and returns the new Service.
             *
             * Create a request for the method "services.create".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The resource name of the namespace this service will belong to.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.Service}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Service content) {
              super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Service.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The resource name of the namespace this service will belong to. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The resource name of the namespace this service will belong to.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The resource name of the namespace this service will belong to. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
             * Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a
             * lowercase letter, and all following characters must be a dash, lowercase letter, or
             * digit, except the last character, which cannot be a dash.
             */
            @com.google.api.client.util.Key
            private java.lang.String serviceId;

            /** Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the
           name must be 1-63 characters long and match the regular expression
           `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a lowercase letter, and
           all following characters must be a dash, lowercase letter, or digit, except the last character,
           which cannot be a dash.
             */
            public java.lang.String getServiceId() {
              return serviceId;
            }

            /**
             * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
             * Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a
             * lowercase letter, and all following characters must be a dash, lowercase letter, or
             * digit, except the last character, which cannot be a dash.
             */
            public Create setServiceId(java.lang.String serviceId) {
              this.serviceId = serviceId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a service. This also deletes all endpoints associated with the service.
           *
           * Create a request for the method "services.delete".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the service to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Deletes a service. This also deletes all endpoints associated with the service.
             *
             * Create a request for the method "services.delete".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the service to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(ServiceDirectory.this, "DELETE", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the service to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the service to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the service to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a service.
           *
           * Create a request for the method "services.get".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the service to get.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Service> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Gets a service.
             *
             * Create a request for the method "services.get".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the service to get.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Service.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the service to get. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the service to get.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the service to get. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Gets the IAM Policy for a resource (namespace or service only).
           *
           * Create a request for the method "services.getIamPolicy".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation.
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for
           *        the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest}
           * @return the request
           */
          public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest content) throws java.io.IOException {
            GetIamPolicy result = new GetIamPolicy(resource, content);
            initialize(result);
            return result;
          }

          public class GetIamPolicy extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Policy> {

            private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

            private final java.util.regex.Pattern RESOURCE_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Gets the IAM Policy for a resource (namespace or service only).
             *
             * Create a request for the method "services.getIamPolicy".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
             * operation. <p> {@link
             * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for
           *        the appropriate value for this field.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest}
             * @since 1.13
             */
            protected GetIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.GetIamPolicyRequest content) {
              super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Policy.class);
              this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
              return (GetIamPolicy) super.set$Xgafv($Xgafv);
            }

            @Override
            public GetIamPolicy setAccessToken(java.lang.String accessToken) {
              return (GetIamPolicy) super.setAccessToken(accessToken);
            }

            @Override
            public GetIamPolicy setAlt(java.lang.String alt) {
              return (GetIamPolicy) super.setAlt(alt);
            }

            @Override
            public GetIamPolicy setCallback(java.lang.String callback) {
              return (GetIamPolicy) super.setCallback(callback);
            }

            @Override
            public GetIamPolicy setFields(java.lang.String fields) {
              return (GetIamPolicy) super.setFields(fields);
            }

            @Override
            public GetIamPolicy setKey(java.lang.String key) {
              return (GetIamPolicy) super.setKey(key);
            }

            @Override
            public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
              return (GetIamPolicy) super.setOauthToken(oauthToken);
            }

            @Override
            public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
              return (GetIamPolicy) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetIamPolicy setUploadType(java.lang.String uploadType) {
              return (GetIamPolicy) super.setUploadType(uploadType);
            }

            @Override
            public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
              return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * REQUIRED: The resource for which the policy is being requested. See the operation
             * documentation for the appropriate value for this field.
             */
            @com.google.api.client.util.Key
            private java.lang.String resource;

            /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
           the appropriate value for this field.
             */
            public java.lang.String getResource() {
              return resource;
            }

            /**
             * REQUIRED: The resource for which the policy is being requested. See the operation
             * documentation for the appropriate value for this field.
             */
            public GetIamPolicy setResource(java.lang.String resource) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.resource = resource;
              return this;
            }

            @Override
            public GetIamPolicy set(String parameterName, Object value) {
              return (GetIamPolicy) super.set(parameterName, value);
            }
          }
          /**
           * Lists all services belonging to a namespace.
           *
           * Create a request for the method "services.list".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The resource name of the namespace whose services we'd like to list.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.ListServicesResponse> {

            private static final String REST_PATH = "v1/{+parent}/services";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");

            /**
             * Lists all services belonging to a namespace.
             *
             * Create a request for the method "services.list".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The resource name of the namespace whose services we'd like to list.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.ListServicesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The resource name of the namespace whose services we'd like to list. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The resource name of the namespace whose services we'd like to list.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The resource name of the namespace whose services we'd like to list. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. The filter to list result by. General filter string syntax: () can be
             * "name", or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":"
             * means HAS, and is roughly the same as "=". must be the same data type as field. can
             * be "AND, OR, NOT". Examples of valid filters: * "metadata.owner" returns Services
             * that have a label with the key "owner" this is the same as "metadata:owner". *
             * "metadata.protocol=gRPC" returns Services that have key/value "protocol=gRPC". *
             * "name>projects/my-project/locations/us-east/namespaces/my-
             * namespace/services/service-c" returns Services that have name that is alphabetically
             * later than the string, so "service-e" will be returned but "service-a" will not be. *
             * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have "owner" in label
             * key but value is not "sd" AND have key/value foo=bar. * "doesnotexist.foo=bar"
             * returns an empty list. Note that Service doesn't have a field called "doesnotexist".
             * Since the filter does not match any Services, it returns no results.
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. The filter to list result by. General filter string syntax: () can be "name", or
           "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and is roughly
           the same as "=". must be the same data type as field. can be "AND, OR, NOT". Examples of valid
           filters: * "metadata.owner" returns Services that have a label with the key "owner" this is the
           same as "metadata:owner". * "metadata.protocol=gRPC" returns Services that have key/value
           "protocol=gRPC". * "name>projects/my-project/locations/us-east/namespaces/my-
           namespace/services/service-c" returns Services that have name that is alphabetically later than the
           string, so "service-e" will be returned but "service-a" will not be. * "metadata.owner!=sd AND
           metadata.foo=bar" returns Services that have "owner" in label key but value is not "sd" AND have
           key/value foo=bar. * "doesnotexist.foo=bar" returns an empty list. Note that Service doesn't have a
           field called "doesnotexist". Since the filter does not match any Services, it returns no results.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. The filter to list result by. General filter string syntax: () can be
             * "name", or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":"
             * means HAS, and is roughly the same as "=". must be the same data type as field. can
             * be "AND, OR, NOT". Examples of valid filters: * "metadata.owner" returns Services
             * that have a label with the key "owner" this is the same as "metadata:owner". *
             * "metadata.protocol=gRPC" returns Services that have key/value "protocol=gRPC". *
             * "name>projects/my-project/locations/us-east/namespaces/my-
             * namespace/services/service-c" returns Services that have name that is alphabetically
             * later than the string, so "service-e" will be returned but "service-a" will not be. *
             * "metadata.owner!=sd AND metadata.foo=bar" returns Services that have "owner" in label
             * key but value is not "sd" AND have key/value foo=bar. * "doesnotexist.foo=bar"
             * returns an empty list. Note that Service doesn't have a field called "doesnotexist".
             * Since the filter does not match any Services, it returns no results.
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. The order to list result by. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. The order to list result by.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** Optional. The order to list result by. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /** Optional. The maximum number of items to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of items to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Optional. The maximum number of items to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. The next_page_token value returned from a previous List request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a service.
           *
           * Create a request for the method "services.patch".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Immutable. The resource name for the service in the format 'projects/locations/namespaces/services'.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.Service}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Service content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Service> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Updates a service.
             *
             * Create a request for the method "services.patch".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Immutable. The resource name for the service in the format 'projects/locations/namespaces/services'.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.Service}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Service content) {
              super(ServiceDirectory.this, "PATCH", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Service.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Immutable. The resource name for the service in the format
             * 'projects/locations/namespaces/services'.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Immutable. The resource name for the service in the format
           'projects/locations/namespaces/services'.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Immutable. The resource name for the service in the format
             * 'projects/locations/namespaces/services'.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /** Required. List of fields to be updated in this request. */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. List of fields to be updated in this request.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /** Required. List of fields to be updated in this request. */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }
          /**
           * Returns a service and its associated endpoints. Resolving a service is not considered an active
           * developer method.
           *
           * Create a request for the method "services.resolve".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link Resolve#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the service to resolve.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.ResolveServiceRequest}
           * @return the request
           */
          public Resolve resolve(java.lang.String name, com.google.api.services.servicedirectory.v1.model.ResolveServiceRequest content) throws java.io.IOException {
            Resolve result = new Resolve(name, content);
            initialize(result);
            return result;
          }

          public class Resolve extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.ResolveServiceResponse> {

            private static final String REST_PATH = "v1/{+name}:resolve";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Returns a service and its associated endpoints. Resolving a service is not considered an active
             * developer method.
             *
             * Create a request for the method "services.resolve".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link Resolve#execute()} method to invoke the remote operation.
             * <p> {@link
             * Resolve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the service to resolve.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.ResolveServiceRequest}
             * @since 1.13
             */
            protected Resolve(java.lang.String name, com.google.api.services.servicedirectory.v1.model.ResolveServiceRequest content) {
              super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.ResolveServiceResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public Resolve set$Xgafv(java.lang.String $Xgafv) {
              return (Resolve) super.set$Xgafv($Xgafv);
            }

            @Override
            public Resolve setAccessToken(java.lang.String accessToken) {
              return (Resolve) super.setAccessToken(accessToken);
            }

            @Override
            public Resolve setAlt(java.lang.String alt) {
              return (Resolve) super.setAlt(alt);
            }

            @Override
            public Resolve setCallback(java.lang.String callback) {
              return (Resolve) super.setCallback(callback);
            }

            @Override
            public Resolve setFields(java.lang.String fields) {
              return (Resolve) super.setFields(fields);
            }

            @Override
            public Resolve setKey(java.lang.String key) {
              return (Resolve) super.setKey(key);
            }

            @Override
            public Resolve setOauthToken(java.lang.String oauthToken) {
              return (Resolve) super.setOauthToken(oauthToken);
            }

            @Override
            public Resolve setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Resolve) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Resolve setQuotaUser(java.lang.String quotaUser) {
              return (Resolve) super.setQuotaUser(quotaUser);
            }

            @Override
            public Resolve setUploadType(java.lang.String uploadType) {
              return (Resolve) super.setUploadType(uploadType);
            }

            @Override
            public Resolve setUploadProtocol(java.lang.String uploadProtocol) {
              return (Resolve) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the service to resolve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the service to resolve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the service to resolve. */
            public Resolve setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Resolve set(String parameterName, Object value) {
              return (Resolve) super.set(parameterName, value);
            }
          }
          /**
           * Sets the IAM Policy for a resource (namespace or service only).
           *
           * Create a request for the method "services.setIamPolicy".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation.
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for
           *        the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest}
           * @return the request
           */
          public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
            SetIamPolicy result = new SetIamPolicy(resource, content);
            initialize(result);
            return result;
          }

          public class SetIamPolicy extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Policy> {

            private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

            private final java.util.regex.Pattern RESOURCE_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Sets the IAM Policy for a resource (namespace or service only).
             *
             * Create a request for the method "services.setIamPolicy".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
             * operation. <p> {@link
             * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for
           *        the appropriate value for this field.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest}
             * @since 1.13
             */
            protected SetIamPolicy(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.SetIamPolicyRequest content) {
              super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Policy.class);
              this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
              return (SetIamPolicy) super.set$Xgafv($Xgafv);
            }

            @Override
            public SetIamPolicy setAccessToken(java.lang.String accessToken) {
              return (SetIamPolicy) super.setAccessToken(accessToken);
            }

            @Override
            public SetIamPolicy setAlt(java.lang.String alt) {
              return (SetIamPolicy) super.setAlt(alt);
            }

            @Override
            public SetIamPolicy setCallback(java.lang.String callback) {
              return (SetIamPolicy) super.setCallback(callback);
            }

            @Override
            public SetIamPolicy setFields(java.lang.String fields) {
              return (SetIamPolicy) super.setFields(fields);
            }

            @Override
            public SetIamPolicy setKey(java.lang.String key) {
              return (SetIamPolicy) super.setKey(key);
            }

            @Override
            public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
              return (SetIamPolicy) super.setOauthToken(oauthToken);
            }

            @Override
            public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
              return (SetIamPolicy) super.setQuotaUser(quotaUser);
            }

            @Override
            public SetIamPolicy setUploadType(java.lang.String uploadType) {
              return (SetIamPolicy) super.setUploadType(uploadType);
            }

            @Override
            public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
              return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * REQUIRED: The resource for which the policy is being specified. See the operation
             * documentation for the appropriate value for this field.
             */
            @com.google.api.client.util.Key
            private java.lang.String resource;

            /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
           the appropriate value for this field.
             */
            public java.lang.String getResource() {
              return resource;
            }

            /**
             * REQUIRED: The resource for which the policy is being specified. See the operation
             * documentation for the appropriate value for this field.
             */
            public SetIamPolicy setResource(java.lang.String resource) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.resource = resource;
              return this;
            }

            @Override
            public SetIamPolicy set(String parameterName, Object value) {
              return (SetIamPolicy) super.set(parameterName, value);
            }
          }
          /**
           * Tests IAM permissions for a resource (namespace or service only).
           *
           * Create a request for the method "services.testIamPermissions".
           *
           * This request holds the parameters needed by the servicedirectory server.  After setting any
           * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
           * operation.
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation
           *        documentation for the appropriate value for this field.
           * @param content the {@link com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest}
           * @return the request
           */
          public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
            TestIamPermissions result = new TestIamPermissions(resource, content);
            initialize(result);
            return result;
          }

          public class TestIamPermissions extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.TestIamPermissionsResponse> {

            private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

            private final java.util.regex.Pattern RESOURCE_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

            /**
             * Tests IAM permissions for a resource (namespace or service only).
             *
             * Create a request for the method "services.testIamPermissions".
             *
             * This request holds the parameters needed by the the servicedirectory server.  After setting any
             * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
             * operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.services.A
             * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation
           *        documentation for the appropriate value for this field.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest}
             * @since 1.13
             */
            protected TestIamPermissions(java.lang.String resource, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsRequest content) {
              super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.TestIamPermissionsResponse.class);
              this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
              return (TestIamPermissions) super.set$Xgafv($Xgafv);
            }

            @Override
            public TestIamPermissions setAccessToken(java.lang.String accessToken) {
              return (TestIamPermissions) super.setAccessToken(accessToken);
            }

            @Override
            public TestIamPermissions setAlt(java.lang.String alt) {
              return (TestIamPermissions) super.setAlt(alt);
            }

            @Override
            public TestIamPermissions setCallback(java.lang.String callback) {
              return (TestIamPermissions) super.setCallback(callback);
            }

            @Override
            public TestIamPermissions setFields(java.lang.String fields) {
              return (TestIamPermissions) super.setFields(fields);
            }

            @Override
            public TestIamPermissions setKey(java.lang.String key) {
              return (TestIamPermissions) super.setKey(key);
            }

            @Override
            public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
              return (TestIamPermissions) super.setOauthToken(oauthToken);
            }

            @Override
            public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
              return (TestIamPermissions) super.setQuotaUser(quotaUser);
            }

            @Override
            public TestIamPermissions setUploadType(java.lang.String uploadType) {
              return (TestIamPermissions) super.setUploadType(uploadType);
            }

            @Override
            public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
              return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * REQUIRED: The resource for which the policy detail is being requested. See the
             * operation documentation for the appropriate value for this field.
             */
            @com.google.api.client.util.Key
            private java.lang.String resource;

            /** REQUIRED: The resource for which the policy detail is being requested. See the operation
           documentation for the appropriate value for this field.
             */
            public java.lang.String getResource() {
              return resource;
            }

            /**
             * REQUIRED: The resource for which the policy detail is being requested. See the
             * operation documentation for the appropriate value for this field.
             */
            public TestIamPermissions setResource(java.lang.String resource) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                    "Parameter resource must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
              }
              this.resource = resource;
              return this;
            }

            @Override
            public TestIamPermissions set(String parameterName, Object value) {
              return (TestIamPermissions) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Endpoints collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code ServiceDirectory servicedirectory = new ServiceDirectory(...);}
           *   {@code ServiceDirectory.Endpoints.List request = servicedirectory.endpoints().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Endpoints endpoints() {
            return new Endpoints();
          }

          /**
           * The "endpoints" collection of methods.
           */
          public class Endpoints {

            /**
             * Creates a endpoint, and returns the new Endpoint.
             *
             * Create a request for the method "endpoints.create".
             *
             * This request holds the parameters needed by the servicedirectory server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The resource name of the service that this endpoint provides.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.Endpoint}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Endpoint content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Endpoint> {

              private static final String REST_PATH = "v1/{+parent}/endpoints";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

              /**
               * Creates a endpoint, and returns the new Endpoint.
               *
               * Create a request for the method "endpoints.create".
               *
               * This request holds the parameters needed by the the servicedirectory server.  After setting any
               * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
               * <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The resource name of the service that this endpoint provides.
               * @param content the {@link com.google.api.services.servicedirectory.v1.model.Endpoint}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.servicedirectory.v1.model.Endpoint content) {
                super(ServiceDirectory.this, "POST", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Endpoint.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /** Required. The resource name of the service that this endpoint provides. */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The resource name of the service that this endpoint provides.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /** Required. The resource name of the service that this endpoint provides. */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
               * Specifically, the name must be 1-63 characters long and match the regular
               * expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must
               * be a lowercase letter, and all following characters must be a dash, lowercase
               * letter, or digit, except the last character, which cannot be a dash.
               */
              @com.google.api.client.util.Key
              private java.lang.String endpointId;

              /** Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the
             name must be 1-63 characters long and match the regular expression
             `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must be a lowercase letter, and
             all following characters must be a dash, lowercase letter, or digit, except the last character,
             which cannot be a dash.
               */
              public java.lang.String getEndpointId() {
                return endpointId;
              }

              /**
               * Required. The Resource ID must be 1-63 characters long, and comply with RFC1035.
               * Specifically, the name must be 1-63 characters long and match the regular
               * expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first character must
               * be a lowercase letter, and all following characters must be a dash, lowercase
               * letter, or digit, except the last character, which cannot be a dash.
               */
              public Create setEndpointId(java.lang.String endpointId) {
                this.endpointId = endpointId;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes a endpoint.
             *
             * Create a request for the method "endpoints.delete".
             *
             * This request holds the parameters needed by the servicedirectory server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the endpoint to delete.
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Empty> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");

              /**
               * Deletes a endpoint.
               *
               * Create a request for the method "endpoints.delete".
               *
               * This request holds the parameters needed by the the servicedirectory server.  After setting any
               * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
               * <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the endpoint to delete.
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(ServiceDirectory.this, "DELETE", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Empty.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /** Required. The name of the endpoint to delete. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the endpoint to delete.
               */
              public java.lang.String getName() {
                return name;
              }

              /** Required. The name of the endpoint to delete. */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets a endpoint.
             *
             * Create a request for the method "endpoints.get".
             *
             * This request holds the parameters needed by the servicedirectory server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the endpoint to get.
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Endpoint> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");

              /**
               * Gets a endpoint.
               *
               * Create a request for the method "endpoints.get".
               *
               * This request holds the parameters needed by the the servicedirectory server.  After setting any
               * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
               * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the endpoint to get.
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.Endpoint.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /** Required. The name of the endpoint to get. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the endpoint to get.
               */
              public java.lang.String getName() {
                return name;
              }

              /** Required. The name of the endpoint to get. */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists all endpoints.
             *
             * Create a request for the method "endpoints.list".
             *
             * This request holds the parameters needed by the servicedirectory server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The resource name of the service whose endpoints we'd like to list.
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.ListEndpointsResponse> {

              private static final String REST_PATH = "v1/{+parent}/endpoints";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");

              /**
               * Lists all endpoints.
               *
               * Create a request for the method "endpoints.list".
               *
               * This request holds the parameters needed by the the servicedirectory server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The resource name of the service whose endpoints we'd like to list.
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(ServiceDirectory.this, "GET", REST_PATH, null, com.google.api.services.servicedirectory.v1.model.ListEndpointsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /** Required. The resource name of the service whose endpoints we'd like to list. */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The resource name of the service whose endpoints we'd like to list.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /** Required. The resource name of the service whose endpoints we'd like to list. */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Optional. The filter to list result by. General filter string syntax: () can be
               * "name", "address", "port" or "metadata." for map field. can be "<, >, <=, >=, !=,
               * =, :". Of which ":" means HAS, and is roughly the same as "=". must be the same
               * data type as field. can be "AND, OR, NOT". Examples of valid filters: *
               * "metadata.owner" returns Endpoints that have a label with the key "owner" this is
               * the same as "metadata:owner". * "metadata.protocol=gRPC" returns Endpoints that
               * have key/value "protocol=gRPC". * "address=192.108.1.105" returns Endpoints that
               * have this address. * "port>8080" returns Endpoints that have port number larger
               * than 8080. * "name>projects/my-project/locations/us-east/namespaces/my-
               * namespace/services/my-service/endpoints/endpoint-c" returns Endpoints that have
               * name that is alphabetically later than the string, so "endpoint-e" will be returned
               * but "endpoint-a" will not be. * "metadata.owner!=sd AND metadata.foo=bar" returns
               * Endpoints that have "owner" in label key but value is not "sd" AND have key/value
               * foo=bar. * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
               * have a field called "doesnotexist". Since the filter does not match any Endpoints,
               * it returns no results.
               */
              @com.google.api.client.util.Key
              private java.lang.String filter;

              /** Optional. The filter to list result by. General filter string syntax: () can be "name", "address",
             "port" or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS, and
             is roughly the same as "=". must be the same data type as field. can be "AND, OR, NOT". Examples of
             valid filters: * "metadata.owner" returns Endpoints that have a label with the key "owner" this is
             the same as "metadata:owner". * "metadata.protocol=gRPC" returns Endpoints that have key/value
             "protocol=gRPC". * "address=192.108.1.105" returns Endpoints that have this address. * "port>8080"
             returns Endpoints that have port number larger than 8080. * "name>projects/my-project/locations/us-
             east/namespaces/my-namespace/services/my-service/endpoints/endpoint-c" returns Endpoints that have
             name that is alphabetically later than the string, so "endpoint-e" will be returned but
             "endpoint-a" will not be. * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have
             "owner" in label key but value is not "sd" AND have key/value foo=bar. * "doesnotexist.foo=bar"
             returns an empty list. Note that Endpoint doesn't have a field called "doesnotexist". Since the
             filter does not match any Endpoints, it returns no results.
               */
              public java.lang.String getFilter() {
                return filter;
              }

              /**
               * Optional. The filter to list result by. General filter string syntax: () can be
               * "name", "address", "port" or "metadata." for map field. can be "<, >, <=, >=, !=,
               * =, :". Of which ":" means HAS, and is roughly the same as "=". must be the same
               * data type as field. can be "AND, OR, NOT". Examples of valid filters: *
               * "metadata.owner" returns Endpoints that have a label with the key "owner" this is
               * the same as "metadata:owner". * "metadata.protocol=gRPC" returns Endpoints that
               * have key/value "protocol=gRPC". * "address=192.108.1.105" returns Endpoints that
               * have this address. * "port>8080" returns Endpoints that have port number larger
               * than 8080. * "name>projects/my-project/locations/us-east/namespaces/my-
               * namespace/services/my-service/endpoints/endpoint-c" returns Endpoints that have
               * name that is alphabetically later than the string, so "endpoint-e" will be returned
               * but "endpoint-a" will not be. * "metadata.owner!=sd AND metadata.foo=bar" returns
               * Endpoints that have "owner" in label key but value is not "sd" AND have key/value
               * foo=bar. * "doesnotexist.foo=bar" returns an empty list. Note that Endpoint doesn't
               * have a field called "doesnotexist". Since the filter does not match any Endpoints,
               * it returns no results.
               */
              public List setFilter(java.lang.String filter) {
                this.filter = filter;
                return this;
              }

              /** Optional. The order to list result by. */
              @com.google.api.client.util.Key
              private java.lang.String orderBy;

              /** Optional. The order to list result by.
               */
              public java.lang.String getOrderBy() {
                return orderBy;
              }

              /** Optional. The order to list result by. */
              public List setOrderBy(java.lang.String orderBy) {
                this.orderBy = orderBy;
                return this;
              }

              /** Optional. The maximum number of items to return. */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** Optional. The maximum number of items to return.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /** Optional. The maximum number of items to return. */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /**
               * Optional. The next_page_token value returned from a previous List request, if any.
               */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** Optional. The next_page_token value returned from a previous List request, if any.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /**
               * Optional. The next_page_token value returned from a previous List request, if any.
               */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates a endpoint.
             *
             * Create a request for the method "endpoints.patch".
             *
             * This request holds the parameters needed by the servicedirectory server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name Immutable. The resource name for the endpoint in the format
             *        'projects/locations/namespaces/services/endpoints'.
             * @param content the {@link com.google.api.services.servicedirectory.v1.model.Endpoint}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Endpoint content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends ServiceDirectoryRequest<com.google.api.services.servicedirectory.v1.model.Endpoint> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");

              /**
               * Updates a endpoint.
               *
               * Create a request for the method "endpoints.patch".
               *
               * This request holds the parameters needed by the the servicedirectory server.  After setting any
               * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
               * <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Immutable. The resource name for the endpoint in the format
             *        'projects/locations/namespaces/services/endpoints'.
               * @param content the {@link com.google.api.services.servicedirectory.v1.model.Endpoint}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.servicedirectory.v1.model.Endpoint content) {
                super(ServiceDirectory.this, "PATCH", REST_PATH, content, com.google.api.services.servicedirectory.v1.model.Endpoint.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Immutable. The resource name for the endpoint in the format
               * 'projects/locations/namespaces/services/endpoints'.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Immutable. The resource name for the endpoint in the format
             'projects/locations/namespaces/services/endpoints'.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Immutable. The resource name for the endpoint in the format
               * 'projects/locations/namespaces/services/endpoints'.
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/namespaces/[^/]+/services/[^/]+/endpoints/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /** Required. List of fields to be updated in this request. */
              @com.google.api.client.util.Key
              private String updateMask;

              /** Required. List of fields to be updated in this request.
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /** Required. List of fields to be updated in this request. */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * Builder for {@link ServiceDirectory}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link ServiceDirectory}. */
    @Override
    public ServiceDirectory build() {
      return new ServiceDirectory(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ServiceDirectoryRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setServiceDirectoryRequestInitializer(
        ServiceDirectoryRequestInitializer servicedirectoryRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(servicedirectoryRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
