/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securesourcemanager.v1.model;

/**
 * Metadata of a Secure Source Manager Hook.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Secure Source Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Hook extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Create timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Determines if the hook disabled or not. Set to true to stop sending traffic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * Optional. The events that trigger hook on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> events;

  /**
   * Identifier. A unique identifier for a Hook. The name should be of the format:
   * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The trigger option for push events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PushOption pushOption;

  /**
   * Optional. The sensitive query string to be appended to the target URI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sensitiveQueryString;

  /**
   * Required. The target URI to which the payloads will be delivered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetUri;

  /**
   * Output only. Unique identifier of the hook.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. Update timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. Create timestamp.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Create timestamp.
   * @param createTime createTime or {@code null} for none
   */
  public Hook setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Determines if the hook disabled or not. Set to true to stop sending traffic.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * Optional. Determines if the hook disabled or not. Set to true to stop sending traffic.
   * @param disabled disabled or {@code null} for none
   */
  public Hook setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. The events that trigger hook on.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEvents() {
    return events;
  }

  /**
   * Optional. The events that trigger hook on.
   * @param events events or {@code null} for none
   */
  public Hook setEvents(java.util.List<java.lang.String> events) {
    this.events = events;
    return this;
  }

  /**
   * Identifier. A unique identifier for a Hook. The name should be of the format:
   * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. A unique identifier for a Hook. The name should be of the format:
   * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
   * @param name name or {@code null} for none
   */
  public Hook setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The trigger option for push events.
   * @return value or {@code null} for none
   */
  public PushOption getPushOption() {
    return pushOption;
  }

  /**
   * Optional. The trigger option for push events.
   * @param pushOption pushOption or {@code null} for none
   */
  public Hook setPushOption(PushOption pushOption) {
    this.pushOption = pushOption;
    return this;
  }

  /**
   * Optional. The sensitive query string to be appended to the target URI.
   * @return value or {@code null} for none
   */
  public java.lang.String getSensitiveQueryString() {
    return sensitiveQueryString;
  }

  /**
   * Optional. The sensitive query string to be appended to the target URI.
   * @param sensitiveQueryString sensitiveQueryString or {@code null} for none
   */
  public Hook setSensitiveQueryString(java.lang.String sensitiveQueryString) {
    this.sensitiveQueryString = sensitiveQueryString;
    return this;
  }

  /**
   * Required. The target URI to which the payloads will be delivered.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetUri() {
    return targetUri;
  }

  /**
   * Required. The target URI to which the payloads will be delivered.
   * @param targetUri targetUri or {@code null} for none
   */
  public Hook setTargetUri(java.lang.String targetUri) {
    this.targetUri = targetUri;
    return this;
  }

  /**
   * Output only. Unique identifier of the hook.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. Unique identifier of the hook.
   * @param uid uid or {@code null} for none
   */
  public Hook setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. Update timestamp.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Update timestamp.
   * @param updateTime updateTime or {@code null} for none
   */
  public Hook setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Hook set(String fieldName, Object value) {
    return (Hook) super.set(fieldName, value);
  }

  @Override
  public Hook clone() {
    return (Hook) super.clone();
  }

}
