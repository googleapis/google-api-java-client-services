/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataform.v1beta1.model;

/**
 * Represents a database relation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dataform API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Relation extends com.google.api.client.json.GenericJson {

  /**
   * Additional options that will be provided as key/value pairs into the options clause of a create
   * table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-
   * definition-language for more information on which options are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> additionalOptions;

  /**
   * A list of columns or SQL expressions used to cluster the table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> clusterExpressions;

  /**
   * A list of actions that this action depends on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Target> dependencyTargets;

  /**
   * Whether this action is disabled (i.e. should not be run).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is
   * `INCREMENTAL_TABLE`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IncrementalTableConfig incrementalTableConfig;

  /**
   * Sets the partition expiration in days.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer partitionExpirationDays;

  /**
   * The SQL expression used to partition the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String partitionExpression;

  /**
   * SQL statements to be executed after creating the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> postOperations;

  /**
   * SQL statements to be executed before creating the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> preOperations;

  /**
   * Descriptor for the relation and its columns.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RelationDescriptor relationDescriptor;

  /**
   * The type of this relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String relationType;

  /**
   * Specifies whether queries on this table must include a predicate filter that filters on the
   * partitioning column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requirePartitionFilter;

  /**
   * The SELECT query which returns rows which this relation should contain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String selectQuery;

  /**
   * Arbitrary, user-defined tags on this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tags;

  /**
   * Additional options that will be provided as key/value pairs into the options clause of a create
   * table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-
   * definition-language for more information on which options are supported.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAdditionalOptions() {
    return additionalOptions;
  }

  /**
   * Additional options that will be provided as key/value pairs into the options clause of a create
   * table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-
   * definition-language for more information on which options are supported.
   * @param additionalOptions additionalOptions or {@code null} for none
   */
  public Relation setAdditionalOptions(java.util.Map<String, java.lang.String> additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  /**
   * A list of columns or SQL expressions used to cluster the table.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getClusterExpressions() {
    return clusterExpressions;
  }

  /**
   * A list of columns or SQL expressions used to cluster the table.
   * @param clusterExpressions clusterExpressions or {@code null} for none
   */
  public Relation setClusterExpressions(java.util.List<java.lang.String> clusterExpressions) {
    this.clusterExpressions = clusterExpressions;
    return this;
  }

  /**
   * A list of actions that this action depends on.
   * @return value or {@code null} for none
   */
  public java.util.List<Target> getDependencyTargets() {
    return dependencyTargets;
  }

  /**
   * A list of actions that this action depends on.
   * @param dependencyTargets dependencyTargets or {@code null} for none
   */
  public Relation setDependencyTargets(java.util.List<Target> dependencyTargets) {
    this.dependencyTargets = dependencyTargets;
    return this;
  }

  /**
   * Whether this action is disabled (i.e. should not be run).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * Whether this action is disabled (i.e. should not be run).
   * @param disabled disabled or {@code null} for none
   */
  public Relation setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is
   * `INCREMENTAL_TABLE`.
   * @return value or {@code null} for none
   */
  public IncrementalTableConfig getIncrementalTableConfig() {
    return incrementalTableConfig;
  }

  /**
   * Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is
   * `INCREMENTAL_TABLE`.
   * @param incrementalTableConfig incrementalTableConfig or {@code null} for none
   */
  public Relation setIncrementalTableConfig(IncrementalTableConfig incrementalTableConfig) {
    this.incrementalTableConfig = incrementalTableConfig;
    return this;
  }

  /**
   * Sets the partition expiration in days.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPartitionExpirationDays() {
    return partitionExpirationDays;
  }

  /**
   * Sets the partition expiration in days.
   * @param partitionExpirationDays partitionExpirationDays or {@code null} for none
   */
  public Relation setPartitionExpirationDays(java.lang.Integer partitionExpirationDays) {
    this.partitionExpirationDays = partitionExpirationDays;
    return this;
  }

  /**
   * The SQL expression used to partition the relation.
   * @return value or {@code null} for none
   */
  public java.lang.String getPartitionExpression() {
    return partitionExpression;
  }

  /**
   * The SQL expression used to partition the relation.
   * @param partitionExpression partitionExpression or {@code null} for none
   */
  public Relation setPartitionExpression(java.lang.String partitionExpression) {
    this.partitionExpression = partitionExpression;
    return this;
  }

  /**
   * SQL statements to be executed after creating the relation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPostOperations() {
    return postOperations;
  }

  /**
   * SQL statements to be executed after creating the relation.
   * @param postOperations postOperations or {@code null} for none
   */
  public Relation setPostOperations(java.util.List<java.lang.String> postOperations) {
    this.postOperations = postOperations;
    return this;
  }

  /**
   * SQL statements to be executed before creating the relation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPreOperations() {
    return preOperations;
  }

  /**
   * SQL statements to be executed before creating the relation.
   * @param preOperations preOperations or {@code null} for none
   */
  public Relation setPreOperations(java.util.List<java.lang.String> preOperations) {
    this.preOperations = preOperations;
    return this;
  }

  /**
   * Descriptor for the relation and its columns.
   * @return value or {@code null} for none
   */
  public RelationDescriptor getRelationDescriptor() {
    return relationDescriptor;
  }

  /**
   * Descriptor for the relation and its columns.
   * @param relationDescriptor relationDescriptor or {@code null} for none
   */
  public Relation setRelationDescriptor(RelationDescriptor relationDescriptor) {
    this.relationDescriptor = relationDescriptor;
    return this;
  }

  /**
   * The type of this relation.
   * @return value or {@code null} for none
   */
  public java.lang.String getRelationType() {
    return relationType;
  }

  /**
   * The type of this relation.
   * @param relationType relationType or {@code null} for none
   */
  public Relation setRelationType(java.lang.String relationType) {
    this.relationType = relationType;
    return this;
  }

  /**
   * Specifies whether queries on this table must include a predicate filter that filters on the
   * partitioning column.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequirePartitionFilter() {
    return requirePartitionFilter;
  }

  /**
   * Specifies whether queries on this table must include a predicate filter that filters on the
   * partitioning column.
   * @param requirePartitionFilter requirePartitionFilter or {@code null} for none
   */
  public Relation setRequirePartitionFilter(java.lang.Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
    return this;
  }

  /**
   * The SELECT query which returns rows which this relation should contain.
   * @return value or {@code null} for none
   */
  public java.lang.String getSelectQuery() {
    return selectQuery;
  }

  /**
   * The SELECT query which returns rows which this relation should contain.
   * @param selectQuery selectQuery or {@code null} for none
   */
  public Relation setSelectQuery(java.lang.String selectQuery) {
    this.selectQuery = selectQuery;
    return this;
  }

  /**
   * Arbitrary, user-defined tags on this action.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }

  /**
   * Arbitrary, user-defined tags on this action.
   * @param tags tags or {@code null} for none
   */
  public Relation setTags(java.util.List<java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  @Override
  public Relation set(String fieldName, Object value) {
    return (Relation) super.set(fieldName, value);
  }

  @Override
  public Relation clone() {
    return (Relation) super.clone();
  }

}
