/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.artifactregistry.v1;

/**
 * Service definition for ArtifactRegistry (v1).
 *
 * <p>
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/artifacts/docs/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ArtifactRegistryRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ArtifactRegistry extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Artifact Registry API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://artifactregistry.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://artifactregistry.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ArtifactRegistry(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ArtifactRegistry(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
   *   {@code ArtifactRegistry.Projects.List request = artifactregistry.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Retrieves the Settings for the Project.
     *
     * Create a request for the method "projects.getProjectSettings".
     *
     * This request holds the parameters needed by the artifactregistry server.  After setting any
     * optional parameters, call the {@link GetProjectSettings#execute()} method to invoke the remote
     * operation.
     *
     * @param name Required. The name of the projectSettings resource.
     * @return the request
     */
    public GetProjectSettings getProjectSettings(java.lang.String name) throws java.io.IOException {
      GetProjectSettings result = new GetProjectSettings(name);
      initialize(result);
      return result;
    }

    public class GetProjectSettings extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ProjectSettings> {

      private static final String REST_PATH = "v1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/projectSettings$");

      /**
       * Retrieves the Settings for the Project.
       *
       * Create a request for the method "projects.getProjectSettings".
       *
       * This request holds the parameters needed by the the artifactregistry server.  After setting any
       * optional parameters, call the {@link GetProjectSettings#execute()} method to invoke the remote
       * operation. <p> {@link GetProjectSettings#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param name Required. The name of the projectSettings resource.
       * @since 1.13
       */
      protected GetProjectSettings(java.lang.String name) {
        super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ProjectSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/projectSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetProjectSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetProjectSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetProjectSettings setAccessToken(java.lang.String accessToken) {
        return (GetProjectSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetProjectSettings setAlt(java.lang.String alt) {
        return (GetProjectSettings) super.setAlt(alt);
      }

      @Override
      public GetProjectSettings setCallback(java.lang.String callback) {
        return (GetProjectSettings) super.setCallback(callback);
      }

      @Override
      public GetProjectSettings setFields(java.lang.String fields) {
        return (GetProjectSettings) super.setFields(fields);
      }

      @Override
      public GetProjectSettings setKey(java.lang.String key) {
        return (GetProjectSettings) super.setKey(key);
      }

      @Override
      public GetProjectSettings setOauthToken(java.lang.String oauthToken) {
        return (GetProjectSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetProjectSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetProjectSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetProjectSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetProjectSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetProjectSettings setUploadType(java.lang.String uploadType) {
        return (GetProjectSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetProjectSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetProjectSettings) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the projectSettings resource. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the projectSettings resource.
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the projectSettings resource. */
      public GetProjectSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/projectSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetProjectSettings set(String parameterName, Object value) {
        return (GetProjectSettings) super.set(parameterName, value);
      }
    }
    /**
     * Updates the Settings for the Project.
     *
     * Create a request for the method "projects.updateProjectSettings".
     *
     * This request holds the parameters needed by the artifactregistry server.  After setting any
     * optional parameters, call the {@link UpdateProjectSettings#execute()} method to invoke the remote
     * operation.
     *
     * @param name The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In
     *        update request: never set In response: always set
     * @param content the {@link com.google.api.services.artifactregistry.v1.model.ProjectSettings}
     * @return the request
     */
    public UpdateProjectSettings updateProjectSettings(java.lang.String name, com.google.api.services.artifactregistry.v1.model.ProjectSettings content) throws java.io.IOException {
      UpdateProjectSettings result = new UpdateProjectSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateProjectSettings extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ProjectSettings> {

      private static final String REST_PATH = "v1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/projectSettings$");

      /**
       * Updates the Settings for the Project.
       *
       * Create a request for the method "projects.updateProjectSettings".
       *
       * This request holds the parameters needed by the the artifactregistry server.  After setting any
       * optional parameters, call the {@link UpdateProjectSettings#execute()} method to invoke the
       * remote operation. <p> {@link UpdateProjectSettings#initialize(com.google.api.client.googleapis.
       * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param name The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In
     *        update request: never set In response: always set
       * @param content the {@link com.google.api.services.artifactregistry.v1.model.ProjectSettings}
       * @since 1.13
       */
      protected UpdateProjectSettings(java.lang.String name, com.google.api.services.artifactregistry.v1.model.ProjectSettings content) {
        super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.ProjectSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/projectSettings$");
        }
      }

      @Override
      public UpdateProjectSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateProjectSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateProjectSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateProjectSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateProjectSettings setAlt(java.lang.String alt) {
        return (UpdateProjectSettings) super.setAlt(alt);
      }

      @Override
      public UpdateProjectSettings setCallback(java.lang.String callback) {
        return (UpdateProjectSettings) super.setCallback(callback);
      }

      @Override
      public UpdateProjectSettings setFields(java.lang.String fields) {
        return (UpdateProjectSettings) super.setFields(fields);
      }

      @Override
      public UpdateProjectSettings setKey(java.lang.String key) {
        return (UpdateProjectSettings) super.setKey(key);
      }

      @Override
      public UpdateProjectSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateProjectSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateProjectSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateProjectSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateProjectSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateProjectSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateProjectSettings setUploadType(java.lang.String uploadType) {
        return (UpdateProjectSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateProjectSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateProjectSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The name of the project's settings. Always of the form: projects/{project-
       * id}/projectSettings In update request: never set In response: always set
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In
     update request: never set In response: always set
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The name of the project's settings. Always of the form: projects/{project-
       * id}/projectSettings In update request: never set In response: always set
       */
      public UpdateProjectSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/projectSettings$");
        }
        this.name = name;
        return this;
      }

      /** Field mask to support partial updates. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** Field mask to support partial updates.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** Field mask to support partial updates. */
      public UpdateProjectSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateProjectSettings set(String parameterName, Object value) {
        return (UpdateProjectSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
     *   {@code ArtifactRegistry.Locations.List request = artifactregistry.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the artifactregistry server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the artifactregistry server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves the VPCSC Config for the Project.
       *
       * Create a request for the method "locations.getVpcscConfig".
       *
       * This request holds the parameters needed by the artifactregistry server.  After setting any
       * optional parameters, call the {@link GetVpcscConfig#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. The name of the VPCSCConfig resource.
       * @return the request
       */
      public GetVpcscConfig getVpcscConfig(java.lang.String name) throws java.io.IOException {
        GetVpcscConfig result = new GetVpcscConfig(name);
        initialize(result);
        return result;
      }

      public class GetVpcscConfig extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.VPCSCConfig> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/vpcscConfig$");

        /**
         * Retrieves the VPCSC Config for the Project.
         *
         * Create a request for the method "locations.getVpcscConfig".
         *
         * This request holds the parameters needed by the the artifactregistry server.  After setting any
         * optional parameters, call the {@link GetVpcscConfig#execute()} method to invoke the remote
         * operation. <p> {@link GetVpcscConfig#initialize(com.google.api.client.googleapis.services.Abstr
         * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Required. The name of the VPCSCConfig resource.
         * @since 1.13
         */
        protected GetVpcscConfig(java.lang.String name) {
          super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.VPCSCConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+/vpcscConfig$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetVpcscConfig set$Xgafv(java.lang.String $Xgafv) {
          return (GetVpcscConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetVpcscConfig setAccessToken(java.lang.String accessToken) {
          return (GetVpcscConfig) super.setAccessToken(accessToken);
        }

        @Override
        public GetVpcscConfig setAlt(java.lang.String alt) {
          return (GetVpcscConfig) super.setAlt(alt);
        }

        @Override
        public GetVpcscConfig setCallback(java.lang.String callback) {
          return (GetVpcscConfig) super.setCallback(callback);
        }

        @Override
        public GetVpcscConfig setFields(java.lang.String fields) {
          return (GetVpcscConfig) super.setFields(fields);
        }

        @Override
        public GetVpcscConfig setKey(java.lang.String key) {
          return (GetVpcscConfig) super.setKey(key);
        }

        @Override
        public GetVpcscConfig setOauthToken(java.lang.String oauthToken) {
          return (GetVpcscConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public GetVpcscConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetVpcscConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetVpcscConfig setQuotaUser(java.lang.String quotaUser) {
          return (GetVpcscConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetVpcscConfig setUploadType(java.lang.String uploadType) {
          return (GetVpcscConfig) super.setUploadType(uploadType);
        }

        @Override
        public GetVpcscConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetVpcscConfig) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the VPCSCConfig resource. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the VPCSCConfig resource.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the VPCSCConfig resource. */
        public GetVpcscConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+/vpcscConfig$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetVpcscConfig set(String parameterName, Object value) {
          return (GetVpcscConfig) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the artifactregistry server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the artifactregistry server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the VPCSC Config for the Project.
       *
       * Create a request for the method "locations.updateVpcscConfig".
       *
       * This request holds the parameters needed by the artifactregistry server.  After setting any
       * optional parameters, call the {@link UpdateVpcscConfig#execute()} method to invoke the remote
       * operation.
       *
       * @param name The name of the project's VPC SC Config. Always of the form:
       *        projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In
       *        response: always set
       * @param content the {@link com.google.api.services.artifactregistry.v1.model.VPCSCConfig}
       * @return the request
       */
      public UpdateVpcscConfig updateVpcscConfig(java.lang.String name, com.google.api.services.artifactregistry.v1.model.VPCSCConfig content) throws java.io.IOException {
        UpdateVpcscConfig result = new UpdateVpcscConfig(name, content);
        initialize(result);
        return result;
      }

      public class UpdateVpcscConfig extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.VPCSCConfig> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/vpcscConfig$");

        /**
         * Updates the VPCSC Config for the Project.
         *
         * Create a request for the method "locations.updateVpcscConfig".
         *
         * This request holds the parameters needed by the the artifactregistry server.  After setting any
         * optional parameters, call the {@link UpdateVpcscConfig#execute()} method to invoke the remote
         * operation. <p> {@link UpdateVpcscConfig#initialize(com.google.api.client.googleapis.services.Ab
         * stractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param name The name of the project's VPC SC Config. Always of the form:
       *        projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In
       *        response: always set
         * @param content the {@link com.google.api.services.artifactregistry.v1.model.VPCSCConfig}
         * @since 1.13
         */
        protected UpdateVpcscConfig(java.lang.String name, com.google.api.services.artifactregistry.v1.model.VPCSCConfig content) {
          super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.VPCSCConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+/vpcscConfig$");
          }
        }

        @Override
        public UpdateVpcscConfig set$Xgafv(java.lang.String $Xgafv) {
          return (UpdateVpcscConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public UpdateVpcscConfig setAccessToken(java.lang.String accessToken) {
          return (UpdateVpcscConfig) super.setAccessToken(accessToken);
        }

        @Override
        public UpdateVpcscConfig setAlt(java.lang.String alt) {
          return (UpdateVpcscConfig) super.setAlt(alt);
        }

        @Override
        public UpdateVpcscConfig setCallback(java.lang.String callback) {
          return (UpdateVpcscConfig) super.setCallback(callback);
        }

        @Override
        public UpdateVpcscConfig setFields(java.lang.String fields) {
          return (UpdateVpcscConfig) super.setFields(fields);
        }

        @Override
        public UpdateVpcscConfig setKey(java.lang.String key) {
          return (UpdateVpcscConfig) super.setKey(key);
        }

        @Override
        public UpdateVpcscConfig setOauthToken(java.lang.String oauthToken) {
          return (UpdateVpcscConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public UpdateVpcscConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (UpdateVpcscConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public UpdateVpcscConfig setQuotaUser(java.lang.String quotaUser) {
          return (UpdateVpcscConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public UpdateVpcscConfig setUploadType(java.lang.String uploadType) {
          return (UpdateVpcscConfig) super.setUploadType(uploadType);
        }

        @Override
        public UpdateVpcscConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (UpdateVpcscConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the project's VPC SC Config. Always of the form:
         * projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In
         * response: always set
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the project's VPC SC Config. Always of the form:
       projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response:
       always set
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the project's VPC SC Config. Always of the form:
         * projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In
         * response: always set
         */
        public UpdateVpcscConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+/vpcscConfig$");
          }
          this.name = name;
          return this;
        }

        /** Field mask to support partial updates. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Field mask to support partial updates.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** Field mask to support partial updates. */
        public UpdateVpcscConfig setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public UpdateVpcscConfig set(String parameterName, Object value) {
          return (UpdateVpcscConfig) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
       *   {@code ArtifactRegistry.Operations.List request = artifactregistry.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Repositories collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
       *   {@code ArtifactRegistry.Repositories.List request = artifactregistry.repositories().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Repositories repositories() {
        return new Repositories();
      }

      /**
       * The "repositories" collection of methods.
       */
      public class Repositories {

        /**
         * Creates a repository. The returned Operation will finish once the repository has been created.
         * Its response will be the created Repository.
         *
         * Create a request for the method "repositories.create".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The name of the parent resource where the repository will be created.
         * @param content the {@link com.google.api.services.artifactregistry.v1.model.Repository}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Repository content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/repositories";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a repository. The returned Operation will finish once the repository has been created.
           * Its response will be the created Repository.
           *
           * Create a request for the method "repositories.create".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The name of the parent resource where the repository will be created.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.Repository}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Repository content) {
            super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the parent resource where the repository will be created. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The name of the parent resource where the repository will be created.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The name of the parent resource where the repository will be created. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. The repository id to use for this repository. */
          @com.google.api.client.util.Key
          private java.lang.String repositoryId;

          /** Required. The repository id to use for this repository.
           */
          public java.lang.String getRepositoryId() {
            return repositoryId;
          }

          /** Required. The repository id to use for this repository. */
          public Create setRepositoryId(java.lang.String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a repository and all of its contents. The returned Operation will finish once the
         * repository has been deleted. It will not have any Operation metadata and will return a
         * google.protobuf.Empty response.
         *
         * Create a request for the method "repositories.delete".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the repository to delete.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Deletes a repository and all of its contents. The returned Operation will finish once the
           * repository has been deleted. It will not have any Operation metadata and will return a
           * google.protobuf.Empty response.
           *
           * Create a request for the method "repositories.delete".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the repository to delete.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the repository to delete. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the repository to delete.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the repository to delete. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a repository.
         *
         * Create a request for the method "repositories.get".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the repository to retrieve.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Repository> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Gets a repository.
           *
           * Create a request for the method "repositories.get".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the repository to retrieve.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Repository.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the repository to retrieve. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the repository to retrieve.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the repository to retrieve. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Gets the IAM policy for a given resource.
         *
         * Create a request for the method "repositories.getIamPolicy".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Gets the IAM policy for a given resource.
           *
           * Create a request for the method "repositories.getIamPolicy".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource) {
            super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          @com.google.api.client.util.Key("options.requestedPolicyVersion")
          private java.lang.Integer optionsRequestedPolicyVersion;

          /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1,
         and 3. Requests specifying an invalid value will be rejected. Requests for policies with any
         conditional role bindings must specify version 3. Policies with no conditional role bindings may
         specify any valid value or leave the field unset. The policy in the response might use the policy
         version that you specified, or it might use a lower policy version. For example, if you specify
         version 3, but the policy has no conditional role bindings, the response uses version 1. To learn
         which resources support conditions in their IAM policies, see the [IAM
         documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public java.lang.Integer getOptionsRequestedPolicyVersion() {
            return optionsRequestedPolicyVersion;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public GetIamPolicy setOptionsRequestedPolicyVersion(java.lang.Integer optionsRequestedPolicyVersion) {
            this.optionsRequestedPolicyVersion = optionsRequestedPolicyVersion;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Lists repositories.
         *
         * Create a request for the method "repositories.list".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The name of the parent resource whose repositories will be listed.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListRepositoriesResponse> {

          private static final String REST_PATH = "v1/{+parent}/repositories";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists repositories.
           *
           * Create a request for the method "repositories.list".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The name of the parent resource whose repositories will be listed.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListRepositoriesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the parent resource whose repositories will be listed. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The name of the parent resource whose repositories will be listed.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The name of the parent resource whose repositories will be listed. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. An expression for filtering the results of the request. Filter rules are case
           * insensitive. The fields eligible for filtering are: * `name` Examples of using a
           * filter: To filter the results of your request to repositories with the name `my-repo`
           * in project `my-project` in the `us-central` region, append the following filter
           * expression to your request: * `name="projects/my-project/locations/us-
           * central1/repositories/my-repo"` You can also use wildcards to match any number of
           * characters before or after the value: * `name="projects/my-project/locations/us-
           * central1/repositories/my-*"` * `name="projects/my-project/locations/us-
           * central1/repositoriesrepo"` * `name="projects/my-project/locations/us-
           * central1/repositoriesrepo*"`
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. An expression for filtering the results of the request. Filter rules are case
         insensitive. The fields eligible for filtering are: * `name` Examples of using a filter: To filter
         the results of your request to repositories with the name `my-repo` in project `my-project` in the
         `us-central` region, append the following filter expression to your request: * `name="projects/my-
         project/locations/us-central1/repositories/my-repo"` You can also use wildcards to match any number
         of characters before or after the value: * `name="projects/my-project/locations/us-
         central1/repositories/my-*"` * `name="projects/my-project/locations/us-central1/repositoriesrepo"`
         * `name="projects/my-project/locations/us-central1/repositoriesrepo*"`
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * Optional. An expression for filtering the results of the request. Filter rules are case
           * insensitive. The fields eligible for filtering are: * `name` Examples of using a
           * filter: To filter the results of your request to repositories with the name `my-repo`
           * in project `my-project` in the `us-central` region, append the following filter
           * expression to your request: * `name="projects/my-project/locations/us-
           * central1/repositories/my-repo"` You can also use wildcards to match any number of
           * characters before or after the value: * `name="projects/my-project/locations/us-
           * central1/repositories/my-*"` * `name="projects/my-project/locations/us-
           * central1/repositoriesrepo"` * `name="projects/my-project/locations/us-
           * central1/repositoriesrepo*"`
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Optional. The field to order the results by. */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. The field to order the results by.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /** Optional. The field to order the results by. */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** The maximum number of repositories to return. Maximum page size is 1,000. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of repositories to return. Maximum page size is 1,000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The maximum number of repositories to return. Maximum page size is 1,000. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The next_page_token value returned from a previous list request, if any. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The next_page_token value returned from a previous list request, if any.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The next_page_token value returned from a previous list request, if any. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a repository.
         *
         * Create a request for the method "repositories.patch".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`. For
         *        each location in a project, repository names must be unique.
         * @param content the {@link com.google.api.services.artifactregistry.v1.model.Repository}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Repository content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Repository> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Updates a repository.
           *
           * Create a request for the method "repositories.patch".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`. For
         *        each location in a project, repository names must be unique.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.Repository}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Repository content) {
            super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Repository.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The name of the repository, for example: `projects/p1/locations/us-
           * central1/repositories/repo1`. For each location in a project, repository names must be
           * unique.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
         For each location in a project, repository names must be unique.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The name of the repository, for example: `projects/p1/locations/us-
           * central1/repositories/repo1`. For each location in a project, repository names must be
           * unique.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Updates the IAM policy for a given resource.
         *
         * Create a request for the method "repositories.setIamPolicy".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.artifactregistry.v1.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.artifactregistry.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Updates the IAM policy for a given resource.
           *
           * Create a request for the method "repositories.setIamPolicy".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.artifactregistry.v1.model.SetIamPolicyRequest content) {
            super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being specified. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Tests if the caller has a list of permissions on a resource.
         *
         * Create a request for the method "repositories.testIamPermissions".
         *
         * This request holds the parameters needed by the artifactregistry server.  After setting any
         * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.artifactregistry.v1.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.artifactregistry.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Tests if the caller has a list of permissions on a resource.
           *
           * Create a request for the method "repositories.testIamPermissions".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
           * operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.services.A
           * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.artifactregistry.v1.model.TestIamPermissionsRequest content) {
            super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the AptArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.AptArtifacts.List request = artifactregistry.aptArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public AptArtifacts aptArtifacts() {
          return new AptArtifacts();
        }

        /**
         * The "aptArtifacts" collection of methods.
         */
        public class AptArtifacts {

          /**
           * Imports Apt artifacts. The returned Operation will complete once the resources are imported.
           * Package, Version, and File resources are created based on the imported artifacts. Imported
           * artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "aptArtifacts.import".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
           * remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be imported.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportAptArtifactsRequest}
           * @return the request
           */
          public ArtifactRegistryImport artifactregistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportAptArtifactsRequest content) throws java.io.IOException {
            ArtifactRegistryImport result = new ArtifactRegistryImport(parent, content);
            initialize(result);
            return result;
          }

          public class ArtifactRegistryImport extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/aptArtifacts:import";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Imports Apt artifacts. The returned Operation will complete once the resources are imported.
             * Package, Version, and File resources are created based on the imported artifacts. Imported
             * artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "aptArtifacts.import".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
             * remote operation. <p> {@link ArtifactRegistryImport#initialize(com.google.api.client.googleapis
             * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
             * after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be imported.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportAptArtifactsRequest}
             * @since 1.13
             */
            protected ArtifactRegistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportAptArtifactsRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public ArtifactRegistryImport set$Xgafv(java.lang.String $Xgafv) {
              return (ArtifactRegistryImport) super.set$Xgafv($Xgafv);
            }

            @Override
            public ArtifactRegistryImport setAccessToken(java.lang.String accessToken) {
              return (ArtifactRegistryImport) super.setAccessToken(accessToken);
            }

            @Override
            public ArtifactRegistryImport setAlt(java.lang.String alt) {
              return (ArtifactRegistryImport) super.setAlt(alt);
            }

            @Override
            public ArtifactRegistryImport setCallback(java.lang.String callback) {
              return (ArtifactRegistryImport) super.setCallback(callback);
            }

            @Override
            public ArtifactRegistryImport setFields(java.lang.String fields) {
              return (ArtifactRegistryImport) super.setFields(fields);
            }

            @Override
            public ArtifactRegistryImport setKey(java.lang.String key) {
              return (ArtifactRegistryImport) super.setKey(key);
            }

            @Override
            public ArtifactRegistryImport setOauthToken(java.lang.String oauthToken) {
              return (ArtifactRegistryImport) super.setOauthToken(oauthToken);
            }

            @Override
            public ArtifactRegistryImport setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ArtifactRegistryImport) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ArtifactRegistryImport setQuotaUser(java.lang.String quotaUser) {
              return (ArtifactRegistryImport) super.setQuotaUser(quotaUser);
            }

            @Override
            public ArtifactRegistryImport setUploadType(java.lang.String uploadType) {
              return (ArtifactRegistryImport) super.setUploadType(uploadType);
            }

            @Override
            public ArtifactRegistryImport setUploadProtocol(java.lang.String uploadProtocol) {
              return (ArtifactRegistryImport) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be imported. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be imported.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be imported. */
            public ArtifactRegistryImport setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public ArtifactRegistryImport set(String parameterName, Object value) {
              return (ArtifactRegistryImport) super.set(parameterName, value);
            }
          }
          /**
           * Directly uploads an Apt artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "aptArtifacts.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads an Apt artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "aptArtifacts.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadAptArtifactMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/aptArtifacts:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads an Apt artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "aptArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads an Apt artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "aptArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadAptArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Attachments collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.Attachments.List request = artifactregistry.attachments().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Attachments attachments() {
          return new Attachments();
        }

        /**
         * The "attachments" collection of methods.
         */
        public class Attachments {

          /**
           * Creates an attachment. The returned Operation will finish once the attachment has been created.
           * Its response will be the created attachment.
           *
           * Create a request for the method "attachments.create".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource where the attachment will be created.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.Attachment}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Attachment content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/attachments";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Creates an attachment. The returned Operation will finish once the attachment has been created.
             * Its response will be the created attachment.
             *
             * Create a request for the method "attachments.create".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource where the attachment will be created.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.Attachment}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Attachment content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource where the attachment will be created. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource where the attachment will be created.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource where the attachment will be created. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Required. The attachment id to use for this attachment. */
            @com.google.api.client.util.Key
            private java.lang.String attachmentId;

            /** Required. The attachment id to use for this attachment.
             */
            public java.lang.String getAttachmentId() {
              return attachmentId;
            }

            /** Required. The attachment id to use for this attachment. */
            public Create setAttachmentId(java.lang.String attachmentId) {
              this.attachmentId = attachmentId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes an attachment. The returned Operation will finish once the attachments has been deleted.
           * It will not have any Operation metadata and will return a `google.protobuf.Empty` response.
           *
           * Create a request for the method "attachments.delete".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the attachment to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");

            /**
             * Deletes an attachment. The returned Operation will finish once the attachments has been
             * deleted. It will not have any Operation metadata and will return a `google.protobuf.Empty`
             * response.
             *
             * Create a request for the method "attachments.delete".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the attachment to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the attachment to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the attachment to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the attachment to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets an attachment.
           *
           * Create a request for the method "attachments.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the attachment to retrieve.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Attachment> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");

            /**
             * Gets an attachment.
             *
             * Create a request for the method "attachments.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the attachment to retrieve.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Attachment.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the attachment to retrieve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the attachment to retrieve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the attachment to retrieve. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/attachments/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists attachments.
           *
           * Create a request for the method "attachments.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose attachments will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListAttachmentsResponse> {

            private static final String REST_PATH = "v1/{+parent}/attachments";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists attachments.
             *
             * Create a request for the method "attachments.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose attachments will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListAttachmentsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose attachments will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose attachments will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose attachments will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. An expression for filtering the results of the request. Filter rules are
             * case insensitive. The fields eligible for filtering are: * `target` * `type` *
             * `attachment_namespace`
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. An expression for filtering the results of the request. Filter rules are case
           insensitive. The fields eligible for filtering are: * `target` * `type` * `attachment_namespace`
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. An expression for filtering the results of the request. Filter rules are
             * case insensitive. The fields eligible for filtering are: * `target` * `type` *
             * `attachment_namespace`
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The maximum number of attachments to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of attachments to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of attachments to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the DockerImages collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.DockerImages.List request = artifactregistry.dockerImages().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public DockerImages dockerImages() {
          return new DockerImages();
        }

        /**
         * The "dockerImages" collection of methods.
         */
        public class DockerImages {

          /**
           * Gets a docker image.
           *
           * Create a request for the method "dockerImages.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the docker images.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.DockerImage> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$");

            /**
             * Gets a docker image.
             *
             * Create a request for the method "dockerImages.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the docker images.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.DockerImage.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the docker images. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the docker images.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the docker images. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists docker images.
           *
           * Create a request for the method "dockerImages.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose docker images will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListDockerImagesResponse> {

            private static final String REST_PATH = "v1/{+parent}/dockerImages";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists docker images.
             *
             * Create a request for the method "dockerImages.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose docker images will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListDockerImagesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose docker images will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose docker images will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose docker images will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The field to order the results by. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** The field to order the results by.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** The field to order the results by. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of artifacts to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Files collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.Files.List request = artifactregistry.files().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Files files() {
          return new Files();
        }

        /**
         * The "files" collection of methods.
         */
        public class Files {

          /**
           * Deletes a file and all of its content. It is only allowed on generic repositories. The returned
           * operation will complete once the file has been deleted.
           *
           * Create a request for the method "files.delete".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the file to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");

            /**
             * Deletes a file and all of its content. It is only allowed on generic repositories. The returned
             * operation will complete once the file has been deleted.
             *
             * Create a request for the method "files.delete".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the file to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the file to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the file to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the file to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Download a file.
           *
           * Create a request for the method "files.download".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Download#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the file to download.
           * @return the request
           */
          public Download download(java.lang.String name) throws java.io.IOException {
            Download result = new Download(name);
            initialize(result);
            return result;
          }

          public class Download extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.DownloadFileResponse> {

            private static final String REST_PATH = "v1/{+name}:download";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");

            /**
             * Download a file.
             *
             * Create a request for the method "files.download".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Download#execute()} method to invoke the remote operation.
             * <p> {@link
             * Download#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the file to download.
             * @since 1.13
             */
            protected Download(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.DownloadFileResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
              initializeMediaDownload();
            }

            @Override
            public void executeMediaAndDownloadTo(java.io.OutputStream outputStream) throws java.io.IOException {
              super.executeMediaAndDownloadTo(outputStream);
            }

            @Override
            public java.io.InputStream executeMediaAsInputStream() throws java.io.IOException {
              return super.executeMediaAsInputStream();
            }

            @Override
            public com.google.api.client.http.HttpResponse executeMedia() throws java.io.IOException {
              return super.executeMedia();
            }

            @Override
            public com.google.api.client.http.GenericUrl buildHttpRequestUrl() {
              java.lang.String baseUrl = ("media".equals(get("alt")) && getMediaHttpUploader() == null)
                  ? getRootUrl() + "download/" + getServicePath() : getBaseUrl();
              return new com.google.api.client.http.GenericUrl(
                  com.google.api.client.http.UriTemplate.expand(baseUrl, getUriTemplate(), this, true));
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Download set$Xgafv(java.lang.String $Xgafv) {
              return (Download) super.set$Xgafv($Xgafv);
            }

            @Override
            public Download setAccessToken(java.lang.String accessToken) {
              return (Download) super.setAccessToken(accessToken);
            }

            @Override
            public Download setAlt(java.lang.String alt) {
              return (Download) super.setAlt(alt);
            }

            @Override
            public Download setCallback(java.lang.String callback) {
              return (Download) super.setCallback(callback);
            }

            @Override
            public Download setFields(java.lang.String fields) {
              return (Download) super.setFields(fields);
            }

            @Override
            public Download setKey(java.lang.String key) {
              return (Download) super.setKey(key);
            }

            @Override
            public Download setOauthToken(java.lang.String oauthToken) {
              return (Download) super.setOauthToken(oauthToken);
            }

            @Override
            public Download setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Download) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Download setQuotaUser(java.lang.String quotaUser) {
              return (Download) super.setQuotaUser(quotaUser);
            }

            @Override
            public Download setUploadType(java.lang.String uploadType) {
              return (Download) super.setUploadType(uploadType);
            }

            @Override
            public Download setUploadProtocol(java.lang.String uploadProtocol) {
              return (Download) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the file to download. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the file to download.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the file to download. */
            public Download setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Download set(String parameterName, Object value) {
              return (Download) super.set(parameterName, value);
            }
          }
          /**
           * Gets a file.
           *
           * Create a request for the method "files.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the file to retrieve.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$");

            /**
             * Gets a file.
             *
             * Create a request for the method "files.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the file to retrieve.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the file to retrieve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the file to retrieve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the file to retrieve. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists files.
           *
           * Create a request for the method "files.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the repository whose files will be listed. For example:
           *        "projects/p1/locations/us-central1/repositories/repo1
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListFilesResponse> {

            private static final String REST_PATH = "v1/{+parent}/files";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists files.
             *
             * Create a request for the method "files.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the repository whose files will be listed. For example:
           *        "projects/p1/locations/us-central1/repositories/repo1
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListFilesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the repository whose files will be listed. For example:
             * "projects/p1/locations/us-central1/repositories/repo1
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the repository whose files will be listed. For example:
           "projects/p1/locations/us-central1/repositories/repo1
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The name of the repository whose files will be listed. For example:
             * "projects/p1/locations/us-central1/repositories/repo1
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * An expression for filtering the results of the request. Filter rules are case
             * insensitive. The fields eligible for filtering are: * `name` * `owner` *
             * `annotations` Examples of using a filter: To filter the results of your request to
             * files with the name `my_file.txt` in project `my-project` in the `us-central` region,
             * in repository `my-repo`, append the following filter expression to your request: *
             * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-
             * file.txt"` You can also use wildcards to match any number of characters before or
             * after the value: * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/files/my-*"` * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/filesfile.txt"` * `name="projects/my-project/locations/us-
             * central1/repositories/my-repo/filesfile*"` To filter the results of your request to
             * files owned by the version `1.0` in package `pkg1`, append the following filter
             * expression to your request: * `owner="projects/my-project/locations/us-
             * central1/repositories/my-repo/packages/my-package/versions/1.0"` To filter the
             * results of your request to files with the annotation key-value pair [`external_link`:
             * `external_link_value`], append the following filter expression to your request: *
             * `"annotations.external_link:external_link_value"` To filter just for a specific
             * annotation key `external_link`, append the following filter expression to your
             * request: * `"annotations.external_link"` If the annotation key or value contains
             * special characters, you can escape them by surrounding the value with backticks. For
             * example, to filter the results of your request to files with the annotation key-value
             * pair [`external.link`:`https://example.com/my-file`], append the following filter
             * expression to your request: * ``
             * "annotations.`external.link`:`https://example.com/my-file`" `` You can also filter
             * with annotations with a wildcard to match any number of characters before or after
             * the value: * `` "annotations.*_link:`*example.com*`" ``
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** An expression for filtering the results of the request. Filter rules are case insensitive. The
           fields eligible for filtering are: * `name` * `owner` * `annotations` Examples of using a filter:
           To filter the results of your request to files with the name `my_file.txt` in project `my-project`
           in the `us-central` region, in repository `my-repo`, append the following filter expression to your
           request: * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-
           file.txt"` You can also use wildcards to match any number of characters before or after the value:
           * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-*"` *
           `name="projects/my-project/locations/us-central1/repositories/my-repo/filesfile.txt"` *
           `name="projects/my-project/locations/us-central1/repositories/my-repo/filesfile*"` To filter the
           results of your request to files owned by the version `1.0` in package `pkg1`, append the following
           filter expression to your request: * `owner="projects/my-project/locations/us-
           central1/repositories/my-repo/packages/my-package/versions/1.0"` To filter the results of your
           request to files with the annotation key-value pair [`external_link`: `external_link_value`],
           append the following filter expression to your request: *
           `"annotations.external_link:external_link_value"` To filter just for a specific annotation key
           `external_link`, append the following filter expression to your request: *
           `"annotations.external_link"` If the annotation key or value contains special characters, you can
           escape them by surrounding the value with backticks. For example, to filter the results of your
           request to files with the annotation key-value pair [`external.link`:`https://example.com/my-
           file`], append the following filter expression to your request: * ``
           "annotations.`external.link`:`https://example.com/my-file`" `` You can also filter with annotations
           with a wildcard to match any number of characters before or after the value: * ``
           "annotations.*_link:`*example.com*`" ``
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * An expression for filtering the results of the request. Filter rules are case
             * insensitive. The fields eligible for filtering are: * `name` * `owner` *
             * `annotations` Examples of using a filter: To filter the results of your request to
             * files with the name `my_file.txt` in project `my-project` in the `us-central` region,
             * in repository `my-repo`, append the following filter expression to your request: *
             * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-
             * file.txt"` You can also use wildcards to match any number of characters before or
             * after the value: * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/files/my-*"` * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/filesfile.txt"` * `name="projects/my-project/locations/us-
             * central1/repositories/my-repo/filesfile*"` To filter the results of your request to
             * files owned by the version `1.0` in package `pkg1`, append the following filter
             * expression to your request: * `owner="projects/my-project/locations/us-
             * central1/repositories/my-repo/packages/my-package/versions/1.0"` To filter the
             * results of your request to files with the annotation key-value pair [`external_link`:
             * `external_link_value`], append the following filter expression to your request: *
             * `"annotations.external_link:external_link_value"` To filter just for a specific
             * annotation key `external_link`, append the following filter expression to your
             * request: * `"annotations.external_link"` If the annotation key or value contains
             * special characters, you can escape them by surrounding the value with backticks. For
             * example, to filter the results of your request to files with the annotation key-value
             * pair [`external.link`:`https://example.com/my-file`], append the following filter
             * expression to your request: * ``
             * "annotations.`external.link`:`https://example.com/my-file`" `` You can also filter
             * with annotations with a wildcard to match any number of characters before or after
             * the value: * `` "annotations.*_link:`*example.com*`" ``
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The field to order the results by. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** The field to order the results by.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** The field to order the results by. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /** The maximum number of files to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of files to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of files to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a file.
           *
           * Create a request for the method "files.patch".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the file, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains slashes,
           *        they are escaped.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");

            /**
             * Updates a file.
             *
             * Create a request for the method "files.patch".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the file, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains slashes,
           *        they are escaped.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File content) {
              super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1File.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the file, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains
             * slashes, they are escaped.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the file, for example: `projects/p1/locations/us-
           central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains slashes, they are
           escaped.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the file, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains
             * slashes, they are escaped.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Required. The update mask applies to the resource. For the `FieldMask` definition,
             * see https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
           https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Required. The update mask applies to the resource. For the `FieldMask` definition,
             * see https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }
          /**
           * Directly uploads a file to a repository. The returned Operation will complete once the resources
           * are uploaded.
           *
           * Create a request for the method "files.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The resource name of the repository where the file will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadFileRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadFileRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a file to a repository. The returned Operation will complete once the resources
           * are uploaded.
           *
           * Create a request for the method "files.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent Required. The resource name of the repository where the file will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadFileRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadFileRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadFileMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/files:upload";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a file to a repository. The returned Operation will complete once the
             * resources are uploaded.
             *
             * Create a request for the method "files.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The resource name of the repository where the file will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadFileRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadFileRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadFileMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a file to a repository. The returned Operation will complete once the
             * resources are uploaded.
             *
             * Create a request for the method "files.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent Required. The resource name of the repository where the file will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadFileRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadFileRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadFileMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The resource name of the repository where the file will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The resource name of the repository where the file will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The resource name of the repository where the file will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the GenericArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.GenericArtifacts.List request = artifactregistry.genericArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public GenericArtifacts genericArtifacts() {
          return new GenericArtifacts();
        }

        /**
         * The "genericArtifacts" collection of methods.
         */
        public class GenericArtifacts {

          /**
           * Directly uploads a Generic artifact. The returned operation will complete once the resources are
           * uploaded. Package, version, and file resources are created based on the uploaded artifact.
           * Uploaded artifacts that conflict with existing resources will raise an `ALREADY_EXISTS` error.
           *
           * Create a request for the method "genericArtifacts.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The resource name of the repository where the generic artifact will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a Generic artifact. The returned operation will complete once the resources are
           * uploaded. Package, version, and file resources are created based on the uploaded artifact.
           * Uploaded artifacts that conflict with existing resources will raise an `ALREADY_EXISTS` error.
           *
           * Create a request for the method "genericArtifacts.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The resource name of the repository where the generic artifact will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/genericArtifacts:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a Generic artifact. The returned operation will complete once the resources
             * are uploaded. Package, version, and file resources are created based on the uploaded artifact.
             * Uploaded artifacts that conflict with existing resources will raise an `ALREADY_EXISTS` error.
             *
             * Create a request for the method "genericArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The resource name of the repository where the generic artifact will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a Generic artifact. The returned operation will complete once the resources
             * are uploaded. Package, version, and file resources are created based on the uploaded artifact.
             * Uploaded artifacts that conflict with existing resources will raise an `ALREADY_EXISTS` error.
             *
             * Create a request for the method "genericArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The resource name of the repository where the generic artifact will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGenericArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The resource name of the repository where the generic artifact will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The resource name of the repository where the generic artifact will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The resource name of the repository where the generic artifact will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the GoModules collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.GoModules.List request = artifactregistry.goModules().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public GoModules goModules() {
          return new GoModules();
        }

        /**
         * The "goModules" collection of methods.
         */
        public class GoModules {

          /**
           * Directly uploads a Go module. The returned Operation will complete once the Go module is
           * uploaded. Package, Version, and File resources are created based on the uploaded Go module.
           *
           * Create a request for the method "goModules.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The resource name of the repository where the Go module will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a Go module. The returned Operation will complete once the Go module is
           * uploaded. Package, Version, and File resources are created based on the uploaded Go module.
           *
           * Create a request for the method "goModules.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The resource name of the repository where the Go module will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadGoModuleMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/goModules:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a Go module. The returned Operation will complete once the Go module is
             * uploaded. Package, Version, and File resources are created based on the uploaded Go module.
             *
             * Create a request for the method "goModules.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The resource name of the repository where the Go module will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGoModuleMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a Go module. The returned Operation will complete once the Go module is
             * uploaded. Package, Version, and File resources are created based on the uploaded Go module.
             *
             * Create a request for the method "goModules.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The resource name of the repository where the Go module will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoModuleRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGoModuleMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The resource name of the repository where the Go module will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The resource name of the repository where the Go module will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The resource name of the repository where the Go module will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the GoogetArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.GoogetArtifacts.List request = artifactregistry.googetArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public GoogetArtifacts googetArtifacts() {
          return new GoogetArtifacts();
        }

        /**
         * The "googetArtifacts" collection of methods.
         */
        public class GoogetArtifacts {

          /**
           * Imports GooGet artifacts. The returned Operation will complete once the resources are imported.
           * Package, Version, and File resources are created based on the imported artifacts. Imported
           * artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "googetArtifacts.import".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
           * remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be imported.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportGoogetArtifactsRequest}
           * @return the request
           */
          public ArtifactRegistryImport artifactregistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportGoogetArtifactsRequest content) throws java.io.IOException {
            ArtifactRegistryImport result = new ArtifactRegistryImport(parent, content);
            initialize(result);
            return result;
          }

          public class ArtifactRegistryImport extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/googetArtifacts:import";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Imports GooGet artifacts. The returned Operation will complete once the resources are imported.
             * Package, Version, and File resources are created based on the imported artifacts. Imported
             * artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "googetArtifacts.import".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
             * remote operation. <p> {@link ArtifactRegistryImport#initialize(com.google.api.client.googleapis
             * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
             * after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be imported.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportGoogetArtifactsRequest}
             * @since 1.13
             */
            protected ArtifactRegistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportGoogetArtifactsRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public ArtifactRegistryImport set$Xgafv(java.lang.String $Xgafv) {
              return (ArtifactRegistryImport) super.set$Xgafv($Xgafv);
            }

            @Override
            public ArtifactRegistryImport setAccessToken(java.lang.String accessToken) {
              return (ArtifactRegistryImport) super.setAccessToken(accessToken);
            }

            @Override
            public ArtifactRegistryImport setAlt(java.lang.String alt) {
              return (ArtifactRegistryImport) super.setAlt(alt);
            }

            @Override
            public ArtifactRegistryImport setCallback(java.lang.String callback) {
              return (ArtifactRegistryImport) super.setCallback(callback);
            }

            @Override
            public ArtifactRegistryImport setFields(java.lang.String fields) {
              return (ArtifactRegistryImport) super.setFields(fields);
            }

            @Override
            public ArtifactRegistryImport setKey(java.lang.String key) {
              return (ArtifactRegistryImport) super.setKey(key);
            }

            @Override
            public ArtifactRegistryImport setOauthToken(java.lang.String oauthToken) {
              return (ArtifactRegistryImport) super.setOauthToken(oauthToken);
            }

            @Override
            public ArtifactRegistryImport setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ArtifactRegistryImport) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ArtifactRegistryImport setQuotaUser(java.lang.String quotaUser) {
              return (ArtifactRegistryImport) super.setQuotaUser(quotaUser);
            }

            @Override
            public ArtifactRegistryImport setUploadType(java.lang.String uploadType) {
              return (ArtifactRegistryImport) super.setUploadType(uploadType);
            }

            @Override
            public ArtifactRegistryImport setUploadProtocol(java.lang.String uploadProtocol) {
              return (ArtifactRegistryImport) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be imported. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be imported.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be imported. */
            public ArtifactRegistryImport setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public ArtifactRegistryImport set(String parameterName, Object value) {
              return (ArtifactRegistryImport) super.set(parameterName, value);
            }
          }
          /**
           * Directly uploads a GooGet artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "googetArtifacts.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a GooGet artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "googetArtifacts.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/googetArtifacts:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a GooGet artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "googetArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a GooGet artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "googetArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadGoogetArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the KfpArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.KfpArtifacts.List request = artifactregistry.kfpArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public KfpArtifacts kfpArtifacts() {
          return new KfpArtifacts();
        }

        /**
         * The "kfpArtifacts" collection of methods.
         */
        public class KfpArtifacts {

          /**
           * Directly uploads a KFP artifact. The returned Operation will complete once the resource is
           * uploaded. Package, Version, and File resources will be created based on the uploaded artifact.
           * Uploaded artifacts that conflict with existing resources will be overwritten.
           *
           * Create a request for the method "kfpArtifacts.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The resource name of the repository where the KFP artifact will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a KFP artifact. The returned Operation will complete once the resource is
           * uploaded. Package, Version, and File resources will be created based on the uploaded artifact.
           * Uploaded artifacts that conflict with existing resources will be overwritten.
           *
           * Create a request for the method "kfpArtifacts.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The resource name of the repository where the KFP artifact will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/kfpArtifacts:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a KFP artifact. The returned Operation will complete once the resource is
             * uploaded. Package, Version, and File resources will be created based on the uploaded artifact.
             * Uploaded artifacts that conflict with existing resources will be overwritten.
             *
             * Create a request for the method "kfpArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The resource name of the repository where the KFP artifact will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a KFP artifact. The returned Operation will complete once the resource is
             * uploaded. Package, Version, and File resources will be created based on the uploaded artifact.
             * Uploaded artifacts that conflict with existing resources will be overwritten.
             *
             * Create a request for the method "kfpArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The resource name of the repository where the KFP artifact will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadKfpArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The resource name of the repository where the KFP artifact will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The resource name of the repository where the KFP artifact will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The resource name of the repository where the KFP artifact will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the MavenArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.MavenArtifacts.List request = artifactregistry.mavenArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public MavenArtifacts mavenArtifacts() {
          return new MavenArtifacts();
        }

        /**
         * The "mavenArtifacts" collection of methods.
         */
        public class MavenArtifacts {

          /**
           * Gets a maven artifact.
           *
           * Create a request for the method "mavenArtifacts.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the maven artifact.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.MavenArtifact> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$");

            /**
             * Gets a maven artifact.
             *
             * Create a request for the method "mavenArtifacts.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the maven artifact.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.MavenArtifact.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the maven artifact. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the maven artifact.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the maven artifact. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists maven artifacts.
           *
           * Create a request for the method "mavenArtifacts.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose maven artifacts will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListMavenArtifactsResponse> {

            private static final String REST_PATH = "v1/{+parent}/mavenArtifacts";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists maven artifacts.
             *
             * Create a request for the method "mavenArtifacts.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose maven artifacts will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListMavenArtifactsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose maven artifacts will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose maven artifacts will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose maven artifacts will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of artifacts to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the NpmPackages collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.NpmPackages.List request = artifactregistry.npmPackages().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public NpmPackages npmPackages() {
          return new NpmPackages();
        }

        /**
         * The "npmPackages" collection of methods.
         */
        public class NpmPackages {

          /**
           * Gets a npm package.
           *
           * Create a request for the method "npmPackages.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the npm package.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.NpmPackage> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$");

            /**
             * Gets a npm package.
             *
             * Create a request for the method "npmPackages.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the npm package.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.NpmPackage.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the npm package. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the npm package.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the npm package. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists npm packages.
           *
           * Create a request for the method "npmPackages.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose npm packages will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListNpmPackagesResponse> {

            private static final String REST_PATH = "v1/{+parent}/npmPackages";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists npm packages.
             *
             * Create a request for the method "npmPackages.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose npm packages will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListNpmPackagesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose npm packages will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose npm packages will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose npm packages will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of artifacts to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Packages collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.Packages.List request = artifactregistry.packages().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Packages packages() {
          return new Packages();
        }

        /**
         * The "packages" collection of methods.
         */
        public class Packages {

          /**
           * Deletes a package and all of its versions and tags. The returned operation will complete once the
           * package has been deleted.
           *
           * Create a request for the method "packages.delete".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the package to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

            /**
             * Deletes a package and all of its versions and tags. The returned operation will complete once
             * the package has been deleted.
             *
             * Create a request for the method "packages.delete".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the package to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the package to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the package to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the package to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a package.
           *
           * Create a request for the method "packages.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the package to retrieve.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

            /**
             * Gets a package.
             *
             * Create a request for the method "packages.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the package to retrieve.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the package to retrieve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the package to retrieve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the package to retrieve. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists packages.
           *
           * Create a request for the method "packages.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose packages will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListPackagesResponse> {

            private static final String REST_PATH = "v1/{+parent}/packages";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists packages.
             *
             * Create a request for the method "packages.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose packages will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListPackagesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose packages will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose packages will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose packages will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. An expression for filtering the results of the request. Filter rules are
             * case insensitive. The fields eligible for filtering are: * `name` * `annotations`
             * Examples of using a filter: To filter the results of your request to packages with
             * the name `my-package` in project `my-project` in the `us-central` region, in
             * repository `my-repo`, append the following filter expression to your request: *
             * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
             * package"` You can also use wildcards to match any number of characters before or
             * after the value: * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/packages/my-*"` * `name="projects/my-project/locations/us-
             * central1/repositories/my-repo/packagespackage"` * `name="projects/my-
             * project/locations/us-central1/repositories/my-repo/packagespack*"` To filter the
             * results of your request to packages with the annotation key-value pair
             * [`external_link`: `external_link_value`], append the following filter expression to
             * your request": * `"annotations.external_link:external_link_value"` To filter the
             * results just for a specific annotation key `external_link`, append the following
             * filter expression to your request: * `"annotations.external_link"` If the annotation
             * key or value contains special characters, you can escape them by surrounding the
             * value with backticks. For example, to filter the results of your request to packages
             * with the annotation key-value pair [`external.link`:`https://example.com/my-
             * package`], append the following filter expression to your request: * ``
             * "annotations.`external.link`:`https://example.com/my-package`" `` You can also filter
             * with annotations with a wildcard to match any number of characters before or after
             * the value: * `` "annotations.*_link:`*example.com*`" ``
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. An expression for filtering the results of the request. Filter rules are case
           insensitive. The fields eligible for filtering are: * `name` * `annotations` Examples of using a
           filter: To filter the results of your request to packages with the name `my-package` in project
           `my-project` in the `us-central` region, in repository `my-repo`, append the following filter
           expression to your request: * `name="projects/my-project/locations/us-central1/repositories/my-
           repo/packages/my-package"` You can also use wildcards to match any number of characters before or
           after the value: * `name="projects/my-project/locations/us-central1/repositories/my-
           repo/packages/my-*"` * `name="projects/my-project/locations/us-central1/repositories/my-
           repo/packagespackage"` * `name="projects/my-project/locations/us-central1/repositories/my-
           repo/packagespack*"` To filter the results of your request to packages with the annotation key-
           value pair [`external_link`: `external_link_value`], append the following filter expression to your
           request": * `"annotations.external_link:external_link_value"` To filter the results just for a
           specific annotation key `external_link`, append the following filter expression to your request: *
           `"annotations.external_link"` If the annotation key or value contains special characters, you can
           escape them by surrounding the value with backticks. For example, to filter the results of your
           request to packages with the annotation key-value pair [`external.link`:`https://example.com/my-
           package`], append the following filter expression to your request: * ``
           "annotations.`external.link`:`https://example.com/my-package`" `` You can also filter with
           annotations with a wildcard to match any number of characters before or after the value: * ``
           "annotations.*_link:`*example.com*`" ``
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. An expression for filtering the results of the request. Filter rules are
             * case insensitive. The fields eligible for filtering are: * `name` * `annotations`
             * Examples of using a filter: To filter the results of your request to packages with
             * the name `my-package` in project `my-project` in the `us-central` region, in
             * repository `my-repo`, append the following filter expression to your request: *
             * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
             * package"` You can also use wildcards to match any number of characters before or
             * after the value: * `name="projects/my-project/locations/us-central1/repositories/my-
             * repo/packages/my-*"` * `name="projects/my-project/locations/us-
             * central1/repositories/my-repo/packagespackage"` * `name="projects/my-
             * project/locations/us-central1/repositories/my-repo/packagespack*"` To filter the
             * results of your request to packages with the annotation key-value pair
             * [`external_link`: `external_link_value`], append the following filter expression to
             * your request": * `"annotations.external_link:external_link_value"` To filter the
             * results just for a specific annotation key `external_link`, append the following
             * filter expression to your request: * `"annotations.external_link"` If the annotation
             * key or value contains special characters, you can escape them by surrounding the
             * value with backticks. For example, to filter the results of your request to packages
             * with the annotation key-value pair [`external.link`:`https://example.com/my-
             * package`], append the following filter expression to your request: * ``
             * "annotations.`external.link`:`https://example.com/my-package`" `` You can also filter
             * with annotations with a wildcard to match any number of characters before or after
             * the value: * `` "annotations.*_link:`*example.com*`" ``
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. The field to order the results by. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. The field to order the results by.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** Optional. The field to order the results by. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /** The maximum number of packages to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of packages to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of packages to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a package.
           *
           * Create a request for the method "packages.patch".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the package, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the
           *        slashes are escaped.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

            /**
             * Updates a package.
             *
             * Create a request for the method "packages.patch".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the package, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the
           *        slashes are escaped.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage content) {
              super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.ArtifactRegistryPackage.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the package, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes,
             * the slashes are escaped.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the package, for example: `projects/p1/locations/us-
           central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the slashes
           are escaped.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the package, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes,
             * the slashes are escaped.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * The update mask applies to the resource. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** The update mask applies to the resource. For the `FieldMask` definition, see
           https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * The update mask applies to the resource. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Tags collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
           *   {@code ArtifactRegistry.Tags.List request = artifactregistry.tags().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Tags tags() {
            return new Tags();
          }

          /**
           * The "tags" collection of methods.
           */
          public class Tags {

            /**
             * Creates a tag.
             *
             * Create a request for the method "tags.create".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent The name of the parent resource where the tag will be created.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.Tag}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Tag content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Tag> {

              private static final String REST_PATH = "v1/{+parent}/tags";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

              /**
               * Creates a tag.
               *
               * Create a request for the method "tags.create".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
               * <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent The name of the parent resource where the tag will be created.
               * @param content the {@link com.google.api.services.artifactregistry.v1.model.Tag}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.Tag content) {
                super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Tag.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the parent resource where the tag will be created. */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** The name of the parent resource where the tag will be created.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /** The name of the parent resource where the tag will be created. */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /** The tag id to use for this repository. */
              @com.google.api.client.util.Key
              private java.lang.String tagId;

              /** The tag id to use for this repository.
               */
              public java.lang.String getTagId() {
                return tagId;
              }

              /** The tag id to use for this repository. */
              public Create setTagId(java.lang.String tagId) {
                this.tagId = tagId;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes a tag.
             *
             * Create a request for the method "tags.delete".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name The name of the tag to delete.
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Empty> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");

              /**
               * Deletes a tag.
               *
               * Create a request for the method "tags.delete".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
               * <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the tag to delete.
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Empty.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the tag to delete. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the tag to delete.
               */
              public java.lang.String getName() {
                return name;
              }

              /** The name of the tag to delete. */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets a tag.
             *
             * Create a request for the method "tags.get".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name The name of the tag to retrieve.
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Tag> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");

              /**
               * Gets a tag.
               *
               * Create a request for the method "tags.get".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
               * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the tag to retrieve.
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Tag.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the tag to retrieve. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the tag to retrieve.
               */
              public java.lang.String getName() {
                return name;
              }

              /** The name of the tag to retrieve. */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists tags.
             *
             * Create a request for the method "tags.list".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent The name of the parent package whose tags will be listed. For example: `projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1`.
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListTagsResponse> {

              private static final String REST_PATH = "v1/{+parent}/tags";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

              /**
               * Lists tags.
               *
               * Create a request for the method "tags.list".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent The name of the parent package whose tags will be listed. For example: `projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1`.
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListTagsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * The name of the parent package whose tags will be listed. For example:
               * `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** The name of the parent package whose tags will be listed. For example: `projects/p1/locations/us-
             central1/repositories/repo1/packages/pkg1`.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * The name of the parent package whose tags will be listed. For example:
               * `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * An expression for filtering the results of the request. Filter rules are case
               * insensitive. The fields eligible for filtering are: * `name` * `version` Examples
               * of using a filter: To filter the results of your request to tags with the name `my-
               * tag` in package `my-package` in repository `my-repo` in project "`y-project` in the
               * us-central region, append the following filter expression to your request: *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/tags/my-tag"` You can also use wildcards to match any number of characters
               * before or after the value: * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/tags/my*"` * `name="projects/my-
               * project/locations/us-central1/repositories/my-repo/packages/my-package/tagstag"` *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/tagstag*"` To filter the results of your request to tags applied to the
               * version `1.0` in package `my-package`, append the following filter expression to
               * your request: * `version="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versions/1.0"`
               */
              @com.google.api.client.util.Key
              private java.lang.String filter;

              /** An expression for filtering the results of the request. Filter rules are case insensitive. The
             fields eligible for filtering are: * `name` * `version` Examples of using a filter: To filter the
             results of your request to tags with the name `my-tag` in package `my-package` in repository `my-
             repo` in project "`y-project` in the us-central region, append the following filter expression to
             your request: * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
             package/tags/my-tag"` You can also use wildcards to match any number of characters before or after
             the value: * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
             package/tags/my*"` * `name="projects/my-project/locations/us-central1/repositories/my-
             repo/packages/my-package/tagstag"` * `name="projects/my-project/locations/us-
             central1/repositories/my-repo/packages/my-package/tagstag*"` To filter the results of your request
             to tags applied to the version `1.0` in package `my-package`, append the following filter
             expression to your request: * `version="projects/my-project/locations/us-central1/repositories/my-
             repo/packages/my-package/versions/1.0"`
               */
              public java.lang.String getFilter() {
                return filter;
              }

              /**
               * An expression for filtering the results of the request. Filter rules are case
               * insensitive. The fields eligible for filtering are: * `name` * `version` Examples
               * of using a filter: To filter the results of your request to tags with the name `my-
               * tag` in package `my-package` in repository `my-repo` in project "`y-project` in the
               * us-central region, append the following filter expression to your request: *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/tags/my-tag"` You can also use wildcards to match any number of characters
               * before or after the value: * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/tags/my*"` * `name="projects/my-
               * project/locations/us-central1/repositories/my-repo/packages/my-package/tagstag"` *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/tagstag*"` To filter the results of your request to tags applied to the
               * version `1.0` in package `my-package`, append the following filter expression to
               * your request: * `version="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versions/1.0"`
               */
              public List setFilter(java.lang.String filter) {
                this.filter = filter;
                return this;
              }

              /** The maximum number of tags to return. Maximum page size is 1,000. */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of tags to return. Maximum page size is 1,000.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /** The maximum number of tags to return. Maximum page size is 1,000. */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /** The next_page_token value returned from a previous list request, if any. */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** The next_page_token value returned from a previous list request, if any.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /** The next_page_token value returned from a previous list request, if any. */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates a tag.
             *
             * Create a request for the method "tags.patch".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name The name of the tag, for example: "projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains
             *        slashes, the slashes are escaped. The tag part can only have characters in
             *        [a-zA-Z0-9\-._~:@], anything else must be URL encoded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.Tag}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Tag content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Tag> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");

              /**
               * Updates a tag.
               *
               * Create a request for the method "tags.patch".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
               * <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the tag, for example: "projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains
             *        slashes, the slashes are escaped. The tag part can only have characters in
             *        [a-zA-Z0-9\-._~:@], anything else must be URL encoded.
               * @param content the {@link com.google.api.services.artifactregistry.v1.model.Tag}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Tag content) {
                super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Tag.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * The name of the tag, for example: "projects/p1/locations/us-
               * central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains
               * slashes, the slashes are escaped. The tag part can only have characters in
               * [a-zA-Z0-9\-._~:@], anything else must be URL encoded.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the tag, for example: "projects/p1/locations/us-
             central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains slashes, the
             slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\-._~:@], anything else
             must be URL encoded.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * The name of the tag, for example: "projects/p1/locations/us-
               * central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains
               * slashes, the slashes are escaped. The tag part can only have characters in
               * [a-zA-Z0-9\-._~:@], anything else must be URL encoded.
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * The update mask applies to the resource. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask
               */
              @com.google.api.client.util.Key
              private String updateMask;

              /** The update mask applies to the resource. For the `FieldMask` definition, see
             https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /**
               * The update mask applies to the resource. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask
               */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }

          }
          /**
           * An accessor for creating requests from the Versions collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
           *   {@code ArtifactRegistry.Versions.List request = artifactregistry.versions().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Versions versions() {
            return new Versions();
          }

          /**
           * The "versions" collection of methods.
           */
          public class Versions {

            /**
             * Deletes multiple versions across a repository. The returned operation will complete once the
             * versions have been deleted.
             *
             * Create a request for the method "versions.batchDelete".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link BatchDelete#execute()} method to invoke the remote
             * operation.
             *
             * @param parent The name of the repository holding all requested versions.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.BatchDeleteVersionsRequest}
             * @return the request
             */
            public BatchDelete batchDelete(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.BatchDeleteVersionsRequest content) throws java.io.IOException {
              BatchDelete result = new BatchDelete(parent, content);
              initialize(result);
              return result;
            }

            public class BatchDelete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/versions:batchDelete";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

              /**
               * Deletes multiple versions across a repository. The returned operation will complete once the
               * versions have been deleted.
               *
               * Create a request for the method "versions.batchDelete".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link BatchDelete#execute()} method to invoke the remote
               * operation. <p> {@link
               * BatchDelete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent The name of the repository holding all requested versions.
               * @param content the {@link com.google.api.services.artifactregistry.v1.model.BatchDeleteVersionsRequest}
               * @since 1.13
               */
              protected BatchDelete(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.BatchDeleteVersionsRequest content) {
                super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
              }

              @Override
              public BatchDelete set$Xgafv(java.lang.String $Xgafv) {
                return (BatchDelete) super.set$Xgafv($Xgafv);
              }

              @Override
              public BatchDelete setAccessToken(java.lang.String accessToken) {
                return (BatchDelete) super.setAccessToken(accessToken);
              }

              @Override
              public BatchDelete setAlt(java.lang.String alt) {
                return (BatchDelete) super.setAlt(alt);
              }

              @Override
              public BatchDelete setCallback(java.lang.String callback) {
                return (BatchDelete) super.setCallback(callback);
              }

              @Override
              public BatchDelete setFields(java.lang.String fields) {
                return (BatchDelete) super.setFields(fields);
              }

              @Override
              public BatchDelete setKey(java.lang.String key) {
                return (BatchDelete) super.setKey(key);
              }

              @Override
              public BatchDelete setOauthToken(java.lang.String oauthToken) {
                return (BatchDelete) super.setOauthToken(oauthToken);
              }

              @Override
              public BatchDelete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (BatchDelete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public BatchDelete setQuotaUser(java.lang.String quotaUser) {
                return (BatchDelete) super.setQuotaUser(quotaUser);
              }

              @Override
              public BatchDelete setUploadType(java.lang.String uploadType) {
                return (BatchDelete) super.setUploadType(uploadType);
              }

              @Override
              public BatchDelete setUploadProtocol(java.lang.String uploadProtocol) {
                return (BatchDelete) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the repository holding all requested versions. */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** The name of the repository holding all requested versions.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /** The name of the repository holding all requested versions. */
              public BatchDelete setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public BatchDelete set(String parameterName, Object value) {
                return (BatchDelete) super.set(parameterName, value);
              }
            }
            /**
             * Deletes a version and all of its content. The returned operation will complete once the version
             * has been deleted.
             *
             * Create a request for the method "versions.delete".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name The name of the version to delete.
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");

              /**
               * Deletes a version and all of its content. The returned operation will complete once the version
               * has been deleted.
               *
               * Create a request for the method "versions.delete".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
               * <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the version to delete.
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Operation.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the version to delete. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the version to delete.
               */
              public java.lang.String getName() {
                return name;
              }

              /** The name of the version to delete. */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * By default, a version that is tagged may not be deleted. If force=true, the version
               * and any tags pointing to the version are deleted.
               */
              @com.google.api.client.util.Key
              private java.lang.Boolean force;

              /** By default, a version that is tagged may not be deleted. If force=true, the version and any tags
             pointing to the version are deleted.
               */
              public java.lang.Boolean getForce() {
                return force;
              }

              /**
               * By default, a version that is tagged may not be deleted. If force=true, the version
               * and any tags pointing to the version are deleted.
               */
              public Delete setForce(java.lang.Boolean force) {
                this.force = force;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets a version
             *
             * Create a request for the method "versions.get".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name The name of the version to retrieve.
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Version> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");

              /**
               * Gets a version
               *
               * Create a request for the method "versions.get".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
               * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the version to retrieve.
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Version.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the version to retrieve. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the version to retrieve.
               */
              public java.lang.String getName() {
                return name;
              }

              /** The name of the version to retrieve. */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /** The view that should be returned in the response. */
              @com.google.api.client.util.Key
              private java.lang.String view;

              /** The view that should be returned in the response.
               */
              public java.lang.String getView() {
                return view;
              }

              /** The view that should be returned in the response. */
              public Get setView(java.lang.String view) {
                this.view = view;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists versions.
             *
             * Create a request for the method "versions.list".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent The name of the parent resource whose versions will be listed.
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListVersionsResponse> {

              private static final String REST_PATH = "v1/{+parent}/versions";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");

              /**
               * Lists versions.
               *
               * Create a request for the method "versions.list".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent The name of the parent resource whose versions will be listed.
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListVersionsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /** The name of the parent resource whose versions will be listed. */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** The name of the parent resource whose versions will be listed.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /** The name of the parent resource whose versions will be listed. */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Optional. An expression for filtering the results of the request. Filter rules are
               * case insensitive. The fields eligible for filtering are: * `name` * `annotations`
               * Examples of using a filter: To filter the results of your request to versions with
               * the name `my-version` in project `my-project` in the `us-central` region, in
               * repository `my-repo`, append the following filter expression to your request: *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/versions/my-version"` You can also use wildcards to match any number of
               * characters before or after the value: * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versionsversion"` *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/versions/my*"` * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versionsversion*"` To filter the
               * results of your request to versions with the annotation key-value pair
               * [`external_link`: `external_link_value`], append the following filter expression to
               * your request: * `"annotations.external_link:external_link_value"` To filter just
               * for a specific annotation key `external_link`, append the following filter
               * expression to your request: * `"annotations.external_link"` If the annotation key
               * or value contains special characters, you can escape them by surrounding the value
               * with backticks. For example, to filter the results of your request to versions with
               * the annotation key-value pair [`external.link`:`https://example.com/my-version`],
               * append the following filter expression to your request: * ``
               * "annotations.`external.link`:`https://example.com/my-version`" `` You can also
               * filter with annotations with a wildcard to match any number of characters before or
               * after the value: * `` "annotations.*_link:`*example.com*`" ``
               */
              @com.google.api.client.util.Key
              private java.lang.String filter;

              /** Optional. An expression for filtering the results of the request. Filter rules are case
             insensitive. The fields eligible for filtering are: * `name` * `annotations` Examples of using a
             filter: To filter the results of your request to versions with the name `my-version` in project
             `my-project` in the `us-central` region, in repository `my-repo`, append the following filter
             expression to your request: * `name="projects/my-project/locations/us-central1/repositories/my-
             repo/packages/my-package/versions/my-version"` You can also use wildcards to match any number of
             characters before or after the value: * `name="projects/my-project/locations/us-
             central1/repositories/my-repo/packages/my-package/versionsversion"` * `name="projects/my-
             project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my*"` *
             `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
             package/versionsversion*"` To filter the results of your request to versions with the annotation
             key-value pair [`external_link`: `external_link_value`], append the following filter expression to
             your request: * `"annotations.external_link:external_link_value"` To filter just for a specific
             annotation key `external_link`, append the following filter expression to your request: *
             `"annotations.external_link"` If the annotation key or value contains special characters, you can
             escape them by surrounding the value with backticks. For example, to filter the results of your
             request to versions with the annotation key-value pair [`external.link`:`https://example.com/my-
             version`], append the following filter expression to your request: * ``
             "annotations.`external.link`:`https://example.com/my-version`" `` You can also filter with
             annotations with a wildcard to match any number of characters before or after the value: * ``
             "annotations.*_link:`*example.com*`" ``
               */
              public java.lang.String getFilter() {
                return filter;
              }

              /**
               * Optional. An expression for filtering the results of the request. Filter rules are
               * case insensitive. The fields eligible for filtering are: * `name` * `annotations`
               * Examples of using a filter: To filter the results of your request to versions with
               * the name `my-version` in project `my-project` in the `us-central` region, in
               * repository `my-repo`, append the following filter expression to your request: *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/versions/my-version"` You can also use wildcards to match any number of
               * characters before or after the value: * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versionsversion"` *
               * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-
               * package/versions/my*"` * `name="projects/my-project/locations/us-
               * central1/repositories/my-repo/packages/my-package/versionsversion*"` To filter the
               * results of your request to versions with the annotation key-value pair
               * [`external_link`: `external_link_value`], append the following filter expression to
               * your request: * `"annotations.external_link:external_link_value"` To filter just
               * for a specific annotation key `external_link`, append the following filter
               * expression to your request: * `"annotations.external_link"` If the annotation key
               * or value contains special characters, you can escape them by surrounding the value
               * with backticks. For example, to filter the results of your request to versions with
               * the annotation key-value pair [`external.link`:`https://example.com/my-version`],
               * append the following filter expression to your request: * ``
               * "annotations.`external.link`:`https://example.com/my-version`" `` You can also
               * filter with annotations with a wildcard to match any number of characters before or
               * after the value: * `` "annotations.*_link:`*example.com*`" ``
               */
              public List setFilter(java.lang.String filter) {
                this.filter = filter;
                return this;
              }

              /** Optional. The field to order the results by. */
              @com.google.api.client.util.Key
              private java.lang.String orderBy;

              /** Optional. The field to order the results by.
               */
              public java.lang.String getOrderBy() {
                return orderBy;
              }

              /** Optional. The field to order the results by. */
              public List setOrderBy(java.lang.String orderBy) {
                this.orderBy = orderBy;
                return this;
              }

              /** The maximum number of versions to return. Maximum page size is 1,000. */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of versions to return. Maximum page size is 1,000.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /** The maximum number of versions to return. Maximum page size is 1,000. */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /** The next_page_token value returned from a previous list request, if any. */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** The next_page_token value returned from a previous list request, if any.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /** The next_page_token value returned from a previous list request, if any. */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              /** The view that should be returned in the response. */
              @com.google.api.client.util.Key
              private java.lang.String view;

              /** The view that should be returned in the response.
               */
              public java.lang.String getView() {
                return view;
              }

              /** The view that should be returned in the response. */
              public List setView(java.lang.String view) {
                this.view = view;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates a version.
             *
             * Create a request for the method "versions.patch".
             *
             * This request holds the parameters needed by the artifactregistry server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name The name of the version, for example: `projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1/versions/art1`. If the package or version ID
             *        parts contain slashes, the slashes are escaped.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.Version}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Version content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Version> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");

              /**
               * Updates a version.
               *
               * Create a request for the method "versions.patch".
               *
               * This request holds the parameters needed by the the artifactregistry server.  After setting any
               * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
               * <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name The name of the version, for example: `projects/p1/locations/us-
             *        central1/repositories/repo1/packages/pkg1/versions/art1`. If the package or version ID
             *        parts contain slashes, the slashes are escaped.
               * @param content the {@link com.google.api.services.artifactregistry.v1.model.Version}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.Version content) {
                super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Version.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * The name of the version, for example: `projects/p1/locations/us-
               * central1/repositories/repo1/packages/pkg1/versions/art1`. If the package or version
               * ID parts contain slashes, the slashes are escaped.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** The name of the version, for example: `projects/p1/locations/us-
             central1/repositories/repo1/packages/pkg1/versions/art1`. If the package or version ID parts
             contain slashes, the slashes are escaped.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * The name of the version, for example: `projects/p1/locations/us-
               * central1/repositories/repo1/packages/pkg1/versions/art1`. If the package or version
               * ID parts contain slashes, the slashes are escaped.
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * The update mask applies to the resource. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask
               */
              @com.google.api.client.util.Key
              private String updateMask;

              /** The update mask applies to the resource. For the `FieldMask` definition, see
             https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /**
               * The update mask applies to the resource. For the `FieldMask` definition, see
               * https://developers.google.com/protocol-
               * buffers/docs/reference/google.protobuf#fieldmask
               */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }

          }
        }
        /**
         * An accessor for creating requests from the PythonPackages collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.PythonPackages.List request = artifactregistry.pythonPackages().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public PythonPackages pythonPackages() {
          return new PythonPackages();
        }

        /**
         * The "pythonPackages" collection of methods.
         */
        public class PythonPackages {

          /**
           * Gets a python package.
           *
           * Create a request for the method "pythonPackages.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the python package.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.PythonPackage> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$");

            /**
             * Gets a python package.
             *
             * Create a request for the method "pythonPackages.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the python package.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.PythonPackage.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the python package. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the python package.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the python package. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists python packages.
           *
           * Create a request for the method "pythonPackages.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource whose python packages will be listed.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListPythonPackagesResponse> {

            private static final String REST_PATH = "v1/{+parent}/pythonPackages";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists python packages.
             *
             * Create a request for the method "pythonPackages.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource whose python packages will be listed.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListPythonPackagesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource whose python packages will be listed. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource whose python packages will be listed.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource whose python packages will be listed. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of artifacts to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of artifacts to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Rules collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.Rules.List request = artifactregistry.rules().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Rules rules() {
          return new Rules();
        }

        /**
         * The "rules" collection of methods.
         */
        public class Rules {

          /**
           * Creates a rule.
           *
           * Create a request for the method "rules.create".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent resource where the rule will be created.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule> {

            private static final String REST_PATH = "v1/{+parent}/rules";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Creates a rule.
             *
             * Create a request for the method "rules.create".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent resource where the rule will be created.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the parent resource where the rule will be created. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent resource where the rule will be created.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. The name of the parent resource where the rule will be created. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The rule id to use for this repository. */
            @com.google.api.client.util.Key
            private java.lang.String ruleId;

            /** The rule id to use for this repository.
             */
            public java.lang.String getRuleId() {
              return ruleId;
            }

            /** The rule id to use for this repository. */
            public Create setRuleId(java.lang.String ruleId) {
              this.ruleId = ruleId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a rule.
           *
           * Create a request for the method "rules.delete".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the rule to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");

            /**
             * Deletes a rule.
             *
             * Create a request for the method "rules.delete".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the rule to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(ArtifactRegistry.this, "DELETE", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the rule to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the rule to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the rule to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a rule.
           *
           * Create a request for the method "rules.get".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the rule to retrieve.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");

            /**
             * Gets a rule.
             *
             * Create a request for the method "rules.get".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the rule to retrieve.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the rule to retrieve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the rule to retrieve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the rule to retrieve. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists rules.
           *
           * Create a request for the method "rules.list".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The name of the parent repository whose rules will be listed. For example:
           *        `projects/p1/locations/us-central1/repositories/repo1`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.ListRulesResponse> {

            private static final String REST_PATH = "v1/{+parent}/rules";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists rules.
             *
             * Create a request for the method "rules.list".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The name of the parent repository whose rules will be listed. For example:
           *        `projects/p1/locations/us-central1/repositories/repo1`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(ArtifactRegistry.this, "GET", REST_PATH, null, com.google.api.services.artifactregistry.v1.model.ListRulesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the parent repository whose rules will be listed. For example:
             * `projects/p1/locations/us-central1/repositories/repo1`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The name of the parent repository whose rules will be listed. For example:
           `projects/p1/locations/us-central1/repositories/repo1`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The name of the parent repository whose rules will be listed. For example:
             * `projects/p1/locations/us-central1/repositories/repo1`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The maximum number of rules to return. Maximum page size is 1,000. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of rules to return. Maximum page size is 1,000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The maximum number of rules to return. Maximum page size is 1,000. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The next_page_token value returned from a previous list request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The next_page_token value returned from a previous list request, if any. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a rule.
           *
           * Create a request for the method "rules.patch".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the rule, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/rules/rule1`.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");

            /**
             * Updates a rule.
             *
             * Create a request for the method "rules.patch".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the rule, for example: `projects/p1/locations/us-
           *        central1/repositories/repo1/rules/rule1`.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule content) {
              super(ArtifactRegistry.this, "PATCH", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.GoogleDevtoolsArtifactregistryV1Rule.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the rule, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/rules/rule1`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the rule, for example: `projects/p1/locations/us-
           central1/repositories/repo1/rules/rule1`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the rule, for example: `projects/p1/locations/us-
             * central1/repositories/repo1/rules/rule1`.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/rules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * The update mask applies to the resource. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** The update mask applies to the resource. For the `FieldMask` definition, see
           https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * The update mask applies to the resource. For the `FieldMask` definition, see
             * https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the YumArtifacts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code ArtifactRegistry artifactregistry = new ArtifactRegistry(...);}
         *   {@code ArtifactRegistry.YumArtifacts.List request = artifactregistry.yumArtifacts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public YumArtifacts yumArtifacts() {
          return new YumArtifacts();
        }

        /**
         * The "yumArtifacts" collection of methods.
         */
        public class YumArtifacts {

          /**
           * Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are
           * imported. Package, Version, and File resources are created based on the imported artifacts.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "yumArtifacts.import".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
           * remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be imported.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportYumArtifactsRequest}
           * @return the request
           */
          public ArtifactRegistryImport artifactregistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportYumArtifactsRequest content) throws java.io.IOException {
            ArtifactRegistryImport result = new ArtifactRegistryImport(parent, content);
            initialize(result);
            return result;
          }

          public class ArtifactRegistryImport extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/yumArtifacts:import";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are
             * imported. Package, Version, and File resources are created based on the imported artifacts.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "yumArtifacts.import".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link ArtifactRegistryImport#execute()} method to invoke the
             * remote operation. <p> {@link ArtifactRegistryImport#initialize(com.google.api.client.googleapis
             * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
             * after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be imported.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.ImportYumArtifactsRequest}
             * @since 1.13
             */
            protected ArtifactRegistryImport(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.ImportYumArtifactsRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public ArtifactRegistryImport set$Xgafv(java.lang.String $Xgafv) {
              return (ArtifactRegistryImport) super.set$Xgafv($Xgafv);
            }

            @Override
            public ArtifactRegistryImport setAccessToken(java.lang.String accessToken) {
              return (ArtifactRegistryImport) super.setAccessToken(accessToken);
            }

            @Override
            public ArtifactRegistryImport setAlt(java.lang.String alt) {
              return (ArtifactRegistryImport) super.setAlt(alt);
            }

            @Override
            public ArtifactRegistryImport setCallback(java.lang.String callback) {
              return (ArtifactRegistryImport) super.setCallback(callback);
            }

            @Override
            public ArtifactRegistryImport setFields(java.lang.String fields) {
              return (ArtifactRegistryImport) super.setFields(fields);
            }

            @Override
            public ArtifactRegistryImport setKey(java.lang.String key) {
              return (ArtifactRegistryImport) super.setKey(key);
            }

            @Override
            public ArtifactRegistryImport setOauthToken(java.lang.String oauthToken) {
              return (ArtifactRegistryImport) super.setOauthToken(oauthToken);
            }

            @Override
            public ArtifactRegistryImport setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ArtifactRegistryImport) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ArtifactRegistryImport setQuotaUser(java.lang.String quotaUser) {
              return (ArtifactRegistryImport) super.setQuotaUser(quotaUser);
            }

            @Override
            public ArtifactRegistryImport setUploadType(java.lang.String uploadType) {
              return (ArtifactRegistryImport) super.setUploadType(uploadType);
            }

            @Override
            public ArtifactRegistryImport setUploadProtocol(java.lang.String uploadProtocol) {
              return (ArtifactRegistryImport) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be imported. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be imported.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be imported. */
            public ArtifactRegistryImport setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public ArtifactRegistryImport set(String parameterName, Object value) {
              return (ArtifactRegistryImport) super.set(parameterName, value);
            }
          }
          /**
           * Directly uploads a Yum artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "yumArtifacts.upload".
           *
           * This request holds the parameters needed by the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest}
           * @return the request
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest content) throws java.io.IOException {
            Upload result = new Upload(parent, content);
            initialize(result);
            return result;
          }

          /**
           * Directly uploads a Yum artifact. The returned Operation will complete once the resources are
           * uploaded. Package, Version, and File resources are created based on the imported artifact.
           * Imported artifacts that conflict with existing resources are ignored.
           *
           * Create a request for the method "yumArtifacts.upload".
           *
           * This request holds the parameters needed by the the artifactregistry server.  After setting any
           * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
           *
           * <p>
           * This method should be used for uploading media content.
           * </p>
           *
           * @param parent The name of the parent resource where the artifacts will be uploaded.
           * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest} media metadata or {@code null} if none
           * @param mediaContent The media HTTP content.
           * @return the request
           * @throws java.io.IOException if the initialization of the request fails
           */
          public Upload upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
            Upload result = new Upload(parent, content, mediaContent);
            initialize(result);
            return result;
          }

          public class Upload extends ArtifactRegistryRequest<com.google.api.services.artifactregistry.v1.model.UploadYumArtifactMediaResponse> {

            private static final String REST_PATH = "v1/{+parent}/yumArtifacts:create";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Directly uploads a Yum artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "yumArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest}
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest content) {
              super(ArtifactRegistry.this, "POST", REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            /**
             * Directly uploads a Yum artifact. The returned Operation will complete once the resources are
             * uploaded. Package, Version, and File resources are created based on the imported artifact.
             * Imported artifacts that conflict with existing resources are ignored.
             *
             * Create a request for the method "yumArtifacts.upload".
             *
             * This request holds the parameters needed by the the artifactregistry server.  After setting any
             * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
             * <p> {@link
             * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * <p>
             * This constructor should be used for uploading media content.
             * </p>
             *
             * @param parent The name of the parent resource where the artifacts will be uploaded.
             * @param content the {@link com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest} media metadata or {@code null} if none
             * @param mediaContent The media HTTP content.
             * @since 1.13
             */
            protected Upload(java.lang.String parent, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
              super(ArtifactRegistry.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.artifactregistry.v1.model.UploadYumArtifactMediaResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
              initializeMediaUpload(mediaContent);
            }

            @Override
            public Upload set$Xgafv(java.lang.String $Xgafv) {
              return (Upload) super.set$Xgafv($Xgafv);
            }

            @Override
            public Upload setAccessToken(java.lang.String accessToken) {
              return (Upload) super.setAccessToken(accessToken);
            }

            @Override
            public Upload setAlt(java.lang.String alt) {
              return (Upload) super.setAlt(alt);
            }

            @Override
            public Upload setCallback(java.lang.String callback) {
              return (Upload) super.setCallback(callback);
            }

            @Override
            public Upload setFields(java.lang.String fields) {
              return (Upload) super.setFields(fields);
            }

            @Override
            public Upload setKey(java.lang.String key) {
              return (Upload) super.setKey(key);
            }

            @Override
            public Upload setOauthToken(java.lang.String oauthToken) {
              return (Upload) super.setOauthToken(oauthToken);
            }

            @Override
            public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Upload) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Upload setQuotaUser(java.lang.String quotaUser) {
              return (Upload) super.setQuotaUser(quotaUser);
            }

            @Override
            public Upload setUploadType(java.lang.String uploadType) {
              return (Upload) super.setUploadType(uploadType);
            }

            @Override
            public Upload setUploadProtocol(java.lang.String uploadProtocol) {
              return (Upload) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** The name of the parent resource where the artifacts will be uploaded.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** The name of the parent resource where the artifacts will be uploaded. */
            public Upload setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Upload set(String parameterName, Object value) {
              return (Upload) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link ArtifactRegistry}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link ArtifactRegistry}. */
    @Override
    public ArtifactRegistry build() {
      return new ArtifactRegistry(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ArtifactRegistryRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setArtifactRegistryRequestInitializer(
        ArtifactRegistryRequestInitializer artifactregistryRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(artifactregistryRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
