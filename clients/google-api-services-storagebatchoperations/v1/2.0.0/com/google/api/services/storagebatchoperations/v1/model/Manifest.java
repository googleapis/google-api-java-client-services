/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.storagebatchoperations.v1.model;

/**
 * Describes list of objects to be transformed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Storage Batch Operations API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Manifest extends com.google.api.client.json.GenericJson {

  /**
   * Required. `manifest_location` must contain the manifest source file that is a CSV file in a
   * Google Cloud Storage bucket. Each row in the file must include the object details i.e. BucketId
   * and Name. Generation may optionally be specified. When it is not specified the live object is
   * acted upon. `manifest_location` should either be 1) An absolute path to the object in the
   * format of `gs://bucket_name/path/file_name.csv`. 2) An absolute path with a single wildcard
   * character in the file name, for example `gs://bucket_name/path/file_name*.csv`. If manifest
   * location is specified with a wildcard, objects in all manifest files matching the pattern will
   * be acted upon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String manifestLocation;

  /**
   * Required. `manifest_location` must contain the manifest source file that is a CSV file in a
   * Google Cloud Storage bucket. Each row in the file must include the object details i.e. BucketId
   * and Name. Generation may optionally be specified. When it is not specified the live object is
   * acted upon. `manifest_location` should either be 1) An absolute path to the object in the
   * format of `gs://bucket_name/path/file_name.csv`. 2) An absolute path with a single wildcard
   * character in the file name, for example `gs://bucket_name/path/file_name*.csv`. If manifest
   * location is specified with a wildcard, objects in all manifest files matching the pattern will
   * be acted upon.
   * @return value or {@code null} for none
   */
  public java.lang.String getManifestLocation() {
    return manifestLocation;
  }

  /**
   * Required. `manifest_location` must contain the manifest source file that is a CSV file in a
   * Google Cloud Storage bucket. Each row in the file must include the object details i.e. BucketId
   * and Name. Generation may optionally be specified. When it is not specified the live object is
   * acted upon. `manifest_location` should either be 1) An absolute path to the object in the
   * format of `gs://bucket_name/path/file_name.csv`. 2) An absolute path with a single wildcard
   * character in the file name, for example `gs://bucket_name/path/file_name*.csv`. If manifest
   * location is specified with a wildcard, objects in all manifest files matching the pattern will
   * be acted upon.
   * @param manifestLocation manifestLocation or {@code null} for none
   */
  public Manifest setManifestLocation(java.lang.String manifestLocation) {
    this.manifestLocation = manifestLocation;
    return this;
  }

  @Override
  public Manifest set(String fieldName, Object value) {
    return (Manifest) super.set(fieldName, value);
  }

  @Override
  public Manifest clone() {
    return (Manifest) super.clone();
  }

}
