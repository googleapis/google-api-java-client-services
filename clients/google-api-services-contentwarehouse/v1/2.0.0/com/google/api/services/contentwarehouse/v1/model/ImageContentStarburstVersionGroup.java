/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for ImageContentStarburstVersionGroup.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageContentStarburstVersionGroup extends com.google.api.client.json.GenericJson {

  /**
   * Raw dense float feature vector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> descriptorFloat;

  /**
   * Short descriptor for image content features, e.g. compressed bytes. This is the compressed
   * version of descriptor_float below. It can be can be decompressed to descriptor_float with a
   * tiny bit of compression error (in most cases it should be totally fine).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String descriptorShort;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String enumVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minorVersion;

  /**
   * Starburst tokens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> starburstTokens;

  /**
   * The following integers are currently used: Starburst V1: 1 Starburst V2: 2 Starburst V3: 3
   * Starburst V4: 4 Starburst Visual V4: 1004 This field is deprecated. Please try to use the
   * 'enum_version' in future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer version;

  /**
   * Raw dense float feature vector.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getDescriptorFloat() {
    return descriptorFloat;
  }

  /**
   * Raw dense float feature vector.
   * @param descriptorFloat descriptorFloat or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setDescriptorFloat(java.util.List<java.lang.Float> descriptorFloat) {
    this.descriptorFloat = descriptorFloat;
    return this;
  }

  /**
   * Short descriptor for image content features, e.g. compressed bytes. This is the compressed
   * version of descriptor_float below. It can be can be decompressed to descriptor_float with a
   * tiny bit of compression error (in most cases it should be totally fine).
   * @see #decodeDescriptorShort()
   * @return value or {@code null} for none
   */
  public java.lang.String getDescriptorShort() {
    return descriptorShort;
  }

  /**
   * Short descriptor for image content features, e.g. compressed bytes. This is the compressed
   * version of descriptor_float below. It can be can be decompressed to descriptor_float with a
   * tiny bit of compression error (in most cases it should be totally fine).
   * @see #getDescriptorShort()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeDescriptorShort() {
    return com.google.api.client.util.Base64.decodeBase64(descriptorShort);
  }

  /**
   * Short descriptor for image content features, e.g. compressed bytes. This is the compressed
   * version of descriptor_float below. It can be can be decompressed to descriptor_float with a
   * tiny bit of compression error (in most cases it should be totally fine).
   * @see #encodeDescriptorShort()
   * @param descriptorShort descriptorShort or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setDescriptorShort(java.lang.String descriptorShort) {
    this.descriptorShort = descriptorShort;
    return this;
  }

  /**
   * Short descriptor for image content features, e.g. compressed bytes. This is the compressed
   * version of descriptor_float below. It can be can be decompressed to descriptor_float with a
   * tiny bit of compression error (in most cases it should be totally fine).
   * @see #setDescriptorShort()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ImageContentStarburstVersionGroup encodeDescriptorShort(byte[] descriptorShort) {
    this.descriptorShort = com.google.api.client.util.Base64.encodeBase64URLSafeString(descriptorShort);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEnumVersion() {
    return enumVersion;
  }

  /**
   * @param enumVersion enumVersion or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setEnumVersion(java.lang.String enumVersion) {
    this.enumVersion = enumVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMinorVersion() {
    return minorVersion;
  }

  /**
   * @param minorVersion minorVersion or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setMinorVersion(java.lang.String minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

  /**
   * Starburst tokens.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getStarburstTokens() {
    return starburstTokens;
  }

  /**
   * Starburst tokens.
   * @param starburstTokens starburstTokens or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setStarburstTokens(java.util.List<java.lang.Integer> starburstTokens) {
    this.starburstTokens = starburstTokens;
    return this;
  }

  /**
   * The following integers are currently used: Starburst V1: 1 Starburst V2: 2 Starburst V3: 3
   * Starburst V4: 4 Starburst Visual V4: 1004 This field is deprecated. Please try to use the
   * 'enum_version' in future.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * The following integers are currently used: Starburst V1: 1 Starburst V2: 2 Starburst V3: 3
   * Starburst V4: 4 Starburst Visual V4: 1004 This field is deprecated. Please try to use the
   * 'enum_version' in future.
   * @param version version or {@code null} for none
   */
  public ImageContentStarburstVersionGroup setVersion(java.lang.Integer version) {
    this.version = version;
    return this;
  }

  @Override
  public ImageContentStarburstVersionGroup set(String fieldName, Object value) {
    return (ImageContentStarburstVersionGroup) super.set(fieldName, value);
  }

  @Override
  public ImageContentStarburstVersionGroup clone() {
    return (ImageContentStarburstVersionGroup) super.clone();
  }

}
