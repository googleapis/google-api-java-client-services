/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * An Ordinal message represents a single ordinal component of a page number. It encodes the printed
 * or inferred numbering style (Roman, ASCII, etc.) and the ordinal value of the component. An
 * optional set of variable is defined in order to express a sectioned ordinal. A sectioned ordinal
 * may appear in certain page numbering styles, for example "12-1" where "12" identifies a chapter
 * and "1" identifies the page within it. This case will be encoded with value 1 and section_value
 * 12 both of type ASCII.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocOrdinal extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String implicit;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sectionStringValue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sectionValue;

  /**
   * The following vars describe the section component of an ordinal (if exists). They are used to
   * express situation where a page number has a section component, usually denoating the chapter
   * number. For example pages 5-14, 5-15 will both have the common section 5. (If exists). The
   * semantcis of the section variables correspond to that of the primary part of the ordinal.
   * (Described above).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sectionValueType;

  /**
   * The string page value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stringValue;

  /**
   * The numeric page value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer value;

  /**
   * The delta in which the value increases between pages.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueDelta;

  /**
   * A value type from the Type enum above.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueType;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getImplicit() {
    return implicit;
  }

  /**
   * @param implicit implicit or {@code null} for none
   */
  public GoodocOrdinal setImplicit(java.lang.String implicit) {
    this.implicit = implicit;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSectionStringValue() {
    return sectionStringValue;
  }

  /**
   * @param sectionStringValue sectionStringValue or {@code null} for none
   */
  public GoodocOrdinal setSectionStringValue(java.lang.String sectionStringValue) {
    this.sectionStringValue = sectionStringValue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSectionValue() {
    return sectionValue;
  }

  /**
   * @param sectionValue sectionValue or {@code null} for none
   */
  public GoodocOrdinal setSectionValue(java.lang.Integer sectionValue) {
    this.sectionValue = sectionValue;
    return this;
  }

  /**
   * The following vars describe the section component of an ordinal (if exists). They are used to
   * express situation where a page number has a section component, usually denoating the chapter
   * number. For example pages 5-14, 5-15 will both have the common section 5. (If exists). The
   * semantcis of the section variables correspond to that of the primary part of the ordinal.
   * (Described above).
   * @return value or {@code null} for none
   */
  public java.lang.String getSectionValueType() {
    return sectionValueType;
  }

  /**
   * The following vars describe the section component of an ordinal (if exists). They are used to
   * express situation where a page number has a section component, usually denoating the chapter
   * number. For example pages 5-14, 5-15 will both have the common section 5. (If exists). The
   * semantcis of the section variables correspond to that of the primary part of the ordinal.
   * (Described above).
   * @param sectionValueType sectionValueType or {@code null} for none
   */
  public GoodocOrdinal setSectionValueType(java.lang.String sectionValueType) {
    this.sectionValueType = sectionValueType;
    return this;
  }

  /**
   * The string page value.
   * @return value or {@code null} for none
   */
  public java.lang.String getStringValue() {
    return stringValue;
  }

  /**
   * The string page value.
   * @param stringValue stringValue or {@code null} for none
   */
  public GoodocOrdinal setStringValue(java.lang.String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * The numeric page value.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getValue() {
    return value;
  }

  /**
   * The numeric page value.
   * @param value value or {@code null} for none
   */
  public GoodocOrdinal setValue(java.lang.Integer value) {
    this.value = value;
    return this;
  }

  /**
   * The delta in which the value increases between pages.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueDelta() {
    return valueDelta;
  }

  /**
   * The delta in which the value increases between pages.
   * @param valueDelta valueDelta or {@code null} for none
   */
  public GoodocOrdinal setValueDelta(java.lang.String valueDelta) {
    this.valueDelta = valueDelta;
    return this;
  }

  /**
   * A value type from the Type enum above.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * A value type from the Type enum above.
   * @param valueType valueType or {@code null} for none
   */
  public GoodocOrdinal setValueType(java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  @Override
  public GoodocOrdinal set(String fieldName, Object value) {
    return (GoodocOrdinal) super.set(fieldName, value);
  }

  @Override
  public GoodocOrdinal clone() {
    return (GoodocOrdinal) super.clone();
  }

}
