/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidenterprise.model;

/**
 * General setting for the managed Google Play store layout, currently only specifying the page to
 * display the first time the store is opened.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Play EMM API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StoreLayout extends com.google.api.client.json.GenericJson {

  /**
   * The ID of the store page to be used as the homepage. The homepage is the first page shown in
   * the managed Google Play Store.
   *
   * Not specifying a homepage is equivalent to setting the store layout type to "basic".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String homepageId;

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * "androidenterprise#storeLayout".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The store layout type. By default, this value is set to "basic" if the homepageId field is not
   * set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps
   * that have been whitelisted for the user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String storeLayoutType;

  /**
   * The ID of the store page to be used as the homepage. The homepage is the first page shown in
   * the managed Google Play Store.
   *
   * Not specifying a homepage is equivalent to setting the store layout type to "basic".
   * @return value or {@code null} for none
   */
  public java.lang.String getHomepageId() {
    return homepageId;
  }

  /**
   * The ID of the store page to be used as the homepage. The homepage is the first page shown in
   * the managed Google Play Store.
   *
   * Not specifying a homepage is equivalent to setting the store layout type to "basic".
   * @param homepageId homepageId or {@code null} for none
   */
  public StoreLayout setHomepageId(java.lang.String homepageId) {
    this.homepageId = homepageId;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * "androidenterprise#storeLayout".
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string
   * "androidenterprise#storeLayout".
   * @param kind kind or {@code null} for none
   */
  public StoreLayout setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The store layout type. By default, this value is set to "basic" if the homepageId field is not
   * set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps
   * that have been whitelisted for the user.
   * @return value or {@code null} for none
   */
  public java.lang.String getStoreLayoutType() {
    return storeLayoutType;
  }

  /**
   * The store layout type. By default, this value is set to "basic" if the homepageId field is not
   * set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps
   * that have been whitelisted for the user.
   * @param storeLayoutType storeLayoutType or {@code null} for none
   */
  public StoreLayout setStoreLayoutType(java.lang.String storeLayoutType) {
    this.storeLayoutType = storeLayoutType;
    return this;
  }

  @Override
  public StoreLayout set(String fieldName, Object value) {
    return (StoreLayout) super.set(fieldName, value);
  }

  @Override
  public StoreLayout clone() {
    return (StoreLayout) super.clone();
  }

}
