/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1beta2.model;

/**
 * ConfidenceMetricsEntry includes generic precision, recall, f1 score etc. Next tag: 16.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSConfidenceMetricsEntry extends com.google.api.client.json.GenericJson {

  /**
   * Metrics are computed with an assumption that the model never return predictions with score
   * lower than this value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidenceThreshold;

  /**
   * The harmonic mean of recall and precision.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float f1Score;

  /**
   * The harmonic mean of recall_at1 and precision_at1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float f1ScoreAt1;

  /**
   * The number of ground truth labels that are not matched by a model created label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long falseNegativeCount;

  /**
   * The number of model created labels that do not match a ground truth label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long falsePositiveCount;

  /**
   * False Positive Rate for the given confidence threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float falsePositiveRate;

  /**
   * The False Positive Rate when only considering the label that has the highest prediction score
   * and not below the confidence threshold for each example.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float falsePositiveRateAt1;

  /**
   * Metrics are computed with an assumption that the model always returns at most this many
   * predictions (ordered by their score, descendingly), but they all still need to meet the
   * confidence_threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer positionThreshold;

  /**
   * Precision for the given confidence threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float precision;

  /**
   * The precision when only considering the label that has the highest prediction score and not
   * below the confidence threshold for each example.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float precisionAt1;

  /**
   * Recall (true positive rate) for the given confidence threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float recall;

  /**
   * The recall (true positive rate) when only considering the label that has the highest prediction
   * score and not below the confidence threshold for each example.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float recallAt1;

  /**
   * The number of labels that were not created by the model, but if they would, they would not
   * match a ground truth label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long trueNegativeCount;

  /**
   * The number of model created labels that match a ground truth label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long truePositiveCount;

  /**
   * Metrics are computed with an assumption that the model never return predictions with score
   * lower than this value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidenceThreshold() {
    return confidenceThreshold;
  }

  /**
   * Metrics are computed with an assumption that the model never return predictions with score
   * lower than this value.
   * @param confidenceThreshold confidenceThreshold or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setConfidenceThreshold(java.lang.Float confidenceThreshold) {
    this.confidenceThreshold = confidenceThreshold;
    return this;
  }

  /**
   * The harmonic mean of recall and precision.
   * @return value or {@code null} for none
   */
  public java.lang.Float getF1Score() {
    return f1Score;
  }

  /**
   * The harmonic mean of recall and precision.
   * @param f1Score f1Score or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setF1Score(java.lang.Float f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * The harmonic mean of recall_at1 and precision_at1.
   * @return value or {@code null} for none
   */
  public java.lang.Float getF1ScoreAt1() {
    return f1ScoreAt1;
  }

  /**
   * The harmonic mean of recall_at1 and precision_at1.
   * @param f1ScoreAt1 f1ScoreAt1 or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setF1ScoreAt1(java.lang.Float f1ScoreAt1) {
    this.f1ScoreAt1 = f1ScoreAt1;
    return this;
  }

  /**
   * The number of ground truth labels that are not matched by a model created label.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFalseNegativeCount() {
    return falseNegativeCount;
  }

  /**
   * The number of ground truth labels that are not matched by a model created label.
   * @param falseNegativeCount falseNegativeCount or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setFalseNegativeCount(java.lang.Long falseNegativeCount) {
    this.falseNegativeCount = falseNegativeCount;
    return this;
  }

  /**
   * The number of model created labels that do not match a ground truth label.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFalsePositiveCount() {
    return falsePositiveCount;
  }

  /**
   * The number of model created labels that do not match a ground truth label.
   * @param falsePositiveCount falsePositiveCount or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setFalsePositiveCount(java.lang.Long falsePositiveCount) {
    this.falsePositiveCount = falsePositiveCount;
    return this;
  }

  /**
   * False Positive Rate for the given confidence threshold.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFalsePositiveRate() {
    return falsePositiveRate;
  }

  /**
   * False Positive Rate for the given confidence threshold.
   * @param falsePositiveRate falsePositiveRate or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setFalsePositiveRate(java.lang.Float falsePositiveRate) {
    this.falsePositiveRate = falsePositiveRate;
    return this;
  }

  /**
   * The False Positive Rate when only considering the label that has the highest prediction score
   * and not below the confidence threshold for each example.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFalsePositiveRateAt1() {
    return falsePositiveRateAt1;
  }

  /**
   * The False Positive Rate when only considering the label that has the highest prediction score
   * and not below the confidence threshold for each example.
   * @param falsePositiveRateAt1 falsePositiveRateAt1 or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setFalsePositiveRateAt1(java.lang.Float falsePositiveRateAt1) {
    this.falsePositiveRateAt1 = falsePositiveRateAt1;
    return this;
  }

  /**
   * Metrics are computed with an assumption that the model always returns at most this many
   * predictions (ordered by their score, descendingly), but they all still need to meet the
   * confidence_threshold.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPositionThreshold() {
    return positionThreshold;
  }

  /**
   * Metrics are computed with an assumption that the model always returns at most this many
   * predictions (ordered by their score, descendingly), but they all still need to meet the
   * confidence_threshold.
   * @param positionThreshold positionThreshold or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setPositionThreshold(java.lang.Integer positionThreshold) {
    this.positionThreshold = positionThreshold;
    return this;
  }

  /**
   * Precision for the given confidence threshold.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPrecision() {
    return precision;
  }

  /**
   * Precision for the given confidence threshold.
   * @param precision precision or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setPrecision(java.lang.Float precision) {
    this.precision = precision;
    return this;
  }

  /**
   * The precision when only considering the label that has the highest prediction score and not
   * below the confidence threshold for each example.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPrecisionAt1() {
    return precisionAt1;
  }

  /**
   * The precision when only considering the label that has the highest prediction score and not
   * below the confidence threshold for each example.
   * @param precisionAt1 precisionAt1 or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setPrecisionAt1(java.lang.Float precisionAt1) {
    this.precisionAt1 = precisionAt1;
    return this;
  }

  /**
   * Recall (true positive rate) for the given confidence threshold.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRecall() {
    return recall;
  }

  /**
   * Recall (true positive rate) for the given confidence threshold.
   * @param recall recall or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setRecall(java.lang.Float recall) {
    this.recall = recall;
    return this;
  }

  /**
   * The recall (true positive rate) when only considering the label that has the highest prediction
   * score and not below the confidence threshold for each example.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRecallAt1() {
    return recallAt1;
  }

  /**
   * The recall (true positive rate) when only considering the label that has the highest prediction
   * score and not below the confidence threshold for each example.
   * @param recallAt1 recallAt1 or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setRecallAt1(java.lang.Float recallAt1) {
    this.recallAt1 = recallAt1;
    return this;
  }

  /**
   * The number of labels that were not created by the model, but if they would, they would not
   * match a ground truth label.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTrueNegativeCount() {
    return trueNegativeCount;
  }

  /**
   * The number of labels that were not created by the model, but if they would, they would not
   * match a ground truth label.
   * @param trueNegativeCount trueNegativeCount or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setTrueNegativeCount(java.lang.Long trueNegativeCount) {
    this.trueNegativeCount = trueNegativeCount;
    return this;
  }

  /**
   * The number of model created labels that match a ground truth label.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTruePositiveCount() {
    return truePositiveCount;
  }

  /**
   * The number of model created labels that match a ground truth label.
   * @param truePositiveCount truePositiveCount or {@code null} for none
   */
  public XPSConfidenceMetricsEntry setTruePositiveCount(java.lang.Long truePositiveCount) {
    this.truePositiveCount = truePositiveCount;
    return this;
  }

  @Override
  public XPSConfidenceMetricsEntry set(String fieldName, Object value) {
    return (XPSConfidenceMetricsEntry) super.set(fieldName, value);
  }

  @Override
  public XPSConfidenceMetricsEntry clone() {
    return (XPSConfidenceMetricsEntry) super.clone();
  }

}
