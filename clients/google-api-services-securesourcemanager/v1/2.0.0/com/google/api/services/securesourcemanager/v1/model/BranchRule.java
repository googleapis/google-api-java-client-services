/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securesourcemanager.v1.model;

/**
 * Metadata of a BranchRule. BranchRule is the protection rule to enforce pre-defined rules on
 * designated branches within a repository.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Secure Source Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BranchRule extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Determines if allow stale reviews or approvals before merging to the branch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowStaleReviews;

  /**
   * Optional. User annotations. These attributes can only be set and used by the user. See
   * https://google.aip.dev/128#annotations for more details such as format and size limitations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. Create timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Determines if the branch rule is disabled or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. The pattern of the branch that can match to this BranchRule. Specified as regex. .*
   * for all branches. Examples: main, (main|release.*). Current MVP phase only support `.*` for
   * wildcard.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String includePattern;

  /**
   * Optional. The minimum number of approvals required for the branch rule to be matched.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minimumApprovalsCount;

  /**
   * Optional. The minimum number of reviews required for the branch rule to be matched.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minimumReviewsCount;

  /**
   * Optional. A unique identifier for a BranchRule. The name should be of the format:
   * `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Determines if require comments resolved before merging to the branch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireCommentsResolved;

  /**
   * Optional. Determines if require linear history before merging to the branch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireLinearHistory;

  /**
   * Optional. Determines if the branch rule requires a pull request or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requirePullRequest;

  /**
   * Optional. List of required status checks before merging to the branch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Check> requiredStatusChecks;

  /**
   * Output only. Unique identifier of the repository.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. Update timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. Determines if allow stale reviews or approvals before merging to the branch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowStaleReviews() {
    return allowStaleReviews;
  }

  /**
   * Optional. Determines if allow stale reviews or approvals before merging to the branch.
   * @param allowStaleReviews allowStaleReviews or {@code null} for none
   */
  public BranchRule setAllowStaleReviews(java.lang.Boolean allowStaleReviews) {
    this.allowStaleReviews = allowStaleReviews;
    return this;
  }

  /**
   * Optional. User annotations. These attributes can only be set and used by the user. See
   * https://google.aip.dev/128#annotations for more details such as format and size limitations.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. User annotations. These attributes can only be set and used by the user. See
   * https://google.aip.dev/128#annotations for more details such as format and size limitations.
   * @param annotations annotations or {@code null} for none
   */
  public BranchRule setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. Create timestamp.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Create timestamp.
   * @param createTime createTime or {@code null} for none
   */
  public BranchRule setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Determines if the branch rule is disabled or not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * Optional. Determines if the branch rule is disabled or not.
   * @param disabled disabled or {@code null} for none
   */
  public BranchRule setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and may
   * be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @param etag etag or {@code null} for none
   */
  public BranchRule setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The pattern of the branch that can match to this BranchRule. Specified as regex. .*
   * for all branches. Examples: main, (main|release.*). Current MVP phase only support `.*` for
   * wildcard.
   * @return value or {@code null} for none
   */
  public java.lang.String getIncludePattern() {
    return includePattern;
  }

  /**
   * Optional. The pattern of the branch that can match to this BranchRule. Specified as regex. .*
   * for all branches. Examples: main, (main|release.*). Current MVP phase only support `.*` for
   * wildcard.
   * @param includePattern includePattern or {@code null} for none
   */
  public BranchRule setIncludePattern(java.lang.String includePattern) {
    this.includePattern = includePattern;
    return this;
  }

  /**
   * Optional. The minimum number of approvals required for the branch rule to be matched.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinimumApprovalsCount() {
    return minimumApprovalsCount;
  }

  /**
   * Optional. The minimum number of approvals required for the branch rule to be matched.
   * @param minimumApprovalsCount minimumApprovalsCount or {@code null} for none
   */
  public BranchRule setMinimumApprovalsCount(java.lang.Integer minimumApprovalsCount) {
    this.minimumApprovalsCount = minimumApprovalsCount;
    return this;
  }

  /**
   * Optional. The minimum number of reviews required for the branch rule to be matched.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinimumReviewsCount() {
    return minimumReviewsCount;
  }

  /**
   * Optional. The minimum number of reviews required for the branch rule to be matched.
   * @param minimumReviewsCount minimumReviewsCount or {@code null} for none
   */
  public BranchRule setMinimumReviewsCount(java.lang.Integer minimumReviewsCount) {
    this.minimumReviewsCount = minimumReviewsCount;
    return this;
  }

  /**
   * Optional. A unique identifier for a BranchRule. The name should be of the format:
   * `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Optional. A unique identifier for a BranchRule. The name should be of the format:
   * `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
   * @param name name or {@code null} for none
   */
  public BranchRule setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Determines if require comments resolved before merging to the branch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireCommentsResolved() {
    return requireCommentsResolved;
  }

  /**
   * Optional. Determines if require comments resolved before merging to the branch.
   * @param requireCommentsResolved requireCommentsResolved or {@code null} for none
   */
  public BranchRule setRequireCommentsResolved(java.lang.Boolean requireCommentsResolved) {
    this.requireCommentsResolved = requireCommentsResolved;
    return this;
  }

  /**
   * Optional. Determines if require linear history before merging to the branch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireLinearHistory() {
    return requireLinearHistory;
  }

  /**
   * Optional. Determines if require linear history before merging to the branch.
   * @param requireLinearHistory requireLinearHistory or {@code null} for none
   */
  public BranchRule setRequireLinearHistory(java.lang.Boolean requireLinearHistory) {
    this.requireLinearHistory = requireLinearHistory;
    return this;
  }

  /**
   * Optional. Determines if the branch rule requires a pull request or not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequirePullRequest() {
    return requirePullRequest;
  }

  /**
   * Optional. Determines if the branch rule requires a pull request or not.
   * @param requirePullRequest requirePullRequest or {@code null} for none
   */
  public BranchRule setRequirePullRequest(java.lang.Boolean requirePullRequest) {
    this.requirePullRequest = requirePullRequest;
    return this;
  }

  /**
   * Optional. List of required status checks before merging to the branch.
   * @return value or {@code null} for none
   */
  public java.util.List<Check> getRequiredStatusChecks() {
    return requiredStatusChecks;
  }

  /**
   * Optional. List of required status checks before merging to the branch.
   * @param requiredStatusChecks requiredStatusChecks or {@code null} for none
   */
  public BranchRule setRequiredStatusChecks(java.util.List<Check> requiredStatusChecks) {
    this.requiredStatusChecks = requiredStatusChecks;
    return this;
  }

  /**
   * Output only. Unique identifier of the repository.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. Unique identifier of the repository.
   * @param uid uid or {@code null} for none
   */
  public BranchRule setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. Update timestamp.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Update timestamp.
   * @param updateTime updateTime or {@code null} for none
   */
  public BranchRule setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public BranchRule set(String fieldName, Object value) {
    return (BranchRule) super.set(fieldName, value);
  }

  @Override
  public BranchRule clone() {
    return (BranchRule) super.clone();
  }

}
