/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v2.model;

/**
 * Envoy's listener manager fills this message with all currently known listeners. Listener
 * configuration information can be used to recreate an Envoy configuration by populating all
 * listeners as static listeners or by returning them in a LDS response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ListenersConfigDump extends com.google.api.client.json.GenericJson {

  /**
   * State for any warming, active, or draining listeners.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DynamicListener> dynamicListeners;

  static {
    // hack to force ProGuard to consider DynamicListener used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DynamicListener.class);
  }

  /**
   * The statically loaded listener configs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StaticListener> staticListeners;

  /**
   * This is the :ref:`version_info ` in the last processed LDS discovery response. If there are
   * only static bootstrap listeners, this field will be "".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String versionInfo;

  /**
   * State for any warming, active, or draining listeners.
   * @return value or {@code null} for none
   */
  public java.util.List<DynamicListener> getDynamicListeners() {
    return dynamicListeners;
  }

  /**
   * State for any warming, active, or draining listeners.
   * @param dynamicListeners dynamicListeners or {@code null} for none
   */
  public ListenersConfigDump setDynamicListeners(java.util.List<DynamicListener> dynamicListeners) {
    this.dynamicListeners = dynamicListeners;
    return this;
  }

  /**
   * The statically loaded listener configs.
   * @return value or {@code null} for none
   */
  public java.util.List<StaticListener> getStaticListeners() {
    return staticListeners;
  }

  /**
   * The statically loaded listener configs.
   * @param staticListeners staticListeners or {@code null} for none
   */
  public ListenersConfigDump setStaticListeners(java.util.List<StaticListener> staticListeners) {
    this.staticListeners = staticListeners;
    return this;
  }

  /**
   * This is the :ref:`version_info ` in the last processed LDS discovery response. If there are
   * only static bootstrap listeners, this field will be "".
   * @return value or {@code null} for none
   */
  public java.lang.String getVersionInfo() {
    return versionInfo;
  }

  /**
   * This is the :ref:`version_info ` in the last processed LDS discovery response. If there are
   * only static bootstrap listeners, this field will be "".
   * @param versionInfo versionInfo or {@code null} for none
   */
  public ListenersConfigDump setVersionInfo(java.lang.String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  @Override
  public ListenersConfigDump set(String fieldName, Object value) {
    return (ListenersConfigDump) super.set(fieldName, value);
  }

  @Override
  public ListenersConfigDump clone() {
    return (ListenersConfigDump) super.clone();
  }

}
