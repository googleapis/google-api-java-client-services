/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * Request message for VizierService.SuggestTrials.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1SuggestTrialsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The identifier of the client that is requesting the suggestion. If multiple
   * SuggestTrialsRequests have the same `client_id`, the service will return the identical
   * suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial
   * was completed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientId;

  /**
   * Optional. This allows you to specify the "context" for a Trial; a context is a slice (a
   * subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a
   * server for best performance, but there's a strong weekly cycle. The context specifies the day-
   * of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is
   * identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the
   * door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that
   * information in the context, and Vizier will adapt its suggestions to the patient. 3) You want
   * to do a fair A/B test efficiently. Specify the "A" and "B" conditions as contexts, and Vizier
   * will generalize between "A" and "B" conditions. If they are similar, this will allow Vizier to
   * converge to the optimum faster than if "A" and "B" were separate Studies. NOTE: You can also
   * enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous
   * option where you don't need a close association between contexts and suggestions. NOTE: All the
   * Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or
   * $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from
   * the full search space specified in the StudySpec; if you supply a full set of context, each
   * suggestion will match the corresponding context. NOTE: A Context with no features set matches
   * anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the
   * search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts
   * preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE:
   * Generation of suggestions involves a match between a Context and (optionally) a REQUESTED
   * trial; if that match is not fully specified, a suggestion will be geneated in the merged
   * subspace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1TrialContext> contexts;

  /**
   * Required. The number of suggestions requested. It must be positive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer suggestionCount;

  /**
   * Required. The identifier of the client that is requesting the suggestion. If multiple
   * SuggestTrialsRequests have the same `client_id`, the service will return the identical
   * suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial
   * was completed.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * Required. The identifier of the client that is requesting the suggestion. If multiple
   * SuggestTrialsRequests have the same `client_id`, the service will return the identical
   * suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial
   * was completed.
   * @param clientId clientId or {@code null} for none
   */
  public GoogleCloudAiplatformV1SuggestTrialsRequest setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Optional. This allows you to specify the "context" for a Trial; a context is a slice (a
   * subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a
   * server for best performance, but there's a strong weekly cycle. The context specifies the day-
   * of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is
   * identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the
   * door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that
   * information in the context, and Vizier will adapt its suggestions to the patient. 3) You want
   * to do a fair A/B test efficiently. Specify the "A" and "B" conditions as contexts, and Vizier
   * will generalize between "A" and "B" conditions. If they are similar, this will allow Vizier to
   * converge to the optimum faster than if "A" and "B" were separate Studies. NOTE: You can also
   * enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous
   * option where you don't need a close association between contexts and suggestions. NOTE: All the
   * Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or
   * $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from
   * the full search space specified in the StudySpec; if you supply a full set of context, each
   * suggestion will match the corresponding context. NOTE: A Context with no features set matches
   * anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the
   * search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts
   * preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE:
   * Generation of suggestions involves a match between a Context and (optionally) a REQUESTED
   * trial; if that match is not fully specified, a suggestion will be geneated in the merged
   * subspace.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1TrialContext> getContexts() {
    return contexts;
  }

  /**
   * Optional. This allows you to specify the "context" for a Trial; a context is a slice (a
   * subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a
   * server for best performance, but there's a strong weekly cycle. The context specifies the day-
   * of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is
   * identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the
   * door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that
   * information in the context, and Vizier will adapt its suggestions to the patient. 3) You want
   * to do a fair A/B test efficiently. Specify the "A" and "B" conditions as contexts, and Vizier
   * will generalize between "A" and "B" conditions. If they are similar, this will allow Vizier to
   * converge to the optimum faster than if "A" and "B" were separate Studies. NOTE: You can also
   * enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous
   * option where you don't need a close association between contexts and suggestions. NOTE: All the
   * Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or
   * $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from
   * the full search space specified in the StudySpec; if you supply a full set of context, each
   * suggestion will match the corresponding context. NOTE: A Context with no features set matches
   * anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the
   * search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts
   * preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE:
   * Generation of suggestions involves a match between a Context and (optionally) a REQUESTED
   * trial; if that match is not fully specified, a suggestion will be geneated in the merged
   * subspace.
   * @param contexts contexts or {@code null} for none
   */
  public GoogleCloudAiplatformV1SuggestTrialsRequest setContexts(java.util.List<GoogleCloudAiplatformV1TrialContext> contexts) {
    this.contexts = contexts;
    return this;
  }

  /**
   * Required. The number of suggestions requested. It must be positive.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSuggestionCount() {
    return suggestionCount;
  }

  /**
   * Required. The number of suggestions requested. It must be positive.
   * @param suggestionCount suggestionCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1SuggestTrialsRequest setSuggestionCount(java.lang.Integer suggestionCount) {
    this.suggestionCount = suggestionCount;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1SuggestTrialsRequest set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1SuggestTrialsRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1SuggestTrialsRequest clone() {
    return (GoogleCloudAiplatformV1SuggestTrialsRequest) super.clone();
  }

}
