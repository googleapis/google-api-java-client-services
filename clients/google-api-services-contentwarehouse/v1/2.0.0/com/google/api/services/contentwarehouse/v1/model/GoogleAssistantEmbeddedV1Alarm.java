/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Alarms are clocks that ring at a specified time on one or more days. The client schedules a time
 * to ring based on the date/time pattern. When it rings, it may be rescheduled off the original
 * time by snoozing or it may be replaced by the next occurrence.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAssistantEmbeddedV1Alarm extends com.google.api.client.json.GenericJson {

  /**
   * A string key used as an identifier to this alarm. This key needs to be unique amongst all
   * alarms on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests an alarm_id, the client can either use the suggestion or create a new unique
   * alarm_id of its choosing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String alarmId;

  /**
   * For single alarms: the one date the alarm should next be scheduled for.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDate datePattern;

  /**
   * A user-provided name for this alarm.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * For recurring alarms: a description of the dates when the alarm should recur.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantEmbeddedV1AlarmRecurrence recurrencePattern;

  /**
   * When SCHEDULED or SNOOZED, the absolute time the alarm will fire next. When SNOOZED, this time
   * includes the additional time added by snoozing the alarm. When FIRING, the absolute time the
   * alarm had been scheduled to fire. When DISABLED, this field is undefined and should be ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String scheduledTime;

  /**
   * Describes the part of the lifecycle that an alarm is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * The time of day the alarm should be scheduled for. This value does not change when an alarm
   * enters the SNOOZED state; instead the scheduled_time field should be adjusted to the new alarm
   * time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeTimeOfDay timePattern;

  /**
   * A string key used as an identifier to this alarm. This key needs to be unique amongst all
   * alarms on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests an alarm_id, the client can either use the suggestion or create a new unique
   * alarm_id of its choosing.
   * @return value or {@code null} for none
   */
  public java.lang.String getAlarmId() {
    return alarmId;
  }

  /**
   * A string key used as an identifier to this alarm. This key needs to be unique amongst all
   * alarms on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests an alarm_id, the client can either use the suggestion or create a new unique
   * alarm_id of its choosing.
   * @param alarmId alarmId or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setAlarmId(java.lang.String alarmId) {
    this.alarmId = alarmId;
    return this;
  }

  /**
   * For single alarms: the one date the alarm should next be scheduled for.
   * @return value or {@code null} for none
   */
  public GoogleTypeDate getDatePattern() {
    return datePattern;
  }

  /**
   * For single alarms: the one date the alarm should next be scheduled for.
   * @param datePattern datePattern or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setDatePattern(GoogleTypeDate datePattern) {
    this.datePattern = datePattern;
    return this;
  }

  /**
   * A user-provided name for this alarm.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * A user-provided name for this alarm.
   * @param label label or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * For recurring alarms: a description of the dates when the alarm should recur.
   * @return value or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1AlarmRecurrence getRecurrencePattern() {
    return recurrencePattern;
  }

  /**
   * For recurring alarms: a description of the dates when the alarm should recur.
   * @param recurrencePattern recurrencePattern or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setRecurrencePattern(GoogleAssistantEmbeddedV1AlarmRecurrence recurrencePattern) {
    this.recurrencePattern = recurrencePattern;
    return this;
  }

  /**
   * When SCHEDULED or SNOOZED, the absolute time the alarm will fire next. When SNOOZED, this time
   * includes the additional time added by snoozing the alarm. When FIRING, the absolute time the
   * alarm had been scheduled to fire. When DISABLED, this field is undefined and should be ignored.
   * @return value or {@code null} for none
   */
  public String getScheduledTime() {
    return scheduledTime;
  }

  /**
   * When SCHEDULED or SNOOZED, the absolute time the alarm will fire next. When SNOOZED, this time
   * includes the additional time added by snoozing the alarm. When FIRING, the absolute time the
   * alarm had been scheduled to fire. When DISABLED, this field is undefined and should be ignored.
   * @param scheduledTime scheduledTime or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setScheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Describes the part of the lifecycle that an alarm is in.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Describes the part of the lifecycle that an alarm is in.
   * @param status status or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * The time of day the alarm should be scheduled for. This value does not change when an alarm
   * enters the SNOOZED state; instead the scheduled_time field should be adjusted to the new alarm
   * time.
   * @return value or {@code null} for none
   */
  public GoogleTypeTimeOfDay getTimePattern() {
    return timePattern;
  }

  /**
   * The time of day the alarm should be scheduled for. This value does not change when an alarm
   * enters the SNOOZED state; instead the scheduled_time field should be adjusted to the new alarm
   * time.
   * @param timePattern timePattern or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Alarm setTimePattern(GoogleTypeTimeOfDay timePattern) {
    this.timePattern = timePattern;
    return this;
  }

  @Override
  public GoogleAssistantEmbeddedV1Alarm set(String fieldName, Object value) {
    return (GoogleAssistantEmbeddedV1Alarm) super.set(fieldName, value);
  }

  @Override
  public GoogleAssistantEmbeddedV1Alarm clone() {
    return (GoogleAssistantEmbeddedV1Alarm) super.clone();
  }

}
