/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Group with protocol specific response (determined by the protocol of the url that generated the
 * content we return).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TrawlerFetchReplyDataProtocolResponse extends com.google.api.client.json.GenericJson {

  /**
   * Response code. We emulate the HTTP response codes for all protocols that we know. -- HTTP:
   * response code for the downloaded page. -- FTP: similar with HTTP: 200 - OK, 40X - errors (not
   * found, etc), 500 - server unavailable
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Code")
  private java.lang.Integer code;

  /**
   * Content type as inferred by the fetcher (webutil/http/content-type.proto)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ContentType")
  private java.lang.String contentType;

  /**
   * Where did we cut off? Includes headers plus truncated but uncompressed content. Present if and
   * only if we truncated the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CutoffSize") @com.google.api.client.json.JsonString
  private java.lang.Long cutoffSize;

  /**
   * DEPRECATED, see field 113. Stores the HTTP version we used in the final hop.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HttpVersion")
  private java.lang.String httpVersion;

  /**
   * DEPRECATED, see field 114. Whether we fallback from HTTP/2 to HTTP/1.1 during fetch. The
   * fallback could happen in any hops and there can be at most one fallback because once fallback
   * happens, we will not try HTTP/2 anymore.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ProtocolVersionFallback")
  private java.lang.Boolean protocolVersionFallback;

  /**
   * The amount of data we got from the webserver before any truncation, but after undoing any HTTP
   * gzip/deflate encoding. For HTTP, this includes headers and uncompressed content. Content size
   * is excluded if content was not successfully fetched. See description above TotalFetchedSize for
   * comparison.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("UnTruncatedSize") @com.google.api.client.json.JsonString
  private java.lang.Long unTruncatedSize;

  /**
   * Response code. We emulate the HTTP response codes for all protocols that we know. -- HTTP:
   * response code for the downloaded page. -- FTP: similar with HTTP: 200 - OK, 40X - errors (not
   * found, etc), 500 - server unavailable
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCode() {
    return code;
  }

  /**
   * Response code. We emulate the HTTP response codes for all protocols that we know. -- HTTP:
   * response code for the downloaded page. -- FTP: similar with HTTP: 200 - OK, 40X - errors (not
   * found, etc), 500 - server unavailable
   * @param code code or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setCode(java.lang.Integer code) {
    this.code = code;
    return this;
  }

  /**
   * Content type as inferred by the fetcher (webutil/http/content-type.proto)
   * @return value or {@code null} for none
   */
  public java.lang.String getContentType() {
    return contentType;
  }

  /**
   * Content type as inferred by the fetcher (webutil/http/content-type.proto)
   * @param contentType contentType or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setContentType(java.lang.String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Where did we cut off? Includes headers plus truncated but uncompressed content. Present if and
   * only if we truncated the document.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCutoffSize() {
    return cutoffSize;
  }

  /**
   * Where did we cut off? Includes headers plus truncated but uncompressed content. Present if and
   * only if we truncated the document.
   * @param cutoffSize cutoffSize or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setCutoffSize(java.lang.Long cutoffSize) {
    this.cutoffSize = cutoffSize;
    return this;
  }

  /**
   * DEPRECATED, see field 113. Stores the HTTP version we used in the final hop.
   * @return value or {@code null} for none
   */
  public java.lang.String getHttpVersion() {
    return httpVersion;
  }

  /**
   * DEPRECATED, see field 113. Stores the HTTP version we used in the final hop.
   * @param httpVersion httpVersion or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setHttpVersion(java.lang.String httpVersion) {
    this.httpVersion = httpVersion;
    return this;
  }

  /**
   * DEPRECATED, see field 114. Whether we fallback from HTTP/2 to HTTP/1.1 during fetch. The
   * fallback could happen in any hops and there can be at most one fallback because once fallback
   * happens, we will not try HTTP/2 anymore.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getProtocolVersionFallback() {
    return protocolVersionFallback;
  }

  /**
   * DEPRECATED, see field 114. Whether we fallback from HTTP/2 to HTTP/1.1 during fetch. The
   * fallback could happen in any hops and there can be at most one fallback because once fallback
   * happens, we will not try HTTP/2 anymore.
   * @param protocolVersionFallback protocolVersionFallback or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setProtocolVersionFallback(java.lang.Boolean protocolVersionFallback) {
    this.protocolVersionFallback = protocolVersionFallback;
    return this;
  }

  /**
   * The amount of data we got from the webserver before any truncation, but after undoing any HTTP
   * gzip/deflate encoding. For HTTP, this includes headers and uncompressed content. Content size
   * is excluded if content was not successfully fetched. See description above TotalFetchedSize for
   * comparison.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUnTruncatedSize() {
    return unTruncatedSize;
  }

  /**
   * The amount of data we got from the webserver before any truncation, but after undoing any HTTP
   * gzip/deflate encoding. For HTTP, this includes headers and uncompressed content. Content size
   * is excluded if content was not successfully fetched. See description above TotalFetchedSize for
   * comparison.
   * @param unTruncatedSize unTruncatedSize or {@code null} for none
   */
  public TrawlerFetchReplyDataProtocolResponse setUnTruncatedSize(java.lang.Long unTruncatedSize) {
    this.unTruncatedSize = unTruncatedSize;
    return this;
  }

  @Override
  public TrawlerFetchReplyDataProtocolResponse set(String fieldName, Object value) {
    return (TrawlerFetchReplyDataProtocolResponse) super.set(fieldName, value);
  }

  @Override
  public TrawlerFetchReplyDataProtocolResponse clone() {
    return (TrawlerFetchReplyDataProtocolResponse) super.clone();
  }

}
