/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chat.v1.model;

/**
 * Lets users specify a date, a time, or both a date and a time. Accepts text input from users, but
 * features an interactive date and time selector that helps users enter correctly-formatted dates
 * and times. If users enter a date or time incorrectly, the widget shows an error that prompts
 * users to enter the correct format. Not supported by Chat apps. Support by Chat apps coming soon.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Chat API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAppsCardV1DateTimePicker extends com.google.api.client.json.GenericJson {

  /**
   * The text that prompts users to enter a date, time, or datetime. Specify text that helps the
   * user enter the information your app needs. For example, if users are setting an appointment,
   * then a label like "Appointment date" or "Appointment date and time" might work well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * The name by which the datetime picker is identified in a form input event. For details about
   * working with form inputs, see [Receive form data](https://developers.google.com/chat/how-
   * tos/dialogs#receive_form_data_from_dialogs).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Triggered when the user clicks **Save** or **Clear** from the datetime picker interface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Action onChangeAction;

  /**
   * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch`
   * is displayed in the specified time zone. If not set, it uses the user's time zone setting on
   * the client side.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timezoneOffsetDate;

  /**
   * What kind of date and time input the datetime picker supports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The value displayed as the default value before user input or previous user input, represented
   * in milliseconds ([Epoch time](https://en.wikipedia.org/wiki/Unix_time)). For `DATE_AND_TIME`
   * type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used.
   * For `TIME_ONLY` type, only time of the epoch time is used. For example, to represent 3:00 AM,
   * set epoch time to `3 * 60 * 60 * 1000`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long valueMsEpoch;

  /**
   * The text that prompts users to enter a date, time, or datetime. Specify text that helps the
   * user enter the information your app needs. For example, if users are setting an appointment,
   * then a label like "Appointment date" or "Appointment date and time" might work well.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * The text that prompts users to enter a date, time, or datetime. Specify text that helps the
   * user enter the information your app needs. For example, if users are setting an appointment,
   * then a label like "Appointment date" or "Appointment date and time" might work well.
   * @param label label or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * The name by which the datetime picker is identified in a form input event. For details about
   * working with form inputs, see [Receive form data](https://developers.google.com/chat/how-
   * tos/dialogs#receive_form_data_from_dialogs).
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name by which the datetime picker is identified in a form input event. For details about
   * working with form inputs, see [Receive form data](https://developers.google.com/chat/how-
   * tos/dialogs#receive_form_data_from_dialogs).
   * @param name name or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Triggered when the user clicks **Save** or **Clear** from the datetime picker interface.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Action getOnChangeAction() {
    return onChangeAction;
  }

  /**
   * Triggered when the user clicks **Save** or **Clear** from the datetime picker interface.
   * @param onChangeAction onChangeAction or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setOnChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
    return this;
  }

  /**
   * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch`
   * is displayed in the specified time zone. If not set, it uses the user's time zone setting on
   * the client side.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimezoneOffsetDate() {
    return timezoneOffsetDate;
  }

  /**
   * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch`
   * is displayed in the specified time zone. If not set, it uses the user's time zone setting on
   * the client side.
   * @param timezoneOffsetDate timezoneOffsetDate or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setTimezoneOffsetDate(java.lang.Integer timezoneOffsetDate) {
    this.timezoneOffsetDate = timezoneOffsetDate;
    return this;
  }

  /**
   * What kind of date and time input the datetime picker supports.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * What kind of date and time input the datetime picker supports.
   * @param type type or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The value displayed as the default value before user input or previous user input, represented
   * in milliseconds ([Epoch time](https://en.wikipedia.org/wiki/Unix_time)). For `DATE_AND_TIME`
   * type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used.
   * For `TIME_ONLY` type, only time of the epoch time is used. For example, to represent 3:00 AM,
   * set epoch time to `3 * 60 * 60 * 1000`.
   * @return value or {@code null} for none
   */
  public java.lang.Long getValueMsEpoch() {
    return valueMsEpoch;
  }

  /**
   * The value displayed as the default value before user input or previous user input, represented
   * in milliseconds ([Epoch time](https://en.wikipedia.org/wiki/Unix_time)). For `DATE_AND_TIME`
   * type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used.
   * For `TIME_ONLY` type, only time of the epoch time is used. For example, to represent 3:00 AM,
   * set epoch time to `3 * 60 * 60 * 1000`.
   * @param valueMsEpoch valueMsEpoch or {@code null} for none
   */
  public GoogleAppsCardV1DateTimePicker setValueMsEpoch(java.lang.Long valueMsEpoch) {
    this.valueMsEpoch = valueMsEpoch;
    return this;
  }

  @Override
  public GoogleAppsCardV1DateTimePicker set(String fieldName, Object value) {
    return (GoogleAppsCardV1DateTimePicker) super.set(fieldName, value);
  }

  @Override
  public GoogleAppsCardV1DateTimePicker clone() {
    return (GoogleAppsCardV1DateTimePicker) super.clone();
  }

}
