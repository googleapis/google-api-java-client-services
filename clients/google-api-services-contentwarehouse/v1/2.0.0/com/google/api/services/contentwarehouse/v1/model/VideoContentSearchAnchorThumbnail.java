/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Properties of the thumbnail image to show for an anchor.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchAnchorThumbnail extends com.google.api.client.json.GenericJson {

  /**
   * Serving docid for the thumbnail in the images-tbn tables.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger imagesearchDocid;

  /**
   * Set to true when no thumbnail could be generated for this anchor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isThumbnailMissing;

  /**
   * Metadata about the anchor thumbnail computed by Amarna, including dimensions and the size in
   * bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageBaseThumbnailMetadata servingMetadata;

  /**
   * Information about the thumbnail anchor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchAnchorThumbnailInfo thumbnailInfo;

  /**
   * Millisecond timestamp of the frame used for the thumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timestampMs;

  /**
   * Serving docid for the thumbnail in the images-tbn tables.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getImagesearchDocid() {
    return imagesearchDocid;
  }

  /**
   * Serving docid for the thumbnail in the images-tbn tables.
   * @param imagesearchDocid imagesearchDocid or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnail setImagesearchDocid(java.math.BigInteger imagesearchDocid) {
    this.imagesearchDocid = imagesearchDocid;
    return this;
  }

  /**
   * Set to true when no thumbnail could be generated for this anchor.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsThumbnailMissing() {
    return isThumbnailMissing;
  }

  /**
   * Set to true when no thumbnail could be generated for this anchor.
   * @param isThumbnailMissing isThumbnailMissing or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnail setIsThumbnailMissing(java.lang.Boolean isThumbnailMissing) {
    this.isThumbnailMissing = isThumbnailMissing;
    return this;
  }

  /**
   * Metadata about the anchor thumbnail computed by Amarna, including dimensions and the size in
   * bytes.
   * @return value or {@code null} for none
   */
  public ImageBaseThumbnailMetadata getServingMetadata() {
    return servingMetadata;
  }

  /**
   * Metadata about the anchor thumbnail computed by Amarna, including dimensions and the size in
   * bytes.
   * @param servingMetadata servingMetadata or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnail setServingMetadata(ImageBaseThumbnailMetadata servingMetadata) {
    this.servingMetadata = servingMetadata;
    return this;
  }

  /**
   * Information about the thumbnail anchor.
   * @return value or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnailInfo getThumbnailInfo() {
    return thumbnailInfo;
  }

  /**
   * Information about the thumbnail anchor.
   * @param thumbnailInfo thumbnailInfo or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnail setThumbnailInfo(VideoContentSearchAnchorThumbnailInfo thumbnailInfo) {
    this.thumbnailInfo = thumbnailInfo;
    return this;
  }

  /**
   * Millisecond timestamp of the frame used for the thumbnail.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimestampMs() {
    return timestampMs;
  }

  /**
   * Millisecond timestamp of the frame used for the thumbnail.
   * @param timestampMs timestampMs or {@code null} for none
   */
  public VideoContentSearchAnchorThumbnail setTimestampMs(java.lang.Integer timestampMs) {
    this.timestampMs = timestampMs;
    return this;
  }

  @Override
  public VideoContentSearchAnchorThumbnail set(String fieldName, Object value) {
    return (VideoContentSearchAnchorThumbnail) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchAnchorThumbnail clone() {
    return (VideoContentSearchAnchorThumbnail) super.clone();
  }

}
