/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.reviews_v1beta.model;

/**
 * A review for a merchant. For more information, see [Introduction to Merchant Review
 * Feeds](https://developers.google.com/merchant-review-feeds)
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MerchantReview extends com.google.api.client.json.GenericJson {

  /**
   * Optional. A list of merchant review attributes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MerchantReviewAttributes attributes;

  /**
   * Required. A list of custom (merchant-provided) attributes. It can also be used for submitting
   * any attribute of the data specification in its generic form (for example, `{ "name": "size
   * type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed
   * by the API, such as experimental attributes. Maximum allowed number of characters for each
   * custom attribute is 10240 (represents sum of characters for name and value). Maximum 2500
   * custom attributes can be set per product, with total size of 102.4kB. Underscores in custom
   * attribute names are replaced by spaces upon insertion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CustomAttribute> customAttributes;

  static {
    // hack to force ProGuard to consider CustomAttribute used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomAttribute.class);
  }

  /**
   * Output only. The primary data source of the merchant review.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataSource;

  /**
   * Required. The user provided merchant review ID to uniquely identify the merchant review.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String merchantReviewId;

  /**
   * Output only. The status of a merchant review, data validation issues, that is, information
   * about a merchant review computed asynchronously.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MerchantReviewStatus merchantReviewStatus;

  /**
   * Identifier. The name of the merchant review. Format:
   * `"{merchantreview.name=accounts/{account}/merchantReviews/{merchantReview}}"`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. A list of merchant review attributes.
   * @return value or {@code null} for none
   */
  public MerchantReviewAttributes getAttributes() {
    return attributes;
  }

  /**
   * Optional. A list of merchant review attributes.
   * @param attributes attributes or {@code null} for none
   */
  public MerchantReview setAttributes(MerchantReviewAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Required. A list of custom (merchant-provided) attributes. It can also be used for submitting
   * any attribute of the data specification in its generic form (for example, `{ "name": "size
   * type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed
   * by the API, such as experimental attributes. Maximum allowed number of characters for each
   * custom attribute is 10240 (represents sum of characters for name and value). Maximum 2500
   * custom attributes can be set per product, with total size of 102.4kB. Underscores in custom
   * attribute names are replaced by spaces upon insertion.
   * @return value or {@code null} for none
   */
  public java.util.List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  /**
   * Required. A list of custom (merchant-provided) attributes. It can also be used for submitting
   * any attribute of the data specification in its generic form (for example, `{ "name": "size
   * type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed
   * by the API, such as experimental attributes. Maximum allowed number of characters for each
   * custom attribute is 10240 (represents sum of characters for name and value). Maximum 2500
   * custom attributes can be set per product, with total size of 102.4kB. Underscores in custom
   * attribute names are replaced by spaces upon insertion.
   * @param customAttributes customAttributes or {@code null} for none
   */
  public MerchantReview setCustomAttributes(java.util.List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * Output only. The primary data source of the merchant review.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataSource() {
    return dataSource;
  }

  /**
   * Output only. The primary data source of the merchant review.
   * @param dataSource dataSource or {@code null} for none
   */
  public MerchantReview setDataSource(java.lang.String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Required. The user provided merchant review ID to uniquely identify the merchant review.
   * @return value or {@code null} for none
   */
  public java.lang.String getMerchantReviewId() {
    return merchantReviewId;
  }

  /**
   * Required. The user provided merchant review ID to uniquely identify the merchant review.
   * @param merchantReviewId merchantReviewId or {@code null} for none
   */
  public MerchantReview setMerchantReviewId(java.lang.String merchantReviewId) {
    this.merchantReviewId = merchantReviewId;
    return this;
  }

  /**
   * Output only. The status of a merchant review, data validation issues, that is, information
   * about a merchant review computed asynchronously.
   * @return value or {@code null} for none
   */
  public MerchantReviewStatus getMerchantReviewStatus() {
    return merchantReviewStatus;
  }

  /**
   * Output only. The status of a merchant review, data validation issues, that is, information
   * about a merchant review computed asynchronously.
   * @param merchantReviewStatus merchantReviewStatus or {@code null} for none
   */
  public MerchantReview setMerchantReviewStatus(MerchantReviewStatus merchantReviewStatus) {
    this.merchantReviewStatus = merchantReviewStatus;
    return this;
  }

  /**
   * Identifier. The name of the merchant review. Format:
   * `"{merchantreview.name=accounts/{account}/merchantReviews/{merchantReview}}"`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name of the merchant review. Format:
   * `"{merchantreview.name=accounts/{account}/merchantReviews/{merchantReview}}"`
   * @param name name or {@code null} for none
   */
  public MerchantReview setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public MerchantReview set(String fieldName, Object value) {
    return (MerchantReview) super.set(fieldName, value);
  }

  @Override
  public MerchantReview clone() {
    return (MerchantReview) super.clone();
  }

}
