/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1.model;

/**
 * A write on a document.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Write extends com.google.api.client.json.GenericJson {

  /**
   * An optional precondition on the document. The write will fail if this is set and not met by the
   * target document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Precondition currentDocument;

  /**
   * A document name to delete. In the format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String delete;

  /**
   * Applies a transformation to a document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DocumentTransform transform;

  /**
   * A document to write.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Document update;

  /**
   * The fields to update in this write. This field can be set only when the operation is `update`.
   * If the mask is not set for an `update` and the document exists, any existing data will be
   * overwritten. If the mask is set and the document on the server has fields not covered by the
   * mask, they are left unchanged. Fields referenced in the mask, but not present in the input
   * document, are deleted from the document on the server. The field paths in this mask must not
   * contain a reserved field name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DocumentMask updateMask;

  /**
   * The transforms to perform after update. This field can be set only when the operation is
   * `update`. If present, this write is equivalent to performing `update` and `transform` to the
   * same document atomically and in order.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FieldTransform> updateTransforms;

  static {
    // hack to force ProGuard to consider FieldTransform used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FieldTransform.class);
  }

  /**
   * An optional precondition on the document. The write will fail if this is set and not met by the
   * target document.
   * @return value or {@code null} for none
   */
  public Precondition getCurrentDocument() {
    return currentDocument;
  }

  /**
   * An optional precondition on the document. The write will fail if this is set and not met by the
   * target document.
   * @param currentDocument currentDocument or {@code null} for none
   */
  public Write setCurrentDocument(Precondition currentDocument) {
    this.currentDocument = currentDocument;
    return this;
  }

  /**
   * A document name to delete. In the format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDelete() {
    return delete;
  }

  /**
   * A document name to delete. In the format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
   * @param delete delete or {@code null} for none
   */
  public Write setDelete(java.lang.String delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Applies a transformation to a document.
   * @return value or {@code null} for none
   */
  public DocumentTransform getTransform() {
    return transform;
  }

  /**
   * Applies a transformation to a document.
   * @param transform transform or {@code null} for none
   */
  public Write setTransform(DocumentTransform transform) {
    this.transform = transform;
    return this;
  }

  /**
   * A document to write.
   * @return value or {@code null} for none
   */
  public Document getUpdate() {
    return update;
  }

  /**
   * A document to write.
   * @param update update or {@code null} for none
   */
  public Write setUpdate(Document update) {
    this.update = update;
    return this;
  }

  /**
   * The fields to update in this write. This field can be set only when the operation is `update`.
   * If the mask is not set for an `update` and the document exists, any existing data will be
   * overwritten. If the mask is set and the document on the server has fields not covered by the
   * mask, they are left unchanged. Fields referenced in the mask, but not present in the input
   * document, are deleted from the document on the server. The field paths in this mask must not
   * contain a reserved field name.
   * @return value or {@code null} for none
   */
  public DocumentMask getUpdateMask() {
    return updateMask;
  }

  /**
   * The fields to update in this write. This field can be set only when the operation is `update`.
   * If the mask is not set for an `update` and the document exists, any existing data will be
   * overwritten. If the mask is set and the document on the server has fields not covered by the
   * mask, they are left unchanged. Fields referenced in the mask, but not present in the input
   * document, are deleted from the document on the server. The field paths in this mask must not
   * contain a reserved field name.
   * @param updateMask updateMask or {@code null} for none
   */
  public Write setUpdateMask(DocumentMask updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  /**
   * The transforms to perform after update. This field can be set only when the operation is
   * `update`. If present, this write is equivalent to performing `update` and `transform` to the
   * same document atomically and in order.
   * @return value or {@code null} for none
   */
  public java.util.List<FieldTransform> getUpdateTransforms() {
    return updateTransforms;
  }

  /**
   * The transforms to perform after update. This field can be set only when the operation is
   * `update`. If present, this write is equivalent to performing `update` and `transform` to the
   * same document atomically and in order.
   * @param updateTransforms updateTransforms or {@code null} for none
   */
  public Write setUpdateTransforms(java.util.List<FieldTransform> updateTransforms) {
    this.updateTransforms = updateTransforms;
    return this;
  }

  @Override
  public Write set(String fieldName, Object value) {
    return (Write) super.set(fieldName, value);
  }

  @Override
  public Write clone() {
    return (Write) super.clone();
  }

}
