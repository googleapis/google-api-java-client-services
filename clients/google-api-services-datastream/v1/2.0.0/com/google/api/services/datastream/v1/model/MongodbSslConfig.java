/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * MongoDB SSL configuration information.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MongodbSslConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String caCertificate;

  /**
   * Output only. Indicates whether the ca_certificate field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean caCertificateSet;

  /**
   * Optional. Input only. PEM-encoded certificate that will be used by the replica to authenticate
   * against the source database server. If this field is used then the 'client_key' and the
   * 'ca_certificate' fields are mandatory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientCertificate;

  /**
   * Output only. Indicates whether the client_certificate field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean clientCertificateSet;

  /**
   * Optional. Input only. PEM-encoded private key associated with the Client Certificate. If this
   * field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientKey;

  /**
   * Output only. Indicates whether the client_key field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean clientKeySet;

  /**
   * Optional. Input only. A reference to a Secret Manager resource name storing the PEM-encoded
   * private key associated with the Client Certificate. If this field is used then the
   * 'client_certificate' and the 'ca_certificate' fields are mandatory. Mutually exclusive with the
   * `client_key` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String secretManagerStoredClientKey;

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCaCertificate() {
    return caCertificate;
  }

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * @param caCertificate caCertificate or {@code null} for none
   */
  public MongodbSslConfig setCaCertificate(java.lang.String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * Output only. Indicates whether the ca_certificate field is set.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCaCertificateSet() {
    return caCertificateSet;
  }

  /**
   * Output only. Indicates whether the ca_certificate field is set.
   * @param caCertificateSet caCertificateSet or {@code null} for none
   */
  public MongodbSslConfig setCaCertificateSet(java.lang.Boolean caCertificateSet) {
    this.caCertificateSet = caCertificateSet;
    return this;
  }

  /**
   * Optional. Input only. PEM-encoded certificate that will be used by the replica to authenticate
   * against the source database server. If this field is used then the 'client_key' and the
   * 'ca_certificate' fields are mandatory.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientCertificate() {
    return clientCertificate;
  }

  /**
   * Optional. Input only. PEM-encoded certificate that will be used by the replica to authenticate
   * against the source database server. If this field is used then the 'client_key' and the
   * 'ca_certificate' fields are mandatory.
   * @param clientCertificate clientCertificate or {@code null} for none
   */
  public MongodbSslConfig setClientCertificate(java.lang.String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * Output only. Indicates whether the client_certificate field is set.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getClientCertificateSet() {
    return clientCertificateSet;
  }

  /**
   * Output only. Indicates whether the client_certificate field is set.
   * @param clientCertificateSet clientCertificateSet or {@code null} for none
   */
  public MongodbSslConfig setClientCertificateSet(java.lang.Boolean clientCertificateSet) {
    this.clientCertificateSet = clientCertificateSet;
    return this;
  }

  /**
   * Optional. Input only. PEM-encoded private key associated with the Client Certificate. If this
   * field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientKey() {
    return clientKey;
  }

  /**
   * Optional. Input only. PEM-encoded private key associated with the Client Certificate. If this
   * field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
   * @param clientKey clientKey or {@code null} for none
   */
  public MongodbSslConfig setClientKey(java.lang.String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  /**
   * Output only. Indicates whether the client_key field is set.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getClientKeySet() {
    return clientKeySet;
  }

  /**
   * Output only. Indicates whether the client_key field is set.
   * @param clientKeySet clientKeySet or {@code null} for none
   */
  public MongodbSslConfig setClientKeySet(java.lang.Boolean clientKeySet) {
    this.clientKeySet = clientKeySet;
    return this;
  }

  /**
   * Optional. Input only. A reference to a Secret Manager resource name storing the PEM-encoded
   * private key associated with the Client Certificate. If this field is used then the
   * 'client_certificate' and the 'ca_certificate' fields are mandatory. Mutually exclusive with the
   * `client_key` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getSecretManagerStoredClientKey() {
    return secretManagerStoredClientKey;
  }

  /**
   * Optional. Input only. A reference to a Secret Manager resource name storing the PEM-encoded
   * private key associated with the Client Certificate. If this field is used then the
   * 'client_certificate' and the 'ca_certificate' fields are mandatory. Mutually exclusive with the
   * `client_key` field.
   * @param secretManagerStoredClientKey secretManagerStoredClientKey or {@code null} for none
   */
  public MongodbSslConfig setSecretManagerStoredClientKey(java.lang.String secretManagerStoredClientKey) {
    this.secretManagerStoredClientKey = secretManagerStoredClientKey;
    return this;
  }

  @Override
  public MongodbSslConfig set(String fieldName, Object value) {
    return (MongodbSslConfig) super.set(fieldName, value);
  }

  @Override
  public MongodbSslConfig clone() {
    return (MongodbSslConfig) super.clone();
  }

}
