/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Provides detail about non-compliance with a policy setting.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NonComplianceDetail extends com.google.api.client.json.GenericJson {

  /**
   * If the policy setting could not be applied, the current value of the setting on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Object currentValue;

  /**
   * For settings with nested fields, if a particular nested field is out of compliance, this
   * specifies the full path to the offending field. The path is formatted in the same way the
   * policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the
   * field name is followed by a dot then by a  subfield name. 2) For array-typed fields, the field
   * name is followed by the array index  enclosed in brackets. For example, to indicate a problem
   * with the url field in the externalData field in the 3rd application, the path would be
   * applications[2].externalData.url
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fieldPath;

  /**
   * If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED,
   * the detailed reason the app can't be installed or updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String installationFailureReason;

  /**
   * The reason the device is not in compliance with the setting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nonComplianceReason;

  /**
   * The package name indicating which app is out of compliance, if applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageName;

  /**
   * The name of the policy setting. This is the JSON field name of a top-level Policy  field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String settingName;

  /**
   * If the policy setting could not be applied, the current value of the setting on the device.
   * @return value or {@code null} for none
   */
  public java.lang.Object getCurrentValue() {
    return currentValue;
  }

  /**
   * If the policy setting could not be applied, the current value of the setting on the device.
   * @param currentValue currentValue or {@code null} for none
   */
  public NonComplianceDetail setCurrentValue(java.lang.Object currentValue) {
    this.currentValue = currentValue;
    return this;
  }

  /**
   * For settings with nested fields, if a particular nested field is out of compliance, this
   * specifies the full path to the offending field. The path is formatted in the same way the
   * policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the
   * field name is followed by a dot then by a  subfield name. 2) For array-typed fields, the field
   * name is followed by the array index  enclosed in brackets. For example, to indicate a problem
   * with the url field in the externalData field in the 3rd application, the path would be
   * applications[2].externalData.url
   * @return value or {@code null} for none
   */
  public java.lang.String getFieldPath() {
    return fieldPath;
  }

  /**
   * For settings with nested fields, if a particular nested field is out of compliance, this
   * specifies the full path to the offending field. The path is formatted in the same way the
   * policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the
   * field name is followed by a dot then by a  subfield name. 2) For array-typed fields, the field
   * name is followed by the array index  enclosed in brackets. For example, to indicate a problem
   * with the url field in the externalData field in the 3rd application, the path would be
   * applications[2].externalData.url
   * @param fieldPath fieldPath or {@code null} for none
   */
  public NonComplianceDetail setFieldPath(java.lang.String fieldPath) {
    this.fieldPath = fieldPath;
    return this;
  }

  /**
   * If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED,
   * the detailed reason the app can't be installed or updated.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstallationFailureReason() {
    return installationFailureReason;
  }

  /**
   * If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED,
   * the detailed reason the app can't be installed or updated.
   * @param installationFailureReason installationFailureReason or {@code null} for none
   */
  public NonComplianceDetail setInstallationFailureReason(java.lang.String installationFailureReason) {
    this.installationFailureReason = installationFailureReason;
    return this;
  }

  /**
   * The reason the device is not in compliance with the setting.
   * @return value or {@code null} for none
   */
  public java.lang.String getNonComplianceReason() {
    return nonComplianceReason;
  }

  /**
   * The reason the device is not in compliance with the setting.
   * @param nonComplianceReason nonComplianceReason or {@code null} for none
   */
  public NonComplianceDetail setNonComplianceReason(java.lang.String nonComplianceReason) {
    this.nonComplianceReason = nonComplianceReason;
    return this;
  }

  /**
   * The package name indicating which app is out of compliance, if applicable.
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * The package name indicating which app is out of compliance, if applicable.
   * @param packageName packageName or {@code null} for none
   */
  public NonComplianceDetail setPackageName(java.lang.String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * The name of the policy setting. This is the JSON field name of a top-level Policy  field.
   * @return value or {@code null} for none
   */
  public java.lang.String getSettingName() {
    return settingName;
  }

  /**
   * The name of the policy setting. This is the JSON field name of a top-level Policy  field.
   * @param settingName settingName or {@code null} for none
   */
  public NonComplianceDetail setSettingName(java.lang.String settingName) {
    this.settingName = settingName;
    return this;
  }

  @Override
  public NonComplianceDetail set(String fieldName, Object value) {
    return (NonComplianceDetail) super.set(fieldName, value);
  }

  @Override
  public NonComplianceDetail clone() {
    return (NonComplianceDetail) super.clone();
  }

}
