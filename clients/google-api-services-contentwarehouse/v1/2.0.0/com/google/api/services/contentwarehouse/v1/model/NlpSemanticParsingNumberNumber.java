/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next ID: 9
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingNumberNumber extends com.google.api.client.json.GenericJson {

  /**
   * Span info of the annotation - mostly used for evaluation purpose. Note: this data must never be
   * used outside Aqua because it relies on the internal tokenization used in Aqua that could change
   * over time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingAnnotationEvalData evalData;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingNumberFractionNumber fractionNumber;

  /**
   * An optional field that holds whether the number_type number is a normalized spelled-out number
   * or not. This field will not be set in cases when this information is not available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSpelledOut;

  /**
   * NumberModifier is used to capture when the expression is not an absolute number, but a number
   * expression to represent an increase/decrease/comparison. E.g. [10 more percent], [5 less].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modifier;

  /**
   * Contains a normalized string representation of the numeric value that has: * No digit grouping
   * delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). For fraction_number,
   * this contains the floating point representation of the fraction. The number of digits after the
   * decimal point is defined in the precision field of fraction_number.proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String normalizedValue;

  /**
   * The raw text of the annotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawText;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingNumberSimpleNumber simpleNumber;

  /**
   * We expect this field to be set only when is_spelled_out is true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spelledOutType;

  /**
   * Span info of the annotation - mostly used for evaluation purpose. Note: this data must never be
   * used outside Aqua because it relies on the internal tokenization used in Aqua that could change
   * over time.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData getEvalData() {
    return evalData;
  }

  /**
   * Span info of the annotation - mostly used for evaluation purpose. Note: this data must never be
   * used outside Aqua because it relies on the internal tokenization used in Aqua that could change
   * over time.
   * @param evalData evalData or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setEvalData(NlpSemanticParsingAnnotationEvalData evalData) {
    this.evalData = evalData;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingNumberFractionNumber getFractionNumber() {
    return fractionNumber;
  }

  /**
   * @param fractionNumber fractionNumber or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setFractionNumber(NlpSemanticParsingNumberFractionNumber fractionNumber) {
    this.fractionNumber = fractionNumber;
    return this;
  }

  /**
   * An optional field that holds whether the number_type number is a normalized spelled-out number
   * or not. This field will not be set in cases when this information is not available.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSpelledOut() {
    return isSpelledOut;
  }

  /**
   * An optional field that holds whether the number_type number is a normalized spelled-out number
   * or not. This field will not be set in cases when this information is not available.
   * @param isSpelledOut isSpelledOut or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setIsSpelledOut(java.lang.Boolean isSpelledOut) {
    this.isSpelledOut = isSpelledOut;
    return this;
  }

  /**
   * NumberModifier is used to capture when the expression is not an absolute number, but a number
   * expression to represent an increase/decrease/comparison. E.g. [10 more percent], [5 less].
   * @return value or {@code null} for none
   */
  public java.lang.String getModifier() {
    return modifier;
  }

  /**
   * NumberModifier is used to capture when the expression is not an absolute number, but a number
   * expression to represent an increase/decrease/comparison. E.g. [10 more percent], [5 less].
   * @param modifier modifier or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setModifier(java.lang.String modifier) {
    this.modifier = modifier;
    return this;
  }

  /**
   * Contains a normalized string representation of the numeric value that has: * No digit grouping
   * delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). For fraction_number,
   * this contains the floating point representation of the fraction. The number of digits after the
   * decimal point is defined in the precision field of fraction_number.proto.
   * @return value or {@code null} for none
   */
  public java.lang.String getNormalizedValue() {
    return normalizedValue;
  }

  /**
   * Contains a normalized string representation of the numeric value that has: * No digit grouping
   * delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). For fraction_number,
   * this contains the floating point representation of the fraction. The number of digits after the
   * decimal point is defined in the precision field of fraction_number.proto.
   * @param normalizedValue normalizedValue or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setNormalizedValue(java.lang.String normalizedValue) {
    this.normalizedValue = normalizedValue;
    return this;
  }

  /**
   * The raw text of the annotation.
   * @return value or {@code null} for none
   */
  public java.lang.String getRawText() {
    return rawText;
  }

  /**
   * The raw text of the annotation.
   * @param rawText rawText or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setRawText(java.lang.String rawText) {
    this.rawText = rawText;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingNumberSimpleNumber getSimpleNumber() {
    return simpleNumber;
  }

  /**
   * @param simpleNumber simpleNumber or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setSimpleNumber(NlpSemanticParsingNumberSimpleNumber simpleNumber) {
    this.simpleNumber = simpleNumber;
    return this;
  }

  /**
   * We expect this field to be set only when is_spelled_out is true.
   * @return value or {@code null} for none
   */
  public java.lang.String getSpelledOutType() {
    return spelledOutType;
  }

  /**
   * We expect this field to be set only when is_spelled_out is true.
   * @param spelledOutType spelledOutType or {@code null} for none
   */
  public NlpSemanticParsingNumberNumber setSpelledOutType(java.lang.String spelledOutType) {
    this.spelledOutType = spelledOutType;
    return this;
  }

  @Override
  public NlpSemanticParsingNumberNumber set(String fieldName, Object value) {
    return (NlpSemanticParsingNumberNumber) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingNumberNumber clone() {
    return (NlpSemanticParsingNumberNumber) super.clone();
  }

}
