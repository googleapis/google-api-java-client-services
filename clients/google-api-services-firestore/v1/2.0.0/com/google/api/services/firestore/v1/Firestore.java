/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1;

/**
 * Service definition for Firestore (v1).
 *
 * <p>
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/firestore" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirestoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Firestore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Cloud Firestore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firestore.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firestore.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Firestore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Firestore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firestore firestore = new Firestore(...);}
   *   {@code Firestore.Projects.List request = firestore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Databases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firestore firestore = new Firestore(...);}
     *   {@code Firestore.Databases.List request = firestore.databases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Databases databases() {
      return new Databases();
    }

    /**
     * The "databases" collection of methods.
     */
    public class Databases {

      /**
       * Bulk deletes a subset of documents from Google Cloud Firestore. Documents created or updated
       * after the underlying system starts to process the request will not be deleted. The bulk delete
       * occurs in the background and its progress can be monitored and managed via the Operation resource
       * that is created. For more details on bulk delete behavior, refer to:
       * https://cloud.google.com/firestore/docs/manage-data/bulk-delete
       *
       * Create a request for the method "databases.bulkDeleteDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link BulkDeleteDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Required. Database to operate. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BulkDeleteDocumentsRequest}
       * @return the request
       */
      public BulkDeleteDocuments bulkDeleteDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BulkDeleteDocumentsRequest content) throws java.io.IOException {
        BulkDeleteDocuments result = new BulkDeleteDocuments(name, content);
        initialize(result);
        return result;
      }

      public class BulkDeleteDocuments extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}:bulkDeleteDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Bulk deletes a subset of documents from Google Cloud Firestore. Documents created or updated
         * after the underlying system starts to process the request will not be deleted. The bulk delete
         * occurs in the background and its progress can be monitored and managed via the Operation
         * resource that is created. For more details on bulk delete behavior, refer to:
         * https://cloud.google.com/firestore/docs/manage-data/bulk-delete
         *
         * Create a request for the method "databases.bulkDeleteDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link BulkDeleteDocuments#execute()} method to invoke the remote
         * operation. <p> {@link BulkDeleteDocuments#initialize(com.google.api.client.googleapis.services.
         * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param name Required. Database to operate. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BulkDeleteDocumentsRequest}
         * @since 1.13
         */
        protected BulkDeleteDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BulkDeleteDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public BulkDeleteDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (BulkDeleteDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public BulkDeleteDocuments setAccessToken(java.lang.String accessToken) {
          return (BulkDeleteDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public BulkDeleteDocuments setAlt(java.lang.String alt) {
          return (BulkDeleteDocuments) super.setAlt(alt);
        }

        @Override
        public BulkDeleteDocuments setCallback(java.lang.String callback) {
          return (BulkDeleteDocuments) super.setCallback(callback);
        }

        @Override
        public BulkDeleteDocuments setFields(java.lang.String fields) {
          return (BulkDeleteDocuments) super.setFields(fields);
        }

        @Override
        public BulkDeleteDocuments setKey(java.lang.String key) {
          return (BulkDeleteDocuments) super.setKey(key);
        }

        @Override
        public BulkDeleteDocuments setOauthToken(java.lang.String oauthToken) {
          return (BulkDeleteDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public BulkDeleteDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (BulkDeleteDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public BulkDeleteDocuments setQuotaUser(java.lang.String quotaUser) {
          return (BulkDeleteDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public BulkDeleteDocuments setUploadType(java.lang.String uploadType) {
          return (BulkDeleteDocuments) super.setUploadType(uploadType);
        }

        @Override
        public BulkDeleteDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (BulkDeleteDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Database to operate. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Database to operate. Should be of the form:
       `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Database to operate. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public BulkDeleteDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public BulkDeleteDocuments set(String parameterName, Object value) {
          return (BulkDeleteDocuments) super.set(parameterName, value);
        }
      }
      /**
       * Create a database.
       *
       * Create a request for the method "databases.create".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. A parent name of the form `projects/{project_id}`
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+parent}/databases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Create a database.
         *
         * Create a request for the method "databases.create".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. A parent name of the form `projects/{project_id}`
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. A parent name of the form `projects/{project_id}` */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. A parent name of the form `projects/{project_id}`
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. A parent name of the form `projects/{project_id}` */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Required. The ID to use for the database, which will become the final component of the
         * database's resource name. This value should be 4-63 characters. Valid characters are
         * /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-
         * like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
         */
        @com.google.api.client.util.Key
        private java.lang.String databaseId;

        /** Required. The ID to use for the database, which will become the final component of the database's
       resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first
       character a letter and the last a letter or a number. Must not be UUID-like
       /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
         */
        public java.lang.String getDatabaseId() {
          return databaseId;
        }

        /**
         * Required. The ID to use for the database, which will become the final component of the
         * database's resource name. This value should be 4-63 characters. Valid characters are
         * /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-
         * like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database ID is also valid.
         */
        public Create setDatabaseId(java.lang.String databaseId) {
          this.databaseId = databaseId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a database.
       *
       * Create a request for the method "databases.delete".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. A name of the form `projects/{project_id}/databases/{database_id}`
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Deletes a database.
         *
         * Create a request for the method "databases.delete".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. A name of the form `projects/{project_id}/databases/{database_id}`
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}` */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}`
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}` */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * The current etag of the Database. If an etag is provided and does not match the current
         * etag of the database, deletion will be blocked and a FAILED_PRECONDITION error will be
         * returned.
         */
        @com.google.api.client.util.Key
        private java.lang.String etag;

        /** The current etag of the Database. If an etag is provided and does not match the current etag of the
       database, deletion will be blocked and a FAILED_PRECONDITION error will be returned.
         */
        public java.lang.String getEtag() {
          return etag;
        }

        /**
         * The current etag of the Database. If an etag is provided and does not match the current
         * etag of the database, deletion will be blocked and a FAILED_PRECONDITION error will be
         * returned.
         */
        public Delete setEtag(java.lang.String etag) {
          this.etag = etag;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
       * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
       * export. The export occurs in the background and its progress can be monitored and managed via the
       * Operation resource that is created. The output of an export may only be used once the associated
       * operation is done. If an export operation is cancelled before completion it may leave partial
       * data behind in Google Cloud Storage. For more details on export behavior and output format, refer
       * to: https://cloud.google.com/firestore/docs/manage-data/export-import
       *
       * Create a request for the method "databases.exportDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ExportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Required. Database to export. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ExportDocumentsRequest}
       * @return the request
       */
      public ExportDocuments exportDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ExportDocumentsRequest content) throws java.io.IOException {
        ExportDocuments result = new ExportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ExportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}:exportDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
         * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
         * export. The export occurs in the background and its progress can be monitored and managed via
         * the Operation resource that is created. The output of an export may only be used once the
         * associated operation is done. If an export operation is cancelled before completion it may
         * leave partial data behind in Google Cloud Storage. For more details on export behavior and
         * output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import
         *
         * Create a request for the method "databases.exportDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ExportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ExportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Required. Database to export. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ExportDocumentsRequest}
         * @since 1.13
         */
        protected ExportDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ExportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ExportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ExportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExportDocuments setAccessToken(java.lang.String accessToken) {
          return (ExportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ExportDocuments setAlt(java.lang.String alt) {
          return (ExportDocuments) super.setAlt(alt);
        }

        @Override
        public ExportDocuments setCallback(java.lang.String callback) {
          return (ExportDocuments) super.setCallback(callback);
        }

        @Override
        public ExportDocuments setFields(java.lang.String fields) {
          return (ExportDocuments) super.setFields(fields);
        }

        @Override
        public ExportDocuments setKey(java.lang.String key) {
          return (ExportDocuments) super.setKey(key);
        }

        @Override
        public ExportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ExportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ExportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ExportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExportDocuments setUploadType(java.lang.String uploadType) {
          return (ExportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ExportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Database to export. Should be of the form:
       `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ExportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ExportDocuments set(String parameterName, Object value) {
          return (ExportDocuments) super.set(parameterName, value);
        }
      }
      /**
       * Gets information about a database.
       *
       * Create a request for the method "databases.get".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. A name of the form `projects/{project_id}/databases/{database_id}`
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Gets information about a database.
         *
         * Create a request for the method "databases.get".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. A name of the form `projects/{project_id}/databases/{database_id}`
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}` */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}`
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. A name of the form `projects/{project_id}/databases/{database_id}` */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Imports documents into Google Cloud Firestore. Existing documents with the same name are
       * overwritten. The import occurs in the background and its progress can be monitored and managed
       * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
       * possible that a subset of the data has already been imported to Cloud Firestore.
       *
       * Create a request for the method "databases.importDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ImportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Required. Database to import into. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ImportDocumentsRequest}
       * @return the request
       */
      public ImportDocuments importDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ImportDocumentsRequest content) throws java.io.IOException {
        ImportDocuments result = new ImportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ImportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}:importDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Imports documents into Google Cloud Firestore. Existing documents with the same name are
         * overwritten. The import occurs in the background and its progress can be monitored and managed
         * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
         * possible that a subset of the data has already been imported to Cloud Firestore.
         *
         * Create a request for the method "databases.importDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ImportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ImportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Required. Database to import into. Should be of the form:
       *        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ImportDocumentsRequest}
         * @since 1.13
         */
        protected ImportDocuments(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ImportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ImportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ImportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ImportDocuments setAccessToken(java.lang.String accessToken) {
          return (ImportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ImportDocuments setAlt(java.lang.String alt) {
          return (ImportDocuments) super.setAlt(alt);
        }

        @Override
        public ImportDocuments setCallback(java.lang.String callback) {
          return (ImportDocuments) super.setCallback(callback);
        }

        @Override
        public ImportDocuments setFields(java.lang.String fields) {
          return (ImportDocuments) super.setFields(fields);
        }

        @Override
        public ImportDocuments setKey(java.lang.String key) {
          return (ImportDocuments) super.setKey(key);
        }

        @Override
        public ImportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ImportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ImportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ImportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ImportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ImportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ImportDocuments setUploadType(java.lang.String uploadType) {
          return (ImportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ImportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ImportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Database to import into. Should be of the form:
       `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ImportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ImportDocuments set(String parameterName, Object value) {
          return (ImportDocuments) super.set(parameterName, value);
        }
      }
      /**
       * List all the databases in the project.
       *
       * Create a request for the method "databases.list".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. A parent name of the form `projects/{project_id}`
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListDatabasesResponse> {

        private static final String REST_PATH = "v1/{+parent}/databases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * List all the databases in the project.
         *
         * Create a request for the method "databases.list".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. A parent name of the form `projects/{project_id}`
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListDatabasesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. A parent name of the form `projects/{project_id}` */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. A parent name of the form `projects/{project_id}`
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. A parent name of the form `projects/{project_id}` */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** If true, also returns deleted resources. */
        @com.google.api.client.util.Key
        private java.lang.Boolean showDeleted;

        /** If true, also returns deleted resources.
         */
        public java.lang.Boolean getShowDeleted() {
          return showDeleted;
        }

        /** If true, also returns deleted resources. */
        public List setShowDeleted(java.lang.Boolean showDeleted) {
          this.showDeleted = showDeleted;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates a database.
       *
       * Create a request for the method "databases.patch".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the Database. Format: `projects/{project}/databases/{database}`
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Updates a database.
         *
         * Create a request for the method "databases.patch".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the Database. Format: `projects/{project}/databases/{database}`
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Database content) {
          super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource name of the Database. Format: `projects/{project}/databases/{database}` */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the Database. Format: `projects/{project}/databases/{database}`
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource name of the Database. Format: `projects/{project}/databases/{database}` */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The list of fields to be updated. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** The list of fields to be updated.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** The list of fields to be updated. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Creates a new database by restoring from an existing backup. The new database must be in the same
       * cloud region or multi-region location as the existing backup. This behaves similar to
       * FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is
       * created with the database type, index configuration, and documents from an existing backup. The
       * long-running operation can be used to track the progress of the restore, with the Operation's
       * metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the
       * restore was successful. The new database is not readable or writeable until the LRO has
       * completed.
       *
       * Create a request for the method "databases.restore".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Restore#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The project to restore the database in. Format is `projects/{project_id}`.
       * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1RestoreDatabaseRequest}
       * @return the request
       */
      public Restore restore(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1RestoreDatabaseRequest content) throws java.io.IOException {
        Restore result = new Restore(parent, content);
        initialize(result);
        return result;
      }

      public class Restore extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+parent}/databases:restore";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates a new database by restoring from an existing backup. The new database must be in the
         * same cloud region or multi-region location as the existing backup. This behaves similar to
         * FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database
         * is created with the database type, index configuration, and documents from an existing backup.
         * The long-running operation can be used to track the progress of the restore, with the
         * Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the
         * Database if the restore was successful. The new database is not readable or writeable until the
         * LRO has completed.
         *
         * Create a request for the method "databases.restore".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Restore#execute()} method to invoke the remote operation.
         * <p> {@link
         * Restore#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The project to restore the database in. Format is `projects/{project_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1RestoreDatabaseRequest}
         * @since 1.13
         */
        protected Restore(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1RestoreDatabaseRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Restore set$Xgafv(java.lang.String $Xgafv) {
          return (Restore) super.set$Xgafv($Xgafv);
        }

        @Override
        public Restore setAccessToken(java.lang.String accessToken) {
          return (Restore) super.setAccessToken(accessToken);
        }

        @Override
        public Restore setAlt(java.lang.String alt) {
          return (Restore) super.setAlt(alt);
        }

        @Override
        public Restore setCallback(java.lang.String callback) {
          return (Restore) super.setCallback(callback);
        }

        @Override
        public Restore setFields(java.lang.String fields) {
          return (Restore) super.setFields(fields);
        }

        @Override
        public Restore setKey(java.lang.String key) {
          return (Restore) super.setKey(key);
        }

        @Override
        public Restore setOauthToken(java.lang.String oauthToken) {
          return (Restore) super.setOauthToken(oauthToken);
        }

        @Override
        public Restore setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Restore) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Restore setQuotaUser(java.lang.String quotaUser) {
          return (Restore) super.setQuotaUser(quotaUser);
        }

        @Override
        public Restore setUploadType(java.lang.String uploadType) {
          return (Restore) super.setUploadType(uploadType);
        }

        @Override
        public Restore setUploadProtocol(java.lang.String uploadProtocol) {
          return (Restore) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The project to restore the database in. Format is `projects/{project_id}`. */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The project to restore the database in. Format is `projects/{project_id}`.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The project to restore the database in. Format is `projects/{project_id}`. */
        public Restore setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Restore set(String parameterName, Object value) {
          return (Restore) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the BackupSchedules collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.BackupSchedules.List request = firestore.backupSchedules().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public BackupSchedules backupSchedules() {
        return new BackupSchedules();
      }

      /**
       * The "backupSchedules" collection of methods.
       */
      public class BackupSchedules {

        /**
         * Creates a backup schedule on a database. At most two backup schedules can be configured on a
         * database, one daily backup schedule and one weekly backup schedule.
         *
         * Create a request for the method "backupSchedules.create".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent database. Format `projects/{project}/databases/{database}`
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule> {

          private static final String REST_PATH = "v1/{+parent}/backupSchedules";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Creates a backup schedule on a database. At most two backup schedules can be configured on a
           * database, one daily backup schedule and one weekly backup schedule.
           *
           * Create a request for the method "backupSchedules.create".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent database. Format `projects/{project}/databases/{database}`
           * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent database. Format `projects/{project}/databases/{database}` */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent database. Format `projects/{project}/databases/{database}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent database. Format `projects/{project}/databases/{database}` */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a backup schedule.
         *
         * Create a request for the method "backupSchedules.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the backup schedule. Format
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");

          /**
           * Deletes a backup schedule.
           *
           * Create a request for the method "backupSchedules.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the backup schedule. Format
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the backup schedule. Format
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the backup schedule. Format
         `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the backup schedule. Format
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets information about a backup schedule.
         *
         * Create a request for the method "backupSchedules.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the backup schedule. Format
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");

          /**
           * Gets information about a backup schedule.
           *
           * Create a request for the method "backupSchedules.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the backup schedule. Format
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the backup schedule. Format
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the backup schedule. Format
         `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the backup schedule. Format
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * List backup schedules.
         *
         * Create a request for the method "backupSchedules.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent database. Format is `projects/{project}/databases/{database}`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListBackupSchedulesResponse> {

          private static final String REST_PATH = "v1/{+parent}/backupSchedules";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * List backup schedules.
           *
           * Create a request for the method "backupSchedules.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent database. Format is `projects/{project}/databases/{database}`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListBackupSchedulesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent database. Format is `projects/{project}/databases/{database}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent database. Format is `projects/{project}/databases/{database}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent database. Format is `projects/{project}/databases/{database}`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a backup schedule.
         *
         * Create a request for the method "backupSchedules.patch".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Output only. The unique backup schedule identifier across all locations and databases for the given
         *        project. This will be auto-assigned. Format is
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");

          /**
           * Updates a backup schedule.
           *
           * Create a request for the method "backupSchedules.patch".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Output only. The unique backup schedule identifier across all locations and databases for the given
         *        project. This will be auto-assigned. Format is
         *        `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule content) {
            super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1BackupSchedule.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Output only. The unique backup schedule identifier across all locations and databases
           * for the given project. This will be auto-assigned. Format is
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Output only. The unique backup schedule identifier across all locations and databases for the given
         project. This will be auto-assigned. Format is
         `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Output only. The unique backup schedule identifier across all locations and databases
           * for the given project. This will be auto-assigned. Format is
           * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The list of fields to be updated. */
          @com.google.api.client.util.Key
          private String updateMask;

          /** The list of fields to be updated.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /** The list of fields to be updated. */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the CollectionGroups collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.CollectionGroups.List request = firestore.collectionGroups().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public CollectionGroups collectionGroups() {
        return new CollectionGroups();
      }

      /**
       * The "collectionGroups" collection of methods.
       */
      public class CollectionGroups {

        /**
         * An accessor for creating requests from the Fields collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firestore firestore = new Firestore(...);}
         *   {@code Firestore.Fields.List request = firestore.fields().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Fields fields() {
          return new Fields();
        }

        /**
         * The "fields" collection of methods.
         */
        public class Fields {

          /**
           * Gets the metadata and configuration for a Field.
           *
           * Create a request for the method "fields.get".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_id}`
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");

            /**
             * Gets the metadata and configuration for a Field.
             *
             * Create a request for the method "fields.get".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_id}`
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/fields/{field_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/fields/{field_id}`
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists the field configuration and metadata for this database. Currently,
           * FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To
           * issue this query, call FirestoreAdmin.ListFields with the filter set to
           * `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.
           *
           * Create a request for the method "fields.list".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListFieldsResponse> {

            private static final String REST_PATH = "v1/{+parent}/fields";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Lists the field configuration and metadata for this database. Currently,
             * FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To
             * issue this query, call FirestoreAdmin.ListFields with the filter set to
             * `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.
             *
             * Create a request for the method "fields.list".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListFieldsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The filter to apply to list results. Currently, FirestoreAdmin.ListFields only
             * supports listing fields that have been explicitly overridden. To issue this query,
             * call FirestoreAdmin.ListFields with a filter that includes
             * `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing
           fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields
           with a filter that includes `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * The filter to apply to list results. Currently, FirestoreAdmin.ListFields only
             * supports listing fields that have been explicitly overridden. To issue this query,
             * call FirestoreAdmin.ListFields with a filter that includes
             * `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The number of results to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The number of results to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The number of results to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be
             * used to get the next page of results.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get
           the next page of results.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be
             * used to get the next page of results.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a field configuration. Currently, field updates apply only to single field index
           * configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid
           * changing any configuration that the caller isn't aware of. The field mask should be specified as:
           * `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used
           * to track the status of the field update. The metadata for the operation will be the type
           * FieldOperationMetadata. To configure the default field settings for the database, use the special
           * `Field` with resource name:
           * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`.
           *
           * Create a request for the method "fields.patch".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Required. A field name of the form:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_path}` A field path can be a simple field name, e.g. `address` or a path to fields
           *        within `map_value` , e.g. `address.city`, or a special field path. The only valid special
           *        field is `*`, which represents any field. Field paths can be quoted using `` ` ``
           *        (backtick). The only character that must be escaped within a quoted field path is the
           *        backtick character itself, escaped using a backslash. Special characters in field paths
           *        that must be quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii
           *        symbolic characters. Examples: `` `address.city` `` represents a field named
           *        `address.city`, not the map key `city` in the field `address`. `` `*` `` represents a
           *        field named `*`, not any field. A special `Field` contains the default indexing settings
           *        for all fields. This field's resource name is:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
           *        Indexes defined on this `Field` will be applied to all fields which do not have their own
           *        `Field` index configuration.
           * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");

            /**
             * Updates a field configuration. Currently, field updates apply only to single field index
             * configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to
             * avoid changing any configuration that the caller isn't aware of. The field mask should be
             * specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation
             * which may be used to track the status of the field update. The metadata for the operation will
             * be the type FieldOperationMetadata. To configure the default field settings for the database,
             * use the special `Field` with resource name:
             * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`.
             *
             * Create a request for the method "fields.patch".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A field name of the form:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_path}` A field path can be a simple field name, e.g. `address` or a path to fields
           *        within `map_value` , e.g. `address.city`, or a special field path. The only valid special
           *        field is `*`, which represents any field. Field paths can be quoted using `` ` ``
           *        (backtick). The only character that must be escaped within a quoted field path is the
           *        backtick character itself, escaped using a backslash. Special characters in field paths
           *        that must be quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii
           *        symbolic characters. Examples: `` `address.city` `` represents a field named
           *        `address.city`, not the map key `city` in the field `address`. `` `*` `` represents a
           *        field named `*`, not any field. A special `Field` contains the default indexing settings
           *        for all fields. This field's resource name is:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
           *        Indexes defined on this `Field` will be applied to all fields which do not have their own
           *        `Field` index configuration.
             * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Field content) {
              super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A field name of the form: `projects/{project_id}/databases/{database_id}/co
             * llectionGroups/{collection_id}/fields/{field_path}` A field path can be a simple
             * field name, e.g. `address` or a path to fields within `map_value` , e.g.
             * `address.city`, or a special field path. The only valid special field is `*`, which
             * represents any field. Field paths can be quoted using `` ` `` (backtick). The only
             * character that must be escaped within a quoted field path is the backtick character
             * itself, escaped using a backslash. Special characters in field paths that must be
             * quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic
             * characters. Examples: `` `address.city` `` represents a field named `address.city`,
             * not the map key `city` in the field `address`. `` `*` `` represents a field named
             * `*`, not any field. A special `Field` contains the default indexing settings for all
             * fields. This field's resource name is:
             * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
             * Indexes defined on this `Field` will be applied to all fields which do not have their
             * own `Field` index configuration.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A field name of the form: `projects/{project_id}/databases/{database_id}/collectionGroups
           /{collection_id}/fields/{field_path}` A field path can be a simple field name, e.g. `address` or a
           path to fields within `map_value` , e.g. `address.city`, or a special field path. The only valid
           special field is `*`, which represents any field. Field paths can be quoted using `` ` ``
           (backtick). The only character that must be escaped within a quoted field path is the backtick
           character itself, escaped using a backslash. Special characters in field paths that must be quoted
           include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic characters.
           Examples: `` `address.city` `` represents a field named `address.city`, not the map key `city` in
           the field `address`. `` `*` `` represents a field named `*`, not any field. A special `Field`
           contains the default indexing settings for all fields. This field's resource name is:
           `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields` Indexes defined
           on this `Field` will be applied to all fields which do not have their own `Field` index
           configuration.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A field name of the form: `projects/{project_id}/databases/{database_id}/co
             * llectionGroups/{collection_id}/fields/{field_path}` A field path can be a simple
             * field name, e.g. `address` or a path to fields within `map_value` , e.g.
             * `address.city`, or a special field path. The only valid special field is `*`, which
             * represents any field. Field paths can be quoted using `` ` `` (backtick). The only
             * character that must be escaped within a quoted field path is the backtick character
             * itself, escaped using a backslash. Special characters in field paths that must be
             * quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic
             * characters. Examples: `` `address.city` `` represents a field named `address.city`,
             * not the map key `city` in the field `address`. `` `*` `` represents a field named
             * `*`, not any field. A special `Field` contains the default indexing settings for all
             * fields. This field's resource name is:
             * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
             * Indexes defined on this `Field` will be applied to all fields which do not have their
             * own `Field` index configuration.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * A mask, relative to the field. If specified, only configuration specified by this
             * field_mask will be updated in the field.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** A mask, relative to the field. If specified, only configuration specified by this field_mask will
           be updated in the field.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * A mask, relative to the field. If specified, only configuration specified by this
             * field_mask will be updated in the field.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Indexes collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firestore firestore = new Firestore(...);}
         *   {@code Firestore.Indexes.List request = firestore.indexes().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Indexes indexes() {
          return new Indexes();
        }

        /**
         * The "indexes" collection of methods.
         */
        public class Indexes {

          /**
           * Creates a composite index. This returns a google.longrunning.Operation which may be used to track
           * the status of the creation. The metadata for the operation will be the type
           * IndexOperationMetadata.
           *
           * Create a request for the method "indexes.create".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1/{+parent}/indexes";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Creates a composite index. This returns a google.longrunning.Operation which may be used to
             * track the status of the creation. The metadata for the operation will be the type
             * IndexOperationMetadata.
             *
             * Create a request for the method "indexes.create".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @param content the {@link com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index content) {
              super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a composite index.
           *
           * Create a request for the method "indexes.delete".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");

            /**
             * Deletes a composite index.
             *
             * Create a request for the method "indexes.delete".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/indexes/{index_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/indexes/{index_id}`
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a composite index.
           *
           * Create a request for the method "indexes.get".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");

            /**
             * Gets a composite index.
             *
             * Create a request for the method "indexes.get".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Index.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/indexes/{index_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A name of the form `projects/{project_id}/databases/{database_id}/collectio
             * nGroups/{collection_id}/indexes/{index_id}`
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists composite indexes.
           *
           * Create a request for the method "indexes.list".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListIndexesResponse> {

            private static final String REST_PATH = "v1/{+parent}/indexes";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Lists composite indexes.
             *
             * Create a request for the method "indexes.list".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListIndexesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The filter to apply to list results. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The filter to apply to list results.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** The filter to apply to list results. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The number of results to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The number of results to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The number of results to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may
             * be used to get the next page of results.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get
           the next page of results.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may
             * be used to get the next page of results.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Documents collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.Documents.List request = firestore.documents().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Documents documents() {
        return new Documents();
      }

      /**
       * The "documents" collection of methods.
       */
      public class Documents {

        /**
         * Gets multiple documents. Documents returned by this method are not guaranteed to be returned in
         * the same order that they were requested.
         *
         * Create a request for the method "documents.batchGet".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.BatchGetDocumentsRequest}
         * @return the request
         */
        public BatchGet batchGet(java.lang.String database, com.google.api.services.firestore.v1.model.BatchGetDocumentsRequest content) throws java.io.IOException {
          BatchGet result = new BatchGet(database, content);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirestoreRequest<com.google.api.services.firestore.v1.model.BatchGetDocumentsResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:batchGet";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Gets multiple documents. Documents returned by this method are not guaranteed to be returned in
           * the same order that they were requested.
           *
           * Create a request for the method "documents.batchGet".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.BatchGetDocumentsRequest}
           * @since 1.13
           */
          protected BatchGet(java.lang.String database, com.google.api.services.firestore.v1.model.BatchGetDocumentsRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.BatchGetDocumentsResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public BatchGet setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Applies a batch of write operations. The BatchWrite method does not apply the write operations
         * atomically and can apply them out of order. Method does not allow more than one write per
         * document. Each write succeeds or fails independently. See the BatchWriteResponse for the success
         * status of each write. If you require an atomically applied set of writes, use Commit instead.
         *
         * Create a request for the method "documents.batchWrite".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link BatchWrite#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.BatchWriteRequest}
         * @return the request
         */
        public BatchWrite batchWrite(java.lang.String database, com.google.api.services.firestore.v1.model.BatchWriteRequest content) throws java.io.IOException {
          BatchWrite result = new BatchWrite(database, content);
          initialize(result);
          return result;
        }

        public class BatchWrite extends FirestoreRequest<com.google.api.services.firestore.v1.model.BatchWriteResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:batchWrite";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Applies a batch of write operations. The BatchWrite method does not apply the write operations
           * atomically and can apply them out of order. Method does not allow more than one write per
           * document. Each write succeeds or fails independently. See the BatchWriteResponse for the
           * success status of each write. If you require an atomically applied set of writes, use Commit
           * instead.
           *
           * Create a request for the method "documents.batchWrite".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link BatchWrite#execute()} method to invoke the remote
           * operation. <p> {@link
           * BatchWrite#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.BatchWriteRequest}
           * @since 1.13
           */
          protected BatchWrite(java.lang.String database, com.google.api.services.firestore.v1.model.BatchWriteRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.BatchWriteResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public BatchWrite set$Xgafv(java.lang.String $Xgafv) {
            return (BatchWrite) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchWrite setAccessToken(java.lang.String accessToken) {
            return (BatchWrite) super.setAccessToken(accessToken);
          }

          @Override
          public BatchWrite setAlt(java.lang.String alt) {
            return (BatchWrite) super.setAlt(alt);
          }

          @Override
          public BatchWrite setCallback(java.lang.String callback) {
            return (BatchWrite) super.setCallback(callback);
          }

          @Override
          public BatchWrite setFields(java.lang.String fields) {
            return (BatchWrite) super.setFields(fields);
          }

          @Override
          public BatchWrite setKey(java.lang.String key) {
            return (BatchWrite) super.setKey(key);
          }

          @Override
          public BatchWrite setOauthToken(java.lang.String oauthToken) {
            return (BatchWrite) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchWrite setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchWrite) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchWrite setQuotaUser(java.lang.String quotaUser) {
            return (BatchWrite) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchWrite setUploadType(java.lang.String uploadType) {
            return (BatchWrite) super.setUploadType(uploadType);
          }

          @Override
          public BatchWrite setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchWrite) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public BatchWrite setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public BatchWrite set(String parameterName, Object value) {
            return (BatchWrite) super.set(parameterName, value);
          }
        }
        /**
         * Starts a new transaction.
         *
         * Create a request for the method "documents.beginTransaction".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.BeginTransactionRequest}
         * @return the request
         */
        public BeginTransaction beginTransaction(java.lang.String database, com.google.api.services.firestore.v1.model.BeginTransactionRequest content) throws java.io.IOException {
          BeginTransaction result = new BeginTransaction(database, content);
          initialize(result);
          return result;
        }

        public class BeginTransaction extends FirestoreRequest<com.google.api.services.firestore.v1.model.BeginTransactionResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:beginTransaction";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Starts a new transaction.
           *
           * Create a request for the method "documents.beginTransaction".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link BeginTransaction#execute()} method to invoke the remote
           * operation. <p> {@link BeginTransaction#initialize(com.google.api.client.googleapis.services.Abs
           * tractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.BeginTransactionRequest}
           * @since 1.13
           */
          protected BeginTransaction(java.lang.String database, com.google.api.services.firestore.v1.model.BeginTransactionRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.BeginTransactionResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public BeginTransaction set$Xgafv(java.lang.String $Xgafv) {
            return (BeginTransaction) super.set$Xgafv($Xgafv);
          }

          @Override
          public BeginTransaction setAccessToken(java.lang.String accessToken) {
            return (BeginTransaction) super.setAccessToken(accessToken);
          }

          @Override
          public BeginTransaction setAlt(java.lang.String alt) {
            return (BeginTransaction) super.setAlt(alt);
          }

          @Override
          public BeginTransaction setCallback(java.lang.String callback) {
            return (BeginTransaction) super.setCallback(callback);
          }

          @Override
          public BeginTransaction setFields(java.lang.String fields) {
            return (BeginTransaction) super.setFields(fields);
          }

          @Override
          public BeginTransaction setKey(java.lang.String key) {
            return (BeginTransaction) super.setKey(key);
          }

          @Override
          public BeginTransaction setOauthToken(java.lang.String oauthToken) {
            return (BeginTransaction) super.setOauthToken(oauthToken);
          }

          @Override
          public BeginTransaction setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BeginTransaction) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BeginTransaction setQuotaUser(java.lang.String quotaUser) {
            return (BeginTransaction) super.setQuotaUser(quotaUser);
          }

          @Override
          public BeginTransaction setUploadType(java.lang.String uploadType) {
            return (BeginTransaction) super.setUploadType(uploadType);
          }

          @Override
          public BeginTransaction setUploadProtocol(java.lang.String uploadProtocol) {
            return (BeginTransaction) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public BeginTransaction setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public BeginTransaction set(String parameterName, Object value) {
            return (BeginTransaction) super.set(parameterName, value);
          }
        }
        /**
         * Commits a transaction, while optionally updating documents.
         *
         * Create a request for the method "documents.commit".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Commit#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.CommitRequest}
         * @return the request
         */
        public Commit commit(java.lang.String database, com.google.api.services.firestore.v1.model.CommitRequest content) throws java.io.IOException {
          Commit result = new Commit(database, content);
          initialize(result);
          return result;
        }

        public class Commit extends FirestoreRequest<com.google.api.services.firestore.v1.model.CommitResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:commit";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Commits a transaction, while optionally updating documents.
           *
           * Create a request for the method "documents.commit".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Commit#execute()} method to invoke the remote operation.
           * <p> {@link
           * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.CommitRequest}
           * @since 1.13
           */
          protected Commit(java.lang.String database, com.google.api.services.firestore.v1.model.CommitRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.CommitResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Commit set$Xgafv(java.lang.String $Xgafv) {
            return (Commit) super.set$Xgafv($Xgafv);
          }

          @Override
          public Commit setAccessToken(java.lang.String accessToken) {
            return (Commit) super.setAccessToken(accessToken);
          }

          @Override
          public Commit setAlt(java.lang.String alt) {
            return (Commit) super.setAlt(alt);
          }

          @Override
          public Commit setCallback(java.lang.String callback) {
            return (Commit) super.setCallback(callback);
          }

          @Override
          public Commit setFields(java.lang.String fields) {
            return (Commit) super.setFields(fields);
          }

          @Override
          public Commit setKey(java.lang.String key) {
            return (Commit) super.setKey(key);
          }

          @Override
          public Commit setOauthToken(java.lang.String oauthToken) {
            return (Commit) super.setOauthToken(oauthToken);
          }

          @Override
          public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Commit) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Commit setQuotaUser(java.lang.String quotaUser) {
            return (Commit) super.setQuotaUser(quotaUser);
          }

          @Override
          public Commit setUploadType(java.lang.String uploadType) {
            return (Commit) super.setUploadType(uploadType);
          }

          @Override
          public Commit setUploadProtocol(java.lang.String uploadProtocol) {
            return (Commit) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public Commit setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Commit set(String parameterName, Object value) {
            return (Commit) super.set(parameterName, value);
          }
        }
        /**
         * Creates a new document.
         *
         * Create a request for the method "documents.createDocument".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link CreateDocument#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource. For example:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
         * @param collectionId Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
         * @param content the {@link com.google.api.services.firestore.v1.model.Document}
         * @return the request
         */
        public CreateDocument createDocument(java.lang.String parent, java.lang.String collectionId, com.google.api.services.firestore.v1.model.Document content) throws java.io.IOException {
          CreateDocument result = new CreateDocument(parent, collectionId, content);
          initialize(result);
          return result;
        }

        public class CreateDocument extends FirestoreRequest<com.google.api.services.firestore.v1.model.Document> {

          private static final String REST_PATH = "v1/{+parent}/{collectionId}";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/.*$");

          /**
           * Creates a new document.
           *
           * Create a request for the method "documents.createDocument".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link CreateDocument#execute()} method to invoke the remote
           * operation. <p> {@link CreateDocument#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The parent resource. For example:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           * @param collectionId Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           * @param content the {@link com.google.api.services.firestore.v1.model.Document}
           * @since 1.13
           */
          protected CreateDocument(java.lang.String parent, java.lang.String collectionId, com.google.api.services.firestore.v1.model.Document content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.Document.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/.*$");
            }
            this.collectionId = com.google.api.client.util.Preconditions.checkNotNull(collectionId, "Required parameter collectionId must be specified.");
          }

          @Override
          public CreateDocument set$Xgafv(java.lang.String $Xgafv) {
            return (CreateDocument) super.set$Xgafv($Xgafv);
          }

          @Override
          public CreateDocument setAccessToken(java.lang.String accessToken) {
            return (CreateDocument) super.setAccessToken(accessToken);
          }

          @Override
          public CreateDocument setAlt(java.lang.String alt) {
            return (CreateDocument) super.setAlt(alt);
          }

          @Override
          public CreateDocument setCallback(java.lang.String callback) {
            return (CreateDocument) super.setCallback(callback);
          }

          @Override
          public CreateDocument setFields(java.lang.String fields) {
            return (CreateDocument) super.setFields(fields);
          }

          @Override
          public CreateDocument setKey(java.lang.String key) {
            return (CreateDocument) super.setKey(key);
          }

          @Override
          public CreateDocument setOauthToken(java.lang.String oauthToken) {
            return (CreateDocument) super.setOauthToken(oauthToken);
          }

          @Override
          public CreateDocument setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (CreateDocument) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public CreateDocument setQuotaUser(java.lang.String quotaUser) {
            return (CreateDocument) super.setQuotaUser(quotaUser);
          }

          @Override
          public CreateDocument setUploadType(java.lang.String uploadType) {
            return (CreateDocument) super.setUploadType(uploadType);
          }

          @Override
          public CreateDocument setUploadProtocol(java.lang.String uploadProtocol) {
            return (CreateDocument) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource. For example:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource. For example:
         `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource. For example:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          public CreateDocument setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/.*$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           */
          @com.google.api.client.util.Key
          private java.lang.String collectionId;

          /** Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           */
          public java.lang.String getCollectionId() {
            return collectionId;
          }

          /**
           * Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           */
          public CreateDocument setCollectionId(java.lang.String collectionId) {
            this.collectionId = collectionId;
            return this;
          }

          /**
           * The client-assigned document ID to use for this document. Optional. If not specified,
           * an ID will be assigned by the service.
           */
          @com.google.api.client.util.Key
          private java.lang.String documentId;

          /** The client-assigned document ID to use for this document. Optional. If not specified, an ID will be
         assigned by the service.
           */
          public java.lang.String getDocumentId() {
            return documentId;
          }

          /**
           * The client-assigned document ID to use for this document. Optional. If not specified,
           * an ID will be assigned by the service.
           */
          public CreateDocument setDocumentId(java.lang.String documentId) {
            this.documentId = documentId;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public CreateDocument setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          @Override
          public CreateDocument set(String parameterName, Object value) {
            return (CreateDocument) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a document.
         *
         * Create a request for the method "documents.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The resource name of the Document to delete. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Deletes a document.
           *
           * Create a request for the method "documents.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The resource name of the Document to delete. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the Document to delete. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The resource name of the Document to delete. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The resource name of the Document to delete. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.name = name;
            return this;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          @com.google.api.client.util.Key("currentDocument.exists")
          private java.lang.Boolean currentDocumentExists;

          /** When set to `true`, the target document must exist. When set to `false`, the target document must
         not exist.
           */
          public java.lang.Boolean getCurrentDocumentExists() {
            return currentDocumentExists;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          public Delete setCurrentDocumentExists(java.lang.Boolean currentDocumentExists) {
            this.currentDocumentExists = currentDocumentExists;
            return this;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           * Timestamp must be microsecond aligned.
           */
          @com.google.api.client.util.Key("currentDocument.updateTime")
          private String currentDocumentUpdateTime;

          /** When set, the target document must exist and have been last updated at that time. Timestamp must be
         microsecond aligned.
           */
          public String getCurrentDocumentUpdateTime() {
            return currentDocumentUpdateTime;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           * Timestamp must be microsecond aligned.
           */
          public Delete setCurrentDocumentUpdateTime(String currentDocumentUpdateTime) {
            this.currentDocumentUpdateTime = currentDocumentUpdateTime;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a single document.
         *
         * Create a request for the method "documents.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The resource name of the Document to get. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.Document> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Gets a single document.
           *
           * Create a request for the method "documents.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The resource name of the Document to get. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.Document.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the Document to get. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The resource name of the Document to get. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The resource name of the Document to get. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.name = name;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Get setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * Reads the version of the document at the given time. This must be a microsecond
           * precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled,
           * can additionally be a whole minute timestamp within the past 7 days.
           */
          @com.google.api.client.util.Key
          private String readTime;

          /** Reads the version of the document at the given time. This must be a microsecond precision timestamp
         within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole
         minute timestamp within the past 7 days.
           */
          public String getReadTime() {
            return readTime;
          }

          /**
           * Reads the version of the document at the given time. This must be a microsecond
           * precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled,
           * can additionally be a whole minute timestamp within the past 7 days.
           */
          public Get setReadTime(String readTime) {
            this.readTime = readTime;
            return this;
          }

          /** Reads the document in a transaction. */
          @com.google.api.client.util.Key
          private java.lang.String transaction;

          /** Reads the document in a transaction.
           */
          public java.lang.String getTransaction() {
            return transaction;
          }

          /** Reads the document in a transaction. */
          public Get setTransaction(java.lang.String transaction) {
            this.transaction = transaction;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists documents.
         *
         * Create a request for the method "documents.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param collectionId Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         *        This is optional, and when not provided, Firestore will list documents from all
         *        collections under the provided `parent`.
         * @return the request
         */
        public List list(java.lang.String parent, java.lang.String collectionId) throws java.io.IOException {
          List result = new List(parent, collectionId);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.ListDocumentsResponse> {

          private static final String REST_PATH = "v1/{+parent}/{collectionId}";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Lists documents.
           *
           * Create a request for the method "documents.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param collectionId Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         *        This is optional, and when not provided, Firestore will list documents from all
         *        collections under the provided `parent`.
           * @since 1.13
           */
          protected List(java.lang.String parent, java.lang.String collectionId) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.ListDocumentsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.collectionId = com.google.api.client.util.Preconditions.checkNotNull(collectionId, "Required parameter collectionId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource name. In the format:
         `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`. This is optional, and when not provided, Firestore will list documents from
           * all collections under the provided `parent`.
           */
          @com.google.api.client.util.Key
          private java.lang.String collectionId;

          /** Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         This is optional, and when not provided, Firestore will list documents from all collections under
         the provided `parent`.
           */
          public java.lang.String getCollectionId() {
            return collectionId;
          }

          /**
           * Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`. This is optional, and when not provided, Firestore will list documents from
           * all collections under the provided `parent`.
           */
          public List setCollectionId(java.lang.String collectionId) {
            this.collectionId = collectionId;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public List setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * Optional. The optional ordering of the documents to return. For example: `priority
           * desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a
           * string representation. When absent, documents are ordered based on `__name__ ASC`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. The optional ordering of the documents to return. For example: `priority desc, __name__
         desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When
         absent, documents are ordered based on `__name__ ASC`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. The optional ordering of the documents to return. For example: `priority
           * desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a
           * string representation. When absent, documents are ordered based on `__name__ ASC`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Optional. The maximum number of documents to return in a single response. Firestore may
           * return fewer than this value.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. The maximum number of documents to return in a single response. Firestore may return
         fewer than this value.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. The maximum number of documents to return in a single response. Firestore may
           * return fewer than this value.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. A page token, received from a previous `ListDocuments` response. Provide this
           * to retrieve the subsequent page. When paginating, all other parameters (with the
           * exception of `page_size`) must match the values set in the request that generated the
           * page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve
         the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must
         match the values set in the request that generated the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. A page token, received from a previous `ListDocuments` response. Provide this
           * to retrieve the subsequent page. When paginating, all other parameters (with the
           * exception of `page_size`) must match the values set in the request that generated the
           * page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Perform the read at the provided time. This must be a microsecond precision timestamp
           * within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be
           * a whole minute timestamp within the past 7 days.
           */
          @com.google.api.client.util.Key
          private String readTime;

          /** Perform the read at the provided time. This must be a microsecond precision timestamp within the
         past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute
         timestamp within the past 7 days.
           */
          public String getReadTime() {
            return readTime;
          }

          /**
           * Perform the read at the provided time. This must be a microsecond precision timestamp
           * within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be
           * a whole minute timestamp within the past 7 days.
           */
          public List setReadTime(String readTime) {
            this.readTime = readTime;
            return this;
          }

          /**
           * If the list should show missing documents. A document is missing if it does not exist,
           * but there are sub-documents nested underneath it. When true, such missing documents
           * will be returned with a key but will not have fields, `create_time`, or `update_time`
           * set. Requests with `show_missing` may not specify `where` or `order_by`.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean showMissing;

          /** If the list should show missing documents. A document is missing if it does not exist, but there
         are sub-documents nested underneath it. When true, such missing documents will be returned with a
         key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may
         not specify `where` or `order_by`.
           */
          public java.lang.Boolean getShowMissing() {
            return showMissing;
          }

          /**
           * If the list should show missing documents. A document is missing if it does not exist,
           * but there are sub-documents nested underneath it. When true, such missing documents
           * will be returned with a key but will not have fields, `create_time`, or `update_time`
           * set. Requests with `show_missing` may not specify `where` or `order_by`.
           */
          public List setShowMissing(java.lang.Boolean showMissing) {
            this.showMissing = showMissing;
            return this;
          }

          /** Perform the read as part of an already active transaction. */
          @com.google.api.client.util.Key
          private java.lang.String transaction;

          /** Perform the read as part of an already active transaction.
           */
          public java.lang.String getTransaction() {
            return transaction;
          }

          /** Perform the read as part of an already active transaction. */
          public List setTransaction(java.lang.String transaction) {
            this.transaction = transaction;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Lists all the collection IDs underneath a document.
         *
         * Create a request for the method "documents.listCollectionIds".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link ListCollectionIds#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent document. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param content the {@link com.google.api.services.firestore.v1.model.ListCollectionIdsRequest}
         * @return the request
         */
        public ListCollectionIds listCollectionIds(java.lang.String parent, com.google.api.services.firestore.v1.model.ListCollectionIdsRequest content) throws java.io.IOException {
          ListCollectionIds result = new ListCollectionIds(parent, content);
          initialize(result);
          return result;
        }

        public class ListCollectionIds extends FirestoreRequest<com.google.api.services.firestore.v1.model.ListCollectionIdsResponse> {

          private static final String REST_PATH = "v1/{+parent}:listCollectionIds";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Lists all the collection IDs underneath a document.
           *
           * Create a request for the method "documents.listCollectionIds".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link ListCollectionIds#execute()} method to invoke the remote
           * operation. <p> {@link ListCollectionIds#initialize(com.google.api.client.googleapis.services.Ab
           * stractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param parent Required. The parent document. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param content the {@link com.google.api.services.firestore.v1.model.ListCollectionIdsRequest}
           * @since 1.13
           */
          protected ListCollectionIds(java.lang.String parent, com.google.api.services.firestore.v1.model.ListCollectionIdsRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.ListCollectionIdsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public ListCollectionIds set$Xgafv(java.lang.String $Xgafv) {
            return (ListCollectionIds) super.set$Xgafv($Xgafv);
          }

          @Override
          public ListCollectionIds setAccessToken(java.lang.String accessToken) {
            return (ListCollectionIds) super.setAccessToken(accessToken);
          }

          @Override
          public ListCollectionIds setAlt(java.lang.String alt) {
            return (ListCollectionIds) super.setAlt(alt);
          }

          @Override
          public ListCollectionIds setCallback(java.lang.String callback) {
            return (ListCollectionIds) super.setCallback(callback);
          }

          @Override
          public ListCollectionIds setFields(java.lang.String fields) {
            return (ListCollectionIds) super.setFields(fields);
          }

          @Override
          public ListCollectionIds setKey(java.lang.String key) {
            return (ListCollectionIds) super.setKey(key);
          }

          @Override
          public ListCollectionIds setOauthToken(java.lang.String oauthToken) {
            return (ListCollectionIds) super.setOauthToken(oauthToken);
          }

          @Override
          public ListCollectionIds setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ListCollectionIds) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ListCollectionIds setQuotaUser(java.lang.String quotaUser) {
            return (ListCollectionIds) super.setQuotaUser(quotaUser);
          }

          @Override
          public ListCollectionIds setUploadType(java.lang.String uploadType) {
            return (ListCollectionIds) super.setUploadType(uploadType);
          }

          @Override
          public ListCollectionIds setUploadProtocol(java.lang.String uploadProtocol) {
            return (ListCollectionIds) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent document. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent document. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent document. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public ListCollectionIds setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public ListCollectionIds set(String parameterName, Object value) {
            return (ListCollectionIds) super.set(parameterName, value);
          }
        }
        /**
         * Lists documents.
         *
         * Create a request for the method "documents.listDocuments".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link ListDocuments#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param collectionId Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         *        This is optional, and when not provided, Firestore will list documents from all
         *        collections under the provided `parent`.
         * @return the request
         */
        public ListDocuments listDocuments(java.lang.String parent, java.lang.String collectionId) throws java.io.IOException {
          ListDocuments result = new ListDocuments(parent, collectionId);
          initialize(result);
          return result;
        }

        public class ListDocuments extends FirestoreRequest<com.google.api.services.firestore.v1.model.ListDocumentsResponse> {

          private static final String REST_PATH = "v1/{+parent}/{collectionId}";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents$");

          /**
           * Lists documents.
           *
           * Create a request for the method "documents.listDocuments".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link ListDocuments#execute()} method to invoke the remote
           * operation. <p> {@link ListDocuments#initialize(com.google.api.client.googleapis.services.Abstra
           * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param collectionId Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         *        This is optional, and when not provided, Firestore will list documents from all
         *        collections under the provided `parent`.
           * @since 1.13
           */
          protected ListDocuments(java.lang.String parent, java.lang.String collectionId) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.ListDocumentsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents$");
            }
            this.collectionId = com.google.api.client.util.Preconditions.checkNotNull(collectionId, "Required parameter collectionId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public ListDocuments set$Xgafv(java.lang.String $Xgafv) {
            return (ListDocuments) super.set$Xgafv($Xgafv);
          }

          @Override
          public ListDocuments setAccessToken(java.lang.String accessToken) {
            return (ListDocuments) super.setAccessToken(accessToken);
          }

          @Override
          public ListDocuments setAlt(java.lang.String alt) {
            return (ListDocuments) super.setAlt(alt);
          }

          @Override
          public ListDocuments setCallback(java.lang.String callback) {
            return (ListDocuments) super.setCallback(callback);
          }

          @Override
          public ListDocuments setFields(java.lang.String fields) {
            return (ListDocuments) super.setFields(fields);
          }

          @Override
          public ListDocuments setKey(java.lang.String key) {
            return (ListDocuments) super.setKey(key);
          }

          @Override
          public ListDocuments setOauthToken(java.lang.String oauthToken) {
            return (ListDocuments) super.setOauthToken(oauthToken);
          }

          @Override
          public ListDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ListDocuments) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ListDocuments setQuotaUser(java.lang.String quotaUser) {
            return (ListDocuments) super.setQuotaUser(quotaUser);
          }

          @Override
          public ListDocuments setUploadType(java.lang.String uploadType) {
            return (ListDocuments) super.setUploadType(uploadType);
          }

          @Override
          public ListDocuments setUploadProtocol(java.lang.String uploadProtocol) {
            return (ListDocuments) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource name. In the format:
         `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public ListDocuments setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`. This is optional, and when not provided, Firestore will list documents from
           * all collections under the provided `parent`.
           */
          @com.google.api.client.util.Key
          private java.lang.String collectionId;

          /** Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
         This is optional, and when not provided, Firestore will list documents from all collections under
         the provided `parent`.
           */
          public java.lang.String getCollectionId() {
            return collectionId;
          }

          /**
           * Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`. This is optional, and when not provided, Firestore will list documents from
           * all collections under the provided `parent`.
           */
          public ListDocuments setCollectionId(java.lang.String collectionId) {
            this.collectionId = collectionId;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public ListDocuments setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * Optional. The optional ordering of the documents to return. For example: `priority
           * desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a
           * string representation. When absent, documents are ordered based on `__name__ ASC`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. The optional ordering of the documents to return. For example: `priority desc, __name__
         desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When
         absent, documents are ordered based on `__name__ ASC`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. The optional ordering of the documents to return. For example: `priority
           * desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a
           * string representation. When absent, documents are ordered based on `__name__ ASC`.
           */
          public ListDocuments setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Optional. The maximum number of documents to return in a single response. Firestore may
           * return fewer than this value.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. The maximum number of documents to return in a single response. Firestore may return
         fewer than this value.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. The maximum number of documents to return in a single response. Firestore may
           * return fewer than this value.
           */
          public ListDocuments setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. A page token, received from a previous `ListDocuments` response. Provide this
           * to retrieve the subsequent page. When paginating, all other parameters (with the
           * exception of `page_size`) must match the values set in the request that generated the
           * page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve
         the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must
         match the values set in the request that generated the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. A page token, received from a previous `ListDocuments` response. Provide this
           * to retrieve the subsequent page. When paginating, all other parameters (with the
           * exception of `page_size`) must match the values set in the request that generated the
           * page token.
           */
          public ListDocuments setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Perform the read at the provided time. This must be a microsecond precision timestamp
           * within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be
           * a whole minute timestamp within the past 7 days.
           */
          @com.google.api.client.util.Key
          private String readTime;

          /** Perform the read at the provided time. This must be a microsecond precision timestamp within the
         past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute
         timestamp within the past 7 days.
           */
          public String getReadTime() {
            return readTime;
          }

          /**
           * Perform the read at the provided time. This must be a microsecond precision timestamp
           * within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be
           * a whole minute timestamp within the past 7 days.
           */
          public ListDocuments setReadTime(String readTime) {
            this.readTime = readTime;
            return this;
          }

          /**
           * If the list should show missing documents. A document is missing if it does not exist,
           * but there are sub-documents nested underneath it. When true, such missing documents
           * will be returned with a key but will not have fields, `create_time`, or `update_time`
           * set. Requests with `show_missing` may not specify `where` or `order_by`.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean showMissing;

          /** If the list should show missing documents. A document is missing if it does not exist, but there
         are sub-documents nested underneath it. When true, such missing documents will be returned with a
         key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may
         not specify `where` or `order_by`.
           */
          public java.lang.Boolean getShowMissing() {
            return showMissing;
          }

          /**
           * If the list should show missing documents. A document is missing if it does not exist,
           * but there are sub-documents nested underneath it. When true, such missing documents
           * will be returned with a key but will not have fields, `create_time`, or `update_time`
           * set. Requests with `show_missing` may not specify `where` or `order_by`.
           */
          public ListDocuments setShowMissing(java.lang.Boolean showMissing) {
            this.showMissing = showMissing;
            return this;
          }

          /** Perform the read as part of an already active transaction. */
          @com.google.api.client.util.Key
          private java.lang.String transaction;

          /** Perform the read as part of an already active transaction.
           */
          public java.lang.String getTransaction() {
            return transaction;
          }

          /** Perform the read as part of an already active transaction. */
          public ListDocuments setTransaction(java.lang.String transaction) {
            this.transaction = transaction;
            return this;
          }

          @Override
          public ListDocuments set(String parameterName, Object value) {
            return (ListDocuments) super.set(parameterName, value);
          }
        }
        /**
         * Listens to changes. This method is only available via gRPC or WebChannel (not REST).
         *
         * Create a request for the method "documents.listen".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Listen#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.ListenRequest}
         * @return the request
         */
        public Listen listen(java.lang.String database, com.google.api.services.firestore.v1.model.ListenRequest content) throws java.io.IOException {
          Listen result = new Listen(database, content);
          initialize(result);
          return result;
        }

        public class Listen extends FirestoreRequest<com.google.api.services.firestore.v1.model.ListenResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:listen";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Listens to changes. This method is only available via gRPC or WebChannel (not REST).
           *
           * Create a request for the method "documents.listen".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Listen#execute()} method to invoke the remote operation.
           * <p> {@link
           * Listen#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.ListenRequest}
           * @since 1.13
           */
          protected Listen(java.lang.String database, com.google.api.services.firestore.v1.model.ListenRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.ListenResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Listen set$Xgafv(java.lang.String $Xgafv) {
            return (Listen) super.set$Xgafv($Xgafv);
          }

          @Override
          public Listen setAccessToken(java.lang.String accessToken) {
            return (Listen) super.setAccessToken(accessToken);
          }

          @Override
          public Listen setAlt(java.lang.String alt) {
            return (Listen) super.setAlt(alt);
          }

          @Override
          public Listen setCallback(java.lang.String callback) {
            return (Listen) super.setCallback(callback);
          }

          @Override
          public Listen setFields(java.lang.String fields) {
            return (Listen) super.setFields(fields);
          }

          @Override
          public Listen setKey(java.lang.String key) {
            return (Listen) super.setKey(key);
          }

          @Override
          public Listen setOauthToken(java.lang.String oauthToken) {
            return (Listen) super.setOauthToken(oauthToken);
          }

          @Override
          public Listen setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Listen) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Listen setQuotaUser(java.lang.String quotaUser) {
            return (Listen) super.setQuotaUser(quotaUser);
          }

          @Override
          public Listen setUploadType(java.lang.String uploadType) {
            return (Listen) super.setUploadType(uploadType);
          }

          @Override
          public Listen setUploadProtocol(java.lang.String uploadProtocol) {
            return (Listen) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public Listen setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Listen set(String parameterName, Object value) {
            return (Listen) super.set(parameterName, value);
          }
        }
        /**
         * Partitions a query by returning partition cursors that can be used to run the query in parallel.
         * The returned partition cursors are split points that can be used by RunQuery as starting/end
         * points for the query results.
         *
         * Create a request for the method "documents.partitionQuery".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link PartitionQuery#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not
         *        supported; only database resource names can be specified.
         * @param content the {@link com.google.api.services.firestore.v1.model.PartitionQueryRequest}
         * @return the request
         */
        public PartitionQuery partitionQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.PartitionQueryRequest content) throws java.io.IOException {
          PartitionQuery result = new PartitionQuery(parent, content);
          initialize(result);
          return result;
        }

        public class PartitionQuery extends FirestoreRequest<com.google.api.services.firestore.v1.model.PartitionQueryResponse> {

          private static final String REST_PATH = "v1/{+parent}:partitionQuery";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Partitions a query by returning partition cursors that can be used to run the query in
           * parallel. The returned partition cursors are split points that can be used by RunQuery as
           * starting/end points for the query results.
           *
           * Create a request for the method "documents.partitionQuery".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link PartitionQuery#execute()} method to invoke the remote
           * operation. <p> {@link PartitionQuery#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not
         *        supported; only database resource names can be specified.
           * @param content the {@link com.google.api.services.firestore.v1.model.PartitionQueryRequest}
           * @since 1.13
           */
          protected PartitionQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.PartitionQueryRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.PartitionQueryResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public PartitionQuery set$Xgafv(java.lang.String $Xgafv) {
            return (PartitionQuery) super.set$Xgafv($Xgafv);
          }

          @Override
          public PartitionQuery setAccessToken(java.lang.String accessToken) {
            return (PartitionQuery) super.setAccessToken(accessToken);
          }

          @Override
          public PartitionQuery setAlt(java.lang.String alt) {
            return (PartitionQuery) super.setAlt(alt);
          }

          @Override
          public PartitionQuery setCallback(java.lang.String callback) {
            return (PartitionQuery) super.setCallback(callback);
          }

          @Override
          public PartitionQuery setFields(java.lang.String fields) {
            return (PartitionQuery) super.setFields(fields);
          }

          @Override
          public PartitionQuery setKey(java.lang.String key) {
            return (PartitionQuery) super.setKey(key);
          }

          @Override
          public PartitionQuery setOauthToken(java.lang.String oauthToken) {
            return (PartitionQuery) super.setOauthToken(oauthToken);
          }

          @Override
          public PartitionQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (PartitionQuery) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public PartitionQuery setQuotaUser(java.lang.String quotaUser) {
            return (PartitionQuery) super.setQuotaUser(quotaUser);
          }

          @Override
          public PartitionQuery setUploadType(java.lang.String uploadType) {
            return (PartitionQuery) super.setUploadType(uploadType);
          }

          @Override
          public PartitionQuery setUploadProtocol(java.lang.String uploadProtocol) {
            return (PartitionQuery) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents`. Document resource names are
           * not supported; only database resource names can be specified.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource name. In the format:
         `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not
         supported; only database resource names can be specified.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents`. Document resource names are
           * not supported; only database resource names can be specified.
           */
          public PartitionQuery setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public PartitionQuery set(String parameterName, Object value) {
            return (PartitionQuery) super.set(parameterName, value);
          }
        }
        /**
         * Updates or inserts a document.
         *
         * Create a request for the method "documents.patch".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the document, for example
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.Document}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firestore.v1.model.Document content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1.model.Document> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Updates or inserts a document.
           *
           * Create a request for the method "documents.patch".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the document, for example
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.Document}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firestore.v1.model.Document content) {
            super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1.model.Document.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the document, for example
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the document, for example
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the document, for example
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.name = name;
            return this;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          @com.google.api.client.util.Key("currentDocument.exists")
          private java.lang.Boolean currentDocumentExists;

          /** When set to `true`, the target document must exist. When set to `false`, the target document must
         not exist.
           */
          public java.lang.Boolean getCurrentDocumentExists() {
            return currentDocumentExists;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          public Patch setCurrentDocumentExists(java.lang.Boolean currentDocumentExists) {
            this.currentDocumentExists = currentDocumentExists;
            return this;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           * Timestamp must be microsecond aligned.
           */
          @com.google.api.client.util.Key("currentDocument.updateTime")
          private String currentDocumentUpdateTime;

          /** When set, the target document must exist and have been last updated at that time. Timestamp must be
         microsecond aligned.
           */
          public String getCurrentDocumentUpdateTime() {
            return currentDocumentUpdateTime;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           * Timestamp must be microsecond aligned.
           */
          public Patch setCurrentDocumentUpdateTime(String currentDocumentUpdateTime) {
            this.currentDocumentUpdateTime = currentDocumentUpdateTime;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Patch setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("updateMask.fieldPaths")
          private java.util.List<java.lang.String> updateMaskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getUpdateMaskFieldPaths() {
            return updateMaskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Patch setUpdateMaskFieldPaths(java.util.List<java.lang.String> updateMaskFieldPaths) {
            this.updateMaskFieldPaths = updateMaskFieldPaths;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Rolls back a transaction.
         *
         * Create a request for the method "documents.rollback".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1.model.RollbackRequest}
         * @return the request
         */
        public Rollback rollback(java.lang.String database, com.google.api.services.firestore.v1.model.RollbackRequest content) throws java.io.IOException {
          Rollback result = new Rollback(database, content);
          initialize(result);
          return result;
        }

        public class Rollback extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+database}/documents:rollback";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Rolls back a transaction.
           *
           * Create a request for the method "documents.rollback".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
           * <p> {@link
           * Rollback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1.model.RollbackRequest}
           * @since 1.13
           */
          protected Rollback(java.lang.String database, com.google.api.services.firestore.v1.model.RollbackRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.Empty.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Rollback set$Xgafv(java.lang.String $Xgafv) {
            return (Rollback) super.set$Xgafv($Xgafv);
          }

          @Override
          public Rollback setAccessToken(java.lang.String accessToken) {
            return (Rollback) super.setAccessToken(accessToken);
          }

          @Override
          public Rollback setAlt(java.lang.String alt) {
            return (Rollback) super.setAlt(alt);
          }

          @Override
          public Rollback setCallback(java.lang.String callback) {
            return (Rollback) super.setCallback(callback);
          }

          @Override
          public Rollback setFields(java.lang.String fields) {
            return (Rollback) super.setFields(fields);
          }

          @Override
          public Rollback setKey(java.lang.String key) {
            return (Rollback) super.setKey(key);
          }

          @Override
          public Rollback setOauthToken(java.lang.String oauthToken) {
            return (Rollback) super.setOauthToken(oauthToken);
          }

          @Override
          public Rollback setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Rollback) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Rollback setQuotaUser(java.lang.String quotaUser) {
            return (Rollback) super.setQuotaUser(quotaUser);
          }

          @Override
          public Rollback setUploadType(java.lang.String uploadType) {
            return (Rollback) super.setUploadType(uploadType);
          }

          @Override
          public Rollback setUploadProtocol(java.lang.String uploadProtocol) {
            return (Rollback) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          public Rollback setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Rollback set(String parameterName, Object value) {
            return (Rollback) super.set(parameterName, value);
          }
        }
        /**
         * Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this
         * API allows running an aggregation to produce a series of AggregationResult server-side. High-
         * Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*)
         * FROM ( SELECT * FROM k where a = true ); ```
         *
         * Create a request for the method "documents.runAggregationQuery".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link RunAggregationQuery#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param content the {@link com.google.api.services.firestore.v1.model.RunAggregationQueryRequest}
         * @return the request
         */
        public RunAggregationQuery runAggregationQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.RunAggregationQueryRequest content) throws java.io.IOException {
          RunAggregationQuery result = new RunAggregationQuery(parent, content);
          initialize(result);
          return result;
        }

        public class RunAggregationQuery extends FirestoreRequest<com.google.api.services.firestore.v1.model.RunAggregationQueryResponse> {

          private static final String REST_PATH = "v1/{+parent}:runAggregationQuery";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this
           * API allows running an aggregation to produce a series of AggregationResult server-side. High-
           * Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*)
           * FROM ( SELECT * FROM k where a = true ); ```
           *
           * Create a request for the method "documents.runAggregationQuery".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link RunAggregationQuery#execute()} method to invoke the remote
           * operation. <p> {@link RunAggregationQuery#initialize(com.google.api.client.googleapis.services.
           * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param content the {@link com.google.api.services.firestore.v1.model.RunAggregationQueryRequest}
           * @since 1.13
           */
          protected RunAggregationQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.RunAggregationQueryRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.RunAggregationQueryResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public RunAggregationQuery set$Xgafv(java.lang.String $Xgafv) {
            return (RunAggregationQuery) super.set$Xgafv($Xgafv);
          }

          @Override
          public RunAggregationQuery setAccessToken(java.lang.String accessToken) {
            return (RunAggregationQuery) super.setAccessToken(accessToken);
          }

          @Override
          public RunAggregationQuery setAlt(java.lang.String alt) {
            return (RunAggregationQuery) super.setAlt(alt);
          }

          @Override
          public RunAggregationQuery setCallback(java.lang.String callback) {
            return (RunAggregationQuery) super.setCallback(callback);
          }

          @Override
          public RunAggregationQuery setFields(java.lang.String fields) {
            return (RunAggregationQuery) super.setFields(fields);
          }

          @Override
          public RunAggregationQuery setKey(java.lang.String key) {
            return (RunAggregationQuery) super.setKey(key);
          }

          @Override
          public RunAggregationQuery setOauthToken(java.lang.String oauthToken) {
            return (RunAggregationQuery) super.setOauthToken(oauthToken);
          }

          @Override
          public RunAggregationQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (RunAggregationQuery) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public RunAggregationQuery setQuotaUser(java.lang.String quotaUser) {
            return (RunAggregationQuery) super.setQuotaUser(quotaUser);
          }

          @Override
          public RunAggregationQuery setUploadType(java.lang.String uploadType) {
            return (RunAggregationQuery) super.setUploadType(uploadType);
          }

          @Override
          public RunAggregationQuery setUploadProtocol(java.lang.String uploadProtocol) {
            return (RunAggregationQuery) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource name. In the format:
         `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public RunAggregationQuery setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public RunAggregationQuery set(String parameterName, Object value) {
            return (RunAggregationQuery) super.set(parameterName, value);
          }
        }
        /**
         * Runs a query.
         *
         * Create a request for the method "documents.runQuery".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param content the {@link com.google.api.services.firestore.v1.model.RunQueryRequest}
         * @return the request
         */
        public RunQuery runQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.RunQueryRequest content) throws java.io.IOException {
          RunQuery result = new RunQuery(parent, content);
          initialize(result);
          return result;
        }

        public class RunQuery extends FirestoreRequest<com.google.api.services.firestore.v1.model.RunQueryResponse> {

          private static final String REST_PATH = "v1/{+parent}:runQuery";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");

          /**
           * Runs a query.
           *
           * Create a request for the method "documents.runQuery".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
           * <p> {@link
           * RunQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource name. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         *        `projects/my-project/databases/my-database/documents` or `projects/my-
         *        project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param content the {@link com.google.api.services.firestore.v1.model.RunQueryRequest}
           * @since 1.13
           */
          protected RunQuery(java.lang.String parent, com.google.api.services.firestore.v1.model.RunQueryRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.RunQueryResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
          }

          @Override
          public RunQuery set$Xgafv(java.lang.String $Xgafv) {
            return (RunQuery) super.set$Xgafv($Xgafv);
          }

          @Override
          public RunQuery setAccessToken(java.lang.String accessToken) {
            return (RunQuery) super.setAccessToken(accessToken);
          }

          @Override
          public RunQuery setAlt(java.lang.String alt) {
            return (RunQuery) super.setAlt(alt);
          }

          @Override
          public RunQuery setCallback(java.lang.String callback) {
            return (RunQuery) super.setCallback(callback);
          }

          @Override
          public RunQuery setFields(java.lang.String fields) {
            return (RunQuery) super.setFields(fields);
          }

          @Override
          public RunQuery setKey(java.lang.String key) {
            return (RunQuery) super.setKey(key);
          }

          @Override
          public RunQuery setOauthToken(java.lang.String oauthToken) {
            return (RunQuery) super.setOauthToken(oauthToken);
          }

          @Override
          public RunQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (RunQuery) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public RunQuery setQuotaUser(java.lang.String quotaUser) {
            return (RunQuery) super.setQuotaUser(quotaUser);
          }

          @Override
          public RunQuery setUploadType(java.lang.String uploadType) {
            return (RunQuery) super.setUploadType(uploadType);
          }

          @Override
          public RunQuery setUploadProtocol(java.lang.String uploadProtocol) {
            return (RunQuery) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource name. In the format:
         `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-
           * project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public RunQuery setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public RunQuery set(String parameterName, Object value) {
            return (RunQuery) super.set(parameterName, value);
          }
        }
        /**
         * Streams batches of document updates and deletes, in order. This method is only available via gRPC
         * or WebChannel (not REST).
         *
         * Create a request for the method "documents.write".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Write#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is
         *        only required in the first message.
         * @param content the {@link com.google.api.services.firestore.v1.model.WriteRequest}
         * @return the request
         */
        public Write write(java.lang.String database, com.google.api.services.firestore.v1.model.WriteRequest content) throws java.io.IOException {
          Write result = new Write(database, content);
          initialize(result);
          return result;
        }

        public class Write extends FirestoreRequest<com.google.api.services.firestore.v1.model.WriteResponse> {

          private static final String REST_PATH = "v1/{+database}/documents:write";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Streams batches of document updates and deletes, in order. This method is only available via
           * gRPC or WebChannel (not REST).
           *
           * Create a request for the method "documents.write".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Write#execute()} method to invoke the remote operation.
           * <p> {@link
           * Write#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is
         *        only required in the first message.
           * @param content the {@link com.google.api.services.firestore.v1.model.WriteRequest}
           * @since 1.13
           */
          protected Write(java.lang.String database, com.google.api.services.firestore.v1.model.WriteRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.WriteResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Write set$Xgafv(java.lang.String $Xgafv) {
            return (Write) super.set$Xgafv($Xgafv);
          }

          @Override
          public Write setAccessToken(java.lang.String accessToken) {
            return (Write) super.setAccessToken(accessToken);
          }

          @Override
          public Write setAlt(java.lang.String alt) {
            return (Write) super.setAlt(alt);
          }

          @Override
          public Write setCallback(java.lang.String callback) {
            return (Write) super.setCallback(callback);
          }

          @Override
          public Write setFields(java.lang.String fields) {
            return (Write) super.setFields(fields);
          }

          @Override
          public Write setKey(java.lang.String key) {
            return (Write) super.setKey(key);
          }

          @Override
          public Write setOauthToken(java.lang.String oauthToken) {
            return (Write) super.setOauthToken(oauthToken);
          }

          @Override
          public Write setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Write) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Write setQuotaUser(java.lang.String quotaUser) {
            return (Write) super.setQuotaUser(quotaUser);
          }

          @Override
          public Write setUploadType(java.lang.String uploadType) {
            return (Write) super.setUploadType(uploadType);
          }

          @Override
          public Write setUploadProtocol(java.lang.String uploadProtocol) {
            return (Write) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`. This is only required in the first
           * message.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This
         is only required in the first message.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`. This is only required in the first
           * message.
           */
          public Write setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Write set(String parameterName, Object value) {
            return (Write) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.Operations.List request = firestore.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.firestore.v1.model.GoogleLongrunningCancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleLongrunningCancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
           * <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.firestore.v1.model.GoogleLongrunningCancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.firestore.v1.model.GoogleLongrunningCancelOperationRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningOperation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleLongrunningOperation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleLongrunningListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleLongrunningListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firestore firestore = new Firestore(...);}
     *   {@code Firestore.Locations.List request = firestore.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Backups collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.Backups.List request = firestore.backups().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Backups backups() {
        return new Backups();
      }

      /**
       * The "backups" collection of methods.
       */
      public class Backups {

        /**
         * Deletes a backup.
         *
         * Create a request for the method "backups.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the backup to delete. format is
         *        `projects/{project}/locations/{location}/backups/{backup}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backups/[^/]+$");

          /**
           * Deletes a backup.
           *
           * Create a request for the method "backups.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the backup to delete. format is
         *        `projects/{project}/locations/{location}/backups/{backup}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backups/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the backup to delete. format is
           * `projects/{project}/locations/{location}/backups/{backup}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the backup to delete. format is
         `projects/{project}/locations/{location}/backups/{backup}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the backup to delete. format is
           * `projects/{project}/locations/{location}/backups/{backup}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backups/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets information about a backup.
         *
         * Create a request for the method "backups.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the backup to fetch. Format is
         *        `projects/{project}/locations/{location}/backups/{backup}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Backup> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backups/[^/]+$");

          /**
           * Gets information about a backup.
           *
           * Create a request for the method "backups.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the backup to fetch. Format is
         *        `projects/{project}/locations/{location}/backups/{backup}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1Backup.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backups/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the backup to fetch. Format is
           * `projects/{project}/locations/{location}/backups/{backup}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the backup to fetch. Format is
         `projects/{project}/locations/{location}/backups/{backup}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the backup to fetch. Format is
           * `projects/{project}/locations/{location}/backups/{backup}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backups/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists all the backups.
         *
         * Create a request for the method "backups.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The location to list backups from. Format is `projects/{project}/locations/{location}`.
         *        Use `{location} = '-'` to list backups from all locations for the given project. This
         *        allows listing backups from a single location or from all locations.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListBackupsResponse> {

          private static final String REST_PATH = "v1/{+parent}/backups";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists all the backups.
           *
           * Create a request for the method "backups.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The location to list backups from. Format is `projects/{project}/locations/{location}`.
         *        Use `{location} = '-'` to list backups from all locations for the given project. This
         *        allows listing backups from a single location or from all locations.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1.model.GoogleFirestoreAdminV1ListBackupsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The location to list backups from. Format is
           * `projects/{project}/locations/{location}`. Use `{location} = '-'` to list backups from
           * all locations for the given project. This allows listing backups from a single location
           * or from all locations.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The location to list backups from. Format is `projects/{project}/locations/{location}`.
         Use `{location} = '-'` to list backups from all locations for the given project. This allows
         listing backups from a single location or from all locations.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The location to list backups from. Format is
           * `projects/{project}/locations/{location}`. Use `{location} = '-'` to list backups from
           * all locations for the given project. This allows listing backups from a single location
           * or from all locations.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * An expression that filters the list of returned backups. A filter expression consists
           * of a field name, a comparison operator, and a value for filtering. The value must be a
           * string, a number, or a boolean. The comparison operator must be one of: `<`, `>`, `<=`,
           * `>=`, `!=`, `=`, or `:`. Colon `:` is the contains operator. Filter rules are not case
           * sensitive. The following fields in the Backup are eligible for filtering: *
           * `database_uid` (supports `=` only)
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** An expression that filters the list of returned backups. A filter expression consists of a field
         name, a comparison operator, and a value for filtering. The value must be a string, a number, or a
         boolean. The comparison operator must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`. Colon `:`
         is the contains operator. Filter rules are not case sensitive. The following fields in the Backup
         are eligible for filtering: * `database_uid` (supports `=` only)
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * An expression that filters the list of returned backups. A filter expression consists
           * of a field name, a comparison operator, and a value for filtering. The value must be a
           * string, a number, or a boolean. The comparison operator must be one of: `<`, `>`, `<=`,
           * `>=`, `!=`, `=`, or `:`. Colon `:` is the contains operator. Filter rules are not case
           * sensitive. The following fields in the Backup are eligible for filtering: *
           * `database_uid` (supports `=` only)
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link Firestore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Firestore}. */
    @Override
    public Firestore build() {
      return new Firestore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirestoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirestoreRequestInitializer(
        FirestoreRequestInitializer firestoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firestoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
