/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datalabeling.v1beta1.model;

/**
 * The BigQuery location for input data. If used in an EvaluationJob, this is where the service
 * saves the prediction input and output sampled from the model version.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Data Labeling API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDatalabelingV1beta1BigQuerySource extends com.google.api.client.json.GenericJson {

  /**
   * Required. BigQuery URI to a table, up to 2,000 characters long. If you specify the URI of a
   * table that does not exist, Data Labeling Service creates a table at the URI with the correct
   * schema when you create your EvaluationJob. If you specify the URI of a table that already
   * exists, it must have the [correct schema](/ml-engine/docs/continuous-evaluation/create-job
   * #table-schema). Provide the table URI in the following format: "bq://{your_project_id}/
   * {your_dataset_name}/{your_table_name}" [Learn more](/ml-engine/docs/continuous-evaluation
   * /create-job#table-schema).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inputUri;

  /**
   * Required. BigQuery URI to a table, up to 2,000 characters long. If you specify the URI of a
   * table that does not exist, Data Labeling Service creates a table at the URI with the correct
   * schema when you create your EvaluationJob. If you specify the URI of a table that already
   * exists, it must have the [correct schema](/ml-engine/docs/continuous-evaluation/create-job
   * #table-schema). Provide the table URI in the following format: "bq://{your_project_id}/
   * {your_dataset_name}/{your_table_name}" [Learn more](/ml-engine/docs/continuous-evaluation
   * /create-job#table-schema).
   * @return value or {@code null} for none
   */
  public java.lang.String getInputUri() {
    return inputUri;
  }

  /**
   * Required. BigQuery URI to a table, up to 2,000 characters long. If you specify the URI of a
   * table that does not exist, Data Labeling Service creates a table at the URI with the correct
   * schema when you create your EvaluationJob. If you specify the URI of a table that already
   * exists, it must have the [correct schema](/ml-engine/docs/continuous-evaluation/create-job
   * #table-schema). Provide the table URI in the following format: "bq://{your_project_id}/
   * {your_dataset_name}/{your_table_name}" [Learn more](/ml-engine/docs/continuous-evaluation
   * /create-job#table-schema).
   * @param inputUri inputUri or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1BigQuerySource setInputUri(java.lang.String inputUri) {
    this.inputUri = inputUri;
    return this;
  }

  @Override
  public GoogleCloudDatalabelingV1beta1BigQuerySource set(String fieldName, Object value) {
    return (GoogleCloudDatalabelingV1beta1BigQuerySource) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDatalabelingV1beta1BigQuerySource clone() {
    return (GoogleCloudDatalabelingV1beta1BigQuerySource) super.clone();
  }

}
