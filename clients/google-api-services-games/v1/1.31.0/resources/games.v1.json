{
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "resources": {
    "leaderboards": {
      "methods": {
        "get": {
          "description": "Retrieves the metadata of the leaderboard with the given ID.",
          "response": {
            "$ref": "Leaderboard"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "id": "games.leaderboards.get",
          "parameters": {
            "leaderboardId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The ID of the leaderboard."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "games/v1/leaderboards/{leaderboardId}",
          "path": "games/v1/leaderboards/{leaderboardId}",
          "parameterOrder": [
            "leaderboardId"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "LeaderboardListResponse"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of leaderboards to return in the response. For any response, the actual number of leaderboards returned may be less than the specified `maxResults`."
            },
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "description": "Lists all the leaderboard metadata for your application.",
          "path": "games/v1/leaderboards",
          "parameterOrder": [],
          "flatPath": "games/v1/leaderboards",
          "httpMethod": "GET",
          "id": "games.leaderboards.list"
        }
      }
    },
    "revisions": {
      "methods": {
        "check": {
          "parameterOrder": [
            "clientRevision"
          ],
          "path": "games/v1/revisions/check",
          "parameters": {
            "clientRevision": {
              "location": "query",
              "type": "string",
              "required": true,
              "description": "The revision of the client SDK used by your application. Format: `[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are: * `ANDROID` - Client is running the Android SDK. * `IOS` - Client is running the iOS SDK. * `WEB_APP` - Client is running as a Web App."
            }
          },
          "response": {
            "$ref": "RevisionCheckResponse"
          },
          "httpMethod": "GET",
          "flatPath": "games/v1/revisions/check",
          "description": "Checks whether the games client is out of date.",
          "id": "games.revisions.check",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        }
      }
    },
    "snapshotsExtended": {
      "methods": {
        "resolveSnapshotHead": {
          "path": "games/v1/snapshotsExtended/{snapshotName}:resolveHead",
          "id": "games.snapshotsExtended.resolveSnapshotHead",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "snapshotName"
          ],
          "parameters": {
            "snapshotName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Required. Name of the snapshot."
            }
          },
          "description": "Resolves any potential conflicts according to the resolution policy specified in the request and returns the snapshot head after the resolution.",
          "flatPath": "games/v1/snapshotsExtended/{snapshotName}:resolveHead",
          "request": {
            "$ref": "ResolveSnapshotHeadRequest"
          },
          "response": {
            "$ref": "ResolveSnapshotHeadResponse"
          },
          "httpMethod": "POST"
        }
      }
    },
    "metagame": {
      "methods": {
        "getMetagameConfig": {
          "parameterOrder": [],
          "parameters": {},
          "httpMethod": "GET",
          "response": {
            "$ref": "MetagameConfig"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/metagameConfig",
          "description": "Return the metagame configuration data for the calling application.",
          "id": "games.metagame.getMetagameConfig",
          "path": "games/v1/metagameConfig"
        },
        "listCategoriesByPlayer": {
          "parameterOrder": [
            "playerId",
            "collection"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/players/{playerId}/categories/{collection}",
          "parameters": {
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of category resources to return in the response, used for paging. For any response, the actual number of category resources returned may be less than the specified `maxResults`."
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "collection": {
              "location": "path",
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Retrieve data for all categories. This is the default."
              ],
              "description": "The collection of categories for which data will be returned.",
              "required": true,
              "enum": [
                "COLLECTION_UNSPECIFIED",
                "ALL"
              ]
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "id": "games.metagame.listCategoriesByPlayer",
          "description": "List play data aggregated per category for the player corresponding to `playerId`.",
          "response": {
            "$ref": "CategoryListResponse"
          },
          "path": "games/v1/players/{playerId}/categories/{collection}"
        }
      }
    },
    "achievementDefinitions": {
      "methods": {
        "list": {
          "id": "games.achievementDefinitions.list",
          "parameterOrder": [],
          "response": {
            "$ref": "AchievementDefinitionsListResponse"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "games/v1/achievements",
          "description": "Lists all the achievement definitions for your application.",
          "path": "games/v1/achievements"
        }
      }
    },
    "scores": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "description": "Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.scores.get",
          "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "response": {
            "$ref": "PlayerLeaderboardScoreListResponse"
          },
          "path": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "timeSpan": {
              "location": "path",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Get the high scores for all time spans. If this is used, maxResults values will be ignored.",
                "Get the all time high score.",
                "List the top scores for the current day.",
                "List the top scores for the current week."
              ],
              "description": "The time span for the scores and ranks you're requesting.",
              "required": true
            },
            "playerId": {
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "required": true,
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "leaderboardId": {
              "type": "string",
              "description": "The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application.",
              "location": "path",
              "required": true
            },
            "includeRankType": {
              "enum": [
                "INCLUDE_RANK_TYPE_UNSPECIFIED",
                "ALL",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string",
              "description": "The types of ranks to return. If the parameter is omitted, no ranks will be returned.",
              "location": "query",
              "enumDescriptions": [
                "Default value. Should be unused.",
                "Retrieve all supported ranks. In HTTP, this parameter value can also be specified as `ALL`.",
                "Retrieve public ranks, if the player is sharing their gameplay activity publicly.",
                "(Obsolete) Retrieve the social rank.",
                "Retrieve the rank on the friends collection."
              ]
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`."
            }
          },
          "parameterOrder": [
            "playerId",
            "leaderboardId",
            "timeSpan"
          ]
        },
        "submit": {
          "parameterOrder": [
            "leaderboardId",
            "score"
          ],
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
          "response": {
            "$ref": "PlayerScoreResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "POST",
          "description": "Submits a score to the specified leaderboard.",
          "parameters": {
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "scoreTag": {
              "location": "query",
              "type": "string",
              "description": "Additional information about the score you're submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
              "pattern": "[a-zA-Z0-9-._~]{0,64}"
            },
            "score": {
              "required": true,
              "description": "The score you're submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units.",
              "location": "query",
              "format": "int64",
              "type": "string"
            },
            "leaderboardId": {
              "location": "path",
              "required": true,
              "description": "The ID of the leaderboard.",
              "type": "string"
            }
          },
          "path": "games/v1/leaderboards/{leaderboardId}/scores",
          "id": "games.scores.submit"
        },
        "list": {
          "httpMethod": "GET",
          "path": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "id": "games.scores.list",
          "parameters": {
            "leaderboardId": {
              "location": "path",
              "type": "string",
              "description": "The ID of the leaderboard.",
              "required": true
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "collection": {
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ],
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "location": "path",
              "description": "The collection of scores you're requesting.",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`."
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "timeSpan": {
              "description": "The time span for the scores and ranks you're requesting.",
              "location": "query",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "type": "string",
              "required": true
            }
          },
          "description": "Lists the scores in a leaderboard, starting from the top.",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "LeaderboardScores"
          },
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}"
        },
        "listWindow": {
          "id": "games.scores.listWindow",
          "parameters": {
            "collection": {
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "required": true,
              "description": "The collection of scores you're requesting.",
              "location": "path",
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ]
            },
            "timeSpan": {
              "type": "string",
              "description": "The time span for the scores and ranks you're requesting.",
              "location": "query",
              "required": true,
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ]
            },
            "leaderboardId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The ID of the leaderboard."
            },
            "pageToken": {
              "type": "string",
              "description": "The token returned by the previous request.",
              "location": "query"
            },
            "returnTopIfAbsent": {
              "description": "True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.",
              "type": "boolean",
              "location": "query"
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "type": "integer",
              "location": "query"
            },
            "resultsAbove": {
              "type": "integer",
              "description": "The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults.",
              "location": "query",
              "format": "int32"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "LeaderboardScores"
          },
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "description": "Lists the scores in a leaderboard around (and including) a player's score.",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "path": "games/v1/leaderboards/{leaderboardId}/window/{collection}"
        },
        "submitMultiple": {
          "description": "Submits multiple scores to leaderboards.",
          "flatPath": "games/v1/leaderboards/scores",
          "path": "games/v1/leaderboards/scores",
          "response": {
            "$ref": "PlayerScoreListResponse"
          },
          "id": "games.scores.submitMultiple",
          "request": {
            "$ref": "PlayerScoreSubmissionList"
          },
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": []
        }
      }
    },
    "events": {
      "methods": {
        "record": {
          "response": {
            "$ref": "EventUpdateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "request": {
            "$ref": "EventRecordRequest"
          },
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "description": "Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.",
          "path": "games/v1/events",
          "flatPath": "games/v1/events",
          "id": "games.events.record"
        },
        "listByPlayer": {
          "flatPath": "games/v1/events",
          "id": "games.events.listByPlayer",
          "parameterOrder": [],
          "path": "games/v1/events",
          "response": {
            "$ref": "PlayerEventListResponse"
          },
          "httpMethod": "GET",
          "description": "Returns a list showing the current progress on events in this application for the currently authenticated user.",
          "parameters": {
            "maxResults": {
              "location": "query",
              "description": "The maximum number of events to return in the response, used for paging. For any response, the actual number of events to return may be less than the specified maxResults.",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "listDefinitions": {
          "description": "Returns a list of the event definitions in this application.",
          "id": "games.events.listDefinitions",
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of event definitions to return in the response, used for paging. For any response, the actual number of event definitions to return may be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32"
            }
          },
          "flatPath": "games/v1/eventDefinitions",
          "path": "games/v1/eventDefinitions",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "EventDefinitionListResponse"
          }
        }
      }
    },
    "applications": {
      "methods": {
        "get": {
          "flatPath": "games/v1/applications/{applicationId}",
          "id": "games.applications.get",
          "path": "games/v1/applications/{applicationId}",
          "response": {
            "$ref": "Application"
          },
          "parameterOrder": [
            "applicationId"
          ],
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "platformType": {
              "description": "Restrict application details returned to the specific platform.",
              "enumDescriptions": [
                "Default value, don't use.",
                "Retrieve applications that can be played on Android.",
                "Retrieve applications that can be played on iOS.",
                "Retrieve applications that can be played on desktop web."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PLATFORM_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "WEB_APP"
              ]
            },
            "applicationId": {
              "location": "path",
              "description": "The application ID from the Google Play developer console.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "description": "Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data."
        },
        "verify": {
          "httpMethod": "GET",
          "flatPath": "games/v1/applications/{applicationId}/verify",
          "response": {
            "$ref": "ApplicationVerifyResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.applications.verify",
          "description": "Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.",
          "parameters": {
            "applicationId": {
              "type": "string",
              "description": "The application ID from the Google Play developer console.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "applicationId"
          ],
          "path": "games/v1/applications/{applicationId}/verify"
        },
        "played": {
          "flatPath": "games/v1/applications/played",
          "id": "games.applications.played",
          "parameters": {},
          "path": "games/v1/applications/played",
          "description": "Indicate that the currently authenticated user is playing your application.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": []
        },
        "getEndPoint": {
          "description": "Returns a URL for the requested end point type.",
          "flatPath": "games/v1/applications/getEndPoint",
          "parameterOrder": [],
          "id": "games.applications.getEndPoint",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "applicationId": {
              "location": "query",
              "type": "string",
              "description": "The application ID from the Google Play developer console."
            },
            "endPointType": {
              "enum": [
                "END_POINT_TYPE_UNSPECIFIED",
                "PROFILE_CREATION",
                "PROFILE_SETTINGS"
              ],
              "description": "Type of endpoint being requested.",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Request a URL to create a new profile.",
                "Request a URL for the Settings view."
              ]
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "EndPoint"
          },
          "path": "games/v1/applications/getEndPoint"
        }
      }
    },
    "stats": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "StatsResponse"
          },
          "description": "Returns engagement and spend statistics in this application for the currently authenticated user.",
          "parameterOrder": [],
          "parameters": {},
          "id": "games.stats.get",
          "flatPath": "games/v1/stats",
          "path": "games/v1/stats",
          "httpMethod": "GET"
        }
      }
    },
    "achievements": {
      "methods": {
        "setStepsAtLeast": {
          "id": "games.achievements.setStepsAtLeast",
          "parameterOrder": [
            "achievementId",
            "steps"
          ],
          "description": "Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.",
          "response": {
            "$ref": "AchievementSetStepsAtLeastResponse"
          },
          "parameters": {
            "steps": {
              "format": "int32",
              "description": "The minimum value to set the steps to.",
              "required": true,
              "type": "integer",
              "location": "query"
            },
            "achievementId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The ID of the achievement used by this method."
            }
          },
          "path": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "list": {
          "response": {
            "$ref": "PlayerAchievementListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "playerId"
          ],
          "path": "games/v1/players/{playerId}/achievements",
          "description": "Lists the progress for all your application's achievements for the currently authenticated player.",
          "id": "games.achievements.list",
          "httpMethod": "GET",
          "flatPath": "games/v1/players/{playerId}/achievements",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`.",
              "location": "query"
            },
            "state": {
              "enumDescriptions": [
                "List all achievements. This is the default.",
                "List only hidden achievements.",
                "List only revealed achievements.",
                "List only unlocked achievements."
              ],
              "enum": [
                "ALL",
                "HIDDEN",
                "REVEALED",
                "UNLOCKED"
              ],
              "location": "query",
              "description": "Tells the server to return only achievements with the specified state. If this parameter isn't specified, all achievements are returned.",
              "type": "string"
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "reveal": {
          "httpMethod": "POST",
          "parameters": {
            "achievementId": {
              "location": "path",
              "type": "string",
              "description": "The ID of the achievement used by this method.",
              "required": true
            }
          },
          "parameterOrder": [
            "achievementId"
          ],
          "id": "games.achievements.reveal",
          "flatPath": "games/v1/achievements/{achievementId}/reveal",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/achievements/{achievementId}/reveal",
          "description": "Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.",
          "response": {
            "$ref": "AchievementRevealResponse"
          }
        },
        "updateMultiple": {
          "description": "Updates multiple achievements for the currently authenticated player.",
          "parameterOrder": [],
          "parameters": {},
          "httpMethod": "POST",
          "path": "games/v1/achievements/updateMultiple",
          "request": {
            "$ref": "AchievementUpdateMultipleRequest"
          },
          "flatPath": "games/v1/achievements/updateMultiple",
          "id": "games.achievements.updateMultiple",
          "response": {
            "$ref": "AchievementUpdateMultipleResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "increment": {
          "description": "Increments the steps of the achievement with the given ID for the currently authenticated player.",
          "parameters": {
            "requestId": {
              "description": "A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries.",
              "type": "string",
              "location": "query",
              "format": "int64"
            },
            "achievementId": {
              "type": "string",
              "required": true,
              "description": "The ID of the achievement used by this method.",
              "location": "path"
            },
            "stepsToIncrement": {
              "type": "integer",
              "format": "int32",
              "required": true,
              "description": "The number of steps to increment.",
              "location": "query"
            }
          },
          "httpMethod": "POST",
          "path": "games/v1/achievements/{achievementId}/increment",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "AchievementIncrementResponse"
          },
          "parameterOrder": [
            "achievementId",
            "stepsToIncrement"
          ],
          "id": "games.achievements.increment",
          "flatPath": "games/v1/achievements/{achievementId}/increment"
        },
        "unlock": {
          "description": "Unlocks this achievement for the currently authenticated player.",
          "parameterOrder": [
            "achievementId"
          ],
          "response": {
            "$ref": "AchievementUnlockResponse"
          },
          "id": "games.achievements.unlock",
          "parameters": {
            "achievementId": {
              "type": "string",
              "description": "The ID of the achievement used by this method.",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/achievements/{achievementId}/unlock",
          "path": "games/v1/achievements/{achievementId}/unlock"
        }
      }
    },
    "snapshots": {
      "methods": {
        "list": {
          "parameterOrder": [
            "playerId"
          ],
          "flatPath": "games/v1/players/{playerId}/snapshots",
          "description": "Retrieves a list of snapshots created by your application for the player corresponding to the player ID.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/players/{playerId}/snapshots",
          "parameters": {
            "playerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of snapshot resources to return in the response, used for paging. For any response, the actual number of snapshot resources returned may be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "SnapshotListResponse"
          },
          "id": "games.snapshots.list"
        },
        "get": {
          "flatPath": "games/v1/snapshots/{snapshotId}",
          "path": "games/v1/snapshots/{snapshotId}",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "snapshotId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Snapshot"
          },
          "description": "Retrieves the metadata for a given snapshot ID.",
          "id": "games.snapshots.get",
          "parameters": {
            "snapshotId": {
              "type": "string",
              "required": true,
              "description": "The ID of the snapshot.",
              "location": "path"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          }
        }
      }
    },
    "players": {
      "methods": {
        "list": {
          "response": {
            "$ref": "PlayerListResponse"
          },
          "parameters": {
            "collection": {
              "required": true,
              "description": "Collection of players being retrieved",
              "enumDescriptions": [
                "Retrieve a list of players that are also playing this game in reverse chronological order.",
                "Retrieve a list of players in the user's social graph that are visible to this game.",
                "Retrieve a list of players who are friends of the user in alphabetical order."
              ],
              "type": "string",
              "enum": [
                "CONNECTED",
                "VISIBLE",
                "FRIENDS_ALL"
              ],
              "location": "path"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified `maxResults`."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "flatPath": "games/v1/players/me/players/{collection}",
          "path": "games/v1/players/me/players/{collection}",
          "description": "Get the collection of players for the currently authenticated user.",
          "id": "games.players.list",
          "parameterOrder": [
            "collection"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "get": {
          "path": "games/v1/players/{playerId}",
          "response": {
            "$ref": "Player"
          },
          "parameterOrder": [
            "playerId"
          ],
          "httpMethod": "GET",
          "description": "Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.",
          "parameters": {
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "playerId": {
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "games/v1/players/{playerId}",
          "id": "games.players.get",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        }
      }
    }
  },
  "mtlsRootUrl": "https://games.mtls.googleapis.com/",
  "parameters": {
    "$.xgafv": {
      "location": "query",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    }
  },
  "id": "games:v1",
  "title": "Google Play Game Services",
  "batchPath": "batch",
  "documentationLink": "https://developers.google.com/games/",
  "ownerName": "Google",
  "schemas": {
    "ApplicationCategory": {
      "id": "ApplicationCategory",
      "description": "An application category object.",
      "type": "object",
      "properties": {
        "secondary": {
          "description": "The secondary category.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationCategory`."
        },
        "primary": {
          "type": "string",
          "description": "The primary category."
        }
      }
    },
    "InstanceAndroidDetails": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceAndroidDetails`.",
          "type": "string"
        },
        "preferred": {
          "description": "Indicates that this instance is the default for new installations.",
          "type": "boolean"
        },
        "enablePiracyCheck": {
          "description": "Flag indicating whether the anti-piracy check is enabled.",
          "type": "boolean"
        },
        "packageName": {
          "description": "Android package name which maps to Google Play URL.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The Android instance details resource.",
      "id": "InstanceAndroidDetails"
    },
    "SnapshotMetadata": {
      "id": "SnapshotMetadata",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of this snapshot."
        },
        "gameplayDuration": {
          "description": "The duration associated with this snapshot. Values with sub-millisecond precision can be rounded or trimmed to the closest millisecond.",
          "type": "string",
          "format": "google-duration"
        },
        "progressValue": {
          "description": "The progress value (64-bit integer set by developer) associated with this snapshot.",
          "format": "int64",
          "type": "string"
        },
        "deviceName": {
          "type": "string",
          "description": "The device that created the current revision."
        },
        "lastModifyTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp of the last modification to this snapshot as provided by the client. Values with sub-millisecond precision can be rounded or trimmed to the closest millisecond."
        }
      },
      "type": "object",
      "description": "Metadata about a snapshot revision. Snapshot metadata is immutable - a metadata change corresponds to a new snapshot revision."
    },
    "AchievementDefinitionsListResponse": {
      "id": "AchievementDefinitionsListResponse",
      "description": "A list of achievement definition objects.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "AchievementDefinition"
          },
          "type": "array",
          "description": "The achievement definitions."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinitionsListResponse`.",
          "type": "string"
        }
      }
    },
    "EventUpdateRequest": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateRequest`."
        },
        "updateCount": {
          "type": "string",
          "format": "int64",
          "description": "The number of times this event occurred in this time period."
        },
        "definitionId": {
          "description": "The ID of the event being modified in this update.",
          "type": "string"
        }
      },
      "description": "An event period update resource.",
      "id": "EventUpdateRequest",
      "type": "object"
    },
    "MetagameConfig": {
      "type": "object",
      "description": "The metagame config resource",
      "id": "MetagameConfig",
      "properties": {
        "playerLevels": {
          "items": {
            "$ref": "PlayerLevel"
          },
          "description": "The list of player levels.",
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#metagameConfig`.",
          "type": "string"
        },
        "currentVersion": {
          "description": "Current version of the metagame configuration data. When this data is updated, the version number will be increased by one.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AchievementUnlockResponse": {
      "description": "An achievement unlock response",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUnlockResponse`."
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player)."
        }
      },
      "id": "AchievementUnlockResponse",
      "type": "object"
    },
    "GamesAchievementSetStepsAtLeast": {
      "properties": {
        "steps": {
          "description": "The minimum number of steps for the achievement to be set to.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementSetStepsAtLeast`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GamesAchievementSetStepsAtLeast",
      "description": "The payload to request to increment an achievement."
    },
    "PlayerAchievement": {
      "type": "object",
      "properties": {
        "achievementState": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "description": "The state of the achievement."
        },
        "formattedCurrentStepsString": {
          "type": "string",
          "description": "The current steps for an incremental achievement as a string."
        },
        "experiencePoints": {
          "type": "string",
          "format": "int64",
          "description": "Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished."
        },
        "currentSteps": {
          "description": "The current steps for an incremental achievement.",
          "type": "integer",
          "format": "int32"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "description": "The timestamp of the last modification to this achievement's state.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the achievement."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`."
        }
      },
      "id": "PlayerAchievement",
      "description": "An achievement object."
    },
    "EventDefinition": {
      "description": "An event definition resource.",
      "properties": {
        "visibility": {
          "enum": [
            "EVENT_VISIBILITY_UNSPECIFIED",
            "REVEALED",
            "HIDDEN"
          ],
          "type": "string",
          "description": "The visibility of event being tracked in this definition.",
          "enumDescriptions": [
            "Default value. Should not be used.",
            "This event should be visible to all users.",
            "This event should only be shown to users that have recorded this event at least once."
          ]
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the event."
        },
        "childEvents": {
          "items": {
            "$ref": "EventChild"
          },
          "description": "A list of events that are a child of this event.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`."
        },
        "imageUrl": {
          "description": "The base URL for the image that represents the event.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the event."
        },
        "isDefaultImageUrl": {
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided.",
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "description": "Description of what this event represents."
        }
      },
      "type": "object",
      "id": "EventDefinition"
    },
    "AchievementIncrementResponse": {
      "type": "object",
      "description": "An achievement increment response",
      "properties": {
        "newlyUnlocked": {
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementIncrementResponse`."
        },
        "currentSteps": {
          "type": "integer",
          "description": "The current steps recorded for this incremental achievement.",
          "format": "int32"
        }
      },
      "id": "AchievementIncrementResponse"
    },
    "AchievementRevealResponse": {
      "type": "object",
      "description": "An achievement reveal response",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`."
        },
        "currentState": {
          "description": "The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.",
          "type": "string",
          "enum": [
            "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        }
      },
      "id": "AchievementRevealResponse"
    },
    "PlayerScoreResponse": {
      "description": "A list of leaderboard entry resources.",
      "type": "object",
      "id": "PlayerScoreResponse",
      "properties": {
        "unbeatenScores": {
          "description": "The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.",
          "type": "array",
          "items": {
            "$ref": "PlayerScore"
          }
        },
        "formattedScore": {
          "description": "The formatted value of the submitted score.",
          "type": "string"
        },
        "leaderboardId": {
          "type": "string",
          "description": "The leaderboard ID that this score was submitted to."
        },
        "scoreTag": {
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "beatenScoreTimeSpans": {
          "type": "array",
          "description": "The time spans where the submitted score is better than the existing score for that time span.",
          "items": {
            "enumDescriptions": [
              "Default value. This value is unused.",
              "The score is an all-time score.",
              "The score is a weekly score.",
              "The score is a daily score."
            ],
            "type": "string",
            "enum": [
              "SCORE_TIME_SPAN_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY",
              "DAILY"
            ]
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.",
          "type": "string"
        }
      }
    },
    "PlayerEventListResponse": {
      "description": "A ListByPlayer response.",
      "id": "PlayerEventListResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEventListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "PlayerEvent"
          },
          "description": "The player events."
        }
      },
      "type": "object"
    },
    "SnapshotListResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results. If there are no more results, the token is omitted.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotListResponse`."
        },
        "items": {
          "description": "The snapshots.",
          "items": {
            "$ref": "Snapshot"
          },
          "type": "array"
        }
      },
      "description": "A third party list snapshots response.",
      "id": "SnapshotListResponse"
    },
    "PlayerEvent": {
      "id": "PlayerEvent",
      "type": "object",
      "description": "An event status resource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`."
        },
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "formattedNumEvents": {
          "type": "string",
          "description": "The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console."
        },
        "numEvents": {
          "format": "int64",
          "description": "The current number of times this event has occurred.",
          "type": "string"
        },
        "definitionId": {
          "description": "The ID of the event definition.",
          "type": "string"
        }
      }
    },
    "EventRecordFailure": {
      "id": "EventRecordFailure",
      "properties": {
        "failureCause": {
          "enum": [
            "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID_UPDATE_VALUE"
          ],
          "enumDescriptions": [
            "Default value. Should not use.",
            "An attempt was made to set an event that was not defined.",
            "An attempt was made to increment an event by a non-positive value."
          ],
          "type": "string",
          "description": "The cause for the update failure."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.",
          "type": "string"
        },
        "eventId": {
          "type": "string",
          "description": "The ID of the event that was not updated."
        }
      },
      "type": "object",
      "description": "An event update failure resource."
    },
    "ScoreSubmission": {
      "id": "ScoreSubmission",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`."
        },
        "score": {
          "type": "string",
          "description": "The new score being submitted.",
          "format": "int64"
        },
        "signature": {
          "type": "string",
          "description": "Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "leaderboardId": {
          "description": "The leaderboard this score is being submitted to.",
          "type": "string"
        }
      },
      "description": "A request to submit a score to leaderboards."
    },
    "AchievementUpdateRequest": {
      "description": "A request to update an achievement.",
      "properties": {
        "achievementId": {
          "description": "The achievement this update is being applied to.",
          "type": "string"
        },
        "setStepsAtLeastPayload": {
          "description": "The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the achievement.",
          "$ref": "GamesAchievementSetStepsAtLeast"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.",
          "type": "string"
        },
        "incrementPayload": {
          "description": "The payload if an update of type `INCREMENT` was requested for the achievement.",
          "$ref": "GamesAchievementIncrement"
        },
        "updateType": {
          "type": "string",
          "enum": [
            "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED",
            "REVEAL",
            "UNLOCK",
            "INCREMENT",
            "SET_STEPS_AT_LEAST"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked.",
            "Achievement is incremented.",
            "Achievement progress is set to at least the passed value."
          ],
          "description": "The type of update being applied."
        }
      },
      "type": "object",
      "id": "AchievementUpdateRequest"
    },
    "PlayerLeaderboardScore": {
      "properties": {
        "socialRank": {
          "description": "The social rank of the score in this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        },
        "scoreString": {
          "description": "The formatted value of this score.",
          "type": "string"
        },
        "publicRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.",
          "type": "string"
        },
        "leaderboard_id": {
          "type": "string",
          "description": "The ID of the leaderboard this score is in."
        },
        "scoreTag": {
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "friendsRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The rank of the score in the friends collection for this leaderboard."
        },
        "timeSpan": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "type": "string",
          "description": "The time span of this score."
        },
        "writeTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC."
        },
        "scoreValue": {
          "type": "string",
          "description": "The numerical value of this score.",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "PlayerLeaderboardScore",
      "description": "A player leaderboard score object."
    },
    "Instance": {
      "description": "The Instance resource.",
      "id": "Instance",
      "properties": {
        "realtimePlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports realtime play."
        },
        "androidInstance": {
          "$ref": "InstanceAndroidDetails",
          "description": "Platform dependent details for Android."
        },
        "webInstance": {
          "description": "Platform dependent details for Web.",
          "$ref": "InstanceWebDetails"
        },
        "turnBasedPlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports turn based play."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`."
        },
        "iosInstance": {
          "description": "Platform dependent details for iOS.",
          "$ref": "InstanceIosDetails"
        },
        "name": {
          "description": "Localized display name.",
          "type": "string"
        },
        "acquisitionUri": {
          "type": "string",
          "description": "URI which shows where a user can acquire this instance."
        },
        "platformType": {
          "enum": [
            "PLATFORM_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "WEB_APP"
          ],
          "type": "string",
          "description": "The platform type.",
          "enumDescriptions": [
            "Default value. Should be unused.",
            "Instance is for Android.",
            "Instance is for iOS.",
            "Instance is for Web App."
          ]
        }
      },
      "type": "object"
    },
    "PlayerScoreListResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreListResponse`."
        },
        "submittedScores": {
          "items": {
            "$ref": "PlayerScoreResponse"
          },
          "description": "The score submissions statuses.",
          "type": "array"
        }
      },
      "description": "A list of score submission statuses.",
      "id": "PlayerScoreListResponse"
    },
    "ResolveSnapshotHeadResponse": {
      "type": "object",
      "properties": {
        "snapshot": {
          "description": "The state of the snapshot.",
          "$ref": "SnapshotExtended"
        }
      },
      "description": "Response for ResolveSnapshotHead RPC.",
      "id": "ResolveSnapshotHeadResponse"
    },
    "PlayerExperienceInfo": {
      "properties": {
        "nextLevel": {
          "$ref": "PlayerLevel",
          "description": "The next level of the player. If the current level is the maximum level, this should be same as the current level."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.",
          "type": "string"
        },
        "currentExperiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "The current number of experience points for the player."
        },
        "currentLevel": {
          "description": "The current level of the player.",
          "$ref": "PlayerLevel"
        },
        "lastLevelUpTimestampMillis": {
          "description": "The timestamp when the player was leveled up, in millis since Unix epoch UTC.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "PlayerExperienceInfo",
      "description": "1P/3P metadata about the player's experience.",
      "type": "object"
    },
    "SnapshotCoverImageResource": {
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The ID of the image resource. It's guaranteed that if two IDs are equal then the contents are equal as well. It's not guaranteed that two identical blobs coming from separate uploads have the same ID. The resource ID can only be used within the application, user and resource type it was originally returned for. For example, it's not possible to use SnapshotDataResource's resource ID as the resource_id of a SnapshotCoverImageResource, even if the blob is a valid image file.",
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "The width of the image in pixels."
        },
        "height": {
          "type": "integer",
          "description": "The height of the image in pixels.",
          "format": "int32"
        },
        "contentHash": {
          "type": "string",
          "description": "Output only. Hash-like weak identifier of the uploaded image bytes, consistent per player per application. The content hash for a given resource will not change if the binary data hasn't changed. Except in very rare circumstances, the content_hash for matching binary data will be the same within a given player and application.",
          "readOnly": true
        },
        "downloadUrl": {
          "readOnly": true,
          "description": "Output only. A URL the client can use to download the image. May vary across requests, and only guaranteed to be valid for a short time after it is returned.",
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "Output only. The MIME type of the image.",
          "readOnly": true
        }
      },
      "description": "Identifies a snapshot cover image resource. The image is provided by the game.",
      "id": "SnapshotCoverImageResource"
    },
    "GamesAchievementIncrement": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementIncrement`.",
          "type": "string"
        },
        "requestId": {
          "format": "int64",
          "type": "string",
          "description": "The requestId associated with an increment to an achievement."
        },
        "steps": {
          "description": "The number of steps to be incremented.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "GamesAchievementIncrement",
      "type": "object",
      "description": "The payload to request to increment an achievement."
    },
    "PlayerScore": {
      "description": "A player score.",
      "id": "PlayerScore",
      "properties": {
        "scoreTag": {
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "timeSpan": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "description": "The time span for this player score.",
          "type": "string"
        },
        "formattedScore": {
          "type": "string",
          "description": "The formatted score for this player score."
        },
        "score": {
          "type": "string",
          "description": "The numerical value for this player score.",
          "format": "int64"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaderboardScoreRank": {
      "type": "object",
      "description": "A score rank in a leaderboard.",
      "id": "LeaderboardScoreRank",
      "properties": {
        "numScores": {
          "format": "int64",
          "description": "The number of scores in the leaderboard.",
          "type": "string"
        },
        "formattedRank": {
          "type": "string",
          "description": "The rank in the leaderboard as a string."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScoreRank`."
        },
        "rank": {
          "type": "string",
          "format": "int64",
          "description": "The rank in the leaderboard."
        },
        "formattedNumScores": {
          "type": "string",
          "description": "The number of scores in the leaderboard as a string."
        }
      }
    },
    "AchievementDefinition": {
      "type": "object",
      "description": "An achievement definition object.",
      "properties": {
        "isUnlockedIconUrlDefault": {
          "description": "Indicates whether the unlocked icon image being returned is a default image, or is game-provided.",
          "type": "boolean"
        },
        "unlockedIconUrl": {
          "description": "The image URL for the unlocked achievement icon.",
          "type": "string"
        },
        "isRevealedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the revealed icon image being returned is a default image, or is provided by the game."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.",
          "type": "string"
        },
        "formattedTotalSteps": {
          "description": "The total steps for an incremental achievement as a string.",
          "type": "string"
        },
        "experiencePoints": {
          "format": "int64",
          "description": "Experience points which will be earned when unlocking this achievement.",
          "type": "string"
        },
        "totalSteps": {
          "type": "integer",
          "description": "The total steps for an incremental achievement.",
          "format": "int32"
        },
        "description": {
          "description": "The description of the achievement.",
          "type": "string"
        },
        "achievementType": {
          "type": "string",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is either locked or unlocked.",
            "Achievement is incremental."
          ],
          "description": "The type of the achievement.",
          "enum": [
            "ACHIEVEMENT_TYPE_UNSPECIFIED",
            "STANDARD",
            "INCREMENTAL"
          ]
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "name": {
          "description": "The name of the achievement.",
          "type": "string"
        },
        "initialState": {
          "description": "The initial state of the achievement.",
          "type": "string",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "enum": [
            "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ]
        },
        "revealedIconUrl": {
          "type": "string",
          "description": "The image URL for the revealed achievement icon."
        }
      },
      "id": "AchievementDefinition"
    },
    "ImageAsset": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the asset."
        },
        "width": {
          "description": "The width of the asset.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`."
        },
        "height": {
          "description": "The height of the asset.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The name of the asset."
        }
      },
      "type": "object",
      "description": "An image asset object.",
      "id": "ImageAsset"
    },
    "LeaderboardScores": {
      "properties": {
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScores`."
        },
        "numScores": {
          "format": "int64",
          "type": "string",
          "description": "The total number of scores in the leaderboard."
        },
        "items": {
          "type": "array",
          "description": "The scores in the leaderboard.",
          "items": {
            "$ref": "LeaderboardEntry"
          }
        },
        "playerScore": {
          "description": "The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the `scoreRank`and `formattedScoreRank` values will not be present.",
          "$ref": "LeaderboardEntry"
        },
        "prevPageToken": {
          "description": "The pagination token for the previous page of results.",
          "type": "string"
        }
      },
      "id": "LeaderboardScores",
      "type": "object",
      "description": "A ListScores response."
    },
    "Leaderboard": {
      "type": "object",
      "properties": {
        "order": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Larger values are better; scores are sorted in descending order",
            "Smaller values are better; scores are sorted in ascending order"
          ],
          "type": "string",
          "enum": [
            "SCORE_ORDER_UNSPECIFIED",
            "LARGER_IS_BETTER",
            "SMALLER_IS_BETTER"
          ],
          "description": "How scores are ordered."
        },
        "isIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided."
        },
        "id": {
          "type": "string",
          "description": "The leaderboard ID."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.",
          "type": "string"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon for the leaderboard."
        },
        "name": {
          "type": "string",
          "description": "The name of the leaderboard."
        }
      },
      "id": "Leaderboard",
      "description": "The Leaderboard resource."
    },
    "EventPeriodRange": {
      "description": "An event period time range.",
      "type": "object",
      "id": "EventPeriodRange",
      "properties": {
        "periodStartMillis": {
          "description": "The time when this update period begins, in millis, since 1970 UTC (Unix Epoch).",
          "type": "string",
          "format": "int64"
        },
        "periodEndMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period ends, in millis, since 1970 UTC (Unix Epoch)."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodRange`."
        }
      }
    },
    "Player": {
      "type": "object",
      "description": "A Player resource.",
      "properties": {
        "profileSettings": {
          "$ref": "ProfileSettings",
          "description": "The player's profile settings. Controls whether or not the player's profile is visible to other players."
        },
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "friendStatus": {
          "type": "string",
          "enum": [
            "FRIEND_STATUS_UNSPECIFIED",
            "NO_RELATIONSHIP",
            "FRIEND"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "There is no relationship between the players.",
            "The player and requester are friends."
          ],
          "description": "The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game."
        },
        "title": {
          "description": "The player's title rewarded for their game activities.",
          "type": "string"
        },
        "originalPlayerId": {
          "type": "string",
          "description": "The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs."
        },
        "avatarImageUrl": {
          "description": "The base URL for the image that represents the player.",
          "type": "string"
        },
        "experienceInfo": {
          "description": "An object to represent Play Game experience information for the player.",
          "$ref": "PlayerExperienceInfo"
        },
        "bannerUrlPortrait": {
          "description": "The url to the portrait mode player banner image.",
          "type": "string"
        },
        "bannerUrlLandscape": {
          "description": "The url to the landscape mode player banner image.",
          "type": "string"
        },
        "name": {
          "description": "A representation of the individual components of the name.",
          "type": "object",
          "properties": {
            "givenName": {
              "type": "string",
              "description": "The given name of this player. In some places, this is known as the first name."
            },
            "familyName": {
              "description": "The family name of this player. In some places, this is known as the last name.",
              "type": "string"
            }
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#player`"
        },
        "displayName": {
          "description": "The name to display for the player.",
          "type": "string"
        }
      },
      "id": "Player"
    },
    "PlayerAchievementListResponse": {
      "id": "PlayerAchievementListResponse",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "PlayerAchievement"
          },
          "type": "array",
          "description": "The achievements."
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievementListResponse`.",
          "type": "string"
        }
      },
      "description": "A list of achievement objects."
    },
    "EventPeriodUpdate": {
      "properties": {
        "updates": {
          "description": "The updates being made for this time period.",
          "type": "array",
          "items": {
            "$ref": "EventUpdateRequest"
          }
        },
        "timePeriod": {
          "$ref": "EventPeriodRange",
          "description": "The time period being covered by this update."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodUpdate`."
        }
      },
      "description": "An event period update resource.",
      "type": "object",
      "id": "EventPeriodUpdate"
    },
    "SnapshotExtended": {
      "id": "SnapshotExtended",
      "properties": {
        "hasConflictingRevisions": {
          "type": "boolean",
          "description": "An indicator whether the snapshot has any conflicting revisions or not. Always set."
        },
        "headRevision": {
          "description": "The current head revision (the canonical revision as understood by the server).",
          "$ref": "SnapshotRevision"
        },
        "conflictingRevisions": {
          "type": "array",
          "items": {
            "$ref": "SnapshotRevision"
          },
          "description": "A list of conflicting revisions. Only set if explicitly requested (e.g. using a field mask or a request flag), or if the RPC guarantees that this field is set. The conflicting revisions are sorted chronologically by their server creation time (oldest first). If there are too many conflicting revisions to return all of them in a single request this will only contain the first batch. In such case, the presented conflicting revisions must be resolved first in order to fetch the next batch."
        },
        "snapshotName": {
          "type": "string",
          "description": "An identifier of the snapshot, developer-specified. It must match the pattern [0-9a-zA-Z-._~]{1,100}."
        }
      },
      "type": "object",
      "description": "A snapshot represents a saved game state referred to using the developer-provided snapshot_name. The set of attributes and binary data for a specific state is called a revision. Each revision is itself immutable, and referred to by a snapshot revision id. At any time, a snapshot has a \"head\" revision, and updates are made against that revision. If a snapshot update is received that isn't against the current head revision, then instead of changing the head revision it will result in a conflicting revision that must be specifically resolved."
    },
    "EventDefinitionListResponse": {
      "type": "object",
      "id": "EventDefinitionListResponse",
      "description": "A ListDefinitions response.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "items": {
          "items": {
            "$ref": "EventDefinition"
          },
          "type": "array",
          "description": "The event definitions."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinitionListResponse`.",
          "type": "string"
        }
      }
    },
    "EventUpdateResponse": {
      "description": "An event period update resource.",
      "id": "EventUpdateResponse",
      "properties": {
        "playerEvents": {
          "description": "The current status of any updated events",
          "items": {
            "$ref": "PlayerEvent"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`."
        },
        "batchFailures": {
          "description": "Any batch-wide failures which occurred applying updates.",
          "type": "array",
          "items": {
            "$ref": "EventBatchRecordFailure"
          }
        },
        "eventFailures": {
          "type": "array",
          "items": {
            "$ref": "EventRecordFailure"
          },
          "description": "Any failures updating a particular event."
        }
      },
      "type": "object"
    },
    "EventRecordRequest": {
      "id": "EventRecordRequest",
      "properties": {
        "currentTimeMillis": {
          "type": "string",
          "format": "int64",
          "description": "The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch)."
        },
        "timePeriods": {
          "type": "array",
          "items": {
            "$ref": "EventPeriodUpdate"
          },
          "description": "A list of the time period updates being made in this request."
        },
        "requestId": {
          "description": "The request ID used to identify this attempt to record events.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordRequest`."
        }
      },
      "type": "object",
      "description": "An event period update resource."
    },
    "PlayerScoreSubmissionList": {
      "properties": {
        "scores": {
          "type": "array",
          "description": "The score submissions.",
          "items": {
            "$ref": "ScoreSubmission"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreSubmissionList`."
        }
      },
      "id": "PlayerScoreSubmissionList",
      "type": "object",
      "description": "A list of score submission requests."
    },
    "CategoryListResponse": {
      "description": "A third party list metagame categories response.",
      "type": "object",
      "id": "CategoryListResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "Category"
          },
          "type": "array",
          "description": "The list of categories with usage data."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#categoryListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      }
    },
    "SnapshotDataResource": {
      "properties": {
        "downloadUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. A URL that the client can use to download the blob. May vary across requests, and only guaranteed to be valid for a short time after it is returned."
        },
        "contentHash": {
          "readOnly": true,
          "description": "Output only. Hash-like weak identifier of the uploaded blob bytes, consistent per player per application. The content hash for a given resource will not change if the binary data hasn't changed. Except in very rare circumstances, the content_hash for matching binary data will be the same within a given player and application.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "The ID of the blob resource. It's guaranteed that if two IDs are equal then the contents are equal as well. It's not guaranteed that two identical blobs coming from separate uploads have the same resource ID. The resource ID can only be used within the application, user and resource type it was originally returned for. For example, it's not possible to use SnapshotDataResource's resource ID as the resource_id of a SnapshotCoverImageResource, even if the blob is a valid image file."
        },
        "size": {
          "format": "int64",
          "description": "Output only. Size of the saved game blob in bytes.",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "Identifies a snapshot data resource. The data is provided by the game.",
      "id": "SnapshotDataResource",
      "type": "object"
    },
    "LeaderboardListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "Leaderboard"
          },
          "description": "The leaderboards.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardListResponse`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LeaderboardListResponse",
      "description": "A list of leaderboard objects."
    },
    "PlayerLeaderboardScoreListResponse": {
      "id": "PlayerLeaderboardScoreListResponse",
      "type": "object",
      "description": "A list of player leaderboard scores.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScoreListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "player": {
          "description": "The Player resources for the owner of this score.",
          "$ref": "Player"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "PlayerLeaderboardScore"
          },
          "description": "The leaderboard scores."
        }
      }
    },
    "ApplicationVerifyResponse": {
      "type": "object",
      "id": "ApplicationVerifyResponse",
      "description": "A third party application verification response resource.",
      "properties": {
        "alternate_player_id": {
          "description": "An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)",
          "type": "string"
        },
        "player_id": {
          "description": "The ID of the player that was issued the auth token used in this request.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationVerifyResponse`."
        }
      }
    },
    "InstanceWebDetails": {
      "type": "object",
      "description": "The Web details resource.",
      "id": "InstanceWebDetails",
      "properties": {
        "launchUrl": {
          "type": "string",
          "description": "Launch URL for the game."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceWebDetails`."
        },
        "preferred": {
          "description": "Indicates that this instance is the default for new installations.",
          "type": "boolean"
        }
      }
    },
    "AchievementUpdateResponse": {
      "properties": {
        "updateOccurred": {
          "description": "Whether the requested updates actually affected the achievement.",
          "type": "boolean"
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player)."
        },
        "currentSteps": {
          "description": "The current steps recorded for this achievement if it is incremental.",
          "format": "int32",
          "type": "integer"
        },
        "currentState": {
          "type": "string",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "description": "The current state of the achievement.",
          "enum": [
            "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`."
        },
        "achievementId": {
          "type": "string",
          "description": "The achievement this update is was applied to."
        }
      },
      "id": "AchievementUpdateResponse",
      "description": "An updated achievement.",
      "type": "object"
    },
    "AchievementSetStepsAtLeastResponse": {
      "type": "object",
      "properties": {
        "currentSteps": {
          "format": "int32",
          "type": "integer",
          "description": "The current steps recorded for this incremental achievement."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`.",
          "type": "string"
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock."
        }
      },
      "description": "An achievement set steps at least response.",
      "id": "AchievementSetStepsAtLeastResponse"
    },
    "AchievementUpdateMultipleRequest": {
      "id": "AchievementUpdateMultipleRequest",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "AchievementUpdateRequest"
          },
          "description": "The individual achievement update requests."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleRequest`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A list of achievement update requests."
    },
    "SnapshotImage": {
      "properties": {
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "The width of the image."
        },
        "url": {
          "type": "string",
          "description": "The URL of the image. This URL may be invalidated at any time and should not be cached."
        },
        "mime_type": {
          "type": "string",
          "description": "The MIME type of the image."
        },
        "height": {
          "description": "The height of the image.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotImage`."
        }
      },
      "id": "SnapshotImage",
      "description": "An image of a snapshot.",
      "type": "object"
    },
    "Application": {
      "properties": {
        "author": {
          "description": "The author of the application.",
          "type": "string"
        },
        "themeColor": {
          "type": "string",
          "description": "A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\")."
        },
        "enabledFeatures": {
          "type": "array",
          "items": {
            "enum": [
              "APPLICATION_FEATURE_UNSPECIFIED",
              "SNAPSHOTS"
            ],
            "type": "string",
            "enumDescriptions": [
              "Safe default, don't use.",
              "Saved Games (snapshots)."
            ]
          },
          "description": "A list of features that have been enabled for the application."
        },
        "id": {
          "description": "The ID of the application.",
          "type": "string"
        },
        "category": {
          "$ref": "ApplicationCategory",
          "description": "The category of the application."
        },
        "leaderboard_count": {
          "description": "The number of leaderboards visible to the currently authenticated player.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the application.",
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "type": "string",
          "description": "The last updated timestamp of the application.",
          "format": "int64"
        },
        "achievement_count": {
          "format": "int32",
          "type": "integer",
          "description": "The number of achievements visible to the currently authenticated player."
        },
        "instances": {
          "items": {
            "$ref": "Instance"
          },
          "description": "The instances of the application.",
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.",
          "type": "string"
        },
        "description": {
          "description": "The description of the application.",
          "type": "string"
        },
        "assets": {
          "description": "The assets of the application.",
          "type": "array",
          "items": {
            "$ref": "ImageAsset"
          }
        }
      },
      "type": "object",
      "description": "The Application resource.",
      "id": "Application"
    },
    "EventBatchRecordFailure": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventBatchRecordFailure`.",
          "type": "string"
        },
        "range": {
          "description": "The time range which was rejected; empty for a request-wide failure.",
          "$ref": "EventPeriodRange"
        },
        "failureCause": {
          "enum": [
            "EVENT_FAILURE_CAUSE_UNSPECIFIED",
            "TOO_LARGE",
            "TIME_PERIOD_EXPIRED",
            "TIME_PERIOD_SHORT",
            "TIME_PERIOD_LONG",
            "ALREADY_UPDATED",
            "RECORD_RATE_HIGH"
          ],
          "enumDescriptions": [
            "Default value. Should not be used.",
            "A batch request was issued with more events than are allowed in a single batch.",
            "A batch was sent with data too far in the past to record.",
            "A batch was sent with a time range that was too short.",
            "A batch was sent with a time range that was too long.",
            "An attempt was made to record a batch of data which was already seen.",
            "An attempt was made to record data faster than the server will apply updates."
          ],
          "description": "The cause for the update failure.",
          "type": "string"
        }
      },
      "description": "A batch update failure resource.",
      "id": "EventBatchRecordFailure"
    },
    "RevisionCheckResponse": {
      "type": "object",
      "description": "A third party checking a revision response.",
      "properties": {
        "revisionStatus": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The revision being used is current.",
            "There is currently a newer version available, but the revision being used still works.",
            "The revision being used is not supported in any released version."
          ],
          "type": "string",
          "enum": [
            "REVISION_STATUS_UNSPECIFIED",
            "OK",
            "DEPRECATED",
            "INVALID"
          ],
          "description": "The result of the revision check."
        },
        "apiVersion": {
          "description": "The version of the API this client revision should use when calling API methods.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#revisionCheckResponse`."
        }
      },
      "id": "RevisionCheckResponse"
    },
    "PlayerListResponse": {
      "id": "PlayerListResponse",
      "description": "A third party player list response.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerListResponse`.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Player"
          },
          "description": "The players.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        }
      }
    },
    "Category": {
      "description": "Data related to individual game categories.",
      "id": "Category",
      "properties": {
        "experiencePoints": {
          "description": "Experience points earned in this category.",
          "type": "string",
          "format": "int64"
        },
        "category": {
          "description": "The category name.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#category`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Snapshot": {
      "description": "An snapshot object.",
      "id": "Snapshot",
      "properties": {
        "durationMillis": {
          "format": "int64",
          "description": "The duration associated with this snapshot, in millis.",
          "type": "string"
        },
        "coverImage": {
          "description": "The cover image of this snapshot. May be absent if there is no image.",
          "$ref": "SnapshotImage"
        },
        "id": {
          "type": "string",
          "description": "The ID of the snapshot."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`."
        },
        "title": {
          "type": "string",
          "description": "The title of this snapshot."
        },
        "lastModifiedMillis": {
          "description": "The timestamp (in millis since Unix epoch) of the last modification to this snapshot.",
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "description": "The description of this snapshot."
        },
        "driveId": {
          "type": "string",
          "description": "The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller."
        },
        "type": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "A snapshot representing a save game."
          ],
          "type": "string",
          "description": "The type of this snapshot.",
          "enum": [
            "SNAPSHOT_TYPE_UNSPECIFIED",
            "SAVE_GAME"
          ]
        },
        "progressValue": {
          "description": "The progress value (64-bit integer set by developer) associated with this snapshot.",
          "type": "string",
          "format": "int64"
        },
        "uniqueName": {
          "description": "The unique name provided when the snapshot was created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaderboardEntry": {
      "type": "object",
      "properties": {
        "scoreRank": {
          "description": "The rank of this score for this leaderboard.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`."
        },
        "formattedScoreRank": {
          "type": "string",
          "description": "The localized string for the rank of this score for this leaderboard."
        },
        "timeSpan": {
          "type": "string",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "description": "The time span of this high score."
        },
        "formattedScore": {
          "description": "The localized string for the numerical value of this score.",
          "type": "string"
        },
        "scoreValue": {
          "type": "string",
          "format": "int64",
          "description": "The numerical value of this score."
        },
        "scoreTag": {
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "writeTimestampMillis": {
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.",
          "type": "string",
          "format": "int64"
        },
        "player": {
          "$ref": "Player",
          "description": "The player who holds this score."
        }
      },
      "description": "The Leaderboard Entry resource.",
      "id": "LeaderboardEntry"
    },
    "StatsResponse": {
      "id": "StatsResponse",
      "properties": {
        "spend_probability": {
          "format": "float",
          "description": "The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "num_sessions": {
          "type": "integer",
          "description": "The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.",
          "format": "int32"
        },
        "total_spend_next_28_days": {
          "description": "The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.",
          "format": "float",
          "type": "number"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.",
          "type": "string"
        },
        "spend_percentile": {
          "format": "float",
          "description": "The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "churn_probability": {
          "format": "float",
          "description": "The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.",
          "type": "number"
        },
        "num_sessions_percentile": {
          "format": "float",
          "type": "number",
          "description": "The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information."
        },
        "days_since_last_played": {
          "description": "Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.",
          "type": "integer",
          "format": "int32"
        },
        "avg_session_length_minutes": {
          "format": "float",
          "description": "Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.",
          "type": "number"
        },
        "high_spender_probability": {
          "type": "number",
          "description": "The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.",
          "format": "float"
        },
        "num_purchases": {
          "description": "Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "A third party stats resource.",
      "type": "object"
    },
    "ProfileSettings": {
      "properties": {
        "friendsListVisibility": {
          "type": "string",
          "enum": [
            "FRIENDS_LIST_VISIBILITY_UNSPECIFIED",
            "VISIBLE",
            "REQUEST_REQUIRED",
            "UNAVAILABLE"
          ],
          "enumDescriptions": [
            "Unused.",
            "The friends list is currently visible to the game.",
            "The developer does not have access to the friends list, but can call the Android API to show a consent dialog.",
            "The friends list is currently unavailable for this user, and it is not possible to request access at this time, either because the user has permanently declined or the friends feature is not available to them. In this state, any attempts to request access to the friends list will be unsuccessful."
          ]
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.",
          "type": "string"
        },
        "profileVisible": {
          "type": "boolean",
          "description": "Whether the player's profile is visible to the currently signed in player."
        }
      },
      "id": "ProfileSettings",
      "type": "object",
      "description": "Profile settings"
    },
    "InstanceIosDetails": {
      "id": "InstanceIosDetails",
      "type": "object",
      "description": "The iOS details resource.",
      "properties": {
        "supportIphone": {
          "description": "Flag to indicate if this instance supports iPhone.",
          "type": "boolean"
        },
        "bundleIdentifier": {
          "type": "string",
          "description": "Bundle identifier."
        },
        "supportIpad": {
          "type": "boolean",
          "description": "Flag to indicate if this instance supports iPad."
        },
        "itunesAppId": {
          "type": "string",
          "description": "iTunes App ID."
        },
        "preferredForIphone": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations on iPhone devices."
        },
        "preferredForIpad": {
          "description": "Indicates that this instance is the default for new installations on iPad devices.",
          "type": "boolean"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.",
          "type": "string"
        }
      }
    },
    "ResolveSnapshotHeadRequest": {
      "description": "Request for ResolveSnapshotHead RPC.",
      "id": "ResolveSnapshotHeadRequest",
      "properties": {
        "maxConflictsPerSnapshot": {
          "type": "integer",
          "description": "The maximum number of SnapshotRevision resources for `conflictingRevisions` to return per SnapshotExtended resource in the response. For any response, the actual number of resources returned may be less than specified by `maxConflictsPerSnapshot`. The value provided should be greater or equal to 0. If no value is provided, the server will use a sensible default.",
          "format": "int32"
        },
        "resolutionPolicy": {
          "enum": [
            "RESOLUTION_POLICY_UNSPECIFIED",
            "USE_HEAD",
            "LONGEST_PLAYTIME",
            "MOST_RECENTLY_MODIFIED",
            "HIGHEST_PROGRESS",
            "NO_AUTOMATIC_RESOLUTION"
          ],
          "type": "string",
          "enumDescriptions": [
            "Safe default, don't use explicitly.",
            "Drops all conflicts and keeps the current head only.",
            "Use the snapshot with the longest played time.",
            "Use the snapshot that was most recently modified.",
            "Use the snapshot with the highest progress value.",
            "Don't resolve conflicts at all. Effectively only returns the current head revision of the snapshot. Corresponds to a game opening the snapshot with manual resolution policy."
          ],
          "description": "Required. The automatic resolution policy. All conflicts are resolved in chronological order, starting from the/ least recent. If the comparison metric is equal for the tentative head and the conflict, the head wins."
        }
      },
      "type": "object"
    },
    "EndPoint": {
      "description": "Container for a URL end point of the requested type.",
      "id": "EndPoint",
      "properties": {
        "url": {
          "type": "string",
          "description": "A URL suitable for loading in a web browser for the requested endpoint."
        }
      },
      "type": "object"
    },
    "AchievementUpdateMultipleResponse": {
      "id": "AchievementUpdateMultipleResponse",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleResponse`.",
          "type": "string"
        },
        "updatedAchievements": {
          "description": "The updated state of the achievements.",
          "items": {
            "$ref": "AchievementUpdateResponse"
          },
          "type": "array"
        }
      },
      "description": "Response message for UpdateMultipleAchievements rpc."
    },
    "PlayerLevel": {
      "type": "object",
      "description": "1P/3P metadata about a user's level.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`."
        },
        "maxExperiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "The maximum experience points for this level."
        },
        "minExperiencePoints": {
          "description": "The minimum experience points for this level.",
          "format": "int64",
          "type": "string"
        },
        "level": {
          "description": "The level for the user.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "PlayerLevel"
    },
    "SnapshotRevision": {
      "type": "object",
      "properties": {
        "blob": {
          "description": "Reference to the game provided blob for this revision.",
          "$ref": "SnapshotDataResource"
        },
        "coverImage": {
          "description": "Reference to the cover image for this revision.",
          "$ref": "SnapshotCoverImageResource"
        },
        "metadata": {
          "$ref": "SnapshotMetadata",
          "description": "Metadata for this snapshot revision."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. A server generated identifier of the snapshot revision."
        }
      },
      "description": "A Snapshot revision resource. Snapshot revisions are immutable.",
      "id": "SnapshotRevision"
    },
    "EventChild": {
      "description": "An event child relationship resource.",
      "properties": {
        "childId": {
          "description": "The ID of the child event.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventChild`."
        }
      },
      "id": "EventChild",
      "type": "object"
    }
  },
  "revision": "20210128",
  "canonicalName": "Games",
  "servicePath": "",
  "version": "v1",
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/games": {
          "description": "Create, edit, and delete your Google Play Games activity"
        },
        "https://www.googleapis.com/auth/drive.appdata": {
          "description": "View and manage its own configuration data in your Google Drive"
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "description": "The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.",
  "baseUrl": "https://games.googleapis.com/",
  "rootUrl": "https://games.googleapis.com/",
  "basePath": "",
  "protocol": "rest",
  "name": "games",
  "discoveryVersion": "v1"
}
