/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chat.v1.model;

/**
 * A text, icon, or text + icon button that users can click. To make an image a clickable button,
 * specify an Image (not an ImageComponent) and set an `onClick` action.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Chat API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAppsCardV1Button extends com.google.api.client.json.GenericJson {

  /**
   * The alternative text used for accessibility. Set descriptive text that lets users know what the
   * button does. For example, if a button opens a hyperlink, you might write: "Opens a new browser
   * tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/chat".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String altText;

  /**
   * If set, the button is filled with a solid background color and the font color changes to
   * maintain contrast with the background color. For example, setting a blue background will likely
   * result in white text. If unset, the image background is white and the font color is blue. For
   * red, green and blue, the value of each field is a `float` number that can be expressed in
   * either of two ways: as a number between 0 and 255 divided by 255 (153/255) or as a value
   * between 0 and 1 (0.6). 0 represents the absence of a color and 1 or 255/255 represent the full
   * presence of that color on the RGB scale. Optionally set alpha, which sets a level of
   * transparency using this equation: ``` pixel color = alpha * (this color) + (1.0 - alpha) *
   * (background color) ``` For alpha, a value of 1 corresponds with a solid color, and a value of 0
   * corresponds with a completely transparent color. For example, the following color represents a
   * half transparent red: ``` "color": { "red": 1, "green": 0, "blue": 0, "alpha": 0.5 } ```
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Color color;

  /**
   * If `true`, the button is displayed in an inactive state and doesn't respond to user actions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * The icon image. If both `icon` and `text` are set, then the icon appears before the text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Icon icon;

  /**
   * Required. The action to perform when the button is clicked, such as opening a hyperlink or
   * running a custom function.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1OnClick onClick;

  /**
   * The text displayed inside the button.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * The alternative text used for accessibility. Set descriptive text that lets users know what the
   * button does. For example, if a button opens a hyperlink, you might write: "Opens a new browser
   * tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/chat".
   * @return value or {@code null} for none
   */
  public java.lang.String getAltText() {
    return altText;
  }

  /**
   * The alternative text used for accessibility. Set descriptive text that lets users know what the
   * button does. For example, if a button opens a hyperlink, you might write: "Opens a new browser
   * tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/chat".
   * @param altText altText or {@code null} for none
   */
  public GoogleAppsCardV1Button setAltText(java.lang.String altText) {
    this.altText = altText;
    return this;
  }

  /**
   * If set, the button is filled with a solid background color and the font color changes to
   * maintain contrast with the background color. For example, setting a blue background will likely
   * result in white text. If unset, the image background is white and the font color is blue. For
   * red, green and blue, the value of each field is a `float` number that can be expressed in
   * either of two ways: as a number between 0 and 255 divided by 255 (153/255) or as a value
   * between 0 and 1 (0.6). 0 represents the absence of a color and 1 or 255/255 represent the full
   * presence of that color on the RGB scale. Optionally set alpha, which sets a level of
   * transparency using this equation: ``` pixel color = alpha * (this color) + (1.0 - alpha) *
   * (background color) ``` For alpha, a value of 1 corresponds with a solid color, and a value of 0
   * corresponds with a completely transparent color. For example, the following color represents a
   * half transparent red: ``` "color": { "red": 1, "green": 0, "blue": 0, "alpha": 0.5 } ```
   * @return value or {@code null} for none
   */
  public Color getColor() {
    return color;
  }

  /**
   * If set, the button is filled with a solid background color and the font color changes to
   * maintain contrast with the background color. For example, setting a blue background will likely
   * result in white text. If unset, the image background is white and the font color is blue. For
   * red, green and blue, the value of each field is a `float` number that can be expressed in
   * either of two ways: as a number between 0 and 255 divided by 255 (153/255) or as a value
   * between 0 and 1 (0.6). 0 represents the absence of a color and 1 or 255/255 represent the full
   * presence of that color on the RGB scale. Optionally set alpha, which sets a level of
   * transparency using this equation: ``` pixel color = alpha * (this color) + (1.0 - alpha) *
   * (background color) ``` For alpha, a value of 1 corresponds with a solid color, and a value of 0
   * corresponds with a completely transparent color. For example, the following color represents a
   * half transparent red: ``` "color": { "red": 1, "green": 0, "blue": 0, "alpha": 0.5 } ```
   * @param color color or {@code null} for none
   */
  public GoogleAppsCardV1Button setColor(Color color) {
    this.color = color;
    return this;
  }

  /**
   * If `true`, the button is displayed in an inactive state and doesn't respond to user actions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * If `true`, the button is displayed in an inactive state and doesn't respond to user actions.
   * @param disabled disabled or {@code null} for none
   */
  public GoogleAppsCardV1Button setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * The icon image. If both `icon` and `text` are set, then the icon appears before the text.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Icon getIcon() {
    return icon;
  }

  /**
   * The icon image. If both `icon` and `text` are set, then the icon appears before the text.
   * @param icon icon or {@code null} for none
   */
  public GoogleAppsCardV1Button setIcon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Required. The action to perform when the button is clicked, such as opening a hyperlink or
   * running a custom function.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1OnClick getOnClick() {
    return onClick;
  }

  /**
   * Required. The action to perform when the button is clicked, such as opening a hyperlink or
   * running a custom function.
   * @param onClick onClick or {@code null} for none
   */
  public GoogleAppsCardV1Button setOnClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * The text displayed inside the button.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * The text displayed inside the button.
   * @param text text or {@code null} for none
   */
  public GoogleAppsCardV1Button setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  @Override
  public GoogleAppsCardV1Button set(String fieldName, Object value) {
    return (GoogleAppsCardV1Button) super.set(fieldName, value);
  }

  @Override
  public GoogleAppsCardV1Button clone() {
    return (GoogleAppsCardV1Button) super.clone();
  }

}
