/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.civicinfo.model;

/**
 * Information about a candidate running for elected office.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Civic Information API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Candidate extends com.google.api.client.json.GenericJson {

  /**
   * The URL for the candidate's campaign web site.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String candidateUrl;

  /**
   * A list of known (social) media channels for this candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Channel> channels;

  /**
   * The email address for the candidate's campaign.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String email;

  /**
   * The candidate's name. If this is a joint ticket it will indicate the name of the candidate at
   * the top of a ticket followed by a / and that name of candidate at the bottom of the ticket.
   * e.g. "Mitt Romney / Paul Ryan"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The order the candidate appears on the ballot for this contest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long orderOnBallot;

  /**
   * The full name of the party the candidate is a member of.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String party;

  /**
   * The voice phone number for the candidate's campaign office.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String phone;

  /**
   * A URL for a photo of the candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String photoUrl;

  /**
   * The URL for the candidate's campaign web site.
   * @return value or {@code null} for none
   */
  public java.lang.String getCandidateUrl() {
    return candidateUrl;
  }

  /**
   * The URL for the candidate's campaign web site.
   * @param candidateUrl candidateUrl or {@code null} for none
   */
  public Candidate setCandidateUrl(java.lang.String candidateUrl) {
    this.candidateUrl = candidateUrl;
    return this;
  }

  /**
   * A list of known (social) media channels for this candidate.
   * @return value or {@code null} for none
   */
  public java.util.List<Channel> getChannels() {
    return channels;
  }

  /**
   * A list of known (social) media channels for this candidate.
   * @param channels channels or {@code null} for none
   */
  public Candidate setChannels(java.util.List<Channel> channels) {
    this.channels = channels;
    return this;
  }

  /**
   * The email address for the candidate's campaign.
   * @return value or {@code null} for none
   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * The email address for the candidate's campaign.
   * @param email email or {@code null} for none
   */
  public Candidate setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  /**
   * The candidate's name. If this is a joint ticket it will indicate the name of the candidate at
   * the top of a ticket followed by a / and that name of candidate at the bottom of the ticket.
   * e.g. "Mitt Romney / Paul Ryan"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The candidate's name. If this is a joint ticket it will indicate the name of the candidate at
   * the top of a ticket followed by a / and that name of candidate at the bottom of the ticket.
   * e.g. "Mitt Romney / Paul Ryan"
   * @param name name or {@code null} for none
   */
  public Candidate setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The order the candidate appears on the ballot for this contest.
   * @return value or {@code null} for none
   */
  public java.lang.Long getOrderOnBallot() {
    return orderOnBallot;
  }

  /**
   * The order the candidate appears on the ballot for this contest.
   * @param orderOnBallot orderOnBallot or {@code null} for none
   */
  public Candidate setOrderOnBallot(java.lang.Long orderOnBallot) {
    this.orderOnBallot = orderOnBallot;
    return this;
  }

  /**
   * The full name of the party the candidate is a member of.
   * @return value or {@code null} for none
   */
  public java.lang.String getParty() {
    return party;
  }

  /**
   * The full name of the party the candidate is a member of.
   * @param party party or {@code null} for none
   */
  public Candidate setParty(java.lang.String party) {
    this.party = party;
    return this;
  }

  /**
   * The voice phone number for the candidate's campaign office.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhone() {
    return phone;
  }

  /**
   * The voice phone number for the candidate's campaign office.
   * @param phone phone or {@code null} for none
   */
  public Candidate setPhone(java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * A URL for a photo of the candidate.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhotoUrl() {
    return photoUrl;
  }

  /**
   * A URL for a photo of the candidate.
   * @param photoUrl photoUrl or {@code null} for none
   */
  public Candidate setPhotoUrl(java.lang.String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  @Override
  public Candidate set(String fieldName, Object value) {
    return (Candidate) super.set(fieldName, value);
  }

  @Override
  public Candidate clone() {
    return (Candidate) super.clone();
  }

}
