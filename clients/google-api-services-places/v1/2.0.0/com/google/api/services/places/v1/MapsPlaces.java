/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1;

/**
 * Service definition for MapsPlaces (v1).
 *
 * <p>
 * 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://mapsplatform.google.com/maps-products/#places-section" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MapsPlacesRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class MapsPlaces extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Places API (New) library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://places.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://places.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public MapsPlaces(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  MapsPlaces(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Places collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code MapsPlaces places = new MapsPlaces(...);}
   *   {@code MapsPlaces.Places.List request = places.places().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Places places() {
    return new Places();
  }

  /**
   * The "places" collection of methods.
   */
  public class Places {

    /**
     * Returns predictions for the given input.
     *
     * Create a request for the method "places.autocomplete".
     *
     * This request holds the parameters needed by the places server.  After setting any optional
     * parameters, call the {@link Autocomplete#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesRequest}
     * @return the request
     */
    public Autocomplete autocomplete(com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesRequest content) throws java.io.IOException {
      Autocomplete result = new Autocomplete(content);
      initialize(result);
      return result;
    }

    public class Autocomplete extends MapsPlacesRequest<com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesResponse> {

      private static final String REST_PATH = "v1/places:autocomplete";

      /**
       * Returns predictions for the given input.
       *
       * Create a request for the method "places.autocomplete".
       *
       * This request holds the parameters needed by the the places server.  After setting any optional
       * parameters, call the {@link Autocomplete#execute()} method to invoke the remote operation. <p>
       * {@link
       * Autocomplete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesRequest}
       * @since 1.13
       */
      protected Autocomplete(com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesRequest content) {
        super(MapsPlaces.this, "POST", REST_PATH, content, com.google.api.services.places.v1.model.GoogleMapsPlacesV1AutocompletePlacesResponse.class);
      }

      @Override
      public Autocomplete set$Xgafv(java.lang.String $Xgafv) {
        return (Autocomplete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Autocomplete setAccessToken(java.lang.String accessToken) {
        return (Autocomplete) super.setAccessToken(accessToken);
      }

      @Override
      public Autocomplete setAlt(java.lang.String alt) {
        return (Autocomplete) super.setAlt(alt);
      }

      @Override
      public Autocomplete setCallback(java.lang.String callback) {
        return (Autocomplete) super.setCallback(callback);
      }

      @Override
      public Autocomplete setFields(java.lang.String fields) {
        return (Autocomplete) super.setFields(fields);
      }

      @Override
      public Autocomplete setKey(java.lang.String key) {
        return (Autocomplete) super.setKey(key);
      }

      @Override
      public Autocomplete setOauthToken(java.lang.String oauthToken) {
        return (Autocomplete) super.setOauthToken(oauthToken);
      }

      @Override
      public Autocomplete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Autocomplete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Autocomplete setQuotaUser(java.lang.String quotaUser) {
        return (Autocomplete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Autocomplete setUploadType(java.lang.String uploadType) {
        return (Autocomplete) super.setUploadType(uploadType);
      }

      @Override
      public Autocomplete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Autocomplete) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Autocomplete set(String parameterName, Object value) {
        return (Autocomplete) super.set(parameterName, value);
      }
    }
    /**
     * Get the details of a place based on its resource name, which is a string in the
     * `places/{place_id}` format.
     *
     * Create a request for the method "places.get".
     *
     * This request holds the parameters needed by the places server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name Required. The resource name of a place, in the `places/{place_id}` format.
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends MapsPlacesRequest<com.google.api.services.places.v1.model.GoogleMapsPlacesV1Place> {

      private static final String REST_PATH = "v1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^places/[^/]+$");

      /**
       * Get the details of a place based on its resource name, which is a string in the
       * `places/{place_id}` format.
       *
       * Create a request for the method "places.get".
       *
       * This request holds the parameters needed by the the places server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The resource name of a place, in the `places/{place_id}` format.
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(MapsPlaces.this, "GET", REST_PATH, null, com.google.api.services.places.v1.model.GoogleMapsPlacesV1Place.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^places/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The resource name of a place, in the `places/{place_id}` format. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The resource name of a place, in the `places/{place_id}` format.
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The resource name of a place, in the `places/{place_id}` format. */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^places/[^/]+$");
        }
        this.name = name;
        return this;
      }

      /**
       * Optional. Place details will be displayed with the preferred language if available. Current
       * list of supported languages: https://developers.google.com/maps/faq#languagesupport.
       */
      @com.google.api.client.util.Key
      private java.lang.String languageCode;

      /** Optional. Place details will be displayed with the preferred language if available. Current list of
     supported languages: https://developers.google.com/maps/faq#languagesupport.
       */
      public java.lang.String getLanguageCode() {
        return languageCode;
      }

      /**
       * Optional. Place details will be displayed with the preferred language if available. Current
       * list of supported languages: https://developers.google.com/maps/faq#languagesupport.
       */
      public Get setLanguageCode(java.lang.String languageCode) {
        this.languageCode = languageCode;
        return this;
      }

      /**
       * Optional. The Unicode country/region code (CLDR) of the location where the request is
       * coming from. This parameter is used to display the place details, like region-specific
       * place name, if available. The parameter can affect results based on applicable law. For
       * more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_lan
       * guage_information.html. Note that 3-digit region codes are not currently supported.
       */
      @com.google.api.client.util.Key
      private java.lang.String regionCode;

      /** Optional. The Unicode country/region code (CLDR) of the location where the request is coming from.
     This parameter is used to display the place details, like region-specific place name, if available.
     The parameter can affect results based on applicable law. For more information, see
     https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note
     that 3-digit region codes are not currently supported.
       */
      public java.lang.String getRegionCode() {
        return regionCode;
      }

      /**
       * Optional. The Unicode country/region code (CLDR) of the location where the request is
       * coming from. This parameter is used to display the place details, like region-specific
       * place name, if available. The parameter can affect results based on applicable law. For
       * more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_lan
       * guage_information.html. Note that 3-digit region codes are not currently supported.
       */
      public Get setRegionCode(java.lang.String regionCode) {
        this.regionCode = regionCode;
        return this;
      }

      /**
       * Optional. A string which identifies an Autocomplete session for billing purposes. Must be a
       * URL and filename safe base64 string with at most 36 ASCII characters in length. Otherwise
       * an INVALID_ARGUMENT error is returned. The session begins when the user starts typing a
       * query, and concludes when they select a place and a call to Place Details or Address
       * Validation is made. Each session can have multiple queries, followed by one Place Details
       * or Address Validation request. The credentials used for each request within a session must
       * belong to the same Google Cloud Console project. Once a session has concluded, the token is
       * no longer valid; your app must generate a fresh token for each session. If the
       * `session_token` parameter is omitted, or if you reuse a session token, the session is
       * charged as if no session token was provided (each request is billed separately). We
       * recommend the following guidelines: * Use session tokens for all Place Autocomplete calls.
       * * Generate a fresh token for each session. Using a version 4 UUID is recommended. * Ensure
       * that the credentials used for all Place Autocomplete, Place Details, and Address Validation
       * requests within a session belong to the same Cloud Console project. * Be sure to pass a
       * unique session token for each new session. Using the same token for more than one session
       * will result in each request being billed individually.
       */
      @com.google.api.client.util.Key
      private java.lang.String sessionToken;

      /** Optional. A string which identifies an Autocomplete session for billing purposes. Must be a URL and
     filename safe base64 string with at most 36 ASCII characters in length. Otherwise an
     INVALID_ARGUMENT error is returned. The session begins when the user starts typing a query, and
     concludes when they select a place and a call to Place Details or Address Validation is made. Each
     session can have multiple queries, followed by one Place Details or Address Validation request. The
     credentials used for each request within a session must belong to the same Google Cloud Console
     project. Once a session has concluded, the token is no longer valid; your app must generate a fresh
     token for each session. If the `session_token` parameter is omitted, or if you reuse a session
     token, the session is charged as if no session token was provided (each request is billed
     separately). We recommend the following guidelines: * Use session tokens for all Place Autocomplete
     calls. * Generate a fresh token for each session. Using a version 4 UUID is recommended. * Ensure
     that the credentials used for all Place Autocomplete, Place Details, and Address Validation
     requests within a session belong to the same Cloud Console project. * Be sure to pass a unique
     session token for each new session. Using the same token for more than one session will result in
     each request being billed individually.
       */
      public java.lang.String getSessionToken() {
        return sessionToken;
      }

      /**
       * Optional. A string which identifies an Autocomplete session for billing purposes. Must be a
       * URL and filename safe base64 string with at most 36 ASCII characters in length. Otherwise
       * an INVALID_ARGUMENT error is returned. The session begins when the user starts typing a
       * query, and concludes when they select a place and a call to Place Details or Address
       * Validation is made. Each session can have multiple queries, followed by one Place Details
       * or Address Validation request. The credentials used for each request within a session must
       * belong to the same Google Cloud Console project. Once a session has concluded, the token is
       * no longer valid; your app must generate a fresh token for each session. If the
       * `session_token` parameter is omitted, or if you reuse a session token, the session is
       * charged as if no session token was provided (each request is billed separately). We
       * recommend the following guidelines: * Use session tokens for all Place Autocomplete calls.
       * * Generate a fresh token for each session. Using a version 4 UUID is recommended. * Ensure
       * that the credentials used for all Place Autocomplete, Place Details, and Address Validation
       * requests within a session belong to the same Cloud Console project. * Be sure to pass a
       * unique session token for each new session. Using the same token for more than one session
       * will result in each request being billed individually.
       */
      public Get setSessionToken(java.lang.String sessionToken) {
        this.sessionToken = sessionToken;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Search for places near locations.
     *
     * Create a request for the method "places.searchNearby".
     *
     * This request holds the parameters needed by the places server.  After setting any optional
     * parameters, call the {@link SearchNearby#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyRequest}
     * @return the request
     */
    public SearchNearby searchNearby(com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyRequest content) throws java.io.IOException {
      SearchNearby result = new SearchNearby(content);
      initialize(result);
      return result;
    }

    public class SearchNearby extends MapsPlacesRequest<com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyResponse> {

      private static final String REST_PATH = "v1/places:searchNearby";

      /**
       * Search for places near locations.
       *
       * Create a request for the method "places.searchNearby".
       *
       * This request holds the parameters needed by the the places server.  After setting any optional
       * parameters, call the {@link SearchNearby#execute()} method to invoke the remote operation. <p>
       * {@link
       * SearchNearby#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyRequest}
       * @since 1.13
       */
      protected SearchNearby(com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyRequest content) {
        super(MapsPlaces.this, "POST", REST_PATH, content, com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchNearbyResponse.class);
      }

      @Override
      public SearchNearby set$Xgafv(java.lang.String $Xgafv) {
        return (SearchNearby) super.set$Xgafv($Xgafv);
      }

      @Override
      public SearchNearby setAccessToken(java.lang.String accessToken) {
        return (SearchNearby) super.setAccessToken(accessToken);
      }

      @Override
      public SearchNearby setAlt(java.lang.String alt) {
        return (SearchNearby) super.setAlt(alt);
      }

      @Override
      public SearchNearby setCallback(java.lang.String callback) {
        return (SearchNearby) super.setCallback(callback);
      }

      @Override
      public SearchNearby setFields(java.lang.String fields) {
        return (SearchNearby) super.setFields(fields);
      }

      @Override
      public SearchNearby setKey(java.lang.String key) {
        return (SearchNearby) super.setKey(key);
      }

      @Override
      public SearchNearby setOauthToken(java.lang.String oauthToken) {
        return (SearchNearby) super.setOauthToken(oauthToken);
      }

      @Override
      public SearchNearby setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SearchNearby) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SearchNearby setQuotaUser(java.lang.String quotaUser) {
        return (SearchNearby) super.setQuotaUser(quotaUser);
      }

      @Override
      public SearchNearby setUploadType(java.lang.String uploadType) {
        return (SearchNearby) super.setUploadType(uploadType);
      }

      @Override
      public SearchNearby setUploadProtocol(java.lang.String uploadProtocol) {
        return (SearchNearby) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public SearchNearby set(String parameterName, Object value) {
        return (SearchNearby) super.set(parameterName, value);
      }
    }
    /**
     * Text query based place search.
     *
     * Create a request for the method "places.searchText".
     *
     * This request holds the parameters needed by the places server.  After setting any optional
     * parameters, call the {@link SearchText#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextRequest}
     * @return the request
     */
    public SearchText searchText(com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextRequest content) throws java.io.IOException {
      SearchText result = new SearchText(content);
      initialize(result);
      return result;
    }

    public class SearchText extends MapsPlacesRequest<com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextResponse> {

      private static final String REST_PATH = "v1/places:searchText";

      /**
       * Text query based place search.
       *
       * Create a request for the method "places.searchText".
       *
       * This request holds the parameters needed by the the places server.  After setting any optional
       * parameters, call the {@link SearchText#execute()} method to invoke the remote operation. <p>
       * {@link
       * SearchText#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextRequest}
       * @since 1.13
       */
      protected SearchText(com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextRequest content) {
        super(MapsPlaces.this, "POST", REST_PATH, content, com.google.api.services.places.v1.model.GoogleMapsPlacesV1SearchTextResponse.class);
      }

      @Override
      public SearchText set$Xgafv(java.lang.String $Xgafv) {
        return (SearchText) super.set$Xgafv($Xgafv);
      }

      @Override
      public SearchText setAccessToken(java.lang.String accessToken) {
        return (SearchText) super.setAccessToken(accessToken);
      }

      @Override
      public SearchText setAlt(java.lang.String alt) {
        return (SearchText) super.setAlt(alt);
      }

      @Override
      public SearchText setCallback(java.lang.String callback) {
        return (SearchText) super.setCallback(callback);
      }

      @Override
      public SearchText setFields(java.lang.String fields) {
        return (SearchText) super.setFields(fields);
      }

      @Override
      public SearchText setKey(java.lang.String key) {
        return (SearchText) super.setKey(key);
      }

      @Override
      public SearchText setOauthToken(java.lang.String oauthToken) {
        return (SearchText) super.setOauthToken(oauthToken);
      }

      @Override
      public SearchText setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SearchText) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SearchText setQuotaUser(java.lang.String quotaUser) {
        return (SearchText) super.setQuotaUser(quotaUser);
      }

      @Override
      public SearchText setUploadType(java.lang.String uploadType) {
        return (SearchText) super.setUploadType(uploadType);
      }

      @Override
      public SearchText setUploadProtocol(java.lang.String uploadProtocol) {
        return (SearchText) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public SearchText set(String parameterName, Object value) {
        return (SearchText) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Photos collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code MapsPlaces places = new MapsPlaces(...);}
     *   {@code MapsPlaces.Photos.List request = places.photos().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Photos photos() {
      return new Photos();
    }

    /**
     * The "photos" collection of methods.
     */
    public class Photos {

      /**
       * Get a photo media with a photo reference string.
       *
       * Create a request for the method "photos.getMedia".
       *
       * This request holds the parameters needed by the places server.  After setting any optional
       * parameters, call the {@link GetMedia#execute()} method to invoke the remote operation.
       *
       * @param name Required. The resource name of a photo media in the format:
       *        `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as
       *        returned in a Place object's `photos.name` field comes with the format
       *        `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of
       *        the photo resource to get the photo media resource name.
       * @return the request
       */
      public GetMedia getMedia(java.lang.String name) throws java.io.IOException {
        GetMedia result = new GetMedia(name);
        initialize(result);
        return result;
      }

      public class GetMedia extends MapsPlacesRequest<com.google.api.services.places.v1.model.GoogleMapsPlacesV1PhotoMedia> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^places/[^/]+/photos/[^/]+/media$");

        /**
         * Get a photo media with a photo reference string.
         *
         * Create a request for the method "photos.getMedia".
         *
         * This request holds the parameters needed by the the places server.  After setting any optional
         * parameters, call the {@link GetMedia#execute()} method to invoke the remote operation. <p>
         * {@link
         * GetMedia#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The resource name of a photo media in the format:
       *        `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as
       *        returned in a Place object's `photos.name` field comes with the format
       *        `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of
       *        the photo resource to get the photo media resource name.
         * @since 1.13
         */
        protected GetMedia(java.lang.String name) {
          super(MapsPlaces.this, "GET", REST_PATH, null, com.google.api.services.places.v1.model.GoogleMapsPlacesV1PhotoMedia.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^places/[^/]+/photos/[^/]+/media$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetMedia set$Xgafv(java.lang.String $Xgafv) {
          return (GetMedia) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetMedia setAccessToken(java.lang.String accessToken) {
          return (GetMedia) super.setAccessToken(accessToken);
        }

        @Override
        public GetMedia setAlt(java.lang.String alt) {
          return (GetMedia) super.setAlt(alt);
        }

        @Override
        public GetMedia setCallback(java.lang.String callback) {
          return (GetMedia) super.setCallback(callback);
        }

        @Override
        public GetMedia setFields(java.lang.String fields) {
          return (GetMedia) super.setFields(fields);
        }

        @Override
        public GetMedia setKey(java.lang.String key) {
          return (GetMedia) super.setKey(key);
        }

        @Override
        public GetMedia setOauthToken(java.lang.String oauthToken) {
          return (GetMedia) super.setOauthToken(oauthToken);
        }

        @Override
        public GetMedia setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetMedia) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetMedia setQuotaUser(java.lang.String quotaUser) {
          return (GetMedia) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetMedia setUploadType(java.lang.String uploadType) {
          return (GetMedia) super.setUploadType(uploadType);
        }

        @Override
        public GetMedia setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetMedia) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The resource name of a photo media in the format:
         * `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as
         * returned in a Place object's `photos.name` field comes with the format
         * `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of
         * the photo resource to get the photo media resource name.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The resource name of a photo media in the format:
       `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as returned in a
       Place object's `photos.name` field comes with the format
       `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of the photo
       resource to get the photo media resource name.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The resource name of a photo media in the format:
         * `places/{place_id}/photos/{photo_reference}/media`. The resource name of a photo as
         * returned in a Place object's `photos.name` field comes with the format
         * `places/{place_id}/photos/{photo_reference}`. You need to append `/media` at the end of
         * the photo resource to get the photo media resource name.
         */
        public GetMedia setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^places/[^/]+/photos/[^/]+/media$");
          }
          this.name = name;
          return this;
        }

        /**
         * Optional. Specifies the maximum desired height, in pixels, of the image. If the image is
         * smaller than the values specified, the original image will be returned. If the image is
         * larger in either dimension, it will be scaled to match the smaller of the two dimensions,
         * restricted to its original aspect ratio. Both the max_height_px and max_width_px
         * properties accept an integer between 1 and 4800, inclusively. If the value is not within
         * the allowed range, an INVALID_ARGUMENT error will be returned. At least one of
         * max_height_px or max_width_px needs to be specified. If neither max_height_px nor
         * max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer maxHeightPx;

        /** Optional. Specifies the maximum desired height, in pixels, of the image. If the image is smaller
       than the values specified, the original image will be returned. If the image is larger in either
       dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original
       aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and
       4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be
       returned. At least one of max_height_px or max_width_px needs to be specified. If neither
       max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        public java.lang.Integer getMaxHeightPx() {
          return maxHeightPx;
        }

        /**
         * Optional. Specifies the maximum desired height, in pixels, of the image. If the image is
         * smaller than the values specified, the original image will be returned. If the image is
         * larger in either dimension, it will be scaled to match the smaller of the two dimensions,
         * restricted to its original aspect ratio. Both the max_height_px and max_width_px
         * properties accept an integer between 1 and 4800, inclusively. If the value is not within
         * the allowed range, an INVALID_ARGUMENT error will be returned. At least one of
         * max_height_px or max_width_px needs to be specified. If neither max_height_px nor
         * max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        public GetMedia setMaxHeightPx(java.lang.Integer maxHeightPx) {
          this.maxHeightPx = maxHeightPx;
          return this;
        }

        /**
         * Optional. Specifies the maximum desired width, in pixels, of the image. If the image is
         * smaller than the values specified, the original image will be returned. If the image is
         * larger in either dimension, it will be scaled to match the smaller of the two dimensions,
         * restricted to its original aspect ratio. Both the max_height_px and max_width_px
         * properties accept an integer between 1 and 4800, inclusively. If the value is not within
         * the allowed range, an INVALID_ARGUMENT error will be returned. At least one of
         * max_height_px or max_width_px needs to be specified. If neither max_height_px nor
         * max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer maxWidthPx;

        /** Optional. Specifies the maximum desired width, in pixels, of the image. If the image is smaller
       than the values specified, the original image will be returned. If the image is larger in either
       dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original
       aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and
       4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be
       returned. At least one of max_height_px or max_width_px needs to be specified. If neither
       max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        public java.lang.Integer getMaxWidthPx() {
          return maxWidthPx;
        }

        /**
         * Optional. Specifies the maximum desired width, in pixels, of the image. If the image is
         * smaller than the values specified, the original image will be returned. If the image is
         * larger in either dimension, it will be scaled to match the smaller of the two dimensions,
         * restricted to its original aspect ratio. Both the max_height_px and max_width_px
         * properties accept an integer between 1 and 4800, inclusively. If the value is not within
         * the allowed range, an INVALID_ARGUMENT error will be returned. At least one of
         * max_height_px or max_width_px needs to be specified. If neither max_height_px nor
         * max_width_px is specified, an INVALID_ARGUMENT error will be returned.
         */
        public GetMedia setMaxWidthPx(java.lang.Integer maxWidthPx) {
          this.maxWidthPx = maxWidthPx;
          return this;
        }

        /**
         * Optional. If set, skip the default HTTP redirect behavior and render a text format (for
         * example, in JSON format for HTTP use case) response. If not set, an HTTP redirect will be
         * issued to redirect the call to the image media. This option is ignored for non-HTTP
         * requests.
         */
        @com.google.api.client.util.Key
        private java.lang.Boolean skipHttpRedirect;

        /** Optional. If set, skip the default HTTP redirect behavior and render a text format (for example, in
       JSON format for HTTP use case) response. If not set, an HTTP redirect will be issued to redirect
       the call to the image media. This option is ignored for non-HTTP requests.
         */
        public java.lang.Boolean getSkipHttpRedirect() {
          return skipHttpRedirect;
        }

        /**
         * Optional. If set, skip the default HTTP redirect behavior and render a text format (for
         * example, in JSON format for HTTP use case) response. If not set, an HTTP redirect will be
         * issued to redirect the call to the image media. This option is ignored for non-HTTP
         * requests.
         */
        public GetMedia setSkipHttpRedirect(java.lang.Boolean skipHttpRedirect) {
          this.skipHttpRedirect = skipHttpRedirect;
          return this;
        }

        @Override
        public GetMedia set(String parameterName, Object value) {
          return (GetMedia) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link MapsPlaces}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link MapsPlaces}. */
    @Override
    public MapsPlaces build() {
      return new MapsPlaces(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MapsPlacesRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMapsPlacesRequestInitializer(
        MapsPlacesRequestInitializer mapsplacesRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(mapsplacesRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
