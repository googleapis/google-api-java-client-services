/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * A query to find a number of the nearest neighbors (most similar vectors) of a vector.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery extends com.google.api.client.json.GenericJson {

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * not set, the default value from scam config is used; if set, this value must be > 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer approximateNeighborCount;

  /**
   * Required. The datapoint/vector whose nearest neighbors should be searched for.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1IndexDatapoint datapoint;

  /**
   * The fraction of the number of leaves to search, set at query time allows user to tune search
   * performance. This value increase result in both search accuracy and latency increase. The value
   * should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified
   * in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double fractionLeafNodesToSearchOverride;

  /**
   * The number of nearest neighbors to be retrieved from database for each query. If not set, will
   * use the default from the service configuration (https://cloud.google.com/vertex-ai/docs
   * /matching-engine/configuring-indexes#nearest-neighbor-search-config).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer neighborCount;

  /**
   * Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that
   * no more than some value k' of the k neighbors returned have the same value of
   * crowding_attribute. It's used for improving result diversity. This field is the maximum number
   * of matches with the same crowding tag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer perCrowdingAttributeNeighborCount;

  /**
   * Optional. Represents RRF algorithm that combines search results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1FindNeighborsRequestQueryRRF rrf;

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * not set, the default value from scam config is used; if set, this value must be > 0.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getApproximateNeighborCount() {
    return approximateNeighborCount;
  }

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * not set, the default value from scam config is used; if set, this value must be > 0.
   * @param approximateNeighborCount approximateNeighborCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setApproximateNeighborCount(java.lang.Integer approximateNeighborCount) {
    this.approximateNeighborCount = approximateNeighborCount;
    return this;
  }

  /**
   * Required. The datapoint/vector whose nearest neighbors should be searched for.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1IndexDatapoint getDatapoint() {
    return datapoint;
  }

  /**
   * Required. The datapoint/vector whose nearest neighbors should be searched for.
   * @param datapoint datapoint or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setDatapoint(GoogleCloudAiplatformV1beta1IndexDatapoint datapoint) {
    this.datapoint = datapoint;
    return this;
  }

  /**
   * The fraction of the number of leaves to search, set at query time allows user to tune search
   * performance. This value increase result in both search accuracy and latency increase. The value
   * should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified
   * in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.
   * @return value or {@code null} for none
   */
  public java.lang.Double getFractionLeafNodesToSearchOverride() {
    return fractionLeafNodesToSearchOverride;
  }

  /**
   * The fraction of the number of leaves to search, set at query time allows user to tune search
   * performance. This value increase result in both search accuracy and latency increase. The value
   * should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified
   * in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.
   * @param fractionLeafNodesToSearchOverride fractionLeafNodesToSearchOverride or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setFractionLeafNodesToSearchOverride(java.lang.Double fractionLeafNodesToSearchOverride) {
    this.fractionLeafNodesToSearchOverride = fractionLeafNodesToSearchOverride;
    return this;
  }

  /**
   * The number of nearest neighbors to be retrieved from database for each query. If not set, will
   * use the default from the service configuration (https://cloud.google.com/vertex-ai/docs
   * /matching-engine/configuring-indexes#nearest-neighbor-search-config).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNeighborCount() {
    return neighborCount;
  }

  /**
   * The number of nearest neighbors to be retrieved from database for each query. If not set, will
   * use the default from the service configuration (https://cloud.google.com/vertex-ai/docs
   * /matching-engine/configuring-indexes#nearest-neighbor-search-config).
   * @param neighborCount neighborCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setNeighborCount(java.lang.Integer neighborCount) {
    this.neighborCount = neighborCount;
    return this;
  }

  /**
   * Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that
   * no more than some value k' of the k neighbors returned have the same value of
   * crowding_attribute. It's used for improving result diversity. This field is the maximum number
   * of matches with the same crowding tag.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPerCrowdingAttributeNeighborCount() {
    return perCrowdingAttributeNeighborCount;
  }

  /**
   * Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that
   * no more than some value k' of the k neighbors returned have the same value of
   * crowding_attribute. It's used for improving result diversity. This field is the maximum number
   * of matches with the same crowding tag.
   * @param perCrowdingAttributeNeighborCount perCrowdingAttributeNeighborCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setPerCrowdingAttributeNeighborCount(java.lang.Integer perCrowdingAttributeNeighborCount) {
    this.perCrowdingAttributeNeighborCount = perCrowdingAttributeNeighborCount;
    return this;
  }

  /**
   * Optional. Represents RRF algorithm that combines search results.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQueryRRF getRrf() {
    return rrf;
  }

  /**
   * Optional. Represents RRF algorithm that combines search results.
   * @param rrf rrf or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery setRrf(GoogleCloudAiplatformV1beta1FindNeighborsRequestQueryRRF rrf) {
    this.rrf = rrf;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery clone() {
    return (GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery) super.clone();
  }

}
