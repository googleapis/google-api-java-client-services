/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * SQLServer database profile.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SqlServerProfile extends com.google.api.client.json.GenericJson {

  /**
   * Required. Database for the SQLServer connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * Required. Hostname for the SQLServer connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Optional. Password for the SQLServer connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String password;

  /**
   * Port for the SQLServer connection, default value is 1433.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer port;

  /**
   * Required. Username for the SQLServer connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Required. Database for the SQLServer connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * Required. Database for the SQLServer connection.
   * @param database database or {@code null} for none
   */
  public SqlServerProfile setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * Required. Hostname for the SQLServer connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Required. Hostname for the SQLServer connection.
   * @param hostname hostname or {@code null} for none
   */
  public SqlServerProfile setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Optional. Password for the SQLServer connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Optional. Password for the SQLServer connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * @param password password or {@code null} for none
   */
  public SqlServerProfile setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  /**
   * Port for the SQLServer connection, default value is 1433.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Port for the SQLServer connection, default value is 1433.
   * @param port port or {@code null} for none
   */
  public SqlServerProfile setPort(java.lang.Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Required. Username for the SQLServer connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Required. Username for the SQLServer connection.
   * @param username username or {@code null} for none
   */
  public SqlServerProfile setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  @Override
  public SqlServerProfile set(String fieldName, Object value) {
    return (SqlServerProfile) super.set(fieldName, value);
  }

  @Override
  public SqlServerProfile clone() {
    return (SqlServerProfile) super.clone();
  }

}
