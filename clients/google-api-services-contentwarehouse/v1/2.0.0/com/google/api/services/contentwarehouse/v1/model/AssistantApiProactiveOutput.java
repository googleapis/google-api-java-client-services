/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next ID: 7
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiProactiveOutput extends com.google.api.client.json.GenericJson {

  /**
   * Allows displaying all personal data on proactive surfaces with no face match capability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllPersonalData;

  /**
   * For ANDROID_TV devices, the location that this setting was last changed from. Note: this
   * structure allows to extend to more per-vertical bits in the future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String androidTvAssistantSettingsSource;

  /**
   * Allows displaying Health and Fitness content on proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for H content to be shown. This bit will be available on all surfaces that have the
   * proactive-bit enabled. If the proactive-bit is not enabled, then we do not show health and
   * fitness content at all (or even allow access to this setting).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String healthAndFitnessProactive;

  /**
   * Allows displaying photos content on Dragonglass proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for photos content to be shown on Dragonglass surfaces. This bit will be available on
   * all Dragonglass surfaces that have the proactive-bit enabled. If the proactive-bit is not
   * enabled or it's not a Dragonglass surface, then we do not show proactive photos content at all,
   * nor allow access to this setting. See go/opa-photos-sg-settings for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String photosProactive;

  /**
   * Whether a device supports proactive output. Note that this is assumed to be true for all Smart
   * Display devices, but surfaces that newly start supporting proactive_output should set this bit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsProactiveOutput;

  /**
   * Settings for displaying personal data on proactive surfaces with face match capability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userMatchProactive;

  /**
   * Allows displaying all personal data on proactive surfaces with no face match capability.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllPersonalData() {
    return allowAllPersonalData;
  }

  /**
   * Allows displaying all personal data on proactive surfaces with no face match capability.
   * @param allowAllPersonalData allowAllPersonalData or {@code null} for none
   */
  public AssistantApiProactiveOutput setAllowAllPersonalData(java.lang.Boolean allowAllPersonalData) {
    this.allowAllPersonalData = allowAllPersonalData;
    return this;
  }

  /**
   * For ANDROID_TV devices, the location that this setting was last changed from. Note: this
   * structure allows to extend to more per-vertical bits in the future.
   * @return value or {@code null} for none
   */
  public java.lang.String getAndroidTvAssistantSettingsSource() {
    return androidTvAssistantSettingsSource;
  }

  /**
   * For ANDROID_TV devices, the location that this setting was last changed from. Note: this
   * structure allows to extend to more per-vertical bits in the future.
   * @param androidTvAssistantSettingsSource androidTvAssistantSettingsSource or {@code null} for none
   */
  public AssistantApiProactiveOutput setAndroidTvAssistantSettingsSource(java.lang.String androidTvAssistantSettingsSource) {
    this.androidTvAssistantSettingsSource = androidTvAssistantSettingsSource;
    return this;
  }

  /**
   * Allows displaying Health and Fitness content on proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for H content to be shown. This bit will be available on all surfaces that have the
   * proactive-bit enabled. If the proactive-bit is not enabled, then we do not show health and
   * fitness content at all (or even allow access to this setting).
   * @return value or {@code null} for none
   */
  public java.lang.String getHealthAndFitnessProactive() {
    return healthAndFitnessProactive;
  }

  /**
   * Allows displaying Health and Fitness content on proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for H content to be shown. This bit will be available on all surfaces that have the
   * proactive-bit enabled. If the proactive-bit is not enabled, then we do not show health and
   * fitness content at all (or even allow access to this setting).
   * @param healthAndFitnessProactive healthAndFitnessProactive or {@code null} for none
   */
  public AssistantApiProactiveOutput setHealthAndFitnessProactive(java.lang.String healthAndFitnessProactive) {
    this.healthAndFitnessProactive = healthAndFitnessProactive;
    return this;
  }

  /**
   * Allows displaying photos content on Dragonglass proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for photos content to be shown on Dragonglass surfaces. This bit will be available on
   * all Dragonglass surfaces that have the proactive-bit enabled. If the proactive-bit is not
   * enabled or it's not a Dragonglass surface, then we do not show proactive photos content at all,
   * nor allow access to this setting. See go/opa-photos-sg-settings for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhotosProactive() {
    return photosProactive;
  }

  /**
   * Allows displaying photos content on Dragonglass proactive surfaces. This is a sub bit of the
   * device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be
   * enabled for photos content to be shown on Dragonglass surfaces. This bit will be available on
   * all Dragonglass surfaces that have the proactive-bit enabled. If the proactive-bit is not
   * enabled or it's not a Dragonglass surface, then we do not show proactive photos content at all,
   * nor allow access to this setting. See go/opa-photos-sg-settings for more details.
   * @param photosProactive photosProactive or {@code null} for none
   */
  public AssistantApiProactiveOutput setPhotosProactive(java.lang.String photosProactive) {
    this.photosProactive = photosProactive;
    return this;
  }

  /**
   * Whether a device supports proactive output. Note that this is assumed to be true for all Smart
   * Display devices, but surfaces that newly start supporting proactive_output should set this bit.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsProactiveOutput() {
    return supportsProactiveOutput;
  }

  /**
   * Whether a device supports proactive output. Note that this is assumed to be true for all Smart
   * Display devices, but surfaces that newly start supporting proactive_output should set this bit.
   * @param supportsProactiveOutput supportsProactiveOutput or {@code null} for none
   */
  public AssistantApiProactiveOutput setSupportsProactiveOutput(java.lang.Boolean supportsProactiveOutput) {
    this.supportsProactiveOutput = supportsProactiveOutput;
    return this;
  }

  /**
   * Settings for displaying personal data on proactive surfaces with face match capability.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserMatchProactive() {
    return userMatchProactive;
  }

  /**
   * Settings for displaying personal data on proactive surfaces with face match capability.
   * @param userMatchProactive userMatchProactive or {@code null} for none
   */
  public AssistantApiProactiveOutput setUserMatchProactive(java.lang.String userMatchProactive) {
    this.userMatchProactive = userMatchProactive;
    return this;
  }

  @Override
  public AssistantApiProactiveOutput set(String fieldName, Object value) {
    return (AssistantApiProactiveOutput) super.set(fieldName, value);
  }

  @Override
  public AssistantApiProactiveOutput clone() {
    return (AssistantApiProactiveOutput) super.clone();
  }

}
