/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message specifies structure "overrides" to apply: it can be used to force certain kinds of
 * GoodocToHTML renderings of elements.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocOverrides extends com.google.api.client.json.GenericJson {

  /**
   * For text blocks only: do not allow this block to be turned into an image when rendering, even
   * if your algorithms want to do so:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String blockImagination;

  /**
   * For graphic blocks, we often expand the block a bit for rendering, to compensate for bad image
   * segmentation. do_not_expand_graphic_box forces this behavior to be turned off.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean doNotExpandGraphicBox;

  /**
   * For Pages only: explicitly specify whether or not this page should be rendered fully as an
   * image
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fullPageAsImage;

  /**
   * For Pages only: explicitly specify whether or not all text on this page should be treated as
   * "LINEATED"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fullPageLineated;

  /**
   * For Pages only: explicitly specify whether or not this page should be skipped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fullPageSkipped;

  /**
   * This GRAPHIC block's image can be shown even when GoodocToHTMLOptions.suppress_photos_with_this
   * is specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean needNotSuppressPhoto;

  /**
   * For blocks: explicitly specify whether or not this block should get a page-break before it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pageBreakBefore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoodocOverridesStyle> style;

  /**
   * For Words only: replace the rendered HTML by this:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String wordHtml;

  /**
   * For text blocks only: do not allow this block to be turned into an image when rendering, even
   * if your algorithms want to do so:
   * @return value or {@code null} for none
   */
  public java.lang.String getBlockImagination() {
    return blockImagination;
  }

  /**
   * For text blocks only: do not allow this block to be turned into an image when rendering, even
   * if your algorithms want to do so:
   * @param blockImagination blockImagination or {@code null} for none
   */
  public GoodocOverrides setBlockImagination(java.lang.String blockImagination) {
    this.blockImagination = blockImagination;
    return this;
  }

  /**
   * For graphic blocks, we often expand the block a bit for rendering, to compensate for bad image
   * segmentation. do_not_expand_graphic_box forces this behavior to be turned off.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDoNotExpandGraphicBox() {
    return doNotExpandGraphicBox;
  }

  /**
   * For graphic blocks, we often expand the block a bit for rendering, to compensate for bad image
   * segmentation. do_not_expand_graphic_box forces this behavior to be turned off.
   * @param doNotExpandGraphicBox doNotExpandGraphicBox or {@code null} for none
   */
  public GoodocOverrides setDoNotExpandGraphicBox(java.lang.Boolean doNotExpandGraphicBox) {
    this.doNotExpandGraphicBox = doNotExpandGraphicBox;
    return this;
  }

  /**
   * For Pages only: explicitly specify whether or not this page should be rendered fully as an
   * image
   * @return value or {@code null} for none
   */
  public java.lang.String getFullPageAsImage() {
    return fullPageAsImage;
  }

  /**
   * For Pages only: explicitly specify whether or not this page should be rendered fully as an
   * image
   * @param fullPageAsImage fullPageAsImage or {@code null} for none
   */
  public GoodocOverrides setFullPageAsImage(java.lang.String fullPageAsImage) {
    this.fullPageAsImage = fullPageAsImage;
    return this;
  }

  /**
   * For Pages only: explicitly specify whether or not all text on this page should be treated as
   * "LINEATED"
   * @return value or {@code null} for none
   */
  public java.lang.String getFullPageLineated() {
    return fullPageLineated;
  }

  /**
   * For Pages only: explicitly specify whether or not all text on this page should be treated as
   * "LINEATED"
   * @param fullPageLineated fullPageLineated or {@code null} for none
   */
  public GoodocOverrides setFullPageLineated(java.lang.String fullPageLineated) {
    this.fullPageLineated = fullPageLineated;
    return this;
  }

  /**
   * For Pages only: explicitly specify whether or not this page should be skipped.
   * @return value or {@code null} for none
   */
  public java.lang.String getFullPageSkipped() {
    return fullPageSkipped;
  }

  /**
   * For Pages only: explicitly specify whether or not this page should be skipped.
   * @param fullPageSkipped fullPageSkipped or {@code null} for none
   */
  public GoodocOverrides setFullPageSkipped(java.lang.String fullPageSkipped) {
    this.fullPageSkipped = fullPageSkipped;
    return this;
  }

  /**
   * This GRAPHIC block's image can be shown even when GoodocToHTMLOptions.suppress_photos_with_this
   * is specified.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNeedNotSuppressPhoto() {
    return needNotSuppressPhoto;
  }

  /**
   * This GRAPHIC block's image can be shown even when GoodocToHTMLOptions.suppress_photos_with_this
   * is specified.
   * @param needNotSuppressPhoto needNotSuppressPhoto or {@code null} for none
   */
  public GoodocOverrides setNeedNotSuppressPhoto(java.lang.Boolean needNotSuppressPhoto) {
    this.needNotSuppressPhoto = needNotSuppressPhoto;
    return this;
  }

  /**
   * For blocks: explicitly specify whether or not this block should get a page-break before it.
   * @return value or {@code null} for none
   */
  public java.lang.String getPageBreakBefore() {
    return pageBreakBefore;
  }

  /**
   * For blocks: explicitly specify whether or not this block should get a page-break before it.
   * @param pageBreakBefore pageBreakBefore or {@code null} for none
   */
  public GoodocOverrides setPageBreakBefore(java.lang.String pageBreakBefore) {
    this.pageBreakBefore = pageBreakBefore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocOverridesStyle> getStyle() {
    return style;
  }

  /**
   * @param style style or {@code null} for none
   */
  public GoodocOverrides setStyle(java.util.List<GoodocOverridesStyle> style) {
    this.style = style;
    return this;
  }

  /**
   * For Words only: replace the rendered HTML by this:
   * @return value or {@code null} for none
   */
  public java.lang.String getWordHtml() {
    return wordHtml;
  }

  /**
   * For Words only: replace the rendered HTML by this:
   * @param wordHtml wordHtml or {@code null} for none
   */
  public GoodocOverrides setWordHtml(java.lang.String wordHtml) {
    this.wordHtml = wordHtml;
    return this;
  }

  @Override
  public GoodocOverrides set(String fieldName, Object value) {
    return (GoodocOverrides) super.set(fieldName, value);
  }

  @Override
  public GoodocOverrides clone() {
    return (GoodocOverrides) super.clone();
  }

}
