/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.solar.v1.model;

/**
 * Information about a roof segment on the building, with some number of panels placed on it.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Solar API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RoofSegmentSummary extends com.google.api.client.json.GenericJson {

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float azimuthDegrees;

  /**
   * The total number of panels on this segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer panelsCount;

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float pitchDegrees;

  /**
   * Index in roof_segment_stats of the corresponding `RoofSegmentSizeAndSunshineStats`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer segmentIndex;

  /**
   * How much sunlight energy this part of the layout captures over the course of a year, in DC kWh,
   * assuming the panels described above.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float yearlyEnergyDcKwh;

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * @return value or {@code null} for none
   */
  public java.lang.Float getAzimuthDegrees() {
    return azimuthDegrees;
  }

  /**
   * Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a
   * "flat" roof segment (`pitch_degrees` very near 0), azimuth is not well defined, so for
   * consistency, we define it arbitrarily to be 0 (North).
   * @param azimuthDegrees azimuthDegrees or {@code null} for none
   */
  public RoofSegmentSummary setAzimuthDegrees(java.lang.Float azimuthDegrees) {
    this.azimuthDegrees = azimuthDegrees;
    return this;
  }

  /**
   * The total number of panels on this segment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPanelsCount() {
    return panelsCount;
  }

  /**
   * The total number of panels on this segment.
   * @param panelsCount panelsCount or {@code null} for none
   */
  public RoofSegmentSummary setPanelsCount(java.lang.Integer panelsCount) {
    this.panelsCount = panelsCount;
    return this;
  }

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPitchDegrees() {
    return pitchDegrees;
  }

  /**
   * Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground,
   * 90 = perpendicular to the ground.
   * @param pitchDegrees pitchDegrees or {@code null} for none
   */
  public RoofSegmentSummary setPitchDegrees(java.lang.Float pitchDegrees) {
    this.pitchDegrees = pitchDegrees;
    return this;
  }

  /**
   * Index in roof_segment_stats of the corresponding `RoofSegmentSizeAndSunshineStats`.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSegmentIndex() {
    return segmentIndex;
  }

  /**
   * Index in roof_segment_stats of the corresponding `RoofSegmentSizeAndSunshineStats`.
   * @param segmentIndex segmentIndex or {@code null} for none
   */
  public RoofSegmentSummary setSegmentIndex(java.lang.Integer segmentIndex) {
    this.segmentIndex = segmentIndex;
    return this;
  }

  /**
   * How much sunlight energy this part of the layout captures over the course of a year, in DC kWh,
   * assuming the panels described above.
   * @return value or {@code null} for none
   */
  public java.lang.Float getYearlyEnergyDcKwh() {
    return yearlyEnergyDcKwh;
  }

  /**
   * How much sunlight energy this part of the layout captures over the course of a year, in DC kWh,
   * assuming the panels described above.
   * @param yearlyEnergyDcKwh yearlyEnergyDcKwh or {@code null} for none
   */
  public RoofSegmentSummary setYearlyEnergyDcKwh(java.lang.Float yearlyEnergyDcKwh) {
    this.yearlyEnergyDcKwh = yearlyEnergyDcKwh;
    return this;
  }

  @Override
  public RoofSegmentSummary set(String fieldName, Object value) {
    return (RoofSegmentSummary) super.set(fieldName, value);
  }

  @Override
  public RoofSegmentSummary clone() {
    return (RoofSegmentSummary) super.clone();
  }

}
