/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message logs details on ambiguous device targeting logic. 1. It first takes a list of
 * ambiguous devices 2. Then applies two filters: structure filter and playability filter. 3. If
 * more than one device remains, it tiggers DeviceSelectionDialog to let the user pick one device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantLogsAmbiguousTargetDeviceLog extends com.google.api.client.json.GenericJson {

  /**
   * Device index of the initial ambiguous devices. The device index in this message is consistent
   * with the device index in DeviceInfoLog. It would be used to track more detailed information of
   * a device if needed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> ambiguousDeviceIndex;

  /**
   * DeviceInfo for devices after the filters and promoters. - When device targeting is only
   * configured for single target, these are ambiguous devices that would have been the output of
   * Lumos. Downstream may perform extra check before disambiguation dialog. For example, Media
   * Initiation checks playability for devices. The output here is before the check. - When
   * configured for multi-target, these are just the target devices. For privacy consideration, we
   * may only log device id field inside.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsDeviceInfoLog> devicesAfterPromoters;

  /**
   * the final targeted device selected by playability filter or DeviceSelectionDialog
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDeviceInfoLog finalTargetDevice;

  /**
   * Device index of the devices after playability filter
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> playabilityFilteredDevicesIndex;

  /**
   * When there is no qualified devices after playability check, it would populate punt_info below.
   * If all devices are filtered out for the same reason, there would only be one item. Otherwise,
   * there will be multiple items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog> puntInfoLog;

  /**
   * Device index of the devices after structure filter
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> structureFilteredDeviceIndex;

  /**
   * Device index of the initial ambiguous devices. The device index in this message is consistent
   * with the device index in DeviceInfoLog. It would be used to track more detailed information of
   * a device if needed.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getAmbiguousDeviceIndex() {
    return ambiguousDeviceIndex;
  }

  /**
   * Device index of the initial ambiguous devices. The device index in this message is consistent
   * with the device index in DeviceInfoLog. It would be used to track more detailed information of
   * a device if needed.
   * @param ambiguousDeviceIndex ambiguousDeviceIndex or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setAmbiguousDeviceIndex(java.util.List<java.lang.Integer> ambiguousDeviceIndex) {
    this.ambiguousDeviceIndex = ambiguousDeviceIndex;
    return this;
  }

  /**
   * DeviceInfo for devices after the filters and promoters. - When device targeting is only
   * configured for single target, these are ambiguous devices that would have been the output of
   * Lumos. Downstream may perform extra check before disambiguation dialog. For example, Media
   * Initiation checks playability for devices. The output here is before the check. - When
   * configured for multi-target, these are just the target devices. For privacy consideration, we
   * may only log device id field inside.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsDeviceInfoLog> getDevicesAfterPromoters() {
    return devicesAfterPromoters;
  }

  /**
   * DeviceInfo for devices after the filters and promoters. - When device targeting is only
   * configured for single target, these are ambiguous devices that would have been the output of
   * Lumos. Downstream may perform extra check before disambiguation dialog. For example, Media
   * Initiation checks playability for devices. The output here is before the check. - When
   * configured for multi-target, these are just the target devices. For privacy consideration, we
   * may only log device id field inside.
   * @param devicesAfterPromoters devicesAfterPromoters or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setDevicesAfterPromoters(java.util.List<AssistantLogsDeviceInfoLog> devicesAfterPromoters) {
    this.devicesAfterPromoters = devicesAfterPromoters;
    return this;
  }

  /**
   * the final targeted device selected by playability filter or DeviceSelectionDialog
   * @return value or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog getFinalTargetDevice() {
    return finalTargetDevice;
  }

  /**
   * the final targeted device selected by playability filter or DeviceSelectionDialog
   * @param finalTargetDevice finalTargetDevice or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setFinalTargetDevice(AssistantLogsDeviceInfoLog finalTargetDevice) {
    this.finalTargetDevice = finalTargetDevice;
    return this;
  }

  /**
   * Device index of the devices after playability filter
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getPlayabilityFilteredDevicesIndex() {
    return playabilityFilteredDevicesIndex;
  }

  /**
   * Device index of the devices after playability filter
   * @param playabilityFilteredDevicesIndex playabilityFilteredDevicesIndex or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setPlayabilityFilteredDevicesIndex(java.util.List<java.lang.Integer> playabilityFilteredDevicesIndex) {
    this.playabilityFilteredDevicesIndex = playabilityFilteredDevicesIndex;
    return this;
  }

  /**
   * When there is no qualified devices after playability check, it would populate punt_info below.
   * If all devices are filtered out for the same reason, there would only be one item. Otherwise,
   * there will be multiple items.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog> getPuntInfoLog() {
    return puntInfoLog;
  }

  /**
   * When there is no qualified devices after playability check, it would populate punt_info below.
   * If all devices are filtered out for the same reason, there would only be one item. Otherwise,
   * there will be multiple items.
   * @param puntInfoLog puntInfoLog or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setPuntInfoLog(java.util.List<AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog> puntInfoLog) {
    this.puntInfoLog = puntInfoLog;
    return this;
  }

  /**
   * Device index of the devices after structure filter
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getStructureFilteredDeviceIndex() {
    return structureFilteredDeviceIndex;
  }

  /**
   * Device index of the devices after structure filter
   * @param structureFilteredDeviceIndex structureFilteredDeviceIndex or {@code null} for none
   */
  public AssistantLogsAmbiguousTargetDeviceLog setStructureFilteredDeviceIndex(java.util.List<java.lang.Integer> structureFilteredDeviceIndex) {
    this.structureFilteredDeviceIndex = structureFilteredDeviceIndex;
    return this;
  }

  @Override
  public AssistantLogsAmbiguousTargetDeviceLog set(String fieldName, Object value) {
    return (AssistantLogsAmbiguousTargetDeviceLog) super.set(fieldName, value);
  }

  @Override
  public AssistantLogsAmbiguousTargetDeviceLog clone() {
    return (AssistantLogsAmbiguousTargetDeviceLog) super.clone();
  }

}
