/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v1.model;

/**
 * represents the Connector's EventSubscription resource
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EventSubscription extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Created time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. The destination to hit when we receive an event
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EventSubscriptionDestination destinations;

  /**
   * Optional. Event type id of the event of current EventSubscription.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventTypeId;

  /**
   * Optional. JMS is the source for the event listener.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private JMS jms;

  /**
   * Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{locatio
   * n}/connections/{connection}/eventSubscriptions/{event_subscription}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Status indicates the status of the event subscription resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EventSubscriptionStatus status;

  /**
   * Optional. name of the Subscriber for the current EventSubscription.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subscriber;

  /**
   * Optional. Link for Subscriber of the current EventSubscription.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subscriberLink;

  /**
   * Optional. Configuration for configuring the trigger
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConfigVariable> triggerConfigVariables;

  static {
    // hack to force ProGuard to consider ConfigVariable used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ConfigVariable.class);
  }

  /**
   * Output only. Updated time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. Created time.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Created time.
   * @param createTime createTime or {@code null} for none
   */
  public EventSubscription setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. The destination to hit when we receive an event
   * @return value or {@code null} for none
   */
  public EventSubscriptionDestination getDestinations() {
    return destinations;
  }

  /**
   * Optional. The destination to hit when we receive an event
   * @param destinations destinations or {@code null} for none
   */
  public EventSubscription setDestinations(EventSubscriptionDestination destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Optional. Event type id of the event of current EventSubscription.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventTypeId() {
    return eventTypeId;
  }

  /**
   * Optional. Event type id of the event of current EventSubscription.
   * @param eventTypeId eventTypeId or {@code null} for none
   */
  public EventSubscription setEventTypeId(java.lang.String eventTypeId) {
    this.eventTypeId = eventTypeId;
    return this;
  }

  /**
   * Optional. JMS is the source for the event listener.
   * @return value or {@code null} for none
   */
  public JMS getJms() {
    return jms;
  }

  /**
   * Optional. JMS is the source for the event listener.
   * @param jms jms or {@code null} for none
   */
  public EventSubscription setJms(JMS jms) {
    this.jms = jms;
    return this;
  }

  /**
   * Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{locatio
   * n}/connections/{connection}/eventSubscriptions/{event_subscription}
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{locatio
   * n}/connections/{connection}/eventSubscriptions/{event_subscription}
   * @param name name or {@code null} for none
   */
  public EventSubscription setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Status indicates the status of the event subscription resource
   * @return value or {@code null} for none
   */
  public EventSubscriptionStatus getStatus() {
    return status;
  }

  /**
   * Optional. Status indicates the status of the event subscription resource
   * @param status status or {@code null} for none
   */
  public EventSubscription setStatus(EventSubscriptionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Optional. name of the Subscriber for the current EventSubscription.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubscriber() {
    return subscriber;
  }

  /**
   * Optional. name of the Subscriber for the current EventSubscription.
   * @param subscriber subscriber or {@code null} for none
   */
  public EventSubscription setSubscriber(java.lang.String subscriber) {
    this.subscriber = subscriber;
    return this;
  }

  /**
   * Optional. Link for Subscriber of the current EventSubscription.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubscriberLink() {
    return subscriberLink;
  }

  /**
   * Optional. Link for Subscriber of the current EventSubscription.
   * @param subscriberLink subscriberLink or {@code null} for none
   */
  public EventSubscription setSubscriberLink(java.lang.String subscriberLink) {
    this.subscriberLink = subscriberLink;
    return this;
  }

  /**
   * Optional. Configuration for configuring the trigger
   * @return value or {@code null} for none
   */
  public java.util.List<ConfigVariable> getTriggerConfigVariables() {
    return triggerConfigVariables;
  }

  /**
   * Optional. Configuration for configuring the trigger
   * @param triggerConfigVariables triggerConfigVariables or {@code null} for none
   */
  public EventSubscription setTriggerConfigVariables(java.util.List<ConfigVariable> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
    return this;
  }

  /**
   * Output only. Updated time.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Updated time.
   * @param updateTime updateTime or {@code null} for none
   */
  public EventSubscription setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public EventSubscription set(String fieldName, Object value) {
    return (EventSubscription) super.set(fieldName, value);
  }

  @Override
  public EventSubscription clone() {
    return (EventSubscription) super.clone();
  }

}
