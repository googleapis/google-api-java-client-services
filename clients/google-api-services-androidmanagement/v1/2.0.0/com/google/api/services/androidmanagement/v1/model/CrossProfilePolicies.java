/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Cross-profile policies applied on the device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CrossProfilePolicies extends com.google.api.client.json.GenericJson {

  /**
   * Whether text copied from one profile (personal or work) can be pasted in the other profile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crossProfileCopyPaste;

  /**
   * Whether data from one profile (personal or work) can be shared with apps in the other profile.
   * Specifically controls simple data sharing via intents. Management of other cross-profile
   * communication channels, such as contact search, copy/paste, or connected work & personal apps,
   * are configured separately.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crossProfileDataSharing;

  /**
   * Whether contacts stored in the work profile can be shown in personal profile contact searches
   * and incoming calls.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String showWorkContactsInPersonalProfile;

  /**
   * Specifies the default behaviour for work profile widgets. If the policy does not specify
   * work_profile_widgets for a specific application, it will behave according to the value
   * specified here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workProfileWidgetsDefault;

  /**
   * Whether text copied from one profile (personal or work) can be pasted in the other profile.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrossProfileCopyPaste() {
    return crossProfileCopyPaste;
  }

  /**
   * Whether text copied from one profile (personal or work) can be pasted in the other profile.
   * @param crossProfileCopyPaste crossProfileCopyPaste or {@code null} for none
   */
  public CrossProfilePolicies setCrossProfileCopyPaste(java.lang.String crossProfileCopyPaste) {
    this.crossProfileCopyPaste = crossProfileCopyPaste;
    return this;
  }

  /**
   * Whether data from one profile (personal or work) can be shared with apps in the other profile.
   * Specifically controls simple data sharing via intents. Management of other cross-profile
   * communication channels, such as contact search, copy/paste, or connected work & personal apps,
   * are configured separately.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrossProfileDataSharing() {
    return crossProfileDataSharing;
  }

  /**
   * Whether data from one profile (personal or work) can be shared with apps in the other profile.
   * Specifically controls simple data sharing via intents. Management of other cross-profile
   * communication channels, such as contact search, copy/paste, or connected work & personal apps,
   * are configured separately.
   * @param crossProfileDataSharing crossProfileDataSharing or {@code null} for none
   */
  public CrossProfilePolicies setCrossProfileDataSharing(java.lang.String crossProfileDataSharing) {
    this.crossProfileDataSharing = crossProfileDataSharing;
    return this;
  }

  /**
   * Whether contacts stored in the work profile can be shown in personal profile contact searches
   * and incoming calls.
   * @return value or {@code null} for none
   */
  public java.lang.String getShowWorkContactsInPersonalProfile() {
    return showWorkContactsInPersonalProfile;
  }

  /**
   * Whether contacts stored in the work profile can be shown in personal profile contact searches
   * and incoming calls.
   * @param showWorkContactsInPersonalProfile showWorkContactsInPersonalProfile or {@code null} for none
   */
  public CrossProfilePolicies setShowWorkContactsInPersonalProfile(java.lang.String showWorkContactsInPersonalProfile) {
    this.showWorkContactsInPersonalProfile = showWorkContactsInPersonalProfile;
    return this;
  }

  /**
   * Specifies the default behaviour for work profile widgets. If the policy does not specify
   * work_profile_widgets for a specific application, it will behave according to the value
   * specified here.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkProfileWidgetsDefault() {
    return workProfileWidgetsDefault;
  }

  /**
   * Specifies the default behaviour for work profile widgets. If the policy does not specify
   * work_profile_widgets for a specific application, it will behave according to the value
   * specified here.
   * @param workProfileWidgetsDefault workProfileWidgetsDefault or {@code null} for none
   */
  public CrossProfilePolicies setWorkProfileWidgetsDefault(java.lang.String workProfileWidgetsDefault) {
    this.workProfileWidgetsDefault = workProfileWidgetsDefault;
    return this;
  }

  @Override
  public CrossProfilePolicies set(String fieldName, Object value) {
    return (CrossProfilePolicies) super.set(fieldName, value);
  }

  @Override
  public CrossProfilePolicies clone() {
    return (CrossProfilePolicies) super.clone();
  }

}
