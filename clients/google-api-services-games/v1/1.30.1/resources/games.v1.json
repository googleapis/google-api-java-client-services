{
  "baseUrl": "https://games.googleapis.com/",
  "protocol": "rest",
  "resources": {
    "leaderboards": {
      "methods": {
        "get": {
          "parameterOrder": [
            "leaderboardId"
          ],
          "flatPath": "games/v1/leaderboards/{leaderboardId}",
          "httpMethod": "GET",
          "parameters": {
            "leaderboardId": {
              "location": "path",
              "description": "The ID of the leaderboard.",
              "type": "string",
              "required": true
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/leaderboards/{leaderboardId}",
          "description": "Retrieves the metadata of the leaderboard with the given ID.",
          "id": "games.leaderboards.get",
          "response": {
            "$ref": "Leaderboard"
          }
        },
        "list": {
          "parameters": {
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of leaderboards to return in the response.  For any\nresponse, the actual number of leaderboards returned may be less than the\nspecified `maxResults`."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            }
          },
          "path": "games/v1/leaderboards",
          "httpMethod": "GET",
          "id": "games.leaderboards.list",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Lists all the leaderboard metadata for your application.",
          "response": {
            "$ref": "LeaderboardListResponse"
          },
          "flatPath": "games/v1/leaderboards"
        }
      }
    },
    "achievementDefinitions": {
      "methods": {
        "list": {
          "path": "games/v1/achievements",
          "httpMethod": "GET",
          "description": "Lists all the achievement definitions for your application.",
          "id": "games.achievementDefinitions.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "AchievementDefinitionsListResponse"
          },
          "flatPath": "games/v1/achievements",
          "parameters": {
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "description": "The maximum number of achievement resources to return in the response, used\nfor paging. For any response, the actual number of achievement resources\nreturned may be less than the specified `maxResults`.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            }
          },
          "parameterOrder": []
        }
      }
    },
    "scores": {
      "methods": {
        "listWindow": {
          "description": "Lists the scores in a leaderboard around (and including) a player's score.",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "path": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "id": "games.scores.listWindow",
          "httpMethod": "GET",
          "response": {
            "$ref": "LeaderboardScores"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "timeSpan": {
              "type": "string",
              "required": true,
              "description": "The time span for the scores and ranks you're requesting.",
              "location": "query",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ]
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "format": "int32"
            },
            "resultsAbove": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The preferred number of scores to return above the player's score. More\nscores may be returned if the player is at the bottom of the leaderboard;\nfewer may be returned if the player is at the top. Must be less than or\nequal to maxResults."
            },
            "collection": {
              "location": "path",
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string",
              "required": true,
              "description": "The collection of scores you're requesting."
            },
            "leaderboardId": {
              "description": "The ID of the leaderboard.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "returnTopIfAbsent": {
              "location": "query",
              "description": "True if the top scores should be returned when the player is not in the\nleaderboard. Defaults to true.",
              "type": "boolean"
            }
          },
          "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}"
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "maxResults": {
              "location": "query",
              "type": "integer",
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "format": "int32"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "timeSpan": {
              "location": "path",
              "required": true,
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "type": "string",
              "description": "The time span for the scores and ranks you're requesting."
            },
            "leaderboardId": {
              "description": "The ID of the leaderboard.  Can be set to 'ALL' to retrieve data for all\nleaderboards for this application.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "includeRankType": {
              "type": "string",
              "location": "query",
              "enum": [
                "INCLUDE_RANK_TYPE_UNSPECIFIED",
                "ALL",
                "PUBLIC",
                "SOCIAL"
              ],
              "description": "The types of ranks to return. If the parameter is omitted, no ranks will be\nreturned."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "playerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "description": "Get high scores, and optionally ranks, in leaderboards for the currently\nauthenticated player.  For a specific time span, `leaderboardId`\ncan be set to `ALL` to retrieve data for all leaderboards in a\ngiven time span.  `NOTE: You cannot ask for 'ALL' leaderboards and\n'ALL' timeSpans in the same request; only one parameter may be set to\n'ALL'.",
          "response": {
            "$ref": "PlayerLeaderboardScoreListResponse"
          },
          "id": "games.scores.get",
          "parameterOrder": [
            "playerId",
            "leaderboardId",
            "timeSpan"
          ],
          "path": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}"
        },
        "submit": {
          "parameterOrder": [
            "leaderboardId",
            "score"
          ],
          "id": "games.scores.submit",
          "parameters": {
            "leaderboardId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The ID of the leaderboard."
            },
            "scoreTag": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-._~]{0,64}",
              "location": "query",
              "description": "Additional information about the score you're submitting.  Values must\ncontain no more than 64 URI-safe characters as defined by section 2.3 of\nRFC 3986."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "score": {
              "description": "The score you're submitting. The submitted score is ignored if it is worse\nthan a previously submitted score, where worse depends on the leaderboard\nsort order. The meaning of the score value depends on the leaderboard\nformat type. For fixed-point, the score represents the raw value.  For\ntime, the score represents elapsed time in milliseconds.  For currency, the\nscore represents a value in micro units.",
              "required": true,
              "format": "int64",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "PlayerScoreResponse"
          },
          "path": "games/v1/leaderboards/{leaderboardId}/scores",
          "httpMethod": "POST",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
          "description": "Submits a score to the specified leaderboard."
        },
        "list": {
          "parameters": {
            "timeSpan": {
              "location": "query",
              "type": "string",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "description": "The time span for the scores and ranks you're requesting.",
              "required": true
            },
            "collection": {
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The collection of scores you're requesting."
            },
            "leaderboardId": {
              "required": true,
              "description": "The ID of the leaderboard.",
              "location": "path",
              "type": "string"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            }
          },
          "path": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "httpMethod": "GET",
          "description": "Lists the scores in a leaderboard, starting from the top.",
          "response": {
            "$ref": "LeaderboardScores"
          },
          "id": "games.scores.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}"
        },
        "submitMultiple": {
          "response": {
            "$ref": "PlayerScoreListResponse"
          },
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [],
          "path": "games/v1/leaderboards/scores",
          "flatPath": "games/v1/leaderboards/scores",
          "description": "Submits multiple scores to leaderboards.",
          "id": "games.scores.submitMultiple",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "request": {
            "$ref": "PlayerScoreSubmissionList"
          },
          "httpMethod": "POST"
        }
      }
    },
    "players": {
      "methods": {
        "list": {
          "flatPath": "games/v1/players/me/players/{collection}",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.players.list",
          "parameters": {
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "collection": {
              "type": "string",
              "location": "path",
              "enum": [
                "CONNECTED",
                "VISIBLE",
                "FRIENDS_ALL"
              ],
              "description": "Collection of players being retrieved",
              "required": true
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of player resources to return in the response, used for\npaging. For any response, the actual number of player resources returned\nmay be less than the specified `maxResults`.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "PlayerListResponse"
          },
          "description": "Get the collection of players for the currently authenticated user.",
          "parameterOrder": [
            "collection"
          ],
          "httpMethod": "GET",
          "path": "games/v1/players/me/players/{collection}"
        },
        "get": {
          "parameterOrder": [
            "playerId"
          ],
          "parameters": {
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "playerId": {
              "required": true,
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID.",
              "location": "path"
            }
          },
          "flatPath": "games/v1/players/{playerId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Player"
          },
          "id": "games.players.get",
          "description": "Retrieves the Player resource with the given ID.  To retrieve the player\nfor the currently authenticated user, set `playerId` to `me`.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/players/{playerId}"
        }
      }
    },
    "events": {
      "methods": {
        "listByPlayer": {
          "flatPath": "games/v1/events",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "The maximum number of events to return in the response, used for paging.\nFor any response, the actual number of events to return may be less than\nthe specified maxResults.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "PlayerEventListResponse"
          },
          "parameterOrder": [],
          "id": "games.events.listByPlayer",
          "description": "Returns a list showing the current progress on events in this application\nfor the currently authenticated user.",
          "path": "games/v1/events"
        },
        "record": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/events",
          "request": {
            "$ref": "EventRecordRequest"
          },
          "response": {
            "$ref": "EventUpdateResponse"
          },
          "description": "Records a batch of changes to the number of times events have occurred for\nthe currently authenticated user of this application.",
          "path": "games/v1/events",
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "games.events.record",
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          }
        },
        "listDefinitions": {
          "parameterOrder": [],
          "description": "Returns a list of the event definitions in this application.",
          "httpMethod": "GET",
          "id": "games.events.listDefinitions",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/eventDefinitions",
          "path": "games/v1/eventDefinitions",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of event definitions to return in the response, used for\npaging.  For any response, the actual number of event definitions to return\nmay be less than the specified `maxResults`.",
              "location": "query"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "EventDefinitionListResponse"
          }
        }
      }
    },
    "applications": {
      "methods": {
        "played": {
          "id": "games.applications.played",
          "path": "games/v1/applications/played",
          "parameterOrder": [],
          "description": "Indicate that the currently authenticated user is playing your\napplication.",
          "parameters": {},
          "httpMethod": "POST",
          "flatPath": "games/v1/applications/played",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "verify": {
          "path": "games/v1/applications/{applicationId}/verify",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "ApplicationVerifyResponse"
          },
          "parameters": {
            "applicationId": {
              "required": true,
              "location": "path",
              "description": "The application ID from the Google Play developer console.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "applicationId"
          ],
          "description": "Verifies the auth token provided with this request is for the application\nwith the specified ID, and returns the ID of the player it was granted for.",
          "flatPath": "games/v1/applications/{applicationId}/verify",
          "httpMethod": "GET",
          "id": "games.applications.verify"
        },
        "get": {
          "parameterOrder": [
            "applicationId"
          ],
          "path": "games/v1/applications/{applicationId}",
          "httpMethod": "GET",
          "description": "Retrieves the metadata of the application with the given ID. If the\nrequested application is not available for the specified\n`platformType`, the returned response will not include any\ninstance data.",
          "id": "games.applications.get",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "platformType": {
              "location": "query",
              "description": "Restrict application details returned to the specific platform.",
              "enum": [
                "PLATFORM_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "WEB_APP"
              ],
              "type": "string"
            },
            "applicationId": {
              "required": true,
              "location": "path",
              "description": "The application ID from the Google Play developer console.",
              "type": "string"
            }
          },
          "flatPath": "games/v1/applications/{applicationId}",
          "response": {
            "$ref": "Application"
          }
        }
      }
    },
    "revisions": {
      "methods": {
        "check": {
          "id": "games.revisions.check",
          "httpMethod": "GET",
          "parameters": {
            "clientRevision": {
              "location": "query",
              "description": "The revision of the client SDK used by your application. Format:\n`[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are:\n* `ANDROID` - Client is running the Android SDK.\n* `IOS` - Client is running the iOS SDK.\n* `WEB_APP` - Client is running as a Web App.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/revisions/check",
          "response": {
            "$ref": "RevisionCheckResponse"
          },
          "description": "Checks whether the games client is out of date.",
          "flatPath": "games/v1/revisions/check",
          "parameterOrder": [
            "clientRevision"
          ]
        }
      }
    },
    "metagame": {
      "methods": {
        "getMetagameConfig": {
          "response": {
            "$ref": "MetagameConfig"
          },
          "flatPath": "games/v1/metagameConfig",
          "id": "games.metagame.getMetagameConfig",
          "path": "games/v1/metagameConfig",
          "parameterOrder": [],
          "description": "Return the metagame configuration data for the calling application.",
          "httpMethod": "GET",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "listCategoriesByPlayer": {
          "parameters": {
            "collection": {
              "type": "string",
              "required": true,
              "enum": [
                "COLLECTION_UNSPECIFIED",
                "ALL"
              ],
              "description": "The collection of categories for which data will be returned.",
              "location": "path"
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "playerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID."
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "The maximum number of category resources to return in the response, used\nfor paging. For any response, the actual number of category resources\nreturned may be less than the specified `maxResults`.",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "CategoryListResponse"
          },
          "httpMethod": "GET",
          "flatPath": "games/v1/players/{playerId}/categories/{collection}",
          "id": "games.metagame.listCategoriesByPlayer",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/players/{playerId}/categories/{collection}",
          "description": "List play data aggregated per category for the player corresponding to\n`playerId`.",
          "parameterOrder": [
            "playerId",
            "collection"
          ]
        }
      }
    },
    "stats": {
      "methods": {
        "get": {
          "id": "games.stats.get",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/stats",
          "path": "games/v1/stats",
          "httpMethod": "GET",
          "description": "Returns engagement and spend statistics in this application for the\ncurrently authenticated user.",
          "parameterOrder": [],
          "parameters": {},
          "response": {
            "$ref": "StatsResponse"
          }
        }
      }
    },
    "achievements": {
      "methods": {
        "increment": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "achievementId": {
              "description": "The ID of the achievement used by this method.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "stepsToIncrement": {
              "location": "query",
              "required": true,
              "format": "int32",
              "description": "The number of steps to increment.",
              "type": "integer"
            },
            "requestId": {
              "format": "int64",
              "description": "A randomly generated numeric ID for each request specified by the caller.\nThis number is used at the server to ensure that the request is handled\ncorrectly across retries.",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Increments the steps of the achievement with the given ID for the currently\nauthenticated player.",
          "parameterOrder": [
            "achievementId",
            "stepsToIncrement"
          ],
          "path": "games/v1/achievements/{achievementId}/increment",
          "flatPath": "games/v1/achievements/{achievementId}/increment",
          "response": {
            "$ref": "AchievementIncrementResponse"
          },
          "httpMethod": "POST",
          "id": "games.achievements.increment"
        },
        "unlock": {
          "path": "games/v1/achievements/{achievementId}/unlock",
          "httpMethod": "POST",
          "parameterOrder": [
            "achievementId"
          ],
          "id": "games.achievements.unlock",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "AchievementUnlockResponse"
          },
          "description": "Unlocks this achievement for the currently authenticated player.",
          "parameters": {
            "achievementId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The ID of the achievement used by this method."
            }
          },
          "flatPath": "games/v1/achievements/{achievementId}/unlock"
        },
        "setStepsAtLeast": {
          "path": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "response": {
            "$ref": "AchievementSetStepsAtLeastResponse"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "achievementId",
            "steps"
          ],
          "description": "Sets the steps for the currently authenticated player towards unlocking an\nachievement. If the steps parameter is less than the current number of\nsteps that the player already gained for the achievement, the achievement\nis not modified.",
          "id": "games.achievements.setStepsAtLeast",
          "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "parameters": {
            "achievementId": {
              "location": "path",
              "type": "string",
              "description": "The ID of the achievement used by this method.",
              "required": true
            },
            "steps": {
              "required": true,
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The minimum value to set the steps to."
            }
          }
        },
        "reveal": {
          "id": "games.achievements.reveal",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Sets the state of the achievement with the given ID to\n`REVEALED` for the currently authenticated player.",
          "response": {
            "$ref": "AchievementRevealResponse"
          },
          "parameters": {
            "achievementId": {
              "location": "path",
              "description": "The ID of the achievement used by this method.",
              "type": "string",
              "required": true
            }
          },
          "path": "games/v1/achievements/{achievementId}/reveal",
          "parameterOrder": [
            "achievementId"
          ],
          "flatPath": "games/v1/achievements/{achievementId}/reveal"
        },
        "updateMultiple": {
          "httpMethod": "POST",
          "id": "games.achievements.updateMultiple",
          "response": {
            "$ref": "AchievementUpdateMultipleResponse"
          },
          "parameters": {},
          "flatPath": "games/v1/achievements/updateMultiple",
          "parameterOrder": [],
          "description": "Updates multiple achievements for the currently authenticated player.",
          "path": "games/v1/achievements/updateMultiple",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "request": {
            "$ref": "AchievementUpdateMultipleRequest"
          }
        },
        "list": {
          "description": "Lists the progress for all your application's achievements for the\ncurrently authenticated player.",
          "id": "games.achievements.list",
          "httpMethod": "GET",
          "path": "games/v1/players/{playerId}/achievements",
          "flatPath": "games/v1/players/{playerId}/achievements",
          "parameters": {
            "playerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID."
            },
            "state": {
              "description": "Tells the server to return only achievements with the specified state.  If\nthis parameter isn't specified, all achievements are returned.",
              "enum": [
                "ALL",
                "HIDDEN",
                "REVEALED",
                "UNLOCKED"
              ],
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "description": "The maximum number of achievement resources to return in the response, used\nfor paging. For any response, the actual number of achievement resources\nreturned may be less than the specified `maxResults`.",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "playerId"
          ],
          "response": {
            "$ref": "PlayerAchievementListResponse"
          }
        }
      }
    },
    "snapshots": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "path": "games/v1/players/{playerId}/snapshots",
          "description": "Retrieves a list of snapshots created by your application for the player\ncorresponding to the player ID.",
          "response": {
            "$ref": "SnapshotListResponse"
          },
          "flatPath": "games/v1/players/{playerId}/snapshots",
          "parameterOrder": [
            "playerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.snapshots.list",
          "parameters": {
            "maxResults": {
              "format": "int32",
              "description": "The maximum number of snapshot resources to return in the response, used\nfor paging. For any response, the actual number of snapshot resources\nreturned may be less than the specified `maxResults`.",
              "type": "integer",
              "location": "query"
            },
            "playerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the authenticated\nplayer's ID."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "snapshotId": {
              "location": "path",
              "description": "The ID of the snapshot.",
              "type": "string",
              "required": true
            }
          },
          "path": "games/v1/snapshots/{snapshotId}",
          "httpMethod": "GET",
          "flatPath": "games/v1/snapshots/{snapshotId}",
          "response": {
            "$ref": "Snapshot"
          },
          "description": "Retrieves the metadata for a given snapshot ID.",
          "id": "games.snapshots.get",
          "parameterOrder": [
            "snapshotId"
          ]
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/games/",
  "discoveryVersion": "v1",
  "schemas": {
    "SnapshotImage": {
      "id": "SnapshotImage",
      "properties": {
        "mime_type": {
          "description": "The MIME type of the image.",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The URL of the image. This URL may be invalidated at any time and should\nnot be cached."
        },
        "height": {
          "format": "int32",
          "description": "The height of the image.",
          "type": "integer"
        },
        "width": {
          "format": "int32",
          "description": "The width of the image.",
          "type": "integer"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshotImage`."
        }
      },
      "type": "object",
      "description": "An image of a snapshot."
    },
    "PlayerScoreSubmissionList": {
      "properties": {
        "scores": {
          "description": "The score submissions.",
          "type": "array",
          "items": {
            "$ref": "ScoreSubmission"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreSubmissionList`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "PlayerScoreSubmissionList",
      "description": "A list of score submission requests."
    },
    "LeaderboardScoreRank": {
      "id": "LeaderboardScoreRank",
      "description": "A score rank in a leaderboard.",
      "properties": {
        "formattedNumScores": {
          "type": "string",
          "description": "The number of scores in the leaderboard as a string."
        },
        "rank": {
          "description": "The rank in the leaderboard.",
          "format": "int64",
          "type": "string"
        },
        "numScores": {
          "type": "string",
          "format": "int64",
          "description": "The number of scores in the leaderboard."
        },
        "formattedRank": {
          "description": "The rank in the leaderboard as a string.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardScoreRank`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PlayerEventListResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerEventListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The player events.",
          "items": {
            "$ref": "PlayerEvent"
          }
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        }
      },
      "id": "PlayerEventListResponse",
      "description": "A ListByPlayer response.",
      "type": "object"
    },
    "Instance": {
      "properties": {
        "acquisitionUri": {
          "type": "string",
          "description": "URI which shows where a user can acquire this instance."
        },
        "turnBasedPlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports turn based play."
        },
        "webInstance": {
          "$ref": "InstanceWebDetails",
          "description": "Platform dependent details for Web."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instance`.",
          "type": "string"
        },
        "iosInstance": {
          "description": "Platform dependent details for iOS.",
          "$ref": "InstanceIosDetails"
        },
        "platformType": {
          "enumDescriptions": [
            "Default value. Should be unused.",
            "Instance is for Android.",
            "Instance is for iOS.",
            "Instance is for Web App."
          ],
          "type": "string",
          "description": "The platform type.",
          "enum": [
            "PLATFORM_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "WEB_APP"
          ]
        },
        "realtimePlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports realtime play."
        },
        "androidInstance": {
          "description": "Platform dependent details for Android.",
          "$ref": "InstanceAndroidDetails"
        },
        "name": {
          "description": "Localized display name.",
          "type": "string"
        }
      },
      "description": "The Instance resource.",
      "type": "object",
      "id": "Instance"
    },
    "PlayerEvent": {
      "properties": {
        "numEvents": {
          "description": "The current number of times this event has occurred.",
          "format": "int64",
          "type": "string"
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event definition."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerEvent`."
        },
        "playerId": {
          "description": "The ID of the player.",
          "type": "string"
        },
        "formattedNumEvents": {
          "description": "The current number of times this event has occurred, as a string. The\nformatting of this string depends on the configuration of your event in the\nPlay Games Developer Console.",
          "type": "string"
        }
      },
      "description": "An event status resource.",
      "id": "PlayerEvent",
      "type": "object"
    },
    "PlayerLeaderboardScore": {
      "description": "A player leaderboard score object.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLeaderboardScore`."
        },
        "publicRank": {
          "description": "The public rank of the score in this leaderboard. This object will not be\npresent if the user is not sharing their scores publicly.",
          "$ref": "LeaderboardScoreRank"
        },
        "writeTimestamp": {
          "description": "The timestamp at which this score was recorded, in milliseconds since the\nepoch in UTC.",
          "format": "int64",
          "type": "string"
        },
        "scoreValue": {
          "format": "int64",
          "description": "The numerical value of this score.",
          "type": "string"
        },
        "timeSpan": {
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "description": "The time span of this score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "type": "string"
        },
        "scoreString": {
          "type": "string",
          "description": "The formatted value of this score."
        },
        "leaderboard_id": {
          "description": "The ID of the leaderboard this score is in.",
          "type": "string"
        },
        "socialRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The social rank of the score in this leaderboard."
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about the score.  Values must contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        }
      },
      "id": "PlayerLeaderboardScore"
    },
    "ProfileSettings": {
      "properties": {
        "friendsListVisibility": {
          "enumDescriptions": [
            "Unused.",
            "The friends list is currently visible to the game.",
            "The developer does not have access to the friends list, but can call the\nAndroid API to show a consent dialog.",
            "The friends list is currently unavailable for this user, and it is not\npossible to request access at this time, either because the user has\npermanently declined or the friends feature is not available to them. In\nthis state, any attempts to request access to the friends list will be\nunsuccessful."
          ],
          "type": "string",
          "enum": [
            "FRIENDS_LIST_VISIBILITY_UNSPECIFIED",
            "VISIBLE",
            "REQUEST_REQUIRED",
            "UNAVAILABLE"
          ]
        },
        "profileVisible": {
          "description": "Whether the player's profile is visible to the currently signed in player.",
          "type": "boolean"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#profileSettings`.",
          "type": "string"
        }
      },
      "description": "Profile settings",
      "id": "ProfileSettings",
      "type": "object"
    },
    "InstanceWebDetails": {
      "type": "object",
      "description": "The Web details resource.",
      "id": "InstanceWebDetails",
      "properties": {
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "launchUrl": {
          "description": "Launch URL for the game.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceWebDetails`.",
          "type": "string"
        }
      }
    },
    "CategoryListResponse": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Category"
          },
          "description": "The list of categories with usage data."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#categoryListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      },
      "description": "A third party list metagame categories response.",
      "id": "CategoryListResponse",
      "type": "object"
    },
    "Snapshot": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of this snapshot."
        },
        "id": {
          "type": "string",
          "description": "The ID of the snapshot."
        },
        "driveId": {
          "type": "string",
          "description": "The ID of the file underlying this snapshot in the Drive API.  Only present\nif the snapshot is a view on a Drive file and the file is owned by the\ncaller."
        },
        "progressValue": {
          "type": "string",
          "description": "The progress value (64-bit integer set by developer) associated with this\nsnapshot.",
          "format": "int64"
        },
        "durationMillis": {
          "format": "int64",
          "description": "The duration associated with this snapshot, in millis.",
          "type": "string"
        },
        "coverImage": {
          "$ref": "SnapshotImage",
          "description": "The cover image of this snapshot. May be absent if there is no image."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshot`.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "A snapshot representing a save game."
          ],
          "type": "string",
          "enum": [
            "SNAPSHOT_TYPE_UNSPECIFIED",
            "SAVE_GAME"
          ],
          "description": "The type of this snapshot."
        },
        "title": {
          "type": "string",
          "description": "The title of this snapshot."
        },
        "uniqueName": {
          "description": "The unique name provided when the snapshot was created.",
          "type": "string"
        },
        "lastModifiedMillis": {
          "format": "int64",
          "description": "The timestamp (in millis since Unix epoch) of the last modification to this\nsnapshot.",
          "type": "string"
        }
      },
      "description": "An snapshot object.",
      "id": "Snapshot"
    },
    "EventUpdateRequest": {
      "type": "object",
      "description": "An event period update resource.",
      "properties": {
        "definitionId": {
          "type": "string",
          "description": "The ID of the event being modified in this update."
        },
        "updateCount": {
          "format": "int64",
          "type": "string",
          "description": "The number of times this event occurred in this time period."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventUpdateRequest`.",
          "type": "string"
        }
      },
      "id": "EventUpdateRequest"
    },
    "PlayerListResponse": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Player"
          },
          "description": "The players."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerListResponse`."
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      },
      "description": "A third party player list response.",
      "id": "PlayerListResponse",
      "type": "object"
    },
    "EventRecordFailure": {
      "type": "object",
      "description": "An event update failure resource.",
      "properties": {
        "failureCause": {
          "enumDescriptions": [
            "Default value. Should not use.",
            "An attempt was made to set an event that was not defined.",
            "An attempt was made to increment an event by a non-positive value."
          ],
          "description": "The cause for the update failure.",
          "enum": [
            "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID_UPDATE_VALUE"
          ],
          "type": "string"
        },
        "eventId": {
          "description": "The ID of the event that was not updated.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventRecordFailure`."
        }
      },
      "id": "EventRecordFailure"
    },
    "GamesAchievementIncrement": {
      "id": "GamesAchievementIncrement",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#GamesAchievementIncrement`."
        },
        "requestId": {
          "type": "string",
          "format": "int64",
          "description": "The requestId associated with an increment to an achievement."
        },
        "steps": {
          "format": "int32",
          "description": "The number of steps to be incremented.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "The payload to request to increment an\nachievement."
    },
    "LeaderboardScores": {
      "id": "LeaderboardScores",
      "description": "A ListScores response.",
      "properties": {
        "items": {
          "items": {
            "$ref": "LeaderboardEntry"
          },
          "description": "The scores in the leaderboard.",
          "type": "array"
        },
        "playerScore": {
          "$ref": "LeaderboardEntry",
          "description": "The score of the requesting player on the leaderboard. The player's score\nmay appear both here and in the list of scores above. If you are viewing a\npublic leaderboard and the player is not sharing their gameplay information\npublicly, the `scoreRank`and `formattedScoreRank`\nvalues will not be present."
        },
        "numScores": {
          "format": "int64",
          "type": "string",
          "description": "The total number of scores in the leaderboard."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "prevPageToken": {
          "description": "The pagination token for the previous page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardScores`."
        }
      },
      "type": "object"
    },
    "MetagameConfig": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#metagameConfig`.",
          "type": "string"
        },
        "playerLevels": {
          "type": "array",
          "description": "The list of player levels.",
          "items": {
            "$ref": "PlayerLevel"
          }
        },
        "currentVersion": {
          "format": "int32",
          "type": "integer",
          "description": "Current version of the metagame configuration data. When this data is\nupdated, the version number will be increased by one."
        }
      },
      "description": "The metagame config resource",
      "type": "object",
      "id": "MetagameConfig"
    },
    "GamesAchievementSetStepsAtLeast": {
      "id": "GamesAchievementSetStepsAtLeast",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#GamesAchievementSetStepsAtLeast`."
        },
        "steps": {
          "format": "int32",
          "description": "The minimum number of steps for the achievement to be set to.",
          "type": "integer"
        }
      },
      "description": "The payload to request to increment an\nachievement.",
      "type": "object"
    },
    "PlayerLevel": {
      "properties": {
        "minExperiencePoints": {
          "type": "string",
          "format": "int64",
          "description": "The minimum experience points for this level."
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "description": "The level for the user."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLevel`.",
          "type": "string"
        },
        "maxExperiencePoints": {
          "format": "int64",
          "description": "The maximum experience points for this level.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "1P/3P metadata about a user's level.",
      "id": "PlayerLevel"
    },
    "PlayerScore": {
      "id": "PlayerScore",
      "properties": {
        "score": {
          "type": "string",
          "format": "int64",
          "description": "The numerical value for this player score."
        },
        "formattedScore": {
          "type": "string",
          "description": "The formatted score for this player score."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScore`."
        },
        "timeSpan": {
          "description": "The time span for this player score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "type": "string"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        }
      },
      "description": "A player score.",
      "type": "object"
    },
    "Application": {
      "id": "Application",
      "description": "The Application resource.",
      "type": "object",
      "properties": {
        "leaderboard_count": {
          "type": "integer",
          "description": "The number of leaderboards visible to the currently authenticated player.",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "The ID of the application."
        },
        "name": {
          "type": "string",
          "description": "The name of the application."
        },
        "category": {
          "$ref": "ApplicationCategory",
          "description": "The category of the application."
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "Instance"
          },
          "description": "The instances of the application."
        },
        "description": {
          "type": "string",
          "description": "The description of the application."
        },
        "enabledFeatures": {
          "description": "A list of features that have been enabled for the application.",
          "type": "array",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Saved Games (snapshots)."
          ],
          "items": {
            "type": "string",
            "enum": [
              "APPLICATION_FEATURE_UNSPECIFIED",
              "SNAPSHOTS"
            ]
          }
        },
        "author": {
          "description": "The author of the application.",
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "description": "The last updated timestamp of the application.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#application`."
        },
        "themeColor": {
          "description": "A hint to the client UI for what color to use as an app-themed color. The\ncolor is given as an RGB triplet (e.g. \"E0E0E0\").",
          "type": "string"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "ImageAsset"
          },
          "description": "The assets of the application."
        },
        "achievement_count": {
          "description": "The number of achievements visible to the currently authenticated player.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "PlayerScoreResponse": {
      "type": "object",
      "id": "PlayerScoreResponse",
      "description": "A list of leaderboard entry resources.",
      "properties": {
        "beatenScoreTimeSpans": {
          "items": {
            "type": "string",
            "enum": [
              "SCORE_TIME_SPAN_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY",
              "DAILY"
            ]
          },
          "type": "array",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "description": "The time spans where the submitted score is better than the existing score\nfor that time span."
        },
        "unbeatenScores": {
          "description": "The scores in time spans that have not been beaten.  As an example, the\nsubmitted score may be better than the\nplayer's `DAILY` score, but not better than the player's scores\nfor the `WEEKLY` or `ALL_TIME` time spans.",
          "type": "array",
          "items": {
            "$ref": "PlayerScore"
          }
        },
        "formattedScore": {
          "description": "The formatted value of the submitted score.",
          "type": "string"
        },
        "leaderboardId": {
          "type": "string",
          "description": "The leaderboard ID that this score was submitted to."
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreResponse`."
        }
      }
    },
    "AchievementUpdateRequest": {
      "type": "object",
      "properties": {
        "achievementId": {
          "type": "string",
          "description": "The achievement this update is being applied to."
        },
        "updateType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked.",
            "Achievement is incremented.",
            "Achievement progress is set to at least the passed value."
          ],
          "type": "string",
          "description": "The type of update being applied.",
          "enum": [
            "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED",
            "REVEAL",
            "UNLOCK",
            "INCREMENT",
            "SET_STEPS_AT_LEAST"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateRequest`."
        },
        "setStepsAtLeastPayload": {
          "$ref": "GamesAchievementSetStepsAtLeast",
          "description": "The payload if an update of type `SET_STEPS_AT_LEAST` was\nrequested for the achievement."
        },
        "incrementPayload": {
          "$ref": "GamesAchievementIncrement",
          "description": "The payload if an update of type `INCREMENT` was requested for\nthe achievement."
        }
      },
      "id": "AchievementUpdateRequest",
      "description": "A request to update an achievement."
    },
    "PlayerAchievement": {
      "type": "object",
      "description": "An achievement object.",
      "properties": {
        "formattedCurrentStepsString": {
          "type": "string",
          "description": "The current steps for an incremental achievement as a string."
        },
        "achievementState": {
          "type": "string",
          "description": "The state of the achievement.",
          "enum": [
            "STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerAchievement`."
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "description": "The timestamp of the last modification to this achievement's state.",
          "type": "string"
        },
        "experiencePoints": {
          "type": "string",
          "description": "Experience points earned for the achievement. This field is absent for\nachievements that have not yet been unlocked and 0 for achievements that\nhave been unlocked by testers but that are unpublished.",
          "format": "int64"
        },
        "currentSteps": {
          "type": "integer",
          "description": "The current steps for an incremental achievement.",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "The ID of the achievement."
        }
      },
      "id": "PlayerAchievement"
    },
    "PlayerScoreListResponse": {
      "id": "PlayerScoreListResponse",
      "description": "A list of score submission statuses.",
      "type": "object",
      "properties": {
        "submittedScores": {
          "description": "The score submissions statuses.",
          "type": "array",
          "items": {
            "$ref": "PlayerScoreResponse"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreListResponse`."
        }
      }
    },
    "LeaderboardEntry": {
      "id": "LeaderboardEntry",
      "description": "The Leaderboard Entry resource.",
      "properties": {
        "scoreRank": {
          "description": "The rank of this score for this leaderboard.",
          "format": "int64",
          "type": "string"
        },
        "formattedScore": {
          "type": "string",
          "description": "The localized string for the numerical value of this score."
        },
        "player": {
          "$ref": "Player",
          "description": "The player who holds this score."
        },
        "writeTimestampMillis": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp at which this score was recorded, in milliseconds since the\nepoch in UTC."
        },
        "formattedScoreRank": {
          "type": "string",
          "description": "The localized string for the rank of this score for this leaderboard."
        },
        "timeSpan": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "type": "string",
          "description": "The time span of this high score.",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ]
        },
        "scoreTag": {
          "description": "Additional information about the score.  Values must contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "scoreValue": {
          "format": "int64",
          "description": "The numerical value of this score.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardEntry`."
        }
      },
      "type": "object"
    },
    "EventChild": {
      "type": "object",
      "properties": {
        "childId": {
          "type": "string",
          "description": "The ID of the child event."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventChild`."
        }
      },
      "description": "An event child relationship resource.",
      "id": "EventChild"
    },
    "Category": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#category`."
        },
        "category": {
          "description": "The category name.",
          "type": "string"
        },
        "experiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "Experience points earned in this category."
        }
      },
      "id": "Category",
      "type": "object",
      "description": "Data related to individual game categories."
    },
    "LeaderboardListResponse": {
      "description": "A list of leaderboard objects.",
      "id": "LeaderboardListResponse",
      "properties": {
        "items": {
          "description": "The leaderboards.",
          "type": "array",
          "items": {
            "$ref": "Leaderboard"
          }
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardListResponse`."
        }
      },
      "type": "object"
    },
    "AchievementUnlockResponse": {
      "description": "An achievement unlock response",
      "id": "AchievementUnlockResponse",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUnlockResponse`."
        },
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock\nrequest for the achievement was the first for the player).",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "StatsResponse": {
      "type": "object",
      "description": "A third party stats resource.",
      "properties": {
        "days_since_last_played": {
          "format": "int32",
          "description": "Number of days since the player last played this game. E.g., 0, 1, 5, 10,\n... . Not populated if there is not enough information.",
          "type": "integer"
        },
        "num_purchases": {
          "format": "int32",
          "description": "Number of in-app purchases made by the player in this game. E.g., 0, 1, 5,\n10, ... . Not populated if there is not enough information.",
          "type": "integer"
        },
        "num_sessions": {
          "type": "integer",
          "description": "The approximate number of sessions of the player within the last 28 days,\nwhere a session begins when the player is connected to Play Games Services\nand ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated\nif there is not enough information.",
          "format": "int32"
        },
        "spend_probability": {
          "type": "number",
          "format": "float",
          "description": "The probability of the player going to spend the game in the next seven\ndays. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough\ninformation."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#statsResponse`."
        },
        "num_sessions_percentile": {
          "description": "The approximation of the sessions percentile of the player within the last\n30 days, where a session begins when the player is connected to Play Games\nServices and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not\npopulated if there is not enough information.",
          "type": "number",
          "format": "float"
        },
        "avg_session_length_minutes": {
          "description": "Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not\npopulated if there is not enough information.",
          "format": "float",
          "type": "number"
        },
        "total_spend_next_28_days": {
          "format": "float",
          "type": "number",
          "description": "The predicted amount of money that the player going to spend in the next 28\ndays. E.g., 1, 30, 60, ... . Not populated if there is not enough\ninformation."
        },
        "spend_percentile": {
          "format": "float",
          "description": "The approximate spend percentile of the player in this game. E.g., 0, 0.25,\n0.5, 0.75. Not populated if there is not enough information.",
          "type": "number"
        },
        "high_spender_probability": {
          "format": "float",
          "description": "The probability of the player going to spend beyond a threshold amount of\nmoney. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough\ninformation.",
          "type": "number"
        },
        "churn_probability": {
          "description": "The probability of the player not returning to play the game in the next\nday. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough\ninformation.",
          "type": "number",
          "format": "float"
        }
      },
      "id": "StatsResponse"
    },
    "ApplicationCategory": {
      "id": "ApplicationCategory",
      "description": "An application category object.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#applicationCategory`."
        },
        "secondary": {
          "description": "The secondary category.",
          "type": "string"
        },
        "primary": {
          "description": "The primary category.",
          "type": "string"
        }
      }
    },
    "EventPeriodRange": {
      "id": "EventPeriodRange",
      "description": "An event period time range.",
      "properties": {
        "periodStartMillis": {
          "description": "The time when this update period begins, in millis, since 1970 UTC (Unix\nEpoch).",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventPeriodRange`."
        },
        "periodEndMillis": {
          "type": "string",
          "description": "The time when this update period ends, in millis, since 1970 UTC (Unix\nEpoch).",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "AchievementUpdateResponse": {
      "id": "AchievementUpdateResponse",
      "type": "object",
      "description": "An updated achievement.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateResponse`.",
          "type": "string"
        },
        "achievementId": {
          "description": "The achievement this update is was applied to.",
          "type": "string"
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock\nrequest for the achievement was the first for the player)."
        },
        "currentSteps": {
          "description": "The current steps recorded for this achievement if it is incremental.",
          "format": "int32",
          "type": "integer"
        },
        "updateOccurred": {
          "type": "boolean",
          "description": "Whether the requested updates actually affected the achievement."
        },
        "currentState": {
          "description": "The current state of the achievement.",
          "type": "string",
          "enum": [
            "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        }
      }
    },
    "AchievementRevealResponse": {
      "description": "An achievement reveal response",
      "id": "AchievementRevealResponse",
      "type": "object",
      "properties": {
        "currentState": {
          "type": "string",
          "description": "The current state of the achievement for which a reveal was attempted. This\nmight be `UNLOCKED` if the achievement was already unlocked.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "enum": [
            "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "REVEALED",
            "UNLOCKED"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementRevealResponse`."
        }
      }
    },
    "AchievementUpdateMultipleRequest": {
      "id": "AchievementUpdateMultipleRequest",
      "description": "A list of achievement update requests.",
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "description": "The individual achievement update requests.",
          "items": {
            "$ref": "AchievementUpdateRequest"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateMultipleRequest`."
        }
      }
    },
    "AchievementIncrementResponse": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementIncrementResponse`."
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of\nsteps required to unlock."
        },
        "currentSteps": {
          "description": "The current steps recorded for this incremental achievement.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "AchievementIncrementResponse",
      "description": "An achievement increment response",
      "type": "object"
    },
    "AchievementSetStepsAtLeastResponse": {
      "id": "AchievementSetStepsAtLeastResponse",
      "description": "An achievement set steps at least response.",
      "type": "object",
      "properties": {
        "currentSteps": {
          "format": "int32",
          "type": "integer",
          "description": "The current steps recorded for this incremental achievement."
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of\nsteps required to unlock."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementSetStepsAtLeastResponse`."
        }
      }
    },
    "AchievementDefinitionsListResponse": {
      "description": "A list of achievement definition objects.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementDefinitionsListResponse`.",
          "type": "string"
        },
        "items": {
          "description": "The achievement definitions.",
          "type": "array",
          "items": {
            "$ref": "AchievementDefinition"
          }
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      },
      "id": "AchievementDefinitionsListResponse",
      "type": "object"
    },
    "EventDefinitionListResponse": {
      "type": "object",
      "id": "EventDefinitionListResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventDefinitionListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The event definitions.",
          "items": {
            "$ref": "EventDefinition"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        }
      },
      "description": "A ListDefinitions response."
    },
    "ScoreSubmission": {
      "properties": {
        "leaderboardId": {
          "description": "The leaderboard this score is being submitted to.",
          "type": "string"
        },
        "scoreTag": {
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#scoreSubmission`.",
          "type": "string"
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "The new score being submitted."
        },
        "signature": {
          "type": "string",
          "description": "Signature Values will contain URI-safe characters as defined by section 2.3\nof RFC 3986."
        }
      },
      "description": "A request to submit a score to leaderboards.",
      "type": "object",
      "id": "ScoreSubmission"
    },
    "Player": {
      "properties": {
        "originalPlayerId": {
          "description": "The player ID that was used for this player the first time they signed into\nthe game in question. This is only populated for calls to player.get for\nthe requesting player, only if the player ID has subsequently changed, and\nonly to clients that support remapping player IDs.",
          "type": "string"
        },
        "experienceInfo": {
          "$ref": "PlayerExperienceInfo",
          "description": "An object to represent Play Game experience information for the player."
        },
        "bannerUrlLandscape": {
          "type": "string",
          "description": "The url to the landscape mode player banner image."
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the player."
        },
        "profileSettings": {
          "$ref": "ProfileSettings",
          "description": "The player's profile settings. Controls whether or not the player's profile\nis visible to other players."
        },
        "avatarImageUrl": {
          "type": "string",
          "description": "The base URL for the image that represents the player."
        },
        "friendStatus": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "There is no relationship between the players.",
            "The player and requester are friends."
          ],
          "description": "The friend status of the given player, relative to the requester. This is\nunset if the player is not sharing their friends list with the game.",
          "enum": [
            "FRIEND_STATUS_UNSPECIFIED",
            "NO_RELATIONSHIP",
            "FRIEND"
          ]
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#player`",
          "type": "string"
        },
        "title": {
          "description": "The player's title rewarded for their game activities.",
          "type": "string"
        },
        "bannerUrlPortrait": {
          "description": "The url to the portrait mode player banner image.",
          "type": "string"
        },
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "name": {
          "properties": {
            "givenName": {
              "type": "string",
              "description": "The given name of this player. In some places, this is known as the first\nname."
            },
            "familyName": {
              "type": "string",
              "description": "The family name of this player. In some places, this is known as the last\nname."
            }
          },
          "type": "object",
          "description": "A representation of the individual components of the name."
        }
      },
      "id": "Player",
      "type": "object",
      "description": "A Player resource."
    },
    "EventRecordRequest": {
      "properties": {
        "currentTimeMillis": {
          "format": "int64",
          "description": "The current time when this update was sent, in milliseconds, since 1970 UTC\n(Unix Epoch).",
          "type": "string"
        },
        "requestId": {
          "format": "int64",
          "type": "string",
          "description": "The request ID used to identify this attempt to record events."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventRecordRequest`."
        },
        "timePeriods": {
          "description": "A list of the time period updates being made in this request.",
          "type": "array",
          "items": {
            "$ref": "EventPeriodUpdate"
          }
        }
      },
      "description": "An event period update resource.",
      "type": "object",
      "id": "EventRecordRequest"
    },
    "SnapshotListResponse": {
      "id": "SnapshotListResponse",
      "description": "A third party list snapshots response.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshotListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results. If there are no more\nresults, the token is omitted.",
          "type": "string"
        },
        "items": {
          "description": "The snapshots.",
          "items": {
            "$ref": "Snapshot"
          },
          "type": "array"
        }
      }
    },
    "InstanceAndroidDetails": {
      "type": "object",
      "properties": {
        "enablePiracyCheck": {
          "description": "Flag indicating whether the anti-piracy check is enabled.",
          "type": "boolean"
        },
        "packageName": {
          "type": "string",
          "description": "Android package name which maps to Google Play URL."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceAndroidDetails`.",
          "type": "string"
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        }
      },
      "id": "InstanceAndroidDetails",
      "description": "The Android instance details resource."
    },
    "AchievementDefinition": {
      "description": "An achievement definition object.",
      "type": "object",
      "properties": {
        "initialState": {
          "type": "string",
          "enum": [
            "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "description": "The initial state of the achievement."
        },
        "experiencePoints": {
          "description": "Experience points which will be earned when unlocking this achievement.",
          "format": "int64",
          "type": "string"
        },
        "unlockedIconUrl": {
          "type": "string",
          "description": "The image URL for the unlocked achievement icon."
        },
        "name": {
          "type": "string",
          "description": "The name of the achievement."
        },
        "description": {
          "description": "The description of the achievement.",
          "type": "string"
        },
        "totalSteps": {
          "type": "integer",
          "description": "The total steps for an incremental achievement.",
          "format": "int32"
        },
        "isUnlockedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the unlocked icon image being returned is a default\nimage, or is game-provided."
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "revealedIconUrl": {
          "type": "string",
          "description": "The image URL for the revealed achievement icon."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementDefinition`."
        },
        "formattedTotalSteps": {
          "type": "string",
          "description": "The total steps for an incremental achievement as a string."
        },
        "achievementType": {
          "type": "string",
          "enum": [
            "ACHIEVEMENT_TYPE_UNSPECIFIED",
            "STANDARD",
            "INCREMENTAL"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is either locked or unlocked.",
            "Achievement is incremental."
          ],
          "description": "The type of the achievement."
        },
        "isRevealedIconUrlDefault": {
          "description": "Indicates whether the revealed icon image being returned is a default\nimage, or is provided by the game.",
          "type": "boolean"
        }
      },
      "id": "AchievementDefinition"
    },
    "Leaderboard": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the leaderboard."
        },
        "isIconUrlDefault": {
          "description": "Indicates whether the icon image being returned is a default image, or is\ngame-provided.",
          "type": "boolean"
        },
        "order": {
          "type": "string",
          "enum": [
            "SCORE_ORDER_UNSPECIFIED",
            "LARGER_IS_BETTER",
            "SMALLER_IS_BETTER"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Larger values are better; scores are sorted in descending order",
            "Smaller values are better; scores are sorted in ascending order"
          ],
          "description": "How scores are ordered."
        },
        "id": {
          "description": "The leaderboard ID.",
          "type": "string"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon for the leaderboard."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboard`.",
          "type": "string"
        }
      },
      "description": "The Leaderboard resource.",
      "id": "Leaderboard",
      "type": "object"
    },
    "EventUpdateResponse": {
      "id": "EventUpdateResponse",
      "properties": {
        "playerEvents": {
          "description": "The current status of any updated events",
          "type": "array",
          "items": {
            "$ref": "PlayerEvent"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventUpdateResponse`."
        },
        "eventFailures": {
          "items": {
            "$ref": "EventRecordFailure"
          },
          "type": "array",
          "description": "Any failures updating a particular event."
        },
        "batchFailures": {
          "type": "array",
          "description": "Any batch-wide failures which occurred applying updates.",
          "items": {
            "$ref": "EventBatchRecordFailure"
          }
        }
      },
      "type": "object",
      "description": "An event period update resource."
    },
    "EventPeriodUpdate": {
      "id": "EventPeriodUpdate",
      "properties": {
        "updates": {
          "description": "The updates being made for this time period.",
          "items": {
            "$ref": "EventUpdateRequest"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventPeriodUpdate`."
        },
        "timePeriod": {
          "description": "The time period being covered by this update.",
          "$ref": "EventPeriodRange"
        }
      },
      "type": "object",
      "description": "An event period update resource."
    },
    "RevisionCheckResponse": {
      "description": "A third party checking a revision response.",
      "properties": {
        "revisionStatus": {
          "enum": [
            "REVISION_STATUS_UNSPECIFIED",
            "OK",
            "DEPRECATED",
            "INVALID"
          ],
          "description": "The result of the revision check.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The revision being used is current.",
            "There is currently a newer version available, but the revision being used\nstill works.",
            "The revision being used is not supported in any released version."
          ],
          "type": "string"
        },
        "apiVersion": {
          "type": "string",
          "description": "The version of the API this client revision should use when calling API\nmethods."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#revisionCheckResponse`."
        }
      },
      "type": "object",
      "id": "RevisionCheckResponse"
    },
    "AchievementUpdateMultipleResponse": {
      "description": "Response message for UpdateMultipleAchievements rpc.",
      "id": "AchievementUpdateMultipleResponse",
      "properties": {
        "updatedAchievements": {
          "type": "array",
          "items": {
            "$ref": "AchievementUpdateResponse"
          },
          "description": "The updated state of the achievements."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateMultipleResponse`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplicationVerifyResponse": {
      "properties": {
        "player_id": {
          "type": "string",
          "description": "The ID of the player that was issued the auth token used in this request."
        },
        "alternate_player_id": {
          "description": "An alternate ID that was once used for the player that was issued the auth\ntoken used in this request. (This field is not normally populated.)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#applicationVerifyResponse`."
        }
      },
      "type": "object",
      "id": "ApplicationVerifyResponse",
      "description": "A third party application verification response resource."
    },
    "InstanceIosDetails": {
      "id": "InstanceIosDetails",
      "description": "The iOS details resource.",
      "type": "object",
      "properties": {
        "supportIpad": {
          "description": "Flag to indicate if this instance supports iPad.",
          "type": "boolean"
        },
        "bundleIdentifier": {
          "description": "Bundle identifier.",
          "type": "string"
        },
        "preferredForIpad": {
          "description": "Indicates that this instance is the default for new installations on iPad\ndevices.",
          "type": "boolean"
        },
        "preferredForIphone": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations on iPhone\ndevices."
        },
        "itunesAppId": {
          "description": "iTunes App ID.",
          "type": "string"
        },
        "supportIphone": {
          "description": "Flag to indicate if this instance supports iPhone.",
          "type": "boolean"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceIosDetails`.",
          "type": "string"
        }
      }
    },
    "ImageAsset": {
      "id": "ImageAsset",
      "description": "An image asset object.",
      "properties": {
        "name": {
          "description": "The name of the asset.",
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "The height of the asset."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#imageAsset`."
        },
        "url": {
          "type": "string",
          "description": "The URL of the asset."
        },
        "width": {
          "type": "integer",
          "description": "The width of the asset.",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PlayerAchievementListResponse": {
      "description": "A list of achievement objects.",
      "properties": {
        "items": {
          "description": "The achievements.",
          "items": {
            "$ref": "PlayerAchievement"
          },
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerAchievementListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        }
      },
      "id": "PlayerAchievementListResponse",
      "type": "object"
    },
    "EventBatchRecordFailure": {
      "description": "A batch update failure resource.",
      "id": "EventBatchRecordFailure",
      "properties": {
        "failureCause": {
          "enumDescriptions": [
            "Default value. Should not be used.",
            "A batch request was issued with more events than are allowed in\na single batch.",
            "A batch was sent with data too far in the past to record.",
            "A batch was sent with a time range that was too short.",
            "A batch was sent with a time range that was too long.",
            "An attempt was made to record a batch of data which was already seen.",
            "An attempt was made to record data faster than the server\nwill apply updates."
          ],
          "type": "string",
          "enum": [
            "EVENT_FAILURE_CAUSE_UNSPECIFIED",
            "TOO_LARGE",
            "TIME_PERIOD_EXPIRED",
            "TIME_PERIOD_SHORT",
            "TIME_PERIOD_LONG",
            "ALREADY_UPDATED",
            "RECORD_RATE_HIGH"
          ],
          "description": "The cause for the update failure."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventBatchRecordFailure`."
        },
        "range": {
          "description": "The time range which was rejected; empty for a request-wide failure.",
          "$ref": "EventPeriodRange"
        }
      },
      "type": "object"
    },
    "PlayerLeaderboardScoreListResponse": {
      "type": "object",
      "description": "A list of player leaderboard scores.",
      "properties": {
        "player": {
          "description": "The Player resources for the owner of this score.",
          "$ref": "Player"
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The leaderboard scores.",
          "items": {
            "$ref": "PlayerLeaderboardScore"
          },
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLeaderboardScoreListResponse`.",
          "type": "string"
        }
      },
      "id": "PlayerLeaderboardScoreListResponse"
    },
    "EventDefinition": {
      "properties": {
        "imageUrl": {
          "description": "The base URL for the image that represents the event.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventDefinition`.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of what this event represents."
        },
        "childEvents": {
          "type": "array",
          "items": {
            "$ref": "EventChild"
          },
          "description": "A list of events that are a child of this event."
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the event."
        },
        "isDefaultImageUrl": {
          "type": "boolean",
          "description": "Indicates whether the icon image being returned is a default image, or is\ngame-provided."
        },
        "visibility": {
          "enumDescriptions": [
            "Default value. Should not be used.",
            "This event should be visible to all users.",
            "This event should only be shown to users that have recorded this event\nat least once."
          ],
          "enum": [
            "EVENT_VISIBILITY_UNSPECIFIED",
            "REVEALED",
            "HIDDEN"
          ],
          "description": "The visibility of event being tracked in this definition.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the event.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An event definition resource.",
      "id": "EventDefinition"
    },
    "PlayerExperienceInfo": {
      "id": "PlayerExperienceInfo",
      "description": "1P/3P metadata about the player's experience.",
      "properties": {
        "nextLevel": {
          "description": "The next level of the player. If the current level is the maximum level,\nthis should be same as the current level.",
          "$ref": "PlayerLevel"
        },
        "lastLevelUpTimestampMillis": {
          "format": "int64",
          "type": "string",
          "description": "The timestamp when the player was leveled up, in millis since Unix epoch\nUTC."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerExperienceInfo`.",
          "type": "string"
        },
        "currentExperiencePoints": {
          "description": "The current number of experience points for the player.",
          "type": "string",
          "format": "int64"
        },
        "currentLevel": {
          "description": "The current level of the player.",
          "$ref": "PlayerLevel"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "canonicalName": "Games",
  "title": "Google Play Game Services",
  "name": "games",
  "rootUrl": "https://games.googleapis.com/",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://games.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/games": {
          "description": "Create, edit, and delete your Google Play Games activity"
        },
        "https://www.googleapis.com/auth/drive.appdata": {
          "description": "View and manage its own configuration data in your Google Drive"
        }
      }
    }
  },
  "parameters": {
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query"
    }
  },
  "version": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "ownerDomain": "google.com",
  "description": "The Google Play games service allows developers to enhance games with social leaderboards,\n    achievements, game state, sign-in with Google, and more.",
  "batchPath": "batch",
  "ownerName": "Google",
  "basePath": "",
  "id": "games:v1",
  "revision": "20200720"
}
