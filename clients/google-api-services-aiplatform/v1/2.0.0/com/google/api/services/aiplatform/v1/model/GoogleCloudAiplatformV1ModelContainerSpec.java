/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * Specification of a container for serving predictions. Some fields in this message correspond to
 * fields in the [Kubernetes Container v1 core
 * specification](https://kubernetes.io/docs/reference/generated/kubernetes-
 * api/v1.23/#container-v1-core).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1ModelContainerSpec extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. Specifies arguments for the command that runs when the container starts. This
   * overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd).
   * Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s
   * "default parameters" form. If you don't specify this field but do specify the command field,
   * then the command from the `command` field runs without any additional arguments. See the
   * [Kubernetes documentation about how the `command` and `args` fields interact with a container's
   * `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-
   * command-argument-container/#notes). If you don't specify this field and don't specify the
   * `command` field, then the container's
   * [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what
   * runs based on their default behavior. See the Docker documentation about [how `CMD` and
   * `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-
   * and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex
   * AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-
   * variables) and environment variables set in the env field. You cannot reference environment
   * variables set in the Docker image. In order for environment variables to be expanded, reference
   * them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable
   * expansion, which does not use parentheses. If a variable cannot be resolved, the reference in
   * the input string is used unchanged. To avoid variable expansion, you can escape this syntax
   * with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the
   * Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> args;

  /**
   * Immutable. Specifies the command that runs when the container starts. This overrides the
   * container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify
   * this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec"
   * form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT`
   * runs, in conjunction with the args field or the container's
   * [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field
   * is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker
   * documentation about [how `CMD` and `ENTRYPOINT`
   * interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-
   * interact). If you specify this field, then you can also specify the `args` field to provide
   * additional arguments for this command. However, if you specify this field, then the container's
   * `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields
   * interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-
   * data-application/define-command-argument-container/#notes). In this field, you can reference
   * [environment variables set by Vertex AI](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set
   * in the env field. You cannot reference environment variables set in the Docker image. In order
   * for environment variables to be expanded, reference them by using the following syntax: $(
   * VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use
   * parentheses. If a variable cannot be resolved, the reference in the input string is used
   * unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example:
   * $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers
   * [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> command;

  /**
   * Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deploymentTimeout;

  /**
   * Immutable. List of environment variables to set in the container. After the container starts
   * running, code running in the container can read these environment variables. Additionally, the
   * command and args fields can reference these variables. Later entries in this list can also
   * reference earlier entries. For example, the following example sets the variable `VAR_2` to have
   * the value `foo bar`: ```json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value":
   * "$(VAR_1) bar" } ] ``` If you switch the order of the variables in the example, then the
   * expansion does not occur. This field corresponds to the `env` field of the Kubernetes
   * Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1EnvVar> env;

  static {
    // hack to force ProGuard to consider GoogleCloudAiplatformV1EnvVar used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudAiplatformV1EnvVar.class);
  }

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests
   * that it receives to the first port on this list. Vertex AI also sends liveness and health
   * checks to this port. If you do not specify this field, gRPC requests to the container will be
   * disabled. Vertex AI does not use ports other than the first one listed. This field corresponds
   * to the `ports` field of the Kubernetes Containers v1 core API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1Port> grpcPorts;

  /**
   * Immutable. Specification for Kubernetes readiness probe.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1Probe healthProbe;

  /**
   * Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends
   * GET requests to this path on the container's IP address and port to check that the container is
   * healthy. Read more about [health checks](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#health). For example, if you set this field
   * to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of
   * your container specified by the first value of this `ModelContainerSpec`'s ports field. If you
   * don't specify this field, it defaults to the following value when you deploy this Model to an
   * Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in
   * this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String healthRoute;

  /**
   * Required. Immutable. URI of the Docker image to be used as the custom container for serving
   * predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn
   * more about the [container publishing requirements](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#publishing), including permissions
   * requirements for the Vertex AI Service Agent. The container image is ingested upon
   * ModelService.UploadModel, stored internally, and this original path is afterwards not used. To
   * learn about the requirements for the Docker image itself, see [Custom container
   * requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#). You can use the URI to one of Vertex AI's [pre-built container images for
   * prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageUri;

  /**
   * Immutable. Specification for Kubernetes liveness probe.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1Probe livenessProbe;

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests
   * that it receives to the first port on this list. Vertex AI also sends [liveness and health
   * checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#liveness) to this port. If you do not specify this field, it defaults to following
   * value: ```json [ { "containerPort": 8080 } ] ``` Vertex AI does not use ports other than the
   * first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1
   * core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1Port> ports;

  /**
   * Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards
   * requests sent using projects.locations.endpoints.predict to this path on the container's IP
   * address and port. Vertex AI then returns the container's response in the API response. For
   * example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it
   * forwards the request body in a POST request to the `/foo` path on the port of your container
   * specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify
   * this field, it defaults to the following value when you deploy this Model to an Endpoint:
   * /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are
   * replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String predictRoute;

  /**
   * Immutable. The amount of the VM memory to reserve as the shared memory for the model in
   * megabytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long sharedMemorySizeMb;

  /**
   * Immutable. Specification for Kubernetes startup probe.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1Probe startupProbe;

  /**
   * Immutable. Specifies arguments for the command that runs when the container starts. This
   * overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd).
   * Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s
   * "default parameters" form. If you don't specify this field but do specify the command field,
   * then the command from the `command` field runs without any additional arguments. See the
   * [Kubernetes documentation about how the `command` and `args` fields interact with a container's
   * `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-
   * command-argument-container/#notes). If you don't specify this field and don't specify the
   * `command` field, then the container's
   * [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what
   * runs based on their default behavior. See the Docker documentation about [how `CMD` and
   * `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-
   * and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex
   * AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-
   * variables) and environment variables set in the env field. You cannot reference environment
   * variables set in the Docker image. In order for environment variables to be expanded, reference
   * them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable
   * expansion, which does not use parentheses. If a variable cannot be resolved, the reference in
   * the input string is used unchanged. To avoid variable expansion, you can escape this syntax
   * with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the
   * Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArgs() {
    return args;
  }

  /**
   * Immutable. Specifies arguments for the command that runs when the container starts. This
   * overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd).
   * Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s
   * "default parameters" form. If you don't specify this field but do specify the command field,
   * then the command from the `command` field runs without any additional arguments. See the
   * [Kubernetes documentation about how the `command` and `args` fields interact with a container's
   * `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-
   * command-argument-container/#notes). If you don't specify this field and don't specify the
   * `command` field, then the container's
   * [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what
   * runs based on their default behavior. See the Docker documentation about [how `CMD` and
   * `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-
   * and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex
   * AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-
   * variables) and environment variables set in the env field. You cannot reference environment
   * variables set in the Docker image. In order for environment variables to be expanded, reference
   * them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable
   * expansion, which does not use parentheses. If a variable cannot be resolved, the reference in
   * the input string is used unchanged. To avoid variable expansion, you can escape this syntax
   * with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the
   * Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @param args args or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setArgs(java.util.List<java.lang.String> args) {
    this.args = args;
    return this;
  }

  /**
   * Immutable. Specifies the command that runs when the container starts. This overrides the
   * container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify
   * this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec"
   * form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT`
   * runs, in conjunction with the args field or the container's
   * [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field
   * is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker
   * documentation about [how `CMD` and `ENTRYPOINT`
   * interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-
   * interact). If you specify this field, then you can also specify the `args` field to provide
   * additional arguments for this command. However, if you specify this field, then the container's
   * `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields
   * interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-
   * data-application/define-command-argument-container/#notes). In this field, you can reference
   * [environment variables set by Vertex AI](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set
   * in the env field. You cannot reference environment variables set in the Docker image. In order
   * for environment variables to be expanded, reference them by using the following syntax: $(
   * VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use
   * parentheses. If a variable cannot be resolved, the reference in the input string is used
   * unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example:
   * $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers
   * [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommand() {
    return command;
  }

  /**
   * Immutable. Specifies the command that runs when the container starts. This overrides the
   * container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify
   * this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec"
   * form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT`
   * runs, in conjunction with the args field or the container's
   * [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field
   * is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker
   * documentation about [how `CMD` and `ENTRYPOINT`
   * interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-
   * interact). If you specify this field, then you can also specify the `args` field to provide
   * additional arguments for this command. However, if you specify this field, then the container's
   * `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields
   * interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-
   * data-application/define-command-argument-container/#notes). In this field, you can reference
   * [environment variables set by Vertex AI](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set
   * in the env field. You cannot reference environment variables set in the Docker image. In order
   * for environment variables to be expanded, reference them by using the following syntax: $(
   * VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use
   * parentheses. If a variable cannot be resolved, the reference in the input string is used
   * unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example:
   * $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers
   * [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @param command command or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setCommand(java.util.List<java.lang.String> command) {
    this.command = command;
    return this;
  }

  /**
   * Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.
   * @return value or {@code null} for none
   */
  public String getDeploymentTimeout() {
    return deploymentTimeout;
  }

  /**
   * Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.
   * @param deploymentTimeout deploymentTimeout or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setDeploymentTimeout(String deploymentTimeout) {
    this.deploymentTimeout = deploymentTimeout;
    return this;
  }

  /**
   * Immutable. List of environment variables to set in the container. After the container starts
   * running, code running in the container can read these environment variables. Additionally, the
   * command and args fields can reference these variables. Later entries in this list can also
   * reference earlier entries. For example, the following example sets the variable `VAR_2` to have
   * the value `foo bar`: ```json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value":
   * "$(VAR_1) bar" } ] ``` If you switch the order of the variables in the example, then the
   * expansion does not occur. This field corresponds to the `env` field of the Kubernetes
   * Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1EnvVar> getEnv() {
    return env;
  }

  /**
   * Immutable. List of environment variables to set in the container. After the container starts
   * running, code running in the container can read these environment variables. Additionally, the
   * command and args fields can reference these variables. Later entries in this list can also
   * reference earlier entries. For example, the following example sets the variable `VAR_2` to have
   * the value `foo bar`: ```json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value":
   * "$(VAR_1) bar" } ] ``` If you switch the order of the variables in the example, then the
   * expansion does not occur. This field corresponds to the `env` field of the Kubernetes
   * Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @param env env or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setEnv(java.util.List<GoogleCloudAiplatformV1EnvVar> env) {
    this.env = env;
    return this;
  }

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests
   * that it receives to the first port on this list. Vertex AI also sends liveness and health
   * checks to this port. If you do not specify this field, gRPC requests to the container will be
   * disabled. Vertex AI does not use ports other than the first one listed. This field corresponds
   * to the `ports` field of the Kubernetes Containers v1 core API.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1Port> getGrpcPorts() {
    return grpcPorts;
  }

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests
   * that it receives to the first port on this list. Vertex AI also sends liveness and health
   * checks to this port. If you do not specify this field, gRPC requests to the container will be
   * disabled. Vertex AI does not use ports other than the first one listed. This field corresponds
   * to the `ports` field of the Kubernetes Containers v1 core API.
   * @param grpcPorts grpcPorts or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setGrpcPorts(java.util.List<GoogleCloudAiplatformV1Port> grpcPorts) {
    this.grpcPorts = grpcPorts;
    return this;
  }

  /**
   * Immutable. Specification for Kubernetes readiness probe.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1Probe getHealthProbe() {
    return healthProbe;
  }

  /**
   * Immutable. Specification for Kubernetes readiness probe.
   * @param healthProbe healthProbe or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setHealthProbe(GoogleCloudAiplatformV1Probe healthProbe) {
    this.healthProbe = healthProbe;
    return this;
  }

  /**
   * Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends
   * GET requests to this path on the container's IP address and port to check that the container is
   * healthy. Read more about [health checks](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#health). For example, if you set this field
   * to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of
   * your container specified by the first value of this `ModelContainerSpec`'s ports field. If you
   * don't specify this field, it defaults to the following value when you deploy this Model to an
   * Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in
   * this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * @return value or {@code null} for none
   */
  public java.lang.String getHealthRoute() {
    return healthRoute;
  }

  /**
   * Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends
   * GET requests to this path on the container's IP address and port to check that the container is
   * healthy. Read more about [health checks](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#health). For example, if you set this field
   * to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of
   * your container specified by the first value of this `ModelContainerSpec`'s ports field. If you
   * don't specify this field, it defaults to the following value when you deploy this Model to an
   * Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in
   * this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * @param healthRoute healthRoute or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setHealthRoute(java.lang.String healthRoute) {
    this.healthRoute = healthRoute;
    return this;
  }

  /**
   * Required. Immutable. URI of the Docker image to be used as the custom container for serving
   * predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn
   * more about the [container publishing requirements](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#publishing), including permissions
   * requirements for the Vertex AI Service Agent. The container image is ingested upon
   * ModelService.UploadModel, stored internally, and this original path is afterwards not used. To
   * learn about the requirements for the Docker image itself, see [Custom container
   * requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#). You can use the URI to one of Vertex AI's [pre-built container images for
   * prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this
   * field.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageUri() {
    return imageUri;
  }

  /**
   * Required. Immutable. URI of the Docker image to be used as the custom container for serving
   * predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn
   * more about the [container publishing requirements](https://cloud.google.com/vertex-
   * ai/docs/predictions/custom-container-requirements#publishing), including permissions
   * requirements for the Vertex AI Service Agent. The container image is ingested upon
   * ModelService.UploadModel, stored internally, and this original path is afterwards not used. To
   * learn about the requirements for the Docker image itself, see [Custom container
   * requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#). You can use the URI to one of Vertex AI's [pre-built container images for
   * prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this
   * field.
   * @param imageUri imageUri or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setImageUri(java.lang.String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Immutable. Specification for Kubernetes liveness probe.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1Probe getLivenessProbe() {
    return livenessProbe;
  }

  /**
   * Immutable. Specification for Kubernetes liveness probe.
   * @param livenessProbe livenessProbe or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setLivenessProbe(GoogleCloudAiplatformV1Probe livenessProbe) {
    this.livenessProbe = livenessProbe;
    return this;
  }

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests
   * that it receives to the first port on this list. Vertex AI also sends [liveness and health
   * checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#liveness) to this port. If you do not specify this field, it defaults to following
   * value: ```json [ { "containerPort": 8080 } ] ``` Vertex AI does not use ports other than the
   * first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1
   * core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1Port> getPorts() {
    return ports;
  }

  /**
   * Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests
   * that it receives to the first port on this list. Vertex AI also sends [liveness and health
   * checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#liveness) to this port. If you do not specify this field, it defaults to following
   * value: ```json [ { "containerPort": 8080 } ] ``` Vertex AI does not use ports other than the
   * first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1
   * core API](https://kubernetes.io/docs/reference/generated/kubernetes-
   * api/v1.23/#container-v1-core).
   * @param ports ports or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setPorts(java.util.List<GoogleCloudAiplatformV1Port> ports) {
    this.ports = ports;
    return this;
  }

  /**
   * Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards
   * requests sent using projects.locations.endpoints.predict to this path on the container's IP
   * address and port. Vertex AI then returns the container's response in the API response. For
   * example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it
   * forwards the request body in a POST request to the `/foo` path on the port of your container
   * specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify
   * this field, it defaults to the following value when you deploy this Model to an Endpoint:
   * /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are
   * replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * @return value or {@code null} for none
   */
  public java.lang.String getPredictRoute() {
    return predictRoute;
  }

  /**
   * Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards
   * requests sent using projects.locations.endpoints.predict to this path on the container's IP
   * address and port. Vertex AI then returns the container's response in the API response. For
   * example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it
   * forwards the request body in a POST request to the `/foo` path on the port of your container
   * specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify
   * this field, it defaults to the following value when you deploy this Model to an Endpoint:
   * /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are
   * replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the
   * Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes
   * this value available to your container code as the [`AIP_ENDPOINT_ID` environment
   * variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
   * (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID`
   * environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-
   * requirements#aip-variables).)
   * @param predictRoute predictRoute or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setPredictRoute(java.lang.String predictRoute) {
    this.predictRoute = predictRoute;
    return this;
  }

  /**
   * Immutable. The amount of the VM memory to reserve as the shared memory for the model in
   * megabytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSharedMemorySizeMb() {
    return sharedMemorySizeMb;
  }

  /**
   * Immutable. The amount of the VM memory to reserve as the shared memory for the model in
   * megabytes.
   * @param sharedMemorySizeMb sharedMemorySizeMb or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setSharedMemorySizeMb(java.lang.Long sharedMemorySizeMb) {
    this.sharedMemorySizeMb = sharedMemorySizeMb;
    return this;
  }

  /**
   * Immutable. Specification for Kubernetes startup probe.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1Probe getStartupProbe() {
    return startupProbe;
  }

  /**
   * Immutable. Specification for Kubernetes startup probe.
   * @param startupProbe startupProbe or {@code null} for none
   */
  public GoogleCloudAiplatformV1ModelContainerSpec setStartupProbe(GoogleCloudAiplatformV1Probe startupProbe) {
    this.startupProbe = startupProbe;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1ModelContainerSpec set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1ModelContainerSpec) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1ModelContainerSpec clone() {
    return (GoogleCloudAiplatformV1ModelContainerSpec) super.clone();
  }

}
