/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Device contact information.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo extends com.google.api.client.json.GenericJson {

  /**
   * Metadata for this device contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata deviceContactMetadata;

  /**
   * Output only. True if any of the contact's phone, email or address fields can be used on devices
   * other than the one it originated from. Note that there can be other fields, typically name, and
   * metadata such as some of the raw_contact_infos that can be used on other devices. Assigned by
   * the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasCrossDeviceData;

  /**
   * Id of the device contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsPeopleOzExternalMergedpeopleapiDeviceContactId id;

  /**
   * Last time a device contact was updated on device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastClientUpdateTime;

  /**
   * An opaque value used by the device to look up this contact if its row id changed as a result of
   * a sync or aggregation. See: https://developer.android.com/reference/android/provider/ContactsCo
   * ntract.ContactsColumns.html#LOOKUP_KEY
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookupKey;

  /**
   * Info about the raw device contacts that make up this device contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo> rawContactInfo;

  /**
   * Metadata for this device contact.
   * @return value or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata getDeviceContactMetadata() {
    return deviceContactMetadata;
  }

  /**
   * Metadata for this device contact.
   * @param deviceContactMetadata deviceContactMetadata or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setDeviceContactMetadata(AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata deviceContactMetadata) {
    this.deviceContactMetadata = deviceContactMetadata;
    return this;
  }

  /**
   * Output only. True if any of the contact's phone, email or address fields can be used on devices
   * other than the one it originated from. Note that there can be other fields, typically name, and
   * metadata such as some of the raw_contact_infos that can be used on other devices. Assigned by
   * the server.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasCrossDeviceData() {
    return hasCrossDeviceData;
  }

  /**
   * Output only. True if any of the contact's phone, email or address fields can be used on devices
   * other than the one it originated from. Note that there can be other fields, typically name, and
   * metadata such as some of the raw_contact_infos that can be used on other devices. Assigned by
   * the server.
   * @param hasCrossDeviceData hasCrossDeviceData or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setHasCrossDeviceData(java.lang.Boolean hasCrossDeviceData) {
    this.hasCrossDeviceData = hasCrossDeviceData;
    return this;
  }

  /**
   * Id of the device contact.
   * @return value or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactId getId() {
    return id;
  }

  /**
   * Id of the device contact.
   * @param id id or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setId(AppsPeopleOzExternalMergedpeopleapiDeviceContactId id) {
    this.id = id;
    return this;
  }

  /**
   * Last time a device contact was updated on device.
   * @return value or {@code null} for none
   */
  public String getLastClientUpdateTime() {
    return lastClientUpdateTime;
  }

  /**
   * Last time a device contact was updated on device.
   * @param lastClientUpdateTime lastClientUpdateTime or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setLastClientUpdateTime(String lastClientUpdateTime) {
    this.lastClientUpdateTime = lastClientUpdateTime;
    return this;
  }

  /**
   * An opaque value used by the device to look up this contact if its row id changed as a result of
   * a sync or aggregation. See: https://developer.android.com/reference/android/provider/ContactsCo
   * ntract.ContactsColumns.html#LOOKUP_KEY
   * @return value or {@code null} for none
   */
  public java.lang.String getLookupKey() {
    return lookupKey;
  }

  /**
   * An opaque value used by the device to look up this contact if its row id changed as a result of
   * a sync or aggregation. See: https://developer.android.com/reference/android/provider/ContactsCo
   * ntract.ContactsColumns.html#LOOKUP_KEY
   * @param lookupKey lookupKey or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setLookupKey(java.lang.String lookupKey) {
    this.lookupKey = lookupKey;
    return this;
  }

  /**
   * Info about the raw device contacts that make up this device contact.
   * @return value or {@code null} for none
   */
  public java.util.List<AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo> getRawContactInfo() {
    return rawContactInfo;
  }

  /**
   * Info about the raw device contacts that make up this device contact.
   * @param rawContactInfo rawContactInfo or {@code null} for none
   */
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo setRawContactInfo(java.util.List<AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo> rawContactInfo) {
    this.rawContactInfo = rawContactInfo;
    return this;
  }

  @Override
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo set(String fieldName, Object value) {
    return (AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo) super.set(fieldName, value);
  }

  @Override
  public AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo clone() {
    return (AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo) super.clone();
  }

}
