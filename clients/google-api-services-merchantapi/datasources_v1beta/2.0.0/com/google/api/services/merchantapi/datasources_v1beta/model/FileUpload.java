/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.datasources_v1beta.model;

/**
 * The file upload of a specific data source, that is, the result of the retrieval of the data
 * source at a certain timestamp computed asynchronously when the data source processing is
 * finished. Only applicable to file data sources.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FileUpload extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The data source id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long dataSourceId;

  /**
   * Output only. The list of issues occurring in the data source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Issue> issues;

  /**
   * Output only. The number of items in the data source that were created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long itemsCreated;

  /**
   * Output only. The number of items in the data source that were processed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long itemsTotal;

  /**
   * Output only. The number of items in the data source that were updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long itemsUpdated;

  /**
   * Identifier. The name of the data source file upload. Format:
   * `{datasource.name=accounts/{account}/dataSources/{datasource}/fileUploads/{fileupload}}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The processing state of the data source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String processingState;

  /**
   * Output only. The date at which the file of the data source was uploaded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String uploadTime;

  /**
   * Output only. The data source id.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDataSourceId() {
    return dataSourceId;
  }

  /**
   * Output only. The data source id.
   * @param dataSourceId dataSourceId or {@code null} for none
   */
  public FileUpload setDataSourceId(java.lang.Long dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Output only. The list of issues occurring in the data source.
   * @return value or {@code null} for none
   */
  public java.util.List<Issue> getIssues() {
    return issues;
  }

  /**
   * Output only. The list of issues occurring in the data source.
   * @param issues issues or {@code null} for none
   */
  public FileUpload setIssues(java.util.List<Issue> issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Output only. The number of items in the data source that were created.
   * @return value or {@code null} for none
   */
  public java.lang.Long getItemsCreated() {
    return itemsCreated;
  }

  /**
   * Output only. The number of items in the data source that were created.
   * @param itemsCreated itemsCreated or {@code null} for none
   */
  public FileUpload setItemsCreated(java.lang.Long itemsCreated) {
    this.itemsCreated = itemsCreated;
    return this;
  }

  /**
   * Output only. The number of items in the data source that were processed.
   * @return value or {@code null} for none
   */
  public java.lang.Long getItemsTotal() {
    return itemsTotal;
  }

  /**
   * Output only. The number of items in the data source that were processed.
   * @param itemsTotal itemsTotal or {@code null} for none
   */
  public FileUpload setItemsTotal(java.lang.Long itemsTotal) {
    this.itemsTotal = itemsTotal;
    return this;
  }

  /**
   * Output only. The number of items in the data source that were updated.
   * @return value or {@code null} for none
   */
  public java.lang.Long getItemsUpdated() {
    return itemsUpdated;
  }

  /**
   * Output only. The number of items in the data source that were updated.
   * @param itemsUpdated itemsUpdated or {@code null} for none
   */
  public FileUpload setItemsUpdated(java.lang.Long itemsUpdated) {
    this.itemsUpdated = itemsUpdated;
    return this;
  }

  /**
   * Identifier. The name of the data source file upload. Format:
   * `{datasource.name=accounts/{account}/dataSources/{datasource}/fileUploads/{fileupload}}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name of the data source file upload. Format:
   * `{datasource.name=accounts/{account}/dataSources/{datasource}/fileUploads/{fileupload}}`
   * @param name name or {@code null} for none
   */
  public FileUpload setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The processing state of the data source.
   * @return value or {@code null} for none
   */
  public java.lang.String getProcessingState() {
    return processingState;
  }

  /**
   * Output only. The processing state of the data source.
   * @param processingState processingState or {@code null} for none
   */
  public FileUpload setProcessingState(java.lang.String processingState) {
    this.processingState = processingState;
    return this;
  }

  /**
   * Output only. The date at which the file of the data source was uploaded.
   * @return value or {@code null} for none
   */
  public String getUploadTime() {
    return uploadTime;
  }

  /**
   * Output only. The date at which the file of the data source was uploaded.
   * @param uploadTime uploadTime or {@code null} for none
   */
  public FileUpload setUploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  @Override
  public FileUpload set(String fieldName, Object value) {
    return (FileUpload) super.set(fieldName, value);
  }

  @Override
  public FileUpload clone() {
    return (FileUpload) super.clone();
  }

}
