{
  "name": "ondemandscanning",
  "version": "v1beta1",
  "servicePath": "",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "scans": {
              "resources": {
                "vulnerabilities": {
                  "methods": {
                    "list": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities",
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "The page token, resulting from a previous call to ListVulnerabilities."
                        },
                        "pageSize": {
                          "location": "query",
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of vulnerabilities to retrieve."
                        },
                        "parent": {
                          "type": "string",
                          "required": true,
                          "description": "Required. The parent of the collection of Vulnerabilities being requested. Format: projects/[project_name]/locations/[location]/scans/[scan_id]",
                          "pattern": "^projects/[^/]+/locations/[^/]+/scans/[^/]+$",
                          "location": "path"
                        }
                      },
                      "id": "ondemandscanning.projects.locations.scans.vulnerabilities.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+parent}/vulnerabilities",
                      "description": "Lists vulnerabilities resulting from a successfully completed scan.",
                      "response": {
                        "$ref": "ListVulnerabilitiesResponse"
                      },
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ]
                    }
                  }
                }
              },
              "methods": {
                "analyzePackages": {
                  "request": {
                    "$ref": "AnalyzePackagesRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "id": "ondemandscanning.projects.locations.scans.analyzePackages",
                  "path": "v1beta1/{+parent}/scans:analyzePackages",
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location]",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "description": "Initiates an analysis of the provided packages."
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "ondemandscanning.projects.locations.operations.get",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation resource.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "httpMethod": "GET"
                },
                "list": {
                  "parameters": {
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "filter": {
                      "location": "query",
                      "description": "The standard list filter.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
                  "path": "v1beta1/{+name}/operations",
                  "id": "ondemandscanning.projects.locations.operations.list",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "httpMethod": "GET"
                },
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1beta1/{+name}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "id": "ondemandscanning.projects.locations.operations.cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "description": "The name of the operation resource to be cancelled.",
                      "type": "string"
                    }
                  }
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+name}",
                  "id": "ondemandscanning.projects.locations.operations.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."
                },
                "wait": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "description": "The name of the operation resource to wait on.",
                      "required": true,
                      "location": "path"
                    },
                    "timeout": {
                      "format": "google-duration",
                      "description": "The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "id": "ondemandscanning.projects.locations.operations.wait",
                  "path": "v1beta1/{+name}:wait",
                  "httpMethod": "POST",
                  "description": "Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.",
                  "response": {
                    "$ref": "Operation"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "baseUrl": "https://ondemandscanning.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "parameters": {
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "location": "query",
      "description": "Data format for response."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "fullyEncodeReservedExpansion": true,
  "id": "ondemandscanning:v1beta1",
  "rootUrl": "https://ondemandscanning.googleapis.com/",
  "documentationLink": "https://cloud.google.com/container-analysis/docs/on-demand-scanning/",
  "description": "A service to scan container images for vulnerabilities.",
  "mtlsRootUrl": "https://ondemandscanning.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        }
      }
    }
  },
  "ownerName": "Google",
  "batchPath": "batch",
  "version_module": true,
  "revision": "20210329",
  "title": "On-Demand Scanning API",
  "schemas": {
    "Fingerprint": {
      "description": "A set of properties that uniquely identify a given Docker image.",
      "id": "Fingerprint",
      "properties": {
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.",
          "type": "string"
        },
        "v1Name": {
          "type": "string",
          "description": "Required. The layer ID of the final layer in the Docker image's v1 representation."
        },
        "v2Blob": {
          "description": "Required. The ordered list of v2 blobs that represent a given image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "UpgradeDistribution": {
      "type": "object",
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "id": "UpgradeDistribution",
      "properties": {
        "classification": {
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)",
          "type": "string"
        },
        "cve": {
          "description": "The cve tied to this Upgrade.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "severity": {
          "type": "string",
          "description": "The severity as specified by the upstream operating system."
        },
        "cpeUri": {
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
          "type": "string"
        }
      }
    },
    "PackageData": {
      "id": "PackageData",
      "type": "object",
      "properties": {
        "os": {
          "description": "The OS affected by a vulnerability This field is deprecated and the information is in cpe_uri",
          "type": "string"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.",
          "type": "string"
        },
        "osVersion": {
          "type": "string",
          "description": "The version of the OS This field is deprecated and the information is in cpe_uri"
        },
        "version": {
          "description": "The version of the package being analysed",
          "type": "string"
        },
        "package": {
          "type": "string",
          "description": "The package being analysed for vulnerabilities"
        }
      }
    },
    "RepoId": {
      "type": "object",
      "description": "A unique identifier for a Cloud Repo.",
      "properties": {
        "projectRepoId": {
          "$ref": "ProjectRepoId",
          "description": "A combination of a project ID and a repo name."
        },
        "uid": {
          "description": "A server-assigned, globally unique identifier.",
          "type": "string"
        }
      },
      "id": "RepoId"
    },
    "AnalyzePackagesMetadataV1": {
      "id": "AnalyzePackagesMetadataV1",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "When the scan was created."
        },
        "resourceUri": {
          "description": "The resource URI of the container image being scanned.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "AnalyzePackagesMetadata contains metadata for an active scan of a container image."
    },
    "BuildOccurrence": {
      "properties": {
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "Required. The actual provenance for the build."
        },
        "provenanceBytes": {
          "type": "string",
          "description": "Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes."
        }
      },
      "type": "object",
      "description": "Details of a build occurrence.",
      "id": "BuildOccurrence"
    },
    "FileHashes": {
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "Hash"
          },
          "type": "array",
          "description": "Required. Collection of file hashes."
        }
      },
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build."
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "AnalyzePackagesMetadata": {
      "description": "AnalyzePackagesMetadata contains metadata for an active scan of a container image.",
      "properties": {
        "createTime": {
          "description": "When the scan was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "resourceUri": {
          "description": "The resource URI of the container image being scanned.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AnalyzePackagesMetadata"
    },
    "AliasContext": {
      "description": "An alias to a repo revision.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The alias name."
        },
        "kind": {
          "description": "The alias kind.",
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ]
        }
      },
      "id": "AliasContext"
    },
    "Command": {
      "type": "object",
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline.",
      "properties": {
        "env": {
          "description": "Environment variables set before running this command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this command.",
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Command-line arguments used when executing this command."
        },
        "waitFor": {
          "type": "array",
          "description": "The ID(s) of the command(s) that this command depends on.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this command, used in wait_for to reference this command as a dependency."
        }
      }
    },
    "SourceContext": {
      "id": "SourceContext",
      "properties": {
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GitSourceContext"
        },
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo.",
          "$ref": "CloudRepoSourceContext"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels with user defined metadata."
        },
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GerritSourceContext"
        }
      },
      "type": "object",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory."
    },
    "CloudRepoSourceContext": {
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "type": "object",
      "id": "CloudRepoSourceContext",
      "properties": {
        "repoId": {
          "description": "The ID of the repo.",
          "$ref": "RepoId"
        },
        "aliasContext": {
          "$ref": "AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "revisionId": {
          "type": "string",
          "description": "A revision ID."
        }
      }
    },
    "Category": {
      "id": "Category",
      "description": "The category to which the update belongs.",
      "properties": {
        "name": {
          "description": "The localized name of the category.",
          "type": "string"
        },
        "categoryId": {
          "type": "string",
          "description": "The identifier of the category."
        }
      },
      "type": "object"
    },
    "VulnerabilityOccurrence": {
      "description": "An occurrence of a severity vulnerability on a resource.",
      "properties": {
        "longDescription": {
          "description": "Output only. A detailed description of this vulnerability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "Output only. A one sentence description of this vulnerability.",
          "type": "string"
        },
        "packageIssue": {
          "items": {
            "$ref": "PackageIssue"
          },
          "type": "array",
          "description": "Required. The set of affected locations and their fixes (if available) within the associated resource."
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float",
          "type": "number"
        },
        "effectiveSeverity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "description": "The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.)."
        },
        "relatedUrls": {
          "items": {
            "$ref": "RelatedUrl"
          },
          "type": "array",
          "description": "Output only. URLs related to this vulnerability."
        },
        "fixAvailable": {
          "type": "boolean",
          "description": "Output only. Whether at least one of the affected packages has a fix available."
        },
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "description": "Output only. The note provider assigned severity of this vulnerability."
        }
      },
      "type": "object",
      "id": "VulnerabilityOccurrence"
    },
    "Source": {
      "type": "object",
      "description": "Source describes the location of the source used for the build.",
      "properties": {
        "artifactStorageSourceUri": {
          "type": "string",
          "description": "If provided, the input binary artifacts for the build came from this location."
        },
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
          "type": "object"
        },
        "additionalContexts": {
          "type": "array",
          "items": {
            "$ref": "SourceContext"
          },
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field."
        },
        "context": {
          "description": "If provided, the source code used for the build came from this location.",
          "$ref": "SourceContext"
        }
      },
      "id": "Source"
    },
    "DiscoveryOccurrence": {
      "type": "object",
      "description": "Provides information about the analysis status of a discovered resource.",
      "id": "DiscoveryOccurrence",
      "properties": {
        "lastScanTime": {
          "description": "The last time this resource was scanned.",
          "type": "string",
          "format": "google-datetime"
        },
        "continuousAnalysis": {
          "enumDescriptions": [
            "Unknown.",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string",
          "description": "Whether the resource is continuously analyzed."
        },
        "cpe": {
          "type": "string",
          "description": "The CPE of the resource being scanned."
        },
        "analysisStatusError": {
          "$ref": "Status",
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API."
        },
        "analysisStatus": {
          "type": "string",
          "description": "The status of discovery for the resource.",
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported"
          ]
        }
      }
    },
    "ListOperationsResponse": {
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "id": "ListOperationsResponse",
      "type": "object",
      "description": "The response message for Operations.ListOperations."
    },
    "ListVulnerabilitiesResponse": {
      "description": "ListVulnerabilitiesResponse contains a single page of vulnerabilities resulting from a scan.",
      "id": "ListVulnerabilitiesResponse",
      "properties": {
        "occurrences": {
          "description": "The list of Vulnerability Occurrences resulting from a scan.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results."
        }
      },
      "type": "object"
    },
    "Layer": {
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "id": "Layer",
      "properties": {
        "directive": {
          "type": "string",
          "description": "Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information."
        },
        "arguments": {
          "type": "string",
          "description": "The recovered arguments to the Dockerfile directive."
        }
      },
      "type": "object"
    },
    "AttestationOccurrence": {
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.",
      "id": "AttestationOccurrence",
      "type": "object",
      "properties": {
        "jwts": {
          "description": "One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.",
          "type": "array",
          "items": {
            "$ref": "Jwt"
          }
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "Signature"
          },
          "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification."
        },
        "serializedPayload": {
          "type": "string",
          "format": "byte",
          "description": "Required. The serialized payload that is verified by one or more `signatures`."
        }
      }
    },
    "Identity": {
      "id": "Identity",
      "description": "The unique identifier of the update.",
      "type": "object",
      "properties": {
        "updateId": {
          "description": "The revision independent identifier of the update.",
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "description": "The revision number of the update.",
          "format": "int32"
        }
      }
    },
    "Version": {
      "type": "object",
      "description": "Version contains structured information about the version of a package.",
      "id": "Version",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required only when version kind is NORMAL. The main part of the version name."
        },
        "epoch": {
          "format": "int32",
          "type": "integer",
          "description": "Used to correct mistakes in the version numbering scheme."
        },
        "revision": {
          "type": "string",
          "description": "The iteration of the package build from the above version."
        },
        "inclusive": {
          "type": "boolean",
          "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range."
        },
        "kind": {
          "type": "string",
          "description": "Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
          "enumDescriptions": [
            "Unknown.",
            "A standard package version.",
            "A special version representing negative infinity.",
            "A special version representing positive infinity."
          ],
          "enum": [
            "VERSION_KIND_UNSPECIFIED",
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ]
        },
        "fullName": {
          "description": "Human readable version string. This string is of the form :- and is only set when kind is NORMAL.",
          "type": "string"
        }
      }
    },
    "UpgradeOccurrence": {
      "id": "UpgradeOccurrence",
      "type": "object",
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.",
      "properties": {
        "parsedVersion": {
          "$ref": "Version",
          "description": "Required for non-Windows OS. The version of the package in a machine + human readable form."
        },
        "package": {
          "description": "Required for non-Windows OS. The package this Upgrade is for.",
          "type": "string"
        },
        "distribution": {
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.",
          "$ref": "UpgradeDistribution"
        },
        "windowsUpdate": {
          "description": "Required for Windows OS. Represents the metadata about the Windows update.",
          "$ref": "WindowsUpdate"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "Hash": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The type of hash that was performed, e.g. \"SHA-256\"."
        },
        "value": {
          "description": "Required. The hash value.",
          "format": "byte",
          "type": "string"
        }
      },
      "description": "Container message for hash values.",
      "id": "Hash",
      "type": "object"
    },
    "AnalyzePackagesRequest": {
      "type": "object",
      "properties": {
        "packages": {
          "items": {
            "$ref": "PackageData"
          },
          "description": "The packages to analyze.",
          "type": "array"
        },
        "resourceUri": {
          "type": "string",
          "description": "Required. The resource URI of the container image being scanned."
        }
      },
      "id": "AnalyzePackagesRequest",
      "description": "AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it."
    },
    "AnalyzePackagesResponse": {
      "type": "object",
      "description": "AnalyzePackagesResponse contains the information necessary to find results for the given scan.",
      "properties": {
        "scan": {
          "type": "string",
          "description": "The name of the scan resource created by this successful scan."
        }
      },
      "id": "AnalyzePackagesResponse"
    },
    "Location": {
      "id": "Location",
      "properties": {
        "version": {
          "description": "The version installed at this location.",
          "$ref": "Version"
        },
        "path": {
          "description": "The path from which we gathered that this package/version is installed.",
          "type": "string"
        },
        "cpeUri": {
          "type": "string",
          "description": "Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        }
      },
      "description": "An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "GerritSourceContext": {
      "properties": {
        "aliasContext": {
          "$ref": "AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "revisionId": {
          "type": "string",
          "description": "A revision (commit) ID."
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
          "type": "string"
        },
        "hostUri": {
          "description": "The URI of a running Gerrit instance.",
          "type": "string"
        }
      },
      "description": "A SourceContext referring to a Gerrit project.",
      "id": "GerritSourceContext",
      "type": "object"
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label to describe usage of the URL."
        },
        "url": {
          "description": "Specific URL associated with the resource.",
          "type": "string"
        }
      },
      "description": "Metadata for any related URL information."
    },
    "GitSourceContext": {
      "type": "object",
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
      "properties": {
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        },
        "revisionId": {
          "type": "string",
          "description": "Git commit hash."
        }
      },
      "id": "GitSourceContext"
    },
    "BuildProvenance": {
      "type": "object",
      "properties": {
        "builtArtifacts": {
          "type": "array",
          "description": "Output of the build.",
          "items": {
            "$ref": "Artifact"
          }
        },
        "creator": {
          "type": "string",
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time at which the build was created."
        },
        "logsUri": {
          "description": "URI where any logs for this provenance were written.",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time at which execution of the build was started."
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time at which execution of the build was finished."
        },
        "id": {
          "description": "Required. Unique identifier of the build.",
          "type": "string"
        },
        "commands": {
          "items": {
            "$ref": "Command"
          },
          "type": "array",
          "description": "Commands requested by the build."
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "builderVersion": {
          "type": "string",
          "description": "Version string of the builder at the time this build was executed."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        },
        "triggerId": {
          "type": "string",
          "description": "Trigger identifier if the build was triggered automatically; empty if not."
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        }
      },
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
      "id": "BuildProvenance"
    },
    "Artifact": {
      "id": "Artifact",
      "description": "Artifact describes a build product.",
      "properties": {
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`."
        },
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image."
        }
      },
      "type": "object"
    },
    "AnalyzePackagesResponseV1": {
      "id": "AnalyzePackagesResponseV1",
      "type": "object",
      "description": "AnalyzePackagesResponse contains the information necessary to find results for the given scan.",
      "properties": {
        "scan": {
          "description": "The name of the scan resource created by this successful scan.",
          "type": "string"
        }
      }
    },
    "ImageOccurrence": {
      "properties": {
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "type": "array",
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer."
        },
        "distance": {
          "type": "integer",
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "format": "int32"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "Required. The fingerprint of the derived image."
        },
        "baseResourceUrl": {
          "description": "Output only. This contains the base image URL for the derived image occurrence.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ImageOccurrence",
      "description": "Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM ."
    },
    "Signature": {
      "id": "Signature",
      "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).",
      "properties": {
        "signature": {
          "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.",
          "type": "string",
          "format": "byte"
        },
        "publicKeyId": {
          "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectRepoId": {
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "id": "ProjectRepoId",
      "properties": {
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        },
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Jwt": {
      "type": "object",
      "id": "Jwt",
      "properties": {
        "compactJwt": {
          "description": "The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1",
          "type": "string"
        }
      }
    },
    "WindowsUpdate": {
      "description": "Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.",
      "type": "object",
      "id": "WindowsUpdate",
      "properties": {
        "categories": {
          "items": {
            "$ref": "Category"
          },
          "description": "The list of categories to which the update belongs.",
          "type": "array"
        },
        "title": {
          "type": "string",
          "description": "The localized title of the update."
        },
        "supportUrl": {
          "description": "The hyperlink to the support information for the update.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "The localized description of the update."
        },
        "kbArticleIds": {
          "description": "The Microsoft Knowledge Base article IDs that are associated with the update.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "identity": {
          "description": "Required - The unique identifier for the update.",
          "$ref": "Identity"
        },
        "lastPublishedTimestamp": {
          "type": "string",
          "format": "google-datetime",
          "description": "The last published timestamp of the update."
        }
      }
    },
    "DeploymentOccurrence": {
      "properties": {
        "undeployTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "End of the lifetime of this deployment."
        },
        "deployTime": {
          "type": "string",
          "description": "Required. Beginning of the lifetime of this deployment.",
          "format": "google-datetime"
        },
        "resourceUri": {
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "address": {
          "type": "string",
          "description": "Address of the runtime element hosting this deployment."
        },
        "userEmail": {
          "type": "string",
          "description": "Identity of the user that triggered this deployment."
        },
        "config": {
          "type": "string",
          "description": "Configuration used to create this deployment."
        },
        "platform": {
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Google Container Engine.",
            "Google App Engine: Flexible Environment.",
            "Custom user-defined platform."
          ],
          "type": "string",
          "description": "Platform hosting this deployment."
        }
      },
      "id": "DeploymentOccurrence",
      "description": "The period during which some deployable was active in a runtime.",
      "type": "object"
    },
    "Occurrence": {
      "description": "An instance of an analysis type that has been found on a resource.",
      "id": "Occurrence",
      "type": "object",
      "properties": {
        "attestation": {
          "description": "Describes an attestation of an artifact.",
          "$ref": "AttestationOccurrence"
        },
        "noteName": {
          "type": "string",
          "description": "Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests."
        },
        "vulnerability": {
          "description": "Describes a security vulnerability.",
          "$ref": "VulnerabilityOccurrence"
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the note.",
          "type": "string"
        },
        "package": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "PackageOccurrence"
        },
        "createTime": {
          "description": "Output only. The time this occurrence was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "name": {
          "description": "Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
          "type": "string"
        },
        "kind": {
          "description": "Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available package upgrade."
          ],
          "type": "string",
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "UPGRADE"
          ]
        },
        "image": {
          "$ref": "ImageOccurrence",
          "description": "Describes how this resource derives from the basis in the associated note."
        },
        "upgrade": {
          "$ref": "UpgradeOccurrence",
          "description": "Describes an available package upgrade on the linked resource."
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this occurrence was last updated."
        },
        "deployment": {
          "$ref": "DeploymentOccurrence",
          "description": "Describes the deployment of an artifact on a runtime."
        },
        "resourceUri": {
          "description": "Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.",
          "type": "string"
        },
        "build": {
          "$ref": "BuildOccurrence",
          "description": "Describes a verifiable build."
        },
        "discovery": {
          "$ref": "DiscoveryOccurrence",
          "description": "Describes when a resource was discovered."
        }
      }
    },
    "PackageOccurrence": {
      "type": "object",
      "properties": {
        "location": {
          "items": {
            "$ref": "Location"
          },
          "description": "Required. All of the places within the filesystem versions of this package have been found.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the installed package."
        }
      },
      "description": "Details on how a particular software package was installed on a system.",
      "id": "PackageOccurrence"
    },
    "PackageIssue": {
      "type": "object",
      "description": "A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).",
      "id": "PackageIssue",
      "properties": {
        "affectedPackage": {
          "description": "Required. The package this vulnerability was found in.",
          "type": "string"
        },
        "fixedCpeUri": {
          "type": "string",
          "description": "The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri."
        },
        "fixAvailable": {
          "type": "boolean",
          "description": "Output only. Whether a fix is available for this package."
        },
        "affectedVersion": {
          "description": "Required. The version of the package that is installed on the resource affected by this vulnerability.",
          "$ref": "Version"
        },
        "fixedVersion": {
          "$ref": "Version",
          "description": "Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available."
        },
        "fixedPackage": {
          "description": "The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.",
          "type": "string"
        },
        "affectedCpeUri": {
          "description": "Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.",
          "type": "string"
        }
      }
    }
  },
  "basePath": "",
  "ownerDomain": "google.com",
  "kind": "discovery#restDescription",
  "protocol": "rest",
  "discoveryVersion": "v1",
  "canonicalName": "On-Demand Scanning"
}
