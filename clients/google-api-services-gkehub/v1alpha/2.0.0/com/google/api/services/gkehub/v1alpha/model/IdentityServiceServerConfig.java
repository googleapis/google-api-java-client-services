/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1alpha.model;

/**
 * Server settings for the external LDAP server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IdentityServiceServerConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Contains a Base64 encoded, PEM formatted certificate authority certificate for the
   * LDAP server. This must be provided for the "ldaps" and "startTLS" connections.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificateAuthorityData;

  /**
   * Optional. Defines the connection type to communicate with the LDAP server. If `starttls` or
   * `ldaps` is specified, the certificate_authority_data should not be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectionType;

  /**
   * Required. Defines the hostname or IP of the LDAP server. Port is optional and will default to
   * 389, if unspecified. For example, "ldap.server.example" or "10.10.10.10:389".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String host;

  /**
   * Optional. Contains a Base64 encoded, PEM formatted certificate authority certificate for the
   * LDAP server. This must be provided for the "ldaps" and "startTLS" connections.
   * @see #decodeCertificateAuthorityData()
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificateAuthorityData() {
    return certificateAuthorityData;
  }

  /**
   * Optional. Contains a Base64 encoded, PEM formatted certificate authority certificate for the
   * LDAP server. This must be provided for the "ldaps" and "startTLS" connections.
   * @see #getCertificateAuthorityData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCertificateAuthorityData() {
    return com.google.api.client.util.Base64.decodeBase64(certificateAuthorityData);
  }

  /**
   * Optional. Contains a Base64 encoded, PEM formatted certificate authority certificate for the
   * LDAP server. This must be provided for the "ldaps" and "startTLS" connections.
   * @see #encodeCertificateAuthorityData()
   * @param certificateAuthorityData certificateAuthorityData or {@code null} for none
   */
  public IdentityServiceServerConfig setCertificateAuthorityData(java.lang.String certificateAuthorityData) {
    this.certificateAuthorityData = certificateAuthorityData;
    return this;
  }

  /**
   * Optional. Contains a Base64 encoded, PEM formatted certificate authority certificate for the
   * LDAP server. This must be provided for the "ldaps" and "startTLS" connections.
   * @see #setCertificateAuthorityData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public IdentityServiceServerConfig encodeCertificateAuthorityData(byte[] certificateAuthorityData) {
    this.certificateAuthorityData = com.google.api.client.util.Base64.encodeBase64URLSafeString(certificateAuthorityData);
    return this;
  }

  /**
   * Optional. Defines the connection type to communicate with the LDAP server. If `starttls` or
   * `ldaps` is specified, the certificate_authority_data should not be empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectionType() {
    return connectionType;
  }

  /**
   * Optional. Defines the connection type to communicate with the LDAP server. If `starttls` or
   * `ldaps` is specified, the certificate_authority_data should not be empty.
   * @param connectionType connectionType or {@code null} for none
   */
  public IdentityServiceServerConfig setConnectionType(java.lang.String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Required. Defines the hostname or IP of the LDAP server. Port is optional and will default to
   * 389, if unspecified. For example, "ldap.server.example" or "10.10.10.10:389".
   * @return value or {@code null} for none
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * Required. Defines the hostname or IP of the LDAP server. Port is optional and will default to
   * 389, if unspecified. For example, "ldap.server.example" or "10.10.10.10:389".
   * @param host host or {@code null} for none
   */
  public IdentityServiceServerConfig setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  @Override
  public IdentityServiceServerConfig set(String fieldName, Object value) {
    return (IdentityServiceServerConfig) super.set(fieldName, value);
  }

  @Override
  public IdentityServiceServerConfig clone() {
    return (IdentityServiceServerConfig) super.clone();
  }

}
