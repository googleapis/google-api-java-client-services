/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.ml.v1.model;

/**
 * Options for automatically scaling a model.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Machine Learning Engine. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudMlV1AutoScaling extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The minimum number of nodes to allocate for this model. These nodes are always up,
   * starting from the time the model is deployed. Therefore, the cost of operating this model will
   * be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is
   * the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if
   * no predictions are performed. There is additional cost for each prediction performed.
   *
   * Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will
   * automatically add nodes to handle the increased load as well as scale back as traffic drops,
   * always maintaining at least `min_nodes`. You will be charged for the time in which additional
   * nodes are used.
   *
   * If not specified, `min_nodes` defaults to 0, in which case, when traffic to a model stops (and
   * after a cool-down period), nodes will be shut down and no charges will be incurred until
   * traffic to the model resumes.
   *
   * You can set `min_nodes` when creating the model version, and you can also update `min_nodes`
   * for an existing version:
   *
   * update_body.json: {   'autoScaling': {     'minNodes': 5   } }
   *
   * HTTP request:
   *
   * PATCH
   * https://ml.googleapis.com/v1/{name=projects/models/versions}?update_mask=autoScaling.minNodes
   * -d @./update_body.json
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minNodes;

  /**
   * Optional. The minimum number of nodes to allocate for this model. These nodes are always up,
   * starting from the time the model is deployed. Therefore, the cost of operating this model will
   * be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is
   * the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if
   * no predictions are performed. There is additional cost for each prediction performed.
   *
   * Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will
   * automatically add nodes to handle the increased load as well as scale back as traffic drops,
   * always maintaining at least `min_nodes`. You will be charged for the time in which additional
   * nodes are used.
   *
   * If not specified, `min_nodes` defaults to 0, in which case, when traffic to a model stops (and
   * after a cool-down period), nodes will be shut down and no charges will be incurred until
   * traffic to the model resumes.
   *
   * You can set `min_nodes` when creating the model version, and you can also update `min_nodes`
   * for an existing version:
   *
   * update_body.json: {   'autoScaling': {     'minNodes': 5   } }
   *
   * HTTP request:
   *
   * PATCH
   * https://ml.googleapis.com/v1/{name=projects/models/versions}?update_mask=autoScaling.minNodes
   * -d @./update_body.json
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinNodes() {
    return minNodes;
  }

  /**
   * Optional. The minimum number of nodes to allocate for this model. These nodes are always up,
   * starting from the time the model is deployed. Therefore, the cost of operating this model will
   * be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is
   * the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if
   * no predictions are performed. There is additional cost for each prediction performed.
   *
   * Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will
   * automatically add nodes to handle the increased load as well as scale back as traffic drops,
   * always maintaining at least `min_nodes`. You will be charged for the time in which additional
   * nodes are used.
   *
   * If not specified, `min_nodes` defaults to 0, in which case, when traffic to a model stops (and
   * after a cool-down period), nodes will be shut down and no charges will be incurred until
   * traffic to the model resumes.
   *
   * You can set `min_nodes` when creating the model version, and you can also update `min_nodes`
   * for an existing version:
   *
   * update_body.json: {   'autoScaling': {     'minNodes': 5   } }
   *
   * HTTP request:
   *
   * PATCH
   * https://ml.googleapis.com/v1/{name=projects/models/versions}?update_mask=autoScaling.minNodes
   * -d @./update_body.json
   * @param minNodes minNodes or {@code null} for none
   */
  public GoogleCloudMlV1AutoScaling setMinNodes(java.lang.Integer minNodes) {
    this.minNodes = minNodes;
    return this;
  }

  @Override
  public GoogleCloudMlV1AutoScaling set(String fieldName, Object value) {
    return (GoogleCloudMlV1AutoScaling) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudMlV1AutoScaling clone() {
    return (GoogleCloudMlV1AutoScaling) super.clone();
  }

}
