/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Model definition for WidgetMarkup.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WidgetMarkup extends com.google.api.client.json.GenericJson {

  /**
   * buttons is also oneof data and only one of these fields should be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Button> buttons;

  static {
    // hack to force ProGuard to consider Button used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Button.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DateTimePicker dateTimePicker;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Divider divider;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Grid grid;

  /**
   * The horizontal alignment of this widget.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String horizontalAlignment;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Image image;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageKeyValue imageKeyValue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KeyValue keyValue;

  /**
   * Input Widgets
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Menu menu;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SelectionControl selectionControl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextField textField;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextKeyValue textKeyValue;

  /**
   * Read-only Widgets
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextParagraph textParagraph;

  /**
   * buttons is also oneof data and only one of these fields should be set.
   * @return value or {@code null} for none
   */
  public java.util.List<Button> getButtons() {
    return buttons;
  }

  /**
   * buttons is also oneof data and only one of these fields should be set.
   * @param buttons buttons or {@code null} for none
   */
  public WidgetMarkup setButtons(java.util.List<Button> buttons) {
    this.buttons = buttons;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public DateTimePicker getDateTimePicker() {
    return dateTimePicker;
  }

  /**
   * @param dateTimePicker dateTimePicker or {@code null} for none
   */
  public WidgetMarkup setDateTimePicker(DateTimePicker dateTimePicker) {
    this.dateTimePicker = dateTimePicker;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Divider getDivider() {
    return divider;
  }

  /**
   * @param divider divider or {@code null} for none
   */
  public WidgetMarkup setDivider(Divider divider) {
    this.divider = divider;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Grid getGrid() {
    return grid;
  }

  /**
   * @param grid grid or {@code null} for none
   */
  public WidgetMarkup setGrid(Grid grid) {
    this.grid = grid;
    return this;
  }

  /**
   * The horizontal alignment of this widget.
   * @return value or {@code null} for none
   */
  public java.lang.String getHorizontalAlignment() {
    return horizontalAlignment;
  }

  /**
   * The horizontal alignment of this widget.
   * @param horizontalAlignment horizontalAlignment or {@code null} for none
   */
  public WidgetMarkup setHorizontalAlignment(java.lang.String horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Image getImage() {
    return image;
  }

  /**
   * @param image image or {@code null} for none
   */
  public WidgetMarkup setImage(Image image) {
    this.image = image;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ImageKeyValue getImageKeyValue() {
    return imageKeyValue;
  }

  /**
   * @param imageKeyValue imageKeyValue or {@code null} for none
   */
  public WidgetMarkup setImageKeyValue(ImageKeyValue imageKeyValue) {
    this.imageKeyValue = imageKeyValue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KeyValue getKeyValue() {
    return keyValue;
  }

  /**
   * @param keyValue keyValue or {@code null} for none
   */
  public WidgetMarkup setKeyValue(KeyValue keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Input Widgets
   * @return value or {@code null} for none
   */
  public Menu getMenu() {
    return menu;
  }

  /**
   * Input Widgets
   * @param menu menu or {@code null} for none
   */
  public WidgetMarkup setMenu(Menu menu) {
    this.menu = menu;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SelectionControl getSelectionControl() {
    return selectionControl;
  }

  /**
   * @param selectionControl selectionControl or {@code null} for none
   */
  public WidgetMarkup setSelectionControl(SelectionControl selectionControl) {
    this.selectionControl = selectionControl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TextField getTextField() {
    return textField;
  }

  /**
   * @param textField textField or {@code null} for none
   */
  public WidgetMarkup setTextField(TextField textField) {
    this.textField = textField;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TextKeyValue getTextKeyValue() {
    return textKeyValue;
  }

  /**
   * @param textKeyValue textKeyValue or {@code null} for none
   */
  public WidgetMarkup setTextKeyValue(TextKeyValue textKeyValue) {
    this.textKeyValue = textKeyValue;
    return this;
  }

  /**
   * Read-only Widgets
   * @return value or {@code null} for none
   */
  public TextParagraph getTextParagraph() {
    return textParagraph;
  }

  /**
   * Read-only Widgets
   * @param textParagraph textParagraph or {@code null} for none
   */
  public WidgetMarkup setTextParagraph(TextParagraph textParagraph) {
    this.textParagraph = textParagraph;
    return this;
  }

  @Override
  public WidgetMarkup set(String fieldName, Object value) {
    return (WidgetMarkup) super.set(fieldName, value);
  }

  @Override
  public WidgetMarkup clone() {
    return (WidgetMarkup) super.clone();
  }

}
