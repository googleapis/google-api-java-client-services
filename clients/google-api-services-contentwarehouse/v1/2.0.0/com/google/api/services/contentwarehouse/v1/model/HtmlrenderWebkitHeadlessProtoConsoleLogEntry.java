/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * ConsoleLogEntry message stores messages logged by the renderer to the console. Typically error
 * messages related to JS execution, parsing, any CSS errors, etc are logged by the renderer to the
 * console. Next id: 7.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoConsoleLogEntry extends com.google.api.client.json.GenericJson {

  /**
   * Line number of the document which caused an error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lineNumber;

  /**
   * Message which indicates the nature of the error. e.g. parse error, reference error (happens
   * when javascript functions or variables are not resolvable) etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String message;

  /**
   * message level
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String messageLevel;

  /**
   * The url of the document which has the error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUrl;

  /**
   * Stack trace which functions were called when generating the console log. The first frame is the
   * innermost one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoScriptStackFrame> stackTrace;

  /**
   * Wall time (s) when the log entry was recorded
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double timestamp;

  /**
   * Line number of the document which caused an error.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLineNumber() {
    return lineNumber;
  }

  /**
   * Line number of the document which caused an error.
   * @param lineNumber lineNumber or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setLineNumber(java.lang.Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Message which indicates the nature of the error. e.g. parse error, reference error (happens
   * when javascript functions or variables are not resolvable) etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Message which indicates the nature of the error. e.g. parse error, reference error (happens
   * when javascript functions or variables are not resolvable) etc.
   * @param message message or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  /**
   * message level
   * @return value or {@code null} for none
   */
  public java.lang.String getMessageLevel() {
    return messageLevel;
  }

  /**
   * message level
   * @param messageLevel messageLevel or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setMessageLevel(java.lang.String messageLevel) {
    this.messageLevel = messageLevel;
    return this;
  }

  /**
   * The url of the document which has the error.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUrl() {
    return sourceUrl;
  }

  /**
   * The url of the document which has the error.
   * @param sourceUrl sourceUrl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setSourceUrl(java.lang.String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Stack trace which functions were called when generating the console log. The first frame is the
   * innermost one.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoScriptStackFrame> getStackTrace() {
    return stackTrace;
  }

  /**
   * Stack trace which functions were called when generating the console log. The first frame is the
   * innermost one.
   * @param stackTrace stackTrace or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setStackTrace(java.util.List<HtmlrenderWebkitHeadlessProtoScriptStackFrame> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  /**
   * Wall time (s) when the log entry was recorded
   * @return value or {@code null} for none
   */
  public java.lang.Double getTimestamp() {
    return timestamp;
  }

  /**
   * Wall time (s) when the log entry was recorded
   * @param timestamp timestamp or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry setTimestamp(java.lang.Double timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoConsoleLogEntry) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoConsoleLogEntry clone() {
    return (HtmlrenderWebkitHeadlessProtoConsoleLogEntry) super.clone();
  }

}
