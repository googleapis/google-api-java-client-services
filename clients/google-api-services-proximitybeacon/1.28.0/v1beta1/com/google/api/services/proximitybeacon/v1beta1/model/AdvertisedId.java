/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1.model;

/**
 * Defines a unique identifier of a beacon as broadcast by the device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Proximity Beacon API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AdvertisedId extends com.google.api.client.json.GenericJson {

  /**
   * The actual beacon identifier, as broadcast by the beacon hardware. Must be
   * [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so
   * encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream
   * and not any textual (such as hex) representation thereof. Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Specifies the identifier type. Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The actual beacon identifier, as broadcast by the beacon hardware. Must be
   * [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so
   * encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream
   * and not any textual (such as hex) representation thereof. Required.
   * @see #decodeId()
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The actual beacon identifier, as broadcast by the beacon hardware. Must be
   * [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so
   * encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream
   * and not any textual (such as hex) representation thereof. Required.
   * @see #getId()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeId() {
    return com.google.api.client.util.Base64.decodeBase64(id);
  }

  /**
   * The actual beacon identifier, as broadcast by the beacon hardware. Must be
   * [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so
   * encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream
   * and not any textual (such as hex) representation thereof. Required.
   * @see #encodeId()
   * @param id id or {@code null} for none
   */
  public AdvertisedId setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * The actual beacon identifier, as broadcast by the beacon hardware. Must be
   * [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so
   * encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream
   * and not any textual (such as hex) representation thereof. Required.
   * @see #setId()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public AdvertisedId encodeId(byte[] id) {
    this.id = com.google.api.client.util.Base64.encodeBase64URLSafeString(id);
    return this;
  }

  /**
   * Specifies the identifier type. Required.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Specifies the identifier type. Required.
   * @param type type or {@code null} for none
   */
  public AdvertisedId setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public AdvertisedId set(String fieldName, Object value) {
    return (AdvertisedId) super.set(fieldName, value);
  }

  @Override
  public AdvertisedId clone() {
    return (AdvertisedId) super.clone();
  }

}
