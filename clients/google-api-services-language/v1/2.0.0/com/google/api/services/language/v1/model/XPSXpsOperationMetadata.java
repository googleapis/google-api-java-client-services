/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1.model;

/**
 * Model definition for XPSXpsOperationMetadata.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSXpsOperationMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Optional. XPS server can opt to provide example count of the long running operation (e.g.
   * training, data importing, batch prediction).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long exampleCount;

  /**
   * Metrics for the operation. By the time the operation is terminated (whether succeeded or
   * failed) as returned from XPS, AutoML BE assumes the metrics are finalized. AutoML BE
   * transparently posts the metrics to Chemist if it's not empty, regardless of the response
   * content or error type. If user is supposed to be charged in case of cancellation/error, this
   * field should be set. In the case where the type of LRO doesn't require any billing, this field
   * should be left unset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSReportingMetrics reportingMetrics;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSTablesTrainingOperationMetadata tablesTrainingOperationMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSVideoBatchPredictOperationMetadata videoBatchPredictOperationMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSVideoTrainingOperationMetadata videoTrainingOperationMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSVisionTrainingOperationMetadata visionTrainingOperationMetadata;

  /**
   * Optional. XPS server can opt to provide example count of the long running operation (e.g.
   * training, data importing, batch prediction).
   * @return value or {@code null} for none
   */
  public java.lang.Long getExampleCount() {
    return exampleCount;
  }

  /**
   * Optional. XPS server can opt to provide example count of the long running operation (e.g.
   * training, data importing, batch prediction).
   * @param exampleCount exampleCount or {@code null} for none
   */
  public XPSXpsOperationMetadata setExampleCount(java.lang.Long exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  /**
   * Metrics for the operation. By the time the operation is terminated (whether succeeded or
   * failed) as returned from XPS, AutoML BE assumes the metrics are finalized. AutoML BE
   * transparently posts the metrics to Chemist if it's not empty, regardless of the response
   * content or error type. If user is supposed to be charged in case of cancellation/error, this
   * field should be set. In the case where the type of LRO doesn't require any billing, this field
   * should be left unset.
   * @return value or {@code null} for none
   */
  public XPSReportingMetrics getReportingMetrics() {
    return reportingMetrics;
  }

  /**
   * Metrics for the operation. By the time the operation is terminated (whether succeeded or
   * failed) as returned from XPS, AutoML BE assumes the metrics are finalized. AutoML BE
   * transparently posts the metrics to Chemist if it's not empty, regardless of the response
   * content or error type. If user is supposed to be charged in case of cancellation/error, this
   * field should be set. In the case where the type of LRO doesn't require any billing, this field
   * should be left unset.
   * @param reportingMetrics reportingMetrics or {@code null} for none
   */
  public XPSXpsOperationMetadata setReportingMetrics(XPSReportingMetrics reportingMetrics) {
    this.reportingMetrics = reportingMetrics;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public XPSTablesTrainingOperationMetadata getTablesTrainingOperationMetadata() {
    return tablesTrainingOperationMetadata;
  }

  /**
   * @param tablesTrainingOperationMetadata tablesTrainingOperationMetadata or {@code null} for none
   */
  public XPSXpsOperationMetadata setTablesTrainingOperationMetadata(XPSTablesTrainingOperationMetadata tablesTrainingOperationMetadata) {
    this.tablesTrainingOperationMetadata = tablesTrainingOperationMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public XPSVideoBatchPredictOperationMetadata getVideoBatchPredictOperationMetadata() {
    return videoBatchPredictOperationMetadata;
  }

  /**
   * @param videoBatchPredictOperationMetadata videoBatchPredictOperationMetadata or {@code null} for none
   */
  public XPSXpsOperationMetadata setVideoBatchPredictOperationMetadata(XPSVideoBatchPredictOperationMetadata videoBatchPredictOperationMetadata) {
    this.videoBatchPredictOperationMetadata = videoBatchPredictOperationMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public XPSVideoTrainingOperationMetadata getVideoTrainingOperationMetadata() {
    return videoTrainingOperationMetadata;
  }

  /**
   * @param videoTrainingOperationMetadata videoTrainingOperationMetadata or {@code null} for none
   */
  public XPSXpsOperationMetadata setVideoTrainingOperationMetadata(XPSVideoTrainingOperationMetadata videoTrainingOperationMetadata) {
    this.videoTrainingOperationMetadata = videoTrainingOperationMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public XPSVisionTrainingOperationMetadata getVisionTrainingOperationMetadata() {
    return visionTrainingOperationMetadata;
  }

  /**
   * @param visionTrainingOperationMetadata visionTrainingOperationMetadata or {@code null} for none
   */
  public XPSXpsOperationMetadata setVisionTrainingOperationMetadata(XPSVisionTrainingOperationMetadata visionTrainingOperationMetadata) {
    this.visionTrainingOperationMetadata = visionTrainingOperationMetadata;
    return this;
  }

  @Override
  public XPSXpsOperationMetadata set(String fieldName, Object value) {
    return (XPSXpsOperationMetadata) super.set(fieldName, value);
  }

  @Override
  public XPSXpsOperationMetadata clone() {
    return (XPSXpsOperationMetadata) super.clone();
  }

}
