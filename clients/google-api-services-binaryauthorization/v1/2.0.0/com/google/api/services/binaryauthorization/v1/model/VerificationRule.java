/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.binaryauthorization.v1.model;

/**
 * Specifies verification rules for evaluating the SLSA attestations including: which builders to
 * trust, where to fetch the SLSA attestations generated by those builders, and other builder-
 * specific evaluation rules such as which source repositories are trusted. An image is considered
 * verified by the rule if any of the fetched SLSA attestations is verified.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Binary Authorization API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VerificationRule extends com.google.api.client.json.GenericJson {

  /**
   * Specifies where to fetch the provenances attestations generated by the builder (group).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AttestationSource attestationSource;

  /**
   * If true, require the image to be built from a top-level configuration. trusted_source_repo
   * patterns specifies the repositories containing this configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean configBasedBuildRequired;

  /**
   * Each verification rule is used for evaluation against provenances generated by a specific
   * builder (group). For some of the builders, such as the Google Cloud Build, users don't need to
   * explicitly specify their roots of trust in the policy since the evaluation service can
   * automatically fetch them based on the builder (group).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String trustedBuilder;

  /**
   * List of trusted source code repository URL patterns. These patterns match the full repository
   * URL without its scheme (e.g. "https://"). The patterns must not include schemes. For example,
   * the pattern "source.cloud.google.com/my-project/my-repo-name" matches the following URLs: -
   * "source.cloud.google.com/my-project/my-repo-name" - "git+ssh://source.cloud.google.com/my-
   * project/my-repo-name" - "https://source.cloud.google.com/my-project/my-repo-name" A pattern
   * matches a URL either exactly or with * wildcards. * can be used in only two ways: 1. trailing *
   * after hosturi/ to match varying endings; 2. trailing ** after hosturi/ to match "/" as well. *
   * and ** can only be used as wildcards and can only occur at the end of the pattern after a /.
   * (So it's not possible to match a URL that contains literal *.) For example: - "github.com/my-
   * project/my-repo" is valid to match a single repo - "github.com/my-project" will match all
   * direct repos in my-project - "github.com*" matches all repos in GitHub
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> trustedSourceRepoPatterns;

  /**
   * Specifies where to fetch the provenances attestations generated by the builder (group).
   * @return value or {@code null} for none
   */
  public AttestationSource getAttestationSource() {
    return attestationSource;
  }

  /**
   * Specifies where to fetch the provenances attestations generated by the builder (group).
   * @param attestationSource attestationSource or {@code null} for none
   */
  public VerificationRule setAttestationSource(AttestationSource attestationSource) {
    this.attestationSource = attestationSource;
    return this;
  }

  /**
   * If true, require the image to be built from a top-level configuration. trusted_source_repo
   * patterns specifies the repositories containing this configuration.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getConfigBasedBuildRequired() {
    return configBasedBuildRequired;
  }

  /**
   * If true, require the image to be built from a top-level configuration. trusted_source_repo
   * patterns specifies the repositories containing this configuration.
   * @param configBasedBuildRequired configBasedBuildRequired or {@code null} for none
   */
  public VerificationRule setConfigBasedBuildRequired(java.lang.Boolean configBasedBuildRequired) {
    this.configBasedBuildRequired = configBasedBuildRequired;
    return this;
  }

  /**
   * Each verification rule is used for evaluation against provenances generated by a specific
   * builder (group). For some of the builders, such as the Google Cloud Build, users don't need to
   * explicitly specify their roots of trust in the policy since the evaluation service can
   * automatically fetch them based on the builder (group).
   * @return value or {@code null} for none
   */
  public java.lang.String getTrustedBuilder() {
    return trustedBuilder;
  }

  /**
   * Each verification rule is used for evaluation against provenances generated by a specific
   * builder (group). For some of the builders, such as the Google Cloud Build, users don't need to
   * explicitly specify their roots of trust in the policy since the evaluation service can
   * automatically fetch them based on the builder (group).
   * @param trustedBuilder trustedBuilder or {@code null} for none
   */
  public VerificationRule setTrustedBuilder(java.lang.String trustedBuilder) {
    this.trustedBuilder = trustedBuilder;
    return this;
  }

  /**
   * List of trusted source code repository URL patterns. These patterns match the full repository
   * URL without its scheme (e.g. "https://"). The patterns must not include schemes. For example,
   * the pattern "source.cloud.google.com/my-project/my-repo-name" matches the following URLs: -
   * "source.cloud.google.com/my-project/my-repo-name" - "git+ssh://source.cloud.google.com/my-
   * project/my-repo-name" - "https://source.cloud.google.com/my-project/my-repo-name" A pattern
   * matches a URL either exactly or with * wildcards. * can be used in only two ways: 1. trailing *
   * after hosturi/ to match varying endings; 2. trailing ** after hosturi/ to match "/" as well. *
   * and ** can only be used as wildcards and can only occur at the end of the pattern after a /.
   * (So it's not possible to match a URL that contains literal *.) For example: - "github.com/my-
   * project/my-repo" is valid to match a single repo - "github.com/my-project" will match all
   * direct repos in my-project - "github.com*" matches all repos in GitHub
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTrustedSourceRepoPatterns() {
    return trustedSourceRepoPatterns;
  }

  /**
   * List of trusted source code repository URL patterns. These patterns match the full repository
   * URL without its scheme (e.g. "https://"). The patterns must not include schemes. For example,
   * the pattern "source.cloud.google.com/my-project/my-repo-name" matches the following URLs: -
   * "source.cloud.google.com/my-project/my-repo-name" - "git+ssh://source.cloud.google.com/my-
   * project/my-repo-name" - "https://source.cloud.google.com/my-project/my-repo-name" A pattern
   * matches a URL either exactly or with * wildcards. * can be used in only two ways: 1. trailing *
   * after hosturi/ to match varying endings; 2. trailing ** after hosturi/ to match "/" as well. *
   * and ** can only be used as wildcards and can only occur at the end of the pattern after a /.
   * (So it's not possible to match a URL that contains literal *.) For example: - "github.com/my-
   * project/my-repo" is valid to match a single repo - "github.com/my-project" will match all
   * direct repos in my-project - "github.com*" matches all repos in GitHub
   * @param trustedSourceRepoPatterns trustedSourceRepoPatterns or {@code null} for none
   */
  public VerificationRule setTrustedSourceRepoPatterns(java.util.List<java.lang.String> trustedSourceRepoPatterns) {
    this.trustedSourceRepoPatterns = trustedSourceRepoPatterns;
    return this;
  }

  @Override
  public VerificationRule set(String fieldName, Object value) {
    return (VerificationRule) super.set(fieldName, value);
  }

  @Override
  public VerificationRule clone() {
    return (VerificationRule) super.clone();
  }

}
