/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for TelephoneNumber.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TelephoneNumber extends com.google.api.client.json.GenericJson {

  /**
   * The local "area code", if there is such a concept.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String areaCode;

  /**
   * The international direct dialing code for the country, as per ITU E.164:
   * http://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer countryCode;

  /**
   * Extension (to be dialed after connection).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String extension;

  /**
   * To call this number from within the same country, the national call prefix may be necessary.
   * This is 1 in the US, 0 in the UK, etc. In the US, it's reasonable to omit the leading 1 when
   * writing the number, but in other countries it is less optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nationalPrefix;

  /**
   * The actual number, broken down into sections as per local convention. Note that the actual
   * formatting of these sections (hyphen vs space, usage of parentheses) will vary according to
   * local custom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> number;

  /**
   * The local "area code", if there is such a concept.
   * @return value or {@code null} for none
   */
  public java.lang.String getAreaCode() {
    return areaCode;
  }

  /**
   * The local "area code", if there is such a concept.
   * @param areaCode areaCode or {@code null} for none
   */
  public TelephoneNumber setAreaCode(java.lang.String areaCode) {
    this.areaCode = areaCode;
    return this;
  }

  /**
   * The international direct dialing code for the country, as per ITU E.164:
   * http://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCountryCode() {
    return countryCode;
  }

  /**
   * The international direct dialing code for the country, as per ITU E.164:
   * http://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html
   * @param countryCode countryCode or {@code null} for none
   */
  public TelephoneNumber setCountryCode(java.lang.Integer countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Extension (to be dialed after connection).
   * @return value or {@code null} for none
   */
  public java.lang.String getExtension() {
    return extension;
  }

  /**
   * Extension (to be dialed after connection).
   * @param extension extension or {@code null} for none
   */
  public TelephoneNumber setExtension(java.lang.String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * To call this number from within the same country, the national call prefix may be necessary.
   * This is 1 in the US, 0 in the UK, etc. In the US, it's reasonable to omit the leading 1 when
   * writing the number, but in other countries it is less optional.
   * @return value or {@code null} for none
   */
  public java.lang.String getNationalPrefix() {
    return nationalPrefix;
  }

  /**
   * To call this number from within the same country, the national call prefix may be necessary.
   * This is 1 in the US, 0 in the UK, etc. In the US, it's reasonable to omit the leading 1 when
   * writing the number, but in other countries it is less optional.
   * @param nationalPrefix nationalPrefix or {@code null} for none
   */
  public TelephoneNumber setNationalPrefix(java.lang.String nationalPrefix) {
    this.nationalPrefix = nationalPrefix;
    return this;
  }

  /**
   * The actual number, broken down into sections as per local convention. Note that the actual
   * formatting of these sections (hyphen vs space, usage of parentheses) will vary according to
   * local custom.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNumber() {
    return number;
  }

  /**
   * The actual number, broken down into sections as per local convention. Note that the actual
   * formatting of these sections (hyphen vs space, usage of parentheses) will vary according to
   * local custom.
   * @param number number or {@code null} for none
   */
  public TelephoneNumber setNumber(java.util.List<java.lang.String> number) {
    this.number = number;
    return this;
  }

  @Override
  public TelephoneNumber set(String fieldName, Object value) {
    return (TelephoneNumber) super.set(fieldName, value);
  }

  @Override
  public TelephoneNumber clone() {
    return (TelephoneNumber) super.clone();
  }

}
