/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Internal state of the West & Chan running variance algorithm. Fields of this proto should not be
 * accessed directly; instead, please use RunningMeanAndVarianceUtil. The fields of this message
 * only have meaning in the context of the West & Chan algorithm, which is documented (or Wikipedia-
 * linked) in the doc comments of RunningMeanAndVarianceUtil. We do however give some explanation of
 * the meanings of these fields in the context of the algorithm (i.e. if you have the Wikipedia page
 * open and are ready to do some math). Also see the file doc of RunningMeanAndVarianceUtil for a
 * specification and more info about the algorithm. Notation: The data set is X = {(x_1, w_1), ...,
 * (x_n, w_n)}. It consists of n weighted data points. The ith data point has value x_i and weight
 * w_i. REQUIRES: x_i is finite for each i. w_i is finite for each i. w_i >= 0 for each i.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingSignalAggregatorRunningMeanAndVarianceInternalState extends com.google.api.client.json.GenericJson {

  /**
   * The variable which in the Wikipedia page is referred to as M_2: m2 = w_1 * (x_1 - mean)^2 + ...
   * + w_n * (x_n - mean)^2. The algorithm implemented in RunningMeanAndVarianceUtil provides a way
   * to update m2 in a numerically stable way when the data set grows. If total_weight = 0, then m2
   * is meaningless, and its value is unspecified, except that it must be finite and >= 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double m2;

  /**
   * Mean of the data set, mean = (w_1 * x_1 + ... + w_n * x_n) / total_weight. The algorithm
   * implemented in RunningMeanAndVarianceUtil provides a way to update this mean in a numerically
   * stable way when the data set grows. If total_weight = 0, then mean is meaningless, and its
   * value is unspecified, except that it must be finite.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double mean;

  /**
   * Total weight of the data set, total_weight = w_1 + ... + w_n.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double totalWeight;

  /**
   * The variable which in the Wikipedia page is referred to as M_2: m2 = w_1 * (x_1 - mean)^2 + ...
   * + w_n * (x_n - mean)^2. The algorithm implemented in RunningMeanAndVarianceUtil provides a way
   * to update m2 in a numerically stable way when the data set grows. If total_weight = 0, then m2
   * is meaningless, and its value is unspecified, except that it must be finite and >= 0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getM2() {
    return m2;
  }

  /**
   * The variable which in the Wikipedia page is referred to as M_2: m2 = w_1 * (x_1 - mean)^2 + ...
   * + w_n * (x_n - mean)^2. The algorithm implemented in RunningMeanAndVarianceUtil provides a way
   * to update m2 in a numerically stable way when the data set grows. If total_weight = 0, then m2
   * is meaningless, and its value is unspecified, except that it must be finite and >= 0.
   * @param m2 m2 or {@code null} for none
   */
  public IndexingSignalAggregatorRunningMeanAndVarianceInternalState setM2(java.lang.Double m2) {
    this.m2 = m2;
    return this;
  }

  /**
   * Mean of the data set, mean = (w_1 * x_1 + ... + w_n * x_n) / total_weight. The algorithm
   * implemented in RunningMeanAndVarianceUtil provides a way to update this mean in a numerically
   * stable way when the data set grows. If total_weight = 0, then mean is meaningless, and its
   * value is unspecified, except that it must be finite.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * Mean of the data set, mean = (w_1 * x_1 + ... + w_n * x_n) / total_weight. The algorithm
   * implemented in RunningMeanAndVarianceUtil provides a way to update this mean in a numerically
   * stable way when the data set grows. If total_weight = 0, then mean is meaningless, and its
   * value is unspecified, except that it must be finite.
   * @param mean mean or {@code null} for none
   */
  public IndexingSignalAggregatorRunningMeanAndVarianceInternalState setMean(java.lang.Double mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Total weight of the data set, total_weight = w_1 + ... + w_n.
   * @return value or {@code null} for none
   */
  public java.lang.Double getTotalWeight() {
    return totalWeight;
  }

  /**
   * Total weight of the data set, total_weight = w_1 + ... + w_n.
   * @param totalWeight totalWeight or {@code null} for none
   */
  public IndexingSignalAggregatorRunningMeanAndVarianceInternalState setTotalWeight(java.lang.Double totalWeight) {
    this.totalWeight = totalWeight;
    return this;
  }

  @Override
  public IndexingSignalAggregatorRunningMeanAndVarianceInternalState set(String fieldName, Object value) {
    return (IndexingSignalAggregatorRunningMeanAndVarianceInternalState) super.set(fieldName, value);
  }

  @Override
  public IndexingSignalAggregatorRunningMeanAndVarianceInternalState clone() {
    return (IndexingSignalAggregatorRunningMeanAndVarianceInternalState) super.clone();
  }

}
