/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1.model;

/**
 * Describes the X.509 name constraints extension, per
 * https://tools.ietf.org/html/rfc5280#section-4.2.1.10
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NameConstraints extends com.google.api.client.json.GenericJson {

  /**
   * Indicates whether or not the name constraints are marked critical.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean critical;

  /**
   * Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more
   * labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedDnsNames;

  /**
   * Contains the excluded email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedEmailAddresses;

  /**
   * Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedIpRanges;

  /**
   * Contains the excluded URIs that apply to the host part of the name. The value can be a hostname
   * or a domain with a leading period (like `.example.com`)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedUris;

  /**
   * Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or
   * more labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> permittedDnsNames;

  /**
   * Contains the permitted email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> permittedEmailAddresses;

  /**
   * Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> permittedIpRanges;

  /**
   * Contains the permitted URIs that apply to the host part of the name. The value can be a
   * hostname or a domain with a leading period (like `.example.com`)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> permittedUris;

  /**
   * Indicates whether or not the name constraints are marked critical.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCritical() {
    return critical;
  }

  /**
   * Indicates whether or not the name constraints are marked critical.
   * @param critical critical or {@code null} for none
   */
  public NameConstraints setCritical(java.lang.Boolean critical) {
    this.critical = critical;
    return this;
  }

  /**
   * Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more
   * labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedDnsNames() {
    return excludedDnsNames;
  }

  /**
   * Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more
   * labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * @param excludedDnsNames excludedDnsNames or {@code null} for none
   */
  public NameConstraints setExcludedDnsNames(java.util.List<java.lang.String> excludedDnsNames) {
    this.excludedDnsNames = excludedDnsNames;
    return this;
  }

  /**
   * Contains the excluded email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedEmailAddresses() {
    return excludedEmailAddresses;
  }

  /**
   * Contains the excluded email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * @param excludedEmailAddresses excludedEmailAddresses or {@code null} for none
   */
  public NameConstraints setExcludedEmailAddresses(java.util.List<java.lang.String> excludedEmailAddresses) {
    this.excludedEmailAddresses = excludedEmailAddresses;
    return this;
  }

  /**
   * Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedIpRanges() {
    return excludedIpRanges;
  }

  /**
   * Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * @param excludedIpRanges excludedIpRanges or {@code null} for none
   */
  public NameConstraints setExcludedIpRanges(java.util.List<java.lang.String> excludedIpRanges) {
    this.excludedIpRanges = excludedIpRanges;
    return this;
  }

  /**
   * Contains the excluded URIs that apply to the host part of the name. The value can be a hostname
   * or a domain with a leading period (like `.example.com`)
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedUris() {
    return excludedUris;
  }

  /**
   * Contains the excluded URIs that apply to the host part of the name. The value can be a hostname
   * or a domain with a leading period (like `.example.com`)
   * @param excludedUris excludedUris or {@code null} for none
   */
  public NameConstraints setExcludedUris(java.util.List<java.lang.String> excludedUris) {
    this.excludedUris = excludedUris;
    return this;
  }

  /**
   * Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or
   * more labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPermittedDnsNames() {
    return permittedDnsNames;
  }

  /**
   * Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or
   * more labels to the left-hand side of the name satisfies the name constraint. For example,
   * `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while
   * `example1.com` does not.
   * @param permittedDnsNames permittedDnsNames or {@code null} for none
   */
  public NameConstraints setPermittedDnsNames(java.util.List<java.lang.String> permittedDnsNames) {
    this.permittedDnsNames = permittedDnsNames;
    return this;
  }

  /**
   * Contains the permitted email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPermittedEmailAddresses() {
    return permittedEmailAddresses;
  }

  /**
   * Contains the permitted email addresses. The value can be a particular email address, a hostname
   * to indicate all email addresses on that host or a domain with a leading period (e.g.
   * `.example.com`) to indicate all email addresses in that domain.
   * @param permittedEmailAddresses permittedEmailAddresses or {@code null} for none
   */
  public NameConstraints setPermittedEmailAddresses(java.util.List<java.lang.String> permittedEmailAddresses) {
    this.permittedEmailAddresses = permittedEmailAddresses;
    return this;
  }

  /**
   * Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPermittedIpRanges() {
    return permittedIpRanges;
  }

  /**
   * Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR
   * notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar
   * encoding as IPv4 addresses.
   * @param permittedIpRanges permittedIpRanges or {@code null} for none
   */
  public NameConstraints setPermittedIpRanges(java.util.List<java.lang.String> permittedIpRanges) {
    this.permittedIpRanges = permittedIpRanges;
    return this;
  }

  /**
   * Contains the permitted URIs that apply to the host part of the name. The value can be a
   * hostname or a domain with a leading period (like `.example.com`)
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPermittedUris() {
    return permittedUris;
  }

  /**
   * Contains the permitted URIs that apply to the host part of the name. The value can be a
   * hostname or a domain with a leading period (like `.example.com`)
   * @param permittedUris permittedUris or {@code null} for none
   */
  public NameConstraints setPermittedUris(java.util.List<java.lang.String> permittedUris) {
    this.permittedUris = permittedUris;
    return this;
  }

  @Override
  public NameConstraints set(String fieldName, Object value) {
    return (NameConstraints) super.set(fieldName, value);
  }

  @Override
  public NameConstraints clone() {
    return (NameConstraints) super.clone();
  }

}
