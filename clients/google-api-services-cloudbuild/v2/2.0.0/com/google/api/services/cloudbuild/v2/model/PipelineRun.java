/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v2.model;

/**
 * Message describing PipelineRun object
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PipelineRun extends com.google.api.client.json.GenericJson {

  /**
   * User annotations. See https://google.aip.dev/128#annotations
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. List of TaskRun and Run names and PipelineTask names for children of this
   * PipelineRun.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ChildStatusReference> childReferences;

  static {
    // hack to force ProGuard to consider ChildStatusReference used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ChildStatusReference.class);
  }

  /**
   * Output only. Time the pipeline completed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String completionTime;

  /**
   * Output only. Kubernetes Conditions convention for PipelineRun status and error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsCloudbuildV2Condition> conditions;

  static {
    // hack to force ProGuard to consider GoogleDevtoolsCloudbuildV2Condition used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleDevtoolsCloudbuildV2Condition.class);
  }

  /**
   * Output only. Time at which the request to create the `PipelineRun` was received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Needed for declarative-friendly resources.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Output only. The `PipelineRun` name with format
   * `projects/{project}/locations/{location}/pipelineRuns/{pipeline_run}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Params is a list of parameter names and values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Param> params;

  static {
    // hack to force ProGuard to consider Param used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Param.class);
  }

  /**
   * PipelineRef refer to a specific instance of a Pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PipelineRef pipelineRef;

  /**
   * Status of the PipelineRun.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pipelineRunStatus;

  /**
   * PipelineSpec defines the desired state of Pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PipelineSpec pipelineSpec;

  /**
   * Output only. The exact PipelineSpec used to instantiate the run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PipelineSpec resolvedPipelineSpec;

  /**
   * Service account used in the Pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * Output only. List of tasks that were skipped due to when expressions evaluating to false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SkippedTask> skippedTasks;

  /**
   * Output only. Time the pipeline is actually started.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Time after which the Pipeline times out. Currently three keys are accepted in the map pipeline,
   * tasks and finally with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeoutFields timeouts;

  /**
   * Output only. A unique identifier for the `PipelineRun`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. Time at which the request to update the `PipelineRun` was received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The WorkerPool used to run this PipelineRun.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workerPool;

  /**
   * Output only. The Workflow used to create this PipelineRun.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workflow;

  /**
   * Workspaces is a list of WorkspaceBindings from volumes to workspaces.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<WorkspaceBinding> workspaces;

  /**
   * User annotations. See https://google.aip.dev/128#annotations
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * User annotations. See https://google.aip.dev/128#annotations
   * @param annotations annotations or {@code null} for none
   */
  public PipelineRun setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. List of TaskRun and Run names and PipelineTask names for children of this
   * PipelineRun.
   * @return value or {@code null} for none
   */
  public java.util.List<ChildStatusReference> getChildReferences() {
    return childReferences;
  }

  /**
   * Output only. List of TaskRun and Run names and PipelineTask names for children of this
   * PipelineRun.
   * @param childReferences childReferences or {@code null} for none
   */
  public PipelineRun setChildReferences(java.util.List<ChildStatusReference> childReferences) {
    this.childReferences = childReferences;
    return this;
  }

  /**
   * Output only. Time the pipeline completed.
   * @return value or {@code null} for none
   */
  public String getCompletionTime() {
    return completionTime;
  }

  /**
   * Output only. Time the pipeline completed.
   * @param completionTime completionTime or {@code null} for none
   */
  public PipelineRun setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Output only. Kubernetes Conditions convention for PipelineRun status and error.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsCloudbuildV2Condition> getConditions() {
    return conditions;
  }

  /**
   * Output only. Kubernetes Conditions convention for PipelineRun status and error.
   * @param conditions conditions or {@code null} for none
   */
  public PipelineRun setConditions(java.util.List<GoogleDevtoolsCloudbuildV2Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Output only. Time at which the request to create the `PipelineRun` was received.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Time at which the request to create the `PipelineRun` was received.
   * @param createTime createTime or {@code null} for none
   */
  public PipelineRun setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Needed for declarative-friendly resources.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Needed for declarative-friendly resources.
   * @param etag etag or {@code null} for none
   */
  public PipelineRun setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Output only. The `PipelineRun` name with format
   * `projects/{project}/locations/{location}/pipelineRuns/{pipeline_run}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The `PipelineRun` name with format
   * `projects/{project}/locations/{location}/pipelineRuns/{pipeline_run}`
   * @param name name or {@code null} for none
   */
  public PipelineRun setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Params is a list of parameter names and values.
   * @return value or {@code null} for none
   */
  public java.util.List<Param> getParams() {
    return params;
  }

  /**
   * Params is a list of parameter names and values.
   * @param params params or {@code null} for none
   */
  public PipelineRun setParams(java.util.List<Param> params) {
    this.params = params;
    return this;
  }

  /**
   * PipelineRef refer to a specific instance of a Pipeline.
   * @return value or {@code null} for none
   */
  public PipelineRef getPipelineRef() {
    return pipelineRef;
  }

  /**
   * PipelineRef refer to a specific instance of a Pipeline.
   * @param pipelineRef pipelineRef or {@code null} for none
   */
  public PipelineRun setPipelineRef(PipelineRef pipelineRef) {
    this.pipelineRef = pipelineRef;
    return this;
  }

  /**
   * Status of the PipelineRun.
   * @return value or {@code null} for none
   */
  public java.lang.String getPipelineRunStatus() {
    return pipelineRunStatus;
  }

  /**
   * Status of the PipelineRun.
   * @param pipelineRunStatus pipelineRunStatus or {@code null} for none
   */
  public PipelineRun setPipelineRunStatus(java.lang.String pipelineRunStatus) {
    this.pipelineRunStatus = pipelineRunStatus;
    return this;
  }

  /**
   * PipelineSpec defines the desired state of Pipeline.
   * @return value or {@code null} for none
   */
  public PipelineSpec getPipelineSpec() {
    return pipelineSpec;
  }

  /**
   * PipelineSpec defines the desired state of Pipeline.
   * @param pipelineSpec pipelineSpec or {@code null} for none
   */
  public PipelineRun setPipelineSpec(PipelineSpec pipelineSpec) {
    this.pipelineSpec = pipelineSpec;
    return this;
  }

  /**
   * Output only. The exact PipelineSpec used to instantiate the run.
   * @return value or {@code null} for none
   */
  public PipelineSpec getResolvedPipelineSpec() {
    return resolvedPipelineSpec;
  }

  /**
   * Output only. The exact PipelineSpec used to instantiate the run.
   * @param resolvedPipelineSpec resolvedPipelineSpec or {@code null} for none
   */
  public PipelineRun setResolvedPipelineSpec(PipelineSpec resolvedPipelineSpec) {
    this.resolvedPipelineSpec = resolvedPipelineSpec;
    return this;
  }

  /**
   * Service account used in the Pipeline.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * Service account used in the Pipeline.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public PipelineRun setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Output only. List of tasks that were skipped due to when expressions evaluating to false.
   * @return value or {@code null} for none
   */
  public java.util.List<SkippedTask> getSkippedTasks() {
    return skippedTasks;
  }

  /**
   * Output only. List of tasks that were skipped due to when expressions evaluating to false.
   * @param skippedTasks skippedTasks or {@code null} for none
   */
  public PipelineRun setSkippedTasks(java.util.List<SkippedTask> skippedTasks) {
    this.skippedTasks = skippedTasks;
    return this;
  }

  /**
   * Output only. Time the pipeline is actually started.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Output only. Time the pipeline is actually started.
   * @param startTime startTime or {@code null} for none
   */
  public PipelineRun setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time after which the Pipeline times out. Currently three keys are accepted in the map pipeline,
   * tasks and finally with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally
   * @return value or {@code null} for none
   */
  public TimeoutFields getTimeouts() {
    return timeouts;
  }

  /**
   * Time after which the Pipeline times out. Currently three keys are accepted in the map pipeline,
   * tasks and finally with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally
   * @param timeouts timeouts or {@code null} for none
   */
  public PipelineRun setTimeouts(TimeoutFields timeouts) {
    this.timeouts = timeouts;
    return this;
  }

  /**
   * Output only. A unique identifier for the `PipelineRun`.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. A unique identifier for the `PipelineRun`.
   * @param uid uid or {@code null} for none
   */
  public PipelineRun setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. Time at which the request to update the `PipelineRun` was received.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Time at which the request to update the `PipelineRun` was received.
   * @param updateTime updateTime or {@code null} for none
   */
  public PipelineRun setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The WorkerPool used to run this PipelineRun.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkerPool() {
    return workerPool;
  }

  /**
   * Output only. The WorkerPool used to run this PipelineRun.
   * @param workerPool workerPool or {@code null} for none
   */
  public PipelineRun setWorkerPool(java.lang.String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  /**
   * Output only. The Workflow used to create this PipelineRun.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkflow() {
    return workflow;
  }

  /**
   * Output only. The Workflow used to create this PipelineRun.
   * @param workflow workflow or {@code null} for none
   */
  public PipelineRun setWorkflow(java.lang.String workflow) {
    this.workflow = workflow;
    return this;
  }

  /**
   * Workspaces is a list of WorkspaceBindings from volumes to workspaces.
   * @return value or {@code null} for none
   */
  public java.util.List<WorkspaceBinding> getWorkspaces() {
    return workspaces;
  }

  /**
   * Workspaces is a list of WorkspaceBindings from volumes to workspaces.
   * @param workspaces workspaces or {@code null} for none
   */
  public PipelineRun setWorkspaces(java.util.List<WorkspaceBinding> workspaces) {
    this.workspaces = workspaces;
    return this;
  }

  @Override
  public PipelineRun set(String fieldName, Object value) {
    return (PipelineRun) super.set(fieldName, value);
  }

  @Override
  public PipelineRun clone() {
    return (PipelineRun) super.clone();
  }

}
