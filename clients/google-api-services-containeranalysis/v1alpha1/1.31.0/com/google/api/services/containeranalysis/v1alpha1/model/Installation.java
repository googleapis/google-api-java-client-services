/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1alpha1.model;

/**
 * This represents how a particular software package may be installed on a system.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Installation extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The CPU architecture for which packages in this distribution channel were built.
   * Architecture will be blank for language packages.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String architecture;

  /**
   * Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the
   * package manager version distributing a package. The cpe_uri will be blank for language
   * packages.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cpeUri;

  /**
   * Licenses that have been declared by the authors of the package.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private License license;

  /**
   * All of the places within the filesystem versions of this package have been found.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Location> location;

  /**
   * Output only. The name of the installed package.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The type of package; whether native or non native (e.g., ruby gems, node.js
   * packages, etc.).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageType;

  /**
   * Output only. The version of the package.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Version version;

  /**
   * Output only. The CPU architecture for which packages in this distribution channel were built.
   * Architecture will be blank for language packages.
   * @return value or {@code null} for none
   */
  public java.lang.String getArchitecture() {
    return architecture;
  }

  /**
   * Output only. The CPU architecture for which packages in this distribution channel were built.
   * Architecture will be blank for language packages.
   * @param architecture architecture or {@code null} for none
   */
  public Installation setArchitecture(java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the
   * package manager version distributing a package. The cpe_uri will be blank for language
   * packages.
   * @return value or {@code null} for none
   */
  public java.lang.String getCpeUri() {
    return cpeUri;
  }

  /**
   * Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the
   * package manager version distributing a package. The cpe_uri will be blank for language
   * packages.
   * @param cpeUri cpeUri or {@code null} for none
   */
  public Installation setCpeUri(java.lang.String cpeUri) {
    this.cpeUri = cpeUri;
    return this;
  }

  /**
   * Licenses that have been declared by the authors of the package.
   * @return value or {@code null} for none
   */
  public License getLicense() {
    return license;
  }

  /**
   * Licenses that have been declared by the authors of the package.
   * @param license license or {@code null} for none
   */
  public Installation setLicense(License license) {
    this.license = license;
    return this;
  }

  /**
   * All of the places within the filesystem versions of this package have been found.
   * @return value or {@code null} for none
   */
  public java.util.List<Location> getLocation() {
    return location;
  }

  /**
   * All of the places within the filesystem versions of this package have been found.
   * @param location location or {@code null} for none
   */
  public Installation setLocation(java.util.List<Location> location) {
    this.location = location;
    return this;
  }

  /**
   * Output only. The name of the installed package.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The name of the installed package.
   * @param name name or {@code null} for none
   */
  public Installation setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The type of package; whether native or non native (e.g., ruby gems, node.js
   * packages, etc.).
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageType() {
    return packageType;
  }

  /**
   * Output only. The type of package; whether native or non native (e.g., ruby gems, node.js
   * packages, etc.).
   * @param packageType packageType or {@code null} for none
   */
  public Installation setPackageType(java.lang.String packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * Output only. The version of the package.
   * @return value or {@code null} for none
   */
  public Version getVersion() {
    return version;
  }

  /**
   * Output only. The version of the package.
   * @param version version or {@code null} for none
   */
  public Installation setVersion(Version version) {
    this.version = version;
    return this;
  }

  @Override
  public Installation set(String fieldName, Object value) {
    return (Installation) super.set(fieldName, value);
  }

  @Override
  public Installation clone() {
    return (Installation) super.clone();
  }

}
