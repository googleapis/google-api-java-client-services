/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * The main conversion workspace resource entity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConversionWorkspace extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The timestamp when the workspace resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Required. The destination engine details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabaseEngineInfo destination;

  /**
   * The display name for the workspace
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * A generic list of settings for the workspace. The settings are database pair dependant and can
   * indicate default behavior for the mapping rules engine or turn on or off specific features.
   * Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false,
   * ignore_non_table_synonyms=true
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> globalSettings;

  /**
   * Output only. Whether the workspace has uncommitted changes (changes which were made after the
   * workspace was committed)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasUncommittedChanges;

  /**
   * Output only. The latest commit id
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String latestCommitId;

  /**
   * Output only. The timestamp when the workspace was committed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String latestCommitTime;

  /**
   * Full name of the workspace resource, in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. The source engine details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabaseEngineInfo source;

  /**
   * Output only. The timestamp when the workspace resource was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The timestamp when the workspace resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the workspace resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public ConversionWorkspace setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. The destination engine details.
   * @return value or {@code null} for none
   */
  public DatabaseEngineInfo getDestination() {
    return destination;
  }

  /**
   * Required. The destination engine details.
   * @param destination destination or {@code null} for none
   */
  public ConversionWorkspace setDestination(DatabaseEngineInfo destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The display name for the workspace
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name for the workspace
   * @param displayName displayName or {@code null} for none
   */
  public ConversionWorkspace setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A generic list of settings for the workspace. The settings are database pair dependant and can
   * indicate default behavior for the mapping rules engine or turn on or off specific features.
   * Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false,
   * ignore_non_table_synonyms=true
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getGlobalSettings() {
    return globalSettings;
  }

  /**
   * A generic list of settings for the workspace. The settings are database pair dependant and can
   * indicate default behavior for the mapping rules engine or turn on or off specific features.
   * Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false,
   * ignore_non_table_synonyms=true
   * @param globalSettings globalSettings or {@code null} for none
   */
  public ConversionWorkspace setGlobalSettings(java.util.Map<String, java.lang.String> globalSettings) {
    this.globalSettings = globalSettings;
    return this;
  }

  /**
   * Output only. Whether the workspace has uncommitted changes (changes which were made after the
   * workspace was committed)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasUncommittedChanges() {
    return hasUncommittedChanges;
  }

  /**
   * Output only. Whether the workspace has uncommitted changes (changes which were made after the
   * workspace was committed)
   * @param hasUncommittedChanges hasUncommittedChanges or {@code null} for none
   */
  public ConversionWorkspace setHasUncommittedChanges(java.lang.Boolean hasUncommittedChanges) {
    this.hasUncommittedChanges = hasUncommittedChanges;
    return this;
  }

  /**
   * Output only. The latest commit id
   * @return value or {@code null} for none
   */
  public java.lang.String getLatestCommitId() {
    return latestCommitId;
  }

  /**
   * Output only. The latest commit id
   * @param latestCommitId latestCommitId or {@code null} for none
   */
  public ConversionWorkspace setLatestCommitId(java.lang.String latestCommitId) {
    this.latestCommitId = latestCommitId;
    return this;
  }

  /**
   * Output only. The timestamp when the workspace was committed.
   * @return value or {@code null} for none
   */
  public String getLatestCommitTime() {
    return latestCommitTime;
  }

  /**
   * Output only. The timestamp when the workspace was committed.
   * @param latestCommitTime latestCommitTime or {@code null} for none
   */
  public ConversionWorkspace setLatestCommitTime(String latestCommitTime) {
    this.latestCommitTime = latestCommitTime;
    return this;
  }

  /**
   * Full name of the workspace resource, in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Full name of the workspace resource, in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   * @param name name or {@code null} for none
   */
  public ConversionWorkspace setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The source engine details.
   * @return value or {@code null} for none
   */
  public DatabaseEngineInfo getSource() {
    return source;
  }

  /**
   * Required. The source engine details.
   * @param source source or {@code null} for none
   */
  public ConversionWorkspace setSource(DatabaseEngineInfo source) {
    this.source = source;
    return this;
  }

  /**
   * Output only. The timestamp when the workspace resource was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the workspace resource was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public ConversionWorkspace setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public ConversionWorkspace set(String fieldName, Object value) {
    return (ConversionWorkspace) super.set(fieldName, value);
  }

  @Override
  public ConversionWorkspace clone() {
    return (ConversionWorkspace) super.clone();
  }

}
