/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1.model;

/**
 * `Distribution` contains summary statistics for a population of values. It optionally contains a
 * histogram representing the distribution of those values across a set of buckets. The summary
 * statistics are the count, mean, sum of the squared deviation from the mean, the minimum, and the
 * maximum of the set of population of values. The histogram is based on a sequence of buckets and
 * gives a count of values that fall into each bucket. The boundaries of the buckets are given
 * either explicitly or by formulas for buckets of fixed or exponentially increasing widths.
 * Although it is not forbidden, it is generally a bad idea to include non-finite values (infinities
 * or NaNs) in the population of values, as this will render the `mean` and
 * `sum_of_squared_deviation` fields meaningless.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleApiDistribution extends com.google.api.client.json.GenericJson {

  /**
   * The number of values in each bucket of the histogram, as described in `bucket_options`. If the
   * distribution does not have a histogram, then omit this field. If there is a histogram, then the
   * sum of the values in `bucket_counts` must equal the value in the `count` field of the
   * distribution. If present, `bucket_counts` should contain N values, where N is the number of
   * buckets specified in `bucket_options`. If you supply fewer than N values, the remaining values
   * are assumed to be 0. The order of the values in `bucket_counts` follows the bucket numbering
   * schemes described for the three bucket types. The first value must be the count for the
   * underflow bucket (number 0). The next N-2 values are the counts for the finite buckets (number
   * 1 through N-2). The N'th value in `bucket_counts` is the count for the overflow bucket (number
   * N-1).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> bucketCounts;

  /**
   * Defines the histogram bucket boundaries. If the distribution does not contain a histogram, then
   * omit this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleApiDistributionBucketOptions bucketOptions;

  /**
   * The number of values in the population. Must be non-negative. This value must equal the sum of
   * the values in `bucket_counts` if a histogram is provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long count;

  /**
   * Must be in increasing order of `value` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleApiDistributionExemplar> exemplars;

  /**
   * The arithmetic mean of the values in the population. If `count` is zero then this field must be
   * zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double mean;

  /**
   * If specified, contains the range of the population values. The field must not be present if the
   * `count` is zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleApiDistributionRange range;

  /**
   * The sum of squared deviations from the mean of the values in the population. For values x_i
   * this is: Sum[i=1..n]((x_i - mean)^2) Knuth, "The Art of Computer Programming", Vol. 2, page
   * 232, 3rd edition describes Welford's method for accumulating this sum in one pass. If `count`
   * is zero then this field must be zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double sumOfSquaredDeviation;

  /**
   * The number of values in each bucket of the histogram, as described in `bucket_options`. If the
   * distribution does not have a histogram, then omit this field. If there is a histogram, then the
   * sum of the values in `bucket_counts` must equal the value in the `count` field of the
   * distribution. If present, `bucket_counts` should contain N values, where N is the number of
   * buckets specified in `bucket_options`. If you supply fewer than N values, the remaining values
   * are assumed to be 0. The order of the values in `bucket_counts` follows the bucket numbering
   * schemes described for the three bucket types. The first value must be the count for the
   * underflow bucket (number 0). The next N-2 values are the counts for the finite buckets (number
   * 1 through N-2). The N'th value in `bucket_counts` is the count for the overflow bucket (number
   * N-1).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getBucketCounts() {
    return bucketCounts;
  }

  /**
   * The number of values in each bucket of the histogram, as described in `bucket_options`. If the
   * distribution does not have a histogram, then omit this field. If there is a histogram, then the
   * sum of the values in `bucket_counts` must equal the value in the `count` field of the
   * distribution. If present, `bucket_counts` should contain N values, where N is the number of
   * buckets specified in `bucket_options`. If you supply fewer than N values, the remaining values
   * are assumed to be 0. The order of the values in `bucket_counts` follows the bucket numbering
   * schemes described for the three bucket types. The first value must be the count for the
   * underflow bucket (number 0). The next N-2 values are the counts for the finite buckets (number
   * 1 through N-2). The N'th value in `bucket_counts` is the count for the overflow bucket (number
   * N-1).
   * @param bucketCounts bucketCounts or {@code null} for none
   */
  public GoogleApiDistribution setBucketCounts(java.util.List<java.lang.Long> bucketCounts) {
    this.bucketCounts = bucketCounts;
    return this;
  }

  /**
   * Defines the histogram bucket boundaries. If the distribution does not contain a histogram, then
   * omit this field.
   * @return value or {@code null} for none
   */
  public GoogleApiDistributionBucketOptions getBucketOptions() {
    return bucketOptions;
  }

  /**
   * Defines the histogram bucket boundaries. If the distribution does not contain a histogram, then
   * omit this field.
   * @param bucketOptions bucketOptions or {@code null} for none
   */
  public GoogleApiDistribution setBucketOptions(GoogleApiDistributionBucketOptions bucketOptions) {
    this.bucketOptions = bucketOptions;
    return this;
  }

  /**
   * The number of values in the population. Must be non-negative. This value must equal the sum of
   * the values in `bucket_counts` if a histogram is provided.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCount() {
    return count;
  }

  /**
   * The number of values in the population. Must be non-negative. This value must equal the sum of
   * the values in `bucket_counts` if a histogram is provided.
   * @param count count or {@code null} for none
   */
  public GoogleApiDistribution setCount(java.lang.Long count) {
    this.count = count;
    return this;
  }

  /**
   * Must be in increasing order of `value` field.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleApiDistributionExemplar> getExemplars() {
    return exemplars;
  }

  /**
   * Must be in increasing order of `value` field.
   * @param exemplars exemplars or {@code null} for none
   */
  public GoogleApiDistribution setExemplars(java.util.List<GoogleApiDistributionExemplar> exemplars) {
    this.exemplars = exemplars;
    return this;
  }

  /**
   * The arithmetic mean of the values in the population. If `count` is zero then this field must be
   * zero.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * The arithmetic mean of the values in the population. If `count` is zero then this field must be
   * zero.
   * @param mean mean or {@code null} for none
   */
  public GoogleApiDistribution setMean(java.lang.Double mean) {
    this.mean = mean;
    return this;
  }

  /**
   * If specified, contains the range of the population values. The field must not be present if the
   * `count` is zero.
   * @return value or {@code null} for none
   */
  public GoogleApiDistributionRange getRange() {
    return range;
  }

  /**
   * If specified, contains the range of the population values. The field must not be present if the
   * `count` is zero.
   * @param range range or {@code null} for none
   */
  public GoogleApiDistribution setRange(GoogleApiDistributionRange range) {
    this.range = range;
    return this;
  }

  /**
   * The sum of squared deviations from the mean of the values in the population. For values x_i
   * this is: Sum[i=1..n]((x_i - mean)^2) Knuth, "The Art of Computer Programming", Vol. 2, page
   * 232, 3rd edition describes Welford's method for accumulating this sum in one pass. If `count`
   * is zero then this field must be zero.
   * @return value or {@code null} for none
   */
  public java.lang.Double getSumOfSquaredDeviation() {
    return sumOfSquaredDeviation;
  }

  /**
   * The sum of squared deviations from the mean of the values in the population. For values x_i
   * this is: Sum[i=1..n]((x_i - mean)^2) Knuth, "The Art of Computer Programming", Vol. 2, page
   * 232, 3rd edition describes Welford's method for accumulating this sum in one pass. If `count`
   * is zero then this field must be zero.
   * @param sumOfSquaredDeviation sumOfSquaredDeviation or {@code null} for none
   */
  public GoogleApiDistribution setSumOfSquaredDeviation(java.lang.Double sumOfSquaredDeviation) {
    this.sumOfSquaredDeviation = sumOfSquaredDeviation;
    return this;
  }

  @Override
  public GoogleApiDistribution set(String fieldName, Object value) {
    return (GoogleApiDistribution) super.set(fieldName, value);
  }

  @Override
  public GoogleApiDistribution clone() {
    return (GoogleApiDistribution) super.clone();
  }

}
