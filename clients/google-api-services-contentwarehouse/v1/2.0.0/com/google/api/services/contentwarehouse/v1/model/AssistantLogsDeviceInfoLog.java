/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The information related to the device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantLogsDeviceInfoLog extends com.google.api.client.json.GenericJson {

  /**
   * Device identifier string for the current device used in the arbitration service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String arbitrationDeviceId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectivity;

  /**
   * The identification of the device. DeviceId (go/as-device-id) has multiple fields. To
   * consloidate it to a single to make dremel easier, we use the string obtained by calling go/get-
   * device-id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceId;

  /**
   * The identification of the device. The logging version of the full DeviceId.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsSettingsDeviceIdLog deviceIdLog;

  /**
   * We index linked devices and log these index to avoid logging device_id. device_index should
   * always be a positive number or -1. -1 means this device is not in homegraph.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer deviceIndex;

  /**
   * This is the device_model_id field in device_settings proto. It has the same value for the same
   * type of devices. e.g. Sonos.Sonos One.S13
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceModelId;

  /**
   * LINT.ThenChange(//depot/google3/assistant/context/proto/device_arbitration.proto:EstimatedRelat
   * iveDistance)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distance;

  /**
   * The lumos processor which eliminated this device, if applicable
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eliminatingLumosProcessor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRemote;

  /**
   * This flag indicates this is a non-local device that is tethered to local/originating device.
   * Tethered device is a special case of is_remote and typically used in wearable scenarios. This
   * is always false for local device and when it is true, it implies is_remote is also true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isTethered;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsMediaCapabilities mediaCapabilities;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mediaDeviceType;

  /**
   * User defined device name
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * This field should be populated only when there is at least one session on this device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsDeviceMediaSessionLog> sessions;

  /**
   * This field should be populated only when the device is an Assistant device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String surfaceType;

  /**
   * Device identifier string for the current device used in the arbitration service.
   * @return value or {@code null} for none
   */
  public java.lang.String getArbitrationDeviceId() {
    return arbitrationDeviceId;
  }

  /**
   * Device identifier string for the current device used in the arbitration service.
   * @param arbitrationDeviceId arbitrationDeviceId or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setArbitrationDeviceId(java.lang.String arbitrationDeviceId) {
    this.arbitrationDeviceId = arbitrationDeviceId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectivity() {
    return connectivity;
  }

  /**
   * @param connectivity connectivity or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setConnectivity(java.lang.String connectivity) {
    this.connectivity = connectivity;
    return this;
  }

  /**
   * The identification of the device. DeviceId (go/as-device-id) has multiple fields. To
   * consloidate it to a single to make dremel easier, we use the string obtained by calling go/get-
   * device-id.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceId() {
    return deviceId;
  }

  /**
   * The identification of the device. DeviceId (go/as-device-id) has multiple fields. To
   * consloidate it to a single to make dremel easier, we use the string obtained by calling go/get-
   * device-id.
   * @param deviceId deviceId or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setDeviceId(java.lang.String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The identification of the device. The logging version of the full DeviceId.
   * @return value or {@code null} for none
   */
  public AssistantLogsSettingsDeviceIdLog getDeviceIdLog() {
    return deviceIdLog;
  }

  /**
   * The identification of the device. The logging version of the full DeviceId.
   * @param deviceIdLog deviceIdLog or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setDeviceIdLog(AssistantLogsSettingsDeviceIdLog deviceIdLog) {
    this.deviceIdLog = deviceIdLog;
    return this;
  }

  /**
   * We index linked devices and log these index to avoid logging device_id. device_index should
   * always be a positive number or -1. -1 means this device is not in homegraph.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDeviceIndex() {
    return deviceIndex;
  }

  /**
   * We index linked devices and log these index to avoid logging device_id. device_index should
   * always be a positive number or -1. -1 means this device is not in homegraph.
   * @param deviceIndex deviceIndex or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setDeviceIndex(java.lang.Integer deviceIndex) {
    this.deviceIndex = deviceIndex;
    return this;
  }

  /**
   * This is the device_model_id field in device_settings proto. It has the same value for the same
   * type of devices. e.g. Sonos.Sonos One.S13
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceModelId() {
    return deviceModelId;
  }

  /**
   * This is the device_model_id field in device_settings proto. It has the same value for the same
   * type of devices. e.g. Sonos.Sonos One.S13
   * @param deviceModelId deviceModelId or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setDeviceModelId(java.lang.String deviceModelId) {
    this.deviceModelId = deviceModelId;
    return this;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/context/proto/device_arbitration.proto:EstimatedRelat
   * iveDistance)
   * @return value or {@code null} for none
   */
  public java.lang.String getDistance() {
    return distance;
  }

  /**
   * LINT.ThenChange(//depot/google3/assistant/context/proto/device_arbitration.proto:EstimatedRelat
   * iveDistance)
   * @param distance distance or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setDistance(java.lang.String distance) {
    this.distance = distance;
    return this;
  }

  /**
   * The lumos processor which eliminated this device, if applicable
   * @return value or {@code null} for none
   */
  public java.lang.String getEliminatingLumosProcessor() {
    return eliminatingLumosProcessor;
  }

  /**
   * The lumos processor which eliminated this device, if applicable
   * @param eliminatingLumosProcessor eliminatingLumosProcessor or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setEliminatingLumosProcessor(java.lang.String eliminatingLumosProcessor) {
    this.eliminatingLumosProcessor = eliminatingLumosProcessor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRemote() {
    return isRemote;
  }

  /**
   * @param isRemote isRemote or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setIsRemote(java.lang.Boolean isRemote) {
    this.isRemote = isRemote;
    return this;
  }

  /**
   * This flag indicates this is a non-local device that is tethered to local/originating device.
   * Tethered device is a special case of is_remote and typically used in wearable scenarios. This
   * is always false for local device and when it is true, it implies is_remote is also true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsTethered() {
    return isTethered;
  }

  /**
   * This flag indicates this is a non-local device that is tethered to local/originating device.
   * Tethered device is a special case of is_remote and typically used in wearable scenarios. This
   * is always false for local device and when it is true, it implies is_remote is also true.
   * @param isTethered isTethered or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setIsTethered(java.lang.Boolean isTethered) {
    this.isTethered = isTethered;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantLogsMediaCapabilities getMediaCapabilities() {
    return mediaCapabilities;
  }

  /**
   * @param mediaCapabilities mediaCapabilities or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setMediaCapabilities(AssistantLogsMediaCapabilities mediaCapabilities) {
    this.mediaCapabilities = mediaCapabilities;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMediaDeviceType() {
    return mediaDeviceType;
  }

  /**
   * @param mediaDeviceType mediaDeviceType or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setMediaDeviceType(java.lang.String mediaDeviceType) {
    this.mediaDeviceType = mediaDeviceType;
    return this;
  }

  /**
   * User defined device name
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * User defined device name
   * @param name name or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * This field should be populated only when there is at least one session on this device.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsDeviceMediaSessionLog> getSessions() {
    return sessions;
  }

  /**
   * This field should be populated only when there is at least one session on this device.
   * @param sessions sessions or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setSessions(java.util.List<AssistantLogsDeviceMediaSessionLog> sessions) {
    this.sessions = sessions;
    return this;
  }

  /**
   * This field should be populated only when the device is an Assistant device.
   * @return value or {@code null} for none
   */
  public java.lang.String getSurfaceType() {
    return surfaceType;
  }

  /**
   * This field should be populated only when the device is an Assistant device.
   * @param surfaceType surfaceType or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog setSurfaceType(java.lang.String surfaceType) {
    this.surfaceType = surfaceType;
    return this;
  }

  @Override
  public AssistantLogsDeviceInfoLog set(String fieldName, Object value) {
    return (AssistantLogsDeviceInfoLog) super.set(fieldName, value);
  }

  @Override
  public AssistantLogsDeviceInfoLog clone() {
    return (AssistantLogsDeviceInfoLog) super.clone();
  }

}
