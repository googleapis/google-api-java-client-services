/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Protocol record used for collecting together all information about a document. Please consult go
 * /dj-explorer for two basic questions about `CompositeDoc`: - Where should I look up certain
 * information (e.g: pagerank, language)? - What does each field in CompositeDoc mean and who should
 * I contact if I have questions? To add a new field into CompositeDoc, or change existing field's
 * size significantly, please file a ticket at go/dj-new-field, fill in necessary information and
 * get approved by docjoin-access@ team. Next id: 191
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CompositeDoc extends com.google.api.client.json.GenericJson {

  /**
   * Visible content checksum as computed by
   * repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key
   * format" (i.e., by Fprint96::AsKey()).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ContentChecksum96")
  private java.lang.String contentChecksum96;

  /**
   * Contains necessary information to enforce row level Docjoin access control.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingPrivacyAccessAccessRequirements accessRequirements;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocAdditionalChecksums additionalchecksums;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CompositeDocAlternateName> alternatename;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingDocjoinerAnchorStatistics anchorStats;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Anchors anchors;

  /**
   * This field is present iff the page has a bad SSL certificate itself or in its redirect chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingBadSSLCertificate badSslCertificate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualityProseCSEUrlInfo> cseId;

  /**
   * URL should only be selected for CSE Index if it's pagerank is higher than cse_pagerank_cutoff.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer csePagerankCutoff;

  /**
   * Contains the tracking version of various data fields in CompositeDoc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingDocjoinerDataVersion dataVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GDocumentBase doc;

  /**
   * A generic container to hold document annotations and signals. For a full list of extensions
   * live today, see go/wde.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet docAttachments;

  /**
   * Info about "selected" images associated with the document for which we (already) have
   * ImageData. For each image URL, some fixed number of documents are selected as web referrers for
   * the image URL, and within those selected documents, we say the image is "selected". Within the
   * remaining documents, we say the image is "rejected". Note that this distinction is slightly
   * different from selected for indexing. Only images within doc_images where
   * is_indexed_by_imagesearch is true will be selected for indexing. You can find the rejected
   * images at composite_doc.doc_attachments().get(). You can find images that are selected, but for
   * which we have no ImageData (yet) at
   * composite_doc.image_indexing_info().selected_not_indexed_image_link()
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageData> docImages;

  /**
   * Info about videos embedded in the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageRepositoryVideoProperties> docVideos;

  /**
   * This message set is used for data pushed into the index using the signals framework that is
   * never to be used in Mustang or TG Continuum scoring/snippeting code. Any protocol buffer stored
   * in this message set is automatically returned in a docinfo response - it ends up in the "info"
   * message set in the WWWSnippetResponse, so it can be used in post-doc twiddlers and for display
   * in GWS with no code changes in Mustang or Teragoogle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet docinfoPassthroughAttachments;

  /**
   * Data produced by the embedded-content system. This is a thin message, containing only
   * embedded_links_info data for the embedder and JavaScript/CSS embedded links (the embedded-
   * content bigtable also contains snapshots, compressed document trees and all embedded link
   * types). Provided using the index signal API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentEmbeddedContentInfo embeddedContentInfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CompositeDocExtraDup> extradup;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CompositeDocForwardingDup> forwardingdup;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CompositeDocIncludedContent> includedcontent;

  /**
   * Serialized indexing intermediate data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String indexingIntermediate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocIndexingInfo indexinginfo;

  /**
   * This field associates a document to particular labels and assigns confidence values to them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityLabelsGoogleLabelData labelData;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocLiveExperimentInfo liveexperimentinfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LocalWWWInfo localinfo;

  /**
   * Localized alternate names are similar to alternate names, except that it is associated with a
   * language different from its canonical. This is the subset of webmaster-provided localized
   * alternate names being in the dup cluster of this document. Used during serving for swapping in
   * the URL based on regional and language preferences of the user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IndexingConverterLocalizedAlternateName> localizedAlternateName;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocLocalizedVariations localizedvariations;

  /**
   * Only present in partial cdocs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocPartialUpdateInfo partialUpdateInfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PerDocData perDocData;

  /**
   * Porn related data used for image and web search porn classification as well as for diagnostics
   * purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClassifierPornDocumentData porninfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DocProperties properties;

  /**
   * Contains information necessary to perform policy decision on the usage of the data assosiated
   * with this cdoc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PtokenPToken ptoken;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocQualitySignals qualitysignals;

  /**
   * Information about the most recent creation and expiration of this domain. It's extracted from
   * domainedge signal.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RegistrationInfo registrationinfo;

  /**
   * If present, indicates that some content was inserted, deleted, or replaced in the document's
   * content (in CompositeDoc::doc::Content::Representation), and stores information about what was
   * inserted, deleted, or replaced.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingConverterRichContentData richcontentData;

  /**
   * rich snippet extracted from the content of a document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RichsnippetsPageMap richsnippet;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompositeDocRobotsInfoList robotsinfolist;

  /**
   * to copy to per-doc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scaledIndyRank;

  /**
   * Sitelinks: a collection of interesting links a user might be interested in, given they are
   * interested in this document. WARNING: this is different from the crawler Sitemaps (see
   * SitemapsSignals in the attachments).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Sitemap sitemap;

  /**
   * Row timestamp in CDoc storage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long storageRowTimestampMicros;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> subindexid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityTimebasedSyntacticDate syntacticDate;

  /**
   * WARNING!!! "url" field in CompositeDoc is optional, and is usually missing: e.g., Docjoin
   * CompositeDoc's don't have CompositeDoc::url. has_url() checking is often useful. So don't rely
   * on CompositeDoc::url unless you're sure otherwise. Usually you want to use
   * CompositeDoc::doc::url instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Date in the url extracted by quality/snippets/urldate/date-in-url.cc This is given as midnight
   * GMT on the date in question.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long urldate;

  /**
   * Visible content checksum as computed by
   * repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key
   * format" (i.e., by Fprint96::AsKey()).
   * @see #decodeContentChecksum96()
   * @return value or {@code null} for none
   */
  public java.lang.String getContentChecksum96() {
    return contentChecksum96;
  }

  /**
   * Visible content checksum as computed by
   * repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key
   * format" (i.e., by Fprint96::AsKey()).
   * @see #getContentChecksum96()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeContentChecksum96() {
    return com.google.api.client.util.Base64.decodeBase64(contentChecksum96);
  }

  /**
   * Visible content checksum as computed by
   * repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key
   * format" (i.e., by Fprint96::AsKey()).
   * @see #encodeContentChecksum96()
   * @param contentChecksum96 contentChecksum96 or {@code null} for none
   */
  public CompositeDoc setContentChecksum96(java.lang.String contentChecksum96) {
    this.contentChecksum96 = contentChecksum96;
    return this;
  }

  /**
   * Visible content checksum as computed by
   * repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key
   * format" (i.e., by Fprint96::AsKey()).
   * @see #setContentChecksum96()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public CompositeDoc encodeContentChecksum96(byte[] contentChecksum96) {
    this.contentChecksum96 = com.google.api.client.util.Base64.encodeBase64URLSafeString(contentChecksum96);
    return this;
  }

  /**
   * Contains necessary information to enforce row level Docjoin access control.
   * @return value or {@code null} for none
   */
  public IndexingPrivacyAccessAccessRequirements getAccessRequirements() {
    return accessRequirements;
  }

  /**
   * Contains necessary information to enforce row level Docjoin access control.
   * @param accessRequirements accessRequirements or {@code null} for none
   */
  public CompositeDoc setAccessRequirements(IndexingPrivacyAccessAccessRequirements accessRequirements) {
    this.accessRequirements = accessRequirements;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocAdditionalChecksums getAdditionalchecksums() {
    return additionalchecksums;
  }

  /**
   * @param additionalchecksums additionalchecksums or {@code null} for none
   */
  public CompositeDoc setAdditionalchecksums(CompositeDocAdditionalChecksums additionalchecksums) {
    this.additionalchecksums = additionalchecksums;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<CompositeDocAlternateName> getAlternatename() {
    return alternatename;
  }

  /**
   * @param alternatename alternatename or {@code null} for none
   */
  public CompositeDoc setAlternatename(java.util.List<CompositeDocAlternateName> alternatename) {
    this.alternatename = alternatename;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatistics getAnchorStats() {
    return anchorStats;
  }

  /**
   * @param anchorStats anchorStats or {@code null} for none
   */
  public CompositeDoc setAnchorStats(IndexingDocjoinerAnchorStatistics anchorStats) {
    this.anchorStats = anchorStats;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Anchors getAnchors() {
    return anchors;
  }

  /**
   * @param anchors anchors or {@code null} for none
   */
  public CompositeDoc setAnchors(Anchors anchors) {
    this.anchors = anchors;
    return this;
  }

  /**
   * This field is present iff the page has a bad SSL certificate itself or in its redirect chain.
   * @return value or {@code null} for none
   */
  public IndexingBadSSLCertificate getBadSslCertificate() {
    return badSslCertificate;
  }

  /**
   * This field is present iff the page has a bad SSL certificate itself or in its redirect chain.
   * @param badSslCertificate badSslCertificate or {@code null} for none
   */
  public CompositeDoc setBadSslCertificate(IndexingBadSSLCertificate badSslCertificate) {
    this.badSslCertificate = badSslCertificate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<QualityProseCSEUrlInfo> getCseId() {
    return cseId;
  }

  /**
   * @param cseId cseId or {@code null} for none
   */
  public CompositeDoc setCseId(java.util.List<QualityProseCSEUrlInfo> cseId) {
    this.cseId = cseId;
    return this;
  }

  /**
   * URL should only be selected for CSE Index if it's pagerank is higher than cse_pagerank_cutoff.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCsePagerankCutoff() {
    return csePagerankCutoff;
  }

  /**
   * URL should only be selected for CSE Index if it's pagerank is higher than cse_pagerank_cutoff.
   * @param csePagerankCutoff csePagerankCutoff or {@code null} for none
   */
  public CompositeDoc setCsePagerankCutoff(java.lang.Integer csePagerankCutoff) {
    this.csePagerankCutoff = csePagerankCutoff;
    return this;
  }

  /**
   * Contains the tracking version of various data fields in CompositeDoc.
   * @return value or {@code null} for none
   */
  public IndexingDocjoinerDataVersion getDataVersion() {
    return dataVersion;
  }

  /**
   * Contains the tracking version of various data fields in CompositeDoc.
   * @param dataVersion dataVersion or {@code null} for none
   */
  public CompositeDoc setDataVersion(IndexingDocjoinerDataVersion dataVersion) {
    this.dataVersion = dataVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GDocumentBase getDoc() {
    return doc;
  }

  /**
   * @param doc doc or {@code null} for none
   */
  public CompositeDoc setDoc(GDocumentBase doc) {
    this.doc = doc;
    return this;
  }

  /**
   * A generic container to hold document annotations and signals. For a full list of extensions
   * live today, see go/wde.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getDocAttachments() {
    return docAttachments;
  }

  /**
   * A generic container to hold document annotations and signals. For a full list of extensions
   * live today, see go/wde.
   * @param docAttachments docAttachments or {@code null} for none
   */
  public CompositeDoc setDocAttachments(Proto2BridgeMessageSet docAttachments) {
    this.docAttachments = docAttachments;
    return this;
  }

  /**
   * Info about "selected" images associated with the document for which we (already) have
   * ImageData. For each image URL, some fixed number of documents are selected as web referrers for
   * the image URL, and within those selected documents, we say the image is "selected". Within the
   * remaining documents, we say the image is "rejected". Note that this distinction is slightly
   * different from selected for indexing. Only images within doc_images where
   * is_indexed_by_imagesearch is true will be selected for indexing. You can find the rejected
   * images at composite_doc.doc_attachments().get(). You can find images that are selected, but for
   * which we have no ImageData (yet) at
   * composite_doc.image_indexing_info().selected_not_indexed_image_link()
   * @return value or {@code null} for none
   */
  public java.util.List<ImageData> getDocImages() {
    return docImages;
  }

  /**
   * Info about "selected" images associated with the document for which we (already) have
   * ImageData. For each image URL, some fixed number of documents are selected as web referrers for
   * the image URL, and within those selected documents, we say the image is "selected". Within the
   * remaining documents, we say the image is "rejected". Note that this distinction is slightly
   * different from selected for indexing. Only images within doc_images where
   * is_indexed_by_imagesearch is true will be selected for indexing. You can find the rejected
   * images at composite_doc.doc_attachments().get(). You can find images that are selected, but for
   * which we have no ImageData (yet) at
   * composite_doc.image_indexing_info().selected_not_indexed_image_link()
   * @param docImages docImages or {@code null} for none
   */
  public CompositeDoc setDocImages(java.util.List<ImageData> docImages) {
    this.docImages = docImages;
    return this;
  }

  /**
   * Info about videos embedded in the document.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageRepositoryVideoProperties> getDocVideos() {
    return docVideos;
  }

  /**
   * Info about videos embedded in the document.
   * @param docVideos docVideos or {@code null} for none
   */
  public CompositeDoc setDocVideos(java.util.List<ImageRepositoryVideoProperties> docVideos) {
    this.docVideos = docVideos;
    return this;
  }

  /**
   * This message set is used for data pushed into the index using the signals framework that is
   * never to be used in Mustang or TG Continuum scoring/snippeting code. Any protocol buffer stored
   * in this message set is automatically returned in a docinfo response - it ends up in the "info"
   * message set in the WWWSnippetResponse, so it can be used in post-doc twiddlers and for display
   * in GWS with no code changes in Mustang or Teragoogle.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getDocinfoPassthroughAttachments() {
    return docinfoPassthroughAttachments;
  }

  /**
   * This message set is used for data pushed into the index using the signals framework that is
   * never to be used in Mustang or TG Continuum scoring/snippeting code. Any protocol buffer stored
   * in this message set is automatically returned in a docinfo response - it ends up in the "info"
   * message set in the WWWSnippetResponse, so it can be used in post-doc twiddlers and for display
   * in GWS with no code changes in Mustang or Teragoogle.
   * @param docinfoPassthroughAttachments docinfoPassthroughAttachments or {@code null} for none
   */
  public CompositeDoc setDocinfoPassthroughAttachments(Proto2BridgeMessageSet docinfoPassthroughAttachments) {
    this.docinfoPassthroughAttachments = docinfoPassthroughAttachments;
    return this;
  }

  /**
   * Data produced by the embedded-content system. This is a thin message, containing only
   * embedded_links_info data for the embedder and JavaScript/CSS embedded links (the embedded-
   * content bigtable also contains snapshots, compressed document trees and all embedded link
   * types). Provided using the index signal API.
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo getEmbeddedContentInfo() {
    return embeddedContentInfo;
  }

  /**
   * Data produced by the embedded-content system. This is a thin message, containing only
   * embedded_links_info data for the embedder and JavaScript/CSS embedded links (the embedded-
   * content bigtable also contains snapshots, compressed document trees and all embedded link
   * types). Provided using the index signal API.
   * @param embeddedContentInfo embeddedContentInfo or {@code null} for none
   */
  public CompositeDoc setEmbeddedContentInfo(IndexingEmbeddedContentEmbeddedContentInfo embeddedContentInfo) {
    this.embeddedContentInfo = embeddedContentInfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<CompositeDocExtraDup> getExtradup() {
    return extradup;
  }

  /**
   * @param extradup extradup or {@code null} for none
   */
  public CompositeDoc setExtradup(java.util.List<CompositeDocExtraDup> extradup) {
    this.extradup = extradup;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<CompositeDocForwardingDup> getForwardingdup() {
    return forwardingdup;
  }

  /**
   * @param forwardingdup forwardingdup or {@code null} for none
   */
  public CompositeDoc setForwardingdup(java.util.List<CompositeDocForwardingDup> forwardingdup) {
    this.forwardingdup = forwardingdup;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<CompositeDocIncludedContent> getIncludedcontent() {
    return includedcontent;
  }

  /**
   * @param includedcontent includedcontent or {@code null} for none
   */
  public CompositeDoc setIncludedcontent(java.util.List<CompositeDocIncludedContent> includedcontent) {
    this.includedcontent = includedcontent;
    return this;
  }

  /**
   * Serialized indexing intermediate data.
   * @see #decodeIndexingIntermediate()
   * @return value or {@code null} for none
   */
  public java.lang.String getIndexingIntermediate() {
    return indexingIntermediate;
  }

  /**
   * Serialized indexing intermediate data.
   * @see #getIndexingIntermediate()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeIndexingIntermediate() {
    return com.google.api.client.util.Base64.decodeBase64(indexingIntermediate);
  }

  /**
   * Serialized indexing intermediate data.
   * @see #encodeIndexingIntermediate()
   * @param indexingIntermediate indexingIntermediate or {@code null} for none
   */
  public CompositeDoc setIndexingIntermediate(java.lang.String indexingIntermediate) {
    this.indexingIntermediate = indexingIntermediate;
    return this;
  }

  /**
   * Serialized indexing intermediate data.
   * @see #setIndexingIntermediate()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public CompositeDoc encodeIndexingIntermediate(byte[] indexingIntermediate) {
    this.indexingIntermediate = com.google.api.client.util.Base64.encodeBase64URLSafeString(indexingIntermediate);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocIndexingInfo getIndexinginfo() {
    return indexinginfo;
  }

  /**
   * @param indexinginfo indexinginfo or {@code null} for none
   */
  public CompositeDoc setIndexinginfo(CompositeDocIndexingInfo indexinginfo) {
    this.indexinginfo = indexinginfo;
    return this;
  }

  /**
   * This field associates a document to particular labels and assigns confidence values to them.
   * @return value or {@code null} for none
   */
  public QualityLabelsGoogleLabelData getLabelData() {
    return labelData;
  }

  /**
   * This field associates a document to particular labels and assigns confidence values to them.
   * @param labelData labelData or {@code null} for none
   */
  public CompositeDoc setLabelData(QualityLabelsGoogleLabelData labelData) {
    this.labelData = labelData;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocLiveExperimentInfo getLiveexperimentinfo() {
    return liveexperimentinfo;
  }

  /**
   * @param liveexperimentinfo liveexperimentinfo or {@code null} for none
   */
  public CompositeDoc setLiveexperimentinfo(CompositeDocLiveExperimentInfo liveexperimentinfo) {
    this.liveexperimentinfo = liveexperimentinfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public LocalWWWInfo getLocalinfo() {
    return localinfo;
  }

  /**
   * @param localinfo localinfo or {@code null} for none
   */
  public CompositeDoc setLocalinfo(LocalWWWInfo localinfo) {
    this.localinfo = localinfo;
    return this;
  }

  /**
   * Localized alternate names are similar to alternate names, except that it is associated with a
   * language different from its canonical. This is the subset of webmaster-provided localized
   * alternate names being in the dup cluster of this document. Used during serving for swapping in
   * the URL based on regional and language preferences of the user.
   * @return value or {@code null} for none
   */
  public java.util.List<IndexingConverterLocalizedAlternateName> getLocalizedAlternateName() {
    return localizedAlternateName;
  }

  /**
   * Localized alternate names are similar to alternate names, except that it is associated with a
   * language different from its canonical. This is the subset of webmaster-provided localized
   * alternate names being in the dup cluster of this document. Used during serving for swapping in
   * the URL based on regional and language preferences of the user.
   * @param localizedAlternateName localizedAlternateName or {@code null} for none
   */
  public CompositeDoc setLocalizedAlternateName(java.util.List<IndexingConverterLocalizedAlternateName> localizedAlternateName) {
    this.localizedAlternateName = localizedAlternateName;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocLocalizedVariations getLocalizedvariations() {
    return localizedvariations;
  }

  /**
   * @param localizedvariations localizedvariations or {@code null} for none
   */
  public CompositeDoc setLocalizedvariations(CompositeDocLocalizedVariations localizedvariations) {
    this.localizedvariations = localizedvariations;
    return this;
  }

  /**
   * Only present in partial cdocs.
   * @return value or {@code null} for none
   */
  public CompositeDocPartialUpdateInfo getPartialUpdateInfo() {
    return partialUpdateInfo;
  }

  /**
   * Only present in partial cdocs.
   * @param partialUpdateInfo partialUpdateInfo or {@code null} for none
   */
  public CompositeDoc setPartialUpdateInfo(CompositeDocPartialUpdateInfo partialUpdateInfo) {
    this.partialUpdateInfo = partialUpdateInfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PerDocData getPerDocData() {
    return perDocData;
  }

  /**
   * @param perDocData perDocData or {@code null} for none
   */
  public CompositeDoc setPerDocData(PerDocData perDocData) {
    this.perDocData = perDocData;
    return this;
  }

  /**
   * Porn related data used for image and web search porn classification as well as for diagnostics
   * purposes.
   * @return value or {@code null} for none
   */
  public ClassifierPornDocumentData getPorninfo() {
    return porninfo;
  }

  /**
   * Porn related data used for image and web search porn classification as well as for diagnostics
   * purposes.
   * @param porninfo porninfo or {@code null} for none
   */
  public CompositeDoc setPorninfo(ClassifierPornDocumentData porninfo) {
    this.porninfo = porninfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public DocProperties getProperties() {
    return properties;
  }

  /**
   * @param properties properties or {@code null} for none
   */
  public CompositeDoc setProperties(DocProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Contains information necessary to perform policy decision on the usage of the data assosiated
   * with this cdoc.
   * @return value or {@code null} for none
   */
  public PtokenPToken getPtoken() {
    return ptoken;
  }

  /**
   * Contains information necessary to perform policy decision on the usage of the data assosiated
   * with this cdoc.
   * @param ptoken ptoken or {@code null} for none
   */
  public CompositeDoc setPtoken(PtokenPToken ptoken) {
    this.ptoken = ptoken;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocQualitySignals getQualitysignals() {
    return qualitysignals;
  }

  /**
   * @param qualitysignals qualitysignals or {@code null} for none
   */
  public CompositeDoc setQualitysignals(CompositeDocQualitySignals qualitysignals) {
    this.qualitysignals = qualitysignals;
    return this;
  }

  /**
   * Information about the most recent creation and expiration of this domain. It's extracted from
   * domainedge signal.
   * @return value or {@code null} for none
   */
  public RegistrationInfo getRegistrationinfo() {
    return registrationinfo;
  }

  /**
   * Information about the most recent creation and expiration of this domain. It's extracted from
   * domainedge signal.
   * @param registrationinfo registrationinfo or {@code null} for none
   */
  public CompositeDoc setRegistrationinfo(RegistrationInfo registrationinfo) {
    this.registrationinfo = registrationinfo;
    return this;
  }

  /**
   * If present, indicates that some content was inserted, deleted, or replaced in the document's
   * content (in CompositeDoc::doc::Content::Representation), and stores information about what was
   * inserted, deleted, or replaced.
   * @return value or {@code null} for none
   */
  public IndexingConverterRichContentData getRichcontentData() {
    return richcontentData;
  }

  /**
   * If present, indicates that some content was inserted, deleted, or replaced in the document's
   * content (in CompositeDoc::doc::Content::Representation), and stores information about what was
   * inserted, deleted, or replaced.
   * @param richcontentData richcontentData or {@code null} for none
   */
  public CompositeDoc setRichcontentData(IndexingConverterRichContentData richcontentData) {
    this.richcontentData = richcontentData;
    return this;
  }

  /**
   * rich snippet extracted from the content of a document.
   * @return value or {@code null} for none
   */
  public RichsnippetsPageMap getRichsnippet() {
    return richsnippet;
  }

  /**
   * rich snippet extracted from the content of a document.
   * @param richsnippet richsnippet or {@code null} for none
   */
  public CompositeDoc setRichsnippet(RichsnippetsPageMap richsnippet) {
    this.richsnippet = richsnippet;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CompositeDocRobotsInfoList getRobotsinfolist() {
    return robotsinfolist;
  }

  /**
   * @param robotsinfolist robotsinfolist or {@code null} for none
   */
  public CompositeDoc setRobotsinfolist(CompositeDocRobotsInfoList robotsinfolist) {
    this.robotsinfolist = robotsinfolist;
    return this;
  }

  /**
   * to copy to per-doc
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScaledIndyRank() {
    return scaledIndyRank;
  }

  /**
   * to copy to per-doc
   * @param scaledIndyRank scaledIndyRank or {@code null} for none
   */
  public CompositeDoc setScaledIndyRank(java.lang.Integer scaledIndyRank) {
    this.scaledIndyRank = scaledIndyRank;
    return this;
  }

  /**
   * Sitelinks: a collection of interesting links a user might be interested in, given they are
   * interested in this document. WARNING: this is different from the crawler Sitemaps (see
   * SitemapsSignals in the attachments).
   * @return value or {@code null} for none
   */
  public Sitemap getSitemap() {
    return sitemap;
  }

  /**
   * Sitelinks: a collection of interesting links a user might be interested in, given they are
   * interested in this document. WARNING: this is different from the crawler Sitemaps (see
   * SitemapsSignals in the attachments).
   * @param sitemap sitemap or {@code null} for none
   */
  public CompositeDoc setSitemap(Sitemap sitemap) {
    this.sitemap = sitemap;
    return this;
  }

  /**
   * Row timestamp in CDoc storage.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStorageRowTimestampMicros() {
    return storageRowTimestampMicros;
  }

  /**
   * Row timestamp in CDoc storage.
   * @param storageRowTimestampMicros storageRowTimestampMicros or {@code null} for none
   */
  public CompositeDoc setStorageRowTimestampMicros(java.lang.Long storageRowTimestampMicros) {
    this.storageRowTimestampMicros = storageRowTimestampMicros;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSubindexid() {
    return subindexid;
  }

  /**
   * @param subindexid subindexid or {@code null} for none
   */
  public CompositeDoc setSubindexid(java.util.List<java.lang.String> subindexid) {
    this.subindexid = subindexid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public QualityTimebasedSyntacticDate getSyntacticDate() {
    return syntacticDate;
  }

  /**
   * @param syntacticDate syntacticDate or {@code null} for none
   */
  public CompositeDoc setSyntacticDate(QualityTimebasedSyntacticDate syntacticDate) {
    this.syntacticDate = syntacticDate;
    return this;
  }

  /**
   * WARNING!!! "url" field in CompositeDoc is optional, and is usually missing: e.g., Docjoin
   * CompositeDoc's don't have CompositeDoc::url. has_url() checking is often useful. So don't rely
   * on CompositeDoc::url unless you're sure otherwise. Usually you want to use
   * CompositeDoc::doc::url instead.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * WARNING!!! "url" field in CompositeDoc is optional, and is usually missing: e.g., Docjoin
   * CompositeDoc's don't have CompositeDoc::url. has_url() checking is often useful. So don't rely
   * on CompositeDoc::url unless you're sure otherwise. Usually you want to use
   * CompositeDoc::doc::url instead.
   * @param url url or {@code null} for none
   */
  public CompositeDoc setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * Date in the url extracted by quality/snippets/urldate/date-in-url.cc This is given as midnight
   * GMT on the date in question.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUrldate() {
    return urldate;
  }

  /**
   * Date in the url extracted by quality/snippets/urldate/date-in-url.cc This is given as midnight
   * GMT on the date in question.
   * @param urldate urldate or {@code null} for none
   */
  public CompositeDoc setUrldate(java.lang.Long urldate) {
    this.urldate = urldate;
    return this;
  }

  @Override
  public CompositeDoc set(String fieldName, Object value) {
    return (CompositeDoc) super.set(fieldName, value);
  }

  @Override
  public CompositeDoc clone() {
    return (CompositeDoc) super.clone();
  }

}
