/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Used to describe the parking facilities provided by or available to a feature. Features of
 * TYPE_ROAD or TYPE_COMPOUND can have a ParkingProto (with parking_provider_feature unset) that
 * describes the parking facilities provided by that feature. Features of TYPE_COMPOUND or
 * TYPE_ESTABLISHMENT_POI can have a ParkingProto (with parking_provider_feature set) to indicate
 * that the feature has dedicated parking and provide details about it, and defer some details of
 * the parking facilities to the referent feature(s). ParkingProto is maintained by the Harbor Pilot
 * team (go/harbor-pilot). Detailed modeling information is described at go/parking-schema.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreParkingProto extends com.google.api.client.json.GenericJson {

  /**
   * Describes the parking allowances for the feature, which are the situations and requirements
   * under which one is permitted to park at the feature’s parking facilities, or discounts that a
   * user may be eligible for.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreParkingAllowanceProto> allowance;

  static {
    // hack to force ProGuard to consider GeostoreParkingAllowanceProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreParkingAllowanceProto.class);
  }

  /**
   * Hours in which the parking facility is open; that is, permits both arrivals and departures of
   * the facility. Should only be set on compounds (i.e. parking lots or garages); roads are
   * considered to always be “open,” though parking at certain times may be prohibited via
   * restrictions. If unset on a compound, this suggests we don’t know the opening hours, or they
   * are the same as the hours of the entity for which this feature offers parking facilities.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreOpeningHoursProto openingHours;

  /**
   * Indicates whether long-term parking is available at the feature; if true, long-term parking is
   * available at the feature and parking allowances may be present on this feature, or
   * parking_provider_feature may indicate defered parking feature(s). If false, this is an explicit
   * statement that there is no long-term parking associated with this feature. If unset, we don't
   * know whether there is long-term parking associated with this feature. If false or unset, only
   * additional restrictions or short-term allowances will be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean parkingAvailable;

  /**
   * If empty, indicates that the feature containing this ParkingProto provides parking facilities,
   * which are described by this proto. If nonempty, indicates that the feature with this
   * ParkingProto does not contain parking facilities itself, but visitors of this feature may use
   * the parking available to the referent feature(s). The referent feature(s) may themselves
   * contain parking facilities or defer to other features. A ParkingProto may defer parking details
   * to another feature, but still include its own data. This suggests that a visitor of the
   * referrer feature is eligible for different rates or discounts. The data in these fields applies
   * transitively, and any fields in a referrer may be applied to the referent (for a visitor of the
   * referrer).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> parkingProviderFeature;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * Describes any parking restrictions that apply to this feature. Should only be set on road
   * segments for which parking is explicitly prohibited for some or all times; for roads which do
   * not prohibit parking and for all other facilities, the ability to park should be expressed
   * using allowances. In the instance that both a restriction and an allowance applies at a given
   * time, restrictions always have precedence over the same parking allowances. However, explicit
   * short-term allowances (PICKUP_GOODS, PICKUP_PASSENGERS) take precedence over general
   * NO_PARKING, NO_STANDING, or NO_STOPPING restrictions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreParkingRestrictionProto> restriction;

  /**
   * Describes the parking allowances for the feature, which are the situations and requirements
   * under which one is permitted to park at the feature’s parking facilities, or discounts that a
   * user may be eligible for.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreParkingAllowanceProto> getAllowance() {
    return allowance;
  }

  /**
   * Describes the parking allowances for the feature, which are the situations and requirements
   * under which one is permitted to park at the feature’s parking facilities, or discounts that a
   * user may be eligible for.
   * @param allowance allowance or {@code null} for none
   */
  public GeostoreParkingProto setAllowance(java.util.List<GeostoreParkingAllowanceProto> allowance) {
    this.allowance = allowance;
    return this;
  }

  /**
   * Hours in which the parking facility is open; that is, permits both arrivals and departures of
   * the facility. Should only be set on compounds (i.e. parking lots or garages); roads are
   * considered to always be “open,” though parking at certain times may be prohibited via
   * restrictions. If unset on a compound, this suggests we don’t know the opening hours, or they
   * are the same as the hours of the entity for which this feature offers parking facilities.
   * @return value or {@code null} for none
   */
  public GeostoreOpeningHoursProto getOpeningHours() {
    return openingHours;
  }

  /**
   * Hours in which the parking facility is open; that is, permits both arrivals and departures of
   * the facility. Should only be set on compounds (i.e. parking lots or garages); roads are
   * considered to always be “open,” though parking at certain times may be prohibited via
   * restrictions. If unset on a compound, this suggests we don’t know the opening hours, or they
   * are the same as the hours of the entity for which this feature offers parking facilities.
   * @param openingHours openingHours or {@code null} for none
   */
  public GeostoreParkingProto setOpeningHours(GeostoreOpeningHoursProto openingHours) {
    this.openingHours = openingHours;
    return this;
  }

  /**
   * Indicates whether long-term parking is available at the feature; if true, long-term parking is
   * available at the feature and parking allowances may be present on this feature, or
   * parking_provider_feature may indicate defered parking feature(s). If false, this is an explicit
   * statement that there is no long-term parking associated with this feature. If unset, we don't
   * know whether there is long-term parking associated with this feature. If false or unset, only
   * additional restrictions or short-term allowances will be populated.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getParkingAvailable() {
    return parkingAvailable;
  }

  /**
   * Indicates whether long-term parking is available at the feature; if true, long-term parking is
   * available at the feature and parking allowances may be present on this feature, or
   * parking_provider_feature may indicate defered parking feature(s). If false, this is an explicit
   * statement that there is no long-term parking associated with this feature. If unset, we don't
   * know whether there is long-term parking associated with this feature. If false or unset, only
   * additional restrictions or short-term allowances will be populated.
   * @param parkingAvailable parkingAvailable or {@code null} for none
   */
  public GeostoreParkingProto setParkingAvailable(java.lang.Boolean parkingAvailable) {
    this.parkingAvailable = parkingAvailable;
    return this;
  }

  /**
   * If empty, indicates that the feature containing this ParkingProto provides parking facilities,
   * which are described by this proto. If nonempty, indicates that the feature with this
   * ParkingProto does not contain parking facilities itself, but visitors of this feature may use
   * the parking available to the referent feature(s). The referent feature(s) may themselves
   * contain parking facilities or defer to other features. A ParkingProto may defer parking details
   * to another feature, but still include its own data. This suggests that a visitor of the
   * referrer feature is eligible for different rates or discounts. The data in these fields applies
   * transitively, and any fields in a referrer may be applied to the referent (for a visitor of the
   * referrer).
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getParkingProviderFeature() {
    return parkingProviderFeature;
  }

  /**
   * If empty, indicates that the feature containing this ParkingProto provides parking facilities,
   * which are described by this proto. If nonempty, indicates that the feature with this
   * ParkingProto does not contain parking facilities itself, but visitors of this feature may use
   * the parking available to the referent feature(s). The referent feature(s) may themselves
   * contain parking facilities or defer to other features. A ParkingProto may defer parking details
   * to another feature, but still include its own data. This suggests that a visitor of the
   * referrer feature is eligible for different rates or discounts. The data in these fields applies
   * transitively, and any fields in a referrer may be applied to the referent (for a visitor of the
   * referrer).
   * @param parkingProviderFeature parkingProviderFeature or {@code null} for none
   */
  public GeostoreParkingProto setParkingProviderFeature(java.util.List<GeostoreFeatureIdProto> parkingProviderFeature) {
    this.parkingProviderFeature = parkingProviderFeature;
    return this;
  }

  /**
   * Describes any parking restrictions that apply to this feature. Should only be set on road
   * segments for which parking is explicitly prohibited for some or all times; for roads which do
   * not prohibit parking and for all other facilities, the ability to park should be expressed
   * using allowances. In the instance that both a restriction and an allowance applies at a given
   * time, restrictions always have precedence over the same parking allowances. However, explicit
   * short-term allowances (PICKUP_GOODS, PICKUP_PASSENGERS) take precedence over general
   * NO_PARKING, NO_STANDING, or NO_STOPPING restrictions.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreParkingRestrictionProto> getRestriction() {
    return restriction;
  }

  /**
   * Describes any parking restrictions that apply to this feature. Should only be set on road
   * segments for which parking is explicitly prohibited for some or all times; for roads which do
   * not prohibit parking and for all other facilities, the ability to park should be expressed
   * using allowances. In the instance that both a restriction and an allowance applies at a given
   * time, restrictions always have precedence over the same parking allowances. However, explicit
   * short-term allowances (PICKUP_GOODS, PICKUP_PASSENGERS) take precedence over general
   * NO_PARKING, NO_STANDING, or NO_STOPPING restrictions.
   * @param restriction restriction or {@code null} for none
   */
  public GeostoreParkingProto setRestriction(java.util.List<GeostoreParkingRestrictionProto> restriction) {
    this.restriction = restriction;
    return this;
  }

  @Override
  public GeostoreParkingProto set(String fieldName, Object value) {
    return (GeostoreParkingProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreParkingProto clone() {
    return (GeostoreParkingProto) super.clone();
  }

}
