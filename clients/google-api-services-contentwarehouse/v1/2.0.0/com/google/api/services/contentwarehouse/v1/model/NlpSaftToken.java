/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A document token marks a span of bytes in the document text as a token or word. Next available
 * index: 16.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSaftToken extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String breakLevel;

  /**
   * Whether the break skipped over non-tag text (excluding script/style).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean breakSkippedText;

  /**
   * Coarse-grained word category for token. See README.categories for category inventory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer end;

  /**
   * Head of this token in the dependency tree: the id of the token which has an arc going to this
   * one. If it is the root token of a sentence, then it is set to -1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer head;

  /**
   * Annotation for this token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet info;

  /**
   * Label for dependency relation between this token and its head. See README.labels for label
   * inventory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * Word lemma. This is only filled if the lemma is different from the word form.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lemma;

  /**
   * Morphology information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSaftMorphology morph;

  /**
   * A string representation (typically four letters, sometimes longer) of the token's Unicode
   * script code, based on BCP 47/CLDR, capitalized according to ISO 15924. See
   * i18n/identifiers/scriptcode.h for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scriptCode;

  /**
   * [start, end] describe the inclusive byte range of the UTF-8 encoded token in document.text. End
   * gives the index of the last byte, which may be a UTF-8 continuation byte, and the length in
   * bytes is end - start + 1. begin/end options are for goldmine AnnotationsFinder to locate the
   * offsets of saft tokens. Start is inclusive by default and end is marked.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer start;

  /**
   * Part-of-speech tag for token. See README.tags for tag inventory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tag;

  /**
   * Confidence score for the tag prediction -- should be interpreted as a probability estimate that
   * the tag is correct.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float tagConfidence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long textProperties;

  /**
   * Token word form. This may not be identical to the original. For example, in goldmine annotation
   * we do UTF-8 normalization and punctuation normalization. The punctuation normalization includes
   * inferring the directionality of straight doublequotes -- that is, we map " to open quote (``)
   * or close quote (''), and sometimes we get it wrong. SAFT processing in other contexts (such as
   * queries in qrewrite) involves different normalizations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String word;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getBreakLevel() {
    return breakLevel;
  }

  /**
   * @param breakLevel breakLevel or {@code null} for none
   */
  public NlpSaftToken setBreakLevel(java.lang.String breakLevel) {
    this.breakLevel = breakLevel;
    return this;
  }

  /**
   * Whether the break skipped over non-tag text (excluding script/style).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBreakSkippedText() {
    return breakSkippedText;
  }

  /**
   * Whether the break skipped over non-tag text (excluding script/style).
   * @param breakSkippedText breakSkippedText or {@code null} for none
   */
  public NlpSaftToken setBreakSkippedText(java.lang.Boolean breakSkippedText) {
    this.breakSkippedText = breakSkippedText;
    return this;
  }

  /**
   * Coarse-grained word category for token. See README.categories for category inventory.
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * Coarse-grained word category for token. See README.categories for category inventory.
   * @param category category or {@code null} for none
   */
  public NlpSaftToken setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * @param end end or {@code null} for none
   */
  public NlpSaftToken setEnd(java.lang.Integer end) {
    this.end = end;
    return this;
  }

  /**
   * Head of this token in the dependency tree: the id of the token which has an arc going to this
   * one. If it is the root token of a sentence, then it is set to -1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHead() {
    return head;
  }

  /**
   * Head of this token in the dependency tree: the id of the token which has an arc going to this
   * one. If it is the root token of a sentence, then it is set to -1.
   * @param head head or {@code null} for none
   */
  public NlpSaftToken setHead(java.lang.Integer head) {
    this.head = head;
    return this;
  }

  /**
   * Annotation for this token.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getInfo() {
    return info;
  }

  /**
   * Annotation for this token.
   * @param info info or {@code null} for none
   */
  public NlpSaftToken setInfo(Proto2BridgeMessageSet info) {
    this.info = info;
    return this;
  }

  /**
   * Label for dependency relation between this token and its head. See README.labels for label
   * inventory.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * Label for dependency relation between this token and its head. See README.labels for label
   * inventory.
   * @param label label or {@code null} for none
   */
  public NlpSaftToken setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * Word lemma. This is only filled if the lemma is different from the word form.
   * @return value or {@code null} for none
   */
  public java.lang.String getLemma() {
    return lemma;
  }

  /**
   * Word lemma. This is only filled if the lemma is different from the word form.
   * @param lemma lemma or {@code null} for none
   */
  public NlpSaftToken setLemma(java.lang.String lemma) {
    this.lemma = lemma;
    return this;
  }

  /**
   * Morphology information.
   * @return value or {@code null} for none
   */
  public NlpSaftMorphology getMorph() {
    return morph;
  }

  /**
   * Morphology information.
   * @param morph morph or {@code null} for none
   */
  public NlpSaftToken setMorph(NlpSaftMorphology morph) {
    this.morph = morph;
    return this;
  }

  /**
   * A string representation (typically four letters, sometimes longer) of the token's Unicode
   * script code, based on BCP 47/CLDR, capitalized according to ISO 15924. See
   * i18n/identifiers/scriptcode.h for details.
   * @return value or {@code null} for none
   */
  public java.lang.String getScriptCode() {
    return scriptCode;
  }

  /**
   * A string representation (typically four letters, sometimes longer) of the token's Unicode
   * script code, based on BCP 47/CLDR, capitalized according to ISO 15924. See
   * i18n/identifiers/scriptcode.h for details.
   * @param scriptCode scriptCode or {@code null} for none
   */
  public NlpSaftToken setScriptCode(java.lang.String scriptCode) {
    this.scriptCode = scriptCode;
    return this;
  }

  /**
   * [start, end] describe the inclusive byte range of the UTF-8 encoded token in document.text. End
   * gives the index of the last byte, which may be a UTF-8 continuation byte, and the length in
   * bytes is end - start + 1. begin/end options are for goldmine AnnotationsFinder to locate the
   * offsets of saft tokens. Start is inclusive by default and end is marked.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * [start, end] describe the inclusive byte range of the UTF-8 encoded token in document.text. End
   * gives the index of the last byte, which may be a UTF-8 continuation byte, and the length in
   * bytes is end - start + 1. begin/end options are for goldmine AnnotationsFinder to locate the
   * offsets of saft tokens. Start is inclusive by default and end is marked.
   * @param start start or {@code null} for none
   */
  public NlpSaftToken setStart(java.lang.Integer start) {
    this.start = start;
    return this;
  }

  /**
   * Part-of-speech tag for token. See README.tags for tag inventory.
   * @return value or {@code null} for none
   */
  public java.lang.String getTag() {
    return tag;
  }

  /**
   * Part-of-speech tag for token. See README.tags for tag inventory.
   * @param tag tag or {@code null} for none
   */
  public NlpSaftToken setTag(java.lang.String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Confidence score for the tag prediction -- should be interpreted as a probability estimate that
   * the tag is correct.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTagConfidence() {
    return tagConfidence;
  }

  /**
   * Confidence score for the tag prediction -- should be interpreted as a probability estimate that
   * the tag is correct.
   * @param tagConfidence tagConfidence or {@code null} for none
   */
  public NlpSaftToken setTagConfidence(java.lang.Float tagConfidence) {
    this.tagConfidence = tagConfidence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getTextProperties() {
    return textProperties;
  }

  /**
   * @param textProperties textProperties or {@code null} for none
   */
  public NlpSaftToken setTextProperties(java.lang.Long textProperties) {
    this.textProperties = textProperties;
    return this;
  }

  /**
   * Token word form. This may not be identical to the original. For example, in goldmine annotation
   * we do UTF-8 normalization and punctuation normalization. The punctuation normalization includes
   * inferring the directionality of straight doublequotes -- that is, we map " to open quote (``)
   * or close quote (''), and sometimes we get it wrong. SAFT processing in other contexts (such as
   * queries in qrewrite) involves different normalizations.
   * @return value or {@code null} for none
   */
  public java.lang.String getWord() {
    return word;
  }

  /**
   * Token word form. This may not be identical to the original. For example, in goldmine annotation
   * we do UTF-8 normalization and punctuation normalization. The punctuation normalization includes
   * inferring the directionality of straight doublequotes -- that is, we map " to open quote (``)
   * or close quote (''), and sometimes we get it wrong. SAFT processing in other contexts (such as
   * queries in qrewrite) involves different normalizations.
   * @param word word or {@code null} for none
   */
  public NlpSaftToken setWord(java.lang.String word) {
    this.word = word;
    return this;
  }

  @Override
  public NlpSaftToken set(String fieldName, Object value) {
    return (NlpSaftToken) super.set(fieldName, value);
  }

  @Override
  public NlpSaftToken clone() {
    return (NlpSaftToken) super.clone();
  }

}
