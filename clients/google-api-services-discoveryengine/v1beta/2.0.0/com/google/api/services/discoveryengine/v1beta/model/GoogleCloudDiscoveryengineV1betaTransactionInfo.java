/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1beta.model;

/**
 * A transaction represents the entire purchase transaction.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1betaTransactionInfo extends com.google.api.client.json.GenericJson {

  /**
   * All the costs associated with the products. These can be manufacturing costs, shipping expenses
   * not borne by the end user, or any other costs, such that: * Profit = value - tax - cost
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float cost;

  /**
   * Required. Currency code. Use three-character ISO-4217 code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currency;

  /**
   * The total discount(s) value applied to this transaction. This figure should be excluded from
   * TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal
   * (pre-discount) value of the transaction is the sum of TransactionInfo.value and
   * TransactionInfo.discount_value This means that profit is calculated the same way, regardless of
   * the discount value, and that TransactionInfo.discount_value can be larger than
   * TransactionInfo.value: * Profit = value - tax - cost
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float discountValue;

  /**
   * All the taxes associated with the transaction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float tax;

  /**
   * The transaction ID with a length limit of 128 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transactionId;

  /**
   * Required. Total non-zero value associated with the transaction. This value may include
   * shipping, tax, or other adjustments to the total value that you want to include.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float value;

  /**
   * All the costs associated with the products. These can be manufacturing costs, shipping expenses
   * not borne by the end user, or any other costs, such that: * Profit = value - tax - cost
   * @return value or {@code null} for none
   */
  public java.lang.Float getCost() {
    return cost;
  }

  /**
   * All the costs associated with the products. These can be manufacturing costs, shipping expenses
   * not borne by the end user, or any other costs, such that: * Profit = value - tax - cost
   * @param cost cost or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setCost(java.lang.Float cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Required. Currency code. Use three-character ISO-4217 code.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrency() {
    return currency;
  }

  /**
   * Required. Currency code. Use three-character ISO-4217 code.
   * @param currency currency or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The total discount(s) value applied to this transaction. This figure should be excluded from
   * TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal
   * (pre-discount) value of the transaction is the sum of TransactionInfo.value and
   * TransactionInfo.discount_value This means that profit is calculated the same way, regardless of
   * the discount value, and that TransactionInfo.discount_value can be larger than
   * TransactionInfo.value: * Profit = value - tax - cost
   * @return value or {@code null} for none
   */
  public java.lang.Float getDiscountValue() {
    return discountValue;
  }

  /**
   * The total discount(s) value applied to this transaction. This figure should be excluded from
   * TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal
   * (pre-discount) value of the transaction is the sum of TransactionInfo.value and
   * TransactionInfo.discount_value This means that profit is calculated the same way, regardless of
   * the discount value, and that TransactionInfo.discount_value can be larger than
   * TransactionInfo.value: * Profit = value - tax - cost
   * @param discountValue discountValue or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setDiscountValue(java.lang.Float discountValue) {
    this.discountValue = discountValue;
    return this;
  }

  /**
   * All the taxes associated with the transaction.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTax() {
    return tax;
  }

  /**
   * All the taxes associated with the transaction.
   * @param tax tax or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setTax(java.lang.Float tax) {
    this.tax = tax;
    return this;
  }

  /**
   * The transaction ID with a length limit of 128 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }

  /**
   * The transaction ID with a length limit of 128 characters.
   * @param transactionId transactionId or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setTransactionId(java.lang.String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Required. Total non-zero value associated with the transaction. This value may include
   * shipping, tax, or other adjustments to the total value that you want to include.
   * @return value or {@code null} for none
   */
  public java.lang.Float getValue() {
    return value;
  }

  /**
   * Required. Total non-zero value associated with the transaction. This value may include
   * shipping, tax, or other adjustments to the total value that you want to include.
   * @param value value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaTransactionInfo setValue(java.lang.Float value) {
    this.value = value;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaTransactionInfo set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1betaTransactionInfo) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaTransactionInfo clone() {
    return (GoogleCloudDiscoveryengineV1betaTransactionInfo) super.clone();
  }

}
