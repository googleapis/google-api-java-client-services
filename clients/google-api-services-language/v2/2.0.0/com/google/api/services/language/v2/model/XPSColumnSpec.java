/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v2.model;

/**
 * Model definition for XPSColumnSpec.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSColumnSpec extends com.google.api.client.json.GenericJson {

  /**
   * The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the
   * column, which reflects the order of the column inside the table, i.e. 0 means the first column
   * in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and
   * set the order id here when calling RefreshTablesStats and Train. Note: it's different than the
   * column_spec_id that is generated in AutoML BE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer columnId;

  /**
   * The data stats of the column. It's outputed in RefreshTablesStats and a required input for
   * Train.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSDataStats dataStats;

  /**
   * The data type of the column. It's outputed in Preprocess rpc and a required input for
   * RefreshTablesStats and Train.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSDataType dataType;

  /**
   * The display name of the column. It's outputed in Preprocess and a required input for
   * RefreshTablesStats and Train.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSColumnSpecForecastingMetadata forecastingMetadata;

  /**
   * It's outputed in RefreshTablesStats, and a required input in Train.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<XPSColumnSpecCorrelatedColumn> topCorrelatedColumns;

  /**
   * The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the
   * column, which reflects the order of the column inside the table, i.e. 0 means the first column
   * in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and
   * set the order id here when calling RefreshTablesStats and Train. Note: it's different than the
   * column_spec_id that is generated in AutoML BE.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColumnId() {
    return columnId;
  }

  /**
   * The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the
   * column, which reflects the order of the column inside the table, i.e. 0 means the first column
   * in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and
   * set the order id here when calling RefreshTablesStats and Train. Note: it's different than the
   * column_spec_id that is generated in AutoML BE.
   * @param columnId columnId or {@code null} for none
   */
  public XPSColumnSpec setColumnId(java.lang.Integer columnId) {
    this.columnId = columnId;
    return this;
  }

  /**
   * The data stats of the column. It's outputed in RefreshTablesStats and a required input for
   * Train.
   * @return value or {@code null} for none
   */
  public XPSDataStats getDataStats() {
    return dataStats;
  }

  /**
   * The data stats of the column. It's outputed in RefreshTablesStats and a required input for
   * Train.
   * @param dataStats dataStats or {@code null} for none
   */
  public XPSColumnSpec setDataStats(XPSDataStats dataStats) {
    this.dataStats = dataStats;
    return this;
  }

  /**
   * The data type of the column. It's outputed in Preprocess rpc and a required input for
   * RefreshTablesStats and Train.
   * @return value or {@code null} for none
   */
  public XPSDataType getDataType() {
    return dataType;
  }

  /**
   * The data type of the column. It's outputed in Preprocess rpc and a required input for
   * RefreshTablesStats and Train.
   * @param dataType dataType or {@code null} for none
   */
  public XPSColumnSpec setDataType(XPSDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * The display name of the column. It's outputed in Preprocess and a required input for
   * RefreshTablesStats and Train.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name of the column. It's outputed in Preprocess and a required input for
   * RefreshTablesStats and Train.
   * @param displayName displayName or {@code null} for none
   */
  public XPSColumnSpec setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public XPSColumnSpecForecastingMetadata getForecastingMetadata() {
    return forecastingMetadata;
  }

  /**
   * @param forecastingMetadata forecastingMetadata or {@code null} for none
   */
  public XPSColumnSpec setForecastingMetadata(XPSColumnSpecForecastingMetadata forecastingMetadata) {
    this.forecastingMetadata = forecastingMetadata;
    return this;
  }

  /**
   * It's outputed in RefreshTablesStats, and a required input in Train.
   * @return value or {@code null} for none
   */
  public java.util.List<XPSColumnSpecCorrelatedColumn> getTopCorrelatedColumns() {
    return topCorrelatedColumns;
  }

  /**
   * It's outputed in RefreshTablesStats, and a required input in Train.
   * @param topCorrelatedColumns topCorrelatedColumns or {@code null} for none
   */
  public XPSColumnSpec setTopCorrelatedColumns(java.util.List<XPSColumnSpecCorrelatedColumn> topCorrelatedColumns) {
    this.topCorrelatedColumns = topCorrelatedColumns;
    return this;
  }

  @Override
  public XPSColumnSpec set(String fieldName, Object value) {
    return (XPSColumnSpec) super.set(fieldName, value);
  }

  @Override
  public XPSColumnSpec clone() {
    return (XPSColumnSpec) super.clone();
  }

}
