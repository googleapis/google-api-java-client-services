/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigtableadmin.v2.model;

/**
 * `Type` represents the type of data that is written to, read from, or stored in Bigtable. It is
 * heavily based on the GoogleSQL standard to help maintain familiarity and consistency across
 * products and features. For compatibility with Bigtable's existing untyped APIs, each `Type`
 * includes an `Encoding` which describes how to convert to or from the underlying data. Each
 * encoding can operate in one of two modes: - Sorted: In this mode, Bigtable guarantees that
 * `Encode(X) <= Encode(Y)` if and only if `X <= Y`. This is useful anywhere sort order is
 * important, for example when encoding keys. - Distinct: In this mode, Bigtable guarantees that if
 * `X != Y` then `Encode(X) != Encode(Y)`. However, the converse is not guaranteed. For example,
 * both "{'foo': '1', 'bar': '2'}" and "{'bar': '2', 'foo': '1'}" are valid encodings of the same
 * JSON value. The API clearly documents which mode is used wherever an encoding can be configured.
 * Each encoding also documents which values are supported in which modes. For example, when
 * encoding INT64 as a numeric STRING, negative numbers cannot be encoded in sorted mode. This is
 * because `INT64(1) > INT64(-1)`, but `STRING("-00001") > STRING("00001")`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Bigtable Admin API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Type extends com.google.api.client.json.GenericJson {

  /**
   * Aggregate
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeAggregate aggregateType;

  /**
   * Array
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeArray arrayType;

  /**
   * Bool
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeBool boolType;

  /**
   * Bytes
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeBytes bytesType;

  /**
   * Date
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeDate dateType;

  /**
   * Float32
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeFloat32 float32Type;

  /**
   * Float64
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeFloat64 float64Type;

  /**
   * Int64
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeInt64 int64Type;

  /**
   * Map
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeMap mapType;

  /**
   * String
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeString stringType;

  /**
   * Struct
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeStruct structType;

  /**
   * Timestamp
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleBigtableAdminV2TypeTimestamp timestampType;

  /**
   * Aggregate
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeAggregate getAggregateType() {
    return aggregateType;
  }

  /**
   * Aggregate
   * @param aggregateType aggregateType or {@code null} for none
   */
  public Type setAggregateType(GoogleBigtableAdminV2TypeAggregate aggregateType) {
    this.aggregateType = aggregateType;
    return this;
  }

  /**
   * Array
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeArray getArrayType() {
    return arrayType;
  }

  /**
   * Array
   * @param arrayType arrayType or {@code null} for none
   */
  public Type setArrayType(GoogleBigtableAdminV2TypeArray arrayType) {
    this.arrayType = arrayType;
    return this;
  }

  /**
   * Bool
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeBool getBoolType() {
    return boolType;
  }

  /**
   * Bool
   * @param boolType boolType or {@code null} for none
   */
  public Type setBoolType(GoogleBigtableAdminV2TypeBool boolType) {
    this.boolType = boolType;
    return this;
  }

  /**
   * Bytes
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeBytes getBytesType() {
    return bytesType;
  }

  /**
   * Bytes
   * @param bytesType bytesType or {@code null} for none
   */
  public Type setBytesType(GoogleBigtableAdminV2TypeBytes bytesType) {
    this.bytesType = bytesType;
    return this;
  }

  /**
   * Date
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeDate getDateType() {
    return dateType;
  }

  /**
   * Date
   * @param dateType dateType or {@code null} for none
   */
  public Type setDateType(GoogleBigtableAdminV2TypeDate dateType) {
    this.dateType = dateType;
    return this;
  }

  /**
   * Float32
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeFloat32 getFloat32Type() {
    return float32Type;
  }

  /**
   * Float32
   * @param float32Type float32Type or {@code null} for none
   */
  public Type setFloat32Type(GoogleBigtableAdminV2TypeFloat32 float32Type) {
    this.float32Type = float32Type;
    return this;
  }

  /**
   * Float64
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeFloat64 getFloat64Type() {
    return float64Type;
  }

  /**
   * Float64
   * @param float64Type float64Type or {@code null} for none
   */
  public Type setFloat64Type(GoogleBigtableAdminV2TypeFloat64 float64Type) {
    this.float64Type = float64Type;
    return this;
  }

  /**
   * Int64
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeInt64 getInt64Type() {
    return int64Type;
  }

  /**
   * Int64
   * @param int64Type int64Type or {@code null} for none
   */
  public Type setInt64Type(GoogleBigtableAdminV2TypeInt64 int64Type) {
    this.int64Type = int64Type;
    return this;
  }

  /**
   * Map
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeMap getMapType() {
    return mapType;
  }

  /**
   * Map
   * @param mapType mapType or {@code null} for none
   */
  public Type setMapType(GoogleBigtableAdminV2TypeMap mapType) {
    this.mapType = mapType;
    return this;
  }

  /**
   * String
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeString getStringType() {
    return stringType;
  }

  /**
   * String
   * @param stringType stringType or {@code null} for none
   */
  public Type setStringType(GoogleBigtableAdminV2TypeString stringType) {
    this.stringType = stringType;
    return this;
  }

  /**
   * Struct
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeStruct getStructType() {
    return structType;
  }

  /**
   * Struct
   * @param structType structType or {@code null} for none
   */
  public Type setStructType(GoogleBigtableAdminV2TypeStruct structType) {
    this.structType = structType;
    return this;
  }

  /**
   * Timestamp
   * @return value or {@code null} for none
   */
  public GoogleBigtableAdminV2TypeTimestamp getTimestampType() {
    return timestampType;
  }

  /**
   * Timestamp
   * @param timestampType timestampType or {@code null} for none
   */
  public Type setTimestampType(GoogleBigtableAdminV2TypeTimestamp timestampType) {
    this.timestampType = timestampType;
    return this;
  }

  @Override
  public Type set(String fieldName, Object value) {
    return (Type) super.set(fieldName, value);
  }

  @Override
  public Type clone() {
    return (Type) super.clone();
  }

}
