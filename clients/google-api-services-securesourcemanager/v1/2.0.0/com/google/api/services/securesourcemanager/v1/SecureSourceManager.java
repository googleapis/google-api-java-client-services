/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securesourcemanager.v1;

/**
 * Service definition for SecureSourceManager (v1).
 *
 * <p>
 * Regionally deployed, single-tenant managed source code repository hosted on Google Cloud.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/secure-source-manager" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SecureSourceManagerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class SecureSourceManager extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Secure Source Manager API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://securesourcemanager.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://securesourcemanager.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public SecureSourceManager(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  SecureSourceManager(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
   *   {@code SecureSourceManager.Projects.List request = securesourcemanager.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
     *   {@code SecureSourceManager.Locations.List request = securesourcemanager.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the securesourcemanager server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the securesourcemanager server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the securesourcemanager server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the securesourcemanager server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Optional. A list of extra location types that should be used as conditions for
         * controlling the visibility of the locations.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> extraLocationTypes;

        /** Optional. A list of extra location types that should be used as conditions for controlling the
       visibility of the locations.
         */
        public java.util.List<java.lang.String> getExtraLocationTypes() {
          return extraLocationTypes;
        }

        /**
         * Optional. A list of extra location types that should be used as conditions for
         * controlling the visibility of the locations.
         */
        public List setExtraLocationTypes(java.util.List<java.lang.String> extraLocationTypes) {
          this.extraLocationTypes = extraLocationTypes;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Instances collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
       *   {@code SecureSourceManager.Instances.List request = securesourcemanager.instances().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Instances instances() {
        return new Instances();
      }

      /**
       * The "instances" collection of methods.
       */
      public class Instances {

        /**
         * Creates a new instance in a given project and location.
         *
         * Create a request for the method "instances.create".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Value for parent.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Instance}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Instance content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/instances";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new instance in a given project and location.
           *
           * Create a request for the method "instances.create".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Value for parent.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Instance}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Instance content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Value for parent. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Value for parent.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Value for parent. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. ID of the instance to be created. */
          @com.google.api.client.util.Key
          private java.lang.String instanceId;

          /** Required. ID of the instance to be created.
           */
          public java.lang.String getInstanceId() {
            return instanceId;
          }

          /** Required. ID of the instance to be created. */
          public Create setInstanceId(java.lang.String instanceId) {
            this.instanceId = instanceId;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Create setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single instance.
         *
         * Create a request for the method "instances.delete".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Deletes a single instance.
           *
           * Create a request for the method "instances.delete".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Name of the resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. Name of the resource. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes after the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Delete setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single instance.
         *
         * Create a request for the method "instances.get".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Instance> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Gets details of a single instance.
           *
           * Create a request for the method "instances.get".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Instance.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Name of the resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. Name of the resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Gets the access control policy for a resource. Returns an empty policy if the resource exists and
         * does not have a policy set.
         *
         * Create a request for the method "instances.getIamPolicy".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Gets the access control policy for a resource. Returns an empty policy if the resource exists
           * and does not have a policy set.
           *
           * Create a request for the method "instances.getIamPolicy".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          @com.google.api.client.util.Key("options.requestedPolicyVersion")
          private java.lang.Integer optionsRequestedPolicyVersion;

          /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1,
         and 3. Requests specifying an invalid value will be rejected. Requests for policies with any
         conditional role bindings must specify version 3. Policies with no conditional role bindings may
         specify any valid value or leave the field unset. The policy in the response might use the policy
         version that you specified, or it might use a lower policy version. For example, if you specify
         version 3, but the policy has no conditional role bindings, the response uses version 1. To learn
         which resources support conditions in their IAM policies, see the [IAM
         documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public java.lang.Integer getOptionsRequestedPolicyVersion() {
            return optionsRequestedPolicyVersion;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public GetIamPolicy setOptionsRequestedPolicyVersion(java.lang.Integer optionsRequestedPolicyVersion) {
            this.optionsRequestedPolicyVersion = optionsRequestedPolicyVersion;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Lists Instances in a given project and location.
         *
         * Create a request for the method "instances.list".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Parent value for ListInstancesRequest.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListInstancesResponse> {

          private static final String REST_PATH = "v1/{+parent}/instances";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists Instances in a given project and location.
           *
           * Create a request for the method "instances.list".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Parent value for ListInstancesRequest.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListInstancesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Parent value for ListInstancesRequest. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Parent value for ListInstancesRequest.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Parent value for ListInstancesRequest. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Filter for filtering results. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Filter for filtering results.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Filter for filtering results. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Hint for how to order the results. */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Hint for how to order the results.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /** Hint for how to order the results. */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Requested page size. Server may return fewer items than requested. If unspecified,
           * server will pick an appropriate default.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Requested page size. Server may return fewer items than requested. If unspecified, server will pick
         an appropriate default.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Requested page size. Server may return fewer items than requested. If unspecified,
           * server will pick an appropriate default.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** A token identifying a page of results the server should return. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token identifying a page of results the server should return.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** A token identifying a page of results the server should return. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Sets the access control policy on the specified resource. Replaces any existing policy. Can
         * return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
         *
         * Create a request for the method "instances.setIamPolicy".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Sets the access control policy on the specified resource. Replaces any existing policy. Can
           * return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
           *
           * Create a request for the method "instances.setIamPolicy".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being specified. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist,
         * this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is
         * designed to be used for building permission-aware UIs and command-line tools, not for
         * authorization checking. This operation may "fail open" without warning.
         *
         * Create a request for the method "instances.testIamPermissions".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Returns permissions that a caller has on the specified resource. If the resource does not
           * exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
           * operation is designed to be used for building permission-aware UIs and command-line tools, not
           * for authorization checking. This operation may "fail open" without warning.
           *
           * Create a request for the method "instances.testIamPermissions".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
           * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
           * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
       *   {@code SecureSourceManager.Operations.List request = securesourcemanager.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.CancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.CancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Cancel#execute()} method to invoke the remote
           * operation. <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.CancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.CancelOperationRequest content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Repositories collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
       *   {@code SecureSourceManager.Repositories.List request = securesourcemanager.repositories().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Repositories repositories() {
        return new Repositories();
      }

      /**
       * The "repositories" collection of methods.
       */
      public class Repositories {

        /**
         * Creates a new repository in a given project and location. The Repository.Instance field is
         * required in the request body for requests using the securesourcemanager.googleapis.com endpoint.
         *
         * Create a request for the method "repositories.create".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project in which to create the repository. Values are of the form
         *        `projects/{project_number}/locations/{location_id}`
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Repository}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Repository content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/repositories";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new repository in a given project and location. The Repository.Instance field is
           * required in the request body for requests using the securesourcemanager.googleapis.com
           * endpoint.
           *
           * Create a request for the method "repositories.create".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project in which to create the repository. Values are of the form
         *        `projects/{project_number}/locations/{location_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Repository}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Repository content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project in which to create the repository. Values are of the form
           * `projects/{project_number}/locations/{location_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project in which to create the repository. Values are of the form
         `projects/{project_number}/locations/{location_id}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project in which to create the repository. Values are of the form
           * `projects/{project_number}/locations/{location_id}`
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The ID to use for the repository, which will become the final component of
           * the repository's resource name. This value should be 4-63 characters, and valid
           * characters are /a-z-/.
           */
          @com.google.api.client.util.Key
          private java.lang.String repositoryId;

          /** Required. The ID to use for the repository, which will become the final component of the
         repository's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
           */
          public java.lang.String getRepositoryId() {
            return repositoryId;
          }

          /**
           * Required. The ID to use for the repository, which will become the final component of
           * the repository's resource name. This value should be 4-63 characters, and valid
           * characters are /a-z-/.
           */
          public Create setRepositoryId(java.lang.String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a Repository.
         *
         * Create a request for the method "repositories.delete".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the repository to delete. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Deletes a Repository.
           *
           * Create a request for the method "repositories.delete".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the repository to delete. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the repository to delete. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the repository to delete. The format is
         `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the repository to delete. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If set to true, and the repository is not found, the request will succeed but
           * no action will be taken on the server.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If set to true, and the repository is not found, the request will succeed but no action
         will be taken on the server.
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If set to true, and the repository is not found, the request will succeed but
           * no action will be taken on the server.
           */
          public Delete setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Fetches a blob from a repository.
         *
         * Create a request for the method "repositories.fetchBlob".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link FetchBlob#execute()} method to invoke the remote operation.
         *
         * @param repository Required. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         *        Specifies the repository containing the blob.
         * @return the request
         */
        public FetchBlob fetchBlob(java.lang.String repository) throws java.io.IOException {
          FetchBlob result = new FetchBlob(repository);
          initialize(result);
          return result;
        }

        public class FetchBlob extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.FetchBlobResponse> {

          private static final String REST_PATH = "v1/{+repository}:fetchBlob";

          private final java.util.regex.Pattern REPOSITORY_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Fetches a blob from a repository.
           *
           * Create a request for the method "repositories.fetchBlob".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link FetchBlob#execute()} method to invoke the remote
           * operation. <p> {@link
           * FetchBlob#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param repository Required. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         *        Specifies the repository containing the blob.
           * @since 1.13
           */
          protected FetchBlob(java.lang.String repository) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.FetchBlobResponse.class);
            this.repository = com.google.api.client.util.Preconditions.checkNotNull(repository, "Required parameter repository must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(REPOSITORY_PATTERN.matcher(repository).matches(),
                  "Parameter repository must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public FetchBlob set$Xgafv(java.lang.String $Xgafv) {
            return (FetchBlob) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchBlob setAccessToken(java.lang.String accessToken) {
            return (FetchBlob) super.setAccessToken(accessToken);
          }

          @Override
          public FetchBlob setAlt(java.lang.String alt) {
            return (FetchBlob) super.setAlt(alt);
          }

          @Override
          public FetchBlob setCallback(java.lang.String callback) {
            return (FetchBlob) super.setCallback(callback);
          }

          @Override
          public FetchBlob setFields(java.lang.String fields) {
            return (FetchBlob) super.setFields(fields);
          }

          @Override
          public FetchBlob setKey(java.lang.String key) {
            return (FetchBlob) super.setKey(key);
          }

          @Override
          public FetchBlob setOauthToken(java.lang.String oauthToken) {
            return (FetchBlob) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchBlob setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchBlob) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchBlob setQuotaUser(java.lang.String quotaUser) {
            return (FetchBlob) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchBlob setUploadType(java.lang.String uploadType) {
            return (FetchBlob) super.setUploadType(uploadType);
          }

          @Override
          public FetchBlob setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchBlob) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * Specifies the repository containing the blob.
           */
          @com.google.api.client.util.Key
          private java.lang.String repository;

          /** Required. The format is
         `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`. Specifies the
         repository containing the blob.
           */
          public java.lang.String getRepository() {
            return repository;
          }

          /**
           * Required. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * Specifies the repository containing the blob.
           */
          public FetchBlob setRepository(java.lang.String repository) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(REPOSITORY_PATTERN.matcher(repository).matches(),
                  "Parameter repository must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.repository = repository;
            return this;
          }

          /** Required. The SHA-1 hash of the blob to retrieve. */
          @com.google.api.client.util.Key
          private java.lang.String sha;

          /** Required. The SHA-1 hash of the blob to retrieve.
           */
          public java.lang.String getSha() {
            return sha;
          }

          /** Required. The SHA-1 hash of the blob to retrieve. */
          public FetchBlob setSha(java.lang.String sha) {
            this.sha = sha;
            return this;
          }

          @Override
          public FetchBlob set(String parameterName, Object value) {
            return (FetchBlob) super.set(parameterName, value);
          }
        }
        /**
         * Fetches a tree from a repository.
         *
         * Create a request for the method "repositories.fetchTree".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link FetchTree#execute()} method to invoke the remote operation.
         *
         * @param repository Required. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         *        Specifies the repository to fetch the tree from.
         * @return the request
         */
        public FetchTree fetchTree(java.lang.String repository) throws java.io.IOException {
          FetchTree result = new FetchTree(repository);
          initialize(result);
          return result;
        }

        public class FetchTree extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.FetchTreeResponse> {

          private static final String REST_PATH = "v1/{+repository}:fetchTree";

          private final java.util.regex.Pattern REPOSITORY_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Fetches a tree from a repository.
           *
           * Create a request for the method "repositories.fetchTree".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link FetchTree#execute()} method to invoke the remote
           * operation. <p> {@link
           * FetchTree#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param repository Required. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         *        Specifies the repository to fetch the tree from.
           * @since 1.13
           */
          protected FetchTree(java.lang.String repository) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.FetchTreeResponse.class);
            this.repository = com.google.api.client.util.Preconditions.checkNotNull(repository, "Required parameter repository must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(REPOSITORY_PATTERN.matcher(repository).matches(),
                  "Parameter repository must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public FetchTree set$Xgafv(java.lang.String $Xgafv) {
            return (FetchTree) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchTree setAccessToken(java.lang.String accessToken) {
            return (FetchTree) super.setAccessToken(accessToken);
          }

          @Override
          public FetchTree setAlt(java.lang.String alt) {
            return (FetchTree) super.setAlt(alt);
          }

          @Override
          public FetchTree setCallback(java.lang.String callback) {
            return (FetchTree) super.setCallback(callback);
          }

          @Override
          public FetchTree setFields(java.lang.String fields) {
            return (FetchTree) super.setFields(fields);
          }

          @Override
          public FetchTree setKey(java.lang.String key) {
            return (FetchTree) super.setKey(key);
          }

          @Override
          public FetchTree setOauthToken(java.lang.String oauthToken) {
            return (FetchTree) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchTree setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchTree) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchTree setQuotaUser(java.lang.String quotaUser) {
            return (FetchTree) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchTree setUploadType(java.lang.String uploadType) {
            return (FetchTree) super.setUploadType(uploadType);
          }

          @Override
          public FetchTree setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchTree) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * Specifies the repository to fetch the tree from.
           */
          @com.google.api.client.util.Key
          private java.lang.String repository;

          /** Required. The format is
         `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`. Specifies the
         repository to fetch the tree from.
           */
          public java.lang.String getRepository() {
            return repository;
          }

          /**
           * Required. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * Specifies the repository to fetch the tree from.
           */
          public FetchTree setRepository(java.lang.String repository) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(REPOSITORY_PATTERN.matcher(repository).matches(),
                  "Parameter repository must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.repository = repository;
            return this;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, at most 10,000 items will be returned.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, at
         most 10,000 items will be returned.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, at most 10,000 items will be returned.
           */
          public FetchTree setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Optional. A token identifying a page of results the server should return. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A token identifying a page of results the server should return.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Optional. A token identifying a page of results the server should return. */
          public FetchTree setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Optional. If true, include all subfolders and their files in the response. If false,
           * only the immediate children are returned.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean recursive;

          /** Optional. If true, include all subfolders and their files in the response. If false, only the
         immediate children are returned.
           */
          public java.lang.Boolean getRecursive() {
            return recursive;
          }

          /**
           * Optional. If true, include all subfolders and their files in the response. If false,
           * only the immediate children are returned.
           */
          public FetchTree setRecursive(java.lang.Boolean recursive) {
            this.recursive = recursive;
            return this;
          }

          /**
           * Optional. `ref` can be a SHA-1 hash, a branch name, or a tag. Specifies which tree to
           * fetch. If not specified, the default branch will be used.
           */
          @com.google.api.client.util.Key
          private java.lang.String ref;

          /** Optional. `ref` can be a SHA-1 hash, a branch name, or a tag. Specifies which tree to fetch. If not
         specified, the default branch will be used.
           */
          public java.lang.String getRef() {
            return ref;
          }

          /**
           * Optional. `ref` can be a SHA-1 hash, a branch name, or a tag. Specifies which tree to
           * fetch. If not specified, the default branch will be used.
           */
          public FetchTree setRef(java.lang.String ref) {
            this.ref = ref;
            return this;
          }

          @Override
          public FetchTree set(String parameterName, Object value) {
            return (FetchTree) super.set(parameterName, value);
          }
        }
        /**
         * Gets metadata of a repository.
         *
         * Create a request for the method "repositories.get".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the repository to retrieve. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Repository> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Gets metadata of a repository.
           *
           * Create a request for the method "repositories.get".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the repository to retrieve. The format is
         *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Repository.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the repository to retrieve. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the repository to retrieve. The format is
         `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the repository to retrieve. The format is
           * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Get IAM policy for a repository.
         *
         * Create a request for the method "repositories.getIamPolicy".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Get IAM policy for a repository.
           *
           * Create a request for the method "repositories.getIamPolicy".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          @com.google.api.client.util.Key("options.requestedPolicyVersion")
          private java.lang.Integer optionsRequestedPolicyVersion;

          /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1,
         and 3. Requests specifying an invalid value will be rejected. Requests for policies with any
         conditional role bindings must specify version 3. Policies with no conditional role bindings may
         specify any valid value or leave the field unset. The policy in the response might use the policy
         version that you specified, or it might use a lower policy version. For example, if you specify
         version 3, but the policy has no conditional role bindings, the response uses version 1. To learn
         which resources support conditions in their IAM policies, see the [IAM
         documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public java.lang.Integer getOptionsRequestedPolicyVersion() {
            return optionsRequestedPolicyVersion;
          }

          /**
           * Optional. The maximum policy version that will be used to format the policy. Valid
           * values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests
           * for policies with any conditional role bindings must specify version 3. Policies with
           * no conditional role bindings may specify any valid value or leave the field unset. The
           * policy in the response might use the policy version that you specified, or it might use
           * a lower policy version. For example, if you specify version 3, but the policy has no
           * conditional role bindings, the response uses version 1. To learn which resources
           * support conditions in their IAM policies, see the [IAM
           * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
           */
          public GetIamPolicy setOptionsRequestedPolicyVersion(java.lang.Integer optionsRequestedPolicyVersion) {
            this.optionsRequestedPolicyVersion = optionsRequestedPolicyVersion;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Lists Repositories in a given project and location. The instance field is required in the query
         * parameter for requests using the securesourcemanager.googleapis.com endpoint.
         *
         * Create a request for the method "repositories.list".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Parent value for ListRepositoriesRequest.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListRepositoriesResponse> {

          private static final String REST_PATH = "v1/{+parent}/repositories";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists Repositories in a given project and location. The instance field is required in the query
           * parameter for requests using the securesourcemanager.googleapis.com endpoint.
           *
           * Create a request for the method "repositories.list".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Parent value for ListRepositoriesRequest.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListRepositoriesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Parent value for ListRepositoriesRequest. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Parent value for ListRepositoriesRequest.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Parent value for ListRepositoriesRequest. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter results. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter results.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter results. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. The name of the instance in which the repository is hosted, formatted as
           * `projects/{project_number}/locations/{location_id}/instances/{instance_id}`. When
           * listing repositories via securesourcemanager.googleapis.com, this field is required.
           * When listing repositories via *.sourcemanager.dev, this field is ignored.
           */
          @com.google.api.client.util.Key
          private java.lang.String instance;

          /** Optional. The name of the instance in which the repository is hosted, formatted as
         `projects/{project_number}/locations/{location_id}/instances/{instance_id}`. When listing
         repositories via securesourcemanager.googleapis.com, this field is required. When listing
         repositories via *.sourcemanager.dev, this field is ignored.
           */
          public java.lang.String getInstance() {
            return instance;
          }

          /**
           * Optional. The name of the instance in which the repository is hosted, formatted as
           * `projects/{project_number}/locations/{location_id}/instances/{instance_id}`. When
           * listing repositories via securesourcemanager.googleapis.com, this field is required.
           * When listing repositories via *.sourcemanager.dev, this field is ignored.
           */
          public List setInstance(java.lang.String instance) {
            this.instance = instance;
            return this;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
         will pick an appropriate default.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** A token identifying a page of results the server should return. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token identifying a page of results the server should return.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** A token identifying a page of results the server should return. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the metadata of a repository.
         *
         * Create a request for the method "repositories.patch".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Optional. A unique identifier for a repository. The name should be of the format:
         *        `projects/{project}/locations/{location_id}/repositories/{repository_id}`
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Repository}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Repository content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Updates the metadata of a repository.
           *
           * Create a request for the method "repositories.patch".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Optional. A unique identifier for a repository. The name should be of the format:
         *        `projects/{project}/locations/{location_id}/repositories/{repository_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Repository}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Repository content) {
            super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Optional. A unique identifier for a repository. The name should be of the format:
           * `projects/{project}/locations/{location_id}/repositories/{repository_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Optional. A unique identifier for a repository. The name should be of the format:
         `projects/{project}/locations/{location_id}/repositories/{repository_id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Optional. A unique identifier for a repository. The name should be of the format:
           * `projects/{project}/locations/{location_id}/repositories/{repository_id}`
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the repository
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Optional. Field mask is used to specify the fields to be overwritten in the repository resource by
         the update. The fields specified in the update_mask are relative to the resource, not the full
         request. A field will be overwritten if it is in the mask. If the user does not provide a mask then
         all fields will be overwritten.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the repository
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          /**
           * Optional. False by default. If set to true, the request is validated and the user is
           * provided with an expected result, but no actual change is made.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. False by default. If set to true, the request is validated and the user is provided with
         an expected result, but no actual change is made.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. False by default. If set to true, the request is validated and the user is
           * provided with an expected result, but no actual change is made.
           */
          public Patch setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Set IAM policy on a repository.
         *
         * Create a request for the method "repositories.setIamPolicy".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Set IAM policy on a repository.
           *
           * Create a request for the method "repositories.setIamPolicy".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.SetIamPolicyRequest content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being specified. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Test IAM permissions on a repository. IAM permission checks are not required on this method.
         *
         * Create a request for the method "repositories.testIamPermissions".
         *
         * This request holds the parameters needed by the securesourcemanager server.  After setting any
         * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

          /**
           * Test IAM permissions on a repository. IAM permission checks are not required on this method.
           *
           * Create a request for the method "repositories.testIamPermissions".
           *
           * This request holds the parameters needed by the the securesourcemanager server.  After setting
           * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
           * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
           * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsRequest content) {
            super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the BranchRules collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
         *   {@code SecureSourceManager.BranchRules.List request = securesourcemanager.branchRules().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public BranchRules branchRules() {
          return new BranchRules();
        }

        /**
         * The "branchRules" collection of methods.
         */
        public class BranchRules {

          /**
           * CreateBranchRule creates a branch rule in a given repository.
           *
           * Create a request for the method "branchRules.create".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BranchRule}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.BranchRule content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/branchRules";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * CreateBranchRule creates a branch rule in a given repository.
             *
             * Create a request for the method "branchRules.create".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BranchRule}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.BranchRule content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            @com.google.api.client.util.Key
            private java.lang.String parent;

            /**

             */
            public java.lang.String getParent() {
              return parent;
            }

            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.String branchRuleId;

            /**

             */
            public java.lang.String getBranchRuleId() {
              return branchRuleId;
            }

            public Create setBranchRuleId(java.lang.String branchRuleId) {
              this.branchRuleId = branchRuleId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * DeleteBranchRule deletes a branch rule.
           *
           * Create a request for the method "branchRules.delete".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");

            /**
             * DeleteBranchRule deletes a branch rule.
             *
             * Create a request for the method "branchRules.delete".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            @com.google.api.client.util.Key
            private java.lang.String name;

            /**

             */
            public java.lang.String getName() {
              return name;
            }

            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If set to true, and the branch rule is not found, the request will succeed
             * but no action will be taken on the server.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If set to true, and the branch rule is not found, the request will succeed but no action
           will be taken on the server.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If set to true, and the branch rule is not found, the request will succeed
             * but no action will be taken on the server.
             */
            public Delete setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * GetBranchRule gets a branch rule.
           *
           * Create a request for the method "branchRules.get".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the repository to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rul
           *        e}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.BranchRule> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");

            /**
             * GetBranchRule gets a branch rule.
             *
             * Create a request for the method "branchRules.get".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the repository to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rul
           *        e}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.BranchRule.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the repository to retrieve. The format is `projects/{project}/locat
             * ions/{location}/repositories/{repository}/branchRules/{branch_rule}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the repository to retrieve. The format is
           `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the repository to retrieve. The format is `projects/{project}/locat
             * ions/{location}/repositories/{repository}/branchRules/{branch_rule}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * ListBranchRules lists branch rules in a given repository.
           *
           * Create a request for the method "branchRules.list".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListBranchRulesResponse> {

            private static final String REST_PATH = "v1/{+parent}/branchRules";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * ListBranchRules lists branch rules in a given repository.
             *
             * Create a request for the method "branchRules.list".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListBranchRulesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            @com.google.api.client.util.Key
            private java.lang.String parent;

            /**

             */
            public java.lang.String getParent() {
              return parent;
            }

            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /**

             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /**

             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * UpdateBranchRule updates a branch rule.
           *
           * Create a request for the method "branchRules.patch".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Optional. A unique identifier for a BranchRule. The name should be of the format:
           *        `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rul
           *        e}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BranchRule}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.BranchRule content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");

            /**
             * UpdateBranchRule updates a branch rule.
             *
             * Create a request for the method "branchRules.patch".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Optional. A unique identifier for a BranchRule. The name should be of the format:
           *        `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rul
           *        e}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BranchRule}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.BranchRule content) {
              super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Optional. A unique identifier for a BranchRule. The name should be of the format: `pr
             * ojects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_r
             * ule}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Optional. A unique identifier for a BranchRule. The name should be of the format:
           `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Optional. A unique identifier for a BranchRule. The name should be of the format: `pr
             * ojects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_r
             * ule}`
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/branchRules/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Required. Field mask is used to specify the fields to be overwritten in the
             * branchRule resource by the update. The fields specified in the update_mask are
             * relative to the resource, not the full request. A field will be overwritten if it is
             * in the mask. The special value "*" means full replacement.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. Field mask is used to specify the fields to be overwritten in the branchRule resource by
           the update. The fields specified in the update_mask are relative to the resource, not the full
           request. A field will be overwritten if it is in the mask. The special value "*" means full
           replacement.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Required. Field mask is used to specify the fields to be overwritten in the
             * branchRule resource by the update. The fields specified in the update_mask are
             * relative to the resource, not the full request. A field will be overwritten if it is
             * in the mask. The special value "*" means full replacement.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the review, but do not actually
             * post it. (https://google.aip.dev/163, for declarative friendly)
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the review, but do not actually post it.
           (https://google.aip.dev/163, for declarative friendly)
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the review, but do not actually
             * post it. (https://google.aip.dev/163, for declarative friendly)
             */
            public Patch setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Hooks collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
         *   {@code SecureSourceManager.Hooks.List request = securesourcemanager.hooks().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Hooks hooks() {
          return new Hooks();
        }

        /**
         * The "hooks" collection of methods.
         */
        public class Hooks {

          /**
           * Creates a new hook in a given repository.
           *
           * Create a request for the method "hooks.create".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The repository in which to create the hook. Values are of the form
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Hook}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Hook content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/hooks";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Creates a new hook in a given repository.
             *
             * Create a request for the method "hooks.create".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The repository in which to create the hook. Values are of the form
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Hook}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Hook content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The repository in which to create the hook. Values are of the form
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The repository in which to create the hook. Values are of the form
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The repository in which to create the hook. Values are of the form
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the hook, which will become the final component of the
             * hook's resource name. This value restricts to lower-case letters, numbers, and
             * hyphen, with the first character a letter, the last a letter or a number, and a 63
             * character maximum.
             */
            @com.google.api.client.util.Key
            private java.lang.String hookId;

            /** Required. The ID to use for the hook, which will become the final component of the hook's resource
           name. This value restricts to lower-case letters, numbers, and hyphen, with the first character a
           letter, the last a letter or a number, and a 63 character maximum.
             */
            public java.lang.String getHookId() {
              return hookId;
            }

            /**
             * Required. The ID to use for the hook, which will become the final component of the
             * hook's resource name. This value restricts to lower-case letters, numbers, and
             * hyphen, with the first character a letter, the last a letter or a number, and a 63
             * character maximum.
             */
            public Create setHookId(java.lang.String hookId) {
              this.hookId = hookId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a Hook.
           *
           * Create a request for the method "hooks.delete".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the hook to delete. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hoo
           *        k_id}`.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");

            /**
             * Deletes a Hook.
             *
             * Create a request for the method "hooks.delete".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the hook to delete. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hoo
           *        k_id}`.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the hook to delete. The format is `projects/{project_number}/locati
             * ons/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the hook to delete. The format is
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the hook to delete. The format is `projects/{project_number}/locati
             * ons/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets metadata of a hook.
           *
           * Create a request for the method "hooks.get".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the hook to retrieve. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hoo
           *        k_id}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Hook> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");

            /**
             * Gets metadata of a hook.
             *
             * Create a request for the method "hooks.get".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the hook to retrieve. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hoo
           *        k_id}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Hook.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the hook to retrieve. The format is `projects/{project_number}/loca
             * tions/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the hook to retrieve. The format is
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the hook to retrieve. The format is `projects/{project_number}/loca
             * tions/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists hooks in a given repository.
           *
           * Create a request for the method "hooks.list".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Parent value for ListHooksRequest.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListHooksResponse> {

            private static final String REST_PATH = "v1/{+parent}/hooks";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists hooks in a given repository.
             *
             * Create a request for the method "hooks.list".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Parent value for ListHooksRequest.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListHooksResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Parent value for ListHooksRequest. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Parent value for ListHooksRequest.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Parent value for ListHooksRequest. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. A token identifying a page of results the server should return. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A token identifying a page of results the server should return.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. A token identifying a page of results the server should return. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates the metadata of a hook.
           *
           * Create a request for the method "hooks.patch".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. A unique identifier for a Hook. The name should be of the format:
           *        `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Hook}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Hook content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");

            /**
             * Updates the metadata of a hook.
             *
             * Create a request for the method "hooks.patch".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. A unique identifier for a Hook. The name should be of the format:
           *        `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Hook}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Hook content) {
              super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. A unique identifier for a Hook. The name should be of the format: `projec
             * ts/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. A unique identifier for a Hook. The name should be of the format:
           `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. A unique identifier for a Hook. The name should be of the format: `projec
             * ts/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/hooks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Required. Field mask is used to specify the fields to be overwritten in the hook
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. The
             * special value "*" means full replacement.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. Field mask is used to specify the fields to be overwritten in the hook resource by the
           update. The fields specified in the update_mask are relative to the resource, not the full request.
           A field will be overwritten if it is in the mask. The special value "*" means full replacement.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Required. Field mask is used to specify the fields to be overwritten in the hook
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. The
             * special value "*" means full replacement.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Issues collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
         *   {@code SecureSourceManager.Issues.List request = securesourcemanager.issues().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Issues issues() {
          return new Issues();
        }

        /**
         * The "issues" collection of methods.
         */
        public class Issues {

          /**
           * Closes an issue.
           *
           * Create a request for the method "issues.close".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Close#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the issue to close. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.CloseIssueRequest}
           * @return the request
           */
          public Close close(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.CloseIssueRequest content) throws java.io.IOException {
            Close result = new Close(name, content);
            initialize(result);
            return result;
          }

          public class Close extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}:close";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

            /**
             * Closes an issue.
             *
             * Create a request for the method "issues.close".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Close#execute()} method to invoke the remote
             * operation. <p> {@link
             * Close#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the issue to close. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.CloseIssueRequest}
             * @since 1.13
             */
            protected Close(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.CloseIssueRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
            }

            @Override
            public Close set$Xgafv(java.lang.String $Xgafv) {
              return (Close) super.set$Xgafv($Xgafv);
            }

            @Override
            public Close setAccessToken(java.lang.String accessToken) {
              return (Close) super.setAccessToken(accessToken);
            }

            @Override
            public Close setAlt(java.lang.String alt) {
              return (Close) super.setAlt(alt);
            }

            @Override
            public Close setCallback(java.lang.String callback) {
              return (Close) super.setCallback(callback);
            }

            @Override
            public Close setFields(java.lang.String fields) {
              return (Close) super.setFields(fields);
            }

            @Override
            public Close setKey(java.lang.String key) {
              return (Close) super.setKey(key);
            }

            @Override
            public Close setOauthToken(java.lang.String oauthToken) {
              return (Close) super.setOauthToken(oauthToken);
            }

            @Override
            public Close setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Close) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Close setQuotaUser(java.lang.String quotaUser) {
              return (Close) super.setQuotaUser(quotaUser);
            }

            @Override
            public Close setUploadType(java.lang.String uploadType) {
              return (Close) super.setUploadType(uploadType);
            }

            @Override
            public Close setUploadProtocol(java.lang.String uploadProtocol) {
              return (Close) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the issue to close. The format is `projects/{project_number}/locati
             * ons/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the issue to close. The format is
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the issue to close. The format is `projects/{project_number}/locati
             * ons/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public Close setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Close set(String parameterName, Object value) {
              return (Close) super.set(parameterName, value);
            }
          }
          /**
           * Creates an issue.
           *
           * Create a request for the method "issues.create".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The repository in which to create the issue. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Issue}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Issue content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/issues";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Creates an issue.
             *
             * Create a request for the method "issues.create".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The repository in which to create the issue. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Issue}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.Issue content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The repository in which to create the issue. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The repository in which to create the issue. Format:
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The repository in which to create the issue. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes an issue.
           *
           * Create a request for the method "issues.delete".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the issue to delete. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

            /**
             * Deletes an issue.
             *
             * Create a request for the method "issues.delete".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the issue to delete. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the issue to delete. The format is `projects/{project_number}/locat
             * ions/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the issue to delete. The format is
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the issue to delete. The format is `projects/{project_number}/locat
             * ions/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. The current etag of the issue. If the etag is provided and does not match
             * the current etag of the issue, deletion will be blocked and an ABORTED error will be
             * returned.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. The current etag of the issue. If the etag is provided and does not match the current
           etag of the issue, deletion will be blocked and an ABORTED error will be returned.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. The current etag of the issue. If the etag is provided and does not match
             * the current etag of the issue, deletion will be blocked and an ABORTED error will be
             * returned.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets an issue.
           *
           * Create a request for the method "issues.get".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the issue to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Issue> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

            /**
             * Gets an issue.
             *
             * Create a request for the method "issues.get".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the issue to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Issue.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the issue to retrieve. The format is `projects/{project}/locations/
             * {location}/repositories/{repository}/issues/{issue_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the issue to retrieve. The format is
           `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the issue to retrieve. The format is `projects/{project}/locations/
             * {location}/repositories/{repository}/issues/{issue_id}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists issues in a repository.
           *
           * Create a request for the method "issues.list".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The repository in which to list issues. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListIssuesResponse> {

            private static final String REST_PATH = "v1/{+parent}/issues";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists issues in a repository.
             *
             * Create a request for the method "issues.list".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The repository in which to list issues. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListIssuesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The repository in which to list issues. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The repository in which to list issues. Format:
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The repository in which to list issues. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. Used to filter the resulting issues list. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. Used to filter the resulting issues list.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** Optional. Used to filter the resulting issues list. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. A token identifying a page of results the server should return. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A token identifying a page of results the server should return.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. A token identifying a page of results the server should return. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Opens an issue.
           *
           * Create a request for the method "issues.open".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Open#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the issue to open. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.OpenIssueRequest}
           * @return the request
           */
          public Open open(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.OpenIssueRequest content) throws java.io.IOException {
            Open result = new Open(name, content);
            initialize(result);
            return result;
          }

          public class Open extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}:open";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

            /**
             * Opens an issue.
             *
             * Create a request for the method "issues.open".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Open#execute()} method to invoke the remote operation.
             * <p> {@link
             * Open#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the issue to open. The format is
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
           *        sue_id}`.
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.OpenIssueRequest}
             * @since 1.13
             */
            protected Open(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.OpenIssueRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
            }

            @Override
            public Open set$Xgafv(java.lang.String $Xgafv) {
              return (Open) super.set$Xgafv($Xgafv);
            }

            @Override
            public Open setAccessToken(java.lang.String accessToken) {
              return (Open) super.setAccessToken(accessToken);
            }

            @Override
            public Open setAlt(java.lang.String alt) {
              return (Open) super.setAlt(alt);
            }

            @Override
            public Open setCallback(java.lang.String callback) {
              return (Open) super.setCallback(callback);
            }

            @Override
            public Open setFields(java.lang.String fields) {
              return (Open) super.setFields(fields);
            }

            @Override
            public Open setKey(java.lang.String key) {
              return (Open) super.setKey(key);
            }

            @Override
            public Open setOauthToken(java.lang.String oauthToken) {
              return (Open) super.setOauthToken(oauthToken);
            }

            @Override
            public Open setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Open) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Open setQuotaUser(java.lang.String quotaUser) {
              return (Open) super.setQuotaUser(quotaUser);
            }

            @Override
            public Open setUploadType(java.lang.String uploadType) {
              return (Open) super.setUploadType(uploadType);
            }

            @Override
            public Open setUploadProtocol(java.lang.String uploadProtocol) {
              return (Open) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the issue to open. The format is `projects/{project_number}/locatio
             * ns/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the issue to open. The format is
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the issue to open. The format is `projects/{project_number}/locatio
             * ns/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
             */
            public Open setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Open set(String parameterName, Object value) {
              return (Open) super.set(parameterName, value);
            }
          }
          /**
           * Updates a issue.
           *
           * Create a request for the method "issues.patch".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. Unique identifier for an issue. The issue id is generated by the server. Format:
           *        `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Issue}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Issue content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

            /**
             * Updates a issue.
             *
             * Create a request for the method "issues.patch".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. Unique identifier for an issue. The issue id is generated by the server. Format:
           *        `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.Issue}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.Issue content) {
              super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. Unique identifier for an issue. The issue id is generated by the server.
             * Format:
             * `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. Unique identifier for an issue. The issue id is generated by the server. Format:
           `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. Unique identifier for an issue. The issue id is generated by the server.
             * Format:
             * `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the issue
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. The
             * special value "*" means full replacement.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the issue resource by the
           update. The fields specified in the update_mask are relative to the resource, not the full request.
           A field will be overwritten if it is in the mask. The special value "*" means full replacement.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the issue
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. The
             * special value "*" means full replacement.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the IssueComments collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
           *   {@code SecureSourceManager.IssueComments.List request = securesourcemanager.issueComments().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public IssueComments issueComments() {
            return new IssueComments();
          }

          /**
           * The "issueComments" collection of methods.
           */
          public class IssueComments {

            /**
             * Creates an issue comment.
             *
             * Create a request for the method "issueComments.create".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The issue in which to create the issue comment. Format:
             *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
             *        sue_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.IssueComment}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.IssueComment content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/issueComments";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

              /**
               * Creates an issue comment.
               *
               * Create a request for the method "issueComments.create".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Create#execute()} method to invoke the remote
               * operation. <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The issue in which to create the issue comment. Format:
             *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
             *        sue_id}`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.IssueComment}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.IssueComment content) {
                super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The issue in which to create the issue comment. Format: `projects/{projec
               * t_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The issue in which to create the issue comment. Format:
             `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The issue in which to create the issue comment. Format: `projects/{projec
               * t_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes an issue comment.
             *
             * Create a request for the method "issueComments.delete".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name Required. Name of the issue comment to delete. The format is `projects/{project_number}/locations/{l
             *        ocation_id}/repositories/{repository_id}/issues/{issue_id}/issueComments/{comment_id}`.
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");

              /**
               * Deletes an issue comment.
               *
               * Create a request for the method "issueComments.delete".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
               * operation. <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Name of the issue comment to delete. The format is `projects/{project_number}/locations/{l
             *        ocation_id}/repositories/{repository_id}/issues/{issue_id}/issueComments/{comment_id}`.
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Name of the issue comment to delete. The format is `projects/{project_num
               * ber}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}/issueCo
               * mments/{comment_id}`.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Name of the issue comment to delete. The format is `projects/{project_number}/locations/{
             location_id}/repositories/{repository_id}/issues/{issue_id}/issueComments/{comment_id}`.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Name of the issue comment to delete. The format is `projects/{project_num
               * ber}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}/issueCo
               * mments/{comment_id}`.
               */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets an issue comment.
             *
             * Create a request for the method "issueComments.get".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name Required. Name of the issue comment to retrieve. The format is `projects/{project}/locations/{locati
             *        on}/repositories/{repository}/issues/{issue_id}/issueComments/{comment_id}`.
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.IssueComment> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");

              /**
               * Gets an issue comment.
               *
               * Create a request for the method "issueComments.get".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
               * <p> {@link
               * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Name of the issue comment to retrieve. The format is `projects/{project}/locations/{locati
             *        on}/repositories/{repository}/issues/{issue_id}/issueComments/{comment_id}`.
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.IssueComment.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Name of the issue comment to retrieve. The format is `projects/{project}/
               * locations/{location}/repositories/{repository}/issues/{issue_id}/issueComments/{com
               * ment_id}`.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Name of the issue comment to retrieve. The format is `projects/{project}/locations/{locat
             ion}/repositories/{repository}/issues/{issue_id}/issueComments/{comment_id}`.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Name of the issue comment to retrieve. The format is `projects/{project}/
               * locations/{location}/repositories/{repository}/issues/{issue_id}/issueComments/{com
               * ment_id}`.
               */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists comments in an issue.
             *
             * Create a request for the method "issueComments.list".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The issue in which to list the comments. Format:
             *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
             *        sue_id}`
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListIssueCommentsResponse> {

              private static final String REST_PATH = "v1/{+parent}/issueComments";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");

              /**
               * Lists comments in an issue.
               *
               * Create a request for the method "issueComments.list".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
               * <p> {@link
               * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The issue in which to list the comments. Format:
             *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{is
             *        sue_id}`
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListIssueCommentsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The issue in which to list the comments. Format: `projects/{project_numbe
               * r}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The issue in which to list the comments. Format:
             `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The issue in which to list the comments. Format: `projects/{project_numbe
               * r}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Optional. Requested page size. Server may return fewer items than requested. If
               * unspecified, server will pick an appropriate default.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
             will pick an appropriate default.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * Optional. Requested page size. Server may return fewer items than requested. If
               * unspecified, server will pick an appropriate default.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /** Optional. A token identifying a page of results the server should return. */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** Optional. A token identifying a page of results the server should return.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /** Optional. A token identifying a page of results the server should return. */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates an issue comment.
             *
             * Create a request for the method "issueComments.patch".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name Identifier. Unique identifier for an issue comment. The comment id is generated by the server.
             *        Format: `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue}/
             *        issueComments/{comment_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.IssueComment}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.IssueComment content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");

              /**
               * Updates an issue comment.
               *
               * Create a request for the method "issueComments.patch".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
               * operation. <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Identifier. Unique identifier for an issue comment. The comment id is generated by the server.
             *        Format: `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue}/
             *        issueComments/{comment_id}`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.IssueComment}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.IssueComment content) {
                super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Identifier. Unique identifier for an issue comment. The comment id is generated by
               * the server. Format: `projects/{project}/locations/{location}/repositories/{reposito
               * ry}/issues/{issue}/issueComments/{comment_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Identifier. Unique identifier for an issue comment. The comment id is generated by the server.
             Format: `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue}/issueComm
             ents/{comment_id}`
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Identifier. Unique identifier for an issue comment. The comment id is generated by
               * the server. Format: `projects/{project}/locations/{location}/repositories/{reposito
               * ry}/issues/{issue}/issueComments/{comment_id}`
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/issues/[^/]+/issueComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * Optional. Field mask is used to specify the fields to be overwritten in the issue
               * comment resource by the update. The fields specified in the update_mask are
               * relative to the resource, not the full request. A field will be overwritten if it
               * is in the mask. The special value "*" means full replacement.
               */
              @com.google.api.client.util.Key
              private String updateMask;

              /** Optional. Field mask is used to specify the fields to be overwritten in the issue comment resource
             by the update. The fields specified in the update_mask are relative to the resource, not the full
             request. A field will be overwritten if it is in the mask. The special value "*" means full
             replacement.
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /**
               * Optional. Field mask is used to specify the fields to be overwritten in the issue
               * comment resource by the update. The fields specified in the update_mask are
               * relative to the resource, not the full request. A field will be overwritten if it
               * is in the mask. The special value "*" means full replacement.
               */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }

          }
        }
        /**
         * An accessor for creating requests from the PullRequests collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
         *   {@code SecureSourceManager.PullRequests.List request = securesourcemanager.pullRequests().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public PullRequests pullRequests() {
          return new PullRequests();
        }

        /**
         * The "pullRequests" collection of methods.
         */
        public class PullRequests {

          /**
           * Closes a pull request without merging.
           *
           * Create a request for the method "pullRequests.close".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Close#execute()} method to invoke the remote operation.
           *
           * @param name Required. The pull request to close. Format: `projects/{project_number}/locations/{location_id}/repo
           *        sitories/{repository_id}/pullRequests/{pull_request_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.ClosePullRequestRequest}
           * @return the request
           */
          public Close close(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.ClosePullRequestRequest content) throws java.io.IOException {
            Close result = new Close(name, content);
            initialize(result);
            return result;
          }

          public class Close extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}:close";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Closes a pull request without merging.
             *
             * Create a request for the method "pullRequests.close".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Close#execute()} method to invoke the remote
             * operation. <p> {@link
             * Close#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The pull request to close. Format: `projects/{project_number}/locations/{location_id}/repo
           *        sitories/{repository_id}/pullRequests/{pull_request_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.ClosePullRequestRequest}
             * @since 1.13
             */
            protected Close(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.ClosePullRequestRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public Close set$Xgafv(java.lang.String $Xgafv) {
              return (Close) super.set$Xgafv($Xgafv);
            }

            @Override
            public Close setAccessToken(java.lang.String accessToken) {
              return (Close) super.setAccessToken(accessToken);
            }

            @Override
            public Close setAlt(java.lang.String alt) {
              return (Close) super.setAlt(alt);
            }

            @Override
            public Close setCallback(java.lang.String callback) {
              return (Close) super.setCallback(callback);
            }

            @Override
            public Close setFields(java.lang.String fields) {
              return (Close) super.setFields(fields);
            }

            @Override
            public Close setKey(java.lang.String key) {
              return (Close) super.setKey(key);
            }

            @Override
            public Close setOauthToken(java.lang.String oauthToken) {
              return (Close) super.setOauthToken(oauthToken);
            }

            @Override
            public Close setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Close) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Close setQuotaUser(java.lang.String quotaUser) {
              return (Close) super.setQuotaUser(quotaUser);
            }

            @Override
            public Close setUploadType(java.lang.String uploadType) {
              return (Close) super.setUploadType(uploadType);
            }

            @Override
            public Close setUploadProtocol(java.lang.String uploadProtocol) {
              return (Close) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The pull request to close. Format: `projects/{project_number}/locations/{lo
             * cation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The pull request to close. Format: `projects/{project_number}/locations/{location_id}/rep
           ositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The pull request to close. Format: `projects/{project_number}/locations/{lo
             * cation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public Close setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Close set(String parameterName, Object value) {
              return (Close) super.set(parameterName, value);
            }
          }
          /**
           * Creates a pull request.
           *
           * Create a request for the method "pullRequests.create".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The repository that the pull request is created from. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequest}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.PullRequest content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/pullRequests";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Creates a pull request.
             *
             * Create a request for the method "pullRequests.create".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The repository that the pull request is created from. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequest}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.PullRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The repository that the pull request is created from. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The repository that the pull request is created from. Format:
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The repository that the pull request is created from. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Gets a pull request.
           *
           * Create a request for the method "pullRequests.get".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the pull request to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_requ
           *        est}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.PullRequest> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Gets a pull request.
             *
             * Create a request for the method "pullRequests.get".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the pull request to retrieve. The format is
           *        `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_requ
           *        est}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.PullRequest.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the pull request to retrieve. The format is `projects/{project}/loc
             * ations/{location}/repositories/{repository}/pullRequests/{pull_request}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the pull request to retrieve. The format is
           `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the pull request to retrieve. The format is `projects/{project}/loc
             * ations/{location}/repositories/{repository}/pullRequests/{pull_request}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists pull requests in a repository.
           *
           * Create a request for the method "pullRequests.list".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The repository in which to list pull requests. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListPullRequestsResponse> {

            private static final String REST_PATH = "v1/{+parent}/pullRequests";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");

            /**
             * Lists pull requests in a repository.
             *
             * Create a request for the method "pullRequests.list".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The repository in which to list pull requests. Format:
           *        `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListPullRequestsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The repository in which to list pull requests. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The repository in which to list pull requests. Format:
           `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The repository in which to list pull requests. Format:
             * `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. A token identifying a page of results the server should return. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A token identifying a page of results the server should return.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. A token identifying a page of results the server should return. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Lists a pull request's file diffs.
           *
           * Create a request for the method "pullRequests.listFileDiffs".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link ListFileDiffs#execute()} method to invoke the remote
           * operation.
           *
           * @param name Required. The pull request to list file diffs for. Format: `projects/{project_number}/locations/{loc
           *        ation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
           * @return the request
           */
          public ListFileDiffs listFileDiffs(java.lang.String name) throws java.io.IOException {
            ListFileDiffs result = new ListFileDiffs(name);
            initialize(result);
            return result;
          }

          public class ListFileDiffs extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListPullRequestFileDiffsResponse> {

            private static final String REST_PATH = "v1/{+name}:listFileDiffs";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Lists a pull request's file diffs.
             *
             * Create a request for the method "pullRequests.listFileDiffs".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link ListFileDiffs#execute()} method to invoke the remote
             * operation. <p> {@link ListFileDiffs#initialize(com.google.api.client.googleapis.services.Abstra
             * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param name Required. The pull request to list file diffs for. Format: `projects/{project_number}/locations/{loc
           *        ation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             * @since 1.13
             */
            protected ListFileDiffs(java.lang.String name) {
              super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListPullRequestFileDiffsResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public ListFileDiffs set$Xgafv(java.lang.String $Xgafv) {
              return (ListFileDiffs) super.set$Xgafv($Xgafv);
            }

            @Override
            public ListFileDiffs setAccessToken(java.lang.String accessToken) {
              return (ListFileDiffs) super.setAccessToken(accessToken);
            }

            @Override
            public ListFileDiffs setAlt(java.lang.String alt) {
              return (ListFileDiffs) super.setAlt(alt);
            }

            @Override
            public ListFileDiffs setCallback(java.lang.String callback) {
              return (ListFileDiffs) super.setCallback(callback);
            }

            @Override
            public ListFileDiffs setFields(java.lang.String fields) {
              return (ListFileDiffs) super.setFields(fields);
            }

            @Override
            public ListFileDiffs setKey(java.lang.String key) {
              return (ListFileDiffs) super.setKey(key);
            }

            @Override
            public ListFileDiffs setOauthToken(java.lang.String oauthToken) {
              return (ListFileDiffs) super.setOauthToken(oauthToken);
            }

            @Override
            public ListFileDiffs setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ListFileDiffs) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ListFileDiffs setQuotaUser(java.lang.String quotaUser) {
              return (ListFileDiffs) super.setQuotaUser(quotaUser);
            }

            @Override
            public ListFileDiffs setUploadType(java.lang.String uploadType) {
              return (ListFileDiffs) super.setUploadType(uploadType);
            }

            @Override
            public ListFileDiffs setUploadProtocol(java.lang.String uploadProtocol) {
              return (ListFileDiffs) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The pull request to list file diffs for. Format: `projects/{project_number}
             * /locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The pull request to list file diffs for. Format: `projects/{project_number}/locations/{lo
           cation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The pull request to list file diffs for. Format: `projects/{project_number}
             * /locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public ListFileDiffs setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public ListFileDiffs setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. A token identifying a page of results the server should return. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A token identifying a page of results the server should return.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. A token identifying a page of results the server should return. */
            public ListFileDiffs setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public ListFileDiffs set(String parameterName, Object value) {
              return (ListFileDiffs) super.set(parameterName, value);
            }
          }
          /**
           * Merges a pull request.
           *
           * Create a request for the method "pullRequests.merge".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Merge#execute()} method to invoke the remote operation.
           *
           * @param name Required. The pull request to merge. Format: `projects/{project_number}/locations/{location_id}/repo
           *        sitories/{repository_id}/pullRequests/{pull_request_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.MergePullRequestRequest}
           * @return the request
           */
          public Merge merge(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.MergePullRequestRequest content) throws java.io.IOException {
            Merge result = new Merge(name, content);
            initialize(result);
            return result;
          }

          public class Merge extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}:merge";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Merges a pull request.
             *
             * Create a request for the method "pullRequests.merge".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Merge#execute()} method to invoke the remote
             * operation. <p> {@link
             * Merge#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The pull request to merge. Format: `projects/{project_number}/locations/{location_id}/repo
           *        sitories/{repository_id}/pullRequests/{pull_request_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.MergePullRequestRequest}
             * @since 1.13
             */
            protected Merge(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.MergePullRequestRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public Merge set$Xgafv(java.lang.String $Xgafv) {
              return (Merge) super.set$Xgafv($Xgafv);
            }

            @Override
            public Merge setAccessToken(java.lang.String accessToken) {
              return (Merge) super.setAccessToken(accessToken);
            }

            @Override
            public Merge setAlt(java.lang.String alt) {
              return (Merge) super.setAlt(alt);
            }

            @Override
            public Merge setCallback(java.lang.String callback) {
              return (Merge) super.setCallback(callback);
            }

            @Override
            public Merge setFields(java.lang.String fields) {
              return (Merge) super.setFields(fields);
            }

            @Override
            public Merge setKey(java.lang.String key) {
              return (Merge) super.setKey(key);
            }

            @Override
            public Merge setOauthToken(java.lang.String oauthToken) {
              return (Merge) super.setOauthToken(oauthToken);
            }

            @Override
            public Merge setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Merge) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Merge setQuotaUser(java.lang.String quotaUser) {
              return (Merge) super.setQuotaUser(quotaUser);
            }

            @Override
            public Merge setUploadType(java.lang.String uploadType) {
              return (Merge) super.setUploadType(uploadType);
            }

            @Override
            public Merge setUploadProtocol(java.lang.String uploadProtocol) {
              return (Merge) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The pull request to merge. Format: `projects/{project_number}/locations/{lo
             * cation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The pull request to merge. Format: `projects/{project_number}/locations/{location_id}/rep
           ositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The pull request to merge. Format: `projects/{project_number}/locations/{lo
             * cation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public Merge setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Merge set(String parameterName, Object value) {
              return (Merge) super.set(parameterName, value);
            }
          }
          /**
           * Opens a pull request.
           *
           * Create a request for the method "pullRequests.open".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Open#execute()} method to invoke the remote operation.
           *
           * @param name Required. The pull request to open. Format: `projects/{project_number}/locations/{location_id}/repos
           *        itories/{repository_id}/pullRequests/{pull_request_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.OpenPullRequestRequest}
           * @return the request
           */
          public Open open(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.OpenPullRequestRequest content) throws java.io.IOException {
            Open result = new Open(name, content);
            initialize(result);
            return result;
          }

          public class Open extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}:open";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Opens a pull request.
             *
             * Create a request for the method "pullRequests.open".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Open#execute()} method to invoke the remote operation.
             * <p> {@link
             * Open#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The pull request to open. Format: `projects/{project_number}/locations/{location_id}/repos
           *        itories/{repository_id}/pullRequests/{pull_request_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.OpenPullRequestRequest}
             * @since 1.13
             */
            protected Open(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.OpenPullRequestRequest content) {
              super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public Open set$Xgafv(java.lang.String $Xgafv) {
              return (Open) super.set$Xgafv($Xgafv);
            }

            @Override
            public Open setAccessToken(java.lang.String accessToken) {
              return (Open) super.setAccessToken(accessToken);
            }

            @Override
            public Open setAlt(java.lang.String alt) {
              return (Open) super.setAlt(alt);
            }

            @Override
            public Open setCallback(java.lang.String callback) {
              return (Open) super.setCallback(callback);
            }

            @Override
            public Open setFields(java.lang.String fields) {
              return (Open) super.setFields(fields);
            }

            @Override
            public Open setKey(java.lang.String key) {
              return (Open) super.setKey(key);
            }

            @Override
            public Open setOauthToken(java.lang.String oauthToken) {
              return (Open) super.setOauthToken(oauthToken);
            }

            @Override
            public Open setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Open) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Open setQuotaUser(java.lang.String quotaUser) {
              return (Open) super.setQuotaUser(quotaUser);
            }

            @Override
            public Open setUploadType(java.lang.String uploadType) {
              return (Open) super.setUploadType(uploadType);
            }

            @Override
            public Open setUploadProtocol(java.lang.String uploadProtocol) {
              return (Open) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The pull request to open. Format: `projects/{project_number}/locations/{loc
             * ation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The pull request to open. Format: `projects/{project_number}/locations/{location_id}/repo
           sitories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The pull request to open. Format: `projects/{project_number}/locations/{loc
             * ation_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             */
            public Open setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Open set(String parameterName, Object value) {
              return (Open) super.set(parameterName, value);
            }
          }
          /**
           * Updates a pull request.
           *
           * Create a request for the method "pullRequests.patch".
           *
           * This request holds the parameters needed by the securesourcemanager server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Output only. A unique identifier for a PullRequest. The number appended at the end is generated by
           *        the server. Format: `projects/{project}/locations/{location}/repositories/{repository}/pul
           *        lRequests/{pull_request_id}`
           * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequest}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.PullRequest content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

            /**
             * Updates a pull request.
             *
             * Create a request for the method "pullRequests.patch".
             *
             * This request holds the parameters needed by the the securesourcemanager server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Output only. A unique identifier for a PullRequest. The number appended at the end is generated by
           *        the server. Format: `projects/{project}/locations/{location}/repositories/{repository}/pul
           *        lRequests/{pull_request_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequest}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.PullRequest content) {
              super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Output only. A unique identifier for a PullRequest. The number appended at the end is
             * generated by the server. Format: `projects/{project}/locations/{location}/repositorie
             * s/{repository}/pullRequests/{pull_request_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Output only. A unique identifier for a PullRequest. The number appended at the end is generated by
           the server. Format:
           `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Output only. A unique identifier for a PullRequest. The number appended at the end is
             * generated by the server. Format: `projects/{project}/locations/{location}/repositorie
             * s/{repository}/pullRequests/{pull_request_id}`
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the pull
             * request resource by the update. The fields specified in the update_mask are relative
             * to the resource, not the full request. A field will be overwritten if it is in the
             * mask. The special value "*" means full replacement.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the pull request resource
           by the update. The fields specified in the update_mask are relative to the resource, not the full
           request. A field will be overwritten if it is in the mask. The special value "*" means full
           replacement.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the pull
             * request resource by the update. The fields specified in the update_mask are relative
             * to the resource, not the full request. A field will be overwritten if it is in the
             * mask. The special value "*" means full replacement.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the PullRequestComments collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code SecureSourceManager securesourcemanager = new SecureSourceManager(...);}
           *   {@code SecureSourceManager.PullRequestComments.List request = securesourcemanager.pullRequestComments().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public PullRequestComments pullRequestComments() {
            return new PullRequestComments();
          }

          /**
           * The "pullRequestComments" collection of methods.
           */
          public class PullRequestComments {

            /**
             * Batch creates pull request comments.
             *
             * Create a request for the method "pullRequestComments.batchCreate".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link BatchCreate#execute()} method to invoke the remote
             * operation.
             *
             * @param parent Required. The pull request in which to create the pull request comments. Format: `projects/{project_
             *        number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id
             *        }`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BatchCreatePullRequestCommentsRequest}
             * @return the request
             */
            public BatchCreate batchCreate(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.BatchCreatePullRequestCommentsRequest content) throws java.io.IOException {
              BatchCreate result = new BatchCreate(parent, content);
              initialize(result);
              return result;
            }

            public class BatchCreate extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/pullRequestComments:batchCreate";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

              /**
               * Batch creates pull request comments.
               *
               * Create a request for the method "pullRequestComments.batchCreate".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link BatchCreate#execute()} method to invoke the remote
               * operation. <p> {@link
               * BatchCreate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The pull request in which to create the pull request comments. Format: `projects/{project_
             *        number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id
             *        }`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.BatchCreatePullRequestCommentsRequest}
               * @since 1.13
               */
              protected BatchCreate(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.BatchCreatePullRequestCommentsRequest content) {
                super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
              }

              @Override
              public BatchCreate set$Xgafv(java.lang.String $Xgafv) {
                return (BatchCreate) super.set$Xgafv($Xgafv);
              }

              @Override
              public BatchCreate setAccessToken(java.lang.String accessToken) {
                return (BatchCreate) super.setAccessToken(accessToken);
              }

              @Override
              public BatchCreate setAlt(java.lang.String alt) {
                return (BatchCreate) super.setAlt(alt);
              }

              @Override
              public BatchCreate setCallback(java.lang.String callback) {
                return (BatchCreate) super.setCallback(callback);
              }

              @Override
              public BatchCreate setFields(java.lang.String fields) {
                return (BatchCreate) super.setFields(fields);
              }

              @Override
              public BatchCreate setKey(java.lang.String key) {
                return (BatchCreate) super.setKey(key);
              }

              @Override
              public BatchCreate setOauthToken(java.lang.String oauthToken) {
                return (BatchCreate) super.setOauthToken(oauthToken);
              }

              @Override
              public BatchCreate setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (BatchCreate) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public BatchCreate setQuotaUser(java.lang.String quotaUser) {
                return (BatchCreate) super.setQuotaUser(quotaUser);
              }

              @Override
              public BatchCreate setUploadType(java.lang.String uploadType) {
                return (BatchCreate) super.setUploadType(uploadType);
              }

              @Override
              public BatchCreate setUploadProtocol(java.lang.String uploadProtocol) {
                return (BatchCreate) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The pull request in which to create the pull request comments. Format: `p
               * rojects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullR
               * equests/{pull_request_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The pull request in which to create the pull request comments. Format: `projects/{project
             _number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The pull request in which to create the pull request comments. Format: `p
               * rojects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullR
               * equests/{pull_request_id}`
               */
              public BatchCreate setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public BatchCreate set(String parameterName, Object value) {
                return (BatchCreate) super.set(parameterName, value);
              }
            }
            /**
             * Creates a pull request comment.
             *
             * Create a request for the method "pullRequestComments.create".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The pull request in which to create the pull request comment. Format: `projects/{project_n
             *        umber}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}
             *        `
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequestComment}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.PullRequestComment content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/pullRequestComments";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

              /**
               * Creates a pull request comment.
               *
               * Create a request for the method "pullRequestComments.create".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Create#execute()} method to invoke the remote
               * operation. <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The pull request in which to create the pull request comment. Format: `projects/{project_n
             *        umber}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}
             *        `
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequestComment}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.PullRequestComment content) {
                super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The pull request in which to create the pull request comment. Format: `pr
               * ojects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRe
               * quests/{pull_request_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The pull request in which to create the pull request comment. Format: `projects/{project_
             number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The pull request in which to create the pull request comment. Format: `pr
               * ojects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRe
               * quests/{pull_request_id}`
               */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes a pull request comment.
             *
             * Create a request for the method "pullRequestComments.delete".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name Required. Name of the pull request comment to delete. The format is `projects/{project_number}/locat
             *        ions/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequest
             *        Comments/{comment_id}`.
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");

              /**
               * Deletes a pull request comment.
               *
               * Create a request for the method "pullRequestComments.delete".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
               * operation. <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Name of the pull request comment to delete. The format is `projects/{project_number}/locat
             *        ions/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequest
             *        Comments/{comment_id}`.
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(SecureSourceManager.this, "DELETE", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Name of the pull request comment to delete. The format is `projects/{proj
               * ect_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull
               * _request_id}/pullRequestComments/{comment_id}`.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Name of the pull request comment to delete. The format is `projects/{project_number}/loca
             tions/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments
             /{comment_id}`.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Name of the pull request comment to delete. The format is `projects/{proj
               * ect_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull
               * _request_id}/pullRequestComments/{comment_id}`.
               */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Gets a pull request comment.
             *
             * Create a request for the method "pullRequestComments.get".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name Required. Name of the pull request comment to retrieve. The format is `projects/{project_number}/loc
             *        ations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullReque
             *        stComments/{comment_id}`.
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.PullRequestComment> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");

              /**
               * Gets a pull request comment.
               *
               * Create a request for the method "pullRequestComments.get".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
               * <p> {@link
               * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Name of the pull request comment to retrieve. The format is `projects/{project_number}/loc
             *        ations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullReque
             *        stComments/{comment_id}`.
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.PullRequestComment.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Name of the pull request comment to retrieve. The format is `projects/{pr
               * oject_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pu
               * ll_request_id}/pullRequestComments/{comment_id}`.
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Name of the pull request comment to retrieve. The format is `projects/{project_number}/lo
             cations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestCommen
             ts/{comment_id}`.
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Name of the pull request comment to retrieve. The format is `projects/{pr
               * oject_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pu
               * ll_request_id}/pullRequestComments/{comment_id}`.
               */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists pull request comments.
             *
             * Create a request for the method "pullRequestComments.list".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The pull request in which to list pull request comments. Format: `projects/{project_number
             *        }/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.ListPullRequestCommentsResponse> {

              private static final String REST_PATH = "v1/{+parent}/pullRequestComments";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

              /**
               * Lists pull request comments.
               *
               * Create a request for the method "pullRequestComments.list".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
               * <p> {@link
               * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
               * called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The pull request in which to list pull request comments. Format: `projects/{project_number
             *        }/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(SecureSourceManager.this, "GET", REST_PATH, null, com.google.api.services.securesourcemanager.v1.model.ListPullRequestCommentsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The pull request in which to list pull request comments. Format: `project
               * s/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequest
               * s/{pull_request_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The pull request in which to list pull request comments. Format: `projects/{project_numbe
             r}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The pull request in which to list pull request comments. Format: `project
               * s/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequest
               * s/{pull_request_id}`
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Optional. Requested page size. If unspecified, at most 100 pull request comments
               * will be returned. The maximum value is 100; values above 100 will be coerced to
               * 100.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** Optional. Requested page size. If unspecified, at most 100 pull request comments will be returned.
             The maximum value is 100; values above 100 will be coerced to 100.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * Optional. Requested page size. If unspecified, at most 100 pull request comments
               * will be returned. The maximum value is 100; values above 100 will be coerced to
               * 100.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /** Optional. A token identifying a page of results the server should return. */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** Optional. A token identifying a page of results the server should return.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /** Optional. A token identifying a page of results the server should return. */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates a pull request comment.
             *
             * Create a request for the method "pullRequestComments.patch".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name Identifier. Unique identifier for the pull request comment. The comment id is generated by the
             *        server. Format: `projects/{project}/locations/{location}/repositories/{repository}/pullReq
             *        uests/{pull_request}/pullRequestComments/{comment_id}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequestComment}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.PullRequestComment content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");

              /**
               * Updates a pull request comment.
               *
               * Create a request for the method "pullRequestComments.patch".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
               * operation. <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Identifier. Unique identifier for the pull request comment. The comment id is generated by the
             *        server. Format: `projects/{project}/locations/{location}/repositories/{repository}/pullReq
             *        uests/{pull_request}/pullRequestComments/{comment_id}`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.PullRequestComment}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.securesourcemanager.v1.model.PullRequestComment content) {
                super(SecureSourceManager.this, "PATCH", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Identifier. Unique identifier for the pull request comment. The comment id is
               * generated by the server. Format: `projects/{project}/locations/{location}/repositor
               * ies/{repository}/pullRequests/{pull_request}/pullRequestComments/{comment_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Identifier. Unique identifier for the pull request comment. The comment id is generated by the
             server. Format: `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pu
             ll_request}/pullRequestComments/{comment_id}`
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Identifier. Unique identifier for the pull request comment. The comment id is
               * generated by the server. Format: `projects/{project}/locations/{location}/repositor
               * ies/{repository}/pullRequests/{pull_request}/pullRequestComments/{comment_id}`
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+/pullRequestComments/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * Optional. Field mask is used to specify the fields to be overwritten in the pull
               * request comment resource by the update. Updatable fields are `body`.
               */
              @com.google.api.client.util.Key
              private String updateMask;

              /** Optional. Field mask is used to specify the fields to be overwritten in the pull request comment
             resource by the update. Updatable fields are `body`.
               */
              public String getUpdateMask() {
                return updateMask;
              }

              /**
               * Optional. Field mask is used to specify the fields to be overwritten in the pull
               * request comment resource by the update. Updatable fields are `body`.
               */
              public Patch setUpdateMask(String updateMask) {
                this.updateMask = updateMask;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }
            /**
             * Resolves pull request comments.
             *
             * Create a request for the method "pullRequestComments.resolve".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Resolve#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The pull request in which to resolve the pull request comments. Format: `projects/{project
             *        _number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_i
             *        d}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.ResolvePullRequestCommentsRequest}
             * @return the request
             */
            public Resolve resolve(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.ResolvePullRequestCommentsRequest content) throws java.io.IOException {
              Resolve result = new Resolve(parent, content);
              initialize(result);
              return result;
            }

            public class Resolve extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/pullRequestComments:resolve";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

              /**
               * Resolves pull request comments.
               *
               * Create a request for the method "pullRequestComments.resolve".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Resolve#execute()} method to invoke the remote
               * operation. <p> {@link
               * Resolve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The pull request in which to resolve the pull request comments. Format: `projects/{project
             *        _number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_i
             *        d}`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.ResolvePullRequestCommentsRequest}
               * @since 1.13
               */
              protected Resolve(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.ResolvePullRequestCommentsRequest content) {
                super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
              }

              @Override
              public Resolve set$Xgafv(java.lang.String $Xgafv) {
                return (Resolve) super.set$Xgafv($Xgafv);
              }

              @Override
              public Resolve setAccessToken(java.lang.String accessToken) {
                return (Resolve) super.setAccessToken(accessToken);
              }

              @Override
              public Resolve setAlt(java.lang.String alt) {
                return (Resolve) super.setAlt(alt);
              }

              @Override
              public Resolve setCallback(java.lang.String callback) {
                return (Resolve) super.setCallback(callback);
              }

              @Override
              public Resolve setFields(java.lang.String fields) {
                return (Resolve) super.setFields(fields);
              }

              @Override
              public Resolve setKey(java.lang.String key) {
                return (Resolve) super.setKey(key);
              }

              @Override
              public Resolve setOauthToken(java.lang.String oauthToken) {
                return (Resolve) super.setOauthToken(oauthToken);
              }

              @Override
              public Resolve setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Resolve) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Resolve setQuotaUser(java.lang.String quotaUser) {
                return (Resolve) super.setQuotaUser(quotaUser);
              }

              @Override
              public Resolve setUploadType(java.lang.String uploadType) {
                return (Resolve) super.setUploadType(uploadType);
              }

              @Override
              public Resolve setUploadProtocol(java.lang.String uploadProtocol) {
                return (Resolve) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The pull request in which to resolve the pull request comments. Format: `
               * projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pull
               * Requests/{pull_request_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The pull request in which to resolve the pull request comments. Format: `projects/{projec
             t_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The pull request in which to resolve the pull request comments. Format: `
               * projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pull
               * Requests/{pull_request_id}`
               */
              public Resolve setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public Resolve set(String parameterName, Object value) {
                return (Resolve) super.set(parameterName, value);
              }
            }
            /**
             * Unresolves pull request comment.
             *
             * Create a request for the method "pullRequestComments.unresolve".
             *
             * This request holds the parameters needed by the securesourcemanager server.  After setting any
             * optional parameters, call the {@link Unresolve#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The pull request in which to resolve the pull request comments. Format: `projects/{project
             *        _number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_i
             *        d}`
             * @param content the {@link com.google.api.services.securesourcemanager.v1.model.UnresolvePullRequestCommentsRequest}
             * @return the request
             */
            public Unresolve unresolve(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.UnresolvePullRequestCommentsRequest content) throws java.io.IOException {
              Unresolve result = new Unresolve(parent, content);
              initialize(result);
              return result;
            }

            public class Unresolve extends SecureSourceManagerRequest<com.google.api.services.securesourcemanager.v1.model.Operation> {

              private static final String REST_PATH = "v1/{+parent}/pullRequestComments:unresolve";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");

              /**
               * Unresolves pull request comment.
               *
               * Create a request for the method "pullRequestComments.unresolve".
               *
               * This request holds the parameters needed by the the securesourcemanager server.  After setting
               * any optional parameters, call the {@link Unresolve#execute()} method to invoke the remote
               * operation. <p> {@link
               * Unresolve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The pull request in which to resolve the pull request comments. Format: `projects/{project
             *        _number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_i
             *        d}`
               * @param content the {@link com.google.api.services.securesourcemanager.v1.model.UnresolvePullRequestCommentsRequest}
               * @since 1.13
               */
              protected Unresolve(java.lang.String parent, com.google.api.services.securesourcemanager.v1.model.UnresolvePullRequestCommentsRequest content) {
                super(SecureSourceManager.this, "POST", REST_PATH, content, com.google.api.services.securesourcemanager.v1.model.Operation.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
              }

              @Override
              public Unresolve set$Xgafv(java.lang.String $Xgafv) {
                return (Unresolve) super.set$Xgafv($Xgafv);
              }

              @Override
              public Unresolve setAccessToken(java.lang.String accessToken) {
                return (Unresolve) super.setAccessToken(accessToken);
              }

              @Override
              public Unresolve setAlt(java.lang.String alt) {
                return (Unresolve) super.setAlt(alt);
              }

              @Override
              public Unresolve setCallback(java.lang.String callback) {
                return (Unresolve) super.setCallback(callback);
              }

              @Override
              public Unresolve setFields(java.lang.String fields) {
                return (Unresolve) super.setFields(fields);
              }

              @Override
              public Unresolve setKey(java.lang.String key) {
                return (Unresolve) super.setKey(key);
              }

              @Override
              public Unresolve setOauthToken(java.lang.String oauthToken) {
                return (Unresolve) super.setOauthToken(oauthToken);
              }

              @Override
              public Unresolve setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Unresolve) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Unresolve setQuotaUser(java.lang.String quotaUser) {
                return (Unresolve) super.setQuotaUser(quotaUser);
              }

              @Override
              public Unresolve setUploadType(java.lang.String uploadType) {
                return (Unresolve) super.setUploadType(uploadType);
              }

              @Override
              public Unresolve setUploadProtocol(java.lang.String uploadProtocol) {
                return (Unresolve) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The pull request in which to resolve the pull request comments. Format: `
               * projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pull
               * Requests/{pull_request_id}`
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The pull request in which to resolve the pull request comments. Format: `projects/{projec
             t_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The pull request in which to resolve the pull request comments. Format: `
               * projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pull
               * Requests/{pull_request_id}`
               */
              public Unresolve setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pullRequests/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public Unresolve set(String parameterName, Object value) {
                return (Unresolve) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * Builder for {@link SecureSourceManager}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link SecureSourceManager}. */
    @Override
    public SecureSourceManager build() {
      return new SecureSourceManager(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SecureSourceManagerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSecureSourceManagerRequestInitializer(
        SecureSourceManagerRequestInitializer securesourcemanagerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(securesourcemanagerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
