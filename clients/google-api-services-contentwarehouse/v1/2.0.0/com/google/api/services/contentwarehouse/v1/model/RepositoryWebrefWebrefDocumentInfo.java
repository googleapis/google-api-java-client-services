/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * All information that applies globally to the document. Next available tag: 11
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefWebrefDocumentInfo extends com.google.api.client.json.GenericJson {

  /**
   * Information about the document copied from the docjoin. This will never be populated when
   * WebrefEntities appears inside a CompositeDoc, but may we used when it stands alone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefDocumentMetadata documentMetadata;

  /**
   * Optional extensions (e.g. taxonomic classifications).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet extensions;

  /**
   * Information about the outlinks of this document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefWebrefOutlinkInfos outlinkInfos;

  /**
   * The content (CONTENT section 0) as parsed by WebrefParser. Only used by
   * //r/w/postprocessing/idf/idf-pipeline for document ngram idf computation. Populated when the
   * annotator is run with webref_populate_parsed_content Each webref_parsed_content_sentence
   * represents one sentence of the context where saft annotations were used to determine the
   * sentence boundaries. See r/w/universal/processors/saft/saft-sentence-helper.h for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> webrefParsedContentSentence;

  /**
   * Information about the document copied from the docjoin. This will never be populated when
   * WebrefEntities appears inside a CompositeDoc, but may we used when it stands alone.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefDocumentMetadata getDocumentMetadata() {
    return documentMetadata;
  }

  /**
   * Information about the document copied from the docjoin. This will never be populated when
   * WebrefEntities appears inside a CompositeDoc, but may we used when it stands alone.
   * @param documentMetadata documentMetadata or {@code null} for none
   */
  public RepositoryWebrefWebrefDocumentInfo setDocumentMetadata(RepositoryWebrefDocumentMetadata documentMetadata) {
    this.documentMetadata = documentMetadata;
    return this;
  }

  /**
   * Optional extensions (e.g. taxonomic classifications).
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getExtensions() {
    return extensions;
  }

  /**
   * Optional extensions (e.g. taxonomic classifications).
   * @param extensions extensions or {@code null} for none
   */
  public RepositoryWebrefWebrefDocumentInfo setExtensions(Proto2BridgeMessageSet extensions) {
    this.extensions = extensions;
    return this;
  }

  /**
   * Information about the outlinks of this document.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefWebrefOutlinkInfos getOutlinkInfos() {
    return outlinkInfos;
  }

  /**
   * Information about the outlinks of this document.
   * @param outlinkInfos outlinkInfos or {@code null} for none
   */
  public RepositoryWebrefWebrefDocumentInfo setOutlinkInfos(RepositoryWebrefWebrefOutlinkInfos outlinkInfos) {
    this.outlinkInfos = outlinkInfos;
    return this;
  }

  /**
   * The content (CONTENT section 0) as parsed by WebrefParser. Only used by
   * //r/w/postprocessing/idf/idf-pipeline for document ngram idf computation. Populated when the
   * annotator is run with webref_populate_parsed_content Each webref_parsed_content_sentence
   * represents one sentence of the context where saft annotations were used to determine the
   * sentence boundaries. See r/w/universal/processors/saft/saft-sentence-helper.h for details.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getWebrefParsedContentSentence() {
    return webrefParsedContentSentence;
  }

  /**
   * The content (CONTENT section 0) as parsed by WebrefParser. Only used by
   * //r/w/postprocessing/idf/idf-pipeline for document ngram idf computation. Populated when the
   * annotator is run with webref_populate_parsed_content Each webref_parsed_content_sentence
   * represents one sentence of the context where saft annotations were used to determine the
   * sentence boundaries. See r/w/universal/processors/saft/saft-sentence-helper.h for details.
   * @param webrefParsedContentSentence webrefParsedContentSentence or {@code null} for none
   */
  public RepositoryWebrefWebrefDocumentInfo setWebrefParsedContentSentence(java.util.List<java.lang.String> webrefParsedContentSentence) {
    this.webrefParsedContentSentence = webrefParsedContentSentence;
    return this;
  }

  @Override
  public RepositoryWebrefWebrefDocumentInfo set(String fieldName, Object value) {
    return (RepositoryWebrefWebrefDocumentInfo) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefWebrefDocumentInfo clone() {
    return (RepositoryWebrefWebrefDocumentInfo) super.clone();
  }

}
