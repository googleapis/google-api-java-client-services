/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Data representing a comment moderated restriction. A moderated comment is hidden from all viewers
 * except for comment author. A comment can be moderated due to multiple moderated restrictions from
 * multiple issuers. Each is represented by a CommentModeratedRestriction entry which is uniquely
 * identified by the external comment id and the create time in the storage. Conceptually, there
 * should be exactly one moderated restriction for a specific reason per issuer per reviewable value
 * and this constraint will be enforced in the Comment API endpoints. For more context see go/yt-
 * comment-restriction-data-model ## Next id: 11. ## Spanner primary key attributes
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class YoutubeCommentsApiCommentModeratedRestriction extends com.google.api.client.json.GenericJson {

  /**
   * Live chat auto moderation only. The HOLD decisions and whether they are enforced
   * correspondingly.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement> autoModEnforcements;

  /**
   * Required. The creation time of this restriction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Required. The external ID of the comment that this restriction described.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String externalCommentId;

  /**
   * Required. The system who moderated the comment. For CommentModeratedRestriction all issuer
   * enums apply."Issuer" is different from the grouping for permission check, which will be
   * enforced via Boq Scaffolding RpcSecurityPolicy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsApiCommentRestrictionIssuer issuer;

  /**
   * Required. The specific restriction reason why the comment is moderated. When Automod issues
   * multiple HOLD decisions for a chat message, they always share the same reason.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsApiCommentRestrictionReason reason;

  /**
   * True if moderation comes from T, Automod, and some of channel owner settings and comments will
   * be put into "Held For Review" queue for channel owner review. After any creator review, this
   * restriction will remain in this status to capture the original restriction. True maps to
   * ModerationState=HOLD in Stanza. False if moderation results from channel owner manual
   * opertation or author in hidden user list, and maps to ModerationState=REJECTED in Stanza.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reviewable;

  /**
   * Required. For moderated restriction on comment and live chat but not issued by Automod, the
   * field should be always set to ACTIVE. For Automod moderation on live chat, the restriction is
   * active as long as one of the HOLD decisions is enforced. Can only be changed by upcoming QPS
   * threshold configuration changes and backfills.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * The timestamp when this restriction is updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Live chat auto moderation only. The HOLD decisions and whether they are enforced
   * correspondingly.
   * @return value or {@code null} for none
   */
  public java.util.List<YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement> getAutoModEnforcements() {
    return autoModEnforcements;
  }

  /**
   * Live chat auto moderation only. The HOLD decisions and whether they are enforced
   * correspondingly.
   * @param autoModEnforcements autoModEnforcements or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setAutoModEnforcements(java.util.List<YoutubeCommentsApiCommentModeratedRestrictionAutoModDecisionEnforcement> autoModEnforcements) {
    this.autoModEnforcements = autoModEnforcements;
    return this;
  }

  /**
   * Required. The creation time of this restriction.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Required. The creation time of this restriction.
   * @param createTime createTime or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. The external ID of the comment that this restriction described.
   * @return value or {@code null} for none
   */
  public java.lang.String getExternalCommentId() {
    return externalCommentId;
  }

  /**
   * Required. The external ID of the comment that this restriction described.
   * @param externalCommentId externalCommentId or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setExternalCommentId(java.lang.String externalCommentId) {
    this.externalCommentId = externalCommentId;
    return this;
  }

  /**
   * Required. The system who moderated the comment. For CommentModeratedRestriction all issuer
   * enums apply."Issuer" is different from the grouping for permission check, which will be
   * enforced via Boq Scaffolding RpcSecurityPolicy.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsApiCommentRestrictionIssuer getIssuer() {
    return issuer;
  }

  /**
   * Required. The system who moderated the comment. For CommentModeratedRestriction all issuer
   * enums apply."Issuer" is different from the grouping for permission check, which will be
   * enforced via Boq Scaffolding RpcSecurityPolicy.
   * @param issuer issuer or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setIssuer(YoutubeCommentsApiCommentRestrictionIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Required. The specific restriction reason why the comment is moderated. When Automod issues
   * multiple HOLD decisions for a chat message, they always share the same reason.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsApiCommentRestrictionReason getReason() {
    return reason;
  }

  /**
   * Required. The specific restriction reason why the comment is moderated. When Automod issues
   * multiple HOLD decisions for a chat message, they always share the same reason.
   * @param reason reason or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setReason(YoutubeCommentsApiCommentRestrictionReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * True if moderation comes from T, Automod, and some of channel owner settings and comments will
   * be put into "Held For Review" queue for channel owner review. After any creator review, this
   * restriction will remain in this status to capture the original restriction. True maps to
   * ModerationState=HOLD in Stanza. False if moderation results from channel owner manual
   * opertation or author in hidden user list, and maps to ModerationState=REJECTED in Stanza.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReviewable() {
    return reviewable;
  }

  /**
   * True if moderation comes from T, Automod, and some of channel owner settings and comments will
   * be put into "Held For Review" queue for channel owner review. After any creator review, this
   * restriction will remain in this status to capture the original restriction. True maps to
   * ModerationState=HOLD in Stanza. False if moderation results from channel owner manual
   * opertation or author in hidden user list, and maps to ModerationState=REJECTED in Stanza.
   * @param reviewable reviewable or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setReviewable(java.lang.Boolean reviewable) {
    this.reviewable = reviewable;
    return this;
  }

  /**
   * Required. For moderated restriction on comment and live chat but not issued by Automod, the
   * field should be always set to ACTIVE. For Automod moderation on live chat, the restriction is
   * active as long as one of the HOLD decisions is enforced. Can only be changed by upcoming QPS
   * threshold configuration changes and backfills.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Required. For moderated restriction on comment and live chat but not issued by Automod, the
   * field should be always set to ACTIVE. For Automod moderation on live chat, the restriction is
   * active as long as one of the HOLD decisions is enforced. Can only be changed by upcoming QPS
   * threshold configuration changes and backfills.
   * @param status status or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * The timestamp when this restriction is updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * The timestamp when this restriction is updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public YoutubeCommentsApiCommentModeratedRestriction setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public YoutubeCommentsApiCommentModeratedRestriction set(String fieldName, Object value) {
    return (YoutubeCommentsApiCommentModeratedRestriction) super.set(fieldName, value);
  }

  @Override
  public YoutubeCommentsApiCommentModeratedRestriction clone() {
    return (YoutubeCommentsApiCommentModeratedRestriction) super.clone();
  }

}
