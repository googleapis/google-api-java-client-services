/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.clouddeploy.v1.model;

/**
 * Contains the paths to the artifacts, relative to the URI, for a phase.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Cloud Deploy API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhaseArtifact extends com.google.api.client.json.GenericJson {

  /**
   * Output only. File path of the directory of rendered job manifests relative to the URI. This is
   * only set if it is applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jobManifestsPath;

  /**
   * Output only. File path of the rendered manifest relative to the URI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String manifestPath;

  /**
   * Output only. File path of the resolved Skaffold configuration relative to the URI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String skaffoldConfigPath;

  /**
   * Output only. File path of the directory of rendered job manifests relative to the URI. This is
   * only set if it is applicable.
   * @return value or {@code null} for none
   */
  public java.lang.String getJobManifestsPath() {
    return jobManifestsPath;
  }

  /**
   * Output only. File path of the directory of rendered job manifests relative to the URI. This is
   * only set if it is applicable.
   * @param jobManifestsPath jobManifestsPath or {@code null} for none
   */
  public PhaseArtifact setJobManifestsPath(java.lang.String jobManifestsPath) {
    this.jobManifestsPath = jobManifestsPath;
    return this;
  }

  /**
   * Output only. File path of the rendered manifest relative to the URI.
   * @return value or {@code null} for none
   */
  public java.lang.String getManifestPath() {
    return manifestPath;
  }

  /**
   * Output only. File path of the rendered manifest relative to the URI.
   * @param manifestPath manifestPath or {@code null} for none
   */
  public PhaseArtifact setManifestPath(java.lang.String manifestPath) {
    this.manifestPath = manifestPath;
    return this;
  }

  /**
   * Output only. File path of the resolved Skaffold configuration relative to the URI.
   * @return value or {@code null} for none
   */
  public java.lang.String getSkaffoldConfigPath() {
    return skaffoldConfigPath;
  }

  /**
   * Output only. File path of the resolved Skaffold configuration relative to the URI.
   * @param skaffoldConfigPath skaffoldConfigPath or {@code null} for none
   */
  public PhaseArtifact setSkaffoldConfigPath(java.lang.String skaffoldConfigPath) {
    this.skaffoldConfigPath = skaffoldConfigPath;
    return this;
  }

  @Override
  public PhaseArtifact set(String fieldName, Object value) {
    return (PhaseArtifact) super.set(fieldName, value);
  }

  @Override
  public PhaseArtifact clone() {
    return (PhaseArtifact) super.clone();
  }

}
