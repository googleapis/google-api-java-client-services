/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Details of the Database System Shapes resource. https://docs.oracle.com/en-
 * us/iaas/api/#/en/database/20160918/DbSystemShapeSummary/
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DbSystemShape extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Number of cores per node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer availableCoreCountPerNode;

  /**
   * Optional. Storage per storage server in terabytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer availableDataStorageTb;

  /**
   * Optional. Memory per database server node in gigabytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer availableMemoryPerNodeGb;

  /**
   * Optional. Maximum number of database servers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxNodeCount;

  /**
   * Optional. Maximum number of storage servers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxStorageCount;

  /**
   * Optional. Minimum core count per node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minCoreCountPerNode;

  /**
   * Optional. Minimum node storage per database server in gigabytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minDbNodeStoragePerNodeGb;

  /**
   * Optional. Minimum memory per node in gigabytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minMemoryPerNodeGb;

  /**
   * Optional. Minimum number of database servers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minNodeCount;

  /**
   * Optional. Minimum number of storage servers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minStorageCount;

  /**
   * Identifier. The name of the Database System Shape resource with the format:
   * projects/{project}/locations/{region}/dbSystemShapes/{db_system_shape}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. shape
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shape;

  /**
   * Optional. Number of cores per node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAvailableCoreCountPerNode() {
    return availableCoreCountPerNode;
  }

  /**
   * Optional. Number of cores per node.
   * @param availableCoreCountPerNode availableCoreCountPerNode or {@code null} for none
   */
  public DbSystemShape setAvailableCoreCountPerNode(java.lang.Integer availableCoreCountPerNode) {
    this.availableCoreCountPerNode = availableCoreCountPerNode;
    return this;
  }

  /**
   * Optional. Storage per storage server in terabytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAvailableDataStorageTb() {
    return availableDataStorageTb;
  }

  /**
   * Optional. Storage per storage server in terabytes.
   * @param availableDataStorageTb availableDataStorageTb or {@code null} for none
   */
  public DbSystemShape setAvailableDataStorageTb(java.lang.Integer availableDataStorageTb) {
    this.availableDataStorageTb = availableDataStorageTb;
    return this;
  }

  /**
   * Optional. Memory per database server node in gigabytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAvailableMemoryPerNodeGb() {
    return availableMemoryPerNodeGb;
  }

  /**
   * Optional. Memory per database server node in gigabytes.
   * @param availableMemoryPerNodeGb availableMemoryPerNodeGb or {@code null} for none
   */
  public DbSystemShape setAvailableMemoryPerNodeGb(java.lang.Integer availableMemoryPerNodeGb) {
    this.availableMemoryPerNodeGb = availableMemoryPerNodeGb;
    return this;
  }

  /**
   * Optional. Maximum number of database servers.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxNodeCount() {
    return maxNodeCount;
  }

  /**
   * Optional. Maximum number of database servers.
   * @param maxNodeCount maxNodeCount or {@code null} for none
   */
  public DbSystemShape setMaxNodeCount(java.lang.Integer maxNodeCount) {
    this.maxNodeCount = maxNodeCount;
    return this;
  }

  /**
   * Optional. Maximum number of storage servers.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxStorageCount() {
    return maxStorageCount;
  }

  /**
   * Optional. Maximum number of storage servers.
   * @param maxStorageCount maxStorageCount or {@code null} for none
   */
  public DbSystemShape setMaxStorageCount(java.lang.Integer maxStorageCount) {
    this.maxStorageCount = maxStorageCount;
    return this;
  }

  /**
   * Optional. Minimum core count per node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinCoreCountPerNode() {
    return minCoreCountPerNode;
  }

  /**
   * Optional. Minimum core count per node.
   * @param minCoreCountPerNode minCoreCountPerNode or {@code null} for none
   */
  public DbSystemShape setMinCoreCountPerNode(java.lang.Integer minCoreCountPerNode) {
    this.minCoreCountPerNode = minCoreCountPerNode;
    return this;
  }

  /**
   * Optional. Minimum node storage per database server in gigabytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinDbNodeStoragePerNodeGb() {
    return minDbNodeStoragePerNodeGb;
  }

  /**
   * Optional. Minimum node storage per database server in gigabytes.
   * @param minDbNodeStoragePerNodeGb minDbNodeStoragePerNodeGb or {@code null} for none
   */
  public DbSystemShape setMinDbNodeStoragePerNodeGb(java.lang.Integer minDbNodeStoragePerNodeGb) {
    this.minDbNodeStoragePerNodeGb = minDbNodeStoragePerNodeGb;
    return this;
  }

  /**
   * Optional. Minimum memory per node in gigabytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinMemoryPerNodeGb() {
    return minMemoryPerNodeGb;
  }

  /**
   * Optional. Minimum memory per node in gigabytes.
   * @param minMemoryPerNodeGb minMemoryPerNodeGb or {@code null} for none
   */
  public DbSystemShape setMinMemoryPerNodeGb(java.lang.Integer minMemoryPerNodeGb) {
    this.minMemoryPerNodeGb = minMemoryPerNodeGb;
    return this;
  }

  /**
   * Optional. Minimum number of database servers.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinNodeCount() {
    return minNodeCount;
  }

  /**
   * Optional. Minimum number of database servers.
   * @param minNodeCount minNodeCount or {@code null} for none
   */
  public DbSystemShape setMinNodeCount(java.lang.Integer minNodeCount) {
    this.minNodeCount = minNodeCount;
    return this;
  }

  /**
   * Optional. Minimum number of storage servers.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinStorageCount() {
    return minStorageCount;
  }

  /**
   * Optional. Minimum number of storage servers.
   * @param minStorageCount minStorageCount or {@code null} for none
   */
  public DbSystemShape setMinStorageCount(java.lang.Integer minStorageCount) {
    this.minStorageCount = minStorageCount;
    return this;
  }

  /**
   * Identifier. The name of the Database System Shape resource with the format:
   * projects/{project}/locations/{region}/dbSystemShapes/{db_system_shape}
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name of the Database System Shape resource with the format:
   * projects/{project}/locations/{region}/dbSystemShapes/{db_system_shape}
   * @param name name or {@code null} for none
   */
  public DbSystemShape setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. shape
   * @return value or {@code null} for none
   */
  public java.lang.String getShape() {
    return shape;
  }

  /**
   * Optional. shape
   * @param shape shape or {@code null} for none
   */
  public DbSystemShape setShape(java.lang.String shape) {
    this.shape = shape;
    return this;
  }

  @Override
  public DbSystemShape set(String fieldName, Object value) {
    return (DbSystemShape) super.set(fieldName, value);
  }

  @Override
  public DbSystemShape clone() {
    return (DbSystemShape) super.clone();
  }

}
