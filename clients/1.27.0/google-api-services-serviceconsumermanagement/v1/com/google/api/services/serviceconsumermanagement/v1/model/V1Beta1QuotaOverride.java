/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.serviceconsumermanagement.v1.model;

/**
 * A quota override
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Consumer Management API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class V1Beta1QuotaOverride extends com.google.api.client.json.GenericJson {

  /**
   * If this map is nonempty, then this override applies only to specific values for dimensions
   * defined in the limit unit.
   *
   * For example, an override on a limit with the unit 1/{project}/{region} could contain an entry
   * with the key "region" and the value "us-east-1"; the override is only applied to quota consumed
   * in that region.
   *
   * This map has the following restrictions: - Keys that are not defined in the limit's unit are
   * not valid keys.   Any string appearing in {brackets} in the unit (besides {project} or
   * {user}) is a defined key. - "project" is not a valid key; the project is already specified in
   * the parent resource name. - "user" is not a valid key; the API does not support quota overrides
   * that apply only to a specific user. - If "region" appears as a key, its value must be a valid
   * Cloud region. - If "zone" appears as a key, its value must be a valid Cloud zone. - If any
   * valid key other than "region" or "zone" appears in the map, then   all valid keys other than
   * "region" or "zone" must also appear in the map.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> dimensions;

  /**
   * The name of the metric to which this override applies.
   *
   * An example name would be: `compute.googleapis.com/cpus`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metric;

  /**
   * The resource name of the producer override. An example name would be: `services/compute.googlea
   * pis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Freg
   * ion/producerOverrides/4a3f2c1d`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long overrideValue;

  /**
   * The limit unit of the limit to which this override applies.
   *
   * An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not
   * placeholders in this example; the literal characters `{` and `}` occur in the string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * If this map is nonempty, then this override applies only to specific values for dimensions
   * defined in the limit unit.
   *
   * For example, an override on a limit with the unit 1/{project}/{region} could contain an entry
   * with the key "region" and the value "us-east-1"; the override is only applied to quota consumed
   * in that region.
   *
   * This map has the following restrictions: - Keys that are not defined in the limit's unit are
   * not valid keys.   Any string appearing in {brackets} in the unit (besides {project} or
   * {user}) is a defined key. - "project" is not a valid key; the project is already specified in
   * the parent resource name. - "user" is not a valid key; the API does not support quota overrides
   * that apply only to a specific user. - If "region" appears as a key, its value must be a valid
   * Cloud region. - If "zone" appears as a key, its value must be a valid Cloud zone. - If any
   * valid key other than "region" or "zone" appears in the map, then   all valid keys other than
   * "region" or "zone" must also appear in the map.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getDimensions() {
    return dimensions;
  }

  /**
   * If this map is nonempty, then this override applies only to specific values for dimensions
   * defined in the limit unit.
   *
   * For example, an override on a limit with the unit 1/{project}/{region} could contain an entry
   * with the key "region" and the value "us-east-1"; the override is only applied to quota consumed
   * in that region.
   *
   * This map has the following restrictions: - Keys that are not defined in the limit's unit are
   * not valid keys.   Any string appearing in {brackets} in the unit (besides {project} or
   * {user}) is a defined key. - "project" is not a valid key; the project is already specified in
   * the parent resource name. - "user" is not a valid key; the API does not support quota overrides
   * that apply only to a specific user. - If "region" appears as a key, its value must be a valid
   * Cloud region. - If "zone" appears as a key, its value must be a valid Cloud zone. - If any
   * valid key other than "region" or "zone" appears in the map, then   all valid keys other than
   * "region" or "zone" must also appear in the map.
   * @param dimensions dimensions or {@code null} for none
   */
  public V1Beta1QuotaOverride setDimensions(java.util.Map<String, java.lang.String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The name of the metric to which this override applies.
   *
   * An example name would be: `compute.googleapis.com/cpus`
   * @return value or {@code null} for none
   */
  public java.lang.String getMetric() {
    return metric;
  }

  /**
   * The name of the metric to which this override applies.
   *
   * An example name would be: `compute.googleapis.com/cpus`
   * @param metric metric or {@code null} for none
   */
  public V1Beta1QuotaOverride setMetric(java.lang.String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * The resource name of the producer override. An example name would be: `services/compute.googlea
   * pis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Freg
   * ion/producerOverrides/4a3f2c1d`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the producer override. An example name would be: `services/compute.googlea
   * pis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Freg
   * ion/producerOverrides/4a3f2c1d`
   * @param name name or {@code null} for none
   */
  public V1Beta1QuotaOverride setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
   * @return value or {@code null} for none
   */
  public java.lang.Long getOverrideValue() {
    return overrideValue;
  }

  /**
   * The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
   * @param overrideValue overrideValue or {@code null} for none
   */
  public V1Beta1QuotaOverride setOverrideValue(java.lang.Long overrideValue) {
    this.overrideValue = overrideValue;
    return this;
  }

  /**
   * The limit unit of the limit to which this override applies.
   *
   * An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not
   * placeholders in this example; the literal characters `{` and `}` occur in the string.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * The limit unit of the limit to which this override applies.
   *
   * An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not
   * placeholders in this example; the literal characters `{` and `}` occur in the string.
   * @param unit unit or {@code null} for none
   */
  public V1Beta1QuotaOverride setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  @Override
  public V1Beta1QuotaOverride set(String fieldName, Object value) {
    return (V1Beta1QuotaOverride) super.set(fieldName, value);
  }

  @Override
  public V1Beta1QuotaOverride clone() {
    return (V1Beta1QuotaOverride) super.clone();
  }

}
