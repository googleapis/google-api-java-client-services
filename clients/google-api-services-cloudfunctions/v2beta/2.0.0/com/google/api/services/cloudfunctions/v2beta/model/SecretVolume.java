/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudfunctions.v2beta.model;

/**
 * Configuration for a secret volume. It has the information necessary to fetch the secret value
 * from secret manager and make it available as files mounted at the requested paths within the
 * application container.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Functions API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SecretVolume extends com.google.api.client.json.GenericJson {

  /**
   * The path within the container to mount the secret volume. For example, setting the mount_path
   * as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This
   * directory will also be completely shadowed and unavailable to mount any other secrets.
   * Recommended mount path: /etc/secrets
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mountPath;

  /**
   * Project identifier (preferably project number but can also be the project ID) of the project
   * that contains the secret. If not set, it is assumed that the secret is in the same project as
   * the function.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectId;

  /**
   * Name of the secret in secret manager (not the full resource name).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String secret;

  /**
   * List of secret versions to mount for this secret. If empty, the `latest` version of the secret
   * will be made available in a file named after the secret under the mount point.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SecretVersion> versions;

  static {
    // hack to force ProGuard to consider SecretVersion used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(SecretVersion.class);
  }

  /**
   * The path within the container to mount the secret volume. For example, setting the mount_path
   * as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This
   * directory will also be completely shadowed and unavailable to mount any other secrets.
   * Recommended mount path: /etc/secrets
   * @return value or {@code null} for none
   */
  public java.lang.String getMountPath() {
    return mountPath;
  }

  /**
   * The path within the container to mount the secret volume. For example, setting the mount_path
   * as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This
   * directory will also be completely shadowed and unavailable to mount any other secrets.
   * Recommended mount path: /etc/secrets
   * @param mountPath mountPath or {@code null} for none
   */
  public SecretVolume setMountPath(java.lang.String mountPath) {
    this.mountPath = mountPath;
    return this;
  }

  /**
   * Project identifier (preferably project number but can also be the project ID) of the project
   * that contains the secret. If not set, it is assumed that the secret is in the same project as
   * the function.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectId() {
    return projectId;
  }

  /**
   * Project identifier (preferably project number but can also be the project ID) of the project
   * that contains the secret. If not set, it is assumed that the secret is in the same project as
   * the function.
   * @param projectId projectId or {@code null} for none
   */
  public SecretVolume setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Name of the secret in secret manager (not the full resource name).
   * @return value or {@code null} for none
   */
  public java.lang.String getSecret() {
    return secret;
  }

  /**
   * Name of the secret in secret manager (not the full resource name).
   * @param secret secret or {@code null} for none
   */
  public SecretVolume setSecret(java.lang.String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * List of secret versions to mount for this secret. If empty, the `latest` version of the secret
   * will be made available in a file named after the secret under the mount point.
   * @return value or {@code null} for none
   */
  public java.util.List<SecretVersion> getVersions() {
    return versions;
  }

  /**
   * List of secret versions to mount for this secret. If empty, the `latest` version of the secret
   * will be made available in a file named after the secret under the mount point.
   * @param versions versions or {@code null} for none
   */
  public SecretVolume setVersions(java.util.List<SecretVersion> versions) {
    this.versions = versions;
    return this;
  }

  @Override
  public SecretVolume set(String fieldName, Object value) {
    return (SecretVolume) super.set(fieldName, value);
  }

  @Override
  public SecretVolume clone() {
    return (SecretVolume) super.clone();
  }

}
