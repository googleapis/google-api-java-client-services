/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * In addition, if TransactionOptions.read_only.return_read_timestamp is set to true, a special
 * value of 2^63 - 2 will be returned in the Transaction message that describes the transaction,
 * instead of a valid read timestamp. This special value should be discarded and not used for any
 * subsequent queries. Please see https://cloud.google.com/spanner/docs/change-streams for more
 * details on how to query the change stream TVFs. Partitioned DML transactions: Partitioned DML
 * transactions are used to execute DML statements with a different execution strategy that provides
 * different, and often better, scalability properties for large, table-wide operations than DML in
 * a ReadWrite transaction. Smaller scoped statements, such as an OLTP workload, should prefer using
 * ReadWrite transactions. Partitioned DML partitions the keyspace and runs the DML statement on
 * each partition in separate, internal transactions. These transactions commit automatically when
 * complete, and run independently from one another. To reduce lock contention, this execution
 * strategy only acquires read locks on rows that match the WHERE clause of the statement.
 * Additionally, the smaller per-partition transactions hold locks for less time. That said,
 * Partitioned DML is not a drop-in replacement for standard DML used in ReadWrite transactions. -
 * The DML statement must be fully-partitionable. Specifically, the statement must be expressible as
 * the union of many statements which each access only a single row of the table. - The statement is
 * not applied atomically to all rows of the table. Rather, the statement is applied atomically to
 * partitions of the table, in independent transactions. Secondary index rows are updated atomically
 * with the base table rows. - Partitioned DML does not guarantee exactly-once execution semantics
 * against a partition. The statement will be applied at least once to each partition. It is
 * strongly recommended that the DML statement should be idempotent to avoid unexpected results. For
 * instance, it is potentially dangerous to run a statement such as `UPDATE table SET column =
 * column + 1` as it could be run multiple times against some rows. - The partitions are committed
 * automatically - there is no support for Commit or Rollback. If the call returns an error, or if
 * the client issuing the ExecuteSql call dies, it is possible that some rows had the statement
 * executed on them successfully. It is also possible that statement was never executed against
 * other rows. - Partitioned DML transactions may only contain the execution of a single DML
 * statement via ExecuteSql or ExecuteStreamingSql. - If any error is encountered during the
 * execution of the partitioned DML operation (for instance, a UNIQUE INDEX violation, division by
 * zero, or a value that cannot be stored due to schema constraints), then the operation is stopped
 * at that point and an error is returned. It is possible that at this point, some partitions have
 * been committed (or even committed multiple times), and other partitions have not been run at all.
 * Given the above, Partitioned DML is good fit for large, database-wide, operations that are
 * idempotent, such as deleting old rows from a very large table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TransactionOptions extends com.google.api.client.json.GenericJson {

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PartitionedDml partitionedDml;

  /**
   * Transaction will not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReadOnly readOnly;

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReadWrite readWrite;

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public PartitionedDml getPartitionedDml() {
    return partitionedDml;
  }

  /**
   * Partitioned DML transaction. Authorization to begin a Partitioned DML transaction requires
   * `spanner.databases.beginPartitionedDmlTransaction` permission on the `session` resource.
   * @param partitionedDml partitionedDml or {@code null} for none
   */
  public TransactionOptions setPartitionedDml(PartitionedDml partitionedDml) {
    this.partitionedDml = partitionedDml;
    return this;
  }

  /**
   * Transaction will not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public ReadOnly getReadOnly() {
    return readOnly;
  }

  /**
   * Transaction will not write. Authorization to begin a read-only transaction requires
   * `spanner.databases.beginReadOnlyTransaction` permission on the `session` resource.
   * @param readOnly readOnly or {@code null} for none
   */
  public TransactionOptions setReadOnly(ReadOnly readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * @return value or {@code null} for none
   */
  public ReadWrite getReadWrite() {
    return readWrite;
  }

  /**
   * Transaction may write. Authorization to begin a read-write transaction requires
   * `spanner.databases.beginOrRollbackReadWriteTransaction` permission on the `session` resource.
   * @param readWrite readWrite or {@code null} for none
   */
  public TransactionOptions setReadWrite(ReadWrite readWrite) {
    this.readWrite = readWrite;
    return this;
  }

  @Override
  public TransactionOptions set(String fieldName, Object value) {
    return (TransactionOptions) super.set(fieldName, value);
  }

  @Override
  public TransactionOptions clone() {
    return (TransactionOptions) super.clone();
  }

}
