/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for QualityTimebasedLastSignificantUpdateAdjustments.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualityTimebasedLastSignificantUpdateAdjustments extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String adjustmentSource;

  /**
   * The timestamp is precise when it's derived from existing (>March 2022) passage timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isUpperboundTimestampPrecise;

  /**
   * The timestamp that was picked up by the component indicated in the LastSignificantUpdateSource
   * but was dropped due to exceeding the upper bound. The two following fields are present only
   * when the adjustment took place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long unadjustedTimestampInSeconds;

  /**
   * The upperbound value derived from passage timestamps. If present, the LSU date should never
   * exceed this value. Design doc: go/lsu-max-passage-timestamp
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long upperboundTimestampInSeconds;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAdjustmentSource() {
    return adjustmentSource;
  }

  /**
   * @param adjustmentSource adjustmentSource or {@code null} for none
   */
  public QualityTimebasedLastSignificantUpdateAdjustments setAdjustmentSource(java.lang.String adjustmentSource) {
    this.adjustmentSource = adjustmentSource;
    return this;
  }

  /**
   * The timestamp is precise when it's derived from existing (>March 2022) passage timestamp.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsUpperboundTimestampPrecise() {
    return isUpperboundTimestampPrecise;
  }

  /**
   * The timestamp is precise when it's derived from existing (>March 2022) passage timestamp.
   * @param isUpperboundTimestampPrecise isUpperboundTimestampPrecise or {@code null} for none
   */
  public QualityTimebasedLastSignificantUpdateAdjustments setIsUpperboundTimestampPrecise(java.lang.Boolean isUpperboundTimestampPrecise) {
    this.isUpperboundTimestampPrecise = isUpperboundTimestampPrecise;
    return this;
  }

  /**
   * The timestamp that was picked up by the component indicated in the LastSignificantUpdateSource
   * but was dropped due to exceeding the upper bound. The two following fields are present only
   * when the adjustment took place.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUnadjustedTimestampInSeconds() {
    return unadjustedTimestampInSeconds;
  }

  /**
   * The timestamp that was picked up by the component indicated in the LastSignificantUpdateSource
   * but was dropped due to exceeding the upper bound. The two following fields are present only
   * when the adjustment took place.
   * @param unadjustedTimestampInSeconds unadjustedTimestampInSeconds or {@code null} for none
   */
  public QualityTimebasedLastSignificantUpdateAdjustments setUnadjustedTimestampInSeconds(java.lang.Long unadjustedTimestampInSeconds) {
    this.unadjustedTimestampInSeconds = unadjustedTimestampInSeconds;
    return this;
  }

  /**
   * The upperbound value derived from passage timestamps. If present, the LSU date should never
   * exceed this value. Design doc: go/lsu-max-passage-timestamp
   * @return value or {@code null} for none
   */
  public java.lang.Long getUpperboundTimestampInSeconds() {
    return upperboundTimestampInSeconds;
  }

  /**
   * The upperbound value derived from passage timestamps. If present, the LSU date should never
   * exceed this value. Design doc: go/lsu-max-passage-timestamp
   * @param upperboundTimestampInSeconds upperboundTimestampInSeconds or {@code null} for none
   */
  public QualityTimebasedLastSignificantUpdateAdjustments setUpperboundTimestampInSeconds(java.lang.Long upperboundTimestampInSeconds) {
    this.upperboundTimestampInSeconds = upperboundTimestampInSeconds;
    return this;
  }

  @Override
  public QualityTimebasedLastSignificantUpdateAdjustments set(String fieldName, Object value) {
    return (QualityTimebasedLastSignificantUpdateAdjustments) super.set(fieldName, value);
  }

  @Override
  public QualityTimebasedLastSignificantUpdateAdjustments clone() {
    return (QualityTimebasedLastSignificantUpdateAdjustments) super.clone();
  }

}
