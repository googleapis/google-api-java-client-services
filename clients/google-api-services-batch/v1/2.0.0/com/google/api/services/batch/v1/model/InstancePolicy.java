/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.batch.v1.model;

/**
 * InstancePolicy describes an instance type and resources attached to each VM created by this
 * InstancePolicy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Batch API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class InstancePolicy extends com.google.api.client.json.GenericJson {

  /**
   * The accelerators attached to each VM instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Accelerator> accelerators;

  static {
    // hack to force ProGuard to consider Accelerator used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Accelerator.class);
  }

  /**
   * Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be
   * deleted when the VM is deleted. Batch API now only supports booting from image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Disk bootDisk;

  /**
   * Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be
   * deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file
   * system or a raw storage drive that is not ready for data storage and accessing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AttachedDisk> disks;

  static {
    // hack to force ProGuard to consider AttachedDisk used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AttachedDisk.class);
  }

  /**
   * The Compute Engine machine type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineType;

  /**
   * The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-
   * platform.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minCpuPlatform;

  /**
   * The provisioning model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String provisioningModel;

  /**
   * Optional. If not specified (default), VMs will consume any applicable reservation. If
   * "NO_RESERVATION" is specified, VMs will not consume any reservation. Otherwise, if specified,
   * VMs will consume only the specified reservation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reservation;

  /**
   * The accelerators attached to each VM instance.
   * @return value or {@code null} for none
   */
  public java.util.List<Accelerator> getAccelerators() {
    return accelerators;
  }

  /**
   * The accelerators attached to each VM instance.
   * @param accelerators accelerators or {@code null} for none
   */
  public InstancePolicy setAccelerators(java.util.List<Accelerator> accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  /**
   * Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be
   * deleted when the VM is deleted. Batch API now only supports booting from image.
   * @return value or {@code null} for none
   */
  public Disk getBootDisk() {
    return bootDisk;
  }

  /**
   * Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be
   * deleted when the VM is deleted. Batch API now only supports booting from image.
   * @param bootDisk bootDisk or {@code null} for none
   */
  public InstancePolicy setBootDisk(Disk bootDisk) {
    this.bootDisk = bootDisk;
    return this;
  }

  /**
   * Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be
   * deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file
   * system or a raw storage drive that is not ready for data storage and accessing.
   * @return value or {@code null} for none
   */
  public java.util.List<AttachedDisk> getDisks() {
    return disks;
  }

  /**
   * Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be
   * deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file
   * system or a raw storage drive that is not ready for data storage and accessing.
   * @param disks disks or {@code null} for none
   */
  public InstancePolicy setDisks(java.util.List<AttachedDisk> disks) {
    this.disks = disks;
    return this;
  }

  /**
   * The Compute Engine machine type.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineType() {
    return machineType;
  }

  /**
   * The Compute Engine machine type.
   * @param machineType machineType or {@code null} for none
   */
  public InstancePolicy setMachineType(java.lang.String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-
   * platform.
   * @return value or {@code null} for none
   */
  public java.lang.String getMinCpuPlatform() {
    return minCpuPlatform;
  }

  /**
   * The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-
   * platform.
   * @param minCpuPlatform minCpuPlatform or {@code null} for none
   */
  public InstancePolicy setMinCpuPlatform(java.lang.String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
    return this;
  }

  /**
   * The provisioning model.
   * @return value or {@code null} for none
   */
  public java.lang.String getProvisioningModel() {
    return provisioningModel;
  }

  /**
   * The provisioning model.
   * @param provisioningModel provisioningModel or {@code null} for none
   */
  public InstancePolicy setProvisioningModel(java.lang.String provisioningModel) {
    this.provisioningModel = provisioningModel;
    return this;
  }

  /**
   * Optional. If not specified (default), VMs will consume any applicable reservation. If
   * "NO_RESERVATION" is specified, VMs will not consume any reservation. Otherwise, if specified,
   * VMs will consume only the specified reservation.
   * @return value or {@code null} for none
   */
  public java.lang.String getReservation() {
    return reservation;
  }

  /**
   * Optional. If not specified (default), VMs will consume any applicable reservation. If
   * "NO_RESERVATION" is specified, VMs will not consume any reservation. Otherwise, if specified,
   * VMs will consume only the specified reservation.
   * @param reservation reservation or {@code null} for none
   */
  public InstancePolicy setReservation(java.lang.String reservation) {
    this.reservation = reservation;
    return this;
  }

  @Override
  public InstancePolicy set(String fieldName, Object value) {
    return (InstancePolicy) super.set(fieldName, value);
  }

  @Override
  public InstancePolicy clone() {
    return (InstancePolicy) super.clone();
  }

}
