/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.domainsrdap.v1;

/**
 * Service definition for DomainsRDAP (v1).
 *
 * <p>
 * Read-only public API that lets users search for information about domain names.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/domains/rdap/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DomainsRDAPRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class DomainsRDAP extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Domains RDAP API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://domainsrdap.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://domainsrdap.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public DomainsRDAP(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  DomainsRDAP(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Autnum collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.Autnum.List request = domainsrdap.autnum().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Autnum autnum() {
    return new Autnum();
  }

  /**
   * The "autnum" collection of methods.
   */
  public class Autnum {

    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "autnum.get".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param autnumId
     * @return the request
     */
    public Get get(java.lang.String autnumId) throws java.io.IOException {
      Get result = new Get(autnumId);
      initialize(result);
      return result;
    }

    public class Get extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/autnum/{autnumId}";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "autnum.get".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param autnumId
       * @since 1.13
       */
      protected Get(java.lang.String autnumId) {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
        this.autnumId = com.google.api.client.util.Preconditions.checkNotNull(autnumId, "Required parameter autnumId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      @com.google.api.client.util.Key
      private java.lang.String autnumId;

      /**

       */
      public java.lang.String getAutnumId() {
        return autnumId;
      }

      public Get setAutnumId(java.lang.String autnumId) {
        this.autnumId = autnumId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Domain collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.Domain.List request = domainsrdap.domain().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Domain domain() {
    return new Domain();
  }

  /**
   * The "domain" collection of methods.
   */
  public class Domain {

    /**
     * Look up RDAP information for a domain by name.
     *
     * Create a request for the method "domain.get".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param domainName Full domain name to look up. Example: "example.com"
     * @return the request
     */
    public Get get(java.lang.String domainName) throws java.io.IOException {
      Get result = new Get(domainName);
      initialize(result);
      return result;
    }

    public class Get extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.HttpBody> {

      private static final String REST_PATH = "v1/domain/{+domainName}";

      private final java.util.regex.Pattern DOMAIN_NAME_PATTERN =
          java.util.regex.Pattern.compile("^[^/]+$");

      /**
       * Look up RDAP information for a domain by name.
       *
       * Create a request for the method "domain.get".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param domainName Full domain name to look up. Example: "example.com"
       * @since 1.13
       */
      protected Get(java.lang.String domainName) {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.HttpBody.class);
        this.domainName = com.google.api.client.util.Preconditions.checkNotNull(domainName, "Required parameter domainName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DOMAIN_NAME_PATTERN.matcher(domainName).matches(),
              "Parameter domainName must conform to the pattern " +
              "^[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Full domain name to look up. Example: "example.com" */
      @com.google.api.client.util.Key
      private java.lang.String domainName;

      /** Full domain name to look up. Example: "example.com"
       */
      public java.lang.String getDomainName() {
        return domainName;
      }

      /** Full domain name to look up. Example: "example.com" */
      public Get setDomainName(java.lang.String domainName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DOMAIN_NAME_PATTERN.matcher(domainName).matches(),
              "Parameter domainName must conform to the pattern " +
              "^[^/]+$");
        }
        this.domainName = domainName;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Entity collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.Entity.List request = domainsrdap.entity().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Entity entity() {
    return new Entity();
  }

  /**
   * The "entity" collection of methods.
   */
  public class Entity {

    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "entity.get".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param entityId
     * @return the request
     */
    public Get get(java.lang.String entityId) throws java.io.IOException {
      Get result = new Get(entityId);
      initialize(result);
      return result;
    }

    public class Get extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/entity/{entityId}";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "entity.get".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityId
       * @since 1.13
       */
      protected Get(java.lang.String entityId) {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
        this.entityId = com.google.api.client.util.Preconditions.checkNotNull(entityId, "Required parameter entityId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityId;

      /**

       */
      public java.lang.String getEntityId() {
        return entityId;
      }

      public Get setEntityId(java.lang.String entityId) {
        this.entityId = entityId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Ip collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.Ip.List request = domainsrdap.ip().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Ip ip() {
    return new Ip();
  }

  /**
   * The "ip" collection of methods.
   */
  public class Ip {

    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "ip.get".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param ipId
     * @param ipId1
     * @return the request
     */
    public Get get(java.lang.String ipId, java.lang.String ipId1) throws java.io.IOException {
      Get result = new Get(ipId, ipId1);
      initialize(result);
      return result;
    }

    public class Get extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/ip/{ipId}/{ipId1}";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "ip.get".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param ipId
       * @param ipId1
       * @since 1.13
       */
      protected Get(java.lang.String ipId, java.lang.String ipId1) {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
        this.ipId = com.google.api.client.util.Preconditions.checkNotNull(ipId, "Required parameter ipId must be specified.");
        this.ipId1 = com.google.api.client.util.Preconditions.checkNotNull(ipId1, "Required parameter ipId1 must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      @com.google.api.client.util.Key
      private java.lang.String ipId;

      /**

       */
      public java.lang.String getIpId() {
        return ipId;
      }

      public Get setIpId(java.lang.String ipId) {
        this.ipId = ipId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String ipId1;

      /**

       */
      public java.lang.String getIpId1() {
        return ipId1;
      }

      public Get setIpId1(java.lang.String ipId1) {
        this.ipId1 = ipId1;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Nameserver collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.Nameserver.List request = domainsrdap.nameserver().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Nameserver nameserver() {
    return new Nameserver();
  }

  /**
   * The "nameserver" collection of methods.
   */
  public class Nameserver {

    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "nameserver.get".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param nameserverId
     * @return the request
     */
    public Get get(java.lang.String nameserverId) throws java.io.IOException {
      Get result = new Get(nameserverId);
      initialize(result);
      return result;
    }

    public class Get extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/nameserver/{nameserverId}";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "nameserver.get".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param nameserverId
       * @since 1.13
       */
      protected Get(java.lang.String nameserverId) {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
        this.nameserverId = com.google.api.client.util.Preconditions.checkNotNull(nameserverId, "Required parameter nameserverId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      @com.google.api.client.util.Key
      private java.lang.String nameserverId;

      /**

       */
      public java.lang.String getNameserverId() {
        return nameserverId;
      }

      public Get setNameserverId(java.lang.String nameserverId) {
        this.nameserverId = nameserverId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the V1 collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DomainsRDAP domainsrdap = new DomainsRDAP(...);}
   *   {@code DomainsRDAP.V1.List request = domainsrdap.v1().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public V1 v1() {
    return new V1();
  }

  /**
   * The "v1" collection of methods.
   */
  public class V1 {

    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "v1.getDomains".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link GetDomains#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetDomains getDomains() throws java.io.IOException {
      GetDomains result = new GetDomains();
      initialize(result);
      return result;
    }

    public class GetDomains extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/domains";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "v1.getDomains".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link GetDomains#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetDomains#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetDomains() {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetDomains set$Xgafv(java.lang.String $Xgafv) {
        return (GetDomains) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetDomains setAccessToken(java.lang.String accessToken) {
        return (GetDomains) super.setAccessToken(accessToken);
      }

      @Override
      public GetDomains setAlt(java.lang.String alt) {
        return (GetDomains) super.setAlt(alt);
      }

      @Override
      public GetDomains setCallback(java.lang.String callback) {
        return (GetDomains) super.setCallback(callback);
      }

      @Override
      public GetDomains setFields(java.lang.String fields) {
        return (GetDomains) super.setFields(fields);
      }

      @Override
      public GetDomains setKey(java.lang.String key) {
        return (GetDomains) super.setKey(key);
      }

      @Override
      public GetDomains setOauthToken(java.lang.String oauthToken) {
        return (GetDomains) super.setOauthToken(oauthToken);
      }

      @Override
      public GetDomains setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetDomains) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetDomains setQuotaUser(java.lang.String quotaUser) {
        return (GetDomains) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetDomains setUploadType(java.lang.String uploadType) {
        return (GetDomains) super.setUploadType(uploadType);
      }

      @Override
      public GetDomains setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetDomains) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetDomains set(String parameterName, Object value) {
        return (GetDomains) super.set(parameterName, value);
      }
    }
    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "v1.getEntities".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link GetEntities#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetEntities getEntities() throws java.io.IOException {
      GetEntities result = new GetEntities();
      initialize(result);
      return result;
    }

    public class GetEntities extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/entities";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "v1.getEntities".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link GetEntities#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetEntities#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetEntities() {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetEntities set$Xgafv(java.lang.String $Xgafv) {
        return (GetEntities) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetEntities setAccessToken(java.lang.String accessToken) {
        return (GetEntities) super.setAccessToken(accessToken);
      }

      @Override
      public GetEntities setAlt(java.lang.String alt) {
        return (GetEntities) super.setAlt(alt);
      }

      @Override
      public GetEntities setCallback(java.lang.String callback) {
        return (GetEntities) super.setCallback(callback);
      }

      @Override
      public GetEntities setFields(java.lang.String fields) {
        return (GetEntities) super.setFields(fields);
      }

      @Override
      public GetEntities setKey(java.lang.String key) {
        return (GetEntities) super.setKey(key);
      }

      @Override
      public GetEntities setOauthToken(java.lang.String oauthToken) {
        return (GetEntities) super.setOauthToken(oauthToken);
      }

      @Override
      public GetEntities setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetEntities) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetEntities setQuotaUser(java.lang.String quotaUser) {
        return (GetEntities) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetEntities setUploadType(java.lang.String uploadType) {
        return (GetEntities) super.setUploadType(uploadType);
      }

      @Override
      public GetEntities setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetEntities) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetEntities set(String parameterName, Object value) {
        return (GetEntities) super.set(parameterName, value);
      }
    }
    /**
     * Get help information for the RDAP API, including links to documentation.
     *
     * Create a request for the method "v1.getHelp".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link GetHelp#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetHelp getHelp() throws java.io.IOException {
      GetHelp result = new GetHelp();
      initialize(result);
      return result;
    }

    public class GetHelp extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.HttpBody> {

      private static final String REST_PATH = "v1/help";

      /**
       * Get help information for the RDAP API, including links to documentation.
       *
       * Create a request for the method "v1.getHelp".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link GetHelp#execute()} method to invoke the remote operation.
       * <p> {@link
       * GetHelp#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetHelp() {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.HttpBody.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetHelp set$Xgafv(java.lang.String $Xgafv) {
        return (GetHelp) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetHelp setAccessToken(java.lang.String accessToken) {
        return (GetHelp) super.setAccessToken(accessToken);
      }

      @Override
      public GetHelp setAlt(java.lang.String alt) {
        return (GetHelp) super.setAlt(alt);
      }

      @Override
      public GetHelp setCallback(java.lang.String callback) {
        return (GetHelp) super.setCallback(callback);
      }

      @Override
      public GetHelp setFields(java.lang.String fields) {
        return (GetHelp) super.setFields(fields);
      }

      @Override
      public GetHelp setKey(java.lang.String key) {
        return (GetHelp) super.setKey(key);
      }

      @Override
      public GetHelp setOauthToken(java.lang.String oauthToken) {
        return (GetHelp) super.setOauthToken(oauthToken);
      }

      @Override
      public GetHelp setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetHelp) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetHelp setQuotaUser(java.lang.String quotaUser) {
        return (GetHelp) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetHelp setUploadType(java.lang.String uploadType) {
        return (GetHelp) super.setUploadType(uploadType);
      }

      @Override
      public GetHelp setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetHelp) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetHelp set(String parameterName, Object value) {
        return (GetHelp) super.set(parameterName, value);
      }
    }
    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "v1.getIp".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link GetIp#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetIp getIp() throws java.io.IOException {
      GetIp result = new GetIp();
      initialize(result);
      return result;
    }

    public class GetIp extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.HttpBody> {

      private static final String REST_PATH = "v1/ip";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "v1.getIp".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link GetIp#execute()} method to invoke the remote operation.
       * <p> {@link
       * GetIp#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetIp() {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.HttpBody.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetIp set$Xgafv(java.lang.String $Xgafv) {
        return (GetIp) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetIp setAccessToken(java.lang.String accessToken) {
        return (GetIp) super.setAccessToken(accessToken);
      }

      @Override
      public GetIp setAlt(java.lang.String alt) {
        return (GetIp) super.setAlt(alt);
      }

      @Override
      public GetIp setCallback(java.lang.String callback) {
        return (GetIp) super.setCallback(callback);
      }

      @Override
      public GetIp setFields(java.lang.String fields) {
        return (GetIp) super.setFields(fields);
      }

      @Override
      public GetIp setKey(java.lang.String key) {
        return (GetIp) super.setKey(key);
      }

      @Override
      public GetIp setOauthToken(java.lang.String oauthToken) {
        return (GetIp) super.setOauthToken(oauthToken);
      }

      @Override
      public GetIp setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetIp) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetIp setQuotaUser(java.lang.String quotaUser) {
        return (GetIp) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetIp setUploadType(java.lang.String uploadType) {
        return (GetIp) super.setUploadType(uploadType);
      }

      @Override
      public GetIp setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetIp) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetIp set(String parameterName, Object value) {
        return (GetIp) super.set(parameterName, value);
      }
    }
    /**
     * The RDAP API recognizes this command from the RDAP specification but does not support it. The
     * response is a formatted 501 error.
     *
     * Create a request for the method "v1.getNameservers".
     *
     * This request holds the parameters needed by the domainsrdap server.  After setting any optional
     * parameters, call the {@link GetNameservers#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetNameservers getNameservers() throws java.io.IOException {
      GetNameservers result = new GetNameservers();
      initialize(result);
      return result;
    }

    public class GetNameservers extends DomainsRDAPRequest<com.google.api.services.domainsrdap.v1.model.RdapResponse> {

      private static final String REST_PATH = "v1/nameservers";

      /**
       * The RDAP API recognizes this command from the RDAP specification but does not support it. The
       * response is a formatted 501 error.
       *
       * Create a request for the method "v1.getNameservers".
       *
       * This request holds the parameters needed by the the domainsrdap server.  After setting any
       * optional parameters, call the {@link GetNameservers#execute()} method to invoke the remote
       * operation. <p> {@link GetNameservers#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected GetNameservers() {
        super(DomainsRDAP.this, "GET", REST_PATH, null, com.google.api.services.domainsrdap.v1.model.RdapResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetNameservers set$Xgafv(java.lang.String $Xgafv) {
        return (GetNameservers) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetNameservers setAccessToken(java.lang.String accessToken) {
        return (GetNameservers) super.setAccessToken(accessToken);
      }

      @Override
      public GetNameservers setAlt(java.lang.String alt) {
        return (GetNameservers) super.setAlt(alt);
      }

      @Override
      public GetNameservers setCallback(java.lang.String callback) {
        return (GetNameservers) super.setCallback(callback);
      }

      @Override
      public GetNameservers setFields(java.lang.String fields) {
        return (GetNameservers) super.setFields(fields);
      }

      @Override
      public GetNameservers setKey(java.lang.String key) {
        return (GetNameservers) super.setKey(key);
      }

      @Override
      public GetNameservers setOauthToken(java.lang.String oauthToken) {
        return (GetNameservers) super.setOauthToken(oauthToken);
      }

      @Override
      public GetNameservers setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetNameservers) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetNameservers setQuotaUser(java.lang.String quotaUser) {
        return (GetNameservers) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetNameservers setUploadType(java.lang.String uploadType) {
        return (GetNameservers) super.setUploadType(uploadType);
      }

      @Override
      public GetNameservers setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetNameservers) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public GetNameservers set(String parameterName, Object value) {
        return (GetNameservers) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link DomainsRDAP}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link DomainsRDAP}. */
    @Override
    public DomainsRDAP build() {
      return new DomainsRDAP(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DomainsRDAPRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDomainsRDAPRequestInitializer(
        DomainsRDAPRequestInitializer domainsrdapRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(domainsrdapRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
