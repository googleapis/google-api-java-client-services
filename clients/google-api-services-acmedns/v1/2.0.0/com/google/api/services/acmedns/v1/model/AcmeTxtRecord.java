/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.acmedns.v1.model;

/**
 * The TXT record message that represents an ACME DNS-01 challenge.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the ACME DNS API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AcmeTxtRecord extends com.google.api.client.json.GenericJson {

  /**
   * Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT
   * record data entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digest;

  /**
   * The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a
   * response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fqdn;

  /**
   * Output only. The time when this record was last updated. This will be in UTC time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT
   * record data entry.
   * @return value or {@code null} for none
   */
  public java.lang.String getDigest() {
    return digest;
  }

  /**
   * Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT
   * record data entry.
   * @param digest digest or {@code null} for none
   */
  public AcmeTxtRecord setDigest(java.lang.String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a
   * response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.
   * @return value or {@code null} for none
   */
  public java.lang.String getFqdn() {
    return fqdn;
  }

  /**
   * The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a
   * response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.
   * @param fqdn fqdn or {@code null} for none
   */
  public AcmeTxtRecord setFqdn(java.lang.String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Output only. The time when this record was last updated. This will be in UTC time.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time when this record was last updated. This will be in UTC time.
   * @param updateTime updateTime or {@code null} for none
   */
  public AcmeTxtRecord setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public AcmeTxtRecord set(String fieldName, Object value) {
    return (AcmeTxtRecord) super.set(fieldName, value);
  }

  @Override
  public AcmeTxtRecord clone() {
    return (AcmeTxtRecord) super.clone();
  }

}
