/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Signals to be used by the Prefulfillment Ranker. Derived from the ParsingSignals and
 * GroundingSignals carried by the FunctionCall. LINT.IfChange Next ID: 25
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantPrefulfillmentRankerPrefulfillmentSignals extends com.google.api.client.json.GenericJson {

  /**
   * A parsing score that is independently calibrated by each parser/IG.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double calibratedParsingScore;

  /**
   * Same semantics as 'calibrated_parsing_score' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float calibratedParsingScoreFloat;

  /**
   * Indicates interpretation dominance predicted by KScorer
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dominant;

  /**
   * The total effective length of the spans for the arguments used to construct the parse. May
   * include vertical specific adjustments. Eg: For the query [delete my 7 p.m. alarm called
   * chicken] and intent Delete_alarm(alarm_object=RD(category=AlarmObject( label="chicken",
   * trigger_time_datetime=<< 7 PM >>))), the effective argument span is "7 p.m." + "chicken" (total
   * length of 13).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float effectiveArgSpanLength;

  /**
   * Grounding Signals. Score indicating how grounded the intent is, populated by the Grounding Box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double groundabilityScore;

  /**
   * This is a cross-intent feature which is calculated by iterating all intent candidates. This
   * feature should be populated in post-IG stage (before GB).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float inQueryMaxEffectiveArgSpanLength;

  /**
   * intent_name is used by PFR ensemble model. See go/pfr_ha_launch_doc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String intentName;

  /**
   * QUS intent-based ranking signals. Assistant User Interaction Score which is aggregated using
   * intent name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double intentNameAuisScore;

  /**
   * Assistant User Interaction Score which is aggregated using intent name from exp laelaps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double intentNameAuisScoreExp;

  /**
   * This feature is always false / no-op in serving time. In training time, this feature may be set
   * true on specific examples for weighted training where when this signal is true, only cross-
   * intent level features are used for training and other candidate level features are masked (set
   * as missing).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean maskCandidateLevelFeatures;

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numConstraints;

  /**
   * Same semantics as 'num_constraints' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numConstraintsFloat;

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints]. Populated
   * by the Grounding Box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numConstraintsSatisfied;

  /**
   * Same semantics as 'num_constraints_satisfied' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numConstraintsSatisfiedFloat;

  /**
   * Number of groundable arguments the intent has, populated by the Grounding Box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numGroundableArgs;

  /**
   * Same semantics as 'num_groundable_args' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numGroundableArgsFloat;

  /**
   * Number of grounded arguments the intent has, populated by the Grounding Box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numGroundedArgs;

  /**
   * Same semantics as 'num_grounded_args' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numGroundedArgsFloat;

  /**
   * Signals as proposed in go/improved-grounding-signals. Number of arguments, possibly nested,
   * that the Grounding Box tried to ground.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numVariables;

  /**
   * Same semantics as 'num_variables' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numVariablesFloat;

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numVariablesGrounded;

  /**
   * Same semantics as 'num_variables_grounded' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numVariablesGroundedFloat;

  /**
   * Cosine similarity between predicted query-to-term model and assistant intent-type-based salient
   * terms. This is intended to be only used for ACE ranking and only populated for assistant
   * traffic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pq2tVsAssistantIbstCosine;

  /**
   * Cosine similarity between predicted query-to-term model and intent-type-based salient terms.
   * This is intended to be used as a backoff to pq2t_vs_qibst_cosine if it is missing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pq2tVsIbstCosine;

  /**
   * A parsing score that is independently calibrated by each parser/IG.
   * @return value or {@code null} for none
   */
  public java.lang.Double getCalibratedParsingScore() {
    return calibratedParsingScore;
  }

  /**
   * A parsing score that is independently calibrated by each parser/IG.
   * @param calibratedParsingScore calibratedParsingScore or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setCalibratedParsingScore(java.lang.Double calibratedParsingScore) {
    this.calibratedParsingScore = calibratedParsingScore;
    return this;
  }

  /**
   * Same semantics as 'calibrated_parsing_score' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCalibratedParsingScoreFloat() {
    return calibratedParsingScoreFloat;
  }

  /**
   * Same semantics as 'calibrated_parsing_score' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * @param calibratedParsingScoreFloat calibratedParsingScoreFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setCalibratedParsingScoreFloat(java.lang.Float calibratedParsingScoreFloat) {
    this.calibratedParsingScoreFloat = calibratedParsingScoreFloat;
    return this;
  }

  /**
   * Indicates interpretation dominance predicted by KScorer
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDominant() {
    return dominant;
  }

  /**
   * Indicates interpretation dominance predicted by KScorer
   * @param dominant dominant or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setDominant(java.lang.Boolean dominant) {
    this.dominant = dominant;
    return this;
  }

  /**
   * The total effective length of the spans for the arguments used to construct the parse. May
   * include vertical specific adjustments. Eg: For the query [delete my 7 p.m. alarm called
   * chicken] and intent Delete_alarm(alarm_object=RD(category=AlarmObject( label="chicken",
   * trigger_time_datetime=<< 7 PM >>))), the effective argument span is "7 p.m." + "chicken" (total
   * length of 13).
   * @return value or {@code null} for none
   */
  public java.lang.Float getEffectiveArgSpanLength() {
    return effectiveArgSpanLength;
  }

  /**
   * The total effective length of the spans for the arguments used to construct the parse. May
   * include vertical specific adjustments. Eg: For the query [delete my 7 p.m. alarm called
   * chicken] and intent Delete_alarm(alarm_object=RD(category=AlarmObject( label="chicken",
   * trigger_time_datetime=<< 7 PM >>))), the effective argument span is "7 p.m." + "chicken" (total
   * length of 13).
   * @param effectiveArgSpanLength effectiveArgSpanLength or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setEffectiveArgSpanLength(java.lang.Float effectiveArgSpanLength) {
    this.effectiveArgSpanLength = effectiveArgSpanLength;
    return this;
  }

  /**
   * Grounding Signals. Score indicating how grounded the intent is, populated by the Grounding Box.
   * @return value or {@code null} for none
   */
  public java.lang.Double getGroundabilityScore() {
    return groundabilityScore;
  }

  /**
   * Grounding Signals. Score indicating how grounded the intent is, populated by the Grounding Box.
   * @param groundabilityScore groundabilityScore or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setGroundabilityScore(java.lang.Double groundabilityScore) {
    this.groundabilityScore = groundabilityScore;
    return this;
  }

  /**
   * This is a cross-intent feature which is calculated by iterating all intent candidates. This
   * feature should be populated in post-IG stage (before GB).
   * @return value or {@code null} for none
   */
  public java.lang.Float getInQueryMaxEffectiveArgSpanLength() {
    return inQueryMaxEffectiveArgSpanLength;
  }

  /**
   * This is a cross-intent feature which is calculated by iterating all intent candidates. This
   * feature should be populated in post-IG stage (before GB).
   * @param inQueryMaxEffectiveArgSpanLength inQueryMaxEffectiveArgSpanLength or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setInQueryMaxEffectiveArgSpanLength(java.lang.Float inQueryMaxEffectiveArgSpanLength) {
    this.inQueryMaxEffectiveArgSpanLength = inQueryMaxEffectiveArgSpanLength;
    return this;
  }

  /**
   * intent_name is used by PFR ensemble model. See go/pfr_ha_launch_doc
   * @return value or {@code null} for none
   */
  public java.lang.String getIntentName() {
    return intentName;
  }

  /**
   * intent_name is used by PFR ensemble model. See go/pfr_ha_launch_doc
   * @param intentName intentName or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setIntentName(java.lang.String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * QUS intent-based ranking signals. Assistant User Interaction Score which is aggregated using
   * intent name.
   * @return value or {@code null} for none
   */
  public java.lang.Double getIntentNameAuisScore() {
    return intentNameAuisScore;
  }

  /**
   * QUS intent-based ranking signals. Assistant User Interaction Score which is aggregated using
   * intent name.
   * @param intentNameAuisScore intentNameAuisScore or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setIntentNameAuisScore(java.lang.Double intentNameAuisScore) {
    this.intentNameAuisScore = intentNameAuisScore;
    return this;
  }

  /**
   * Assistant User Interaction Score which is aggregated using intent name from exp laelaps.
   * @return value or {@code null} for none
   */
  public java.lang.Double getIntentNameAuisScoreExp() {
    return intentNameAuisScoreExp;
  }

  /**
   * Assistant User Interaction Score which is aggregated using intent name from exp laelaps.
   * @param intentNameAuisScoreExp intentNameAuisScoreExp or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setIntentNameAuisScoreExp(java.lang.Double intentNameAuisScoreExp) {
    this.intentNameAuisScoreExp = intentNameAuisScoreExp;
    return this;
  }

  /**
   * This feature is always false / no-op in serving time. In training time, this feature may be set
   * true on specific examples for weighted training where when this signal is true, only cross-
   * intent level features are used for training and other candidate level features are masked (set
   * as missing).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMaskCandidateLevelFeatures() {
    return maskCandidateLevelFeatures;
  }

  /**
   * This feature is always false / no-op in serving time. In training time, this feature may be set
   * true on specific examples for weighted training where when this signal is true, only cross-
   * intent level features are used for training and other candidate level features are masked (set
   * as missing).
   * @param maskCandidateLevelFeatures maskCandidateLevelFeatures or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setMaskCandidateLevelFeatures(java.lang.Boolean maskCandidateLevelFeatures) {
    this.maskCandidateLevelFeatures = maskCandidateLevelFeatures;
    return this;
  }

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumConstraints() {
    return numConstraints;
  }

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * @param numConstraints numConstraints or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumConstraints(java.lang.Double numConstraints) {
    this.numConstraints = numConstraints;
    return this;
  }

  /**
   * Same semantics as 'num_constraints' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumConstraintsFloat() {
    return numConstraintsFloat;
  }

  /**
   * Same semantics as 'num_constraints' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @param numConstraintsFloat numConstraintsFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumConstraintsFloat(java.lang.Float numConstraintsFloat) {
    this.numConstraintsFloat = numConstraintsFloat;
    return this;
  }

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints]. Populated
   * by the Grounding Box.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumConstraintsSatisfied() {
    return numConstraintsSatisfied;
  }

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints]. Populated
   * by the Grounding Box.
   * @param numConstraintsSatisfied numConstraintsSatisfied or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumConstraintsSatisfied(java.lang.Double numConstraintsSatisfied) {
    this.numConstraintsSatisfied = numConstraintsSatisfied;
    return this;
  }

  /**
   * Same semantics as 'num_constraints_satisfied' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumConstraintsSatisfiedFloat() {
    return numConstraintsSatisfiedFloat;
  }

  /**
   * Same semantics as 'num_constraints_satisfied' but in float form. Some RL models (such as
   * decision tree) doesn't consume double input well.
   * @param numConstraintsSatisfiedFloat numConstraintsSatisfiedFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumConstraintsSatisfiedFloat(java.lang.Float numConstraintsSatisfiedFloat) {
    this.numConstraintsSatisfiedFloat = numConstraintsSatisfiedFloat;
    return this;
  }

  /**
   * Number of groundable arguments the intent has, populated by the Grounding Box.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumGroundableArgs() {
    return numGroundableArgs;
  }

  /**
   * Number of groundable arguments the intent has, populated by the Grounding Box.
   * @param numGroundableArgs numGroundableArgs or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumGroundableArgs(java.lang.Double numGroundableArgs) {
    this.numGroundableArgs = numGroundableArgs;
    return this;
  }

  /**
   * Same semantics as 'num_groundable_args' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumGroundableArgsFloat() {
    return numGroundableArgsFloat;
  }

  /**
   * Same semantics as 'num_groundable_args' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * @param numGroundableArgsFloat numGroundableArgsFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumGroundableArgsFloat(java.lang.Float numGroundableArgsFloat) {
    this.numGroundableArgsFloat = numGroundableArgsFloat;
    return this;
  }

  /**
   * Number of grounded arguments the intent has, populated by the Grounding Box.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumGroundedArgs() {
    return numGroundedArgs;
  }

  /**
   * Number of grounded arguments the intent has, populated by the Grounding Box.
   * @param numGroundedArgs numGroundedArgs or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumGroundedArgs(java.lang.Double numGroundedArgs) {
    this.numGroundedArgs = numGroundedArgs;
    return this;
  }

  /**
   * Same semantics as 'num_grounded_args' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumGroundedArgsFloat() {
    return numGroundedArgsFloat;
  }

  /**
   * Same semantics as 'num_grounded_args' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @param numGroundedArgsFloat numGroundedArgsFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumGroundedArgsFloat(java.lang.Float numGroundedArgsFloat) {
    this.numGroundedArgsFloat = numGroundedArgsFloat;
    return this;
  }

  /**
   * Signals as proposed in go/improved-grounding-signals. Number of arguments, possibly nested,
   * that the Grounding Box tried to ground.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumVariables() {
    return numVariables;
  }

  /**
   * Signals as proposed in go/improved-grounding-signals. Number of arguments, possibly nested,
   * that the Grounding Box tried to ground.
   * @param numVariables numVariables or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumVariables(java.lang.Double numVariables) {
    this.numVariables = numVariables;
    return this;
  }

  /**
   * Same semantics as 'num_variables' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumVariablesFloat() {
    return numVariablesFloat;
  }

  /**
   * Same semantics as 'num_variables' but in float form. Some RL models (such as decision tree)
   * doesn't consume double input well.
   * @param numVariablesFloat numVariablesFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumVariablesFloat(java.lang.Float numVariablesFloat) {
    this.numVariablesFloat = numVariablesFloat;
    return this;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumVariablesGrounded() {
    return numVariablesGrounded;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * @param numVariablesGrounded numVariablesGrounded or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumVariablesGrounded(java.lang.Double numVariablesGrounded) {
    this.numVariablesGrounded = numVariablesGrounded;
    return this;
  }

  /**
   * Same semantics as 'num_variables_grounded' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumVariablesGroundedFloat() {
    return numVariablesGroundedFloat;
  }

  /**
   * Same semantics as 'num_variables_grounded' but in float form. Some RL models (such as decision
   * tree) doesn't consume double input well.
   * @param numVariablesGroundedFloat numVariablesGroundedFloat or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setNumVariablesGroundedFloat(java.lang.Float numVariablesGroundedFloat) {
    this.numVariablesGroundedFloat = numVariablesGroundedFloat;
    return this;
  }

  /**
   * Cosine similarity between predicted query-to-term model and assistant intent-type-based salient
   * terms. This is intended to be only used for ACE ranking and only populated for assistant
   * traffic.
   * @return value or {@code null} for none
   */
  public java.lang.Double getPq2tVsAssistantIbstCosine() {
    return pq2tVsAssistantIbstCosine;
  }

  /**
   * Cosine similarity between predicted query-to-term model and assistant intent-type-based salient
   * terms. This is intended to be only used for ACE ranking and only populated for assistant
   * traffic.
   * @param pq2tVsAssistantIbstCosine pq2tVsAssistantIbstCosine or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setPq2tVsAssistantIbstCosine(java.lang.Double pq2tVsAssistantIbstCosine) {
    this.pq2tVsAssistantIbstCosine = pq2tVsAssistantIbstCosine;
    return this;
  }

  /**
   * Cosine similarity between predicted query-to-term model and intent-type-based salient terms.
   * This is intended to be used as a backoff to pq2t_vs_qibst_cosine if it is missing.
   * @return value or {@code null} for none
   */
  public java.lang.Double getPq2tVsIbstCosine() {
    return pq2tVsIbstCosine;
  }

  /**
   * Cosine similarity between predicted query-to-term model and intent-type-based salient terms.
   * This is intended to be used as a backoff to pq2t_vs_qibst_cosine if it is missing.
   * @param pq2tVsIbstCosine pq2tVsIbstCosine or {@code null} for none
   */
  public AssistantPrefulfillmentRankerPrefulfillmentSignals setPq2tVsIbstCosine(java.lang.Double pq2tVsIbstCosine) {
    this.pq2tVsIbstCosine = pq2tVsIbstCosine;
    return this;
  }

  @Override
  public AssistantPrefulfillmentRankerPrefulfillmentSignals set(String fieldName, Object value) {
    return (AssistantPrefulfillmentRankerPrefulfillmentSignals) super.set(fieldName, value);
  }

  @Override
  public AssistantPrefulfillmentRankerPrefulfillmentSignals clone() {
    return (AssistantPrefulfillmentRankerPrefulfillmentSignals) super.clone();
  }

}
