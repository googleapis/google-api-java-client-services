/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v1.model;

/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified.
 * So if both labels and zones are specified, the patch job targets only VMs with those labels and
 * in those zones.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PatchInstanceFilter extends com.google.api.client.json.GenericJson {

  /**
   * Target all VM instances in the project. If true, no other criteria is permitted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean all;

  /**
   * Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate
   * groups of VM instances.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PatchInstanceFilterGroupLabel> groupLabels;

  /**
   * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another
   * way to group VMs when targeting configs, for example prefix="prod-".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> instanceNamePrefixes;

  /**
   * Targets any of the VM instances specified. Instances are specified by their URI in the form
   * `zones/[ZONE]/instances/[INSTANCE_NAME]`,
   * `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/
   * compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> instances;

  /**
   * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> zones;

  /**
   * Target all VM instances in the project. If true, no other criteria is permitted.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAll() {
    return all;
  }

  /**
   * Target all VM instances in the project. If true, no other criteria is permitted.
   * @param all all or {@code null} for none
   */
  public PatchInstanceFilter setAll(java.lang.Boolean all) {
    this.all = all;
    return this;
  }

  /**
   * Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate
   * groups of VM instances.
   * @return value or {@code null} for none
   */
  public java.util.List<PatchInstanceFilterGroupLabel> getGroupLabels() {
    return groupLabels;
  }

  /**
   * Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate
   * groups of VM instances.
   * @param groupLabels groupLabels or {@code null} for none
   */
  public PatchInstanceFilter setGroupLabels(java.util.List<PatchInstanceFilterGroupLabel> groupLabels) {
    this.groupLabels = groupLabels;
    return this;
  }

  /**
   * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another
   * way to group VMs when targeting configs, for example prefix="prod-".
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getInstanceNamePrefixes() {
    return instanceNamePrefixes;
  }

  /**
   * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another
   * way to group VMs when targeting configs, for example prefix="prod-".
   * @param instanceNamePrefixes instanceNamePrefixes or {@code null} for none
   */
  public PatchInstanceFilter setInstanceNamePrefixes(java.util.List<java.lang.String> instanceNamePrefixes) {
    this.instanceNamePrefixes = instanceNamePrefixes;
    return this;
  }

  /**
   * Targets any of the VM instances specified. Instances are specified by their URI in the form
   * `zones/[ZONE]/instances/[INSTANCE_NAME]`,
   * `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/
   * compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getInstances() {
    return instances;
  }

  /**
   * Targets any of the VM instances specified. Instances are specified by their URI in the form
   * `zones/[ZONE]/instances/[INSTANCE_NAME]`,
   * `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/
   * compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
   * @param instances instances or {@code null} for none
   */
  public PatchInstanceFilter setInstances(java.util.List<java.lang.String> instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getZones() {
    return zones;
  }

  /**
   * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
   * @param zones zones or {@code null} for none
   */
  public PatchInstanceFilter setZones(java.util.List<java.lang.String> zones) {
    this.zones = zones;
    return this;
  }

  @Override
  public PatchInstanceFilter set(String fieldName, Object value) {
    return (PatchInstanceFilter) super.set(fieldName, value);
  }

  @Override
  public PatchInstanceFilter clone() {
    return (PatchInstanceFilter) super.clone();
  }

}
