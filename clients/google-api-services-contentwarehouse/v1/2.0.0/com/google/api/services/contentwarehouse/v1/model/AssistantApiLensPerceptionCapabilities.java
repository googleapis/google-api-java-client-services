/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Capabilities related to Lens Perception, i.e. image understanding. See go/loa-lens-device-
 * capabilities. Next ID: 6
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiLensPerceptionCapabilities extends com.google.api.client.json.GenericJson {

  /**
   * Whether the device supports Lens Perception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasLensPerception;

  /**
   * Indicates whether Lens supports Lens Direct Intent (go/lensdirectintent).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLensDirectIntentAvailable;

  /**
   * Indicates whether Lens supports Live view-finder experience.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLensLiveViewfinderAvailable;

  /**
   * Indicates whether Lens supports Post-capture experience with an image payload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLensPostCaptureAvailable;

  /**
   * Contains the capabilities that Lens can support.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiLensPerceptionCapabilitiesLensCapabilities lensCapabilities;

  /**
   * Whether the device supports Lens Perception.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasLensPerception() {
    return hasLensPerception;
  }

  /**
   * Whether the device supports Lens Perception.
   * @param hasLensPerception hasLensPerception or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities setHasLensPerception(java.lang.Boolean hasLensPerception) {
    this.hasLensPerception = hasLensPerception;
    return this;
  }

  /**
   * Indicates whether Lens supports Lens Direct Intent (go/lensdirectintent).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLensDirectIntentAvailable() {
    return isLensDirectIntentAvailable;
  }

  /**
   * Indicates whether Lens supports Lens Direct Intent (go/lensdirectintent).
   * @param isLensDirectIntentAvailable isLensDirectIntentAvailable or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities setIsLensDirectIntentAvailable(java.lang.Boolean isLensDirectIntentAvailable) {
    this.isLensDirectIntentAvailable = isLensDirectIntentAvailable;
    return this;
  }

  /**
   * Indicates whether Lens supports Live view-finder experience.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLensLiveViewfinderAvailable() {
    return isLensLiveViewfinderAvailable;
  }

  /**
   * Indicates whether Lens supports Live view-finder experience.
   * @param isLensLiveViewfinderAvailable isLensLiveViewfinderAvailable or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities setIsLensLiveViewfinderAvailable(java.lang.Boolean isLensLiveViewfinderAvailable) {
    this.isLensLiveViewfinderAvailable = isLensLiveViewfinderAvailable;
    return this;
  }

  /**
   * Indicates whether Lens supports Post-capture experience with an image payload.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLensPostCaptureAvailable() {
    return isLensPostCaptureAvailable;
  }

  /**
   * Indicates whether Lens supports Post-capture experience with an image payload.
   * @param isLensPostCaptureAvailable isLensPostCaptureAvailable or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities setIsLensPostCaptureAvailable(java.lang.Boolean isLensPostCaptureAvailable) {
    this.isLensPostCaptureAvailable = isLensPostCaptureAvailable;
    return this;
  }

  /**
   * Contains the capabilities that Lens can support.
   * @return value or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilitiesLensCapabilities getLensCapabilities() {
    return lensCapabilities;
  }

  /**
   * Contains the capabilities that Lens can support.
   * @param lensCapabilities lensCapabilities or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities setLensCapabilities(AssistantApiLensPerceptionCapabilitiesLensCapabilities lensCapabilities) {
    this.lensCapabilities = lensCapabilities;
    return this;
  }

  @Override
  public AssistantApiLensPerceptionCapabilities set(String fieldName, Object value) {
    return (AssistantApiLensPerceptionCapabilities) super.set(fieldName, value);
  }

  @Override
  public AssistantApiLensPerceptionCapabilities clone() {
    return (AssistantApiLensPerceptionCapabilities) super.clone();
  }

}
