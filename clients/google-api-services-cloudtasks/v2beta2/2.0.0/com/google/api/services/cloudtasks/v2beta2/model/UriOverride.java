/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudtasks.v2beta2.model;

/**
 * Uri Override. When specified, all the HTTP tasks inside the queue will be partially or fully
 * overridden depending on the configured values.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tasks API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UriOverride extends com.google.api.client.json.GenericJson {

  /**
   * Host override. When specified, the host part of url will be overridden. For example, if the
   * original Uri is "https://www.google.com", and host is set to "example.net", the overridden Uri
   * will be "https://example.net".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String host;

  /**
   * Uri path. Will be used as the path for the current Uri (replaces any existing path of the task
   * url).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * Port override. When specified, the port part of Uri will be replaced by the provided value. For
   * instance, for a Uri http://www.google.com/foo and port=123 the overridden Uri becomes
   * http://www.google.com:123/foo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long port;

  /**
   * Uri Query. Will replace the query part of the task uri.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String query;

  /**
   * Scheme override. When specified, the Uri scheme is replaced by the provided value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scheme;

  /**
   * Host override. When specified, the host part of url will be overridden. For example, if the
   * original Uri is "https://www.google.com", and host is set to "example.net", the overridden Uri
   * will be "https://example.net".
   * @return value or {@code null} for none
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * Host override. When specified, the host part of url will be overridden. For example, if the
   * original Uri is "https://www.google.com", and host is set to "example.net", the overridden Uri
   * will be "https://example.net".
   * @param host host or {@code null} for none
   */
  public UriOverride setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  /**
   * Uri path. Will be used as the path for the current Uri (replaces any existing path of the task
   * url).
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * Uri path. Will be used as the path for the current Uri (replaces any existing path of the task
   * url).
   * @param path path or {@code null} for none
   */
  public UriOverride setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  /**
   * Port override. When specified, the port part of Uri will be replaced by the provided value. For
   * instance, for a Uri http://www.google.com/foo and port=123 the overridden Uri becomes
   * http://www.google.com:123/foo.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPort() {
    return port;
  }

  /**
   * Port override. When specified, the port part of Uri will be replaced by the provided value. For
   * instance, for a Uri http://www.google.com/foo and port=123 the overridden Uri becomes
   * http://www.google.com:123/foo.
   * @param port port or {@code null} for none
   */
  public UriOverride setPort(java.lang.Long port) {
    this.port = port;
    return this;
  }

  /**
   * Uri Query. Will replace the query part of the task uri.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Uri Query. Will replace the query part of the task uri.
   * @param query query or {@code null} for none
   */
  public UriOverride setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  /**
   * Scheme override. When specified, the Uri scheme is replaced by the provided value.
   * @return value or {@code null} for none
   */
  public java.lang.String getScheme() {
    return scheme;
  }

  /**
   * Scheme override. When specified, the Uri scheme is replaced by the provided value.
   * @param scheme scheme or {@code null} for none
   */
  public UriOverride setScheme(java.lang.String scheme) {
    this.scheme = scheme;
    return this;
  }

  @Override
  public UriOverride set(String fieldName, Object value) {
    return (UriOverride) super.set(fieldName, value);
  }

  @Override
  public UriOverride clone() {
    return (UriOverride) super.clone();
  }

}
