/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for HtmlrenderWebkitHeadlessProtoRenderTreeNode.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoRenderTreeNode extends com.google.api.client.json.GenericJson {

  /**
   * Box is set for render blocks ( , , etc). Box for any RenderTreeNode can be found either in the
   * RenderTreeNode itself or by traversing up the ancestors until a RenderTreeNode with a Box is
   * found.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoBox box;

  /**
   * child_render_tree_node_index is an index into the list of RenderTreeNodes stored in the
   * Document. *** WARNING ***: Don't use this field. Applications should not rely on the structure
   * of the render tree. This is an internal browser implementation detail and it changes from time
   * to time. Generally, applications should obtain rendering information by starting with the
   * relevant DOMTreeNode and following pointers from there to the relevant RenderTreeNodes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> childRenderTreeNodeIndex;

  /**
   * Index of the DOMTreeNode for which this RenderTreeNode is applicable. This index can be used to
   * lookup a DOMTreeNode from list of DOMTreeNodes stored in the Document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer domTreeNodeIndex;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBox> inlineTextBox;

  /**
   * The actual text that was rendered. This is applicable only for text nodes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String renderedText;

  /**
   * Style index is set for rendered nodes (text nodes, image nodes, widgets, etc). The style_index
   * can be used to lookup the style from the list of styles stored in the Document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer styleIndex;

  /**
   * Box is set for render blocks ( , , etc). Box for any RenderTreeNode can be found either in the
   * RenderTreeNode itself or by traversing up the ancestors until a RenderTreeNode with a Box is
   * found.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoBox getBox() {
    return box;
  }

  /**
   * Box is set for render blocks ( , , etc). Box for any RenderTreeNode can be found either in the
   * RenderTreeNode itself or by traversing up the ancestors until a RenderTreeNode with a Box is
   * found.
   * @param box box or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setBox(HtmlrenderWebkitHeadlessProtoBox box) {
    this.box = box;
    return this;
  }

  /**
   * child_render_tree_node_index is an index into the list of RenderTreeNodes stored in the
   * Document. *** WARNING ***: Don't use this field. Applications should not rely on the structure
   * of the render tree. This is an internal browser implementation detail and it changes from time
   * to time. Generally, applications should obtain rendering information by starting with the
   * relevant DOMTreeNode and following pointers from there to the relevant RenderTreeNodes.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getChildRenderTreeNodeIndex() {
    return childRenderTreeNodeIndex;
  }

  /**
   * child_render_tree_node_index is an index into the list of RenderTreeNodes stored in the
   * Document. *** WARNING ***: Don't use this field. Applications should not rely on the structure
   * of the render tree. This is an internal browser implementation detail and it changes from time
   * to time. Generally, applications should obtain rendering information by starting with the
   * relevant DOMTreeNode and following pointers from there to the relevant RenderTreeNodes.
   * @param childRenderTreeNodeIndex childRenderTreeNodeIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setChildRenderTreeNodeIndex(java.util.List<java.lang.Integer> childRenderTreeNodeIndex) {
    this.childRenderTreeNodeIndex = childRenderTreeNodeIndex;
    return this;
  }

  /**
   * Index of the DOMTreeNode for which this RenderTreeNode is applicable. This index can be used to
   * lookup a DOMTreeNode from list of DOMTreeNodes stored in the Document.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDomTreeNodeIndex() {
    return domTreeNodeIndex;
  }

  /**
   * Index of the DOMTreeNode for which this RenderTreeNode is applicable. This index can be used to
   * lookup a DOMTreeNode from list of DOMTreeNodes stored in the Document.
   * @param domTreeNodeIndex domTreeNodeIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setDomTreeNodeIndex(java.lang.Integer domTreeNodeIndex) {
    this.domTreeNodeIndex = domTreeNodeIndex;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBox> getInlineTextBox() {
    return inlineTextBox;
  }

  /**
   * @param inlineTextBox inlineTextBox or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setInlineTextBox(java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBox> inlineTextBox) {
    this.inlineTextBox = inlineTextBox;
    return this;
  }

  /**
   * The actual text that was rendered. This is applicable only for text nodes.
   * @return value or {@code null} for none
   */
  public java.lang.String getRenderedText() {
    return renderedText;
  }

  /**
   * The actual text that was rendered. This is applicable only for text nodes.
   * @param renderedText renderedText or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setRenderedText(java.lang.String renderedText) {
    this.renderedText = renderedText;
    return this;
  }

  /**
   * Style index is set for rendered nodes (text nodes, image nodes, widgets, etc). The style_index
   * can be used to lookup the style from the list of styles stored in the Document.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStyleIndex() {
    return styleIndex;
  }

  /**
   * Style index is set for rendered nodes (text nodes, image nodes, widgets, etc). The style_index
   * can be used to lookup the style from the list of styles stored in the Document.
   * @param styleIndex styleIndex or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode setStyleIndex(java.lang.Integer styleIndex) {
    this.styleIndex = styleIndex;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoRenderTreeNode) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRenderTreeNode clone() {
    return (HtmlrenderWebkitHeadlessProtoRenderTreeNode) super.clone();
  }

}
