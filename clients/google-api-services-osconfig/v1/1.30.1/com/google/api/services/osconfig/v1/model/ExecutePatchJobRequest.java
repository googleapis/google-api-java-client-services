/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v1.model;

/**
 * A request message to initiate patching across Compute Engine instances.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExecutePatchJobRequest extends com.google.api.client.json.GenericJson {

  /**
   * Description of the patch job. Length of the description is limited to 1024 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Display name for this patch job. This does not have to be unique.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * If this patch is a dry-run only, instances are contacted but will do nothing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dryRun;

  /**
   * Duration of the patch job. After the duration ends, the patch job times out.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String duration;

  /**
   * Required. Instances to patch, either explicitly or filtered by some criteria such as zone or
   * labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PatchInstanceFilter instanceFilter;

  /**
   * Patch configuration being applied. If omitted, instances are patched using the default
   * configurations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PatchConfig patchConfig;

  /**
   * Rollout strategy of the patch job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PatchRollout rollout;

  /**
   * Description of the patch job. Length of the description is limited to 1024 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the patch job. Length of the description is limited to 1024 characters.
   * @param description description or {@code null} for none
   */
  public ExecutePatchJobRequest setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Display name for this patch job. This does not have to be unique.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Display name for this patch job. This does not have to be unique.
   * @param displayName displayName or {@code null} for none
   */
  public ExecutePatchJobRequest setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * If this patch is a dry-run only, instances are contacted but will do nothing.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDryRun() {
    return dryRun;
  }

  /**
   * If this patch is a dry-run only, instances are contacted but will do nothing.
   * @param dryRun dryRun or {@code null} for none
   */
  public ExecutePatchJobRequest setDryRun(java.lang.Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Duration of the patch job. After the duration ends, the patch job times out.
   * @return value or {@code null} for none
   */
  public String getDuration() {
    return duration;
  }

  /**
   * Duration of the patch job. After the duration ends, the patch job times out.
   * @param duration duration or {@code null} for none
   */
  public ExecutePatchJobRequest setDuration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Required. Instances to patch, either explicitly or filtered by some criteria such as zone or
   * labels.
   * @return value or {@code null} for none
   */
  public PatchInstanceFilter getInstanceFilter() {
    return instanceFilter;
  }

  /**
   * Required. Instances to patch, either explicitly or filtered by some criteria such as zone or
   * labels.
   * @param instanceFilter instanceFilter or {@code null} for none
   */
  public ExecutePatchJobRequest setInstanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
    return this;
  }

  /**
   * Patch configuration being applied. If omitted, instances are patched using the default
   * configurations.
   * @return value or {@code null} for none
   */
  public PatchConfig getPatchConfig() {
    return patchConfig;
  }

  /**
   * Patch configuration being applied. If omitted, instances are patched using the default
   * configurations.
   * @param patchConfig patchConfig or {@code null} for none
   */
  public ExecutePatchJobRequest setPatchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
    return this;
  }

  /**
   * Rollout strategy of the patch job.
   * @return value or {@code null} for none
   */
  public PatchRollout getRollout() {
    return rollout;
  }

  /**
   * Rollout strategy of the patch job.
   * @param rollout rollout or {@code null} for none
   */
  public ExecutePatchJobRequest setRollout(PatchRollout rollout) {
    this.rollout = rollout;
    return this;
  }

  @Override
  public ExecutePatchJobRequest set(String fieldName, Object value) {
    return (ExecutePatchJobRequest) super.set(fieldName, value);
  }

  @Override
  public ExecutePatchJobRequest clone() {
    return (ExecutePatchJobRequest) super.clone();
  }

}
