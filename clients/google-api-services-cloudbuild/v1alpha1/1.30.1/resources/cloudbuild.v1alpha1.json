{
  "kind": "discovery#restDescription",
  "schemas": {
    "ListWorkerPoolsResponse": {
      "id": "ListWorkerPoolsResponse",
      "description": "Response containing existing `WorkerPools`.",
      "properties": {
        "workerPools": {
          "description": "`WorkerPools` for the project.",
          "type": "array",
          "items": {
            "$ref": "WorkerPool"
          }
        }
      },
      "type": "object"
    },
    "BuildOptions": {
      "type": "object",
      "properties": {
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ]
          },
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ]
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT*\n\"disk free\"; some of the space will be used by the operating system and\nbuild utilities. Also note that this is the minimum disk size that will be\nallocated for the build -- the build may run with a larger disk than\nrequested. At present, the maximum disk size is 1000GB; builds that request\nmore than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "substitutionOption": {
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing\na substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "type": "string",
          "description": "Option to specify behavior when there is an error in the substitution\nchecks.\n\nNOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot\nbe overridden in the build configuration file."
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "Global list of volumes to mount for ALL build steps\n\nEach volume is created as an empty volume prior to starting the build\nprocess. Upon completion of the build, volumes and their contents are\ndiscarded. Global volume names and paths cannot conflict with the volumes\ndefined a build step.\n\nUsing a global volume in a build with only one step is not valid as\nit is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "env": {
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variable definitions that will exist for all\nbuild steps in this build. If a variable is defined in both globally and in\na build step, the variable will use the build step value.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".",
          "type": "array"
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32"
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs."
          ]
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud\nKey Management Service crypto key. These values must be specified in the\nbuild's `Secret`. These variables will be available to all build steps\nin this build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workerPool": {
          "description": "Option to specify a `WorkerPool` for the build.\nFormat: projects/{project}/workerPools/{workerPool}\n\nThis field is experimental.",
          "type": "string"
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "type": "string",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ]
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string\noperations to the substitutions.\n\nNOTE: this is always enabled for triggered builds and cannot be\noverridden in the build configuration file.",
          "type": "boolean"
        },
        "logging": {
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not\nrely on the default logging behavior as it may change in the future.",
            "Stackdriver logging and Cloud Storage logging are enabled.",
            "Only Cloud Storage logging is enabled."
          ],
          "description": "Option to specify the logging mode, which determines if and where build\nlogs are stored.",
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY"
          ],
          "type": "string"
        },
        "logStreamingOption": {
          "type": "string",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "description": "Option to define build log streaming behavior to Google Cloud\nStorage.",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be\nwritten when the build is completed."
          ]
        }
      },
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds."
    },
    "ArtifactResult": {
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This\nis a single record in the artifact manifest JSON file.",
      "type": "object",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          },
          "description": "The file hash of the artifact."
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the\ngeneration number. For example,\n`gs://mybucket/path/to/output.jar#generation`."
        }
      }
    },
    "BuiltImage": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as\npresented to `docker push`."
        },
        "pushTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image."
        },
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        }
      },
      "type": "object",
      "id": "BuiltImage",
      "description": "An image built by the pipeline."
    },
    "Network": {
      "id": "Network",
      "description": "Network describes the GCP network used to create workers in.",
      "properties": {
        "subnetwork": {
          "type": "string",
          "description": "Subnetwork on which the workers are created.\n\"default\" subnetwork is used if empty."
        },
        "projectId": {
          "type": "string",
          "description": "Project id containing the defined network and subnetwork. For a peered VPC,\nthis will be the same as the project_id in which the workers are created.\nFor a shared VPC, this will be the project sharing the network with the\nproject_id project in which workers will be created. For custom workers\nwith no VPC, this will be the same as project_id."
        },
        "network": {
          "type": "string",
          "description": "Network on which the workers are created.\n\"default\" network is used if empty."
        }
      },
      "type": "object"
    },
    "SourceProvenance": {
      "properties": {
        "resolvedStorageSource": {
          "$ref": "StorageSource",
          "description": "A copy of the build's `source.storage_source`, if exists, with any\ngenerations resolved."
        },
        "resolvedRepoSource": {
          "$ref": "RepoSource",
          "description": "A copy of the build's `source.repo_source`, if exists, with any\nrevisions resolved."
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that\nthe original source integrity was maintained in the build. Note that\n`FileHashes` will only be populated if `BuildOptions` has requested a\n`SourceProvenanceHash`.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        }
      },
      "description": "Provenance of the source. Ways to find the original source, or verify that\nsome source was used for this build.",
      "id": "SourceProvenance",
      "type": "object"
    },
    "Artifacts": {
      "description": "Artifacts produced by a build that should be uploaded upon\nsuccessful completion of all build steps.",
      "type": "object",
      "properties": {
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful\ncompletion of all build steps.\n\nFiles in the workspace matching specified paths globs will be uploaded to\nthe specified Cloud Storage location using the builder service account's\ncredentials.\n\nThe location and generation of the uploaded objects will be stored in the\nBuild resource's results field.\n\nIf any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images will be pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the Build resource's\nresults field.\n\nIf any of the images fail to be pushed, the build is marked FAILURE."
        }
      },
      "id": "Artifacts"
    },
    "Build": {
      "description": "A build resource in the Cloud Build API.\n\nAt a high level, a `Build` describes where to find source code, how to build\nit (for example, the builder image to run on the source), and where to store\nthe built artifacts.\n\nFields can include the following variables, which will be expanded when the\nbuild is created:\n\n- $PROJECT_ID: the project ID of the build.\n- $BUILD_ID: the autogenerated ID of the build.\n- $REPO_NAME: the source repository name specified by RepoSource.\n- $BRANCH_NAME: the branch name specified by RepoSource.\n- $TAG_NAME: the tag name specified by RepoSource.\n- $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or\n  resolved from the specified branch or tag.\n- $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "type": "string"
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "$ref": "SourceProvenance"
        },
        "results": {
          "$ref": "Results",
          "description": "Output only. Results of the build."
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it\nwas triggered automatically.",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "description": "Output only. Time at which execution of the build was started.",
          "type": "string"
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "BuildStep"
          }
        },
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images are pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the `Build` resource's\nresults field.\n\nIf any of the images fail to be pushed, the build status is marked\n`FAILURE`."
        },
        "projectId": {
          "type": "string",
          "description": "Output only. ID of the project."
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "timing": {
          "additionalProperties": {
            "$ref": "TimeSpan"
          },
          "description": "Output only. Stores timing information for phases of the build. Valid keys\nare:\n\n* BUILD: time to execute all build steps\n* PUSH: time to push all specified images.\n* FETCHSOURCE: time to fetch source.\n\nIf the build does not specify source or images,\nthese keys will not be included.",
          "type": "object"
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs should be written (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\nLogs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "type": "string"
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string"
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second\ngranularity. If this amount of time elapses, work on the build will cease\nand the build status will be `TIMEOUT`.\n\n`timeout` starts ticking from `startTime`.\n\nDefault time is ten minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "finishTime": {
          "format": "google-datetime",
          "description": "Output only. Time at which execution of the build was finished.\n\nThe difference between finish_time and start_time is the duration of the\nbuild's execution.",
          "type": "string"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "Secret"
          },
          "description": "Secrets to decrypt using Cloud Key Management Service."
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queueTtl": {
          "type": "string",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer\nthan this value, the build will expire and the build status will be\n`EXPIRED`.\n\nThe TTL starts ticking from create_time.",
          "format": "google-duration"
        },
        "artifacts": {
          "$ref": "Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon\nsuccessful completion of all build steps."
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "format": "google-datetime",
          "type": "string"
        },
        "status": {
          "description": "Output only. Status of the build.",
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ]
        }
      },
      "id": "Build",
      "type": "object"
    },
    "FileHashes": {
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in\nSourceProvenance messages to verify integrity of source input to the build.",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      },
      "type": "object"
    },
    "WorkerConfig": {
      "type": "object",
      "id": "WorkerConfig",
      "description": "WorkerConfig defines the configuration to be used for a creating workers in\nthe pool.",
      "properties": {
        "tag": {
          "description": "The tag applied to the worker, and the same tag used by the firewall rule.\nIt is used to identify the Cloud Build workers among other VMs.\nThe default value for tag is `worker`.",
          "type": "string"
        },
        "network": {
          "description": "The network definition used to create the worker.\nIf this section is left empty, the workers will be created in\nWorkerPool.project_id on the default network.",
          "$ref": "Network"
        },
        "machineType": {
          "type": "string",
          "description": "Machine Type of the worker, such as n1-standard-1.\nSee https://cloud.google.com/compute/docs/machine-types.\nIf left blank, Cloud Build will use a standard unspecified machine to\ncreate the worker pool.\n`machine_type` is overridden if you specify a different machine type in\n`build_options`. In this case, the VM specified in the `build_options`\nwill be created on demand at build time. For more information see\nhttps://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes"
        },
        "diskSizeGb": {
          "format": "int64",
          "description": "Size of the disk attached to the worker, in GB.\nSee https://cloud.google.com/compute/docs/disks/\nIf `0` is specified, Cloud Build will use a standard disk size.\n`disk_size` is overridden if you specify a different disk size in\n`build_options`. In this case, a VM with a disk size specified in the\n`build_options` will be created on demand at build time. For more\ninformation see\nhttps://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions",
          "type": "string"
        }
      }
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "id": "Empty",
      "properties": {}
    },
    "StorageSource": {
      "type": "object",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "properties": {
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source.\n\nThis object must be a gzipped archive file (`.tar.gz`) containing source to\nbuild."
        },
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is\nomitted, the latest generation will be used.",
          "format": "int64"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "id": "StorageSource"
    },
    "CancelOperationRequest": {
      "properties": {},
      "type": "object",
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation."
    },
    "Source": {
      "properties": {
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source\nRepository."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in Google Cloud Storage."
        }
      },
      "description": "Location of the source in a supported storage service.",
      "type": "object",
      "id": "Source"
    },
    "Secret": {
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        },
        "secretEnv": {
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value.\n\nSecret environment variables must be unique across all of a build's\nsecrets, and must be used by at least one build step. Values can be at most\n64 KB in size. There can be at most 100 secret values across all of a\nbuild's secrets."
        }
      },
      "description": "Pairs a set of secret environment variables containing encrypted\nvalues with the Cloud KMS key to use to decrypt the value.",
      "id": "Secret"
    },
    "BuildStep": {
      "properties": {
        "volumes": {
          "description": "List of volumes to mount into the build step.\n\nEach volume is created as an empty volume prior to execution of the\nbuild step. Upon completion of the build, volumes and their contents are\ndiscarded.\n\nUsing a named volume in only one step is not valid as it is indicative\nof a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "dir": {
          "description": "Working directory to use when running this step's container.\n\nIf this value is a relative path, it is relative to the build's working\ndirectory. If this value is absolute, it may be outside the build's working\ndirectory, in which case the contents of the path may not be persisted\nacross build step executions, unless a `volume` for that path is specified.\n\nIf the build specifies a `RepoSource` with `dir` and a step with a `dir`,\nwhich specifies an absolute path, the `RepoSource` `dir` is ignored for\nthe step's execution.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular\nbuild step.\n\nIf the image is available in the host's Docker daemon's cache, it\nwill be run directly. If not, the host will attempt to pull the image\nfirst, using the builder service account's credentials if necessary.\n\nThe Docker daemon's cache will already have the latest versions of all of\nthe officially supported build steps\n([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).\nThe Docker daemon will also have cached many of the layers for some popular\nimages, like \"ubuntu\", \"debian\", but they will be refreshed at the time you\nattempt to use them.\n\nIf you built an image in a previous build step, it will be stored in the\nhost's Docker daemon's cache and is available to use as the name for a\nlater build step."
        },
        "waitFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on.\nThis build step will not start until all the build steps in `wait_for`\nhave completed successfully. If `wait_for` is empty, this build step will\nstart when all previous build steps in the `Build.Steps` list have\ncompleted successfully."
        },
        "timeout": {
          "format": "google-duration",
          "description": "Time limit for executing this build step. If not defined, the step has no\ntime limit and will be allowed to continue to run until either it completes\nor the build itself times out.",
          "type": "string"
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's\nbuilder image only.",
          "$ref": "TimeSpan"
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to\nreference this build step as a dependency.",
          "type": "string"
        },
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "$ref": "TimeSpan"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started.\n\nIf the image used to run the step's container has an entrypoint, the `args`\nare used as arguments to that entrypoint. If the image does not define\nan entrypoint, the first element in args is used as the entrypoint,\nand the remainder will be used as arguments."
        },
        "env": {
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint.\nIf unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Output only. Status of the build step. At this time, build step status is\nonly updated on build completion; step status is not updated in real-time\nas the build progresses.",
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ]
        },
        "secretEnv": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of environment variables which are encrypted using a Cloud Key\nManagement Service crypto key. These values must be specified in the\nbuild's `Secret`."
        }
      },
      "description": "A step in the build pipeline.",
      "type": "object",
      "id": "BuildStep"
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "properties": {
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form\n\"gs://bucket/path/to/somewhere/\". (see [Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n\nFiles in the workspace matching any path pattern will be uploaded to\nCloud Storage with this location as a prefix."
        },
        "timing": {
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "$ref": "TimeSpan"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace."
        }
      },
      "description": "Files in the workspace to upload to Cloud Storage upon successful\ncompletion of all build steps.",
      "type": "object"
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps\nin order to persist files across build step execution.",
      "properties": {
        "name": {
          "description": "Name of the volume to mount.\n\nVolume names must be unique per build step and must be valid names for\nDocker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to mount the volume.\n\nPaths must be absolute and cannot conflict with other volume paths on the\nsame build step or with certain reserved volume paths.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Volume"
    },
    "Status": {
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          }
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "TimeSpan": {
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase.",
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "description": "End of time span.",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Start of time span."
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "items": {
            "$ref": "Operation"
          },
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse"
    },
    "Operation": {
      "id": "Operation",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "Results": {
      "description": "Artifacts created by the build pipeline.",
      "id": "Results",
      "properties": {
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step\nindices.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        },
        "numArtifacts": {
          "type": "string",
          "format": "int64",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "artifactTiming": {
          "description": "Time to push all non-container artifacts.",
          "$ref": "TimeSpan"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order\ncorresponding to build step indices.\n\n[Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)\ncan produce this output by writing to `$BUILDER_OUTPUT/output`.\nOnly the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "format": "byte",
            "type": "string"
          }
        },
        "images": {
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "BuiltImage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WorkerPool": {
      "type": "object",
      "description": "Configuration for a WorkerPool to run the builds.\n\nWorkers are machines that Cloud Build uses to run your builds. By default,\nall workers run in a project owned by Cloud Build. To have full control over\nthe workers that execute your builds -- such as enabling them to access\nprivate resources on your private network -- you can request Cloud Build to\nrun the workers in your own project by creating a custom workers pool.",
      "properties": {
        "workerConfig": {
          "description": "Configuration to be used for a creating workers in the `WorkerPool`.",
          "$ref": "WorkerConfig"
        },
        "workerCount": {
          "format": "int64",
          "description": "Total number of workers to be created across all requested regions.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "The project ID of the GCP project for which the `WorkerPool` is created."
        },
        "name": {
          "description": "User-defined name of the `WorkerPool`.",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `WorkerPool` was\nreceived.",
          "type": "string",
          "format": "google-datetime"
        },
        "status": {
          "enumDescriptions": [
            "Status of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ],
          "type": "string",
          "description": "Output only. WorkerPool Status.",
          "enum": [
            "STATUS_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ]
        },
        "deleteTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time at which the request to delete the `WorkerPool` was\nreceived."
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "Output only. The service account used to manage the `WorkerPool`. The\nservice account must have the Compute Instance Admin (Beta) permission at\nthe project level."
        },
        "regions": {
          "items": {
            "type": "string",
            "enum": [
              "REGION_UNSPECIFIED",
              "us-central1",
              "us-west1",
              "us-east1",
              "us-east4"
            ]
          },
          "type": "array",
          "enumDescriptions": [
            "no region",
            "us-central1 region",
            "us-west1 region",
            "us-east1 region",
            "us-east4 region"
          ],
          "description": "List of regions to create the `WorkerPool`. Regions can't be empty.\nIf Cloud Build adds a new GCP region in the future, the existing\n`WorkerPool` will not be enabled in the new region automatically;\nyou must add the new region to the `regions` field to enable the\n`WorkerPool` in that region."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time at which the request to create the `WorkerPool` was\nreceived."
        }
      },
      "id": "WorkerPool"
    },
    "Hash": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The hash value.",
          "format": "byte"
        },
        "type": {
          "description": "The type of hash that was performed.",
          "type": "string",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ]
        }
      },
      "id": "Hash",
      "description": "Container message for hash values.",
      "type": "object"
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "properties": {
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build.\n\nThis must be a relative path. If a step's `dir` is specified and is an\nabsolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Required. Name of the Cloud Source Repository."
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions to use in a triggered build.\nShould only be used with RunBuildTrigger"
        },
        "tagName": {
          "description": "Regex matching tags to build.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision\nregex.",
          "type": "boolean"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the\nproject ID requesting the build is assumed."
        }
      },
      "type": "object",
      "id": "RepoSource"
    },
    "BuildOperationMetadata": {
      "type": "object",
      "id": "BuildOperationMetadata",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      },
      "description": "Metadata for build operations."
    }
  },
  "id": "cloudbuild:v1alpha1",
  "version_module": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "revision": "20200606",
  "ownerDomain": "google.com",
  "servicePath": "",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string"
    }
  },
  "ownerName": "Google",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "version": "v1alpha1",
  "title": "Cloud Build API",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "discoveryVersion": "v1",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "batchPath": "batch",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "canonicalName": "Cloud Build",
  "resources": {
    "projects": {
      "resources": {
        "workerPools": {
          "methods": {
            "list": {
              "id": "cloudbuild.projects.workerPools.list",
              "description": "List project's `WorkerPool`s.",
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "ID of the parent project.",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+parent}/workerPools",
              "response": {
                "$ref": "ListWorkerPoolsResponse"
              }
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "description": "Returns information about a `WorkerPool`.",
              "response": {
                "$ref": "WorkerPool"
              },
              "path": "v1alpha1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "required": true,
                  "description": "The field will contain name of the resource requested, for example:\n\"projects/project-1/workerPools/workerpool-name\"",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "id": "cloudbuild.projects.workerPools.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}"
            },
            "patch": {
              "response": {
                "$ref": "WorkerPool"
              },
              "parameters": {
                "name": {
                  "description": "The field will contain name of the resource requested, for example:\n\"projects/project-1/workerPools/workerpool-name\"",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$"
                }
              },
              "path": "v1alpha1/{+name}",
              "description": "Update a `WorkerPool`.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
              "id": "cloudbuild.projects.workerPools.patch",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "WorkerPool"
              }
            },
            "create": {
              "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool.",
              "id": "cloudbuild.projects.workerPools.create",
              "parameters": {
                "parent": {
                  "description": "ID of the parent project.",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "WorkerPool"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "WorkerPool"
              },
              "path": "v1alpha1/{+parent}/workerPools",
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools"
            },
            "delete": {
              "id": "cloudbuild.projects.workerPools.delete",
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes a `WorkerPool` by its project ID and WorkerPool name.",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "type": "string",
                  "description": "The field will contain name of the resource requested, for example:\n\"projects/project-1/workerPools/workerpool-name\""
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "path": "v1alpha1/{+name}"
            }
          }
        },
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.operations.get",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "description": "The name of the operation resource.",
                      "type": "string"
                    }
                  },
                  "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1alpha1/{+name}"
                },
                "cancel": {
                  "path": "v1alpha1/{+name}:cancel",
                  "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be cancelled."
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "id": "cloudbuild.projects.locations.operations.list",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
                  "parameters": {
                    "filter": {
                      "description": "The standard list filter.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The standard list page size.",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The name of the operation's parent resource.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1alpha1/{+name}/operations",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                  "httpMethod": "GET"
                }
              }
            }
          }
        }
      }
    }
  },
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "name": "cloudbuild",
  "basePath": "",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  }
}
