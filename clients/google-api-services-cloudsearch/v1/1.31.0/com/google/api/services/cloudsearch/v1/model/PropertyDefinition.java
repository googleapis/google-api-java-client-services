/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * The definition of a property within an object.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PropertyDefinition extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BooleanPropertyOptions booleanPropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatePropertyOptions datePropertyOptions;

  /**
   * Options that determine how the property is displayed in the Cloud Search results page if it is
   * specified to be displayed in the object's display options .
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PropertyDisplayOptions displayOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DoublePropertyOptions doublePropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EnumPropertyOptions enumPropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlPropertyOptions htmlPropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IntegerPropertyOptions integerPropertyOptions;

  /**
   * Indicates that the property can be used for generating facets. Cannot be true for properties
   * whose type is object. IsReturnable must be true to set this option. Only supported for Boolean,
   * Enum, and Text properties.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isFacetable;

  /**
   * Indicates that multiple values are allowed for the property. For example, a document only has
   * one description but can have multiple comments. Cannot be true for properties whose type is a
   * boolean. If set to false, properties that contain more than one value cause the indexing
   * request for that item to be rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRepeatable;

  /**
   * Indicates that the property identifies data that should be returned in search results via the
   * Query API. If set to *true*, indicates that Query API users can use matching property fields in
   * results. However, storing fields requires more space allocation and uses more bandwidth for
   * search queries, which impacts performance over large datasets. Set to *true* here only if the
   * field is needed for search results. Cannot be true for properties whose type is an object.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isReturnable;

  /**
   * Indicates that the property can be used for sorting. Cannot be true for properties that are
   * repeatable. Cannot be true for properties whose type is object or user identifier. IsReturnable
   * must be true to set this option. Only supported for Boolean, Date, Double, Integer, and
   * Timestamp properties.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSortable;

  /**
   * Indicates that the property can be used for generating query suggestions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSuggestable;

  /**
   * Indicates that users can perform wildcard search for this property. Only supported for Text
   * properties. IsReturnable must be true to set this option. In a given datasource maximum of 5
   * properties can be marked as is_wildcard_searchable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isWildcardSearchable;

  /**
   * The name of the property. Item indexing requests sent to the Indexing API should set the
   * property name equal to this value. For example, if name is *subject_line*, then indexing
   * requests for document items with subject fields should set the name for that field equal to
   * *subject_line*. Use the name as the identifier for the object property. Once registered as a
   * property for an object, you cannot re-use this name for another property within that object.
   * The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The
   * maximum length is 256 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ObjectPropertyOptions objectPropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TextPropertyOptions textPropertyOptions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimestampPropertyOptions timestampPropertyOptions;

  /**
   * @return value or {@code null} for none
   */
  public BooleanPropertyOptions getBooleanPropertyOptions() {
    return booleanPropertyOptions;
  }

  /**
   * @param booleanPropertyOptions booleanPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setBooleanPropertyOptions(BooleanPropertyOptions booleanPropertyOptions) {
    this.booleanPropertyOptions = booleanPropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public DatePropertyOptions getDatePropertyOptions() {
    return datePropertyOptions;
  }

  /**
   * @param datePropertyOptions datePropertyOptions or {@code null} for none
   */
  public PropertyDefinition setDatePropertyOptions(DatePropertyOptions datePropertyOptions) {
    this.datePropertyOptions = datePropertyOptions;
    return this;
  }

  /**
   * Options that determine how the property is displayed in the Cloud Search results page if it is
   * specified to be displayed in the object's display options .
   * @return value or {@code null} for none
   */
  public PropertyDisplayOptions getDisplayOptions() {
    return displayOptions;
  }

  /**
   * Options that determine how the property is displayed in the Cloud Search results page if it is
   * specified to be displayed in the object's display options .
   * @param displayOptions displayOptions or {@code null} for none
   */
  public PropertyDefinition setDisplayOptions(PropertyDisplayOptions displayOptions) {
    this.displayOptions = displayOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public DoublePropertyOptions getDoublePropertyOptions() {
    return doublePropertyOptions;
  }

  /**
   * @param doublePropertyOptions doublePropertyOptions or {@code null} for none
   */
  public PropertyDefinition setDoublePropertyOptions(DoublePropertyOptions doublePropertyOptions) {
    this.doublePropertyOptions = doublePropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public EnumPropertyOptions getEnumPropertyOptions() {
    return enumPropertyOptions;
  }

  /**
   * @param enumPropertyOptions enumPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setEnumPropertyOptions(EnumPropertyOptions enumPropertyOptions) {
    this.enumPropertyOptions = enumPropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public HtmlPropertyOptions getHtmlPropertyOptions() {
    return htmlPropertyOptions;
  }

  /**
   * @param htmlPropertyOptions htmlPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setHtmlPropertyOptions(HtmlPropertyOptions htmlPropertyOptions) {
    this.htmlPropertyOptions = htmlPropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IntegerPropertyOptions getIntegerPropertyOptions() {
    return integerPropertyOptions;
  }

  /**
   * @param integerPropertyOptions integerPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setIntegerPropertyOptions(IntegerPropertyOptions integerPropertyOptions) {
    this.integerPropertyOptions = integerPropertyOptions;
    return this;
  }

  /**
   * Indicates that the property can be used for generating facets. Cannot be true for properties
   * whose type is object. IsReturnable must be true to set this option. Only supported for Boolean,
   * Enum, and Text properties.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsFacetable() {
    return isFacetable;
  }

  /**
   * Indicates that the property can be used for generating facets. Cannot be true for properties
   * whose type is object. IsReturnable must be true to set this option. Only supported for Boolean,
   * Enum, and Text properties.
   * @param isFacetable isFacetable or {@code null} for none
   */
  public PropertyDefinition setIsFacetable(java.lang.Boolean isFacetable) {
    this.isFacetable = isFacetable;
    return this;
  }

  /**
   * Indicates that multiple values are allowed for the property. For example, a document only has
   * one description but can have multiple comments. Cannot be true for properties whose type is a
   * boolean. If set to false, properties that contain more than one value cause the indexing
   * request for that item to be rejected.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRepeatable() {
    return isRepeatable;
  }

  /**
   * Indicates that multiple values are allowed for the property. For example, a document only has
   * one description but can have multiple comments. Cannot be true for properties whose type is a
   * boolean. If set to false, properties that contain more than one value cause the indexing
   * request for that item to be rejected.
   * @param isRepeatable isRepeatable or {@code null} for none
   */
  public PropertyDefinition setIsRepeatable(java.lang.Boolean isRepeatable) {
    this.isRepeatable = isRepeatable;
    return this;
  }

  /**
   * Indicates that the property identifies data that should be returned in search results via the
   * Query API. If set to *true*, indicates that Query API users can use matching property fields in
   * results. However, storing fields requires more space allocation and uses more bandwidth for
   * search queries, which impacts performance over large datasets. Set to *true* here only if the
   * field is needed for search results. Cannot be true for properties whose type is an object.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsReturnable() {
    return isReturnable;
  }

  /**
   * Indicates that the property identifies data that should be returned in search results via the
   * Query API. If set to *true*, indicates that Query API users can use matching property fields in
   * results. However, storing fields requires more space allocation and uses more bandwidth for
   * search queries, which impacts performance over large datasets. Set to *true* here only if the
   * field is needed for search results. Cannot be true for properties whose type is an object.
   * @param isReturnable isReturnable or {@code null} for none
   */
  public PropertyDefinition setIsReturnable(java.lang.Boolean isReturnable) {
    this.isReturnable = isReturnable;
    return this;
  }

  /**
   * Indicates that the property can be used for sorting. Cannot be true for properties that are
   * repeatable. Cannot be true for properties whose type is object or user identifier. IsReturnable
   * must be true to set this option. Only supported for Boolean, Date, Double, Integer, and
   * Timestamp properties.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSortable() {
    return isSortable;
  }

  /**
   * Indicates that the property can be used for sorting. Cannot be true for properties that are
   * repeatable. Cannot be true for properties whose type is object or user identifier. IsReturnable
   * must be true to set this option. Only supported for Boolean, Date, Double, Integer, and
   * Timestamp properties.
   * @param isSortable isSortable or {@code null} for none
   */
  public PropertyDefinition setIsSortable(java.lang.Boolean isSortable) {
    this.isSortable = isSortable;
    return this;
  }

  /**
   * Indicates that the property can be used for generating query suggestions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSuggestable() {
    return isSuggestable;
  }

  /**
   * Indicates that the property can be used for generating query suggestions.
   * @param isSuggestable isSuggestable or {@code null} for none
   */
  public PropertyDefinition setIsSuggestable(java.lang.Boolean isSuggestable) {
    this.isSuggestable = isSuggestable;
    return this;
  }

  /**
   * Indicates that users can perform wildcard search for this property. Only supported for Text
   * properties. IsReturnable must be true to set this option. In a given datasource maximum of 5
   * properties can be marked as is_wildcard_searchable.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsWildcardSearchable() {
    return isWildcardSearchable;
  }

  /**
   * Indicates that users can perform wildcard search for this property. Only supported for Text
   * properties. IsReturnable must be true to set this option. In a given datasource maximum of 5
   * properties can be marked as is_wildcard_searchable.
   * @param isWildcardSearchable isWildcardSearchable or {@code null} for none
   */
  public PropertyDefinition setIsWildcardSearchable(java.lang.Boolean isWildcardSearchable) {
    this.isWildcardSearchable = isWildcardSearchable;
    return this;
  }

  /**
   * The name of the property. Item indexing requests sent to the Indexing API should set the
   * property name equal to this value. For example, if name is *subject_line*, then indexing
   * requests for document items with subject fields should set the name for that field equal to
   * *subject_line*. Use the name as the identifier for the object property. Once registered as a
   * property for an object, you cannot re-use this name for another property within that object.
   * The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The
   * maximum length is 256 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the property. Item indexing requests sent to the Indexing API should set the
   * property name equal to this value. For example, if name is *subject_line*, then indexing
   * requests for document items with subject fields should set the name for that field equal to
   * *subject_line*. Use the name as the identifier for the object property. Once registered as a
   * property for an object, you cannot re-use this name for another property within that object.
   * The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The
   * maximum length is 256 characters.
   * @param name name or {@code null} for none
   */
  public PropertyDefinition setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ObjectPropertyOptions getObjectPropertyOptions() {
    return objectPropertyOptions;
  }

  /**
   * @param objectPropertyOptions objectPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setObjectPropertyOptions(ObjectPropertyOptions objectPropertyOptions) {
    this.objectPropertyOptions = objectPropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TextPropertyOptions getTextPropertyOptions() {
    return textPropertyOptions;
  }

  /**
   * @param textPropertyOptions textPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setTextPropertyOptions(TextPropertyOptions textPropertyOptions) {
    this.textPropertyOptions = textPropertyOptions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TimestampPropertyOptions getTimestampPropertyOptions() {
    return timestampPropertyOptions;
  }

  /**
   * @param timestampPropertyOptions timestampPropertyOptions or {@code null} for none
   */
  public PropertyDefinition setTimestampPropertyOptions(TimestampPropertyOptions timestampPropertyOptions) {
    this.timestampPropertyOptions = timestampPropertyOptions;
    return this;
  }

  @Override
  public PropertyDefinition set(String fieldName, Object value) {
    return (PropertyDefinition) super.set(fieldName, value);
  }

  @Override
  public PropertyDefinition clone() {
    return (PropertyDefinition) super.clone();
  }

}
