/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.workloadmanager.v1.model;

/**
 * HealthCondition contains the detailed health check of each component.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Workload Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ComponentHealth extends com.google.api.client.json.GenericJson {

  /**
   * The component of a workload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String component;

  /**
   * The detailed health checks of the component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HealthCheck> componentHealthChecks;

  /**
   * Output only. The type of the component health.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String componentHealthType;

  /**
   * Output only. The requirement of the component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRequired;

  /**
   * Output only. The health state of the component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Sub component health.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ComponentHealth> subComponentHealthes;

  /**
   * The component of a workload.
   * @return value or {@code null} for none
   */
  public java.lang.String getComponent() {
    return component;
  }

  /**
   * The component of a workload.
   * @param component component or {@code null} for none
   */
  public ComponentHealth setComponent(java.lang.String component) {
    this.component = component;
    return this;
  }

  /**
   * The detailed health checks of the component.
   * @return value or {@code null} for none
   */
  public java.util.List<HealthCheck> getComponentHealthChecks() {
    return componentHealthChecks;
  }

  /**
   * The detailed health checks of the component.
   * @param componentHealthChecks componentHealthChecks or {@code null} for none
   */
  public ComponentHealth setComponentHealthChecks(java.util.List<HealthCheck> componentHealthChecks) {
    this.componentHealthChecks = componentHealthChecks;
    return this;
  }

  /**
   * Output only. The type of the component health.
   * @return value or {@code null} for none
   */
  public java.lang.String getComponentHealthType() {
    return componentHealthType;
  }

  /**
   * Output only. The type of the component health.
   * @param componentHealthType componentHealthType or {@code null} for none
   */
  public ComponentHealth setComponentHealthType(java.lang.String componentHealthType) {
    this.componentHealthType = componentHealthType;
    return this;
  }

  /**
   * Output only. The requirement of the component.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRequired() {
    return isRequired;
  }

  /**
   * Output only. The requirement of the component.
   * @param isRequired isRequired or {@code null} for none
   */
  public ComponentHealth setIsRequired(java.lang.Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Output only. The health state of the component.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The health state of the component.
   * @param state state or {@code null} for none
   */
  public ComponentHealth setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Sub component health.
   * @return value or {@code null} for none
   */
  public java.util.List<ComponentHealth> getSubComponentHealthes() {
    return subComponentHealthes;
  }

  /**
   * Sub component health.
   * @param subComponentHealthes subComponentHealthes or {@code null} for none
   */
  public ComponentHealth setSubComponentHealthes(java.util.List<ComponentHealth> subComponentHealthes) {
    this.subComponentHealthes = subComponentHealthes;
    return this;
  }

  @Override
  public ComponentHealth set(String fieldName, Object value) {
    return (ComponentHealth) super.set(fieldName, value);
  }

  @Override
  public ComponentHealth clone() {
    return (ComponentHealth) super.clone();
  }

}
