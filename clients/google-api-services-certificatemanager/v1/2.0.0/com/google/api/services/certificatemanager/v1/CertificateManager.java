/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.certificatemanager.v1;

/**
 * Service definition for CertificateManager (v1).
 *
 * <p>
 * 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/certificate-manager" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CertificateManagerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class CertificateManager extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Certificate Manager API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://certificatemanager.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://certificatemanager.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public CertificateManager(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  CertificateManager(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
   *   {@code CertificateManager.Projects.List request = certificatemanager.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
     *   {@code CertificateManager.Locations.List request = certificatemanager.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the certificatemanager server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the certificatemanager server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the certificatemanager server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the certificatemanager server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the CertificateIssuanceConfigs collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.CertificateIssuanceConfigs.List request = certificatemanager.certificateIssuanceConfigs().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public CertificateIssuanceConfigs certificateIssuanceConfigs() {
        return new CertificateIssuanceConfigs();
      }

      /**
       * The "certificateIssuanceConfigs" collection of methods.
       */
      public class CertificateIssuanceConfigs {

        /**
         * Creates a new CertificateIssuanceConfig in a given project and location.
         *
         * Create a request for the method "certificateIssuanceConfigs.create".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource of the certificate issuance config. Must be in the format
         *        `projects/locations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/certificateIssuanceConfigs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new CertificateIssuanceConfig in a given project and location.
           *
           * Create a request for the method "certificateIssuanceConfigs.create".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource of the certificate issuance config. Must be in the format
         *        `projects/locations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource of the certificate issuance config. Must be in the format
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource of the certificate issuance config. Must be in the format
         `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource of the certificate issuance config. Must be in the format
           * `projects/locations`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. A user-provided name of the certificate config. */
          @com.google.api.client.util.Key
          private java.lang.String certificateIssuanceConfigId;

          /** Required. A user-provided name of the certificate config.
           */
          public java.lang.String getCertificateIssuanceConfigId() {
            return certificateIssuanceConfigId;
          }

          /** Required. A user-provided name of the certificate config. */
          public Create setCertificateIssuanceConfigId(java.lang.String certificateIssuanceConfigId) {
            this.certificateIssuanceConfigId = certificateIssuanceConfigId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single CertificateIssuanceConfig.
         *
         * Create a request for the method "certificateIssuanceConfigs.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate issuance config to delete. Must be in the format
         *        `projects/locations/certificateIssuanceConfigs`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");

          /**
           * Deletes a single CertificateIssuanceConfig.
           *
           * Create a request for the method "certificateIssuanceConfigs.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate issuance config to delete. Must be in the format
         *        `projects/locations/certificateIssuanceConfigs`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate issuance config to delete. Must be in the format
           * `projects/locations/certificateIssuanceConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate issuance config to delete. Must be in the format
         `projects/locations/certificateIssuanceConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate issuance config to delete. Must be in the format
           * `projects/locations/certificateIssuanceConfigs`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single CertificateIssuanceConfig.
         *
         * Create a request for the method "certificateIssuanceConfigs.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate issuance config to describe. Must be in the format
         *        `projects/locations/certificateIssuanceConfigs`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");

          /**
           * Gets details of a single CertificateIssuanceConfig.
           *
           * Create a request for the method "certificateIssuanceConfigs.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate issuance config to describe. Must be in the format
         *        `projects/locations/certificateIssuanceConfigs`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate issuance config to describe. Must be in the format
           * `projects/locations/certificateIssuanceConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate issuance config to describe. Must be in the format
         `projects/locations/certificateIssuanceConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate issuance config to describe. Must be in the format
           * `projects/locations/certificateIssuanceConfigs`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists CertificateIssuanceConfigs in a given project and location.
         *
         * Create a request for the method "certificateIssuanceConfigs.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project and location from which the certificate should be listed, specified in the
         *        format `projects/locations`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListCertificateIssuanceConfigsResponse> {

          private static final String REST_PATH = "v1/{+parent}/certificateIssuanceConfigs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists CertificateIssuanceConfigs in a given project and location.
           *
           * Create a request for the method "certificateIssuanceConfigs.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project and location from which the certificate should be listed, specified in the
         *        format `projects/locations`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListCertificateIssuanceConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project and location from which the certificate should be listed,
           * specified in the format `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project and location from which the certificate should be listed, specified in the
         format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project and location from which the certificate should be listed,
           * specified in the format `projects/locations`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter expression to restrict the Certificates Configs returned. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter expression to restrict the Certificates Configs returned.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter expression to restrict the Certificates Configs returned. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. A list of Certificate Config field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. A list of Certificate Config field names used to specify the order of the returned
         results. The default sorting order is ascending. To specify descending order for a field, add a
         suffix `" desc"`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. A list of Certificate Config field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. Maximum number of certificate configs to return per call. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Maximum number of certificate configs to return per call.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Maximum number of certificate configs to return per call. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The value returned by the last `ListCertificateIssuanceConfigsResponse`.
           * Indicates that this is a continuation of a prior `ListCertificateIssuanceConfigs` call,
           * and that the system should return the next page of data.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The value returned by the last `ListCertificateIssuanceConfigsResponse`. Indicates that
         this is a continuation of a prior `ListCertificateIssuanceConfigs` call, and that the system should
         return the next page of data.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The value returned by the last `ListCertificateIssuanceConfigsResponse`.
           * Indicates that this is a continuation of a prior `ListCertificateIssuanceConfigs` call,
           * and that the system should return the next page of data.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a CertificateIssuanceConfig.
         *
         * Create a request for the method "certificateIssuanceConfigs.patch".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. A user-defined name of the certificate issuance config. CertificateIssuanceConfig names
         *        must be unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");

          /**
           * Updates a CertificateIssuanceConfig.
           *
           * Create a request for the method "certificateIssuanceConfigs.patch".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. A user-defined name of the certificate issuance config. CertificateIssuanceConfig names
         *        must be unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateIssuanceConfig content) {
            super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. A user-defined name of the certificate issuance config.
           * CertificateIssuanceConfig names must be unique globally and match pattern
           * `projects/locations/certificateIssuanceConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. A user-defined name of the certificate issuance config. CertificateIssuanceConfig names
         must be unique globally and match pattern `projects/locations/certificateIssuanceConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. A user-defined name of the certificate issuance config.
           * CertificateIssuanceConfig names must be unique globally and match pattern
           * `projects/locations/certificateIssuanceConfigs`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateIssuanceConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the CertificateMaps collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.CertificateMaps.List request = certificatemanager.certificateMaps().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public CertificateMaps certificateMaps() {
        return new CertificateMaps();
      }

      /**
       * The "certificateMaps" collection of methods.
       */
      public class CertificateMaps {

        /**
         * Creates a new CertificateMap in a given project and location.
         *
         * Create a request for the method "certificateMaps.create".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource of the certificate map. Must be in the format `projects/locations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMap}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateMap content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/certificateMaps";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new CertificateMap in a given project and location.
           *
           * Create a request for the method "certificateMaps.create".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource of the certificate map. Must be in the format `projects/locations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMap}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateMap content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource of the certificate map. Must be in the format
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource of the certificate map. Must be in the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource of the certificate map. Must be in the format
           * `projects/locations`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. A user-provided name of the certificate map. */
          @com.google.api.client.util.Key
          private java.lang.String certificateMapId;

          /** Required. A user-provided name of the certificate map.
           */
          public java.lang.String getCertificateMapId() {
            return certificateMapId;
          }

          /** Required. A user-provided name of the certificate map. */
          public Create setCertificateMapId(java.lang.String certificateMapId) {
            this.certificateMapId = certificateMapId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single CertificateMap. A Certificate Map can't be deleted if it contains Certificate
         * Map Entries. Remove all the entries from the map before calling this method.
         *
         * Create a request for the method "certificateMaps.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate map to delete. Must be in the format
         *        `projects/locations/certificateMaps`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");

          /**
           * Deletes a single CertificateMap. A Certificate Map can't be deleted if it contains Certificate
           * Map Entries. Remove all the entries from the map before calling this method.
           *
           * Create a request for the method "certificateMaps.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate map to delete. Must be in the format
         *        `projects/locations/certificateMaps`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate map to delete. Must be in the format
           * `projects/locations/certificateMaps`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate map to delete. Must be in the format
         `projects/locations/certificateMaps`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate map to delete. Must be in the format
           * `projects/locations/certificateMaps`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single CertificateMap.
         *
         * Create a request for the method "certificateMaps.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate map to describe. Must be in the format
         *        `projects/locations/certificateMaps`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.CertificateMap> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");

          /**
           * Gets details of a single CertificateMap.
           *
           * Create a request for the method "certificateMaps.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate map to describe. Must be in the format
         *        `projects/locations/certificateMaps`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.CertificateMap.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate map to describe. Must be in the format
           * `projects/locations/certificateMaps`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate map to describe. Must be in the format
         `projects/locations/certificateMaps`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate map to describe. Must be in the format
           * `projects/locations/certificateMaps`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists CertificateMaps in a given project and location.
         *
         * Create a request for the method "certificateMaps.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project and location from which the certificate maps should be listed, specified in
         *        the format `projects/locations`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListCertificateMapsResponse> {

          private static final String REST_PATH = "v1/{+parent}/certificateMaps";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists CertificateMaps in a given project and location.
           *
           * Create a request for the method "certificateMaps.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project and location from which the certificate maps should be listed, specified in
         *        the format `projects/locations`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListCertificateMapsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project and location from which the certificate maps should be listed,
           * specified in the format `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project and location from which the certificate maps should be listed, specified in
         the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project and location from which the certificate maps should be listed,
           * specified in the format `projects/locations`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter expression to restrict the Certificates Maps returned. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter expression to restrict the Certificates Maps returned.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter expression to restrict the Certificates Maps returned. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. A list of Certificate Map field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. A list of Certificate Map field names used to specify the order of the returned results.
         The default sorting order is ascending. To specify descending order for a field, add a suffix `"
         desc"`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. A list of Certificate Map field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. Maximum number of certificate maps to return per call. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Maximum number of certificate maps to return per call.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Maximum number of certificate maps to return per call. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The value returned by the last `ListCertificateMapsResponse`. Indicates that
           * this is a continuation of a prior `ListCertificateMaps` call, and that the system
           * should return the next page of data.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The value returned by the last `ListCertificateMapsResponse`. Indicates that this is a
         continuation of a prior `ListCertificateMaps` call, and that the system should return the next page
         of data.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The value returned by the last `ListCertificateMapsResponse`. Indicates that
           * this is a continuation of a prior `ListCertificateMaps` call, and that the system
           * should return the next page of data.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a CertificateMap.
         *
         * Create a request for the method "certificateMaps.patch".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. A user-defined name of the Certificate Map. Certificate Map names must be unique
         *        globally and match pattern `projects/locations/certificateMaps`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMap}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateMap content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");

          /**
           * Updates a CertificateMap.
           *
           * Create a request for the method "certificateMaps.patch".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. A user-defined name of the Certificate Map. Certificate Map names must be unique
         *        globally and match pattern `projects/locations/certificateMaps`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMap}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateMap content) {
            super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. A user-defined name of the Certificate Map. Certificate Map names must be
           * unique globally and match pattern `projects/locations/certificateMaps`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. A user-defined name of the Certificate Map. Certificate Map names must be unique
         globally and match pattern `projects/locations/certificateMaps`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. A user-defined name of the Certificate Map. Certificate Map names must be
           * unique globally and match pattern `projects/locations/certificateMaps`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the CertificateMapEntries collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
         *   {@code CertificateManager.CertificateMapEntries.List request = certificatemanager.certificateMapEntries().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public CertificateMapEntries certificateMapEntries() {
          return new CertificateMapEntries();
        }

        /**
         * The "certificateMapEntries" collection of methods.
         */
        public class CertificateMapEntries {

          /**
           * Creates a new CertificateMapEntry in a given project and location.
           *
           * Create a request for the method "certificateMapEntries.create".
           *
           * This request holds the parameters needed by the certificatemanager server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent resource of the certificate map entry. Must be in the format
           *        `projects/locations/certificateMaps`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMapEntry}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateMapEntry content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/certificateMapEntries";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");

            /**
             * Creates a new CertificateMapEntry in a given project and location.
             *
             * Create a request for the method "certificateMapEntries.create".
             *
             * This request holds the parameters needed by the the certificatemanager server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent resource of the certificate map entry. Must be in the format
           *        `projects/locations/certificateMaps`.
             * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMapEntry}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.CertificateMapEntry content) {
              super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent resource of the certificate map entry. Must be in the format
             * `projects/locations/certificateMaps`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent resource of the certificate map entry. Must be in the format
           `projects/locations/certificateMaps`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent resource of the certificate map entry. Must be in the format
             * `projects/locations/certificateMaps`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Required. A user-provided name of the certificate map entry. */
            @com.google.api.client.util.Key
            private java.lang.String certificateMapEntryId;

            /** Required. A user-provided name of the certificate map entry.
             */
            public java.lang.String getCertificateMapEntryId() {
              return certificateMapEntryId;
            }

            /** Required. A user-provided name of the certificate map entry. */
            public Create setCertificateMapEntryId(java.lang.String certificateMapEntryId) {
              this.certificateMapEntryId = certificateMapEntryId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single CertificateMapEntry.
           *
           * Create a request for the method "certificateMapEntries.delete".
           *
           * This request holds the parameters needed by the certificatemanager server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. A name of the certificate map entry to delete. Must be in the format
           *        `projects/locations/certificateMaps/certificateMapEntries`.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");

            /**
             * Deletes a single CertificateMapEntry.
             *
             * Create a request for the method "certificateMapEntries.delete".
             *
             * This request holds the parameters needed by the the certificatemanager server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A name of the certificate map entry to delete. Must be in the format
           *        `projects/locations/certificateMaps/certificateMapEntries`.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A name of the certificate map entry to delete. Must be in the format
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A name of the certificate map entry to delete. Must be in the format
           `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A name of the certificate map entry to delete. Must be in the format
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets details of a single CertificateMapEntry.
           *
           * Create a request for the method "certificateMapEntries.get".
           *
           * This request holds the parameters needed by the certificatemanager server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. A name of the certificate map entry to describe. Must be in the format
           *        `projects/locations/certificateMaps/certificateMapEntries`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.CertificateMapEntry> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");

            /**
             * Gets details of a single CertificateMapEntry.
             *
             * Create a request for the method "certificateMapEntries.get".
             *
             * This request holds the parameters needed by the the certificatemanager server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. A name of the certificate map entry to describe. Must be in the format
           *        `projects/locations/certificateMaps/certificateMapEntries`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.CertificateMapEntry.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. A name of the certificate map entry to describe. Must be in the format
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. A name of the certificate map entry to describe. Must be in the format
           `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. A name of the certificate map entry to describe. Must be in the format
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists CertificateMapEntries in a given project and location.
           *
           * Create a request for the method "certificateMapEntries.list".
           *
           * This request holds the parameters needed by the certificatemanager server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The project, location and certificate map from which the certificate map entries should be
           *        listed, specified in the format `projects/locations/certificateMaps`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListCertificateMapEntriesResponse> {

            private static final String REST_PATH = "v1/{+parent}/certificateMapEntries";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");

            /**
             * Lists CertificateMapEntries in a given project and location.
             *
             * Create a request for the method "certificateMapEntries.list".
             *
             * This request holds the parameters needed by the the certificatemanager server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The project, location and certificate map from which the certificate map entries should be
           *        listed, specified in the format `projects/locations/certificateMaps`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListCertificateMapEntriesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The project, location and certificate map from which the certificate map
             * entries should be listed, specified in the format
             * `projects/locations/certificateMaps`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The project, location and certificate map from which the certificate map entries should
           be listed, specified in the format `projects/locations/certificateMaps`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The project, location and certificate map from which the certificate map
             * entries should be listed, specified in the format
             * `projects/locations/certificateMaps`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. Filter expression to restrict the returned Certificate Map Entries. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. Filter expression to restrict the returned Certificate Map Entries.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** Optional. Filter expression to restrict the returned Certificate Map Entries. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Optional. A list of Certificate Map Entry field names used to specify the order of
             * the returned results. The default sorting order is ascending. To specify descending
             * order for a field, add a suffix `" desc"`.
             */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. A list of Certificate Map Entry field names used to specify the order of the returned
           results. The default sorting order is ascending. To specify descending order for a field, add a
           suffix `" desc"`.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /**
             * Optional. A list of Certificate Map Entry field names used to specify the order of
             * the returned results. The default sorting order is ascending. To specify descending
             * order for a field, add a suffix `" desc"`.
             */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. Maximum number of certificate map entries to return. The service may return
             * fewer than this value. If unspecified, at most 50 certificate map entries will be
             * returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Maximum number of certificate map entries to return. The service may return fewer than
           this value. If unspecified, at most 50 certificate map entries will be returned. The maximum value
           is 1000; values above 1000 will be coerced to 1000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Maximum number of certificate map entries to return. The service may return
             * fewer than this value. If unspecified, at most 50 certificate map entries will be
             * returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. The value returned by the last `ListCertificateMapEntriesResponse`.
             * Indicates that this is a continuation of a prior `ListCertificateMapEntries` call,
             * and that the system should return the next page of data.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. The value returned by the last `ListCertificateMapEntriesResponse`. Indicates that this
           is a continuation of a prior `ListCertificateMapEntries` call, and that the system should return
           the next page of data.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. The value returned by the last `ListCertificateMapEntriesResponse`.
             * Indicates that this is a continuation of a prior `ListCertificateMapEntries` call,
             * and that the system should return the next page of data.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a CertificateMapEntry.
           *
           * Create a request for the method "certificateMapEntries.patch".
           *
           * This request holds the parameters needed by the certificatemanager server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be
           *        unique globally and match pattern
           *        `projects/locations/certificateMaps/certificateMapEntries`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMapEntry}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateMapEntry content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");

            /**
             * Updates a CertificateMapEntry.
             *
             * Create a request for the method "certificateMapEntries.patch".
             *
             * This request holds the parameters needed by the the certificatemanager server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be
           *        unique globally and match pattern
           *        `projects/locations/certificateMaps/certificateMapEntries`.
             * @param content the {@link com.google.api.services.certificatemanager.v1.model.CertificateMapEntry}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CertificateMapEntry content) {
              super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. A user-defined name of the Certificate Map Entry. Certificate Map Entry
             * names must be unique globally and match pattern
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be
           unique globally and match pattern `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. A user-defined name of the Certificate Map Entry. Certificate Map Entry
             * names must be unique globally and match pattern
             * `projects/locations/certificateMaps/certificateMapEntries`.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/certificateMaps/[^/]+/certificateMapEntries/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Required. The update mask applies to the resource. For the `FieldMask` definition,
             * see https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
           https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Required. The update mask applies to the resource. For the `FieldMask` definition,
             * see https://developers.google.com/protocol-
             * buffers/docs/reference/google.protobuf#fieldmask.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Certificates collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.Certificates.List request = certificatemanager.certificates().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Certificates certificates() {
        return new Certificates();
      }

      /**
       * The "certificates" collection of methods.
       */
      public class Certificates {

        /**
         * Creates a new Certificate in a given project and location.
         *
         * Create a request for the method "certificates.create".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource of the certificate. Must be in the format `projects/locations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.Certificate}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.Certificate content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/certificates";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new Certificate in a given project and location.
           *
           * Create a request for the method "certificates.create".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource of the certificate. Must be in the format `projects/locations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.Certificate}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.Certificate content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource of the certificate. Must be in the format
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource of the certificate. Must be in the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource of the certificate. Must be in the format
           * `projects/locations`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. A user-provided name of the certificate. */
          @com.google.api.client.util.Key
          private java.lang.String certificateId;

          /** Required. A user-provided name of the certificate.
           */
          public java.lang.String getCertificateId() {
            return certificateId;
          }

          /** Required. A user-provided name of the certificate. */
          public Create setCertificateId(java.lang.String certificateId) {
            this.certificateId = certificateId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single Certificate.
         *
         * Create a request for the method "certificates.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate to delete. Must be in the format
         *        `projects/locations/certificates`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");

          /**
           * Deletes a single Certificate.
           *
           * Create a request for the method "certificates.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate to delete. Must be in the format
         *        `projects/locations/certificates`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate to delete. Must be in the format
           * `projects/locations/certificates`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate to delete. Must be in the format
         `projects/locations/certificates`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate to delete. Must be in the format
           * `projects/locations/certificates`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single Certificate.
         *
         * Create a request for the method "certificates.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the certificate to describe. Must be in the format
         *        `projects/locations/certificates`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Certificate> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");

          /**
           * Gets details of a single Certificate.
           *
           * Create a request for the method "certificates.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the certificate to describe. Must be in the format
         *        `projects/locations/certificates`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Certificate.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the certificate to describe. Must be in the format
           * `projects/locations/certificates`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the certificate to describe. Must be in the format
         `projects/locations/certificates`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the certificate to describe. Must be in the format
           * `projects/locations/certificates`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists Certificates in a given project and location.
         *
         * Create a request for the method "certificates.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project and location from which the certificate should be listed, specified in the
         *        format `projects/locations`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListCertificatesResponse> {

          private static final String REST_PATH = "v1/{+parent}/certificates";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists Certificates in a given project and location.
           *
           * Create a request for the method "certificates.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project and location from which the certificate should be listed, specified in the
         *        format `projects/locations`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListCertificatesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project and location from which the certificate should be listed,
           * specified in the format `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project and location from which the certificate should be listed, specified in the
         format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project and location from which the certificate should be listed,
           * specified in the format `projects/locations`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter expression to restrict the Certificates returned. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter expression to restrict the Certificates returned.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter expression to restrict the Certificates returned. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. A list of Certificate field names used to specify the order of the returned
           * results. The default sorting order is ascending. To specify descending order for a
           * field, add a suffix `" desc"`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. A list of Certificate field names used to specify the order of the returned results. The
         default sorting order is ascending. To specify descending order for a field, add a suffix `"
         desc"`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. A list of Certificate field names used to specify the order of the returned
           * results. The default sorting order is ascending. To specify descending order for a
           * field, add a suffix `" desc"`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. Maximum number of certificates to return per call. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Maximum number of certificates to return per call.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Maximum number of certificates to return per call. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The value returned by the last `ListCertificatesResponse`. Indicates that
           * this is a continuation of a prior `ListCertificates` call, and that the system should
           * return the next page of data.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The value returned by the last `ListCertificatesResponse`. Indicates that this is a
         continuation of a prior `ListCertificates` call, and that the system should return the next page of
         data.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The value returned by the last `ListCertificatesResponse`. Indicates that
           * this is a continuation of a prior `ListCertificates` call, and that the system should
           * return the next page of data.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a Certificate.
         *
         * Create a request for the method "certificates.patch".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. A user-defined name of the certificate. Certificate names must be unique globally and
         *        match pattern `projects/locations/certificates`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.Certificate}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.Certificate content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");

          /**
           * Updates a Certificate.
           *
           * Create a request for the method "certificates.patch".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. A user-defined name of the certificate. Certificate names must be unique globally and
         *        match pattern `projects/locations/certificates`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.Certificate}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.Certificate content) {
            super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. A user-defined name of the certificate. Certificate names must be unique
           * globally and match pattern `projects/locations/certificates`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. A user-defined name of the certificate. Certificate names must be unique globally and
         match pattern `projects/locations/certificates`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. A user-defined name of the certificate. Certificate names must be unique
           * globally and match pattern `projects/locations/certificates`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/certificates/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the DnsAuthorizations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.DnsAuthorizations.List request = certificatemanager.dnsAuthorizations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public DnsAuthorizations dnsAuthorizations() {
        return new DnsAuthorizations();
      }

      /**
       * The "dnsAuthorizations" collection of methods.
       */
      public class DnsAuthorizations {

        /**
         * Creates a new DnsAuthorization in a given project and location.
         *
         * Create a request for the method "dnsAuthorizations.create".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource of the dns authorization. Must be in the format `projects/locations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.DnsAuthorization}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.DnsAuthorization content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/dnsAuthorizations";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new DnsAuthorization in a given project and location.
           *
           * Create a request for the method "dnsAuthorizations.create".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource of the dns authorization. Must be in the format `projects/locations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.DnsAuthorization}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.DnsAuthorization content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource of the dns authorization. Must be in the format
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource of the dns authorization. Must be in the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource of the dns authorization. Must be in the format
           * `projects/locations`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. A user-provided name of the dns authorization. */
          @com.google.api.client.util.Key
          private java.lang.String dnsAuthorizationId;

          /** Required. A user-provided name of the dns authorization.
           */
          public java.lang.String getDnsAuthorizationId() {
            return dnsAuthorizationId;
          }

          /** Required. A user-provided name of the dns authorization. */
          public Create setDnsAuthorizationId(java.lang.String dnsAuthorizationId) {
            this.dnsAuthorizationId = dnsAuthorizationId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single DnsAuthorization.
         *
         * Create a request for the method "dnsAuthorizations.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the dns authorization to delete. Must be in the format
         *        `projects/locations/dnsAuthorizations`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");

          /**
           * Deletes a single DnsAuthorization.
           *
           * Create a request for the method "dnsAuthorizations.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the dns authorization to delete. Must be in the format
         *        `projects/locations/dnsAuthorizations`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the dns authorization to delete. Must be in the format
           * `projects/locations/dnsAuthorizations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the dns authorization to delete. Must be in the format
         `projects/locations/dnsAuthorizations`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the dns authorization to delete. Must be in the format
           * `projects/locations/dnsAuthorizations`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single DnsAuthorization.
         *
         * Create a request for the method "dnsAuthorizations.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the dns authorization to describe. Must be in the format
         *        `projects/locations/dnsAuthorizations`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.DnsAuthorization> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");

          /**
           * Gets details of a single DnsAuthorization.
           *
           * Create a request for the method "dnsAuthorizations.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the dns authorization to describe. Must be in the format
         *        `projects/locations/dnsAuthorizations`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.DnsAuthorization.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the dns authorization to describe. Must be in the format
           * `projects/locations/dnsAuthorizations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the dns authorization to describe. Must be in the format
         `projects/locations/dnsAuthorizations`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the dns authorization to describe. Must be in the format
           * `projects/locations/dnsAuthorizations`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists DnsAuthorizations in a given project and location.
         *
         * Create a request for the method "dnsAuthorizations.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project and location from which the dns authorizations should be listed, specified in
         *        the format `projects/locations`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListDnsAuthorizationsResponse> {

          private static final String REST_PATH = "v1/{+parent}/dnsAuthorizations";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists DnsAuthorizations in a given project and location.
           *
           * Create a request for the method "dnsAuthorizations.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project and location from which the dns authorizations should be listed, specified in
         *        the format `projects/locations`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListDnsAuthorizationsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project and location from which the dns authorizations should be listed,
           * specified in the format `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project and location from which the dns authorizations should be listed, specified in
         the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project and location from which the dns authorizations should be listed,
           * specified in the format `projects/locations`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter expression to restrict the Dns Authorizations returned. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter expression to restrict the Dns Authorizations returned.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter expression to restrict the Dns Authorizations returned. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. A list of Dns Authorization field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. A list of Dns Authorization field names used to specify the order of the returned
         results. The default sorting order is ascending. To specify descending order for a field, add a
         suffix `" desc"`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. A list of Dns Authorization field names used to specify the order of the
           * returned results. The default sorting order is ascending. To specify descending order
           * for a field, add a suffix `" desc"`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. Maximum number of dns authorizations to return per call. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Maximum number of dns authorizations to return per call.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Maximum number of dns authorizations to return per call. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
           * that this is a continuation of a prior `ListDnsAuthorizations` call, and that the
           * system should return the next page of data.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The value returned by the last `ListDnsAuthorizationsResponse`. Indicates that this is a
         continuation of a prior `ListDnsAuthorizations` call, and that the system should return the next
         page of data.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
           * that this is a continuation of a prior `ListDnsAuthorizations` call, and that the
           * system should return the next page of data.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a DnsAuthorization.
         *
         * Create a request for the method "dnsAuthorizations.patch".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. A user-defined name of the dns authorization. DnsAuthorization names must be unique
         *        globally and match pattern `projects/locations/dnsAuthorizations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.DnsAuthorization}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.DnsAuthorization content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");

          /**
           * Updates a DnsAuthorization.
           *
           * Create a request for the method "dnsAuthorizations.patch".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. A user-defined name of the dns authorization. DnsAuthorization names must be unique
         *        globally and match pattern `projects/locations/dnsAuthorizations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.DnsAuthorization}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.DnsAuthorization content) {
            super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. A user-defined name of the dns authorization. DnsAuthorization names must
           * be unique globally and match pattern `projects/locations/dnsAuthorizations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. A user-defined name of the dns authorization. DnsAuthorization names must be unique
         globally and match pattern `projects/locations/dnsAuthorizations`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. A user-defined name of the dns authorization. DnsAuthorization names must
           * be unique globally and match pattern `projects/locations/dnsAuthorizations`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dnsAuthorizations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.Operations.List request = certificatemanager.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.CancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Cancel#execute()} method to invoke the remote
           * operation. <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.CancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.certificatemanager.v1.model.CancelOperationRequest content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the TrustConfigs collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CertificateManager certificatemanager = new CertificateManager(...);}
       *   {@code CertificateManager.TrustConfigs.List request = certificatemanager.trustConfigs().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public TrustConfigs trustConfigs() {
        return new TrustConfigs();
      }

      /**
       * The "trustConfigs" collection of methods.
       */
      public class TrustConfigs {

        /**
         * Creates a new TrustConfig in a given project and location.
         *
         * Create a request for the method "trustConfigs.create".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent resource of the TrustConfig. Must be in the format `projects/locations`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.TrustConfig}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.TrustConfig content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/trustConfigs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new TrustConfig in a given project and location.
           *
           * Create a request for the method "trustConfigs.create".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent resource of the TrustConfig. Must be in the format `projects/locations`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.TrustConfig}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.certificatemanager.v1.model.TrustConfig content) {
            super(CertificateManager.this, "POST", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent resource of the TrustConfig. Must be in the format
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent resource of the TrustConfig. Must be in the format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent resource of the TrustConfig. Must be in the format
           * `projects/locations`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. A user-provided name of the TrustConfig. Must match the regexp
           * `[a-z0-9-]{1,63}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String trustConfigId;

          /** Required. A user-provided name of the TrustConfig. Must match the regexp `[a-z0-9-]{1,63}`.
           */
          public java.lang.String getTrustConfigId() {
            return trustConfigId;
          }

          /**
           * Required. A user-provided name of the TrustConfig. Must match the regexp
           * `[a-z0-9-]{1,63}`.
           */
          public Create setTrustConfigId(java.lang.String trustConfigId) {
            this.trustConfigId = trustConfigId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single TrustConfig.
         *
         * Create a request for the method "trustConfigs.delete".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the TrustConfig to delete. Must be in the format
         *        `projects/locations/trustConfigs`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");

          /**
           * Deletes a single TrustConfig.
           *
           * Create a request for the method "trustConfigs.delete".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the TrustConfig to delete. Must be in the format
         *        `projects/locations/trustConfigs`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CertificateManager.this, "DELETE", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the TrustConfig to delete. Must be in the format
           * `projects/locations/trustConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the TrustConfig to delete. Must be in the format
         `projects/locations/trustConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the TrustConfig to delete. Must be in the format
           * `projects/locations/trustConfigs`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. The current etag of the TrustConfig. If an etag is provided and does not
           * match the current etag of the resource, deletion will be blocked and an ABORTED error
           * will be returned.
           */
          @com.google.api.client.util.Key
          private java.lang.String etag;

          /** Optional. The current etag of the TrustConfig. If an etag is provided and does not match the
         current etag of the resource, deletion will be blocked and an ABORTED error will be returned.
           */
          public java.lang.String getEtag() {
            return etag;
          }

          /**
           * Optional. The current etag of the TrustConfig. If an etag is provided and does not
           * match the current etag of the resource, deletion will be blocked and an ABORTED error
           * will be returned.
           */
          public Delete setEtag(java.lang.String etag) {
            this.etag = etag;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single TrustConfig.
         *
         * Create a request for the method "trustConfigs.get".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. A name of the TrustConfig to describe. Must be in the format
         *        `projects/locations/trustConfigs`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.TrustConfig> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");

          /**
           * Gets details of a single TrustConfig.
           *
           * Create a request for the method "trustConfigs.get".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. A name of the TrustConfig to describe. Must be in the format
         *        `projects/locations/trustConfigs`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.TrustConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. A name of the TrustConfig to describe. Must be in the format
           * `projects/locations/trustConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. A name of the TrustConfig to describe. Must be in the format
         `projects/locations/trustConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. A name of the TrustConfig to describe. Must be in the format
           * `projects/locations/trustConfigs`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists TrustConfigs in a given project and location.
         *
         * Create a request for the method "trustConfigs.list".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The project and location from which the TrustConfigs should be listed, specified in the
         *        format `projects/locations`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.ListTrustConfigsResponse> {

          private static final String REST_PATH = "v1/{+parent}/trustConfigs";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists TrustConfigs in a given project and location.
           *
           * Create a request for the method "trustConfigs.list".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The project and location from which the TrustConfigs should be listed, specified in the
         *        format `projects/locations`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CertificateManager.this, "GET", REST_PATH, null, com.google.api.services.certificatemanager.v1.model.ListTrustConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The project and location from which the TrustConfigs should be listed,
           * specified in the format `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The project and location from which the TrustConfigs should be listed, specified in the
         format `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The project and location from which the TrustConfigs should be listed,
           * specified in the format `projects/locations`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filter expression to restrict the TrustConfigs returned. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filter expression to restrict the TrustConfigs returned.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filter expression to restrict the TrustConfigs returned. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. A list of TrustConfig field names used to specify the order of the returned
           * results. The default sorting order is ascending. To specify descending order for a
           * field, add a suffix `" desc"`.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. A list of TrustConfig field names used to specify the order of the returned results. The
         default sorting order is ascending. To specify descending order for a field, add a suffix `"
         desc"`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. A list of TrustConfig field names used to specify the order of the returned
           * results. The default sorting order is ascending. To specify descending order for a
           * field, add a suffix `" desc"`.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** Optional. Maximum number of TrustConfigs to return per call. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Maximum number of TrustConfigs to return per call.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Maximum number of TrustConfigs to return per call. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The value returned by the last `ListTrustConfigsResponse`. Indicates that
           * this is a continuation of a prior `ListTrustConfigs` call, and that the system should
           * return the next page of data.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The value returned by the last `ListTrustConfigsResponse`. Indicates that this is a
         continuation of a prior `ListTrustConfigs` call, and that the system should return the next page of
         data.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The value returned by the last `ListTrustConfigsResponse`. Indicates that
           * this is a continuation of a prior `ListTrustConfigs` call, and that the system should
           * return the next page of data.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates a TrustConfig.
         *
         * Create a request for the method "trustConfigs.patch".
         *
         * This request holds the parameters needed by the certificatemanager server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. A user-defined name of the trust config. TrustConfig names must be unique globally and
         *        match pattern `projects/locations/trustConfigs`.
         * @param content the {@link com.google.api.services.certificatemanager.v1.model.TrustConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.TrustConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CertificateManagerRequest<com.google.api.services.certificatemanager.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");

          /**
           * Updates a TrustConfig.
           *
           * Create a request for the method "trustConfigs.patch".
           *
           * This request holds the parameters needed by the the certificatemanager server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. A user-defined name of the trust config. TrustConfig names must be unique globally and
         *        match pattern `projects/locations/trustConfigs`.
           * @param content the {@link com.google.api.services.certificatemanager.v1.model.TrustConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.certificatemanager.v1.model.TrustConfig content) {
            super(CertificateManager.this, "PATCH", REST_PATH, content, com.google.api.services.certificatemanager.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. A user-defined name of the trust config. TrustConfig names must be unique
           * globally and match pattern `projects/locations/trustConfigs`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. A user-defined name of the trust config. TrustConfig names must be unique globally and
         match pattern `projects/locations/trustConfigs`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. A user-defined name of the trust config. TrustConfig names must be unique
           * globally and match pattern `projects/locations/trustConfigs`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/trustConfigs/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-
           * buffers/docs/reference/google.protobuf#fieldmask.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link CertificateManager}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link CertificateManager}. */
    @Override
    public CertificateManager build() {
      return new CertificateManager(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CertificateManagerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCertificateManagerRequestInitializer(
        CertificateManagerRequestInitializer certificatemanagerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(certificatemanagerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
