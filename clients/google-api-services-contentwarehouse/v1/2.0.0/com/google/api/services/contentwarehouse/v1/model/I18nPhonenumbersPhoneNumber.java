/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The PhoneNumber object that is used by all LibPhoneNumber API's to fully represent a phone
 * number.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class I18nPhonenumbersPhoneNumber extends com.google.api.client.json.GenericJson {

  /**
   * The country calling code for this number, as defined by the International Telecommunication
   * Union (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer countryCode;

  /**
   * The source from which the country_code is derived.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countryCodeSource;

  /**
   * Extension is not standardized in ITU recommendations, except for being defined as a series of
   * numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for
   * the possible use of a leading zero in the extension (organizations have complete freedom to do
   * so, as there is no standard defined). Other than digits, some other dialling characters such as
   * "," (indicating a wait) may be stored here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String extension;

  /**
   * In some countries, the national (significant) number starts with one or more "0"s without this
   * being a national prefix or trunk code of some kind. For example, the leading zero in the
   * national (significant) number of an Italian phone number indicates the number is a fixed-line
   * number. There have been plans to migrate fixed-line numbers to start with the digit two since
   * December 2000, but it has not happened yet. See http://en.wikipedia.org/wiki/%2B39 for more
   * details. These fields can be safely ignored (there is no need to set them) for most countries.
   * Some limited number of countries behave like Italy - for these cases, if the leading zero(s) of
   * a number would be retained even when dialling internationally, set this flag to true, and also
   * set the number of leading zeros. Clients who use the parsing or conversion functionality of the
   * i18n phone number libraries (go/phonenumbers) will have these fields set if necessary
   * automatically.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean italianLeadingZero;

  /**
   * The National (significant) Number, as defined in International Telecommunication Union (ITU)
   * Recommendation E.164, without any leading zero. The leading-zero is stored separately if
   * required, since this is an uint64 and hence cannot store such information. Do not use this
   * field directly: if you want the national significant number, call the
   * getNationalSignificantNumber method of PhoneNumberUtil. For countries which have the concept of
   * an "area code" or "national destination code", this is included in the National (significant)
   * Number. Although the ITU says the maximum length should be 15, we have found longer numbers in
   * some countries e.g. Germany. Note that the National (significant) Number does not contain the
   * National (trunk) prefix. Obviously, as a uint64, it will never contain any formatting (hyphens,
   * spaces, parentheses), nor any alphanumeric spellings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger nationalNumber;

  /**
   * Full description of this field in the comment for italian_leading_zero since this field will
   * only be set when italian_leading_zero is true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfLeadingZeros;

  /**
   * The carrier selection code that is preferred when calling this phone number domestically. This
   * also includes codes that need to be dialed in some countries when calling from landlines to
   * mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone
   * number itself when calling from a mobile phone to a domestic landline phone and vice versa.
   * Note this is the "preferred" code, which means other codes may work as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String preferredDomesticCarrierCode;

  /**
   * This field is used to store the raw input string containing phone numbers before it was
   * canonicalized by the library. For example, it could be used to store alphanumerical numbers
   * such as "1-800-GOOG-411".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawInput;

  /**
   * The country calling code for this number, as defined by the International Telecommunication
   * Union (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCountryCode() {
    return countryCode;
  }

  /**
   * The country calling code for this number, as defined by the International Telecommunication
   * Union (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
   * @param countryCode countryCode or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setCountryCode(java.lang.Integer countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The source from which the country_code is derived.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountryCodeSource() {
    return countryCodeSource;
  }

  /**
   * The source from which the country_code is derived.
   * @param countryCodeSource countryCodeSource or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setCountryCodeSource(java.lang.String countryCodeSource) {
    this.countryCodeSource = countryCodeSource;
    return this;
  }

  /**
   * Extension is not standardized in ITU recommendations, except for being defined as a series of
   * numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for
   * the possible use of a leading zero in the extension (organizations have complete freedom to do
   * so, as there is no standard defined). Other than digits, some other dialling characters such as
   * "," (indicating a wait) may be stored here.
   * @return value or {@code null} for none
   */
  public java.lang.String getExtension() {
    return extension;
  }

  /**
   * Extension is not standardized in ITU recommendations, except for being defined as a series of
   * numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for
   * the possible use of a leading zero in the extension (organizations have complete freedom to do
   * so, as there is no standard defined). Other than digits, some other dialling characters such as
   * "," (indicating a wait) may be stored here.
   * @param extension extension or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setExtension(java.lang.String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * In some countries, the national (significant) number starts with one or more "0"s without this
   * being a national prefix or trunk code of some kind. For example, the leading zero in the
   * national (significant) number of an Italian phone number indicates the number is a fixed-line
   * number. There have been plans to migrate fixed-line numbers to start with the digit two since
   * December 2000, but it has not happened yet. See http://en.wikipedia.org/wiki/%2B39 for more
   * details. These fields can be safely ignored (there is no need to set them) for most countries.
   * Some limited number of countries behave like Italy - for these cases, if the leading zero(s) of
   * a number would be retained even when dialling internationally, set this flag to true, and also
   * set the number of leading zeros. Clients who use the parsing or conversion functionality of the
   * i18n phone number libraries (go/phonenumbers) will have these fields set if necessary
   * automatically.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getItalianLeadingZero() {
    return italianLeadingZero;
  }

  /**
   * In some countries, the national (significant) number starts with one or more "0"s without this
   * being a national prefix or trunk code of some kind. For example, the leading zero in the
   * national (significant) number of an Italian phone number indicates the number is a fixed-line
   * number. There have been plans to migrate fixed-line numbers to start with the digit two since
   * December 2000, but it has not happened yet. See http://en.wikipedia.org/wiki/%2B39 for more
   * details. These fields can be safely ignored (there is no need to set them) for most countries.
   * Some limited number of countries behave like Italy - for these cases, if the leading zero(s) of
   * a number would be retained even when dialling internationally, set this flag to true, and also
   * set the number of leading zeros. Clients who use the parsing or conversion functionality of the
   * i18n phone number libraries (go/phonenumbers) will have these fields set if necessary
   * automatically.
   * @param italianLeadingZero italianLeadingZero or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setItalianLeadingZero(java.lang.Boolean italianLeadingZero) {
    this.italianLeadingZero = italianLeadingZero;
    return this;
  }

  /**
   * The National (significant) Number, as defined in International Telecommunication Union (ITU)
   * Recommendation E.164, without any leading zero. The leading-zero is stored separately if
   * required, since this is an uint64 and hence cannot store such information. Do not use this
   * field directly: if you want the national significant number, call the
   * getNationalSignificantNumber method of PhoneNumberUtil. For countries which have the concept of
   * an "area code" or "national destination code", this is included in the National (significant)
   * Number. Although the ITU says the maximum length should be 15, we have found longer numbers in
   * some countries e.g. Germany. Note that the National (significant) Number does not contain the
   * National (trunk) prefix. Obviously, as a uint64, it will never contain any formatting (hyphens,
   * spaces, parentheses), nor any alphanumeric spellings.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getNationalNumber() {
    return nationalNumber;
  }

  /**
   * The National (significant) Number, as defined in International Telecommunication Union (ITU)
   * Recommendation E.164, without any leading zero. The leading-zero is stored separately if
   * required, since this is an uint64 and hence cannot store such information. Do not use this
   * field directly: if you want the national significant number, call the
   * getNationalSignificantNumber method of PhoneNumberUtil. For countries which have the concept of
   * an "area code" or "national destination code", this is included in the National (significant)
   * Number. Although the ITU says the maximum length should be 15, we have found longer numbers in
   * some countries e.g. Germany. Note that the National (significant) Number does not contain the
   * National (trunk) prefix. Obviously, as a uint64, it will never contain any formatting (hyphens,
   * spaces, parentheses), nor any alphanumeric spellings.
   * @param nationalNumber nationalNumber or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setNationalNumber(java.math.BigInteger nationalNumber) {
    this.nationalNumber = nationalNumber;
    return this;
  }

  /**
   * Full description of this field in the comment for italian_leading_zero since this field will
   * only be set when italian_leading_zero is true.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfLeadingZeros() {
    return numberOfLeadingZeros;
  }

  /**
   * Full description of this field in the comment for italian_leading_zero since this field will
   * only be set when italian_leading_zero is true.
   * @param numberOfLeadingZeros numberOfLeadingZeros or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setNumberOfLeadingZeros(java.lang.Integer numberOfLeadingZeros) {
    this.numberOfLeadingZeros = numberOfLeadingZeros;
    return this;
  }

  /**
   * The carrier selection code that is preferred when calling this phone number domestically. This
   * also includes codes that need to be dialed in some countries when calling from landlines to
   * mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone
   * number itself when calling from a mobile phone to a domestic landline phone and vice versa.
   * Note this is the "preferred" code, which means other codes may work as well.
   * @return value or {@code null} for none
   */
  public java.lang.String getPreferredDomesticCarrierCode() {
    return preferredDomesticCarrierCode;
  }

  /**
   * The carrier selection code that is preferred when calling this phone number domestically. This
   * also includes codes that need to be dialed in some countries when calling from landlines to
   * mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone
   * number itself when calling from a mobile phone to a domestic landline phone and vice versa.
   * Note this is the "preferred" code, which means other codes may work as well.
   * @param preferredDomesticCarrierCode preferredDomesticCarrierCode or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setPreferredDomesticCarrierCode(java.lang.String preferredDomesticCarrierCode) {
    this.preferredDomesticCarrierCode = preferredDomesticCarrierCode;
    return this;
  }

  /**
   * This field is used to store the raw input string containing phone numbers before it was
   * canonicalized by the library. For example, it could be used to store alphanumerical numbers
   * such as "1-800-GOOG-411".
   * @return value or {@code null} for none
   */
  public java.lang.String getRawInput() {
    return rawInput;
  }

  /**
   * This field is used to store the raw input string containing phone numbers before it was
   * canonicalized by the library. For example, it could be used to store alphanumerical numbers
   * such as "1-800-GOOG-411".
   * @param rawInput rawInput or {@code null} for none
   */
  public I18nPhonenumbersPhoneNumber setRawInput(java.lang.String rawInput) {
    this.rawInput = rawInput;
    return this;
  }

  @Override
  public I18nPhonenumbersPhoneNumber set(String fieldName, Object value) {
    return (I18nPhonenumbersPhoneNumber) super.set(fieldName, value);
  }

  @Override
  public I18nPhonenumbersPhoneNumber clone() {
    return (I18nPhonenumbersPhoneNumber) super.clone();
  }

}
