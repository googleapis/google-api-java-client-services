/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.travelimpactmodel.v1.model;

/**
 * Scope 3 flight with emission estimates.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Travel Impact Model API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Scope3FlightEmissions extends com.google.api.client.json.GenericJson {

  /**
   * Required. Matches the flight identifiers in the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Scope3FlightSegment flight;

  /**
   * Optional. The source of the emissions data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Optional. Tank-to-wake flight emissions per passenger based on the requested info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long ttwEmissionsGramsPerPax;

  /**
   * Optional. Well-to-tank flight emissions per passenger based on the requested info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long wttEmissionsGramsPerPax;

  /**
   * Optional. Total flight emissions (sum of well-to-tank and tank-to-wake) per passenger based on
   * the requested info. This is the total emissions and unless you have specific reasons for using
   * TTW or WTT emissions, you should use this number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long wtwEmissionsGramsPerPax;

  /**
   * Required. Matches the flight identifiers in the request.
   * @return value or {@code null} for none
   */
  public Scope3FlightSegment getFlight() {
    return flight;
  }

  /**
   * Required. Matches the flight identifiers in the request.
   * @param flight flight or {@code null} for none
   */
  public Scope3FlightEmissions setFlight(Scope3FlightSegment flight) {
    this.flight = flight;
    return this;
  }

  /**
   * Optional. The source of the emissions data.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Optional. The source of the emissions data.
   * @param source source or {@code null} for none
   */
  public Scope3FlightEmissions setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * Optional. Tank-to-wake flight emissions per passenger based on the requested info.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTtwEmissionsGramsPerPax() {
    return ttwEmissionsGramsPerPax;
  }

  /**
   * Optional. Tank-to-wake flight emissions per passenger based on the requested info.
   * @param ttwEmissionsGramsPerPax ttwEmissionsGramsPerPax or {@code null} for none
   */
  public Scope3FlightEmissions setTtwEmissionsGramsPerPax(java.lang.Long ttwEmissionsGramsPerPax) {
    this.ttwEmissionsGramsPerPax = ttwEmissionsGramsPerPax;
    return this;
  }

  /**
   * Optional. Well-to-tank flight emissions per passenger based on the requested info.
   * @return value or {@code null} for none
   */
  public java.lang.Long getWttEmissionsGramsPerPax() {
    return wttEmissionsGramsPerPax;
  }

  /**
   * Optional. Well-to-tank flight emissions per passenger based on the requested info.
   * @param wttEmissionsGramsPerPax wttEmissionsGramsPerPax or {@code null} for none
   */
  public Scope3FlightEmissions setWttEmissionsGramsPerPax(java.lang.Long wttEmissionsGramsPerPax) {
    this.wttEmissionsGramsPerPax = wttEmissionsGramsPerPax;
    return this;
  }

  /**
   * Optional. Total flight emissions (sum of well-to-tank and tank-to-wake) per passenger based on
   * the requested info. This is the total emissions and unless you have specific reasons for using
   * TTW or WTT emissions, you should use this number.
   * @return value or {@code null} for none
   */
  public java.lang.Long getWtwEmissionsGramsPerPax() {
    return wtwEmissionsGramsPerPax;
  }

  /**
   * Optional. Total flight emissions (sum of well-to-tank and tank-to-wake) per passenger based on
   * the requested info. This is the total emissions and unless you have specific reasons for using
   * TTW or WTT emissions, you should use this number.
   * @param wtwEmissionsGramsPerPax wtwEmissionsGramsPerPax or {@code null} for none
   */
  public Scope3FlightEmissions setWtwEmissionsGramsPerPax(java.lang.Long wtwEmissionsGramsPerPax) {
    this.wtwEmissionsGramsPerPax = wtwEmissionsGramsPerPax;
    return this;
  }

  @Override
  public Scope3FlightEmissions set(String fieldName, Object value) {
    return (Scope3FlightEmissions) super.set(fieldName, value);
  }

  @Override
  public Scope3FlightEmissions clone() {
    return (Scope3FlightEmissions) super.clone();
  }

}
