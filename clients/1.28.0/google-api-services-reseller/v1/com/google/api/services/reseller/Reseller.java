/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.reseller;

/**
 * Service definition for Reseller (v1).
 *
 * <p>
 * Creates and manages your customers and their subscriptions.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/google-apps/reseller/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ResellerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Reseller extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Enterprise Apps Reseller API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "apps/reseller/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/reseller/v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Reseller(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Reseller(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Customers collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reseller reseller = new Reseller(...);}
   *   {@code Reseller.Customers.List request = reseller.customers().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Customers customers() {
    return new Customers();
  }

  /**
   * The "customers" collection of methods.
   */
  public class Customers {

    /**
     * Get a customer account.
     *
     * Create a request for the method "customers.get".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @return the request
     */
    public Get get(java.lang.String customerId) throws java.io.IOException {
      Get result = new Get(customerId);
      initialize(result);
      return result;
    }

    public class Get extends ResellerRequest<com.google.api.services.reseller.model.Customer> {

      private static final String REST_PATH = "customers/{customerId}";

      /**
       * Get a customer account.
       *
       * Create a request for the method "customers.get".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @since 1.13
       */
      protected Get(java.lang.String customerId) {
        super(Reseller.this, "GET", REST_PATH, null, com.google.api.services.reseller.model.Customer.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Get setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Order a new customer's account.
     *
     * Create a request for the method "customers.insert".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.reseller.model.Customer}
     * @return the request
     */
    public Insert insert(com.google.api.services.reseller.model.Customer content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends ResellerRequest<com.google.api.services.reseller.model.Customer> {

      private static final String REST_PATH = "customers";

      /**
       * Order a new customer's account.
       *
       * Create a request for the method "customers.insert".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.reseller.model.Customer}
       * @since 1.13
       */
      protected Insert(com.google.api.services.reseller.model.Customer content) {
        super(Reseller.this, "POST", REST_PATH, content, com.google.api.services.reseller.model.Customer.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerAuthToken;

      /** The customerAuthToken query string is required when creating a resold account that transfers a
     direct customer's subscription or transfers another reseller customer's subscription to your
     reseller management. This is a hexadecimal authentication token needed to complete the subscription
     transfer. For more information, see the administrator help center.
       */
      public java.lang.String getCustomerAuthToken() {
        return customerAuthToken;
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      public Insert setCustomerAuthToken(java.lang.String customerAuthToken) {
        this.customerAuthToken = customerAuthToken;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Update a customer account's settings. This method supports patch semantics.
     *
     * Create a request for the method "customers.patch".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param content the {@link com.google.api.services.reseller.model.Customer}
     * @return the request
     */
    public Patch patch(java.lang.String customerId, com.google.api.services.reseller.model.Customer content) throws java.io.IOException {
      Patch result = new Patch(customerId, content);
      initialize(result);
      return result;
    }

    public class Patch extends ResellerRequest<com.google.api.services.reseller.model.Customer> {

      private static final String REST_PATH = "customers/{customerId}";

      /**
       * Update a customer account's settings. This method supports patch semantics.
       *
       * Create a request for the method "customers.patch".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param content the {@link com.google.api.services.reseller.model.Customer}
       * @since 1.13
       */
      protected Patch(java.lang.String customerId, com.google.api.services.reseller.model.Customer content) {
        super(Reseller.this, "PATCH", REST_PATH, content, com.google.api.services.reseller.model.Customer.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Patch setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Update a customer account's settings.
     *
     * Create a request for the method "customers.update".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param content the {@link com.google.api.services.reseller.model.Customer}
     * @return the request
     */
    public Update update(java.lang.String customerId, com.google.api.services.reseller.model.Customer content) throws java.io.IOException {
      Update result = new Update(customerId, content);
      initialize(result);
      return result;
    }

    public class Update extends ResellerRequest<com.google.api.services.reseller.model.Customer> {

      private static final String REST_PATH = "customers/{customerId}";

      /**
       * Update a customer account's settings.
       *
       * Create a request for the method "customers.update".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param content the {@link com.google.api.services.reseller.model.Customer}
       * @since 1.13
       */
      protected Update(java.lang.String customerId, com.google.api.services.reseller.model.Customer content) {
        super(Reseller.this, "PUT", REST_PATH, content, com.google.api.services.reseller.model.Customer.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Update setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Resellernotify collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reseller reseller = new Reseller(...);}
   *   {@code Reseller.Resellernotify.List request = reseller.resellernotify().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Resellernotify resellernotify() {
    return new Resellernotify();
  }

  /**
   * The "resellernotify" collection of methods.
   */
  public class Resellernotify {

    /**
     * Returns all the details of the watch corresponding to the reseller.
     *
     * Create a request for the method "resellernotify.getwatchdetails".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Getwatchdetails#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Getwatchdetails getwatchdetails() throws java.io.IOException {
      Getwatchdetails result = new Getwatchdetails();
      initialize(result);
      return result;
    }

    public class Getwatchdetails extends ResellerRequest<com.google.api.services.reseller.model.ResellernotifyGetwatchdetailsResponse> {

      private static final String REST_PATH = "resellernotify/getwatchdetails";

      /**
       * Returns all the details of the watch corresponding to the reseller.
       *
       * Create a request for the method "resellernotify.getwatchdetails".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Getwatchdetails#execute()} method to invoke the remote
       * operation. <p> {@link Getwatchdetails#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected Getwatchdetails() {
        super(Reseller.this, "GET", REST_PATH, null, com.google.api.services.reseller.model.ResellernotifyGetwatchdetailsResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getwatchdetails setAlt(java.lang.String alt) {
        return (Getwatchdetails) super.setAlt(alt);
      }

      @Override
      public Getwatchdetails setFields(java.lang.String fields) {
        return (Getwatchdetails) super.setFields(fields);
      }

      @Override
      public Getwatchdetails setKey(java.lang.String key) {
        return (Getwatchdetails) super.setKey(key);
      }

      @Override
      public Getwatchdetails setOauthToken(java.lang.String oauthToken) {
        return (Getwatchdetails) super.setOauthToken(oauthToken);
      }

      @Override
      public Getwatchdetails setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getwatchdetails) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getwatchdetails setQuotaUser(java.lang.String quotaUser) {
        return (Getwatchdetails) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getwatchdetails setUserIp(java.lang.String userIp) {
        return (Getwatchdetails) super.setUserIp(userIp);
      }

      @Override
      public Getwatchdetails set(String parameterName, Object value) {
        return (Getwatchdetails) super.set(parameterName, value);
      }
    }
    /**
     * Registers a Reseller for receiving notifications.
     *
     * Create a request for the method "resellernotify.register".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Register#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Register register() throws java.io.IOException {
      Register result = new Register();
      initialize(result);
      return result;
    }

    public class Register extends ResellerRequest<com.google.api.services.reseller.model.ResellernotifyResource> {

      private static final String REST_PATH = "resellernotify/register";

      /**
       * Registers a Reseller for receiving notifications.
       *
       * Create a request for the method "resellernotify.register".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Register#execute()} method to invoke the remote operation.
       * <p> {@link
       * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Register() {
        super(Reseller.this, "POST", REST_PATH, null, com.google.api.services.reseller.model.ResellernotifyResource.class);
      }

      @Override
      public Register setAlt(java.lang.String alt) {
        return (Register) super.setAlt(alt);
      }

      @Override
      public Register setFields(java.lang.String fields) {
        return (Register) super.setFields(fields);
      }

      @Override
      public Register setKey(java.lang.String key) {
        return (Register) super.setKey(key);
      }

      @Override
      public Register setOauthToken(java.lang.String oauthToken) {
        return (Register) super.setOauthToken(oauthToken);
      }

      @Override
      public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Register) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Register setQuotaUser(java.lang.String quotaUser) {
        return (Register) super.setQuotaUser(quotaUser);
      }

      @Override
      public Register setUserIp(java.lang.String userIp) {
        return (Register) super.setUserIp(userIp);
      }

      /** The service account which will own the created Cloud-PubSub topic. */
      @com.google.api.client.util.Key
      private java.lang.String serviceAccountEmailAddress;

      /** The service account which will own the created Cloud-PubSub topic.
       */
      public java.lang.String getServiceAccountEmailAddress() {
        return serviceAccountEmailAddress;
      }

      /** The service account which will own the created Cloud-PubSub topic. */
      public Register setServiceAccountEmailAddress(java.lang.String serviceAccountEmailAddress) {
        this.serviceAccountEmailAddress = serviceAccountEmailAddress;
        return this;
      }

      @Override
      public Register set(String parameterName, Object value) {
        return (Register) super.set(parameterName, value);
      }
    }
    /**
     * Unregisters a Reseller for receiving notifications.
     *
     * Create a request for the method "resellernotify.unregister".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Unregister#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Unregister unregister() throws java.io.IOException {
      Unregister result = new Unregister();
      initialize(result);
      return result;
    }

    public class Unregister extends ResellerRequest<com.google.api.services.reseller.model.ResellernotifyResource> {

      private static final String REST_PATH = "resellernotify/unregister";

      /**
       * Unregisters a Reseller for receiving notifications.
       *
       * Create a request for the method "resellernotify.unregister".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Unregister#execute()} method to invoke the remote
       * operation. <p> {@link
       * Unregister#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Unregister() {
        super(Reseller.this, "POST", REST_PATH, null, com.google.api.services.reseller.model.ResellernotifyResource.class);
      }

      @Override
      public Unregister setAlt(java.lang.String alt) {
        return (Unregister) super.setAlt(alt);
      }

      @Override
      public Unregister setFields(java.lang.String fields) {
        return (Unregister) super.setFields(fields);
      }

      @Override
      public Unregister setKey(java.lang.String key) {
        return (Unregister) super.setKey(key);
      }

      @Override
      public Unregister setOauthToken(java.lang.String oauthToken) {
        return (Unregister) super.setOauthToken(oauthToken);
      }

      @Override
      public Unregister setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Unregister) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Unregister setQuotaUser(java.lang.String quotaUser) {
        return (Unregister) super.setQuotaUser(quotaUser);
      }

      @Override
      public Unregister setUserIp(java.lang.String userIp) {
        return (Unregister) super.setUserIp(userIp);
      }

      /** The service account which owns the Cloud-PubSub topic. */
      @com.google.api.client.util.Key
      private java.lang.String serviceAccountEmailAddress;

      /** The service account which owns the Cloud-PubSub topic.
       */
      public java.lang.String getServiceAccountEmailAddress() {
        return serviceAccountEmailAddress;
      }

      /** The service account which owns the Cloud-PubSub topic. */
      public Unregister setServiceAccountEmailAddress(java.lang.String serviceAccountEmailAddress) {
        this.serviceAccountEmailAddress = serviceAccountEmailAddress;
        return this;
      }

      @Override
      public Unregister set(String parameterName, Object value) {
        return (Unregister) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Subscriptions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reseller reseller = new Reseller(...);}
   *   {@code Reseller.Subscriptions.List request = reseller.subscriptions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Subscriptions subscriptions() {
    return new Subscriptions();
  }

  /**
   * The "subscriptions" collection of methods.
   */
  public class Subscriptions {

    /**
     * Activates a subscription previously suspended by the reseller
     *
     * Create a request for the method "subscriptions.activate".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Activate#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @return the request
     */
    public Activate activate(java.lang.String customerId, java.lang.String subscriptionId) throws java.io.IOException {
      Activate result = new Activate(customerId, subscriptionId);
      initialize(result);
      return result;
    }

    public class Activate extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/activate";

      /**
       * Activates a subscription previously suspended by the reseller
       *
       * Create a request for the method "subscriptions.activate".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Activate#execute()} method to invoke the remote operation.
       * <p> {@link
       * Activate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @since 1.13
       */
      protected Activate(java.lang.String customerId, java.lang.String subscriptionId) {
        super(Reseller.this, "POST", REST_PATH, null, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public Activate setAlt(java.lang.String alt) {
        return (Activate) super.setAlt(alt);
      }

      @Override
      public Activate setFields(java.lang.String fields) {
        return (Activate) super.setFields(fields);
      }

      @Override
      public Activate setKey(java.lang.String key) {
        return (Activate) super.setKey(key);
      }

      @Override
      public Activate setOauthToken(java.lang.String oauthToken) {
        return (Activate) super.setOauthToken(oauthToken);
      }

      @Override
      public Activate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Activate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Activate setQuotaUser(java.lang.String quotaUser) {
        return (Activate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Activate setUserIp(java.lang.String userIp) {
        return (Activate) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Activate setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public Activate setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public Activate set(String parameterName, Object value) {
        return (Activate) super.set(parameterName, value);
      }
    }
    /**
     * Update a subscription plan. Use this method to update a plan for a 30-day trial or a flexible
     * plan subscription to an annual commitment plan with monthly or yearly payments.
     *
     * Create a request for the method "subscriptions.changePlan".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link ChangePlan#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @param content the {@link com.google.api.services.reseller.model.ChangePlanRequest}
     * @return the request
     */
    public ChangePlan changePlan(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.ChangePlanRequest content) throws java.io.IOException {
      ChangePlan result = new ChangePlan(customerId, subscriptionId, content);
      initialize(result);
      return result;
    }

    public class ChangePlan extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/changePlan";

      /**
       * Update a subscription plan. Use this method to update a plan for a 30-day trial or a flexible
       * plan subscription to an annual commitment plan with monthly or yearly payments.
       *
       * Create a request for the method "subscriptions.changePlan".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link ChangePlan#execute()} method to invoke the remote
       * operation. <p> {@link
       * ChangePlan#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @param content the {@link com.google.api.services.reseller.model.ChangePlanRequest}
       * @since 1.13
       */
      protected ChangePlan(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.ChangePlanRequest content) {
        super(Reseller.this, "POST", REST_PATH, content, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public ChangePlan setAlt(java.lang.String alt) {
        return (ChangePlan) super.setAlt(alt);
      }

      @Override
      public ChangePlan setFields(java.lang.String fields) {
        return (ChangePlan) super.setFields(fields);
      }

      @Override
      public ChangePlan setKey(java.lang.String key) {
        return (ChangePlan) super.setKey(key);
      }

      @Override
      public ChangePlan setOauthToken(java.lang.String oauthToken) {
        return (ChangePlan) super.setOauthToken(oauthToken);
      }

      @Override
      public ChangePlan setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ChangePlan) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ChangePlan setQuotaUser(java.lang.String quotaUser) {
        return (ChangePlan) super.setQuotaUser(quotaUser);
      }

      @Override
      public ChangePlan setUserIp(java.lang.String userIp) {
        return (ChangePlan) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public ChangePlan setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public ChangePlan setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public ChangePlan set(String parameterName, Object value) {
        return (ChangePlan) super.set(parameterName, value);
      }
    }
    /**
     * Update a user license's renewal settings. This is applicable for accounts with annual commitment
     * plans only.
     *
     * Create a request for the method "subscriptions.changeRenewalSettings".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link ChangeRenewalSettings#execute()} method to invoke the remote
     * operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @param content the {@link com.google.api.services.reseller.model.RenewalSettings}
     * @return the request
     */
    public ChangeRenewalSettings changeRenewalSettings(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.RenewalSettings content) throws java.io.IOException {
      ChangeRenewalSettings result = new ChangeRenewalSettings(customerId, subscriptionId, content);
      initialize(result);
      return result;
    }

    public class ChangeRenewalSettings extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/changeRenewalSettings";

      /**
       * Update a user license's renewal settings. This is applicable for accounts with annual
       * commitment plans only.
       *
       * Create a request for the method "subscriptions.changeRenewalSettings".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link ChangeRenewalSettings#execute()} method to invoke the
       * remote operation. <p> {@link ChangeRenewalSettings#initialize(com.google.api.client.googleapis.
       * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @param content the {@link com.google.api.services.reseller.model.RenewalSettings}
       * @since 1.13
       */
      protected ChangeRenewalSettings(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.RenewalSettings content) {
        super(Reseller.this, "POST", REST_PATH, content, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public ChangeRenewalSettings setAlt(java.lang.String alt) {
        return (ChangeRenewalSettings) super.setAlt(alt);
      }

      @Override
      public ChangeRenewalSettings setFields(java.lang.String fields) {
        return (ChangeRenewalSettings) super.setFields(fields);
      }

      @Override
      public ChangeRenewalSettings setKey(java.lang.String key) {
        return (ChangeRenewalSettings) super.setKey(key);
      }

      @Override
      public ChangeRenewalSettings setOauthToken(java.lang.String oauthToken) {
        return (ChangeRenewalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public ChangeRenewalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ChangeRenewalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ChangeRenewalSettings setQuotaUser(java.lang.String quotaUser) {
        return (ChangeRenewalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public ChangeRenewalSettings setUserIp(java.lang.String userIp) {
        return (ChangeRenewalSettings) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public ChangeRenewalSettings setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public ChangeRenewalSettings setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public ChangeRenewalSettings set(String parameterName, Object value) {
        return (ChangeRenewalSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update a subscription's user license settings.
     *
     * Create a request for the method "subscriptions.changeSeats".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link ChangeSeats#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @param content the {@link com.google.api.services.reseller.model.Seats}
     * @return the request
     */
    public ChangeSeats changeSeats(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.Seats content) throws java.io.IOException {
      ChangeSeats result = new ChangeSeats(customerId, subscriptionId, content);
      initialize(result);
      return result;
    }

    public class ChangeSeats extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/changeSeats";

      /**
       * Update a subscription's user license settings.
       *
       * Create a request for the method "subscriptions.changeSeats".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link ChangeSeats#execute()} method to invoke the remote
       * operation. <p> {@link
       * ChangeSeats#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @param content the {@link com.google.api.services.reseller.model.Seats}
       * @since 1.13
       */
      protected ChangeSeats(java.lang.String customerId, java.lang.String subscriptionId, com.google.api.services.reseller.model.Seats content) {
        super(Reseller.this, "POST", REST_PATH, content, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public ChangeSeats setAlt(java.lang.String alt) {
        return (ChangeSeats) super.setAlt(alt);
      }

      @Override
      public ChangeSeats setFields(java.lang.String fields) {
        return (ChangeSeats) super.setFields(fields);
      }

      @Override
      public ChangeSeats setKey(java.lang.String key) {
        return (ChangeSeats) super.setKey(key);
      }

      @Override
      public ChangeSeats setOauthToken(java.lang.String oauthToken) {
        return (ChangeSeats) super.setOauthToken(oauthToken);
      }

      @Override
      public ChangeSeats setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ChangeSeats) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ChangeSeats setQuotaUser(java.lang.String quotaUser) {
        return (ChangeSeats) super.setQuotaUser(quotaUser);
      }

      @Override
      public ChangeSeats setUserIp(java.lang.String userIp) {
        return (ChangeSeats) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public ChangeSeats setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public ChangeSeats setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public ChangeSeats set(String parameterName, Object value) {
        return (ChangeSeats) super.set(parameterName, value);
      }
    }
    /**
     * Cancel, suspend or transfer a subscription to direct.
     *
     * Create a request for the method "subscriptions.delete".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @param deletionType The deletionType query string enables the cancellation, downgrade, or suspension of a subscription.
     * @return the request
     */
    public Delete delete(java.lang.String customerId, java.lang.String subscriptionId, java.lang.String deletionType) throws java.io.IOException {
      Delete result = new Delete(customerId, subscriptionId, deletionType);
      initialize(result);
      return result;
    }

    public class Delete extends ResellerRequest<Void> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}";

      /**
       * Cancel, suspend or transfer a subscription to direct.
       *
       * Create a request for the method "subscriptions.delete".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @param deletionType The deletionType query string enables the cancellation, downgrade, or suspension of a subscription.
       * @since 1.13
       */
      protected Delete(java.lang.String customerId, java.lang.String subscriptionId, java.lang.String deletionType) {
        super(Reseller.this, "DELETE", REST_PATH, null, Void.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
        this.deletionType = com.google.api.client.util.Preconditions.checkNotNull(deletionType, "Required parameter deletionType must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Delete setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public Delete setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      /**
       * The deletionType query string enables the cancellation, downgrade, or suspension of a
       * subscription.
       */
      @com.google.api.client.util.Key
      private java.lang.String deletionType;

      /** The deletionType query string enables the cancellation, downgrade, or suspension of a subscription.
       */
      public java.lang.String getDeletionType() {
        return deletionType;
      }

      /**
       * The deletionType query string enables the cancellation, downgrade, or suspension of a
       * subscription.
       */
      public Delete setDeletionType(java.lang.String deletionType) {
        this.deletionType = deletionType;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Get a specific subscription.
     *
     * Create a request for the method "subscriptions.get".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @return the request
     */
    public Get get(java.lang.String customerId, java.lang.String subscriptionId) throws java.io.IOException {
      Get result = new Get(customerId, subscriptionId);
      initialize(result);
      return result;
    }

    public class Get extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}";

      /**
       * Get a specific subscription.
       *
       * Create a request for the method "subscriptions.get".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @since 1.13
       */
      protected Get(java.lang.String customerId, java.lang.String subscriptionId) {
        super(Reseller.this, "GET", REST_PATH, null, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Get setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public Get setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create or transfer a subscription.
     *
     * Create a request for the method "subscriptions.insert".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param content the {@link com.google.api.services.reseller.model.Subscription}
     * @return the request
     */
    public Insert insert(java.lang.String customerId, com.google.api.services.reseller.model.Subscription content) throws java.io.IOException {
      Insert result = new Insert(customerId, content);
      initialize(result);
      return result;
    }

    public class Insert extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions";

      /**
       * Create or transfer a subscription.
       *
       * Create a request for the method "subscriptions.insert".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param content the {@link com.google.api.services.reseller.model.Subscription}
       * @since 1.13
       */
      protected Insert(java.lang.String customerId, com.google.api.services.reseller.model.Subscription content) {
        super(Reseller.this, "POST", REST_PATH, content, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Insert setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerAuthToken;

      /** The customerAuthToken query string is required when creating a resold account that transfers a
     direct customer's subscription or transfers another reseller customer's subscription to your
     reseller management. This is a hexadecimal authentication token needed to complete the subscription
     transfer. For more information, see the administrator help center.
       */
      public java.lang.String getCustomerAuthToken() {
        return customerAuthToken;
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      public Insert setCustomerAuthToken(java.lang.String customerAuthToken) {
        this.customerAuthToken = customerAuthToken;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List of subscriptions managed by the reseller. The list can be all subscriptions, all of a
     * customer's subscriptions, or all of a customer's transferable subscriptions.
     *
     * Create a request for the method "subscriptions.list".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends ResellerRequest<com.google.api.services.reseller.model.Subscriptions> {

      private static final String REST_PATH = "subscriptions";

      /**
       * List of subscriptions managed by the reseller. The list can be all subscriptions, all of a
       * customer's subscriptions, or all of a customer's transferable subscriptions.
       *
       * Create a request for the method "subscriptions.list".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Reseller.this, "GET", REST_PATH, null, com.google.api.services.reseller.model.Subscriptions.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerAuthToken;

      /** The customerAuthToken query string is required when creating a resold account that transfers a
     direct customer's subscription or transfers another reseller customer's subscription to your
     reseller management. This is a hexadecimal authentication token needed to complete the subscription
     transfer. For more information, see the administrator help center.
       */
      public java.lang.String getCustomerAuthToken() {
        return customerAuthToken;
      }

      /**
       * The customerAuthToken query string is required when creating a resold account that
       * transfers a direct customer's subscription or transfers another reseller customer's
       * subscription to your reseller management. This is a hexadecimal authentication token needed
       * to complete the subscription transfer. For more information, see the administrator help
       * center.
       */
      public List setCustomerAuthToken(java.lang.String customerAuthToken) {
        this.customerAuthToken = customerAuthToken;
        return this;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public List setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * When retrieving all of your subscriptions and filtering for specific customers, you can
       * enter a prefix for a customer name. Using an example customer group that includes exam.com,
       * example20.com and example.com: - exa -- Returns all customer names that start with 'exa'
       * which could include exam.com, example20.com, and example.com. A name prefix is similar to
       * using a regular expression's asterisk, exa*. - example -- Returns example20.com and
       * example.com.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerNamePrefix;

      /** When retrieving all of your subscriptions and filtering for specific customers, you can enter a
     prefix for a customer name. Using an example customer group that includes exam.com, example20.com
     and example.com: - exa -- Returns all customer names that start with 'exa' which could include
     exam.com, example20.com, and example.com. A name prefix is similar to using a regular expression's
     asterisk, exa*. - example -- Returns example20.com and example.com.
       */
      public java.lang.String getCustomerNamePrefix() {
        return customerNamePrefix;
      }

      /**
       * When retrieving all of your subscriptions and filtering for specific customers, you can
       * enter a prefix for a customer name. Using an example customer group that includes exam.com,
       * example20.com and example.com: - exa -- Returns all customer names that start with 'exa'
       * which could include exam.com, example20.com, and example.com. A name prefix is similar to
       * using a regular expression's asterisk, exa*. - example -- Returns example20.com and
       * example.com.
       */
      public List setCustomerNamePrefix(java.lang.String customerNamePrefix) {
        this.customerNamePrefix = customerNamePrefix;
        return this;
      }

      /**
       * When retrieving a large list, the maxResults is the maximum number of results per page. The
       * nextPageToken value takes you to the next page. The default is 20.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** When retrieving a large list, the maxResults is the maximum number of results per page. The
     nextPageToken value takes you to the next page. The default is 20.

     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * When retrieving a large list, the maxResults is the maximum number of results per page. The
       * nextPageToken value takes you to the next page. The default is 20.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Token to specify next page in the list */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page in the list
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page in the list */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Immediately move a 30-day free trial subscription to a paid service subscription.
     *
     * Create a request for the method "subscriptions.startPaidService".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link StartPaidService#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @return the request
     */
    public StartPaidService startPaidService(java.lang.String customerId, java.lang.String subscriptionId) throws java.io.IOException {
      StartPaidService result = new StartPaidService(customerId, subscriptionId);
      initialize(result);
      return result;
    }

    public class StartPaidService extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/startPaidService";

      /**
       * Immediately move a 30-day free trial subscription to a paid service subscription.
       *
       * Create a request for the method "subscriptions.startPaidService".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link StartPaidService#execute()} method to invoke the remote
       * operation. <p> {@link StartPaidService#initialize(com.google.api.client.googleapis.services.Abs
       * tractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @since 1.13
       */
      protected StartPaidService(java.lang.String customerId, java.lang.String subscriptionId) {
        super(Reseller.this, "POST", REST_PATH, null, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public StartPaidService setAlt(java.lang.String alt) {
        return (StartPaidService) super.setAlt(alt);
      }

      @Override
      public StartPaidService setFields(java.lang.String fields) {
        return (StartPaidService) super.setFields(fields);
      }

      @Override
      public StartPaidService setKey(java.lang.String key) {
        return (StartPaidService) super.setKey(key);
      }

      @Override
      public StartPaidService setOauthToken(java.lang.String oauthToken) {
        return (StartPaidService) super.setOauthToken(oauthToken);
      }

      @Override
      public StartPaidService setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (StartPaidService) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public StartPaidService setQuotaUser(java.lang.String quotaUser) {
        return (StartPaidService) super.setQuotaUser(quotaUser);
      }

      @Override
      public StartPaidService setUserIp(java.lang.String userIp) {
        return (StartPaidService) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public StartPaidService setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public StartPaidService setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public StartPaidService set(String parameterName, Object value) {
        return (StartPaidService) super.set(parameterName, value);
      }
    }
    /**
     * Suspends an active subscription.
     *
     * Create a request for the method "subscriptions.suspend".
     *
     * This request holds the parameters needed by the reseller server.  After setting any optional
     * parameters, call the {@link Suspend#execute()} method to invoke the remote operation.
     *
     * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
     * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
     * @return the request
     */
    public Suspend suspend(java.lang.String customerId, java.lang.String subscriptionId) throws java.io.IOException {
      Suspend result = new Suspend(customerId, subscriptionId);
      initialize(result);
      return result;
    }

    public class Suspend extends ResellerRequest<com.google.api.services.reseller.model.Subscription> {

      private static final String REST_PATH = "customers/{customerId}/subscriptions/{subscriptionId}/suspend";

      /**
       * Suspends an active subscription.
       *
       * Create a request for the method "subscriptions.suspend".
       *
       * This request holds the parameters needed by the the reseller server.  After setting any
       * optional parameters, call the {@link Suspend#execute()} method to invoke the remote operation.
       * <p> {@link
       * Suspend#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param customerId Either the customer's primary domain name or the customer's unique identifier. If using the domain
     *        name, we do not recommend using a customerId as a key for persistent data. If the domain
     *        name for a customerId is changed, the Google system automatically updates.
       * @param subscriptionId This is a required property. The subscriptionId is the subscription identifier and is unique for
     *        each customer. Since a subscriptionId changes when a subscription is updated, we recommend
     *        to not use this ID as a key for persistent data. And the subscriptionId can be found using
     *        the retrieve all reseller subscriptions method.
       * @since 1.13
       */
      protected Suspend(java.lang.String customerId, java.lang.String subscriptionId) {
        super(Reseller.this, "POST", REST_PATH, null, com.google.api.services.reseller.model.Subscription.class);
        this.customerId = com.google.api.client.util.Preconditions.checkNotNull(customerId, "Required parameter customerId must be specified.");
        this.subscriptionId = com.google.api.client.util.Preconditions.checkNotNull(subscriptionId, "Required parameter subscriptionId must be specified.");
      }

      @Override
      public Suspend setAlt(java.lang.String alt) {
        return (Suspend) super.setAlt(alt);
      }

      @Override
      public Suspend setFields(java.lang.String fields) {
        return (Suspend) super.setFields(fields);
      }

      @Override
      public Suspend setKey(java.lang.String key) {
        return (Suspend) super.setKey(key);
      }

      @Override
      public Suspend setOauthToken(java.lang.String oauthToken) {
        return (Suspend) super.setOauthToken(oauthToken);
      }

      @Override
      public Suspend setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Suspend) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Suspend setQuotaUser(java.lang.String quotaUser) {
        return (Suspend) super.setQuotaUser(quotaUser);
      }

      @Override
      public Suspend setUserIp(java.lang.String userIp) {
        return (Suspend) super.setUserIp(userIp);
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Either the customer's primary domain name or the customer's unique identifier. If using the domain
     name, we do not recommend using a customerId as a key for persistent data. If the domain name for a
     customerId is changed, the Google system automatically updates.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /**
       * Either the customer's primary domain name or the customer's unique identifier. If using the
       * domain name, we do not recommend using a customerId as a key for persistent data. If the
       * domain name for a customerId is changed, the Google system automatically updates.
       */
      public Suspend setCustomerId(java.lang.String customerId) {
        this.customerId = customerId;
        return this;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      @com.google.api.client.util.Key
      private java.lang.String subscriptionId;

      /** This is a required property. The subscriptionId is the subscription identifier and is unique for
     each customer. Since a subscriptionId changes when a subscription is updated, we recommend to not
     use this ID as a key for persistent data. And the subscriptionId can be found using the retrieve
     all reseller subscriptions method.
       */
      public java.lang.String getSubscriptionId() {
        return subscriptionId;
      }

      /**
       * This is a required property. The subscriptionId is the subscription identifier and is
       * unique for each customer. Since a subscriptionId changes when a subscription is updated, we
       * recommend to not use this ID as a key for persistent data. And the subscriptionId can be
       * found using the retrieve all reseller subscriptions method.
       */
      public Suspend setSubscriptionId(java.lang.String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
      }

      @Override
      public Suspend set(String parameterName, Object value) {
        return (Suspend) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Reseller}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Reseller}. */
    @Override
    public Reseller build() {
      return new Reseller(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ResellerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setResellerRequestInitializer(
        ResellerRequestInitializer resellerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(resellerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
