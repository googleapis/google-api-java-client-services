/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1.model;

/**
 * Request message for Import methods.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1ImportDocumentsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Whether to automatically generate IDs for the documents if absent. If set to `true`,
   * Document.ids are automatically generated based on the hash of the payload, where IDs may not be
   * consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended
   * to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified
   * using id_field, otherwise, documents without IDs fail to be imported. Supported data sources: *
   * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT
   * error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom` or `csv`.
   * Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoGenerateIds;

  /**
   * BigQuery input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1BigQuerySource bigquerySource;

  /**
   * Cloud Bigtable input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1BigtableSource bigtableSource;

  /**
   * Cloud SQL input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1CloudSqlSource cloudSqlSource;

  /**
   * The desired location of errors incurred during the Import.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1ImportErrorConfig errorConfig;

  /**
   * FhirStore input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1FhirStoreSource fhirStoreSource;

  /**
   * Firestore input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1FirestoreSource firestoreSource;

  /**
   * Cloud Storage location for the input content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1GcsSource gcsSource;

  /**
   * The field indicates the ID field or column to be used as unique IDs of the documents. For
   * GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{"my_id":
   * "some_uuid"}`. For others, it may be the column name of the table where the unique ids are
   * stored. The values of the JSON field or the table column are used as the Document.ids. The JSON
   * field or the table column must be of string type, and the values must be set as valid strings
   * conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise,
   * documents without valid IDs fail to be imported. Only set this field when auto_generate_ids is
   * unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a
   * default value `_id` is used when importing from the allowed data sources. Supported data
   * sources: * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an
   * INVALID_ARGUMENT error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom`
   * or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String idField;

  /**
   * The Inline source for the input content for documents.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1ImportDocumentsRequestInlineSource inlineSource;

  /**
   * The mode of reconciliation between existing documents and the documents to be imported.
   * Defaults to ReconciliationMode.INCREMENTAL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reconciliationMode;

  /**
   * Spanner input source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1SpannerSource spannerSource;

  /**
   * Indicates which fields in the provided imported documents to update. If not set, the default is
   * to update all fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateMask;

  /**
   * Whether to automatically generate IDs for the documents if absent. If set to `true`,
   * Document.ids are automatically generated based on the hash of the payload, where IDs may not be
   * consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended
   * to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified
   * using id_field, otherwise, documents without IDs fail to be imported. Supported data sources: *
   * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT
   * error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom` or `csv`.
   * Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoGenerateIds() {
    return autoGenerateIds;
  }

  /**
   * Whether to automatically generate IDs for the documents if absent. If set to `true`,
   * Document.ids are automatically generated based on the hash of the payload, where IDs may not be
   * consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended
   * to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified
   * using id_field, otherwise, documents without IDs fail to be imported. Supported data sources: *
   * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT
   * error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom` or `csv`.
   * Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * @param autoGenerateIds autoGenerateIds or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setAutoGenerateIds(java.lang.Boolean autoGenerateIds) {
    this.autoGenerateIds = autoGenerateIds;
    return this;
  }

  /**
   * BigQuery input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1BigQuerySource getBigquerySource() {
    return bigquerySource;
  }

  /**
   * BigQuery input source.
   * @param bigquerySource bigquerySource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setBigquerySource(GoogleCloudDiscoveryengineV1BigQuerySource bigquerySource) {
    this.bigquerySource = bigquerySource;
    return this;
  }

  /**
   * Cloud Bigtable input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1BigtableSource getBigtableSource() {
    return bigtableSource;
  }

  /**
   * Cloud Bigtable input source.
   * @param bigtableSource bigtableSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setBigtableSource(GoogleCloudDiscoveryengineV1BigtableSource bigtableSource) {
    this.bigtableSource = bigtableSource;
    return this;
  }

  /**
   * Cloud SQL input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1CloudSqlSource getCloudSqlSource() {
    return cloudSqlSource;
  }

  /**
   * Cloud SQL input source.
   * @param cloudSqlSource cloudSqlSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setCloudSqlSource(GoogleCloudDiscoveryengineV1CloudSqlSource cloudSqlSource) {
    this.cloudSqlSource = cloudSqlSource;
    return this;
  }

  /**
   * The desired location of errors incurred during the Import.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportErrorConfig getErrorConfig() {
    return errorConfig;
  }

  /**
   * The desired location of errors incurred during the Import.
   * @param errorConfig errorConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setErrorConfig(GoogleCloudDiscoveryengineV1ImportErrorConfig errorConfig) {
    this.errorConfig = errorConfig;
    return this;
  }

  /**
   * FhirStore input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1FhirStoreSource getFhirStoreSource() {
    return fhirStoreSource;
  }

  /**
   * FhirStore input source.
   * @param fhirStoreSource fhirStoreSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setFhirStoreSource(GoogleCloudDiscoveryengineV1FhirStoreSource fhirStoreSource) {
    this.fhirStoreSource = fhirStoreSource;
    return this;
  }

  /**
   * Firestore input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1FirestoreSource getFirestoreSource() {
    return firestoreSource;
  }

  /**
   * Firestore input source.
   * @param firestoreSource firestoreSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setFirestoreSource(GoogleCloudDiscoveryengineV1FirestoreSource firestoreSource) {
    this.firestoreSource = firestoreSource;
    return this;
  }

  /**
   * Cloud Storage location for the input content.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1GcsSource getGcsSource() {
    return gcsSource;
  }

  /**
   * Cloud Storage location for the input content.
   * @param gcsSource gcsSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setGcsSource(GoogleCloudDiscoveryengineV1GcsSource gcsSource) {
    this.gcsSource = gcsSource;
    return this;
  }

  /**
   * The field indicates the ID field or column to be used as unique IDs of the documents. For
   * GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{"my_id":
   * "some_uuid"}`. For others, it may be the column name of the table where the unique ids are
   * stored. The values of the JSON field or the table column are used as the Document.ids. The JSON
   * field or the table column must be of string type, and the values must be set as valid strings
   * conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise,
   * documents without valid IDs fail to be imported. Only set this field when auto_generate_ids is
   * unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a
   * default value `_id` is used when importing from the allowed data sources. Supported data
   * sources: * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an
   * INVALID_ARGUMENT error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom`
   * or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * @return value or {@code null} for none
   */
  public java.lang.String getIdField() {
    return idField;
  }

  /**
   * The field indicates the ID field or column to be used as unique IDs of the documents. For
   * GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{"my_id":
   * "some_uuid"}`. For others, it may be the column name of the table where the unique ids are
   * stored. The values of the JSON field or the table column are used as the Document.ids. The JSON
   * field or the table column must be of string type, and the values must be set as valid strings
   * conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise,
   * documents without valid IDs fail to be imported. Only set this field when auto_generate_ids is
   * unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a
   * default value `_id` is used when importing from the allowed data sources. Supported data
   * sources: * GcsSource. GcsSource.data_schema must be `custom` or `csv`. Otherwise, an
   * INVALID_ARGUMENT error is thrown. * BigQuerySource. BigQuerySource.data_schema must be `custom`
   * or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown. * SpannerSource. * CloudSqlSource. *
   * FirestoreSource. * BigtableSource.
   * @param idField idField or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setIdField(java.lang.String idField) {
    this.idField = idField;
    return this;
  }

  /**
   * The Inline source for the input content for documents.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequestInlineSource getInlineSource() {
    return inlineSource;
  }

  /**
   * The Inline source for the input content for documents.
   * @param inlineSource inlineSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setInlineSource(GoogleCloudDiscoveryengineV1ImportDocumentsRequestInlineSource inlineSource) {
    this.inlineSource = inlineSource;
    return this;
  }

  /**
   * The mode of reconciliation between existing documents and the documents to be imported.
   * Defaults to ReconciliationMode.INCREMENTAL.
   * @return value or {@code null} for none
   */
  public java.lang.String getReconciliationMode() {
    return reconciliationMode;
  }

  /**
   * The mode of reconciliation between existing documents and the documents to be imported.
   * Defaults to ReconciliationMode.INCREMENTAL.
   * @param reconciliationMode reconciliationMode or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setReconciliationMode(java.lang.String reconciliationMode) {
    this.reconciliationMode = reconciliationMode;
    return this;
  }

  /**
   * Spanner input source.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1SpannerSource getSpannerSource() {
    return spannerSource;
  }

  /**
   * Spanner input source.
   * @param spannerSource spannerSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setSpannerSource(GoogleCloudDiscoveryengineV1SpannerSource spannerSource) {
    this.spannerSource = spannerSource;
    return this;
  }

  /**
   * Indicates which fields in the provided imported documents to update. If not set, the default is
   * to update all fields.
   * @return value or {@code null} for none
   */
  public String getUpdateMask() {
    return updateMask;
  }

  /**
   * Indicates which fields in the provided imported documents to update. If not set, the default is
   * to update all fields.
   * @param updateMask updateMask or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest setUpdateMask(String updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1ImportDocumentsRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1ImportDocumentsRequest clone() {
    return (GoogleCloudDiscoveryengineV1ImportDocumentsRequest) super.clone();
  }

}
