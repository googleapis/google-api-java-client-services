/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Information about a process. It contains process name, start time, app Uid, app Pid, seinfo tag,
 * hash of the base APK.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppProcessInfo extends com.google.api.client.json.GenericJson {

  /**
   * SHA-256 hash of the base APK, in hexadecimal format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String apkSha256Hash;

  /**
   * Package names of all packages that are associated with the particular user id. In most cases,
   * this will be a single package name, the package that has been assigned that user id. If
   * multiple application share a uid then all packages sharing uid will be included.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> packageNames;

  /**
   * Process ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pid;

  /**
   * Process name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String processName;

  /**
   * SELinux policy info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String seinfo;

  /**
   * Process start time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * UID of the package.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer uid;

  /**
   * SHA-256 hash of the base APK, in hexadecimal format.
   * @return value or {@code null} for none
   */
  public java.lang.String getApkSha256Hash() {
    return apkSha256Hash;
  }

  /**
   * SHA-256 hash of the base APK, in hexadecimal format.
   * @param apkSha256Hash apkSha256Hash or {@code null} for none
   */
  public AppProcessInfo setApkSha256Hash(java.lang.String apkSha256Hash) {
    this.apkSha256Hash = apkSha256Hash;
    return this;
  }

  /**
   * Package names of all packages that are associated with the particular user id. In most cases,
   * this will be a single package name, the package that has been assigned that user id. If
   * multiple application share a uid then all packages sharing uid will be included.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPackageNames() {
    return packageNames;
  }

  /**
   * Package names of all packages that are associated with the particular user id. In most cases,
   * this will be a single package name, the package that has been assigned that user id. If
   * multiple application share a uid then all packages sharing uid will be included.
   * @param packageNames packageNames or {@code null} for none
   */
  public AppProcessInfo setPackageNames(java.util.List<java.lang.String> packageNames) {
    this.packageNames = packageNames;
    return this;
  }

  /**
   * Process ID.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPid() {
    return pid;
  }

  /**
   * Process ID.
   * @param pid pid or {@code null} for none
   */
  public AppProcessInfo setPid(java.lang.Integer pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Process name.
   * @return value or {@code null} for none
   */
  public java.lang.String getProcessName() {
    return processName;
  }

  /**
   * Process name.
   * @param processName processName or {@code null} for none
   */
  public AppProcessInfo setProcessName(java.lang.String processName) {
    this.processName = processName;
    return this;
  }

  /**
   * SELinux policy info.
   * @return value or {@code null} for none
   */
  public java.lang.String getSeinfo() {
    return seinfo;
  }

  /**
   * SELinux policy info.
   * @param seinfo seinfo or {@code null} for none
   */
  public AppProcessInfo setSeinfo(java.lang.String seinfo) {
    this.seinfo = seinfo;
    return this;
  }

  /**
   * Process start time.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Process start time.
   * @param startTime startTime or {@code null} for none
   */
  public AppProcessInfo setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * UID of the package.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUid() {
    return uid;
  }

  /**
   * UID of the package.
   * @param uid uid or {@code null} for none
   */
  public AppProcessInfo setUid(java.lang.Integer uid) {
    this.uid = uid;
    return this;
  }

  @Override
  public AppProcessInfo set(String fieldName, Object value) {
    return (AppProcessInfo) super.set(fieldName, value);
  }

  @Override
  public AppProcessInfo clone() {
    return (AppProcessInfo) super.clone();
  }

}
