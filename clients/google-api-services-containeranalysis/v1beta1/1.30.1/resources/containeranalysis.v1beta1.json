{
  "ownerName": "Google",
  "parameters": {
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    }
  },
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "resources": {
    "projects": {
      "resources": {
        "notes": {
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "id": "containeranalysis.projects.notes.occurrences.list",
                  "path": "v1beta1/{+name}/occurrences",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameters": {
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "The filter expression."
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of occurrences to return in the list.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list."
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}/occurrences"
                }
              }
            }
          },
          "methods": {
            "patch": {
              "request": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates the specified note.",
              "id": "containeranalysis.projects.notes.patch",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                },
                "updateMask": {
                  "location": "query",
                  "type": "string",
                  "description": "The fields to update.",
                  "format": "google-fieldmask"
                }
              },
              "path": "v1beta1/{+name}",
              "response": {
                "$ref": "Note"
              },
              "httpMethod": "PATCH"
            },
            "batchCreate": {
              "path": "v1beta1/{+parent}/notes:batchCreate",
              "parameters": {
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created.",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "id": "containeranalysis.projects.notes.batchCreate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "BatchCreateNotesRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/notes:batchCreate",
              "description": "Creates new notes in batch.",
              "response": {
                "$ref": "BatchCreateNotesResponse"
              }
            },
            "testIamPermissions": {
              "parameters": {
                "resource": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "id": "containeranalysis.projects.notes.testIamPermissions",
              "path": "v1beta1/{+resource}:testIamPermissions",
              "httpMethod": "POST",
              "description": "Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "parameterOrder": [
                "resource"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "setIamPolicy": {
              "description": "Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "response": {
                "$ref": "Policy"
              },
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "path": "v1beta1/{+resource}:setIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ]
            },
            "create": {
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1beta1/projects/{projectsId}/notes",
              "description": "Creates a new note.",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "noteId": {
                  "location": "query",
                  "type": "string",
                  "description": "Required. The ID to use for this note."
                },
                "parent": {
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true
                }
              },
              "request": {
                "$ref": "Note"
              },
              "httpMethod": "POST",
              "path": "v1beta1/{+parent}/notes",
              "id": "containeranalysis.projects.notes.create"
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The filter expression."
                },
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`.",
                  "location": "path",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20."
                }
              },
              "response": {
                "$ref": "ListNotesResponse"
              },
              "description": "Lists notes for the specified project.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "path": "v1beta1/{+parent}/notes",
              "id": "containeranalysis.projects.notes.list",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/notes"
            },
            "getIamPolicy": {
              "httpMethod": "POST",
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "path": "v1beta1/{+resource}:getIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "description": "Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences."
            },
            "delete": {
              "path": "v1beta1/{+name}",
              "description": "Deletes the specified note.",
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Empty"
              },
              "id": "containeranalysis.projects.notes.delete",
              "parameterOrder": [
                "name"
              ]
            },
            "get": {
              "description": "Gets the specified note.",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              },
              "id": "containeranalysis.projects.notes.get",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/notes/{notesId}",
              "httpMethod": "GET"
            }
          }
        },
        "occurrences": {
          "methods": {
            "delete": {
              "path": "v1beta1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.delete",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
                }
              },
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}",
              "httpMethod": "DELETE",
              "description": "Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource."
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Occurrence"
              },
              "id": "containeranalysis.projects.occurrences.get",
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}",
              "httpMethod": "GET",
              "description": "Gets the specified occurrence."
            },
            "batchCreate": {
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "BatchCreateOccurrencesResponse"
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences:batchCreate",
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.batchCreate",
              "description": "Creates new occurrences in batch.",
              "path": "v1beta1/{+parent}/occurrences:batchCreate",
              "request": {
                "$ref": "BatchCreateOccurrencesRequest"
              },
              "httpMethod": "POST"
            },
            "getIamPolicy": {
              "response": {
                "$ref": "Policy"
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "path": "v1beta1/{+resource}:getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "httpMethod": "POST",
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences."
            },
            "getNotes": {
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "description": "Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.",
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.getNotes",
              "path": "v1beta1/{+name}/notes"
            },
            "list": {
              "path": "v1beta1/{+parent}/occurrences",
              "id": "containeranalysis.projects.occurrences.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "description": "Lists occurrences for the specified project.",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "parent": {
                  "description": "Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`.",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "location": "path"
                },
                "filter": {
                  "type": "string",
                  "description": "The filter expression.",
                  "location": "query"
                }
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET"
            },
            "patch": {
              "description": "Updates the specified occurrence.",
              "path": "v1beta1/{+name}",
              "id": "containeranalysis.projects.occurrences.patch",
              "request": {
                "$ref": "Occurrence"
              },
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Occurrence"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "type": "string",
                  "location": "path"
                },
                "updateMask": {
                  "type": "string",
                  "description": "The fields to update.",
                  "location": "query",
                  "format": "google-fieldmask"
                }
              },
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "httpMethod": "POST",
              "path": "v1beta1/{+resource}:testIamPermissions",
              "parameters": {
                "resource": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ]
            },
            "getVulnerabilitySummary": {
              "description": "Gets a summary of the number and severity of occurrences.",
              "flatPath": "v1beta1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "httpMethod": "GET",
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
              "response": {
                "$ref": "VulnerabilityOccurrencesSummary"
              },
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1beta1/{+parent}/occurrences:vulnerabilitySummary",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`."
                },
                "filter": {
                  "description": "The filter expression.",
                  "location": "query",
                  "type": "string"
                }
              }
            },
            "setIamPolicy": {
              "path": "v1beta1/{+resource}:setIamPolicy",
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Policy"
              },
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "description": "Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences."
            },
            "create": {
              "request": {
                "$ref": "Occurrence"
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "Occurrence"
              },
              "path": "v1beta1/{+parent}/occurrences",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/occurrences",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created.",
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Creates a new occurrence.",
              "id": "containeranalysis.projects.occurrences.create"
            }
          }
        },
        "scanConfigs": {
          "methods": {
            "update": {
              "httpMethod": "PUT",
              "flatPath": "v1beta1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "response": {
                "$ref": "ScanConfig"
              },
              "request": {
                "$ref": "ScanConfig"
              },
              "id": "containeranalysis.projects.scanConfigs.update",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$",
                  "description": "Required. The name of the scan configuration in the form of `projects/[PROJECT_ID]/scanConfigs/[SCAN_CONFIG_ID]`."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1beta1/{+name}",
              "description": "Updates the specified scan configuration.",
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "path": "v1beta1/{+parent}/scanConfigs",
              "id": "containeranalysis.projects.scanConfigs.list",
              "flatPath": "v1beta1/projects/{projectsId}/scanConfigs",
              "parameters": {
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "The number of scan configs to return in the list.",
                  "format": "int32"
                },
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project to list scan configurations for in the form of `projects/[PROJECT_ID]`."
                },
                "filter": {
                  "type": "string",
                  "description": "Required. The filter expression.",
                  "location": "query"
                }
              },
              "description": "Lists scan configurations for the specified project.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "ListScanConfigsResponse"
              }
            },
            "get": {
              "id": "containeranalysis.projects.scanConfigs.get",
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "response": {
                "$ref": "ScanConfig"
              },
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$",
                  "description": "Required. The name of the scan configuration in the form of `projects/[PROJECT_ID]/scanConfigs/[SCAN_CONFIG_ID]`.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Gets the specified scan configuration.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        }
      }
    }
  },
  "servicePath": "",
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "revision": "20200828",
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
  "discoveryVersion": "v1",
  "canonicalName": "Container Analysis",
  "version": "v1beta1",
  "batchPath": "batch",
  "version_module": true,
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://containeranalysis.mtls.googleapis.com/",
  "schemas": {
    "SourceContext": {
      "id": "SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels with user defined metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudRepo": {
          "$ref": "CloudRepoSourceContext",
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo."
        },
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GitSourceContext"
        },
        "gerrit": {
          "$ref": "GerritSourceContext",
          "description": "A SourceContext referring to a Gerrit project."
        }
      }
    },
    "VulnerabilityOccurrencesSummary": {
      "description": "A summary of how many vulnerability occurrences there are per resource and severity type.",
      "id": "VulnerabilityOccurrencesSummary",
      "properties": {
        "counts": {
          "items": {
            "$ref": "FixableTotalByDigest"
          },
          "type": "array",
          "description": "A listing by resource of the number of fixable and total vulnerabilities."
        }
      },
      "type": "object"
    },
    "GrafeasV1beta1DiscoveryDetails": {
      "properties": {
        "discovered": {
          "$ref": "Discovered",
          "description": "Required. Analysis status for the discovered resource."
        }
      },
      "id": "GrafeasV1beta1DiscoveryDetails",
      "type": "object",
      "description": "Details of a discovery occurrence."
    },
    "BatchCreateNotesRequest": {
      "description": "Request to create notes in batch.",
      "id": "BatchCreateNotesRequest",
      "properties": {
        "notes": {
          "description": "Required. The notes to create. Max allowed length is 1000.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Note"
          }
        }
      },
      "type": "object"
    },
    "Installation": {
      "description": "This represents how a particular software package may be installed on a system.",
      "properties": {
        "location": {
          "type": "array",
          "description": "Required. All of the places within the filesystem versions of this package have been found.",
          "items": {
            "$ref": "Location"
          }
        },
        "name": {
          "description": "Output only. The name of the installed package.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Installation"
    },
    "CVSSv3": {
      "type": "object",
      "properties": {
        "privilegesRequired": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "PRIVILEGES_REQUIRED_UNSPECIFIED",
            "PRIVILEGES_REQUIRED_NONE",
            "PRIVILEGES_REQUIRED_LOW",
            "PRIVILEGES_REQUIRED_HIGH"
          ]
        },
        "availabilityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "type": "string"
        },
        "impactScore": {
          "format": "float",
          "type": "number"
        },
        "attackVector": {
          "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
          "enum": [
            "ATTACK_VECTOR_UNSPECIFIED",
            "ATTACK_VECTOR_NETWORK",
            "ATTACK_VECTOR_ADJACENT",
            "ATTACK_VECTOR_LOCAL",
            "ATTACK_VECTOR_PHYSICAL"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "confidentialityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "type": "string"
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "scope": {
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_UNCHANGED",
            "SCOPE_CHANGED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "baseScore": {
          "format": "float",
          "type": "number",
          "description": "The base score is a function of the base metric scores."
        },
        "attackComplexity": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "ATTACK_COMPLEXITY_UNSPECIFIED",
            "ATTACK_COMPLEXITY_LOW",
            "ATTACK_COMPLEXITY_HIGH"
          ]
        },
        "integrityImpact": {
          "type": "string",
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "userInteraction": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "USER_INTERACTION_UNSPECIFIED",
            "USER_INTERACTION_NONE",
            "USER_INTERACTION_REQUIRED"
          ]
        }
      },
      "description": "Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document",
      "id": "CVSSv3"
    },
    "ListOccurrencesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results."
        },
        "occurrences": {
          "description": "The occurrences requested.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        }
      },
      "description": "Response for listing occurrences.",
      "id": "ListOccurrencesResponse",
      "type": "object"
    },
    "ListNoteOccurrencesResponse": {
      "type": "object",
      "description": "Response for listing occurrences for a note.",
      "properties": {
        "nextPageToken": {
          "description": "Token to provide to skip to a particular spot in the list.",
          "type": "string"
        },
        "occurrences": {
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array",
          "description": "The occurrences attached to the specified note."
        }
      },
      "id": "ListNoteOccurrencesResponse"
    },
    "Deployment": {
      "type": "object",
      "id": "Deployment",
      "description": "The period during which some deployable was active in a runtime.",
      "properties": {
        "resourceUri": {
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "platform": {
          "type": "string",
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "description": "Platform hosting this deployment.",
          "enumDescriptions": [
            "Unknown.",
            "Google Container Engine.",
            "Google App Engine: Flexible Environment.",
            "Custom user-defined platform."
          ]
        },
        "config": {
          "type": "string",
          "description": "Configuration used to create this deployment."
        },
        "userEmail": {
          "type": "string",
          "description": "Identity of the user that triggered this deployment."
        },
        "undeployTime": {
          "description": "End of the lifetime of this deployment.",
          "type": "string",
          "format": "google-datetime"
        },
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        },
        "deployTime": {
          "description": "Required. Beginning of the lifetime of this deployment.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Environment": {
      "description": "Defines an object for the environment field in in-toto links. The suggested fields are \"variables\", \"filesystem\", and \"workdir\".",
      "properties": {
        "customValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "id": "Environment"
    },
    "GrafeasV1beta1ImageDetails": {
      "id": "GrafeasV1beta1ImageDetails",
      "description": "Details of an image occurrence.",
      "type": "object",
      "properties": {
        "derivedImage": {
          "description": "Required. Immutable. The child image derived from the base image.",
          "$ref": "Derived"
        }
      }
    },
    "WindowsDetail": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The name of the vulnerability."
        },
        "description": {
          "type": "string",
          "description": "The description of the vulnerability."
        },
        "cpeUri": {
          "description": "Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.",
          "type": "string"
        },
        "fixingKbs": {
          "type": "array",
          "description": "Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.",
          "items": {
            "$ref": "KnowledgeBase"
          }
        }
      },
      "type": "object",
      "id": "WindowsDetail"
    },
    "ByProducts": {
      "properties": {
        "customValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "id": "ByProducts",
      "description": "Defines an object for the byproducts field in in-toto links. The suggested fields are \"stderr\", \"stdout\", and \"return-value\"."
    },
    "ScanConfig": {
      "id": "ScanConfig",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this scan config was last updated."
        },
        "name": {
          "description": "Output only. The name of the scan configuration in the form of `projects/[PROJECT_ID]/scanConfigs/[SCAN_CONFIG_ID]`.",
          "type": "string"
        },
        "description": {
          "description": "Output only. A human-readable description of what the scan configuration does.",
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the scan is enabled."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time this scan config was created.",
          "format": "google-datetime"
        }
      },
      "description": "A scan configuration specifies whether Cloud components in a project have a particular type of analysis being run. For example, it can configure whether vulnerability scanning is being done on Docker images or not.",
      "type": "object"
    },
    "Artifact": {
      "id": "Artifact",
      "type": "object",
      "description": "Artifact describes a build product.",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image."
        },
        "checksum": {
          "type": "string",
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container."
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`."
        }
      }
    },
    "CloudRepoSourceContext": {
      "properties": {
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "repoId": {
          "$ref": "RepoId",
          "description": "The ID of the repo."
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "AliasContext"
        }
      },
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "type": "object",
      "id": "CloudRepoSourceContext"
    },
    "GetPolicyOptions": {
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "id": "GetPolicyOptions",
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      }
    },
    "Note": {
      "id": "Note",
      "description": "A type of analysis that can be done for a resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
          "type": "string"
        },
        "build": {
          "$ref": "Build",
          "description": "A note describing build provenance for a verifiable build."
        },
        "attestationAuthority": {
          "$ref": "Authority",
          "description": "A note describing an attestation role."
        },
        "package": {
          "$ref": "Package",
          "description": "A note describing a package hosted by various package managers."
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests."
        },
        "kind": {
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "INTOTO"
          ],
          "enumDescriptions": [
            "Unknown.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an in-toto link."
          ],
          "description": "Output only. The type of analysis. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "discovery": {
          "description": "A note describing the initial analysis of a resource.",
          "$ref": "Discovery"
        },
        "baseImage": {
          "$ref": "Basis",
          "description": "A note describing a base image."
        },
        "deployable": {
          "description": "A note describing something that can be deployed.",
          "$ref": "Deployable"
        },
        "relatedUrl": {
          "description": "URLs associated with this note.",
          "type": "array",
          "items": {
            "$ref": "RelatedUrl"
          }
        },
        "vulnerability": {
          "$ref": "Vulnerability",
          "description": "A note describing a package vulnerability."
        },
        "shortDescription": {
          "type": "string",
          "description": "A one sentence description of this note."
        },
        "createTime": {
          "description": "Output only. The time this note was created. This field can be used as a filter in list requests.",
          "type": "string",
          "format": "google-datetime"
        },
        "longDescription": {
          "description": "A detailed description of this note.",
          "type": "string"
        },
        "relatedNoteNames": {
          "items": {
            "type": "string"
          },
          "description": "Other notes related to this note.",
          "type": "array"
        },
        "expirationTime": {
          "type": "string",
          "description": "Time of expiration for this note. Empty if note does not expire.",
          "format": "google-datetime"
        },
        "intoto": {
          "$ref": "InToto",
          "description": "A note describing an in-toto link."
        }
      }
    },
    "PgpSignedAttestation": {
      "id": "PgpSignedAttestation",
      "type": "object",
      "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
      "properties": {
        "signature": {
          "type": "string",
          "description": "Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload."
        },
        "contentType": {
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema."
          ],
          "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
          "type": "string",
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ]
        },
        "pgpKeyId": {
          "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexidecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
          "type": "string"
        }
      }
    },
    "GrafeasV1beta1VulnerabilityDetails": {
      "id": "GrafeasV1beta1VulnerabilityDetails",
      "properties": {
        "severity": {
          "type": "string",
          "description": "Output only. The note provider assigned Severity of the vulnerability.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ]
        },
        "effectiveSeverity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "description": "The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string"
        },
        "shortDescription": {
          "type": "string",
          "description": "Output only. A one sentence description of this vulnerability."
        },
        "relatedUrls": {
          "description": "Output only. URLs related to this vulnerability.",
          "items": {
            "$ref": "RelatedUrl"
          },
          "type": "array"
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)"
        },
        "longDescription": {
          "description": "Output only. A detailed description of this vulnerability.",
          "type": "string"
        },
        "packageIssue": {
          "description": "Required. The set of affected locations and their fixes (if available) within the associated resource.",
          "type": "array",
          "items": {
            "$ref": "PackageIssue"
          }
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object",
      "description": "Details of a vulnerability Occurrence."
    },
    "GetIamPolicyRequest": {
      "id": "GetIamPolicyRequest",
      "type": "object",
      "properties": {
        "options": {
          "$ref": "GetPolicyOptions",
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
        }
      },
      "description": "Request message for `GetIamPolicy` method."
    },
    "BatchCreateNotesResponse": {
      "description": "Response for creating notes in batch.",
      "type": "object",
      "id": "BatchCreateNotesResponse",
      "properties": {
        "notes": {
          "description": "The notes that were created.",
          "items": {
            "$ref": "Note"
          },
          "type": "array"
        }
      }
    },
    "Details": {
      "properties": {
        "attestation": {
          "$ref": "Attestation",
          "description": "Required. Attestation for the resource."
        }
      },
      "description": "Details of an attestation occurrence.",
      "type": "object",
      "id": "Details"
    },
    "GrafeasV1beta1BuildDetails": {
      "type": "object",
      "description": "Details of a build occurrence.",
      "properties": {
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "Required. The actual provenance for the build."
        },
        "provenanceBytes": {
          "type": "string",
          "description": "Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes."
        }
      },
      "id": "GrafeasV1beta1BuildDetails"
    },
    "Policy": {
      "properties": {
        "etag": {
          "format": "byte",
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        }
      },
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "id": "Policy"
    },
    "Distribution": {
      "description": "This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.",
      "properties": {
        "description": {
          "type": "string",
          "description": "The distribution channel-specific description of this package."
        },
        "architecture": {
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "enumDescriptions": [
            "Unknown architecture.",
            "X86 architecture.",
            "X64 architecture."
          ],
          "type": "string",
          "description": "The CPU architecture for which packages in this distribution channel were built."
        },
        "cpeUri": {
          "type": "string",
          "description": "Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        },
        "maintainer": {
          "description": "A freeform string denoting the maintainer of this package.",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The distribution channel-specific homepage for this package."
        },
        "latestVersion": {
          "$ref": "Version",
          "description": "The latest available version of this package in this distribution channel."
        }
      },
      "type": "object",
      "id": "Distribution"
    },
    "Deployable": {
      "id": "Deployable",
      "properties": {
        "resourceUri": {
          "items": {
            "type": "string"
          },
          "description": "Required. Resource URI for the artifact being deployed.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "An artifact that can be deployed in some runtime."
    },
    "BuildSignature": {
      "description": "Message encapsulating the signature of the verified build.",
      "type": "object",
      "id": "BuildSignature",
      "properties": {
        "signature": {
          "format": "byte",
          "type": "string",
          "description": "Required. Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded."
        },
        "keyType": {
          "type": "string",
          "enum": [
            "KEY_TYPE_UNSPECIFIED",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ],
          "enumDescriptions": [
            "`KeyType` is not set.",
            "`PGP ASCII Armored` public key.",
            "`PKIX PEM` public key."
          ],
          "description": "The type of the key, either stored in `public_key` or referenced in `key_id`."
        },
        "publicKey": {
          "type": "string",
          "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`"
        },
        "keyId": {
          "description": "An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
          "type": "string"
        }
      }
    },
    "Occurrence": {
      "properties": {
        "intoto": {
          "description": "Describes a specific in-toto link.",
          "$ref": "GrafeasV1beta1IntotoDetails"
        },
        "noteName": {
          "type": "string",
          "description": "Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests."
        },
        "remediation": {
          "type": "string",
          "description": "A description of actions that can be taken to remedy the note."
        },
        "deployment": {
          "$ref": "GrafeasV1beta1DeploymentDetails",
          "description": "Describes the deployment of an artifact on a runtime."
        },
        "discovered": {
          "$ref": "GrafeasV1beta1DiscoveryDetails",
          "description": "Describes when a resource was discovered."
        },
        "resource": {
          "description": "Required. Immutable. The resource for which the occurrence applies.",
          "$ref": "Resource"
        },
        "vulnerability": {
          "$ref": "GrafeasV1beta1VulnerabilityDetails",
          "description": "Describes a security vulnerability."
        },
        "build": {
          "description": "Describes a verifiable build.",
          "$ref": "GrafeasV1beta1BuildDetails"
        },
        "derivedImage": {
          "$ref": "GrafeasV1beta1ImageDetails",
          "description": "Describes how this resource derives from the basis in the associated note."
        },
        "name": {
          "description": "Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
          "type": "string"
        },
        "kind": {
          "description": "Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
          "type": "string",
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "INTOTO"
          ],
          "enumDescriptions": [
            "Unknown.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an in-toto link."
          ]
        },
        "attestation": {
          "description": "Describes an attestation of an artifact.",
          "$ref": "Details"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time this occurrence was created.",
          "format": "google-datetime"
        },
        "installation": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "GrafeasV1beta1PackageDetails"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time this occurrence was last updated.",
          "format": "google-datetime"
        }
      },
      "id": "Occurrence",
      "description": "An instance of an analysis type that has been found on a resource.",
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them."
        }
      },
      "type": "object"
    },
    "ProjectRepoId": {
      "properties": {
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "The ID of the project."
        }
      },
      "id": "ProjectRepoId",
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "type": "object"
    },
    "Link": {
      "id": "Link",
      "description": "This corresponds to an in-toto link.",
      "properties": {
        "products": {
          "type": "array",
          "description": "Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.",
          "items": {
            "$ref": "GrafeasV1beta1IntotoArtifact"
          }
        },
        "materials": {
          "description": "Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]",
          "items": {
            "$ref": "GrafeasV1beta1IntotoArtifact"
          },
          "type": "array"
        },
        "environment": {
          "$ref": "Environment",
          "description": "This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: \"environment\": { \"custom_values\": { \"variables\": \"\", \"filesystem\": \"\", \"workdir\": \"\", \"\": \"...\" } }"
        },
        "byproducts": {
          "$ref": "ByProducts",
          "description": "ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step."
        },
        "command": {
          "items": {
            "type": "string"
          },
          "description": "This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Location": {
      "type": "object",
      "description": "An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.",
      "properties": {
        "version": {
          "$ref": "Version",
          "description": "The version installed at this location."
        },
        "cpeUri": {
          "description": "Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "The path from which we gathered that this package/version is installed."
        }
      },
      "id": "Location"
    },
    "BatchCreateOccurrencesResponse": {
      "id": "BatchCreateOccurrencesResponse",
      "description": "Response for creating occurrences in batch.",
      "properties": {
        "occurrences": {
          "description": "The occurrences that were created.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        }
      },
      "type": "object"
    },
    "Layer": {
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "id": "Layer",
      "type": "object",
      "properties": {
        "arguments": {
          "type": "string",
          "description": "The recovered arguments to the Dockerfile directive."
        },
        "directive": {
          "description": "Required. The recovered Dockerfile directive used to construct this layer.",
          "type": "string",
          "enumDescriptions": [
            "Default value for unsupported/missing directive.",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/"
          ],
          "enum": [
            "DIRECTIVE_UNSPECIFIED",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ]
        }
      }
    },
    "ArtifactHashes": {
      "type": "object",
      "id": "ArtifactHashes",
      "properties": {
        "sha256": {
          "type": "string"
        }
      },
      "description": "Defines a hash object for use in Materials and Products."
    },
    "ArtifactRule": {
      "type": "object",
      "id": "ArtifactRule",
      "description": "Defines an object to declare an in-toto artifact rule",
      "properties": {
        "artifactRule": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Expr": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
    },
    "GitSourceContext": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Git repository URL."
        },
        "revisionId": {
          "description": "Git commit hash.",
          "type": "string"
        }
      },
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
      "type": "object",
      "id": "GitSourceContext"
    },
    "Signature": {
      "properties": {
        "publicKeyId": {
          "type": "string",
          "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\""
        },
        "signature": {
          "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.",
          "format": "byte",
          "type": "string"
        }
      },
      "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).",
      "type": "object",
      "id": "Signature"
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "Resource": {
      "description": "An entity that can have metadata. For example, a Docker image.",
      "type": "object",
      "id": "Resource",
      "properties": {
        "contentHash": {
          "$ref": "Hash",
          "description": "Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest."
        },
        "uri": {
          "type": "string",
          "description": "Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image."
        },
        "name": {
          "type": "string",
          "description": "Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\"."
        }
      }
    },
    "GrafeasV1beta1DeploymentDetails": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "Deployment",
          "description": "Required. Deployment history for the resource."
        }
      },
      "description": "Details of a deployment occurrence.",
      "id": "GrafeasV1beta1DeploymentDetails"
    },
    "GenericSignedAttestation": {
      "description": "An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.",
      "id": "GenericSignedAttestation",
      "type": "object",
      "properties": {
        "contentType": {
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ],
          "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted in `plaintext` is a JSON blob conforming to the linked schema."
          ],
          "type": "string"
        },
        "serializedPayload": {
          "description": "The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.",
          "format": "byte",
          "type": "string"
        },
        "signatures": {
          "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.",
          "items": {
            "$ref": "Signature"
          },
          "type": "array"
        }
      }
    },
    "GrafeasV1beta1IntotoSignature": {
      "description": "A signature object consists of the KeyID used and the signature itself.",
      "id": "GrafeasV1beta1IntotoSignature",
      "type": "object",
      "properties": {
        "keyid": {
          "type": "string"
        },
        "sig": {
          "type": "string"
        }
      }
    },
    "GerritSourceContext": {
      "properties": {
        "gerritProject": {
          "type": "string",
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project."
        },
        "revisionId": {
          "type": "string",
          "description": "A revision (commit) ID."
        },
        "hostUri": {
          "type": "string",
          "description": "The URI of a running Gerrit instance."
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "AliasContext"
        }
      },
      "description": "A SourceContext referring to a Gerrit project.",
      "type": "object",
      "id": "GerritSourceContext"
    },
    "GrafeasV1beta1IntotoDetails": {
      "type": "object",
      "id": "GrafeasV1beta1IntotoDetails",
      "properties": {
        "signed": {
          "$ref": "Link"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "GrafeasV1beta1IntotoSignature"
          }
        }
      },
      "description": "This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note."
    },
    "Discovered": {
      "id": "Discovered",
      "properties": {
        "lastAnalysisTime": {
          "format": "google-datetime",
          "description": "The last time continuous analysis was done for this resource. Deprecated, do not use.",
          "type": "string"
        },
        "analysisStatus": {
          "description": "The status of discovery for the resource.",
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported"
          ],
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ]
        },
        "continuousAnalysis": {
          "enumDescriptions": [
            "Unknown.",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "type": "string",
          "description": "Whether the resource is continuously analyzed.",
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "analysisStatusError": {
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.",
          "$ref": "Status"
        }
      },
      "type": "object",
      "description": "Provides information about the analysis status of a discovered resource."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers",
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time this operation was created.",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. The time that this operation was marked completed or failed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata"
    },
    "Build": {
      "properties": {
        "builderVersion": {
          "type": "string",
          "description": "Required. Immutable. Version of the builder which produced this build."
        },
        "signature": {
          "$ref": "BuildSignature",
          "description": "Signature of the build in occurrences pointing to this build note containing build details."
        }
      },
      "id": "Build",
      "description": "Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.",
      "type": "object"
    },
    "RepoId": {
      "type": "object",
      "id": "RepoId",
      "properties": {
        "uid": {
          "type": "string",
          "description": "A server-assigned, globally unique identifier."
        },
        "projectRepoId": {
          "$ref": "ProjectRepoId",
          "description": "A combination of a project ID and a repo name."
        }
      },
      "description": "A unique identifier for a Cloud Repo."
    },
    "Command": {
      "type": "object",
      "id": "Command",
      "properties": {
        "waitFor": {
          "type": "array",
          "description": "The ID(s) of the command(s) that this command depends on.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this command, used in wait_for to reference this command as a dependency."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "Command-line arguments used when executing this command.",
          "type": "array"
        },
        "name": {
          "description": "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "env": {
          "type": "array",
          "description": "Environment variables set before running this command.",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this command.",
          "type": "string"
        }
      },
      "description": "Command describes a step performed as part of the build pipeline."
    },
    "FixableTotalByDigest": {
      "properties": {
        "resource": {
          "$ref": "Resource",
          "description": "The affected resource."
        },
        "fixableCount": {
          "description": "The number of fixable vulnerabilities associated with this resource.",
          "format": "int64",
          "type": "string"
        },
        "severity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "type": "string",
          "description": "The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "totalCount": {
          "format": "int64",
          "description": "The total number of vulnerabilities associated with this resource.",
          "type": "string"
        }
      },
      "id": "FixableTotalByDigest",
      "type": "object",
      "description": "Per resource and severity counts of fixable and total vulnerabilities."
    },
    "VulnerabilityLocation": {
      "type": "object",
      "description": "The location of the vulnerability.",
      "id": "VulnerabilityLocation",
      "properties": {
        "package": {
          "type": "string",
          "description": "Required. The package being described."
        },
        "cpeUri": {
          "type": "string",
          "description": "Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar."
        },
        "version": {
          "description": "Required. The version of the package being described.",
          "$ref": "Version"
        }
      }
    },
    "Source": {
      "properties": {
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "type": "object",
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
        },
        "artifactStorageSourceUri": {
          "type": "string",
          "description": "If provided, the input binary artifacts for the build came from this location."
        },
        "context": {
          "$ref": "SourceContext",
          "description": "If provided, the source code used for the build came from this location."
        },
        "additionalContexts": {
          "items": {
            "$ref": "SourceContext"
          },
          "type": "array",
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field."
        }
      },
      "description": "Source describes the location of the source used for the build.",
      "id": "Source",
      "type": "object"
    },
    "Derived": {
      "type": "object",
      "id": "Derived",
      "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "properties": {
        "baseResourceUrl": {
          "description": "Output only. This contains the base image URL for the derived image occurrence.",
          "type": "string"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "Required. The fingerprint of the derived image."
        },
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
          "type": "array"
        },
        "distance": {
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Vulnerability": {
      "description": "Vulnerability provides metadata about a security vulnerability in a Note.",
      "properties": {
        "windowsDetails": {
          "type": "array",
          "items": {
            "$ref": "WindowsDetail"
          },
          "description": "Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version."
        },
        "cvssV3": {
          "description": "The full description of the CVSSv3.",
          "$ref": "CVSSv3"
        },
        "cvssScore": {
          "type": "number",
          "description": "The CVSS score for this vulnerability.",
          "format": "float"
        },
        "severity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "Note provider assigned impact of the vulnerability.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
          "items": {
            "$ref": "Detail"
          }
        },
        "sourceUpdateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker."
        }
      },
      "id": "Vulnerability",
      "type": "object"
    },
    "BuildProvenance": {
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
      "properties": {
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        },
        "commands": {
          "items": {
            "$ref": "Command"
          },
          "description": "Commands requested by the build.",
          "type": "array"
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        },
        "builtArtifacts": {
          "items": {
            "$ref": "Artifact"
          },
          "description": "Output of the build.",
          "type": "array"
        },
        "logsUri": {
          "description": "URI where any logs for this provenance were written.",
          "type": "string"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
          "type": "string"
        },
        "createTime": {
          "description": "Time at which the build was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "type": "string",
          "description": "Time at which execution of the build was finished.",
          "format": "google-datetime"
        },
        "triggerId": {
          "type": "string",
          "description": "Trigger identifier if the build was triggered automatically; empty if not."
        },
        "id": {
          "type": "string",
          "description": "Required. Unique identifier of the build."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        }
      },
      "id": "BuildProvenance",
      "type": "object"
    },
    "PackageIssue": {
      "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
      "id": "PackageIssue",
      "type": "object",
      "properties": {
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The location of the available fix for vulnerability."
        },
        "affectedLocation": {
          "description": "Required. The location of the vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "severityName": {
          "description": "Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.",
          "type": "string"
        }
      }
    },
    "Discovery": {
      "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.",
      "type": "object",
      "id": "Discovery",
      "properties": {
        "analysisKind": {
          "description": "Required. Immutable. The kind of analysis that is handled by this discovery.",
          "enumDescriptions": [
            "Unknown.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an in-toto link."
          ],
          "type": "string",
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "INTOTO"
          ]
        }
      }
    },
    "ListNotesResponse": {
      "properties": {
        "notes": {
          "description": "The notes requested.",
          "type": "array",
          "items": {
            "$ref": "Note"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response for listing notes.",
      "id": "ListNotesResponse"
    },
    "BatchCreateOccurrencesRequest": {
      "id": "BatchCreateOccurrencesRequest",
      "description": "Request to create occurrences in batch.",
      "type": "object",
      "properties": {
        "occurrences": {
          "items": {
            "$ref": "Occurrence"
          },
          "description": "Required. The occurrences to create. Max allowed length is 1000.",
          "type": "array"
        }
      }
    },
    "Attestation": {
      "properties": {
        "pgpSignedAttestation": {
          "description": "A PGP signed attestation.",
          "$ref": "PgpSignedAttestation"
        },
        "genericSignedAttestation": {
          "$ref": "GenericSignedAttestation"
        }
      },
      "id": "Attestation",
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
      "type": "object"
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "description": "Metadata for any related URL information.",
      "properties": {
        "url": {
          "description": "Specific URL associated with the resource.",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "Label to describe usage of the URL."
        }
      },
      "type": "object"
    },
    "InToto": {
      "properties": {
        "signingKeys": {
          "items": {
            "$ref": "SigningKey"
          },
          "type": "array",
          "description": "This field contains the public keys that can be used to verify the signatures on the step metadata."
        },
        "expectedCommand": {
          "items": {
            "type": "string"
          },
          "description": "This field contains the expected command used to perform the step.",
          "type": "array"
        },
        "expectedProducts": {
          "type": "array",
          "items": {
            "$ref": "ArtifactRule"
          }
        },
        "expectedMaterials": {
          "type": "array",
          "description": "The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.",
          "items": {
            "$ref": "ArtifactRule"
          }
        },
        "threshold": {
          "format": "int64",
          "type": "string",
          "description": "This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link."
        },
        "stepName": {
          "description": "This field identifies the name of the step in the supply chain.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.",
      "id": "InToto"
    },
    "KnowledgeBase": {
      "properties": {
        "name": {
          "description": "The KB name (generally of the form KB[0-9]+ i.e. KB123456).",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/"
        }
      },
      "id": "KnowledgeBase",
      "type": "object"
    },
    "GrafeasV1beta1PackageDetails": {
      "type": "object",
      "description": "Details of a package occurrence.",
      "id": "GrafeasV1beta1PackageDetails",
      "properties": {
        "installation": {
          "$ref": "Installation",
          "description": "Required. Where the package was installed."
        }
      }
    },
    "TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array"
        }
      },
      "id": "TestIamPermissionsRequest",
      "type": "object"
    },
    "AliasContext": {
      "type": "object",
      "id": "AliasContext",
      "description": "An alias to a repo revision.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The alias name."
        },
        "kind": {
          "description": "The alias kind.",
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "type": "string"
        }
      }
    },
    "SigningKey": {
      "description": "This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { \"key_id\": \"776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...\", \"key_type\": \"rsa\", \"public_key_value\": \"-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0B...\", \"key_scheme\": \"rsassa-pss-sha256\" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.",
      "type": "object",
      "id": "SigningKey",
      "properties": {
        "keyId": {
          "description": "key_id is an identifier for the signing key.",
          "type": "string"
        },
        "publicKeyValue": {
          "type": "string",
          "description": "This field contains the actual public key."
        },
        "keyScheme": {
          "description": "This field contains the corresponding signature scheme. Eg: \"rsassa-pss-sha256\".",
          "type": "string"
        },
        "keyType": {
          "description": "This field identifies the specific signing method. Eg: \"rsa\", \"ed25519\", and \"ecdsa\".",
          "type": "string"
        }
      }
    },
    "Package": {
      "properties": {
        "name": {
          "description": "Required. Immutable. The name of the package.",
          "type": "string"
        },
        "distribution": {
          "description": "The various channels by which a package is distributed.",
          "type": "array",
          "items": {
            "$ref": "Distribution"
          }
        }
      },
      "description": "This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.",
      "id": "Package",
      "type": "object"
    },
    "Detail": {
      "properties": {
        "isObsolete": {
          "description": "Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.",
          "type": "boolean"
        },
        "maxAffectedVersion": {
          "description": "The max version of the package in which the vulnerability exists.",
          "$ref": "Version"
        },
        "severityName": {
          "type": "string",
          "description": "The severity (eg: distro assigned severity) for this vulnerability."
        },
        "package": {
          "type": "string",
          "description": "Required. The name of the package where the vulnerability was found."
        },
        "cpeUri": {
          "description": "Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.",
          "type": "string"
        },
        "sourceUpdateTime": {
          "format": "google-datetime",
          "description": "The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.",
          "type": "string"
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "packageType": {
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc).",
          "type": "string"
        },
        "fixedLocation": {
          "description": "The fix for this specific package version.",
          "$ref": "VulnerabilityLocation"
        },
        "minAffectedVersion": {
          "$ref": "Version",
          "description": "The min version of the package in which the vulnerability exists."
        }
      },
      "id": "Detail",
      "type": "object",
      "description": "Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2"
    },
    "Version": {
      "id": "Version",
      "description": "Version contains structured information about the version of a package.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "The iteration of the package build from the above version.",
          "type": "string"
        },
        "name": {
          "description": "Required only when version kind is NORMAL. The main part of the version name.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
          "enumDescriptions": [
            "Unknown.",
            "A standard package version.",
            "A special version representing negative infinity.",
            "A special version representing positive infinity."
          ],
          "enum": [
            "VERSION_KIND_UNSPECIFIED",
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ]
        },
        "epoch": {
          "format": "int32",
          "type": "integer",
          "description": "Used to correct mistakes in the version numbering scheme."
        }
      }
    },
    "Binding": {
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "id": "Binding",
      "properties": {
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "bindingId": {
          "description": "A client-specified ID for this binding. Expected to be globally unique to support the internal bindings-by-ID API.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Basis": {
      "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
      "type": "object",
      "id": "Basis",
      "properties": {
        "resourceUrl": {
          "type": "string",
          "description": "Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images."
        },
        "fingerprint": {
          "description": "Required. Immutable. The fingerprint of the base image.",
          "$ref": "Fingerprint"
        }
      }
    },
    "Hint": {
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "Required. The human readable name of this attestation authority, for example \"qa\"."
        }
      },
      "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
      "type": "object",
      "id": "Hint"
    },
    "ListScanConfigsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.",
          "type": "string"
        },
        "scanConfigs": {
          "description": "The scan configurations requested.",
          "type": "array",
          "items": {
            "$ref": "ScanConfig"
          }
        }
      },
      "id": "ListScanConfigsResponse",
      "description": "Response for listing scan configurations."
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "GrafeasV1beta1IntotoArtifact": {
      "type": "object",
      "id": "GrafeasV1beta1IntotoArtifact",
      "properties": {
        "resourceUri": {
          "type": "string"
        },
        "hashes": {
          "$ref": "ArtifactHashes"
        }
      }
    },
    "Authority": {
      "type": "object",
      "id": "Authority",
      "properties": {
        "hint": {
          "$ref": "Hint",
          "description": "Hint hints at the purpose of the attestation authority."
        }
      },
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `Authority` for \"QA\" and one for \"build\". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project."
    },
    "FileHashes": {
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "Hash"
          },
          "description": "Required. Collection of file hashes.",
          "type": "array"
        }
      },
      "id": "FileHashes",
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build."
    },
    "Hash": {
      "type": "object",
      "description": "Container message for hash values.",
      "properties": {
        "value": {
          "format": "byte",
          "description": "Required. The hash value.",
          "type": "string"
        },
        "type": {
          "description": "Required. The type of hash that was performed.",
          "enum": [
            "HASH_TYPE_UNSPECIFIED",
            "SHA256"
          ],
          "enumDescriptions": [
            "Unknown.",
            "A SHA-256 hash."
          ],
          "type": "string"
        }
      },
      "id": "Hash"
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse"
    },
    "Fingerprint": {
      "type": "object",
      "id": "Fingerprint",
      "properties": {
        "v2Blob": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. The ordered list of v2 blobs that represent a given image."
        },
        "v1Name": {
          "description": "Required. The layer ID of the final layer in the Docker image's v1 representation.",
          "type": "string"
        },
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.",
          "type": "string"
        }
      },
      "description": "A set of properties that uniquely identify a given Docker image."
    }
  },
  "id": "containeranalysis:v1beta1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "title": "Container Analysis API",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "basePath": "",
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "name": "containeranalysis"
}
