/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * Configuration for vector indexing.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1FeatureViewIndexConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Configuration options for using brute force search, which simply implements the
   * standard linear search in the database for each query. It is primarily meant for benchmarking
   * and to generate the ground truth for approximate search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1FeatureViewIndexConfigBruteForceConfig bruteForceConfig;

  /**
   * Optional. Column of crowding. This column contains crowding attribute which is a constraint on
   * a neighbor list produced by FeatureOnlineStoreService.SearchNearestEntities to diversify search
   * results. If NearestNeighborQuery.per_crowding_attribute_neighbor_count is set to K in
   * SearchNearestEntitiesRequest, it's guaranteed that no more than K entities of the same crowding
   * attribute are returned in the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crowdingColumn;

  /**
   * Optional. The distance measure used in nearest neighbor search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distanceMeasureType;

  /**
   * Optional. Column of embedding. This column contains the source data to create index for vector
   * search. embedding_column must be set when using vector search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String embeddingColumn;

  /**
   * Optional. The number of dimensions of the input embedding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer embeddingDimension;

  /**
   * Optional. Columns of features that're used to filter vector search results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> filterColumns;

  /**
   * Optional. Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
   * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1FeatureViewIndexConfigTreeAHConfig treeAhConfig;

  /**
   * Optional. Configuration options for using brute force search, which simply implements the
   * standard linear search in the database for each query. It is primarily meant for benchmarking
   * and to generate the ground truth for approximate search.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfigBruteForceConfig getBruteForceConfig() {
    return bruteForceConfig;
  }

  /**
   * Optional. Configuration options for using brute force search, which simply implements the
   * standard linear search in the database for each query. It is primarily meant for benchmarking
   * and to generate the ground truth for approximate search.
   * @param bruteForceConfig bruteForceConfig or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setBruteForceConfig(GoogleCloudAiplatformV1beta1FeatureViewIndexConfigBruteForceConfig bruteForceConfig) {
    this.bruteForceConfig = bruteForceConfig;
    return this;
  }

  /**
   * Optional. Column of crowding. This column contains crowding attribute which is a constraint on
   * a neighbor list produced by FeatureOnlineStoreService.SearchNearestEntities to diversify search
   * results. If NearestNeighborQuery.per_crowding_attribute_neighbor_count is set to K in
   * SearchNearestEntitiesRequest, it's guaranteed that no more than K entities of the same crowding
   * attribute are returned in the response.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrowdingColumn() {
    return crowdingColumn;
  }

  /**
   * Optional. Column of crowding. This column contains crowding attribute which is a constraint on
   * a neighbor list produced by FeatureOnlineStoreService.SearchNearestEntities to diversify search
   * results. If NearestNeighborQuery.per_crowding_attribute_neighbor_count is set to K in
   * SearchNearestEntitiesRequest, it's guaranteed that no more than K entities of the same crowding
   * attribute are returned in the response.
   * @param crowdingColumn crowdingColumn or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setCrowdingColumn(java.lang.String crowdingColumn) {
    this.crowdingColumn = crowdingColumn;
    return this;
  }

  /**
   * Optional. The distance measure used in nearest neighbor search.
   * @return value or {@code null} for none
   */
  public java.lang.String getDistanceMeasureType() {
    return distanceMeasureType;
  }

  /**
   * Optional. The distance measure used in nearest neighbor search.
   * @param distanceMeasureType distanceMeasureType or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setDistanceMeasureType(java.lang.String distanceMeasureType) {
    this.distanceMeasureType = distanceMeasureType;
    return this;
  }

  /**
   * Optional. Column of embedding. This column contains the source data to create index for vector
   * search. embedding_column must be set when using vector search.
   * @return value or {@code null} for none
   */
  public java.lang.String getEmbeddingColumn() {
    return embeddingColumn;
  }

  /**
   * Optional. Column of embedding. This column contains the source data to create index for vector
   * search. embedding_column must be set when using vector search.
   * @param embeddingColumn embeddingColumn or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setEmbeddingColumn(java.lang.String embeddingColumn) {
    this.embeddingColumn = embeddingColumn;
    return this;
  }

  /**
   * Optional. The number of dimensions of the input embedding.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEmbeddingDimension() {
    return embeddingDimension;
  }

  /**
   * Optional. The number of dimensions of the input embedding.
   * @param embeddingDimension embeddingDimension or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setEmbeddingDimension(java.lang.Integer embeddingDimension) {
    this.embeddingDimension = embeddingDimension;
    return this;
  }

  /**
   * Optional. Columns of features that're used to filter vector search results.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFilterColumns() {
    return filterColumns;
  }

  /**
   * Optional. Columns of features that're used to filter vector search results.
   * @param filterColumns filterColumns or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setFilterColumns(java.util.List<java.lang.String> filterColumns) {
    this.filterColumns = filterColumns;
    return this;
  }

  /**
   * Optional. Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
   * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfigTreeAHConfig getTreeAhConfig() {
    return treeAhConfig;
  }

  /**
   * Optional. Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
   * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
   * @param treeAhConfig treeAhConfig or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig setTreeAhConfig(GoogleCloudAiplatformV1beta1FeatureViewIndexConfigTreeAHConfig treeAhConfig) {
    this.treeAhConfig = treeAhConfig;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1FeatureViewIndexConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1FeatureViewIndexConfig clone() {
    return (GoogleCloudAiplatformV1beta1FeatureViewIndexConfig) super.clone();
  }

}
