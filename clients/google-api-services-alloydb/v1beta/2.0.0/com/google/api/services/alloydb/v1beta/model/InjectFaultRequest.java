/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alloydb.v1beta.model;

/**
 * Message for triggering fault injection on an instance
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AlloyDB API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class InjectFaultRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The type of fault to be injected in an instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String faultType;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server ignores the request if it has already been completed.
   * The server guarantees that for at least 60 minutes since the first request. For example,
   * consider a situation where you make an initial request and the request times out. If you make
   * the request again with the same request ID, the server can check if the original operation with
   * the same request ID was received, and if so, ignores the second request. This prevents clients
   * from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
   * exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requestId;

  /**
   * Optional. If set, performs request validation, for example, permission checks and any other
   * type of validation, but does not actually execute the create request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean validateOnly;

  /**
   * Required. The type of fault to be injected in an instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getFaultType() {
    return faultType;
  }

  /**
   * Required. The type of fault to be injected in an instance.
   * @param faultType faultType or {@code null} for none
   */
  public InjectFaultRequest setFaultType(java.lang.String faultType) {
    this.faultType = faultType;
    return this;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server ignores the request if it has already been completed.
   * The server guarantees that for at least 60 minutes since the first request. For example,
   * consider a situation where you make an initial request and the request times out. If you make
   * the request again with the same request ID, the server can check if the original operation with
   * the same request ID was received, and if so, ignores the second request. This prevents clients
   * from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
   * exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @return value or {@code null} for none
   */
  public java.lang.String getRequestId() {
    return requestId;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server ignores the request if it has already been completed.
   * The server guarantees that for at least 60 minutes since the first request. For example,
   * consider a situation where you make an initial request and the request times out. If you make
   * the request again with the same request ID, the server can check if the original operation with
   * the same request ID was received, and if so, ignores the second request. This prevents clients
   * from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
   * exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @param requestId requestId or {@code null} for none
   */
  public InjectFaultRequest setRequestId(java.lang.String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. If set, performs request validation, for example, permission checks and any other
   * type of validation, but does not actually execute the create request.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getValidateOnly() {
    return validateOnly;
  }

  /**
   * Optional. If set, performs request validation, for example, permission checks and any other
   * type of validation, but does not actually execute the create request.
   * @param validateOnly validateOnly or {@code null} for none
   */
  public InjectFaultRequest setValidateOnly(java.lang.Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  @Override
  public InjectFaultRequest set(String fieldName, Object value) {
    return (InjectFaultRequest) super.set(fieldName, value);
  }

  @Override
  public InjectFaultRequest clone() {
    return (InjectFaultRequest) super.clone();
  }

}
