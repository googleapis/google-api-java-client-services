/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.batch.v1.model;

/**
 * A TaskGroup contains one or multiple Tasks that share the same Runnable but with different
 * runtime parameters.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Batch API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TaskGroup extends com.google.api.client.json.GenericJson {

  /**
   * Output only. TaskGroup name. The system generates this field based on parent Job name. For
   * example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field
   * parallelism must be 1 if the scheduling_policy is IN_ORDER.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long parallelism;

  /**
   * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch
   * tasks in the same TaskGroup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean permissiveSsh;

  /**
   * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set
   * the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireHostsFile;

  /**
   * Number of Tasks in the TaskGroup. Default is 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long taskCount;

  /**
   * Max number of tasks that can be run on a VM at the same time. If not specified, the system will
   * decide a value based on available compute resources on a VM and task requirements.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long taskCountPerNode;

  /**
   * An array of environment variable mappings, which are passed to Tasks with matching indices. If
   * task_environments is used then task_count should not be specified in the request (and will be
   * ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and
   * BATCH_TASK_COUNT environment variable, in addition to any environment variables set in
   * task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the
   * specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments
   * supports up to 200 entries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Environment> taskEnvironments;

  static {
    // hack to force ProGuard to consider Environment used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Environment.class);
  }

  /**
   * Required. Tasks in the group share the same task spec.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TaskSpec taskSpec;

  /**
   * Output only. TaskGroup name. The system generates this field based on parent Job name. For
   * example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. TaskGroup name. The system generates this field based on parent Job name. For
   * example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
   * @param name name or {@code null} for none
   */
  public TaskGroup setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field
   * parallelism must be 1 if the scheduling_policy is IN_ORDER.
   * @return value or {@code null} for none
   */
  public java.lang.Long getParallelism() {
    return parallelism;
  }

  /**
   * Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field
   * parallelism must be 1 if the scheduling_policy is IN_ORDER.
   * @param parallelism parallelism or {@code null} for none
   */
  public TaskGroup setParallelism(java.lang.Long parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch
   * tasks in the same TaskGroup.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPermissiveSsh() {
    return permissiveSsh;
  }

  /**
   * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch
   * tasks in the same TaskGroup.
   * @param permissiveSsh permissiveSsh or {@code null} for none
   */
  public TaskGroup setPermissiveSsh(java.lang.Boolean permissiveSsh) {
    this.permissiveSsh = permissiveSsh;
    return this;
  }

  /**
   * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set
   * the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireHostsFile() {
    return requireHostsFile;
  }

  /**
   * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set
   * the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
   * @param requireHostsFile requireHostsFile or {@code null} for none
   */
  public TaskGroup setRequireHostsFile(java.lang.Boolean requireHostsFile) {
    this.requireHostsFile = requireHostsFile;
    return this;
  }

  /**
   * Number of Tasks in the TaskGroup. Default is 1.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTaskCount() {
    return taskCount;
  }

  /**
   * Number of Tasks in the TaskGroup. Default is 1.
   * @param taskCount taskCount or {@code null} for none
   */
  public TaskGroup setTaskCount(java.lang.Long taskCount) {
    this.taskCount = taskCount;
    return this;
  }

  /**
   * Max number of tasks that can be run on a VM at the same time. If not specified, the system will
   * decide a value based on available compute resources on a VM and task requirements.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTaskCountPerNode() {
    return taskCountPerNode;
  }

  /**
   * Max number of tasks that can be run on a VM at the same time. If not specified, the system will
   * decide a value based on available compute resources on a VM and task requirements.
   * @param taskCountPerNode taskCountPerNode or {@code null} for none
   */
  public TaskGroup setTaskCountPerNode(java.lang.Long taskCountPerNode) {
    this.taskCountPerNode = taskCountPerNode;
    return this;
  }

  /**
   * An array of environment variable mappings, which are passed to Tasks with matching indices. If
   * task_environments is used then task_count should not be specified in the request (and will be
   * ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and
   * BATCH_TASK_COUNT environment variable, in addition to any environment variables set in
   * task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the
   * specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments
   * supports up to 200 entries.
   * @return value or {@code null} for none
   */
  public java.util.List<Environment> getTaskEnvironments() {
    return taskEnvironments;
  }

  /**
   * An array of environment variable mappings, which are passed to Tasks with matching indices. If
   * task_environments is used then task_count should not be specified in the request (and will be
   * ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and
   * BATCH_TASK_COUNT environment variable, in addition to any environment variables set in
   * task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the
   * specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments
   * supports up to 200 entries.
   * @param taskEnvironments taskEnvironments or {@code null} for none
   */
  public TaskGroup setTaskEnvironments(java.util.List<Environment> taskEnvironments) {
    this.taskEnvironments = taskEnvironments;
    return this;
  }

  /**
   * Required. Tasks in the group share the same task spec.
   * @return value or {@code null} for none
   */
  public TaskSpec getTaskSpec() {
    return taskSpec;
  }

  /**
   * Required. Tasks in the group share the same task spec.
   * @param taskSpec taskSpec or {@code null} for none
   */
  public TaskGroup setTaskSpec(TaskSpec taskSpec) {
    this.taskSpec = taskSpec;
    return this;
  }

  @Override
  public TaskGroup set(String fieldName, Object value) {
    return (TaskGroup) super.set(fieldName, value);
  }

  @Override
  public TaskGroup clone() {
    return (TaskGroup) super.clone();
  }

}
