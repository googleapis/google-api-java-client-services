/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * Configuration for determining how redaction of images should occur.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Loss Prevention (DLP) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2ImageTransformation extends com.google.api.client.json.GenericJson {

  /**
   * Apply transformation to all findings not specified in other ImageTransformation's
   * selected_info_types. Only one instance is allowed within the ImageTransformations message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2AllInfoTypes allInfoTypes;

  /**
   * Apply transformation to all text that doesn't match an infoType. Only one instance is allowed
   * within the ImageTransformations message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2AllText allText;

  /**
   * The color to use when redacting content from an image. If not specified, the default is black.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2Color redactionColor;

  /**
   * Apply transformation to the selected info_types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2SelectedInfoTypes selectedInfoTypes;

  /**
   * Apply transformation to all findings not specified in other ImageTransformation's
   * selected_info_types. Only one instance is allowed within the ImageTransformations message.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2AllInfoTypes getAllInfoTypes() {
    return allInfoTypes;
  }

  /**
   * Apply transformation to all findings not specified in other ImageTransformation's
   * selected_info_types. Only one instance is allowed within the ImageTransformations message.
   * @param allInfoTypes allInfoTypes or {@code null} for none
   */
  public GooglePrivacyDlpV2ImageTransformation setAllInfoTypes(GooglePrivacyDlpV2AllInfoTypes allInfoTypes) {
    this.allInfoTypes = allInfoTypes;
    return this;
  }

  /**
   * Apply transformation to all text that doesn't match an infoType. Only one instance is allowed
   * within the ImageTransformations message.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2AllText getAllText() {
    return allText;
  }

  /**
   * Apply transformation to all text that doesn't match an infoType. Only one instance is allowed
   * within the ImageTransformations message.
   * @param allText allText or {@code null} for none
   */
  public GooglePrivacyDlpV2ImageTransformation setAllText(GooglePrivacyDlpV2AllText allText) {
    this.allText = allText;
    return this;
  }

  /**
   * The color to use when redacting content from an image. If not specified, the default is black.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2Color getRedactionColor() {
    return redactionColor;
  }

  /**
   * The color to use when redacting content from an image. If not specified, the default is black.
   * @param redactionColor redactionColor or {@code null} for none
   */
  public GooglePrivacyDlpV2ImageTransformation setRedactionColor(GooglePrivacyDlpV2Color redactionColor) {
    this.redactionColor = redactionColor;
    return this;
  }

  /**
   * Apply transformation to the selected info_types.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2SelectedInfoTypes getSelectedInfoTypes() {
    return selectedInfoTypes;
  }

  /**
   * Apply transformation to the selected info_types.
   * @param selectedInfoTypes selectedInfoTypes or {@code null} for none
   */
  public GooglePrivacyDlpV2ImageTransformation setSelectedInfoTypes(GooglePrivacyDlpV2SelectedInfoTypes selectedInfoTypes) {
    this.selectedInfoTypes = selectedInfoTypes;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2ImageTransformation set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2ImageTransformation) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2ImageTransformation clone() {
    return (GooglePrivacyDlpV2ImageTransformation) super.clone();
  }

}
