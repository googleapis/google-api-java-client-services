/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * String filter is used to search a subset of the entities by using boolean rules. For example: if
 * a query specifies string filter with 'name = color, allow_tokens = {red, blue}, deny_tokens =
 * {purple}',' then that query will match entities that are red or blue, but if those points are
 * also purple, then they will be excluded even if they are red/blue. Only string filter is
 * supported for now, numeric filter will be supported in the near future.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The allowed tokens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowTokens;

  /**
   * Optional. The denied tokens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> denyTokens;

  /**
   * Required. Column names in BigQuery that used as filters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The allowed tokens.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowTokens() {
    return allowTokens;
  }

  /**
   * Optional. The allowed tokens.
   * @param allowTokens allowTokens or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter setAllowTokens(java.util.List<java.lang.String> allowTokens) {
    this.allowTokens = allowTokens;
    return this;
  }

  /**
   * Optional. The denied tokens.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDenyTokens() {
    return denyTokens;
  }

  /**
   * Optional. The denied tokens.
   * @param denyTokens denyTokens or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter setDenyTokens(java.util.List<java.lang.String> denyTokens) {
    this.denyTokens = denyTokens;
    return this;
  }

  /**
   * Required. Column names in BigQuery that used as filters.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. Column names in BigQuery that used as filters.
   * @param name name or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter clone() {
    return (GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter) super.clone();
  }

}
