/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasedatabase.v1beta;

/**
 * Service definition for FirebaseRealtimeDatabase (v1beta).
 *
 * <p>
 * The Firebase Realtime Database Management API enables programmatic provisioning and management of Realtime Database instances.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/reference/rest/database/database-management/rest/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseRealtimeDatabaseRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseRealtimeDatabase extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Firebase Realtime Database Management API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebasedatabase.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebasedatabase.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseRealtimeDatabase(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseRealtimeDatabase(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseRealtimeDatabase firebasedatabase = new FirebaseRealtimeDatabase(...);}
   *   {@code FirebaseRealtimeDatabase.Projects.List request = firebasedatabase.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseRealtimeDatabase firebasedatabase = new FirebaseRealtimeDatabase(...);}
     *   {@code FirebaseRealtimeDatabase.Locations.List request = firebasedatabase.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Instances collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseRealtimeDatabase firebasedatabase = new FirebaseRealtimeDatabase(...);}
       *   {@code FirebaseRealtimeDatabase.Instances.List request = firebasedatabase.instances().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Instances instances() {
        return new Instances();
      }

      /**
       * The "instances" collection of methods.
       */
      public class Instances {

        /**
         * Requests that a new DatabaseInstance be created. The state of a successfully created
         * DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be
         * upgraded using the Cloud Billing API
         * https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might
         * take a few minutes for billing enablement state to propagate to Firebase systems.
         *
         * Create a request for the method "instances.create".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent The parent project for which to create a database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}`.
         * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance> {

          private static final String REST_PATH = "v1beta/{+parent}/instances";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Requests that a new DatabaseInstance be created. The state of a successfully created
           * DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be
           * upgraded using the Cloud Billing API
           * https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it
           * might take a few minutes for billing enablement state to propagate to Firebase systems.
           *
           * Create a request for the method "instances.create".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The parent project for which to create a database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}`.
           * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance content) {
            super(FirebaseRealtimeDatabase.this, "POST", REST_PATH, content, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent project for which to create a database instance, in the form: `projects
           * /{project-number}/locations/{location-id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent project for which to create a database instance, in the form: `projects/{project-
         number}/locations/{location-id}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent project for which to create a database instance, in the form: `projects
           * /{project-number}/locations/{location-id}`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** The globally unique identifier of the database instance. */
          @com.google.api.client.util.Key
          private java.lang.String databaseId;

          /** The globally unique identifier of the database instance.
           */
          public java.lang.String getDatabaseId() {
            return databaseId;
          }

          /** The globally unique identifier of the database instance. */
          public Create setDatabaseId(java.lang.String databaseId) {
            this.databaseId = databaseId;
            return this;
          }

          /** When set to true, the request will be validated but not submitted. */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** When set to true, the request will be validated but not submitted.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /** When set to true, the request will be validated but not submitted. */
          public Create setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Marks a DatabaseInstance to be deleted. The DatabaseInstance will be purged within 30 days. The
         * default database cannot be deleted. IDs for deleted database instances may never be recovered or
         * re-used. The Database may only be deleted if it is already in a DISABLED state.
         *
         * Create a request for the method "instances.delete".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Marks a DatabaseInstance to be deleted. The DatabaseInstance will be purged within 30 days. The
           * default database cannot be deleted. IDs for deleted database instances may never be recovered
           * or re-used. The Database may only be deleted if it is already in a DISABLED state.
           *
           * Create a request for the method "instances.delete".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseRealtimeDatabase.this, "DELETE", REST_PATH, null, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully qualified resource name of the database instance, in the form: `projects/{project-
         number}/locations/{location-id}/instances/{database-id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Disables a DatabaseInstance. The database can be re-enabled later using ReenableDatabaseInstance.
         * When a database is disabled, all reads and writes are denied, including view access in the
         * Firebase console.
         *
         * Create a request for the method "instances.disable".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link Disable#execute()} method to invoke the remote operation.
         *
         * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
         * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.DisableDatabaseInstanceRequest}
         * @return the request
         */
        public Disable disable(java.lang.String name, com.google.api.services.firebasedatabase.v1beta.model.DisableDatabaseInstanceRequest content) throws java.io.IOException {
          Disable result = new Disable(name, content);
          initialize(result);
          return result;
        }

        public class Disable extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance> {

          private static final String REST_PATH = "v1beta/{+name}:disable";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Disables a DatabaseInstance. The database can be re-enabled later using
           * ReenableDatabaseInstance. When a database is disabled, all reads and writes are denied,
           * including view access in the Firebase console.
           *
           * Create a request for the method "instances.disable".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link Disable#execute()} method to invoke the remote operation.
           * <p> {@link
           * Disable#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
           * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.DisableDatabaseInstanceRequest}
           * @since 1.13
           */
          protected Disable(java.lang.String name, com.google.api.services.firebasedatabase.v1beta.model.DisableDatabaseInstanceRequest content) {
            super(FirebaseRealtimeDatabase.this, "POST", REST_PATH, content, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public Disable set$Xgafv(java.lang.String $Xgafv) {
            return (Disable) super.set$Xgafv($Xgafv);
          }

          @Override
          public Disable setAccessToken(java.lang.String accessToken) {
            return (Disable) super.setAccessToken(accessToken);
          }

          @Override
          public Disable setAlt(java.lang.String alt) {
            return (Disable) super.setAlt(alt);
          }

          @Override
          public Disable setCallback(java.lang.String callback) {
            return (Disable) super.setCallback(callback);
          }

          @Override
          public Disable setFields(java.lang.String fields) {
            return (Disable) super.setFields(fields);
          }

          @Override
          public Disable setKey(java.lang.String key) {
            return (Disable) super.setKey(key);
          }

          @Override
          public Disable setOauthToken(java.lang.String oauthToken) {
            return (Disable) super.setOauthToken(oauthToken);
          }

          @Override
          public Disable setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Disable) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Disable setQuotaUser(java.lang.String quotaUser) {
            return (Disable) super.setQuotaUser(quotaUser);
          }

          @Override
          public Disable setUploadType(java.lang.String uploadType) {
            return (Disable) super.setUploadType(uploadType);
          }

          @Override
          public Disable setUploadProtocol(java.lang.String uploadProtocol) {
            return (Disable) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully qualified resource name of the database instance, in the form: `projects/{project-
         number}/locations/{location-id}/instances/{database-id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          public Disable setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Disable set(String parameterName, Object value) {
            return (Disable) super.set(parameterName, value);
          }
        }
        /**
         * Gets the DatabaseInstance identified by the specified resource name.
         *
         * Create a request for the method "instances.get".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`. `database-id` is a globally
         *        unique identifier across all parent collections. For convenience, this method allows you
         *        to supply `-` as a wildcard character in place of specific collections under `projects`
         *        and `locations`. The resulting wildcarding form of the method is:
         *        `projects/-/locations/-/instances/{database-id}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Gets the DatabaseInstance identified by the specified resource name.
           *
           * Create a request for the method "instances.get".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`. `database-id` is a globally
         *        unique identifier across all parent collections. For convenience, this method allows you
         *        to supply `-` as a wildcard character in place of specific collections under `projects`
         *        and `locations`. The resulting wildcarding form of the method is:
         *        `projects/-/locations/-/instances/{database-id}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseRealtimeDatabase.this, "GET", REST_PATH, null, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`. `database-id` is a
           * globally unique identifier across all parent collections. For convenience, this method
           * allows you to supply `-` as a wildcard character in place of specific collections under
           * `projects` and `locations`. The resulting wildcarding form of the method is:
           * `projects/-/locations/-/instances/{database-id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully qualified resource name of the database instance, in the form: `projects/{project-
         number}/locations/{location-id}/instances/{database-id}`. `database-id` is a globally unique
         identifier across all parent collections. For convenience, this method allows you to supply `-` as
         a wildcard character in place of specific collections under `projects` and `locations`. The
         resulting wildcarding form of the method is: `projects/-/locations/-/instances/{database-id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`. `database-id` is a
           * globally unique identifier across all parent collections. For convenience, this method
           * allows you to supply `-` as a wildcard character in place of specific collections under
           * `projects` and `locations`. The resulting wildcarding form of the method is:
           * `projects/-/locations/-/instances/{database-id}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists each DatabaseInstance associated with the specified parent project. The list items are
         * returned in no particular order, but will be a consistent view of the database instances when
         * additional requests are made with a `pageToken`. The resulting list contains instances in any
         * STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for consistent
         * reads.
         *
         * Create a request for the method "instances.list".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent The parent project for which to list database instances, in the form: `projects/{project-
         *        number}/locations/{location-id}` To list across all locations, use a parent in the form:
         *        `projects/{project-number}/locations/-`
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.ListDatabaseInstancesResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/instances";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists each DatabaseInstance associated with the specified parent project. The list items are
           * returned in no particular order, but will be a consistent view of the database instances when
           * additional requests are made with a `pageToken`. The resulting list contains instances in any
           * STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for consistent
           * reads.
           *
           * Create a request for the method "instances.list".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The parent project for which to list database instances, in the form: `projects/{project-
         *        number}/locations/{location-id}` To list across all locations, use a parent in the form:
         *        `projects/{project-number}/locations/-`
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseRealtimeDatabase.this, "GET", REST_PATH, null, com.google.api.services.firebasedatabase.v1beta.model.ListDatabaseInstancesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent project for which to list database instances, in the form: `projects
           * /{project-number}/locations/{location-id}` To list across all locations, use a parent
           * in the form: `projects/{project-number}/locations/-`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent project for which to list database instances, in the form: `projects/{project-
         number}/locations/{location-id}` To list across all locations, use a parent in the form: `projects
         /{project-number}/locations/-`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent project for which to list database instances, in the form: `projects
           * /{project-number}/locations/{location-id}` To list across all locations, use a parent
           * in the form: `projects/{project-number}/locations/-`
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of database instances to return in the response. The server may
           * return fewer than this at its discretion. If no value is specified (or too large a
           * value is specified), then the server will impose its own limit.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of database instances to return in the response. The server may return fewer
         than this at its discretion. If no value is specified (or too large a value is specified), then the
         server will impose its own limit.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of database instances to return in the response. The server may
           * return fewer than this at its discretion. If no value is specified (or too large a
           * value is specified), then the server will impose its own limit.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Token returned from a previous call to `ListDatabaseInstances` indicating where in the
           * set of database instances to resume listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Token returned from a previous call to `ListDatabaseInstances` indicating where in the set of
         database instances to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Token returned from a previous call to `ListDatabaseInstances` indicating where in the
           * set of database instances to resume listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Enables a DatabaseInstance. The database must have been disabled previously using
         * DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE.
         *
         * Create a request for the method "instances.reenable".
         *
         * This request holds the parameters needed by the firebasedatabase server.  After setting any
         * optional parameters, call the {@link Reenable#execute()} method to invoke the remote operation.
         *
         * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
         * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.ReenableDatabaseInstanceRequest}
         * @return the request
         */
        public Reenable reenable(java.lang.String name, com.google.api.services.firebasedatabase.v1beta.model.ReenableDatabaseInstanceRequest content) throws java.io.IOException {
          Reenable result = new Reenable(name, content);
          initialize(result);
          return result;
        }

        public class Reenable extends FirebaseRealtimeDatabaseRequest<com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance> {

          private static final String REST_PATH = "v1beta/{+name}:reenable";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/instances/[^/]+$");

          /**
           * Enables a DatabaseInstance. The database must have been disabled previously using
           * DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE.
           *
           * Create a request for the method "instances.reenable".
           *
           * This request holds the parameters needed by the the firebasedatabase server.  After setting any
           * optional parameters, call the {@link Reenable#execute()} method to invoke the remote operation.
           * <p> {@link
           * Reenable#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully qualified resource name of the database instance, in the form: `projects/{project-
         *        number}/locations/{location-id}/instances/{database-id}`
           * @param content the {@link com.google.api.services.firebasedatabase.v1beta.model.ReenableDatabaseInstanceRequest}
           * @since 1.13
           */
          protected Reenable(java.lang.String name, com.google.api.services.firebasedatabase.v1beta.model.ReenableDatabaseInstanceRequest content) {
            super(FirebaseRealtimeDatabase.this, "POST", REST_PATH, content, com.google.api.services.firebasedatabase.v1beta.model.DatabaseInstance.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public Reenable set$Xgafv(java.lang.String $Xgafv) {
            return (Reenable) super.set$Xgafv($Xgafv);
          }

          @Override
          public Reenable setAccessToken(java.lang.String accessToken) {
            return (Reenable) super.setAccessToken(accessToken);
          }

          @Override
          public Reenable setAlt(java.lang.String alt) {
            return (Reenable) super.setAlt(alt);
          }

          @Override
          public Reenable setCallback(java.lang.String callback) {
            return (Reenable) super.setCallback(callback);
          }

          @Override
          public Reenable setFields(java.lang.String fields) {
            return (Reenable) super.setFields(fields);
          }

          @Override
          public Reenable setKey(java.lang.String key) {
            return (Reenable) super.setKey(key);
          }

          @Override
          public Reenable setOauthToken(java.lang.String oauthToken) {
            return (Reenable) super.setOauthToken(oauthToken);
          }

          @Override
          public Reenable setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Reenable) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Reenable setQuotaUser(java.lang.String quotaUser) {
            return (Reenable) super.setQuotaUser(quotaUser);
          }

          @Override
          public Reenable setUploadType(java.lang.String uploadType) {
            return (Reenable) super.setUploadType(uploadType);
          }

          @Override
          public Reenable setUploadProtocol(java.lang.String uploadProtocol) {
            return (Reenable) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully qualified resource name of the database instance, in the form: `projects/{project-
         number}/locations/{location-id}/instances/{database-id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully qualified resource name of the database instance, in the form: `projects
           * /{project-number}/locations/{location-id}/instances/{database-id}`
           */
          public Reenable setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/instances/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Reenable set(String parameterName, Object value) {
            return (Reenable) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link FirebaseRealtimeDatabase}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseRealtimeDatabase}. */
    @Override
    public FirebaseRealtimeDatabase build() {
      return new FirebaseRealtimeDatabase(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseRealtimeDatabaseRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseRealtimeDatabaseRequestInitializer(
        FirebaseRealtimeDatabaseRequestInitializer firebaserealtimedatabaseRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebaserealtimedatabaseRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
