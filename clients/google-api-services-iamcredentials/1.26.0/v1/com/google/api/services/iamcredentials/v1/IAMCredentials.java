/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.iamcredentials.v1;

/**
 * Service definition for IAMCredentials (v1).
 *
 * <p>
 * Creates short-lived, limited-privilege credentials for IAM service accounts.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link IAMCredentialsRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class IAMCredentials extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.26.0 of the IAM Service Account Credentials API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://iamcredentials.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public IAMCredentials(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  IAMCredentials(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code IAMCredentials iamcredentials = new IAMCredentials(...);}
   *   {@code IAMCredentials.Projects.List request = iamcredentials.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the ServiceAccounts collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code IAMCredentials iamcredentials = new IAMCredentials(...);}
     *   {@code IAMCredentials.ServiceAccounts.List request = iamcredentials.serviceAccounts().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ServiceAccounts serviceAccounts() {
      return new ServiceAccounts();
    }

    /**
     * The "serviceAccounts" collection of methods.
     */
    public class ServiceAccounts {

      /**
       * Generates an OAuth 2.0 access token for a service account.
       *
       * Create a request for the method "serviceAccounts.generateAccessToken".
       *
       * This request holds the parameters needed by the iamcredentials server.  After setting any
       * optional parameters, call the {@link GenerateAccessToken#execute()} method to invoke the remote
       * operation.
       *
       * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
       * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenRequest}
       * @return the request
       */
      public GenerateAccessToken generateAccessToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenRequest content) throws java.io.IOException {
        GenerateAccessToken result = new GenerateAccessToken(name, content);
        initialize(result);
        return result;
      }

      public class GenerateAccessToken extends IAMCredentialsRequest<com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenResponse> {

        private static final String REST_PATH = "v1/{+name}:generateAccessToken";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/serviceAccounts/[^/]+$");

        /**
         * Generates an OAuth 2.0 access token for a service account.
         *
         * Create a request for the method "serviceAccounts.generateAccessToken".
         *
         * This request holds the parameters needed by the the iamcredentials server.  After setting any
         * optional parameters, call the {@link GenerateAccessToken#execute()} method to invoke the remote
         * operation. <p> {@link GenerateAccessToken#initialize(com.google.api.client.googleapis.services.
         * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
         * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenRequest}
         * @since 1.13
         */
        protected GenerateAccessToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenRequest content) {
          super(IAMCredentials.this, "POST", REST_PATH, content, com.google.api.services.iamcredentials.v1.model.GenerateAccessTokenResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
        }

        @Override
        public GenerateAccessToken set$Xgafv(java.lang.String $Xgafv) {
          return (GenerateAccessToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public GenerateAccessToken setAccessToken(java.lang.String accessToken) {
          return (GenerateAccessToken) super.setAccessToken(accessToken);
        }

        @Override
        public GenerateAccessToken setAlt(java.lang.String alt) {
          return (GenerateAccessToken) super.setAlt(alt);
        }

        @Override
        public GenerateAccessToken setCallback(java.lang.String callback) {
          return (GenerateAccessToken) super.setCallback(callback);
        }

        @Override
        public GenerateAccessToken setFields(java.lang.String fields) {
          return (GenerateAccessToken) super.setFields(fields);
        }

        @Override
        public GenerateAccessToken setKey(java.lang.String key) {
          return (GenerateAccessToken) super.setKey(key);
        }

        @Override
        public GenerateAccessToken setOauthToken(java.lang.String oauthToken) {
          return (GenerateAccessToken) super.setOauthToken(oauthToken);
        }

        @Override
        public GenerateAccessToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GenerateAccessToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GenerateAccessToken setQuotaUser(java.lang.String quotaUser) {
          return (GenerateAccessToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public GenerateAccessToken setUploadType(java.lang.String uploadType) {
          return (GenerateAccessToken) super.setUploadType(uploadType);
        }

        @Override
        public GenerateAccessToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (GenerateAccessToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the service account for which the credentials are requested, in the following
       format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is
       required; replacing it with a project ID is invalid.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        public GenerateAccessToken setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GenerateAccessToken set(String parameterName, Object value) {
          return (GenerateAccessToken) super.set(parameterName, value);
        }
      }
      /**
       * Generates an OpenID Connect ID token for a service account.
       *
       * Create a request for the method "serviceAccounts.generateIdToken".
       *
       * This request holds the parameters needed by the iamcredentials server.  After setting any
       * optional parameters, call the {@link GenerateIdToken#execute()} method to invoke the remote
       * operation.
       *
       * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
       * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateIdTokenRequest}
       * @return the request
       */
      public GenerateIdToken generateIdToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateIdTokenRequest content) throws java.io.IOException {
        GenerateIdToken result = new GenerateIdToken(name, content);
        initialize(result);
        return result;
      }

      public class GenerateIdToken extends IAMCredentialsRequest<com.google.api.services.iamcredentials.v1.model.GenerateIdTokenResponse> {

        private static final String REST_PATH = "v1/{+name}:generateIdToken";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/serviceAccounts/[^/]+$");

        /**
         * Generates an OpenID Connect ID token for a service account.
         *
         * Create a request for the method "serviceAccounts.generateIdToken".
         *
         * This request holds the parameters needed by the the iamcredentials server.  After setting any
         * optional parameters, call the {@link GenerateIdToken#execute()} method to invoke the remote
         * operation. <p> {@link GenerateIdToken#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
         * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateIdTokenRequest}
         * @since 1.13
         */
        protected GenerateIdToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateIdTokenRequest content) {
          super(IAMCredentials.this, "POST", REST_PATH, content, com.google.api.services.iamcredentials.v1.model.GenerateIdTokenResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
        }

        @Override
        public GenerateIdToken set$Xgafv(java.lang.String $Xgafv) {
          return (GenerateIdToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public GenerateIdToken setAccessToken(java.lang.String accessToken) {
          return (GenerateIdToken) super.setAccessToken(accessToken);
        }

        @Override
        public GenerateIdToken setAlt(java.lang.String alt) {
          return (GenerateIdToken) super.setAlt(alt);
        }

        @Override
        public GenerateIdToken setCallback(java.lang.String callback) {
          return (GenerateIdToken) super.setCallback(callback);
        }

        @Override
        public GenerateIdToken setFields(java.lang.String fields) {
          return (GenerateIdToken) super.setFields(fields);
        }

        @Override
        public GenerateIdToken setKey(java.lang.String key) {
          return (GenerateIdToken) super.setKey(key);
        }

        @Override
        public GenerateIdToken setOauthToken(java.lang.String oauthToken) {
          return (GenerateIdToken) super.setOauthToken(oauthToken);
        }

        @Override
        public GenerateIdToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GenerateIdToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GenerateIdToken setQuotaUser(java.lang.String quotaUser) {
          return (GenerateIdToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public GenerateIdToken setUploadType(java.lang.String uploadType) {
          return (GenerateIdToken) super.setUploadType(uploadType);
        }

        @Override
        public GenerateIdToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (GenerateIdToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the service account for which the credentials are requested, in the following
       format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is
       required; replacing it with a project ID is invalid.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        public GenerateIdToken setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GenerateIdToken set(String parameterName, Object value) {
          return (GenerateIdToken) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "serviceAccounts.generateIdentityBindingAccessToken".
       *
       * This request holds the parameters needed by the iamcredentials server.  After setting any
       * optional parameters, call the {@link GenerateIdentityBindingAccessToken#execute()} method to
       * invoke the remote operation.
       *
       * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
       * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenRequest}
       * @return the request
       */
      public GenerateIdentityBindingAccessToken generateIdentityBindingAccessToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenRequest content) throws java.io.IOException {
        GenerateIdentityBindingAccessToken result = new GenerateIdentityBindingAccessToken(name, content);
        initialize(result);
        return result;
      }

      public class GenerateIdentityBindingAccessToken extends IAMCredentialsRequest<com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenResponse> {

        private static final String REST_PATH = "v1/{+name}:generateIdentityBindingAccessToken";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/serviceAccounts/[^/]+$");

        /**
         * Create a request for the method "serviceAccounts.generateIdentityBindingAccessToken".
         *
         * This request holds the parameters needed by the the iamcredentials server.  After setting any
         * optional parameters, call the {@link GenerateIdentityBindingAccessToken#execute()} method to
         * invoke the remote operation. <p> {@link GenerateIdentityBindingAccessToken#initialize(com.googl
         * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
         * this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
         * @param content the {@link com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenRequest}
         * @since 1.13
         */
        protected GenerateIdentityBindingAccessToken(java.lang.String name, com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenRequest content) {
          super(IAMCredentials.this, "POST", REST_PATH, content, com.google.api.services.iamcredentials.v1.model.GenerateIdentityBindingAccessTokenResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
        }

        @Override
        public GenerateIdentityBindingAccessToken set$Xgafv(java.lang.String $Xgafv) {
          return (GenerateIdentityBindingAccessToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public GenerateIdentityBindingAccessToken setAccessToken(java.lang.String accessToken) {
          return (GenerateIdentityBindingAccessToken) super.setAccessToken(accessToken);
        }

        @Override
        public GenerateIdentityBindingAccessToken setAlt(java.lang.String alt) {
          return (GenerateIdentityBindingAccessToken) super.setAlt(alt);
        }

        @Override
        public GenerateIdentityBindingAccessToken setCallback(java.lang.String callback) {
          return (GenerateIdentityBindingAccessToken) super.setCallback(callback);
        }

        @Override
        public GenerateIdentityBindingAccessToken setFields(java.lang.String fields) {
          return (GenerateIdentityBindingAccessToken) super.setFields(fields);
        }

        @Override
        public GenerateIdentityBindingAccessToken setKey(java.lang.String key) {
          return (GenerateIdentityBindingAccessToken) super.setKey(key);
        }

        @Override
        public GenerateIdentityBindingAccessToken setOauthToken(java.lang.String oauthToken) {
          return (GenerateIdentityBindingAccessToken) super.setOauthToken(oauthToken);
        }

        @Override
        public GenerateIdentityBindingAccessToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GenerateIdentityBindingAccessToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GenerateIdentityBindingAccessToken setQuotaUser(java.lang.String quotaUser) {
          return (GenerateIdentityBindingAccessToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public GenerateIdentityBindingAccessToken setUploadType(java.lang.String uploadType) {
          return (GenerateIdentityBindingAccessToken) super.setUploadType(uploadType);
        }

        @Override
        public GenerateIdentityBindingAccessToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (GenerateIdentityBindingAccessToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the service account for which the credentials are requested, in the following
       format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is
       required; replacing it with a project ID is invalid.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        public GenerateIdentityBindingAccessToken setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GenerateIdentityBindingAccessToken set(String parameterName, Object value) {
          return (GenerateIdentityBindingAccessToken) super.set(parameterName, value);
        }
      }
      /**
       * Signs a blob using a service account's system-managed private key.
       *
       * Create a request for the method "serviceAccounts.signBlob".
       *
       * This request holds the parameters needed by the iamcredentials server.  After setting any
       * optional parameters, call the {@link SignBlob#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
       * @param content the {@link com.google.api.services.iamcredentials.v1.model.SignBlobRequest}
       * @return the request
       */
      public SignBlob signBlob(java.lang.String name, com.google.api.services.iamcredentials.v1.model.SignBlobRequest content) throws java.io.IOException {
        SignBlob result = new SignBlob(name, content);
        initialize(result);
        return result;
      }

      public class SignBlob extends IAMCredentialsRequest<com.google.api.services.iamcredentials.v1.model.SignBlobResponse> {

        private static final String REST_PATH = "v1/{+name}:signBlob";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/serviceAccounts/[^/]+$");

        /**
         * Signs a blob using a service account's system-managed private key.
         *
         * Create a request for the method "serviceAccounts.signBlob".
         *
         * This request holds the parameters needed by the the iamcredentials server.  After setting any
         * optional parameters, call the {@link SignBlob#execute()} method to invoke the remote operation.
         * <p> {@link
         * SignBlob#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
         * @param content the {@link com.google.api.services.iamcredentials.v1.model.SignBlobRequest}
         * @since 1.13
         */
        protected SignBlob(java.lang.String name, com.google.api.services.iamcredentials.v1.model.SignBlobRequest content) {
          super(IAMCredentials.this, "POST", REST_PATH, content, com.google.api.services.iamcredentials.v1.model.SignBlobResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
        }

        @Override
        public SignBlob set$Xgafv(java.lang.String $Xgafv) {
          return (SignBlob) super.set$Xgafv($Xgafv);
        }

        @Override
        public SignBlob setAccessToken(java.lang.String accessToken) {
          return (SignBlob) super.setAccessToken(accessToken);
        }

        @Override
        public SignBlob setAlt(java.lang.String alt) {
          return (SignBlob) super.setAlt(alt);
        }

        @Override
        public SignBlob setCallback(java.lang.String callback) {
          return (SignBlob) super.setCallback(callback);
        }

        @Override
        public SignBlob setFields(java.lang.String fields) {
          return (SignBlob) super.setFields(fields);
        }

        @Override
        public SignBlob setKey(java.lang.String key) {
          return (SignBlob) super.setKey(key);
        }

        @Override
        public SignBlob setOauthToken(java.lang.String oauthToken) {
          return (SignBlob) super.setOauthToken(oauthToken);
        }

        @Override
        public SignBlob setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SignBlob) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SignBlob setQuotaUser(java.lang.String quotaUser) {
          return (SignBlob) super.setQuotaUser(quotaUser);
        }

        @Override
        public SignBlob setUploadType(java.lang.String uploadType) {
          return (SignBlob) super.setUploadType(uploadType);
        }

        @Override
        public SignBlob setUploadProtocol(java.lang.String uploadProtocol) {
          return (SignBlob) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the service account for which the credentials are requested, in the following
       format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is
       required; replacing it with a project ID is invalid.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        public SignBlob setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public SignBlob set(String parameterName, Object value) {
          return (SignBlob) super.set(parameterName, value);
        }
      }
      /**
       * Signs a JWT using a service account's system-managed private key.
       *
       * Create a request for the method "serviceAccounts.signJwt".
       *
       * This request holds the parameters needed by the iamcredentials server.  After setting any
       * optional parameters, call the {@link SignJwt#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
       * @param content the {@link com.google.api.services.iamcredentials.v1.model.SignJwtRequest}
       * @return the request
       */
      public SignJwt signJwt(java.lang.String name, com.google.api.services.iamcredentials.v1.model.SignJwtRequest content) throws java.io.IOException {
        SignJwt result = new SignJwt(name, content);
        initialize(result);
        return result;
      }

      public class SignJwt extends IAMCredentialsRequest<com.google.api.services.iamcredentials.v1.model.SignJwtResponse> {

        private static final String REST_PATH = "v1/{+name}:signJwt";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/serviceAccounts/[^/]+$");

        /**
         * Signs a JWT using a service account's system-managed private key.
         *
         * Create a request for the method "serviceAccounts.signJwt".
         *
         * This request holds the parameters needed by the the iamcredentials server.  After setting any
         * optional parameters, call the {@link SignJwt#execute()} method to invoke the remote operation.
         * <p> {@link
         * SignJwt#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the service account for which the credentials
      are requested, in the following
       *        format:
      `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
       *        character is required; replacing it with a project ID is invalid.
         * @param content the {@link com.google.api.services.iamcredentials.v1.model.SignJwtRequest}
         * @since 1.13
         */
        protected SignJwt(java.lang.String name, com.google.api.services.iamcredentials.v1.model.SignJwtRequest content) {
          super(IAMCredentials.this, "POST", REST_PATH, content, com.google.api.services.iamcredentials.v1.model.SignJwtResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
        }

        @Override
        public SignJwt set$Xgafv(java.lang.String $Xgafv) {
          return (SignJwt) super.set$Xgafv($Xgafv);
        }

        @Override
        public SignJwt setAccessToken(java.lang.String accessToken) {
          return (SignJwt) super.setAccessToken(accessToken);
        }

        @Override
        public SignJwt setAlt(java.lang.String alt) {
          return (SignJwt) super.setAlt(alt);
        }

        @Override
        public SignJwt setCallback(java.lang.String callback) {
          return (SignJwt) super.setCallback(callback);
        }

        @Override
        public SignJwt setFields(java.lang.String fields) {
          return (SignJwt) super.setFields(fields);
        }

        @Override
        public SignJwt setKey(java.lang.String key) {
          return (SignJwt) super.setKey(key);
        }

        @Override
        public SignJwt setOauthToken(java.lang.String oauthToken) {
          return (SignJwt) super.setOauthToken(oauthToken);
        }

        @Override
        public SignJwt setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SignJwt) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SignJwt setQuotaUser(java.lang.String quotaUser) {
          return (SignJwt) super.setQuotaUser(quotaUser);
        }

        @Override
        public SignJwt setUploadType(java.lang.String uploadType) {
          return (SignJwt) super.setUploadType(uploadType);
        }

        @Override
        public SignJwt setUploadProtocol(java.lang.String uploadProtocol) {
          return (SignJwt) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the service account for which the credentials are requested, in the following
       format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is
       required; replacing it with a project ID is invalid.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the service account for which the credentials are requested, in the
         * following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-`
         * wildcard character is required; replacing it with a project ID is invalid.
         */
        public SignJwt setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/serviceAccounts/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public SignJwt set(String parameterName, Object value) {
          return (SignJwt) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link IAMCredentials}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link IAMCredentials}. */
    @Override
    public IAMCredentials build() {
      return new IAMCredentials(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link IAMCredentialsRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setIAMCredentialsRequestInitializer(
        IAMCredentialsRequestInitializer iamcredentialsRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(iamcredentialsRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
