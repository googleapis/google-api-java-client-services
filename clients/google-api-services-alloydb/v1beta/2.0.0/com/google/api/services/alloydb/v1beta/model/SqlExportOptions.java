/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alloydb.v1beta.model;

/**
 * Options for exporting data in SQL format.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AlloyDB API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SqlExportOptions extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If true, output commands to DROP all the dumped database objects prior to outputting
   * the commands for creating them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean cleanTargetObjects;

  /**
   * Optional. If true, use DROP ... IF EXISTS commands to check for the object's existence before
   * dropping it in clean_target_objects mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ifExistTargetObjects;

  /**
   * Optional. If true, only export the schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean schemaOnly;

  /**
   * Optional. Tables to export from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tables;

  /**
   * Optional. If true, output commands to DROP all the dumped database objects prior to outputting
   * the commands for creating them.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCleanTargetObjects() {
    return cleanTargetObjects;
  }

  /**
   * Optional. If true, output commands to DROP all the dumped database objects prior to outputting
   * the commands for creating them.
   * @param cleanTargetObjects cleanTargetObjects or {@code null} for none
   */
  public SqlExportOptions setCleanTargetObjects(java.lang.Boolean cleanTargetObjects) {
    this.cleanTargetObjects = cleanTargetObjects;
    return this;
  }

  /**
   * Optional. If true, use DROP ... IF EXISTS commands to check for the object's existence before
   * dropping it in clean_target_objects mode.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIfExistTargetObjects() {
    return ifExistTargetObjects;
  }

  /**
   * Optional. If true, use DROP ... IF EXISTS commands to check for the object's existence before
   * dropping it in clean_target_objects mode.
   * @param ifExistTargetObjects ifExistTargetObjects or {@code null} for none
   */
  public SqlExportOptions setIfExistTargetObjects(java.lang.Boolean ifExistTargetObjects) {
    this.ifExistTargetObjects = ifExistTargetObjects;
    return this;
  }

  /**
   * Optional. If true, only export the schema.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSchemaOnly() {
    return schemaOnly;
  }

  /**
   * Optional. If true, only export the schema.
   * @param schemaOnly schemaOnly or {@code null} for none
   */
  public SqlExportOptions setSchemaOnly(java.lang.Boolean schemaOnly) {
    this.schemaOnly = schemaOnly;
    return this;
  }

  /**
   * Optional. Tables to export from.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTables() {
    return tables;
  }

  /**
   * Optional. Tables to export from.
   * @param tables tables or {@code null} for none
   */
  public SqlExportOptions setTables(java.util.List<java.lang.String> tables) {
    this.tables = tables;
    return this;
  }

  @Override
  public SqlExportOptions set(String fieldName, Object value) {
    return (SqlExportOptions) super.set(fieldName, value);
  }

  @Override
  public SqlExportOptions clone() {
    return (SqlExportOptions) super.clone();
  }

}
