/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1.model;

/**
 * DNS records are resource records that define how systems and services should behave when handling
 * requests for a domain name. For example, when you add `A` records to your domain name's DNS
 * records, you're informing other systems (e.g. your users' web browsers) to contact those IPv4
 * addresses to retrieve resources relevant to your domain name (e.g. your Hosting site files).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Hosting API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DnsRecord extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domainName;

  /**
   * Output only. The data of the record. The meaning of the value depends on record type: - A and
   * AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT:
   * Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine a
   * which Firebase Projects have permission to act on the domain name's behalf. - CAA: The record's
   * flags, tag, and value, e.g. `0 issue "pki.goog"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rdata;

  /**
   * Output only. An enum that indicates the a required action for this record.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requiredAction;

  /**
   * Output only. The record's type, which determines what data the record contains.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDomainName() {
    return domainName;
  }

  /**
   * Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
   * @param domainName domainName or {@code null} for none
   */
  public DnsRecord setDomainName(java.lang.String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Output only. The data of the record. The meaning of the value depends on record type: - A and
   * AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT:
   * Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine a
   * which Firebase Projects have permission to act on the domain name's behalf. - CAA: The record's
   * flags, tag, and value, e.g. `0 issue "pki.goog"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getRdata() {
    return rdata;
  }

  /**
   * Output only. The data of the record. The meaning of the value depends on record type: - A and
   * AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT:
   * Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine a
   * which Firebase Projects have permission to act on the domain name's behalf. - CAA: The record's
   * flags, tag, and value, e.g. `0 issue "pki.goog"`.
   * @param rdata rdata or {@code null} for none
   */
  public DnsRecord setRdata(java.lang.String rdata) {
    this.rdata = rdata;
    return this;
  }

  /**
   * Output only. An enum that indicates the a required action for this record.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequiredAction() {
    return requiredAction;
  }

  /**
   * Output only. An enum that indicates the a required action for this record.
   * @param requiredAction requiredAction or {@code null} for none
   */
  public DnsRecord setRequiredAction(java.lang.String requiredAction) {
    this.requiredAction = requiredAction;
    return this;
  }

  /**
   * Output only. The record's type, which determines what data the record contains.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Output only. The record's type, which determines what data the record contains.
   * @param type type or {@code null} for none
   */
  public DnsRecord setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public DnsRecord set(String fieldName, Object value) {
    return (DnsRecord) super.set(fieldName, value);
  }

  @Override
  public DnsRecord clone() {
    return (DnsRecord) super.clone();
  }

}
