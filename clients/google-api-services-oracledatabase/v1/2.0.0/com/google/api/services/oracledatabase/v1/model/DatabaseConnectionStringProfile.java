/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * The connection string profile to allow clients to group. https://docs.oracle.com/en-
 * us/iaas/api/#/en/database/20160918/datatypes/DatabaseConnectionStringProfile
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseConnectionStringProfile extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The current consumer group being used by the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String consumerGroup;

  /**
   * Output only. The display name for the database connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. The host name format being currently used in connection string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostFormat;

  /**
   * Output only. This field indicates if the connection string is regional and is only applicable
   * for cross-region Data Guard.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRegional;

  /**
   * Output only. The protocol being used by the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String protocol;

  /**
   * Output only. The current session mode of the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sessionMode;

  /**
   * Output only. The syntax of the connection string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String syntaxFormat;

  /**
   * Output only. This field indicates the TLS authentication type of the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tlsAuthentication;

  /**
   * Output only. The value of the connection string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * Output only. The current consumer group being used by the connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getConsumerGroup() {
    return consumerGroup;
  }

  /**
   * Output only. The current consumer group being used by the connection.
   * @param consumerGroup consumerGroup or {@code null} for none
   */
  public DatabaseConnectionStringProfile setConsumerGroup(java.lang.String consumerGroup) {
    this.consumerGroup = consumerGroup;
    return this;
  }

  /**
   * Output only. The display name for the database connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Output only. The display name for the database connection.
   * @param displayName displayName or {@code null} for none
   */
  public DatabaseConnectionStringProfile setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The host name format being currently used in connection string.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostFormat() {
    return hostFormat;
  }

  /**
   * Output only. The host name format being currently used in connection string.
   * @param hostFormat hostFormat or {@code null} for none
   */
  public DatabaseConnectionStringProfile setHostFormat(java.lang.String hostFormat) {
    this.hostFormat = hostFormat;
    return this;
  }

  /**
   * Output only. This field indicates if the connection string is regional and is only applicable
   * for cross-region Data Guard.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRegional() {
    return isRegional;
  }

  /**
   * Output only. This field indicates if the connection string is regional and is only applicable
   * for cross-region Data Guard.
   * @param isRegional isRegional or {@code null} for none
   */
  public DatabaseConnectionStringProfile setIsRegional(java.lang.Boolean isRegional) {
    this.isRegional = isRegional;
    return this;
  }

  /**
   * Output only. The protocol being used by the connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getProtocol() {
    return protocol;
  }

  /**
   * Output only. The protocol being used by the connection.
   * @param protocol protocol or {@code null} for none
   */
  public DatabaseConnectionStringProfile setProtocol(java.lang.String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Output only. The current session mode of the connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getSessionMode() {
    return sessionMode;
  }

  /**
   * Output only. The current session mode of the connection.
   * @param sessionMode sessionMode or {@code null} for none
   */
  public DatabaseConnectionStringProfile setSessionMode(java.lang.String sessionMode) {
    this.sessionMode = sessionMode;
    return this;
  }

  /**
   * Output only. The syntax of the connection string.
   * @return value or {@code null} for none
   */
  public java.lang.String getSyntaxFormat() {
    return syntaxFormat;
  }

  /**
   * Output only. The syntax of the connection string.
   * @param syntaxFormat syntaxFormat or {@code null} for none
   */
  public DatabaseConnectionStringProfile setSyntaxFormat(java.lang.String syntaxFormat) {
    this.syntaxFormat = syntaxFormat;
    return this;
  }

  /**
   * Output only. This field indicates the TLS authentication type of the connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getTlsAuthentication() {
    return tlsAuthentication;
  }

  /**
   * Output only. This field indicates the TLS authentication type of the connection.
   * @param tlsAuthentication tlsAuthentication or {@code null} for none
   */
  public DatabaseConnectionStringProfile setTlsAuthentication(java.lang.String tlsAuthentication) {
    this.tlsAuthentication = tlsAuthentication;
    return this;
  }

  /**
   * Output only. The value of the connection string.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Output only. The value of the connection string.
   * @param value value or {@code null} for none
   */
  public DatabaseConnectionStringProfile setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public DatabaseConnectionStringProfile set(String fieldName, Object value) {
    return (DatabaseConnectionStringProfile) super.set(fieldName, value);
  }

  @Override
  public DatabaseConnectionStringProfile clone() {
    return (DatabaseConnectionStringProfile) super.clone();
  }

}
