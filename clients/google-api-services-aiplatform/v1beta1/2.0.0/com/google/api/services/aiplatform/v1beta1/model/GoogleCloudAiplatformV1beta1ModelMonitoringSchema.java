/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * The Model Monitoring Schema definition.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1ModelMonitoringSchema extends com.google.api.client.json.GenericJson {

  /**
   * Feature names of the model. Vertex AI will try to match the features from your dataset as
   * follows: * For 'csv' files, the header names are required, and we will extract the
   * corresponding feature values when the header names align with the feature names. * For 'jsonl'
   * files, we will extract the corresponding feature values if the key names match the feature
   * names. Note: Nested features are not supported, so please ensure your features are flattened.
   * Ensure the feature values are scalar or an array of scalars. * For 'bigquery' dataset, we will
   * extract the corresponding feature values if the column names match the feature names. Note: The
   * column type can be a scalar or an array of scalars. STRUCT or JSON types are not supported. You
   * may use SQL queries to select or aggregate the relevant features from your original table.
   * However, ensure that the 'schema' of the query results meets our requirements. * For the Vertex
   * AI Endpoint Request Response Logging table or Vertex AI Batch Prediction Job results. If the
   * instance_type is an array, ensure that the sequence in feature_fields matches the order of
   * features in the prediction instance. We will match the feature with the array in the order
   * specified in [feature_fields].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> featureFields;

  /**
   * Target /ground truth names of the model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> groundTruthFields;

  /**
   * Prediction output names of the model. The requirements are the same as the feature_fields. For
   * AutoML Tables, the prediction output name presented in schema will be:
   * `predicted_{target_column}`, the `target_column` is the one you specified when you train the
   * model. For Prediction output drift analysis: * AutoML Classification, the distribution of the
   * argmax label will be analyzed. * AutoML Regression, the distribution of the value will be
   * analyzed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> predictionFields;

  /**
   * Feature names of the model. Vertex AI will try to match the features from your dataset as
   * follows: * For 'csv' files, the header names are required, and we will extract the
   * corresponding feature values when the header names align with the feature names. * For 'jsonl'
   * files, we will extract the corresponding feature values if the key names match the feature
   * names. Note: Nested features are not supported, so please ensure your features are flattened.
   * Ensure the feature values are scalar or an array of scalars. * For 'bigquery' dataset, we will
   * extract the corresponding feature values if the column names match the feature names. Note: The
   * column type can be a scalar or an array of scalars. STRUCT or JSON types are not supported. You
   * may use SQL queries to select or aggregate the relevant features from your original table.
   * However, ensure that the 'schema' of the query results meets our requirements. * For the Vertex
   * AI Endpoint Request Response Logging table or Vertex AI Batch Prediction Job results. If the
   * instance_type is an array, ensure that the sequence in feature_fields matches the order of
   * features in the prediction instance. We will match the feature with the array in the order
   * specified in [feature_fields].
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> getFeatureFields() {
    return featureFields;
  }

  /**
   * Feature names of the model. Vertex AI will try to match the features from your dataset as
   * follows: * For 'csv' files, the header names are required, and we will extract the
   * corresponding feature values when the header names align with the feature names. * For 'jsonl'
   * files, we will extract the corresponding feature values if the key names match the feature
   * names. Note: Nested features are not supported, so please ensure your features are flattened.
   * Ensure the feature values are scalar or an array of scalars. * For 'bigquery' dataset, we will
   * extract the corresponding feature values if the column names match the feature names. Note: The
   * column type can be a scalar or an array of scalars. STRUCT or JSON types are not supported. You
   * may use SQL queries to select or aggregate the relevant features from your original table.
   * However, ensure that the 'schema' of the query results meets our requirements. * For the Vertex
   * AI Endpoint Request Response Logging table or Vertex AI Batch Prediction Job results. If the
   * instance_type is an array, ensure that the sequence in feature_fields matches the order of
   * features in the prediction instance. We will match the feature with the array in the order
   * specified in [feature_fields].
   * @param featureFields featureFields or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1ModelMonitoringSchema setFeatureFields(java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> featureFields) {
    this.featureFields = featureFields;
    return this;
  }

  /**
   * Target /ground truth names of the model.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> getGroundTruthFields() {
    return groundTruthFields;
  }

  /**
   * Target /ground truth names of the model.
   * @param groundTruthFields groundTruthFields or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1ModelMonitoringSchema setGroundTruthFields(java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> groundTruthFields) {
    this.groundTruthFields = groundTruthFields;
    return this;
  }

  /**
   * Prediction output names of the model. The requirements are the same as the feature_fields. For
   * AutoML Tables, the prediction output name presented in schema will be:
   * `predicted_{target_column}`, the `target_column` is the one you specified when you train the
   * model. For Prediction output drift analysis: * AutoML Classification, the distribution of the
   * argmax label will be analyzed. * AutoML Regression, the distribution of the value will be
   * analyzed.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> getPredictionFields() {
    return predictionFields;
  }

  /**
   * Prediction output names of the model. The requirements are the same as the feature_fields. For
   * AutoML Tables, the prediction output name presented in schema will be:
   * `predicted_{target_column}`, the `target_column` is the one you specified when you train the
   * model. For Prediction output drift analysis: * AutoML Classification, the distribution of the
   * argmax label will be analyzed. * AutoML Regression, the distribution of the value will be
   * analyzed.
   * @param predictionFields predictionFields or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1ModelMonitoringSchema setPredictionFields(java.util.List<GoogleCloudAiplatformV1beta1ModelMonitoringSchemaFieldSchema> predictionFields) {
    this.predictionFields = predictionFields;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1ModelMonitoringSchema set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1ModelMonitoringSchema) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1ModelMonitoringSchema clone() {
    return (GoogleCloudAiplatformV1beta1ModelMonitoringSchema) super.clone();
  }

}
