/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.container.v1beta1.model;

/**
 * UpgradeInfoEvent is a notification sent to customers about the upgrade information of a resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Kubernetes Engine API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UpgradeInfoEvent extends com.google.api.client.json.GenericJson {

  /**
   * The current version before the upgrade.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currentVersion;

  /**
   * A brief description of the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The time when the operation ended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * The type of the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventType;

  /**
   * The end of extended support timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String extendedSupportEndTime;

  /**
   * The operation associated with this upgrade.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operation;

  /**
   * Optional relative path to the resource. For example in node pool upgrades, the relative path of
   * the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resource;

  /**
   * The resource type associated with the upgrade.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resourceType;

  /**
   * The end of standard support timestamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String standardSupportEndTime;

  /**
   * The time when the operation was started.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Output only. The state of the upgrade.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The target version for the upgrade.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetVersion;

  /**
   * The current version before the upgrade.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrentVersion() {
    return currentVersion;
  }

  /**
   * The current version before the upgrade.
   * @param currentVersion currentVersion or {@code null} for none
   */
  public UpgradeInfoEvent setCurrentVersion(java.lang.String currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

  /**
   * A brief description of the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A brief description of the event.
   * @param description description or {@code null} for none
   */
  public UpgradeInfoEvent setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The time when the operation ended.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * The time when the operation ended.
   * @param endTime endTime or {@code null} for none
   */
  public UpgradeInfoEvent setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The type of the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * The type of the event.
   * @param eventType eventType or {@code null} for none
   */
  public UpgradeInfoEvent setEventType(java.lang.String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The end of extended support timestamp.
   * @return value or {@code null} for none
   */
  public String getExtendedSupportEndTime() {
    return extendedSupportEndTime;
  }

  /**
   * The end of extended support timestamp.
   * @param extendedSupportEndTime extendedSupportEndTime or {@code null} for none
   */
  public UpgradeInfoEvent setExtendedSupportEndTime(String extendedSupportEndTime) {
    this.extendedSupportEndTime = extendedSupportEndTime;
    return this;
  }

  /**
   * The operation associated with this upgrade.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperation() {
    return operation;
  }

  /**
   * The operation associated with this upgrade.
   * @param operation operation or {@code null} for none
   */
  public UpgradeInfoEvent setOperation(java.lang.String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Optional relative path to the resource. For example in node pool upgrades, the relative path of
   * the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getResource() {
    return resource;
  }

  /**
   * Optional relative path to the resource. For example in node pool upgrades, the relative path of
   * the node pool.
   * @param resource resource or {@code null} for none
   */
  public UpgradeInfoEvent setResource(java.lang.String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * The resource type associated with the upgrade.
   * @return value or {@code null} for none
   */
  public java.lang.String getResourceType() {
    return resourceType;
  }

  /**
   * The resource type associated with the upgrade.
   * @param resourceType resourceType or {@code null} for none
   */
  public UpgradeInfoEvent setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The end of standard support timestamp.
   * @return value or {@code null} for none
   */
  public String getStandardSupportEndTime() {
    return standardSupportEndTime;
  }

  /**
   * The end of standard support timestamp.
   * @param standardSupportEndTime standardSupportEndTime or {@code null} for none
   */
  public UpgradeInfoEvent setStandardSupportEndTime(String standardSupportEndTime) {
    this.standardSupportEndTime = standardSupportEndTime;
    return this;
  }

  /**
   * The time when the operation was started.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * The time when the operation was started.
   * @param startTime startTime or {@code null} for none
   */
  public UpgradeInfoEvent setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Output only. The state of the upgrade.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the upgrade.
   * @param state state or {@code null} for none
   */
  public UpgradeInfoEvent setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * The target version for the upgrade.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetVersion() {
    return targetVersion;
  }

  /**
   * The target version for the upgrade.
   * @param targetVersion targetVersion or {@code null} for none
   */
  public UpgradeInfoEvent setTargetVersion(java.lang.String targetVersion) {
    this.targetVersion = targetVersion;
    return this;
  }

  @Override
  public UpgradeInfoEvent set(String fieldName, Object value) {
    return (UpgradeInfoEvent) super.set(fieldName, value);
  }

  @Override
  public UpgradeInfoEvent clone() {
    return (UpgradeInfoEvent) super.clone();
  }

}
