/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The result of PetacatAnnotator. Each result contains: 1. RephilClusters; 2. At most 5 verticals
 * from each taxonomy, sorted by the probabilities in descending order. 3. Binary classification
 * results about page types and sensitive content. The types of taxonomies include: verticals4, geo,
 * verticals4_geo, products_services, icm_im_audiences and icm_im_audiences_dev.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FatcatCompactDocClassification extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FatcatCompactBinaryClassification> binary;

  static {
    // hack to force ProGuard to consider FatcatCompactBinaryClassification used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FatcatCompactBinaryClassification.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FatcatCompactRephilClusters clusters;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String epoch;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String langCode;

  /**
   * The id of the Rephil model used to generate the Rephil clusters. If it is absent, Rephil 4 is
   * assumed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rephilModelId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FatcatCompactTaxonomicClassification> taxonomic;

  /**
   * not needed if the url is the sstable / bigtable key used during intermediate processing only
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * The relative weight of this doc within a site, typically something like pagerank or navboost
   * impressions. May be a large number (like an actual pageviews estimate), not limited to a small
   * range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long weight;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<FatcatCompactBinaryClassification> getBinary() {
    return binary;
  }

  /**
   * @param binary binary or {@code null} for none
   */
  public FatcatCompactDocClassification setBinary(java.util.List<FatcatCompactBinaryClassification> binary) {
    this.binary = binary;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public FatcatCompactRephilClusters getClusters() {
    return clusters;
  }

  /**
   * @param clusters clusters or {@code null} for none
   */
  public FatcatCompactDocClassification setClusters(FatcatCompactRephilClusters clusters) {
    this.clusters = clusters;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEpoch() {
    return epoch;
  }

  /**
   * @param epoch epoch or {@code null} for none
   */
  public FatcatCompactDocClassification setEpoch(java.lang.String epoch) {
    this.epoch = epoch;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLangCode() {
    return langCode;
  }

  /**
   * @param langCode langCode or {@code null} for none
   */
  public FatcatCompactDocClassification setLangCode(java.lang.String langCode) {
    this.langCode = langCode;
    return this;
  }

  /**
   * The id of the Rephil model used to generate the Rephil clusters. If it is absent, Rephil 4 is
   * assumed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRephilModelId() {
    return rephilModelId;
  }

  /**
   * The id of the Rephil model used to generate the Rephil clusters. If it is absent, Rephil 4 is
   * assumed.
   * @param rephilModelId rephilModelId or {@code null} for none
   */
  public FatcatCompactDocClassification setRephilModelId(java.lang.Integer rephilModelId) {
    this.rephilModelId = rephilModelId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<FatcatCompactTaxonomicClassification> getTaxonomic() {
    return taxonomic;
  }

  /**
   * @param taxonomic taxonomic or {@code null} for none
   */
  public FatcatCompactDocClassification setTaxonomic(java.util.List<FatcatCompactTaxonomicClassification> taxonomic) {
    this.taxonomic = taxonomic;
    return this;
  }

  /**
   * not needed if the url is the sstable / bigtable key used during intermediate processing only
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * not needed if the url is the sstable / bigtable key used during intermediate processing only
   * @param url url or {@code null} for none
   */
  public FatcatCompactDocClassification setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * The relative weight of this doc within a site, typically something like pagerank or navboost
   * impressions. May be a large number (like an actual pageviews estimate), not limited to a small
   * range.
   * @return value or {@code null} for none
   */
  public java.lang.Long getWeight() {
    return weight;
  }

  /**
   * The relative weight of this doc within a site, typically something like pagerank or navboost
   * impressions. May be a large number (like an actual pageviews estimate), not limited to a small
   * range.
   * @param weight weight or {@code null} for none
   */
  public FatcatCompactDocClassification setWeight(java.lang.Long weight) {
    this.weight = weight;
    return this;
  }

  @Override
  public FatcatCompactDocClassification set(String fieldName, Object value) {
    return (FatcatCompactDocClassification) super.set(fieldName, value);
  }

  @Override
  public FatcatCompactDocClassification clone() {
    return (FatcatCompactDocClassification) super.clone();
  }

}
