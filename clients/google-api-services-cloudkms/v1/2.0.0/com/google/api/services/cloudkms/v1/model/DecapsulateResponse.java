/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudkms.v1.model;

/**
 * Response message for KeyManagementService.Decapsulate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Key Management Service (KMS) API. For a
 * detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DecapsulateResponse extends com.google.api.client.json.GenericJson {

  /**
   * The resource name of the CryptoKeyVersion used for decapsulation. Check this field to verify
   * that the intended resource was used for decapsulation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in decapsulation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String protectionLevel;

  /**
   * The decapsulated shared_secret originally encapsulated with the matching public key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sharedSecret;

  /**
   * Integrity verification field. A CRC32C checksum of the returned
   * DecapsulateResponse.shared_secret. An integrity check of DecapsulateResponse.shared_secret can
   * be performed by computing the CRC32C checksum of DecapsulateResponse.shared_secret and
   * comparing your results to this field. Discard the response in case of non-matching checksum
   * values, and perform a limited number of retries. A persistent mismatch may indicate an issue in
   * your computation of the CRC32C checksum. Note: receiving this response message indicates that
   * KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is
   * defined as int64 for reasons of compatibility across different languages. However, it is a non-
   * negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in
   * languages that support this type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long sharedSecretCrc32c;

  /**
   * Integrity verification field. A flag indicating whether DecapsulateRequest.ciphertext_crc32c
   * was received by KeyManagementService and used for the integrity verification of the ciphertext.
   * A false value of this field indicates either that DecapsulateRequest.ciphertext_crc32c was left
   * unset or that it was not delivered to KeyManagementService. If you've set
   * DecapsulateRequest.ciphertext_crc32c but this field is still false, discard the response and
   * perform a limited number of retries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean verifiedCiphertextCrc32c;

  /**
   * The resource name of the CryptoKeyVersion used for decapsulation. Check this field to verify
   * that the intended resource was used for decapsulation.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the CryptoKeyVersion used for decapsulation. Check this field to verify
   * that the intended resource was used for decapsulation.
   * @param name name or {@code null} for none
   */
  public DecapsulateResponse setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in decapsulation.
   * @return value or {@code null} for none
   */
  public java.lang.String getProtectionLevel() {
    return protectionLevel;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in decapsulation.
   * @param protectionLevel protectionLevel or {@code null} for none
   */
  public DecapsulateResponse setProtectionLevel(java.lang.String protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * The decapsulated shared_secret originally encapsulated with the matching public key.
   * @see #decodeSharedSecret()
   * @return value or {@code null} for none
   */
  public java.lang.String getSharedSecret() {
    return sharedSecret;
  }

  /**
   * The decapsulated shared_secret originally encapsulated with the matching public key.
   * @see #getSharedSecret()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSharedSecret() {
    return com.google.api.client.util.Base64.decodeBase64(sharedSecret);
  }

  /**
   * The decapsulated shared_secret originally encapsulated with the matching public key.
   * @see #encodeSharedSecret()
   * @param sharedSecret sharedSecret or {@code null} for none
   */
  public DecapsulateResponse setSharedSecret(java.lang.String sharedSecret) {
    this.sharedSecret = sharedSecret;
    return this;
  }

  /**
   * The decapsulated shared_secret originally encapsulated with the matching public key.
   * @see #setSharedSecret()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DecapsulateResponse encodeSharedSecret(byte[] sharedSecret) {
    this.sharedSecret = com.google.api.client.util.Base64.encodeBase64URLSafeString(sharedSecret);
    return this;
  }

  /**
   * Integrity verification field. A CRC32C checksum of the returned
   * DecapsulateResponse.shared_secret. An integrity check of DecapsulateResponse.shared_secret can
   * be performed by computing the CRC32C checksum of DecapsulateResponse.shared_secret and
   * comparing your results to this field. Discard the response in case of non-matching checksum
   * values, and perform a limited number of retries. A persistent mismatch may indicate an issue in
   * your computation of the CRC32C checksum. Note: receiving this response message indicates that
   * KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is
   * defined as int64 for reasons of compatibility across different languages. However, it is a non-
   * negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in
   * languages that support this type.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSharedSecretCrc32c() {
    return sharedSecretCrc32c;
  }

  /**
   * Integrity verification field. A CRC32C checksum of the returned
   * DecapsulateResponse.shared_secret. An integrity check of DecapsulateResponse.shared_secret can
   * be performed by computing the CRC32C checksum of DecapsulateResponse.shared_secret and
   * comparing your results to this field. Discard the response in case of non-matching checksum
   * values, and perform a limited number of retries. A persistent mismatch may indicate an issue in
   * your computation of the CRC32C checksum. Note: receiving this response message indicates that
   * KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is
   * defined as int64 for reasons of compatibility across different languages. However, it is a non-
   * negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in
   * languages that support this type.
   * @param sharedSecretCrc32c sharedSecretCrc32c or {@code null} for none
   */
  public DecapsulateResponse setSharedSecretCrc32c(java.lang.Long sharedSecretCrc32c) {
    this.sharedSecretCrc32c = sharedSecretCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether DecapsulateRequest.ciphertext_crc32c
   * was received by KeyManagementService and used for the integrity verification of the ciphertext.
   * A false value of this field indicates either that DecapsulateRequest.ciphertext_crc32c was left
   * unset or that it was not delivered to KeyManagementService. If you've set
   * DecapsulateRequest.ciphertext_crc32c but this field is still false, discard the response and
   * perform a limited number of retries.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getVerifiedCiphertextCrc32c() {
    return verifiedCiphertextCrc32c;
  }

  /**
   * Integrity verification field. A flag indicating whether DecapsulateRequest.ciphertext_crc32c
   * was received by KeyManagementService and used for the integrity verification of the ciphertext.
   * A false value of this field indicates either that DecapsulateRequest.ciphertext_crc32c was left
   * unset or that it was not delivered to KeyManagementService. If you've set
   * DecapsulateRequest.ciphertext_crc32c but this field is still false, discard the response and
   * perform a limited number of retries.
   * @param verifiedCiphertextCrc32c verifiedCiphertextCrc32c or {@code null} for none
   */
  public DecapsulateResponse setVerifiedCiphertextCrc32c(java.lang.Boolean verifiedCiphertextCrc32c) {
    this.verifiedCiphertextCrc32c = verifiedCiphertextCrc32c;
    return this;
  }

  @Override
  public DecapsulateResponse set(String fieldName, Object value) {
    return (DecapsulateResponse) super.set(fieldName, value);
  }

  @Override
  public DecapsulateResponse clone() {
    return (DecapsulateResponse) super.clone();
  }

}
