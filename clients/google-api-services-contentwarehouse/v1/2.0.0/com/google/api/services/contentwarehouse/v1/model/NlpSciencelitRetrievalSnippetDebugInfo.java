/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Returned by Delver API in Snippet.debug_info.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSciencelitRetrievalSnippetDebugInfo extends com.google.api.client.json.GenericJson {

  /**
   * Which highlights have sentence overlap with gold snippets. Not ordered. Might only be set for
   * the first gold highlight.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> goldHighlightSentenceIndices;

  /**
   * Map of highlight index to best overlap with any gold snippet [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Float> highlightIdxToOverlap;

  /**
   * Map of highlight index to best overlap with any gold sentence [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Float> highlightIdxToSentenceOverlap;

  /**
   * Not set by server; only used by certain evals. Might only be set for the first gold snippet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isGold;

  /**
   * Byte index of text within the full section text (or within title).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer offsetWithinSection;

  /**
   * Section within the document. -1 if title.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sectionIndex;

  /**
   * IR score of the section the snippet is coming from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float sectionIrScore;

  /**
   * BLEU score for the entire snippet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snippetBleuScore;

  /**
   * Which highlights have sentence overlap with gold snippets. Not ordered. Might only be set for
   * the first gold highlight.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getGoldHighlightSentenceIndices() {
    return goldHighlightSentenceIndices;
  }

  /**
   * Which highlights have sentence overlap with gold snippets. Not ordered. Might only be set for
   * the first gold highlight.
   * @param goldHighlightSentenceIndices goldHighlightSentenceIndices or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setGoldHighlightSentenceIndices(java.util.List<java.lang.Integer> goldHighlightSentenceIndices) {
    this.goldHighlightSentenceIndices = goldHighlightSentenceIndices;
    return this;
  }

  /**
   * Map of highlight index to best overlap with any gold snippet [0,1].
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Float> getHighlightIdxToOverlap() {
    return highlightIdxToOverlap;
  }

  /**
   * Map of highlight index to best overlap with any gold snippet [0,1].
   * @param highlightIdxToOverlap highlightIdxToOverlap or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setHighlightIdxToOverlap(java.util.Map<String, java.lang.Float> highlightIdxToOverlap) {
    this.highlightIdxToOverlap = highlightIdxToOverlap;
    return this;
  }

  /**
   * Map of highlight index to best overlap with any gold sentence [0,1].
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Float> getHighlightIdxToSentenceOverlap() {
    return highlightIdxToSentenceOverlap;
  }

  /**
   * Map of highlight index to best overlap with any gold sentence [0,1].
   * @param highlightIdxToSentenceOverlap highlightIdxToSentenceOverlap or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setHighlightIdxToSentenceOverlap(java.util.Map<String, java.lang.Float> highlightIdxToSentenceOverlap) {
    this.highlightIdxToSentenceOverlap = highlightIdxToSentenceOverlap;
    return this;
  }

  /**
   * Not set by server; only used by certain evals. Might only be set for the first gold snippet.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsGold() {
    return isGold;
  }

  /**
   * Not set by server; only used by certain evals. Might only be set for the first gold snippet.
   * @param isGold isGold or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setIsGold(java.lang.Boolean isGold) {
    this.isGold = isGold;
    return this;
  }

  /**
   * Byte index of text within the full section text (or within title).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOffsetWithinSection() {
    return offsetWithinSection;
  }

  /**
   * Byte index of text within the full section text (or within title).
   * @param offsetWithinSection offsetWithinSection or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setOffsetWithinSection(java.lang.Integer offsetWithinSection) {
    this.offsetWithinSection = offsetWithinSection;
    return this;
  }

  /**
   * Section within the document. -1 if title.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSectionIndex() {
    return sectionIndex;
  }

  /**
   * Section within the document. -1 if title.
   * @param sectionIndex sectionIndex or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setSectionIndex(java.lang.Integer sectionIndex) {
    this.sectionIndex = sectionIndex;
    return this;
  }

  /**
   * IR score of the section the snippet is coming from.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSectionIrScore() {
    return sectionIrScore;
  }

  /**
   * IR score of the section the snippet is coming from.
   * @param sectionIrScore sectionIrScore or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setSectionIrScore(java.lang.Float sectionIrScore) {
    this.sectionIrScore = sectionIrScore;
    return this;
  }

  /**
   * BLEU score for the entire snippet.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnippetBleuScore() {
    return snippetBleuScore;
  }

  /**
   * BLEU score for the entire snippet.
   * @param snippetBleuScore snippetBleuScore or {@code null} for none
   */
  public NlpSciencelitRetrievalSnippetDebugInfo setSnippetBleuScore(java.lang.Float snippetBleuScore) {
    this.snippetBleuScore = snippetBleuScore;
    return this;
  }

  @Override
  public NlpSciencelitRetrievalSnippetDebugInfo set(String fieldName, Object value) {
    return (NlpSciencelitRetrievalSnippetDebugInfo) super.set(fieldName, value);
  }

  @Override
  public NlpSciencelitRetrievalSnippetDebugInfo clone() {
    return (NlpSciencelitRetrievalSnippetDebugInfo) super.clone();
  }

}
