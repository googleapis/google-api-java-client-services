/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.iap.v1.model;

/**
 * Model definition for TagsPartialState.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Identity-Aware Proxy API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TagsPartialState extends com.google.api.client.json.GenericJson {

  /**
   * Keys of the tags that should be removed for evaluation purposes. IMPORTANT: Currently only
   * numeric references are supported. Once support for namespace references is added, both the tag
   * references (numeric and namespace) will be removed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tagKeysToRemove;

  /**
   * Tags that’ll be updated or added to the current state of tags for evaluation purposes. If a key
   * exists in both "tags_to_upsert" and "tag_keys_to_remove", the one in "tag_keys_to_remove" is
   * ignored. Only one type of tags reference (numeric or namespace) is required to be passed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> tagsToUpsert;

  /**
   * Keys of the tags that should be removed for evaluation purposes. IMPORTANT: Currently only
   * numeric references are supported. Once support for namespace references is added, both the tag
   * references (numeric and namespace) will be removed.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTagKeysToRemove() {
    return tagKeysToRemove;
  }

  /**
   * Keys of the tags that should be removed for evaluation purposes. IMPORTANT: Currently only
   * numeric references are supported. Once support for namespace references is added, both the tag
   * references (numeric and namespace) will be removed.
   * @param tagKeysToRemove tagKeysToRemove or {@code null} for none
   */
  public TagsPartialState setTagKeysToRemove(java.util.List<java.lang.String> tagKeysToRemove) {
    this.tagKeysToRemove = tagKeysToRemove;
    return this;
  }

  /**
   * Tags that’ll be updated or added to the current state of tags for evaluation purposes. If a key
   * exists in both "tags_to_upsert" and "tag_keys_to_remove", the one in "tag_keys_to_remove" is
   * ignored. Only one type of tags reference (numeric or namespace) is required to be passed.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getTagsToUpsert() {
    return tagsToUpsert;
  }

  /**
   * Tags that’ll be updated or added to the current state of tags for evaluation purposes. If a key
   * exists in both "tags_to_upsert" and "tag_keys_to_remove", the one in "tag_keys_to_remove" is
   * ignored. Only one type of tags reference (numeric or namespace) is required to be passed.
   * @param tagsToUpsert tagsToUpsert or {@code null} for none
   */
  public TagsPartialState setTagsToUpsert(java.util.Map<String, java.lang.String> tagsToUpsert) {
    this.tagsToUpsert = tagsToUpsert;
    return this;
  }

  @Override
  public TagsPartialState set(String fieldName, Object value) {
    return (TagsPartialState) super.set(fieldName, value);
  }

  @Override
  public TagsPartialState clone() {
    return (TagsPartialState) super.clone();
  }

}
