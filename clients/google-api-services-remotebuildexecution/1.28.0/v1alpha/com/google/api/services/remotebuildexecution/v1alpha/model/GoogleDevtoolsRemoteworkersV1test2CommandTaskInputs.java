/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v1alpha.model;

/**
 * Describes the inputs to a shell-style task.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs extends com.google.api.client.json.GenericJson {

  /**
   * The command itself to run (e.g., argv).
   *
   * This field should be passed directly to the underlying operating system, and so it must be
   * sensible to that operating system. For example, on Windows, the first argument might be
   * "C:\Windows\System32\ping.exe" - that is, using drive letters and backslashes. A command for a
   * *nix system, on the other hand, would use forward slashes.
   *
   * All other fields in the RWAPI must consistently use forward slashes, since those fields may be
   * interpretted by both the service and the bot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> arguments;

  /**
   * All environment variables required by the task.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> environmentVariables;

  /**
   * The input filesystem to be set up prior to the task beginning. The contents should be a
   * repeated set of FileMetadata messages though other formats are allowed if better for the
   * implementation (eg, a LUCI-style .isolated file).
   *
   * This field is repeated since implementations might want to cache the metadata, in which case it
   * may be useful to break up portions of the filesystem that change frequently (eg, specific input
   * files) from those that don't (eg, standard header files).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteworkersV1test2Digest> files;

  /**
   * Inline contents for blobs expected to be needed by the bot to execute the task. For example,
   * contents of entries in `files` or blobs that are indirectly referenced by an entry there.
   *
   * The bot should check against this list before downloading required task inputs to reduce the
   * number of communications between itself and the remote CAS server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteworkersV1test2Blob> inlineBlobs;

  static {
    // hack to force ProGuard to consider GoogleDevtoolsRemoteworkersV1test2Blob used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleDevtoolsRemoteworkersV1test2Blob.class);
  }

  /**
   * Directory from which a command is executed. It is a relative directory with respect to the
   * bot's working directory (i.e., "./"). If it is non-empty, then it must exist under "./".
   * Otherwise, "./" will be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workingDirectory;

  /**
   * The command itself to run (e.g., argv).
   *
   * This field should be passed directly to the underlying operating system, and so it must be
   * sensible to that operating system. For example, on Windows, the first argument might be
   * "C:\Windows\System32\ping.exe" - that is, using drive letters and backslashes. A command for a
   * *nix system, on the other hand, would use forward slashes.
   *
   * All other fields in the RWAPI must consistently use forward slashes, since those fields may be
   * interpretted by both the service and the bot.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArguments() {
    return arguments;
  }

  /**
   * The command itself to run (e.g., argv).
   *
   * This field should be passed directly to the underlying operating system, and so it must be
   * sensible to that operating system. For example, on Windows, the first argument might be
   * "C:\Windows\System32\ping.exe" - that is, using drive letters and backslashes. A command for a
   * *nix system, on the other hand, would use forward slashes.
   *
   * All other fields in the RWAPI must consistently use forward slashes, since those fields may be
   * interpretted by both the service and the bot.
   * @param arguments arguments or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs setArguments(java.util.List<java.lang.String> arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * All environment variables required by the task.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  /**
   * All environment variables required by the task.
   * @param environmentVariables environmentVariables or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs setEnvironmentVariables(java.util.List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * The input filesystem to be set up prior to the task beginning. The contents should be a
   * repeated set of FileMetadata messages though other formats are allowed if better for the
   * implementation (eg, a LUCI-style .isolated file).
   *
   * This field is repeated since implementations might want to cache the metadata, in which case it
   * may be useful to break up portions of the filesystem that change frequently (eg, specific input
   * files) from those that don't (eg, standard header files).
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteworkersV1test2Digest> getFiles() {
    return files;
  }

  /**
   * The input filesystem to be set up prior to the task beginning. The contents should be a
   * repeated set of FileMetadata messages though other formats are allowed if better for the
   * implementation (eg, a LUCI-style .isolated file).
   *
   * This field is repeated since implementations might want to cache the metadata, in which case it
   * may be useful to break up portions of the filesystem that change frequently (eg, specific input
   * files) from those that don't (eg, standard header files).
   * @param files files or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs setFiles(java.util.List<GoogleDevtoolsRemoteworkersV1test2Digest> files) {
    this.files = files;
    return this;
  }

  /**
   * Inline contents for blobs expected to be needed by the bot to execute the task. For example,
   * contents of entries in `files` or blobs that are indirectly referenced by an entry there.
   *
   * The bot should check against this list before downloading required task inputs to reduce the
   * number of communications between itself and the remote CAS server.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteworkersV1test2Blob> getInlineBlobs() {
    return inlineBlobs;
  }

  /**
   * Inline contents for blobs expected to be needed by the bot to execute the task. For example,
   * contents of entries in `files` or blobs that are indirectly referenced by an entry there.
   *
   * The bot should check against this list before downloading required task inputs to reduce the
   * number of communications between itself and the remote CAS server.
   * @param inlineBlobs inlineBlobs or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs setInlineBlobs(java.util.List<GoogleDevtoolsRemoteworkersV1test2Blob> inlineBlobs) {
    this.inlineBlobs = inlineBlobs;
    return this;
  }

  /**
   * Directory from which a command is executed. It is a relative directory with respect to the
   * bot's working directory (i.e., "./"). If it is non-empty, then it must exist under "./".
   * Otherwise, "./" will be used.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkingDirectory() {
    return workingDirectory;
  }

  /**
   * Directory from which a command is executed. It is a relative directory with respect to the
   * bot's working directory (i.e., "./"). If it is non-empty, then it must exist under "./".
   * Otherwise, "./" will be used.
   * @param workingDirectory workingDirectory or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs setWorkingDirectory(java.lang.String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  @Override
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs set(String fieldName, Object value) {
    return (GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs clone() {
    return (GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs) super.clone();
  }

}
