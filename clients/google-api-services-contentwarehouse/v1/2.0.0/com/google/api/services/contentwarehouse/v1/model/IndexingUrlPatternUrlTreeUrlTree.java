/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for IndexingUrlPatternUrlTreeUrlTree.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingUrlPatternUrlTreeUrlTree extends com.google.api.client.json.GenericJson {

  /**
   * Keeping information for dominating branches separately, to prevent docs on smaller branches
   * from being dropping during sampling.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IndexingUrlPatternUrlTreeBigTreeBranch> bigBranch;

  static {
    // hack to force ProGuard to consider IndexingUrlPatternUrlTreeBigTreeBranch used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(IndexingUrlPatternUrlTreeBigTreeBranch.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingUrlPatternUrlTreeUrlTreeDebugInfo debugInfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingUrlPatternUrlTreeUrlTreeKey key;

  /**
   * node(0) is root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IndexingUrlPatternUrlTreeUrlTreeNode> node;

  /**
   * Used in url pattern matcher for cache invalidation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long retrievalTimestamp;

  /**
   * The key for this UrlTree, also will be the key in sstable. The old format is site, while the
   * new format will be UrlTreeKey. Only one field can be set in the same time for site and key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String site;

  /**
   * The time when this UrlTree is built, encoded as seconds past the epoch (Jan 1, 1970).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timestamp;

  /**
   * Any additional information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet treeInfo;

  /**
   * Keeping information for dominating branches separately, to prevent docs on smaller branches
   * from being dropping during sampling.
   * @return value or {@code null} for none
   */
  public java.util.List<IndexingUrlPatternUrlTreeBigTreeBranch> getBigBranch() {
    return bigBranch;
  }

  /**
   * Keeping information for dominating branches separately, to prevent docs on smaller branches
   * from being dropping during sampling.
   * @param bigBranch bigBranch or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setBigBranch(java.util.List<IndexingUrlPatternUrlTreeBigTreeBranch> bigBranch) {
    this.bigBranch = bigBranch;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTreeDebugInfo getDebugInfo() {
    return debugInfo;
  }

  /**
   * @param debugInfo debugInfo or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setDebugInfo(IndexingUrlPatternUrlTreeUrlTreeDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTreeKey getKey() {
    return key;
  }

  /**
   * @param key key or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setKey(IndexingUrlPatternUrlTreeUrlTreeKey key) {
    this.key = key;
    return this;
  }

  /**
   * node(0) is root.
   * @return value or {@code null} for none
   */
  public java.util.List<IndexingUrlPatternUrlTreeUrlTreeNode> getNode() {
    return node;
  }

  /**
   * node(0) is root.
   * @param node node or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setNode(java.util.List<IndexingUrlPatternUrlTreeUrlTreeNode> node) {
    this.node = node;
    return this;
  }

  /**
   * Used in url pattern matcher for cache invalidation.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRetrievalTimestamp() {
    return retrievalTimestamp;
  }

  /**
   * Used in url pattern matcher for cache invalidation.
   * @param retrievalTimestamp retrievalTimestamp or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setRetrievalTimestamp(java.lang.Long retrievalTimestamp) {
    this.retrievalTimestamp = retrievalTimestamp;
    return this;
  }

  /**
   * The key for this UrlTree, also will be the key in sstable. The old format is site, while the
   * new format will be UrlTreeKey. Only one field can be set in the same time for site and key.
   * @return value or {@code null} for none
   */
  public java.lang.String getSite() {
    return site;
  }

  /**
   * The key for this UrlTree, also will be the key in sstable. The old format is site, while the
   * new format will be UrlTreeKey. Only one field can be set in the same time for site and key.
   * @param site site or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setSite(java.lang.String site) {
    this.site = site;
    return this;
  }

  /**
   * The time when this UrlTree is built, encoded as seconds past the epoch (Jan 1, 1970).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimestamp() {
    return timestamp;
  }

  /**
   * The time when this UrlTree is built, encoded as seconds past the epoch (Jan 1, 1970).
   * @param timestamp timestamp or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setTimestamp(java.lang.Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Any additional information.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getTreeInfo() {
    return treeInfo;
  }

  /**
   * Any additional information.
   * @param treeInfo treeInfo or {@code null} for none
   */
  public IndexingUrlPatternUrlTreeUrlTree setTreeInfo(Proto2BridgeMessageSet treeInfo) {
    this.treeInfo = treeInfo;
    return this;
  }

  @Override
  public IndexingUrlPatternUrlTreeUrlTree set(String fieldName, Object value) {
    return (IndexingUrlPatternUrlTreeUrlTree) super.set(fieldName, value);
  }

  @Override
  public IndexingUrlPatternUrlTreeUrlTree clone() {
    return (IndexingUrlPatternUrlTreeUrlTree) super.clone();
  }

}
