/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * SchemaConfig represents configuration for a schema registry or a specific subject.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SchemaConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The subject to which this subject is an alias of. Only applicable for subject config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String alias;

  /**
   * Required. The compatibility type of the schema. The default value is BACKWARD. If unset in a
   * SchemaSubject-level SchemaConfig, defaults to the global value. If unset in a SchemaRegistry-
   * level SchemaConfig, reverts to the default value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compatibility;

  /**
   * Optional. If true, the schema will be normalized before being stored or looked up. The default
   * is false. If unset in a SchemaSubject-level SchemaConfig, the global value will be used. If
   * unset in a SchemaRegistry-level SchemaConfig, reverts to the default value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean normalize;

  /**
   * Optional. The subject to which this subject is an alias of. Only applicable for subject config.
   * @return value or {@code null} for none
   */
  public java.lang.String getAlias() {
    return alias;
  }

  /**
   * Optional. The subject to which this subject is an alias of. Only applicable for subject config.
   * @param alias alias or {@code null} for none
   */
  public SchemaConfig setAlias(java.lang.String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Required. The compatibility type of the schema. The default value is BACKWARD. If unset in a
   * SchemaSubject-level SchemaConfig, defaults to the global value. If unset in a SchemaRegistry-
   * level SchemaConfig, reverts to the default value.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompatibility() {
    return compatibility;
  }

  /**
   * Required. The compatibility type of the schema. The default value is BACKWARD. If unset in a
   * SchemaSubject-level SchemaConfig, defaults to the global value. If unset in a SchemaRegistry-
   * level SchemaConfig, reverts to the default value.
   * @param compatibility compatibility or {@code null} for none
   */
  public SchemaConfig setCompatibility(java.lang.String compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Optional. If true, the schema will be normalized before being stored or looked up. The default
   * is false. If unset in a SchemaSubject-level SchemaConfig, the global value will be used. If
   * unset in a SchemaRegistry-level SchemaConfig, reverts to the default value.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNormalize() {
    return normalize;
  }

  /**
   * Optional. If true, the schema will be normalized before being stored or looked up. The default
   * is false. If unset in a SchemaSubject-level SchemaConfig, the global value will be used. If
   * unset in a SchemaRegistry-level SchemaConfig, reverts to the default value.
   * @param normalize normalize or {@code null} for none
   */
  public SchemaConfig setNormalize(java.lang.Boolean normalize) {
    this.normalize = normalize;
    return this;
  }

  @Override
  public SchemaConfig set(String fieldName, Object value) {
    return (SchemaConfig) super.set(fieldName, value);
  }

  @Override
  public SchemaConfig clone() {
    return (SchemaConfig) super.clone();
  }

}
