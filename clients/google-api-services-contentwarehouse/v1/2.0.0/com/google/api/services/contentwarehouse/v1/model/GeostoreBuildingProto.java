/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protocol buffer holds the building-specific attributes for features of type
 * TYPE_COMPOUND_BUILDING.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreBuildingProto extends com.google.api.client.json.GenericJson {

  /**
   * The height of the base of this building, in meters above ground-level, if known.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float baseHeightMetersAgl;

  /**
   * The level in this building that should get displayed by default. If present, the default
   * display level must be one of this building's levels that are listed in the level[] field, and
   * if a level is set as a default level of one building, all buildings sharing the level should
   * have that same level as their default level. If not present, clients should not display any
   * level by default for that building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto defaultDisplayLevel;

  /**
   * The number of floors above the base of the building, if known. For example a regular 1-story
   * building would set this to "1". Use a value of GeostoreConstants::kDefaultHeightPerFloor when
   * converting "floors" to "height_meters".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer floors;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto floorsMetadata;

  /**
   * The height of the building above its base, in meters, if known.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float heightMeters;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto heightMetersMetadata;

  /**
   * The levels in this building, in no particular order. These levels refer back to the building
   * via another strong reference (the LevelProto.building field).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> level;

  /**
   * "Structure" denotes a physical architecture of the building that is readily visible. This
   * attribute is useful in that rarer structures can make good landmarks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String structure;

  /**
   * The height of the base of this building, in meters above ground-level, if known.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBaseHeightMetersAgl() {
    return baseHeightMetersAgl;
  }

  /**
   * The height of the base of this building, in meters above ground-level, if known.
   * @param baseHeightMetersAgl baseHeightMetersAgl or {@code null} for none
   */
  public GeostoreBuildingProto setBaseHeightMetersAgl(java.lang.Float baseHeightMetersAgl) {
    this.baseHeightMetersAgl = baseHeightMetersAgl;
    return this;
  }

  /**
   * The level in this building that should get displayed by default. If present, the default
   * display level must be one of this building's levels that are listed in the level[] field, and
   * if a level is set as a default level of one building, all buildings sharing the level should
   * have that same level as their default level. If not present, clients should not display any
   * level by default for that building.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getDefaultDisplayLevel() {
    return defaultDisplayLevel;
  }

  /**
   * The level in this building that should get displayed by default. If present, the default
   * display level must be one of this building's levels that are listed in the level[] field, and
   * if a level is set as a default level of one building, all buildings sharing the level should
   * have that same level as their default level. If not present, clients should not display any
   * level by default for that building.
   * @param defaultDisplayLevel defaultDisplayLevel or {@code null} for none
   */
  public GeostoreBuildingProto setDefaultDisplayLevel(GeostoreFeatureIdProto defaultDisplayLevel) {
    this.defaultDisplayLevel = defaultDisplayLevel;
    return this;
  }

  /**
   * The number of floors above the base of the building, if known. For example a regular 1-story
   * building would set this to "1". Use a value of GeostoreConstants::kDefaultHeightPerFloor when
   * converting "floors" to "height_meters".
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFloors() {
    return floors;
  }

  /**
   * The number of floors above the base of the building, if known. For example a regular 1-story
   * building would set this to "1". Use a value of GeostoreConstants::kDefaultHeightPerFloor when
   * converting "floors" to "height_meters".
   * @param floors floors or {@code null} for none
   */
  public GeostoreBuildingProto setFloors(java.lang.Integer floors) {
    this.floors = floors;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getFloorsMetadata() {
    return floorsMetadata;
  }

  /**
   * @param floorsMetadata floorsMetadata or {@code null} for none
   */
  public GeostoreBuildingProto setFloorsMetadata(GeostoreFieldMetadataProto floorsMetadata) {
    this.floorsMetadata = floorsMetadata;
    return this;
  }

  /**
   * The height of the building above its base, in meters, if known.
   * @return value or {@code null} for none
   */
  public java.lang.Float getHeightMeters() {
    return heightMeters;
  }

  /**
   * The height of the building above its base, in meters, if known.
   * @param heightMeters heightMeters or {@code null} for none
   */
  public GeostoreBuildingProto setHeightMeters(java.lang.Float heightMeters) {
    this.heightMeters = heightMeters;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getHeightMetersMetadata() {
    return heightMetersMetadata;
  }

  /**
   * @param heightMetersMetadata heightMetersMetadata or {@code null} for none
   */
  public GeostoreBuildingProto setHeightMetersMetadata(GeostoreFieldMetadataProto heightMetersMetadata) {
    this.heightMetersMetadata = heightMetersMetadata;
    return this;
  }

  /**
   * The levels in this building, in no particular order. These levels refer back to the building
   * via another strong reference (the LevelProto.building field).
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getLevel() {
    return level;
  }

  /**
   * The levels in this building, in no particular order. These levels refer back to the building
   * via another strong reference (the LevelProto.building field).
   * @param level level or {@code null} for none
   */
  public GeostoreBuildingProto setLevel(java.util.List<GeostoreFeatureIdProto> level) {
    this.level = level;
    return this;
  }

  /**
   * "Structure" denotes a physical architecture of the building that is readily visible. This
   * attribute is useful in that rarer structures can make good landmarks.
   * @return value or {@code null} for none
   */
  public java.lang.String getStructure() {
    return structure;
  }

  /**
   * "Structure" denotes a physical architecture of the building that is readily visible. This
   * attribute is useful in that rarer structures can make good landmarks.
   * @param structure structure or {@code null} for none
   */
  public GeostoreBuildingProto setStructure(java.lang.String structure) {
    this.structure = structure;
    return this;
  }

  @Override
  public GeostoreBuildingProto set(String fieldName, Object value) {
    return (GeostoreBuildingProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreBuildingProto clone() {
    return (GeostoreBuildingProto) super.clone();
  }

}
