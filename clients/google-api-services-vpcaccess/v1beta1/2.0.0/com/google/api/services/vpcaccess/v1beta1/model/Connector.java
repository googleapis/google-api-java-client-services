/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vpcaccess.v1beta1.model;

/**
 * Definition of a Serverless VPC Access connector.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Serverless VPC Access API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Connector extends com.google.api.client.json.GenericJson {

  /**
   * Output only. List of projects using the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> connectedProjects;

  /**
   * Output only. The creation time of the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. The range of internal addresses that follows RFC 4632 notation. Example:
   * `10.132.0.0/28`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ipCidrRange;

  /**
   * Output only. The last restart time of the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastRestartTime;

  /**
   * Machine type of VM Instance underlying connector. Default is e2-micro
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineType;

  /**
   * Maximum value of instances in autoscaling group underlying the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxInstances;

  /**
   * Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher
   * than the value specified by --min-throughput. If both max-throughput and max-instances are
   * provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is
   * discouraged in favor of `max-instances`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxThroughput;

  /**
   * Minimum value of instances in autoscaling group underlying the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minInstances;

  /**
   * Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower
   * than the value specified by --max-throughput. If both min-throughput and min-instances are
   * provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is
   * discouraged in favor of `min-instances`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minThroughput;

  /**
   * The resource name in the format `projects/locations/connectors`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Name of a VPC network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * Output only. State of the VPC access connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Optional. The subnet in which to house the VPC Access Connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Subnet subnet;

  /**
   * Output only. List of projects using the connector.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getConnectedProjects() {
    return connectedProjects;
  }

  /**
   * Output only. List of projects using the connector.
   * @param connectedProjects connectedProjects or {@code null} for none
   */
  public Connector setConnectedProjects(java.util.List<java.lang.String> connectedProjects) {
    this.connectedProjects = connectedProjects;
    return this;
  }

  /**
   * Output only. The creation time of the connector.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The creation time of the connector.
   * @param createTime createTime or {@code null} for none
   */
  public Connector setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. The range of internal addresses that follows RFC 4632 notation. Example:
   * `10.132.0.0/28`.
   * @return value or {@code null} for none
   */
  public java.lang.String getIpCidrRange() {
    return ipCidrRange;
  }

  /**
   * Optional. The range of internal addresses that follows RFC 4632 notation. Example:
   * `10.132.0.0/28`.
   * @param ipCidrRange ipCidrRange or {@code null} for none
   */
  public Connector setIpCidrRange(java.lang.String ipCidrRange) {
    this.ipCidrRange = ipCidrRange;
    return this;
  }

  /**
   * Output only. The last restart time of the connector.
   * @return value or {@code null} for none
   */
  public String getLastRestartTime() {
    return lastRestartTime;
  }

  /**
   * Output only. The last restart time of the connector.
   * @param lastRestartTime lastRestartTime or {@code null} for none
   */
  public Connector setLastRestartTime(String lastRestartTime) {
    this.lastRestartTime = lastRestartTime;
    return this;
  }

  /**
   * Machine type of VM Instance underlying connector. Default is e2-micro
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineType() {
    return machineType;
  }

  /**
   * Machine type of VM Instance underlying connector. Default is e2-micro
   * @param machineType machineType or {@code null} for none
   */
  public Connector setMachineType(java.lang.String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Maximum value of instances in autoscaling group underlying the connector.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxInstances() {
    return maxInstances;
  }

  /**
   * Maximum value of instances in autoscaling group underlying the connector.
   * @param maxInstances maxInstances or {@code null} for none
   */
  public Connector setMaxInstances(java.lang.Integer maxInstances) {
    this.maxInstances = maxInstances;
    return this;
  }

  /**
   * Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher
   * than the value specified by --min-throughput. If both max-throughput and max-instances are
   * provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is
   * discouraged in favor of `max-instances`.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxThroughput() {
    return maxThroughput;
  }

  /**
   * Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher
   * than the value specified by --min-throughput. If both max-throughput and max-instances are
   * provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is
   * discouraged in favor of `max-instances`.
   * @param maxThroughput maxThroughput or {@code null} for none
   */
  public Connector setMaxThroughput(java.lang.Integer maxThroughput) {
    this.maxThroughput = maxThroughput;
    return this;
  }

  /**
   * Minimum value of instances in autoscaling group underlying the connector.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinInstances() {
    return minInstances;
  }

  /**
   * Minimum value of instances in autoscaling group underlying the connector.
   * @param minInstances minInstances or {@code null} for none
   */
  public Connector setMinInstances(java.lang.Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

  /**
   * Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower
   * than the value specified by --max-throughput. If both min-throughput and min-instances are
   * provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is
   * discouraged in favor of `min-instances`.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinThroughput() {
    return minThroughput;
  }

  /**
   * Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an
   * `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower
   * than the value specified by --max-throughput. If both min-throughput and min-instances are
   * provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is
   * discouraged in favor of `min-instances`.
   * @param minThroughput minThroughput or {@code null} for none
   */
  public Connector setMinThroughput(java.lang.Integer minThroughput) {
    this.minThroughput = minThroughput;
    return this;
  }

  /**
   * The resource name in the format `projects/locations/connectors`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name in the format `projects/locations/connectors`.
   * @param name name or {@code null} for none
   */
  public Connector setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Name of a VPC network.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * Optional. Name of a VPC network.
   * @param network network or {@code null} for none
   */
  public Connector setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * Output only. State of the VPC access connector.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the VPC access connector.
   * @param state state or {@code null} for none
   */
  public Connector setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Optional. The subnet in which to house the VPC Access Connector.
   * @return value or {@code null} for none
   */
  public Subnet getSubnet() {
    return subnet;
  }

  /**
   * Optional. The subnet in which to house the VPC Access Connector.
   * @param subnet subnet or {@code null} for none
   */
  public Connector setSubnet(Subnet subnet) {
    this.subnet = subnet;
    return this;
  }

  @Override
  public Connector set(String fieldName, Object value) {
    return (Connector) super.set(fieldName, value);
  }

  @Override
  public Connector clone() {
    return (Connector) super.clone();
  }

}
