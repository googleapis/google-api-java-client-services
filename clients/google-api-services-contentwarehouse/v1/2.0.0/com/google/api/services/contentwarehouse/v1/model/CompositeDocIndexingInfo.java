/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Contains information *mostly* used within indexing (e.g. not used for building the production
 * serving shards). Most of this data is generated only in Alexandria, however there are exceptions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CompositeDocIndexingInfo extends com.google.api.client.json.GenericJson {

  /**
   * To hold extra info for building a final cdoc from raw cdoc and goldmine annotations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingDocjoinerCDocBuildInfo cdocBuildInfo;

  /**
   * Whether current page is under content protection, i.e. a page has been crawled as an error
   * page, but we preserve its last known good content and keep its crawl_status as
   * converter.CrawlStatus::CONTENT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean contentProtected;

  /**
   * If set, indicates that the crawl status was converted to ROBOTED for the reason specified by
   * the enum value in converter.RobotedReasons.ConvertToRobotedReasons. See
   * indexing/converter/proto/converter.proto for details. If unset, then the document was not
   * converted to roboted, and if the document crawl status is ROBOTED, then the document is
   * disallowed (at least to Google) in robots.txt.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer convertToRobotedReason;

  /**
   * One of the enum values in converter.CrawlStatus.State (see
   * indexing/converter/proto/converter.proto for details). Default is
   * converter.CrawlStatus::CONTENT. The document is roboted if the value is
   * converter.CrawlStatus::ROBOTED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer crawlStatus;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> demotionTags;

  /**
   * One of the enum values in converter.ErrorPageType (see indexing/converter/proto/error-page-
   * detector-enum.proto for detail). Default is converter::ERROR_PAGE_NONE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer errorType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> freshdocsCorpora;

  /**
   * The host id of the document. Used chiefly to determine whether the document is part of a parked
   * domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger hostid;

  /**
   * A short descriptive string to help identify the IE application or setup where this CDoc is
   * generated. For example: websearch_m3 This field is for debuggability purposes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ieIdentifier;

  /**
   * Indexing info about images (i.e. image links missing image data, etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSearchImageIndexingInfo imageIndexingInfo;

  /**
   * The timestamp (the time since the Epoch, in microseconds) when the docjoin is exported from
   * indexing. The main purpose of this field is to identify different versions of the same
   * document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long indexingTs;

  /**
   * Page is deleted when indexing choice flips between different corpora (e.g. desktop, mobile,
   * archive, scholar, etc.) for the same URL. It's only set for deletion cdocs. Downstreams using
   * URL as key should ignore the current deletion if the field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSiblingDeletion;

  /**
   * If set, the timestamp in microseconds when the URL stopped being canonical. This should never
   * be set for exported canonical documents. This field is used by dups during canonical flip, and
   * by webmain when doc selection switched between desktop and mobile. Union respects this
   * timestamp to prevent old doc being deleted until the new doc is picked up
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long noLongerCanonicalTimestamp;

  /**
   * This score is calculated by re-mapping the back onto the partition's score distribution, such
   * that the score represents the score of the equivalently ranked organically-selected document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float normalizedClickScore;

  /**
   * The raw navboost count for the canonical url without aggregating the navboost from dup urls.
   * This field is used when building forwarding map.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rawNavboost;

  /**
   * The timestamp (the time since the Epoch, in microseconds) to represent doc version, which is
   * used in the downstream processing after Raffia. If it's not set, indexing_ts will be used as
   * row_timestamp. The timestamp is generally set by reprocessing to set slightly newer indexing_ts
   * such that the system can respect the reprocessed version to overwrite old data in storage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long rowTimestamp;

  /**
   * Selection tier rank is a language normalized score ranging from 0-1 over the serving tier
   * (Base, Zeppelins, Landfills) for this document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float selectionTierRank;

  /**
   * The tracing ids is to label the version of url for url status tracking. This repeated field
   * will carry at most 10 tracing id. See more details in go/rich-tracing-design There will be less
   * than 2% base+uz cdocs carrying this field. The major sources of tracing ids include: * Indexing
   * API pushed urls * Index Metrics sampling urls The tracing ids will be written into cdocs by
   * Webmain Ramifier. The consumer of the tracing ids is Union serving notification collector see
   * more at go/serving-notification-from-union
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tracingId;

  /**
   * Changerate information for this doc (see crawler/changerate/changerate.proto for details).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CrawlerChangerateUrlChangerate urlChangerate;

  /**
   * Url change history for this doc (see crawler/changerate/changerate.proto for details). Note if
   * a doc has more than 20 changes, we only keep the last 20 changes here to avoid adding to much
   * data in its docjoin.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CrawlerChangerateUrlHistory urlHistory;

  /**
   * UrlPatternSignals for this doc, used to compute document score in LTG (see
   * indexing/signal_aggregator/proto/signal-aggregator.proto for details).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingSignalAggregatorUrlPatternSignals urlPatternSignals;

  /**
   * Indexing info about videos.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryVideoIndexingInfo videoIndexingInfo;

  /**
   * To hold extra info for building a final cdoc from raw cdoc and goldmine annotations.
   * @return value or {@code null} for none
   */
  public IndexingDocjoinerCDocBuildInfo getCdocBuildInfo() {
    return cdocBuildInfo;
  }

  /**
   * To hold extra info for building a final cdoc from raw cdoc and goldmine annotations.
   * @param cdocBuildInfo cdocBuildInfo or {@code null} for none
   */
  public CompositeDocIndexingInfo setCdocBuildInfo(IndexingDocjoinerCDocBuildInfo cdocBuildInfo) {
    this.cdocBuildInfo = cdocBuildInfo;
    return this;
  }

  /**
   * Whether current page is under content protection, i.e. a page has been crawled as an error
   * page, but we preserve its last known good content and keep its crawl_status as
   * converter.CrawlStatus::CONTENT.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getContentProtected() {
    return contentProtected;
  }

  /**
   * Whether current page is under content protection, i.e. a page has been crawled as an error
   * page, but we preserve its last known good content and keep its crawl_status as
   * converter.CrawlStatus::CONTENT.
   * @param contentProtected contentProtected or {@code null} for none
   */
  public CompositeDocIndexingInfo setContentProtected(java.lang.Boolean contentProtected) {
    this.contentProtected = contentProtected;
    return this;
  }

  /**
   * If set, indicates that the crawl status was converted to ROBOTED for the reason specified by
   * the enum value in converter.RobotedReasons.ConvertToRobotedReasons. See
   * indexing/converter/proto/converter.proto for details. If unset, then the document was not
   * converted to roboted, and if the document crawl status is ROBOTED, then the document is
   * disallowed (at least to Google) in robots.txt.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConvertToRobotedReason() {
    return convertToRobotedReason;
  }

  /**
   * If set, indicates that the crawl status was converted to ROBOTED for the reason specified by
   * the enum value in converter.RobotedReasons.ConvertToRobotedReasons. See
   * indexing/converter/proto/converter.proto for details. If unset, then the document was not
   * converted to roboted, and if the document crawl status is ROBOTED, then the document is
   * disallowed (at least to Google) in robots.txt.
   * @param convertToRobotedReason convertToRobotedReason or {@code null} for none
   */
  public CompositeDocIndexingInfo setConvertToRobotedReason(java.lang.Integer convertToRobotedReason) {
    this.convertToRobotedReason = convertToRobotedReason;
    return this;
  }

  /**
   * One of the enum values in converter.CrawlStatus.State (see
   * indexing/converter/proto/converter.proto for details). Default is
   * converter.CrawlStatus::CONTENT. The document is roboted if the value is
   * converter.CrawlStatus::ROBOTED.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCrawlStatus() {
    return crawlStatus;
  }

  /**
   * One of the enum values in converter.CrawlStatus.State (see
   * indexing/converter/proto/converter.proto for details). Default is
   * converter.CrawlStatus::CONTENT. The document is roboted if the value is
   * converter.CrawlStatus::ROBOTED.
   * @param crawlStatus crawlStatus or {@code null} for none
   */
  public CompositeDocIndexingInfo setCrawlStatus(java.lang.Integer crawlStatus) {
    this.crawlStatus = crawlStatus;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDemotionTags() {
    return demotionTags;
  }

  /**
   * @param demotionTags demotionTags or {@code null} for none
   */
  public CompositeDocIndexingInfo setDemotionTags(java.util.List<java.lang.String> demotionTags) {
    this.demotionTags = demotionTags;
    return this;
  }

  /**
   * One of the enum values in converter.ErrorPageType (see indexing/converter/proto/error-page-
   * detector-enum.proto for detail). Default is converter::ERROR_PAGE_NONE.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getErrorType() {
    return errorType;
  }

  /**
   * One of the enum values in converter.ErrorPageType (see indexing/converter/proto/error-page-
   * detector-enum.proto for detail). Default is converter::ERROR_PAGE_NONE.
   * @param errorType errorType or {@code null} for none
   */
  public CompositeDocIndexingInfo setErrorType(java.lang.Integer errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFreshdocsCorpora() {
    return freshdocsCorpora;
  }

  /**
   * @param freshdocsCorpora freshdocsCorpora or {@code null} for none
   */
  public CompositeDocIndexingInfo setFreshdocsCorpora(java.util.List<java.lang.String> freshdocsCorpora) {
    this.freshdocsCorpora = freshdocsCorpora;
    return this;
  }

  /**
   * The host id of the document. Used chiefly to determine whether the document is part of a parked
   * domain.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getHostid() {
    return hostid;
  }

  /**
   * The host id of the document. Used chiefly to determine whether the document is part of a parked
   * domain.
   * @param hostid hostid or {@code null} for none
   */
  public CompositeDocIndexingInfo setHostid(java.math.BigInteger hostid) {
    this.hostid = hostid;
    return this;
  }

  /**
   * A short descriptive string to help identify the IE application or setup where this CDoc is
   * generated. For example: websearch_m3 This field is for debuggability purposes.
   * @return value or {@code null} for none
   */
  public java.lang.String getIeIdentifier() {
    return ieIdentifier;
  }

  /**
   * A short descriptive string to help identify the IE application or setup where this CDoc is
   * generated. For example: websearch_m3 This field is for debuggability purposes.
   * @param ieIdentifier ieIdentifier or {@code null} for none
   */
  public CompositeDocIndexingInfo setIeIdentifier(java.lang.String ieIdentifier) {
    this.ieIdentifier = ieIdentifier;
    return this;
  }

  /**
   * Indexing info about images (i.e. image links missing image data, etc).
   * @return value or {@code null} for none
   */
  public ImageSearchImageIndexingInfo getImageIndexingInfo() {
    return imageIndexingInfo;
  }

  /**
   * Indexing info about images (i.e. image links missing image data, etc).
   * @param imageIndexingInfo imageIndexingInfo or {@code null} for none
   */
  public CompositeDocIndexingInfo setImageIndexingInfo(ImageSearchImageIndexingInfo imageIndexingInfo) {
    this.imageIndexingInfo = imageIndexingInfo;
    return this;
  }

  /**
   * The timestamp (the time since the Epoch, in microseconds) when the docjoin is exported from
   * indexing. The main purpose of this field is to identify different versions of the same
   * document.
   * @return value or {@code null} for none
   */
  public java.lang.Long getIndexingTs() {
    return indexingTs;
  }

  /**
   * The timestamp (the time since the Epoch, in microseconds) when the docjoin is exported from
   * indexing. The main purpose of this field is to identify different versions of the same
   * document.
   * @param indexingTs indexingTs or {@code null} for none
   */
  public CompositeDocIndexingInfo setIndexingTs(java.lang.Long indexingTs) {
    this.indexingTs = indexingTs;
    return this;
  }

  /**
   * Page is deleted when indexing choice flips between different corpora (e.g. desktop, mobile,
   * archive, scholar, etc.) for the same URL. It's only set for deletion cdocs. Downstreams using
   * URL as key should ignore the current deletion if the field is set.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSiblingDeletion() {
    return isSiblingDeletion;
  }

  /**
   * Page is deleted when indexing choice flips between different corpora (e.g. desktop, mobile,
   * archive, scholar, etc.) for the same URL. It's only set for deletion cdocs. Downstreams using
   * URL as key should ignore the current deletion if the field is set.
   * @param isSiblingDeletion isSiblingDeletion or {@code null} for none
   */
  public CompositeDocIndexingInfo setIsSiblingDeletion(java.lang.Boolean isSiblingDeletion) {
    this.isSiblingDeletion = isSiblingDeletion;
    return this;
  }

  /**
   * If set, the timestamp in microseconds when the URL stopped being canonical. This should never
   * be set for exported canonical documents. This field is used by dups during canonical flip, and
   * by webmain when doc selection switched between desktop and mobile. Union respects this
   * timestamp to prevent old doc being deleted until the new doc is picked up
   * @return value or {@code null} for none
   */
  public java.lang.Long getNoLongerCanonicalTimestamp() {
    return noLongerCanonicalTimestamp;
  }

  /**
   * If set, the timestamp in microseconds when the URL stopped being canonical. This should never
   * be set for exported canonical documents. This field is used by dups during canonical flip, and
   * by webmain when doc selection switched between desktop and mobile. Union respects this
   * timestamp to prevent old doc being deleted until the new doc is picked up
   * @param noLongerCanonicalTimestamp noLongerCanonicalTimestamp or {@code null} for none
   */
  public CompositeDocIndexingInfo setNoLongerCanonicalTimestamp(java.lang.Long noLongerCanonicalTimestamp) {
    this.noLongerCanonicalTimestamp = noLongerCanonicalTimestamp;
    return this;
  }

  /**
   * This score is calculated by re-mapping the back onto the partition's score distribution, such
   * that the score represents the score of the equivalently ranked organically-selected document.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNormalizedClickScore() {
    return normalizedClickScore;
  }

  /**
   * This score is calculated by re-mapping the back onto the partition's score distribution, such
   * that the score represents the score of the equivalently ranked organically-selected document.
   * @param normalizedClickScore normalizedClickScore or {@code null} for none
   */
  public CompositeDocIndexingInfo setNormalizedClickScore(java.lang.Float normalizedClickScore) {
    this.normalizedClickScore = normalizedClickScore;
    return this;
  }

  /**
   * The raw navboost count for the canonical url without aggregating the navboost from dup urls.
   * This field is used when building forwarding map.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRawNavboost() {
    return rawNavboost;
  }

  /**
   * The raw navboost count for the canonical url without aggregating the navboost from dup urls.
   * This field is used when building forwarding map.
   * @param rawNavboost rawNavboost or {@code null} for none
   */
  public CompositeDocIndexingInfo setRawNavboost(java.lang.Integer rawNavboost) {
    this.rawNavboost = rawNavboost;
    return this;
  }

  /**
   * The timestamp (the time since the Epoch, in microseconds) to represent doc version, which is
   * used in the downstream processing after Raffia. If it's not set, indexing_ts will be used as
   * row_timestamp. The timestamp is generally set by reprocessing to set slightly newer indexing_ts
   * such that the system can respect the reprocessed version to overwrite old data in storage.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRowTimestamp() {
    return rowTimestamp;
  }

  /**
   * The timestamp (the time since the Epoch, in microseconds) to represent doc version, which is
   * used in the downstream processing after Raffia. If it's not set, indexing_ts will be used as
   * row_timestamp. The timestamp is generally set by reprocessing to set slightly newer indexing_ts
   * such that the system can respect the reprocessed version to overwrite old data in storage.
   * @param rowTimestamp rowTimestamp or {@code null} for none
   */
  public CompositeDocIndexingInfo setRowTimestamp(java.lang.Long rowTimestamp) {
    this.rowTimestamp = rowTimestamp;
    return this;
  }

  /**
   * Selection tier rank is a language normalized score ranging from 0-1 over the serving tier
   * (Base, Zeppelins, Landfills) for this document.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSelectionTierRank() {
    return selectionTierRank;
  }

  /**
   * Selection tier rank is a language normalized score ranging from 0-1 over the serving tier
   * (Base, Zeppelins, Landfills) for this document.
   * @param selectionTierRank selectionTierRank or {@code null} for none
   */
  public CompositeDocIndexingInfo setSelectionTierRank(java.lang.Float selectionTierRank) {
    this.selectionTierRank = selectionTierRank;
    return this;
  }

  /**
   * The tracing ids is to label the version of url for url status tracking. This repeated field
   * will carry at most 10 tracing id. See more details in go/rich-tracing-design There will be less
   * than 2% base+uz cdocs carrying this field. The major sources of tracing ids include: * Indexing
   * API pushed urls * Index Metrics sampling urls The tracing ids will be written into cdocs by
   * Webmain Ramifier. The consumer of the tracing ids is Union serving notification collector see
   * more at go/serving-notification-from-union
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTracingId() {
    return tracingId;
  }

  /**
   * The tracing ids is to label the version of url for url status tracking. This repeated field
   * will carry at most 10 tracing id. See more details in go/rich-tracing-design There will be less
   * than 2% base+uz cdocs carrying this field. The major sources of tracing ids include: * Indexing
   * API pushed urls * Index Metrics sampling urls The tracing ids will be written into cdocs by
   * Webmain Ramifier. The consumer of the tracing ids is Union serving notification collector see
   * more at go/serving-notification-from-union
   * @param tracingId tracingId or {@code null} for none
   */
  public CompositeDocIndexingInfo setTracingId(java.util.List<java.lang.String> tracingId) {
    this.tracingId = tracingId;
    return this;
  }

  /**
   * Changerate information for this doc (see crawler/changerate/changerate.proto for details).
   * @return value or {@code null} for none
   */
  public CrawlerChangerateUrlChangerate getUrlChangerate() {
    return urlChangerate;
  }

  /**
   * Changerate information for this doc (see crawler/changerate/changerate.proto for details).
   * @param urlChangerate urlChangerate or {@code null} for none
   */
  public CompositeDocIndexingInfo setUrlChangerate(CrawlerChangerateUrlChangerate urlChangerate) {
    this.urlChangerate = urlChangerate;
    return this;
  }

  /**
   * Url change history for this doc (see crawler/changerate/changerate.proto for details). Note if
   * a doc has more than 20 changes, we only keep the last 20 changes here to avoid adding to much
   * data in its docjoin.
   * @return value or {@code null} for none
   */
  public CrawlerChangerateUrlHistory getUrlHistory() {
    return urlHistory;
  }

  /**
   * Url change history for this doc (see crawler/changerate/changerate.proto for details). Note if
   * a doc has more than 20 changes, we only keep the last 20 changes here to avoid adding to much
   * data in its docjoin.
   * @param urlHistory urlHistory or {@code null} for none
   */
  public CompositeDocIndexingInfo setUrlHistory(CrawlerChangerateUrlHistory urlHistory) {
    this.urlHistory = urlHistory;
    return this;
  }

  /**
   * UrlPatternSignals for this doc, used to compute document score in LTG (see
   * indexing/signal_aggregator/proto/signal-aggregator.proto for details).
   * @return value or {@code null} for none
   */
  public IndexingSignalAggregatorUrlPatternSignals getUrlPatternSignals() {
    return urlPatternSignals;
  }

  /**
   * UrlPatternSignals for this doc, used to compute document score in LTG (see
   * indexing/signal_aggregator/proto/signal-aggregator.proto for details).
   * @param urlPatternSignals urlPatternSignals or {@code null} for none
   */
  public CompositeDocIndexingInfo setUrlPatternSignals(IndexingSignalAggregatorUrlPatternSignals urlPatternSignals) {
    this.urlPatternSignals = urlPatternSignals;
    return this;
  }

  /**
   * Indexing info about videos.
   * @return value or {@code null} for none
   */
  public ImageRepositoryVideoIndexingInfo getVideoIndexingInfo() {
    return videoIndexingInfo;
  }

  /**
   * Indexing info about videos.
   * @param videoIndexingInfo videoIndexingInfo or {@code null} for none
   */
  public CompositeDocIndexingInfo setVideoIndexingInfo(ImageRepositoryVideoIndexingInfo videoIndexingInfo) {
    this.videoIndexingInfo = videoIndexingInfo;
    return this;
  }

  @Override
  public CompositeDocIndexingInfo set(String fieldName, Object value) {
    return (CompositeDocIndexingInfo) super.set(fieldName, value);
  }

  @Override
  public CompositeDocIndexingInfo clone() {
    return (CompositeDocIndexingInfo) super.clone();
  }

}
