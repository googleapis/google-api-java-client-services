/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A name for a Feature (street name, point of interest, city, building, etc). We currently use
 * NameProto for two essentially disjoint purposes: 1. Common names, which can be language-specific,
 * or have other kinds of variations. 2. Opaque IDs, such as postal codes, which only have the
 * `text` field set, and potentially some flags. This includes internal-only features like template
 * ids. Each NameProto representing a common name corresponds to an assertion that a fluent speaker
 * or writer of a language would recognize NameProto.text to name the given feature in that
 * language. As such, NameProtos are stored in a repeated field, often having: 1. multiple names
 * with the same text and varying languages, and 2. multiple names with the same language and
 * varying texts.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreNameProto extends com.google.api.client.json.GenericJson {

  /**
   * clang-format on The set of flags that apply to this name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> flag;

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * go/geo-schema-reference/feature-properties/languages. This field may be missing if the name
   * does not have a concept of language but should be set if the language is unknown.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * Field-level metadata for this name. NOTE: there are multiple NameProto fields in the Geo
   * Schema. Metadata here is only expected to be present on FeatureProto.name[].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * ** DEPRECATED ** The name text provided in the original source data (UTF-8 encoding). This is
   * the text provided in the source data unmodified with the exception of being converted to UTF-8
   * and stripping extra leading, trailing and duplicate whitespaces (if necessary).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawText;

  /**
   * The short name text (UTF-8 encoding). Acronyms/abbreviations should be consistently used, for
   * example "NE 57th St" rather than "Northeast 57th Street", "N.E 57th St." or some other variant.
   * This field should be populated with the chosen canonical version of the shortened name, based
   * on per-term transformations. For feature specific abbreviations (such as 'CA' for
   * 'California'), one should define a separate name with FLAG_ABBREVIATED set. For other variants
   * of the shortened name that are not the canonical one, devise client based logic (ex: query
   * rewriting rules).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shortText;

  /**
   * A place for clients to attach arbitrary data to a name. Never set in MapFacts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet temporaryData;

  /**
   * The name text (UTF-8 encoding). Acronyms/abbreviations should be fully expanded, for example
   * "Northeast 57th Street" rather than "NE 57th St". They can be shortened at display or geocode
   * time. This decision prevents ambiguity over such issues as whether "St" represents "Street" or
   * "Saint". However, it pushes language-specific knowledge into code. We will have libraries and
   * data files to contract acronyms/abbreviations at run-time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * clang-format on The set of flags that apply to this name.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFlag() {
    return flag;
  }

  /**
   * clang-format on The set of flags that apply to this name.
   * @param flag flag or {@code null} for none
   */
  public GeostoreNameProto setFlag(java.util.List<java.lang.String> flag) {
    this.flag = flag;
    return this;
  }

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * go/geo-schema-reference/feature-properties/languages. This field may be missing if the name
   * does not have a concept of language but should be set if the language is unknown.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * go/geo-schema-reference/feature-properties/languages. This field may be missing if the name
   * does not have a concept of language but should be set if the language is unknown.
   * @param language language or {@code null} for none
   */
  public GeostoreNameProto setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * Field-level metadata for this name. NOTE: there are multiple NameProto fields in the Geo
   * Schema. Metadata here is only expected to be present on FeatureProto.name[].
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this name. NOTE: there are multiple NameProto fields in the Geo
   * Schema. Metadata here is only expected to be present on FeatureProto.name[].
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreNameProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * ** DEPRECATED ** The name text provided in the original source data (UTF-8 encoding). This is
   * the text provided in the source data unmodified with the exception of being converted to UTF-8
   * and stripping extra leading, trailing and duplicate whitespaces (if necessary).
   * @return value or {@code null} for none
   */
  public java.lang.String getRawText() {
    return rawText;
  }

  /**
   * ** DEPRECATED ** The name text provided in the original source data (UTF-8 encoding). This is
   * the text provided in the source data unmodified with the exception of being converted to UTF-8
   * and stripping extra leading, trailing and duplicate whitespaces (if necessary).
   * @param rawText rawText or {@code null} for none
   */
  public GeostoreNameProto setRawText(java.lang.String rawText) {
    this.rawText = rawText;
    return this;
  }

  /**
   * The short name text (UTF-8 encoding). Acronyms/abbreviations should be consistently used, for
   * example "NE 57th St" rather than "Northeast 57th Street", "N.E 57th St." or some other variant.
   * This field should be populated with the chosen canonical version of the shortened name, based
   * on per-term transformations. For feature specific abbreviations (such as 'CA' for
   * 'California'), one should define a separate name with FLAG_ABBREVIATED set. For other variants
   * of the shortened name that are not the canonical one, devise client based logic (ex: query
   * rewriting rules).
   * @return value or {@code null} for none
   */
  public java.lang.String getShortText() {
    return shortText;
  }

  /**
   * The short name text (UTF-8 encoding). Acronyms/abbreviations should be consistently used, for
   * example "NE 57th St" rather than "Northeast 57th Street", "N.E 57th St." or some other variant.
   * This field should be populated with the chosen canonical version of the shortened name, based
   * on per-term transformations. For feature specific abbreviations (such as 'CA' for
   * 'California'), one should define a separate name with FLAG_ABBREVIATED set. For other variants
   * of the shortened name that are not the canonical one, devise client based logic (ex: query
   * rewriting rules).
   * @param shortText shortText or {@code null} for none
   */
  public GeostoreNameProto setShortText(java.lang.String shortText) {
    this.shortText = shortText;
    return this;
  }

  /**
   * A place for clients to attach arbitrary data to a name. Never set in MapFacts.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getTemporaryData() {
    return temporaryData;
  }

  /**
   * A place for clients to attach arbitrary data to a name. Never set in MapFacts.
   * @param temporaryData temporaryData or {@code null} for none
   */
  public GeostoreNameProto setTemporaryData(Proto2BridgeMessageSet temporaryData) {
    this.temporaryData = temporaryData;
    return this;
  }

  /**
   * The name text (UTF-8 encoding). Acronyms/abbreviations should be fully expanded, for example
   * "Northeast 57th Street" rather than "NE 57th St". They can be shortened at display or geocode
   * time. This decision prevents ambiguity over such issues as whether "St" represents "Street" or
   * "Saint". However, it pushes language-specific knowledge into code. We will have libraries and
   * data files to contract acronyms/abbreviations at run-time.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * The name text (UTF-8 encoding). Acronyms/abbreviations should be fully expanded, for example
   * "Northeast 57th Street" rather than "NE 57th St". They can be shortened at display or geocode
   * time. This decision prevents ambiguity over such issues as whether "St" represents "Street" or
   * "Saint". However, it pushes language-specific knowledge into code. We will have libraries and
   * data files to contract acronyms/abbreviations at run-time.
   * @param text text or {@code null} for none
   */
  public GeostoreNameProto setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  @Override
  public GeostoreNameProto set(String fieldName, Object value) {
    return (GeostoreNameProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreNameProto clone() {
    return (GeostoreNameProto) super.clone();
  }

}
