/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.authorizedbuyersmarketplace.v1.model;

/**
 * Message contains details about publisher-set frequency caps of the delivery.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Authorized Buyers Marketplace API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FrequencyCap extends com.google.api.client.json.GenericJson {

  /**
   * The maximum number of impressions that can be served to a user within the specified time
   * period.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxImpressions;

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per
   * user are counted and capped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timeUnitType;

  /**
   * The amount of time, in the units specified by time_unit_type. Defines the amount of time over
   * which impressions per user are counted and capped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timeUnitsCount;

  /**
   * The maximum number of impressions that can be served to a user within the specified time
   * period.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxImpressions() {
    return maxImpressions;
  }

  /**
   * The maximum number of impressions that can be served to a user within the specified time
   * period.
   * @param maxImpressions maxImpressions or {@code null} for none
   */
  public FrequencyCap setMaxImpressions(java.lang.Integer maxImpressions) {
    this.maxImpressions = maxImpressions;
    return this;
  }

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per
   * user are counted and capped.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimeUnitType() {
    return timeUnitType;
  }

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per
   * user are counted and capped.
   * @param timeUnitType timeUnitType or {@code null} for none
   */
  public FrequencyCap setTimeUnitType(java.lang.String timeUnitType) {
    this.timeUnitType = timeUnitType;
    return this;
  }

  /**
   * The amount of time, in the units specified by time_unit_type. Defines the amount of time over
   * which impressions per user are counted and capped.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimeUnitsCount() {
    return timeUnitsCount;
  }

  /**
   * The amount of time, in the units specified by time_unit_type. Defines the amount of time over
   * which impressions per user are counted and capped.
   * @param timeUnitsCount timeUnitsCount or {@code null} for none
   */
  public FrequencyCap setTimeUnitsCount(java.lang.Integer timeUnitsCount) {
    this.timeUnitsCount = timeUnitsCount;
    return this;
  }

  @Override
  public FrequencyCap set(String fieldName, Object value) {
    return (FrequencyCap) super.set(fieldName, value);
  }

  @Override
  public FrequencyCap clone() {
    return (FrequencyCap) super.clone();
  }

}
