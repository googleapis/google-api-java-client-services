/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * The logging options for the pipeline run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LoggingOptions extends com.google.api.client.json.GenericJson {

  /**
   * The location in Google Cloud Storage to which the pipeline logs will be copied. Can be
   * specified as a fully qualified directory path, in which case logs will be output with a unique
   * identifier as the filename in that directory, or as a fully specified path, which must end in
   * `.log`, in which case that path will be used, and the user must ensure that logs are not
   * overwritten. Stdout and stderr logs from the run are also generated and output as `-stdout.log`
   * and `-stderr.log`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcsPath;

  /**
   * The location in Google Cloud Storage to which the pipeline logs will be copied. Can be
   * specified as a fully qualified directory path, in which case logs will be output with a unique
   * identifier as the filename in that directory, or as a fully specified path, which must end in
   * `.log`, in which case that path will be used, and the user must ensure that logs are not
   * overwritten. Stdout and stderr logs from the run are also generated and output as `-stdout.log`
   * and `-stderr.log`.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcsPath() {
    return gcsPath;
  }

  /**
   * The location in Google Cloud Storage to which the pipeline logs will be copied. Can be
   * specified as a fully qualified directory path, in which case logs will be output with a unique
   * identifier as the filename in that directory, or as a fully specified path, which must end in
   * `.log`, in which case that path will be used, and the user must ensure that logs are not
   * overwritten. Stdout and stderr logs from the run are also generated and output as `-stdout.log`
   * and `-stderr.log`.
   * @param gcsPath gcsPath or {@code null} for none
   */
  public LoggingOptions setGcsPath(java.lang.String gcsPath) {
    this.gcsPath = gcsPath;
    return this;
  }

  @Override
  public LoggingOptions set(String fieldName, Object value) {
    return (LoggingOptions) super.set(fieldName, value);
  }

  @Override
  public LoggingOptions clone() {
    return (LoggingOptions) super.clone();
  }

}
