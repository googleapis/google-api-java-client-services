/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v1.model;

/**
 * BitbucketServerConfig represents the configuration for a Bitbucket Server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BitbucketServerConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String apiKey;

  /**
   * Output only. Connected Bitbucket Server repositories for this config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BitbucketServerRepositoryId> connectedRepositories;

  /**
   * Time when the config was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostUri;

  /**
   * The resource name for the config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC
   * network must be enabled for private service connection. This should be set if the Bitbucket
   * Server instance is hosted on-premises and not reachable by public internet. If this field is
   * left empty, no network peering will occur and calls to the Bitbucket Server instance will be
   * made over the public internet. Must be in the format
   * `projects/{project}/global/networks/{network}`, where {project} is a project number or id and
   * {network} is the name of a VPC network in the project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String peeredNetwork;

  /**
   * Required. Secret Manager secrets needed by the config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BitbucketServerSecrets secrets;

  /**
   * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM
   * format but the extension can be one of .pem, .cer, or .crt.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sslCa;

  /**
   * Username of the account Cloud Build will use on Bitbucket Server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Output only. UUID included in webhook requests. The UUID is used to look up the corresponding
   * config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webhookKey;

  /**
   * Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * @return value or {@code null} for none
   */
  public java.lang.String getApiKey() {
    return apiKey;
  }

  /**
   * Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * @param apiKey apiKey or {@code null} for none
   */
  public BitbucketServerConfig setApiKey(java.lang.String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Output only. Connected Bitbucket Server repositories for this config.
   * @return value or {@code null} for none
   */
  public java.util.List<BitbucketServerRepositoryId> getConnectedRepositories() {
    return connectedRepositories;
  }

  /**
   * Output only. Connected Bitbucket Server repositories for this config.
   * @param connectedRepositories connectedRepositories or {@code null} for none
   */
  public BitbucketServerConfig setConnectedRepositories(java.util.List<BitbucketServerRepositoryId> connectedRepositories) {
    this.connectedRepositories = connectedRepositories;
    return this;
  }

  /**
   * Time when the config was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Time when the config was created.
   * @param createTime createTime or {@code null} for none
   */
  public BitbucketServerConfig setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostUri() {
    return hostUri;
  }

  /**
   * Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it
   * cannot be changed. If you need to change it, please create another BitbucketServerConfig.
   * @param hostUri hostUri or {@code null} for none
   */
  public BitbucketServerConfig setHostUri(java.lang.String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

  /**
   * The resource name for the config.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name for the config.
   * @param name name or {@code null} for none
   */
  public BitbucketServerConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC
   * network must be enabled for private service connection. This should be set if the Bitbucket
   * Server instance is hosted on-premises and not reachable by public internet. If this field is
   * left empty, no network peering will occur and calls to the Bitbucket Server instance will be
   * made over the public internet. Must be in the format
   * `projects/{project}/global/networks/{network}`, where {project} is a project number or id and
   * {network} is the name of a VPC network in the project.
   * @return value or {@code null} for none
   */
  public java.lang.String getPeeredNetwork() {
    return peeredNetwork;
  }

  /**
   * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC
   * network must be enabled for private service connection. This should be set if the Bitbucket
   * Server instance is hosted on-premises and not reachable by public internet. If this field is
   * left empty, no network peering will occur and calls to the Bitbucket Server instance will be
   * made over the public internet. Must be in the format
   * `projects/{project}/global/networks/{network}`, where {project} is a project number or id and
   * {network} is the name of a VPC network in the project.
   * @param peeredNetwork peeredNetwork or {@code null} for none
   */
  public BitbucketServerConfig setPeeredNetwork(java.lang.String peeredNetwork) {
    this.peeredNetwork = peeredNetwork;
    return this;
  }

  /**
   * Required. Secret Manager secrets needed by the config.
   * @return value or {@code null} for none
   */
  public BitbucketServerSecrets getSecrets() {
    return secrets;
  }

  /**
   * Required. Secret Manager secrets needed by the config.
   * @param secrets secrets or {@code null} for none
   */
  public BitbucketServerConfig setSecrets(BitbucketServerSecrets secrets) {
    this.secrets = secrets;
    return this;
  }

  /**
   * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM
   * format but the extension can be one of .pem, .cer, or .crt.
   * @return value or {@code null} for none
   */
  public java.lang.String getSslCa() {
    return sslCa;
  }

  /**
   * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM
   * format but the extension can be one of .pem, .cer, or .crt.
   * @param sslCa sslCa or {@code null} for none
   */
  public BitbucketServerConfig setSslCa(java.lang.String sslCa) {
    this.sslCa = sslCa;
    return this;
  }

  /**
   * Username of the account Cloud Build will use on Bitbucket Server.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Username of the account Cloud Build will use on Bitbucket Server.
   * @param username username or {@code null} for none
   */
  public BitbucketServerConfig setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  /**
   * Output only. UUID included in webhook requests. The UUID is used to look up the corresponding
   * config.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebhookKey() {
    return webhookKey;
  }

  /**
   * Output only. UUID included in webhook requests. The UUID is used to look up the corresponding
   * config.
   * @param webhookKey webhookKey or {@code null} for none
   */
  public BitbucketServerConfig setWebhookKey(java.lang.String webhookKey) {
    this.webhookKey = webhookKey;
    return this;
  }

  @Override
  public BitbucketServerConfig set(String fieldName, Object value) {
    return (BitbucketServerConfig) super.set(fieldName, value);
  }

  @Override
  public BitbucketServerConfig clone() {
    return (BitbucketServerConfig) super.clone();
  }

}
