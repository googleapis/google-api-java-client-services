/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.plusDomains;

/**
 * Service definition for PlusDomains (v1).
 *
 * <p>
 * Builds on top of the Google+ platform for Google Apps Domains.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/+/domains/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link PlusDomainsRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class PlusDomains extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.27.0 of the Google+ Domains API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "plusDomains/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/plusDomains/v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public PlusDomains(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  PlusDomains(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Activities collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.Activities.List request = plusDomains.activities().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Activities activities() {
    return new Activities();
  }

  /**
   * The "activities" collection of methods.
   */
  public class Activities {

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "activities.get".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param activityId The ID of the activity to get.
     * @return the request
     */
    public Get get(java.lang.String activityId) throws java.io.IOException {
      Get result = new Get(activityId);
      initialize(result);
      return result;
    }

    public class Get extends PlusDomainsRequest<com.google.api.services.plusDomains.model.Activity> {

      private static final String REST_PATH = "activities/{activityId}";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "activities.get".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param activityId The ID of the activity to get.
       * @since 1.13
       */
      protected Get(java.lang.String activityId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.Activity.class);
        this.activityId = com.google.api.client.util.Preconditions.checkNotNull(activityId, "Required parameter activityId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the activity to get. */
      @com.google.api.client.util.Key
      private java.lang.String activityId;

      /** The ID of the activity to get.
       */
      public java.lang.String getActivityId() {
        return activityId;
      }

      /** The ID of the activity to get. */
      public Get setActivityId(java.lang.String activityId) {
        this.activityId = activityId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "activities.list".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to get activities for. The special value "me" can be used to indicate the
     *        authenticated user.
     * @param collection The collection of activities to list.
     * @return the request
     */
    public List list(java.lang.String userId, java.lang.String collection) throws java.io.IOException {
      List result = new List(userId, collection);
      initialize(result);
      return result;
    }

    public class List extends PlusDomainsRequest<com.google.api.services.plusDomains.model.ActivityFeed> {

      private static final String REST_PATH = "people/{userId}/activities/{collection}";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "activities.list".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to get activities for. The special value "me" can be used to indicate the
     *        authenticated user.
       * @param collection The collection of activities to list.
       * @since 1.13
       */
      protected List(java.lang.String userId, java.lang.String collection) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.ActivityFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.collection = com.google.api.client.util.Preconditions.checkNotNull(collection, "Required parameter collection must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The ID of the user to get activities for. The special value "me" can be used to indicate
       * the authenticated user.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to get activities for. The special value "me" can be used to indicate the
     authenticated user.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * The ID of the user to get activities for. The special value "me" can be used to indicate
       * the authenticated user.
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /** The collection of activities to list. */
      @com.google.api.client.util.Key
      private java.lang.String collection;

      /** The collection of activities to list.
       */
      public java.lang.String getCollection() {
        return collection;
      }

      /** The collection of activities to list. */
      public List setCollection(java.lang.String collection) {
        this.collection = collection;
        return this;
      }

      /**
       * The maximum number of activities to include in the response, which is used for paging. For
       * any response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of activities to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 20]
     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of activities to include in the response, which is used for paging. For
       * any response, the actual number returned might be less than the specified maxResults.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Audiences collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.Audiences.List request = plusDomains.audiences().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Audiences audiences() {
    return new Audiences();
  }

  /**
   * The "audiences" collection of methods.
   */
  public class Audiences {

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "audiences.list".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to get audiences for. The special value "me" can be used to indicate the
     *        authenticated user.
     * @return the request
     */
    public List list(java.lang.String userId) throws java.io.IOException {
      List result = new List(userId);
      initialize(result);
      return result;
    }

    public class List extends PlusDomainsRequest<com.google.api.services.plusDomains.model.AudiencesFeed> {

      private static final String REST_PATH = "people/{userId}/audiences";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "audiences.list".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to get audiences for. The special value "me" can be used to indicate the
     *        authenticated user.
       * @since 1.13
       */
      protected List(java.lang.String userId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.AudiencesFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The ID of the user to get audiences for. The special value "me" can be used to indicate the
       * authenticated user.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to get audiences for. The special value "me" can be used to indicate the
     authenticated user.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * The ID of the user to get audiences for. The special value "me" can be used to indicate the
       * authenticated user.
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /**
       * The maximum number of circles to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of circles to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 20]
     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of circles to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Circles collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.Circles.List request = plusDomains.circles().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Circles circles() {
    return new Circles();
  }

  /**
   * The "circles" collection of methods.
   */
  public class Circles {

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "circles.list".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to get circles for. The special value "me" can be used to indicate the
     *        authenticated user.
     * @return the request
     */
    public List list(java.lang.String userId) throws java.io.IOException {
      List result = new List(userId);
      initialize(result);
      return result;
    }

    public class List extends PlusDomainsRequest<com.google.api.services.plusDomains.model.CircleFeed> {

      private static final String REST_PATH = "people/{userId}/circles";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "circles.list".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to get circles for. The special value "me" can be used to indicate the
     *        authenticated user.
       * @since 1.13
       */
      protected List(java.lang.String userId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.CircleFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The ID of the user to get circles for. The special value "me" can be used to indicate the
       * authenticated user.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to get circles for. The special value "me" can be used to indicate the
     authenticated user.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * The ID of the user to get circles for. The special value "me" can be used to indicate the
       * authenticated user.
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /**
       * The maximum number of circles to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of circles to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 20]
     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of circles to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Comments collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.Comments.List request = plusDomains.comments().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comments comments() {
    return new Comments();
  }

  /**
   * The "comments" collection of methods.
   */
  public class Comments {

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "comments.get".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param commentId The ID of the comment to get.
     * @return the request
     */
    public Get get(java.lang.String commentId) throws java.io.IOException {
      Get result = new Get(commentId);
      initialize(result);
      return result;
    }

    public class Get extends PlusDomainsRequest<com.google.api.services.plusDomains.model.Comment> {

      private static final String REST_PATH = "comments/{commentId}";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "comments.get".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param commentId The ID of the comment to get.
       * @since 1.13
       */
      protected Get(java.lang.String commentId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.Comment.class);
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the comment to get. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to get.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to get. */
      public Get setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "comments.list".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param activityId The ID of the activity to get comments for.
     * @return the request
     */
    public List list(java.lang.String activityId) throws java.io.IOException {
      List result = new List(activityId);
      initialize(result);
      return result;
    }

    public class List extends PlusDomainsRequest<com.google.api.services.plusDomains.model.CommentFeed> {

      private static final String REST_PATH = "activities/{activityId}/comments";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "comments.list".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param activityId The ID of the activity to get comments for.
       * @since 1.13
       */
      protected List(java.lang.String activityId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.CommentFeed.class);
        this.activityId = com.google.api.client.util.Preconditions.checkNotNull(activityId, "Required parameter activityId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The ID of the activity to get comments for. */
      @com.google.api.client.util.Key
      private java.lang.String activityId;

      /** The ID of the activity to get comments for.
       */
      public java.lang.String getActivityId() {
        return activityId;
      }

      /** The ID of the activity to get comments for. */
      public List setActivityId(java.lang.String activityId) {
        this.activityId = activityId;
        return this;
      }

      /**
       * The maximum number of comments to include in the response, which is used for paging. For
       * any response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of comments to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 20]
     [minimum: 0] [maximum: 500]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of comments to include in the response, which is used for paging. For
       * any response, the actual number returned might be less than the specified maxResults.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** The order in which to sort the list of comments. */
      @com.google.api.client.util.Key
      private java.lang.String sortOrder;

      /** The order in which to sort the list of comments. [default: ascending]
       */
      public java.lang.String getSortOrder() {
        return sortOrder;
      }

      /** The order in which to sort the list of comments. */
      public List setSortOrder(java.lang.String sortOrder) {
        this.sortOrder = sortOrder;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Media collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.Media.List request = plusDomains.media().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Media media() {
    return new Media();
  }

  /**
   * The "media" collection of methods.
   */
  public class Media {

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "media.insert".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to create the activity on behalf of.
     * @param collection
     * @param content the {@link com.google.api.services.plusDomains.model.Media}
     * @return the request
     */
    public Insert insert(java.lang.String userId, java.lang.String collection, com.google.api.services.plusDomains.model.Media content) throws java.io.IOException {
      Insert result = new Insert(userId, collection, content);
      initialize(result);
      return result;
    }

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "media.insert".
     *
     * This request holds the parameters needed by the the plusDomains server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param userId The ID of the user to create the activity on behalf of.@param collection
     * @param content the {@link com.google.api.services.plusDomains.model.Media} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Insert insert(java.lang.String userId, java.lang.String collection, com.google.api.services.plusDomains.model.Media content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Insert result = new Insert(userId, collection, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Insert extends PlusDomainsRequest<com.google.api.services.plusDomains.model.Media> {

      private static final String REST_PATH = "people/{userId}/media/{collection}";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "media.insert".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to create the activity on behalf of.
       * @param collection
       * @param content the {@link com.google.api.services.plusDomains.model.Media}
       * @since 1.13
       */
      protected Insert(java.lang.String userId, java.lang.String collection, com.google.api.services.plusDomains.model.Media content) {
        super(PlusDomains.this, "POST", REST_PATH, content, com.google.api.services.plusDomains.model.Media.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.collection = com.google.api.client.util.Preconditions.checkNotNull(collection, "Required parameter collection must be specified.");
      }

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "media.insert".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param userId The ID of the user to create the activity on behalf of.@param collection
       * @param content the {@link com.google.api.services.plusDomains.model.Media} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Insert(java.lang.String userId, java.lang.String collection, com.google.api.services.plusDomains.model.Media content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(PlusDomains.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.plusDomains.model.Media.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.collection = com.google.api.client.util.Preconditions.checkNotNull(collection, "Required parameter collection must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The ID of the user to create the activity on behalf of. */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to create the activity on behalf of.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /** The ID of the user to create the activity on behalf of. */
      public Insert setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String collection;

      /**

       */
      public java.lang.String getCollection() {
        return collection;
      }

      public Insert setCollection(java.lang.String collection) {
        this.collection = collection;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the People collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlusDomains plusDomains = new PlusDomains(...);}
   *   {@code PlusDomains.People.List request = plusDomains.people().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public People people() {
    return new People();
  }

  /**
   * The "people" collection of methods.
   */
  public class People {

    /**
     * Get a person's profile.
     *
     * Create a request for the method "people.get".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the person to get the profile for. The special value "me" can be used to indicate the
     *        authenticated user.
     * @return the request
     */
    public Get get(java.lang.String userId) throws java.io.IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }

    public class Get extends PlusDomainsRequest<com.google.api.services.plusDomains.model.Person> {

      private static final String REST_PATH = "people/{userId}";

      /**
       * Get a person's profile.
       *
       * Create a request for the method "people.get".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the person to get the profile for. The special value "me" can be used to indicate the
     *        authenticated user.
       * @since 1.13
       */
      protected Get(java.lang.String userId) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.Person.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * The ID of the person to get the profile for. The special value "me" can be used to indicate
       * the authenticated user.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the person to get the profile for. The special value "me" can be used to indicate the
     authenticated user.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * The ID of the person to get the profile for. The special value "me" can be used to indicate
       * the authenticated user.
       */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * List all of the people in the specified collection.
     *
     * Create a request for the method "people.list".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userId Get the collection of people for the person identified. Use "me" to indicate the authenticated user.
     * @param collection The collection of people to list.
     * @return the request
     */
    public List list(java.lang.String userId, java.lang.String collection) throws java.io.IOException {
      List result = new List(userId, collection);
      initialize(result);
      return result;
    }

    public class List extends PlusDomainsRequest<com.google.api.services.plusDomains.model.PeopleFeed> {

      private static final String REST_PATH = "people/{userId}/people/{collection}";

      /**
       * List all of the people in the specified collection.
       *
       * Create a request for the method "people.list".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId Get the collection of people for the person identified. Use "me" to indicate the authenticated user.
       * @param collection The collection of people to list.
       * @since 1.13
       */
      protected List(java.lang.String userId, java.lang.String collection) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.PeopleFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.collection = com.google.api.client.util.Preconditions.checkNotNull(collection, "Required parameter collection must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * Get the collection of people for the person identified. Use "me" to indicate the
       * authenticated user.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** Get the collection of people for the person identified. Use "me" to indicate the authenticated
     user.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * Get the collection of people for the person identified. Use "me" to indicate the
       * authenticated user.
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /** The collection of people to list. */
      @com.google.api.client.util.Key
      private java.lang.String collection;

      /** The collection of people to list.
       */
      public java.lang.String getCollection() {
        return collection;
      }

      /** The collection of people to list. */
      public List setCollection(java.lang.String collection) {
        this.collection = collection;
        return this;
      }

      /**
       * The maximum number of people to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of people to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 100]
     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of people to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The order to return people in. */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** The order to return people in.
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** The order to return people in. */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     *
     * Create a request for the method "people.listByActivity".
     *
     * This request holds the parameters needed by the plusDomains server.  After setting any optional
     * parameters, call the {@link ListByActivity#execute()} method to invoke the remote operation.
     *
     * @param activityId The ID of the activity to get the list of people for.
     * @param collection The collection of people to list.
     * @return the request
     */
    public ListByActivity listByActivity(java.lang.String activityId, java.lang.String collection) throws java.io.IOException {
      ListByActivity result = new ListByActivity(activityId, collection);
      initialize(result);
      return result;
    }

    public class ListByActivity extends PlusDomainsRequest<com.google.api.services.plusDomains.model.PeopleFeed> {

      private static final String REST_PATH = "activities/{activityId}/people/{collection}";

      /**
       * Shut down. See https://developers.google.com/+/api-shutdown for more details.
       *
       * Create a request for the method "people.listByActivity".
       *
       * This request holds the parameters needed by the the plusDomains server.  After setting any
       * optional parameters, call the {@link ListByActivity#execute()} method to invoke the remote
       * operation. <p> {@link ListByActivity#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param activityId The ID of the activity to get the list of people for.
       * @param collection The collection of people to list.
       * @since 1.13
       */
      protected ListByActivity(java.lang.String activityId, java.lang.String collection) {
        super(PlusDomains.this, "GET", REST_PATH, null, com.google.api.services.plusDomains.model.PeopleFeed.class);
        this.activityId = com.google.api.client.util.Preconditions.checkNotNull(activityId, "Required parameter activityId must be specified.");
        this.collection = com.google.api.client.util.Preconditions.checkNotNull(collection, "Required parameter collection must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListByActivity setAlt(java.lang.String alt) {
        return (ListByActivity) super.setAlt(alt);
      }

      @Override
      public ListByActivity setFields(java.lang.String fields) {
        return (ListByActivity) super.setFields(fields);
      }

      @Override
      public ListByActivity setKey(java.lang.String key) {
        return (ListByActivity) super.setKey(key);
      }

      @Override
      public ListByActivity setOauthToken(java.lang.String oauthToken) {
        return (ListByActivity) super.setOauthToken(oauthToken);
      }

      @Override
      public ListByActivity setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListByActivity) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListByActivity setQuotaUser(java.lang.String quotaUser) {
        return (ListByActivity) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListByActivity setUserIp(java.lang.String userIp) {
        return (ListByActivity) super.setUserIp(userIp);
      }

      /** The ID of the activity to get the list of people for. */
      @com.google.api.client.util.Key
      private java.lang.String activityId;

      /** The ID of the activity to get the list of people for.
       */
      public java.lang.String getActivityId() {
        return activityId;
      }

      /** The ID of the activity to get the list of people for. */
      public ListByActivity setActivityId(java.lang.String activityId) {
        this.activityId = activityId;
        return this;
      }

      /** The collection of people to list. */
      @com.google.api.client.util.Key
      private java.lang.String collection;

      /** The collection of people to list.
       */
      public java.lang.String getCollection() {
        return collection;
      }

      /** The collection of people to list. */
      public ListByActivity setCollection(java.lang.String collection) {
        this.collection = collection;
        return this;
      }

      /**
       * The maximum number of people to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of people to include in the response, which is used for paging. For any
     response, the actual number returned might be less than the specified maxResults. [default: 20]
     [minimum: 1] [maximum: 100]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of people to include in the response, which is used for paging. For any
       * response, the actual number returned might be less than the specified maxResults.
       */
      public ListByActivity setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The continuation token, which is used to page through large result sets. To get the next page of
     results, set this parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * The continuation token, which is used to page through large result sets. To get the next
       * page of results, set this parameter to the value of "nextPageToken" from the previous
       * response.
       */
      public ListByActivity setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public ListByActivity set(String parameterName, Object value) {
        return (ListByActivity) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link PlusDomains}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link PlusDomains}. */
    @Override
    public PlusDomains build() {
      return new PlusDomains(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link PlusDomainsRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setPlusDomainsRequestInitializer(
        PlusDomainsRequestInitializer plusdomainsRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(plusdomainsRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
