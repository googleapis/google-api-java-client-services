/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * Configuration for ConvexStopPolicy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig extends com.google.api.client.json.GenericJson {

  /**
   * The number of Trial measurements used in autoregressive model for value prediction. A trial
   * won't be considered early stopping if has fewer measurement points.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long autoregressiveOrder;

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String learningRateParameterName;

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. When use_steps is false, this field is
   * set to the maximum elapsed seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxNumSteps;

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * num_steps > min_num_steps won't be considered for early stopping. It's ok to set it to 0, and a
   * trial can be early stopped at any stage. By default, min_num_steps is set to be one-tenth of
   * the max_num_steps. When use_steps is false, this field is set to the minimum elapsed seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long minNumSteps;

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_seconds==false, the early stopping decision is made according to the predicted objective
   * values according to the target steps. If use_seconds==true, elapsed_secs is used instead of
   * steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to
   * contain max_elapsed_seconds and min_elapsed_seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useSeconds;

  /**
   * The number of Trial measurements used in autoregressive model for value prediction. A trial
   * won't be considered early stopping if has fewer measurement points.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAutoregressiveOrder() {
    return autoregressiveOrder;
  }

  /**
   * The number of Trial measurements used in autoregressive model for value prediction. A trial
   * won't be considered early stopping if has fewer measurement points.
   * @param autoregressiveOrder autoregressiveOrder or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig setAutoregressiveOrder(java.lang.Long autoregressiveOrder) {
    this.autoregressiveOrder = autoregressiveOrder;
    return this;
  }

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * @return value or {@code null} for none
   */
  public java.lang.String getLearningRateParameterName() {
    return learningRateParameterName;
  }

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * @param learningRateParameterName learningRateParameterName or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig setLearningRateParameterName(java.lang.String learningRateParameterName) {
    this.learningRateParameterName = learningRateParameterName;
    return this;
  }

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. When use_steps is false, this field is
   * set to the maximum elapsed seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxNumSteps() {
    return maxNumSteps;
  }

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. When use_steps is false, this field is
   * set to the maximum elapsed seconds.
   * @param maxNumSteps maxNumSteps or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig setMaxNumSteps(java.lang.Long maxNumSteps) {
    this.maxNumSteps = maxNumSteps;
    return this;
  }

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * num_steps > min_num_steps won't be considered for early stopping. It's ok to set it to 0, and a
   * trial can be early stopped at any stage. By default, min_num_steps is set to be one-tenth of
   * the max_num_steps. When use_steps is false, this field is set to the minimum elapsed seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMinNumSteps() {
    return minNumSteps;
  }

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * num_steps > min_num_steps won't be considered for early stopping. It's ok to set it to 0, and a
   * trial can be early stopped at any stage. By default, min_num_steps is set to be one-tenth of
   * the max_num_steps. When use_steps is false, this field is set to the minimum elapsed seconds.
   * @param minNumSteps minNumSteps or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig setMinNumSteps(java.lang.Long minNumSteps) {
    this.minNumSteps = minNumSteps;
    return this;
  }

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_seconds==false, the early stopping decision is made according to the predicted objective
   * values according to the target steps. If use_seconds==true, elapsed_secs is used instead of
   * steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to
   * contain max_elapsed_seconds and min_elapsed_seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseSeconds() {
    return useSeconds;
  }

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_seconds==false, the early stopping decision is made according to the predicted objective
   * values according to the target steps. If use_seconds==true, elapsed_secs is used instead of
   * steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to
   * contain max_elapsed_seconds and min_elapsed_seconds.
   * @param useSeconds useSeconds or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig setUseSeconds(java.lang.Boolean useSeconds) {
    this.useSeconds = useSeconds;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig clone() {
    return (GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig) super.clone();
  }

}
