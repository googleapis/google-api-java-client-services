/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbilling.v1beta.model;

/**
 * Specifies a resource-based committed use discount (CUD).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Billing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmResourceBasedCud extends com.google.api.client.json.GenericJson {

  /**
   * Guest accelerator, known as GPU.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GuestAccelerator guestAccelerator;

  /**
   * The machine series for CUD. For example: "n1" for general purpose N1 machine type commitments.
   * "n2" for general purpose N2 machine type commitments. "e2" for general purpose E2 machine type
   * commitments. "n2d" for general purpose N2D machine type commitments. "t2d" for general purpose
   * T2D machine type commitments. "c2"/"c2d" for compute-optimized commitments. "m1"/"m2" for the
   * memory-optimized commitments. "a2' for the accelerator-optimized commitments.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineSeries;

  /**
   * Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double memorySizeGb;

  /**
   * Commitment usage plan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String plan;

  /**
   * The region where the VM runs. For example: "us-central1"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String region;

  /**
   * The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or
   * odd.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long virtualCpuCount;

  /**
   * Guest accelerator, known as GPU.
   * @return value or {@code null} for none
   */
  public GuestAccelerator getGuestAccelerator() {
    return guestAccelerator;
  }

  /**
   * Guest accelerator, known as GPU.
   * @param guestAccelerator guestAccelerator or {@code null} for none
   */
  public VmResourceBasedCud setGuestAccelerator(GuestAccelerator guestAccelerator) {
    this.guestAccelerator = guestAccelerator;
    return this;
  }

  /**
   * The machine series for CUD. For example: "n1" for general purpose N1 machine type commitments.
   * "n2" for general purpose N2 machine type commitments. "e2" for general purpose E2 machine type
   * commitments. "n2d" for general purpose N2D machine type commitments. "t2d" for general purpose
   * T2D machine type commitments. "c2"/"c2d" for compute-optimized commitments. "m1"/"m2" for the
   * memory-optimized commitments. "a2' for the accelerator-optimized commitments.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineSeries() {
    return machineSeries;
  }

  /**
   * The machine series for CUD. For example: "n1" for general purpose N1 machine type commitments.
   * "n2" for general purpose N2 machine type commitments. "e2" for general purpose E2 machine type
   * commitments. "n2d" for general purpose N2D machine type commitments. "t2d" for general purpose
   * T2D machine type commitments. "c2"/"c2d" for compute-optimized commitments. "m1"/"m2" for the
   * memory-optimized commitments. "a2' for the accelerator-optimized commitments.
   * @param machineSeries machineSeries or {@code null} for none
   */
  public VmResourceBasedCud setMachineSeries(java.lang.String machineSeries) {
    this.machineSeries = machineSeries;
    return this;
  }

  /**
   * Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).
   * @return value or {@code null} for none
   */
  public java.lang.Double getMemorySizeGb() {
    return memorySizeGb;
  }

  /**
   * Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).
   * @param memorySizeGb memorySizeGb or {@code null} for none
   */
  public VmResourceBasedCud setMemorySizeGb(java.lang.Double memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Commitment usage plan.
   * @return value or {@code null} for none
   */
  public java.lang.String getPlan() {
    return plan;
  }

  /**
   * Commitment usage plan.
   * @param plan plan or {@code null} for none
   */
  public VmResourceBasedCud setPlan(java.lang.String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * The region where the VM runs. For example: "us-central1"
   * @return value or {@code null} for none
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * The region where the VM runs. For example: "us-central1"
   * @param region region or {@code null} for none
   */
  public VmResourceBasedCud setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  /**
   * The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or
   * odd.
   * @return value or {@code null} for none
   */
  public java.lang.Long getVirtualCpuCount() {
    return virtualCpuCount;
  }

  /**
   * The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or
   * odd.
   * @param virtualCpuCount virtualCpuCount or {@code null} for none
   */
  public VmResourceBasedCud setVirtualCpuCount(java.lang.Long virtualCpuCount) {
    this.virtualCpuCount = virtualCpuCount;
    return this;
  }

  @Override
  public VmResourceBasedCud set(String fieldName, Object value) {
    return (VmResourceBasedCud) super.set(fieldName, value);
  }

  @Override
  public VmResourceBasedCud clone() {
    return (VmResourceBasedCud) super.clone();
  }

}
