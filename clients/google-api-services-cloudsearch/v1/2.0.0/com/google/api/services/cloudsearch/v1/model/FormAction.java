/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Model definition for FormAction.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FormAction extends com.google.api.client.json.GenericJson {

  /**
   * Apps script function that should be invoked in the developer's apps script when the containing
   * element is clicked/activated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String actionMethodName;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String loadIndicator;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ActionParameter> parameters;

  static {
    // hack to force ProGuard to consider ActionParameter used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ActionParameter.class);
  }

  /**
   * Indicates whether form values persist after the action. When false, the Apps Script is
   * responsible for persisting values, by setting any form field values using the formInputs in the
   * event. Disabling this behavior can be used if the add-on needs the ability to clear form
   * fields, for example, as with persistent values, there is no means for clearing existing values.
   * When disabling persistent values, it is strongly recommended that the add-on use
   * LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by the
   * user while the action is being processed. When using LoadIndicator.NONE for any of the actions,
   * persistent values are recommended, as it ensures that any changes made by the user after form /
   * on change actions are sent to the server are not overwritten by the response. Persistent values
   * disabled by default. While we recommend persistent values be used in the typical use case, we
   * do not enable by default, as doing so would change the current behavior of existing add-ons in
   * prod.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean persistValues;

  /**
   * Apps script function that should be invoked in the developer's apps script when the containing
   * element is clicked/activated.
   * @return value or {@code null} for none
   */
  public java.lang.String getActionMethodName() {
    return actionMethodName;
  }

  /**
   * Apps script function that should be invoked in the developer's apps script when the containing
   * element is clicked/activated.
   * @param actionMethodName actionMethodName or {@code null} for none
   */
  public FormAction setActionMethodName(java.lang.String actionMethodName) {
    this.actionMethodName = actionMethodName;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLoadIndicator() {
    return loadIndicator;
  }

  /**
   * @param loadIndicator loadIndicator or {@code null} for none
   */
  public FormAction setLoadIndicator(java.lang.String loadIndicator) {
    this.loadIndicator = loadIndicator;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ActionParameter> getParameters() {
    return parameters;
  }

  /**
   * @param parameters parameters or {@code null} for none
   */
  public FormAction setParameters(java.util.List<ActionParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Indicates whether form values persist after the action. When false, the Apps Script is
   * responsible for persisting values, by setting any form field values using the formInputs in the
   * event. Disabling this behavior can be used if the add-on needs the ability to clear form
   * fields, for example, as with persistent values, there is no means for clearing existing values.
   * When disabling persistent values, it is strongly recommended that the add-on use
   * LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by the
   * user while the action is being processed. When using LoadIndicator.NONE for any of the actions,
   * persistent values are recommended, as it ensures that any changes made by the user after form /
   * on change actions are sent to the server are not overwritten by the response. Persistent values
   * disabled by default. While we recommend persistent values be used in the typical use case, we
   * do not enable by default, as doing so would change the current behavior of existing add-ons in
   * prod.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPersistValues() {
    return persistValues;
  }

  /**
   * Indicates whether form values persist after the action. When false, the Apps Script is
   * responsible for persisting values, by setting any form field values using the formInputs in the
   * event. Disabling this behavior can be used if the add-on needs the ability to clear form
   * fields, for example, as with persistent values, there is no means for clearing existing values.
   * When disabling persistent values, it is strongly recommended that the add-on use
   * LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by the
   * user while the action is being processed. When using LoadIndicator.NONE for any of the actions,
   * persistent values are recommended, as it ensures that any changes made by the user after form /
   * on change actions are sent to the server are not overwritten by the response. Persistent values
   * disabled by default. While we recommend persistent values be used in the typical use case, we
   * do not enable by default, as doing so would change the current behavior of existing add-ons in
   * prod.
   * @param persistValues persistValues or {@code null} for none
   */
  public FormAction setPersistValues(java.lang.Boolean persistValues) {
    this.persistValues = persistValues;
    return this;
  }

  @Override
  public FormAction set(String fieldName, Object value) {
    return (FormAction) super.set(fieldName, value);
  }

  @Override
  public FormAction clone() {
    return (FormAction) super.clone();
  }

}
