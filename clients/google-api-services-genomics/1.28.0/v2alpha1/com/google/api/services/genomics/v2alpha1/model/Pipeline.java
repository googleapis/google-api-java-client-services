/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.v2alpha1.model;

/**
 * Specifies a series of actions to execute, expressed as Docker containers.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Pipeline extends com.google.api.client.json.GenericJson {

  /**
   * The list of actions to execute, in the order they are specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Action> actions;

  static {
    // hack to force ProGuard to consider Action used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Action.class);
  }

  /**
   * The environment to pass into every action. Each action can also specify additional environment
   * variables but cannot delete an entry from this map (though they can overwrite it with a
   * different value).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> environment;

  /**
   * The resources required for execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Resources resources;

  /**
   * The maximum amount of time to give the pipeline to complete.  This includes the time spent
   * waiting for a worker to be allocated.  If the pipeline fails to complete before the timeout, it
   * will be cancelled and the error code will be set to DEADLINE_EXCEEDED.
   *
   * If unspecified, it will default to 7 days.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String timeout;

  /**
   * The list of actions to execute, in the order they are specified.
   * @return value or {@code null} for none
   */
  public java.util.List<Action> getActions() {
    return actions;
  }

  /**
   * The list of actions to execute, in the order they are specified.
   * @param actions actions or {@code null} for none
   */
  public Pipeline setActions(java.util.List<Action> actions) {
    this.actions = actions;
    return this;
  }

  /**
   * The environment to pass into every action. Each action can also specify additional environment
   * variables but cannot delete an entry from this map (though they can overwrite it with a
   * different value).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getEnvironment() {
    return environment;
  }

  /**
   * The environment to pass into every action. Each action can also specify additional environment
   * variables but cannot delete an entry from this map (though they can overwrite it with a
   * different value).
   * @param environment environment or {@code null} for none
   */
  public Pipeline setEnvironment(java.util.Map<String, java.lang.String> environment) {
    this.environment = environment;
    return this;
  }

  /**
   * The resources required for execution.
   * @return value or {@code null} for none
   */
  public Resources getResources() {
    return resources;
  }

  /**
   * The resources required for execution.
   * @param resources resources or {@code null} for none
   */
  public Pipeline setResources(Resources resources) {
    this.resources = resources;
    return this;
  }

  /**
   * The maximum amount of time to give the pipeline to complete.  This includes the time spent
   * waiting for a worker to be allocated.  If the pipeline fails to complete before the timeout, it
   * will be cancelled and the error code will be set to DEADLINE_EXCEEDED.
   *
   * If unspecified, it will default to 7 days.
   * @return value or {@code null} for none
   */
  public String getTimeout() {
    return timeout;
  }

  /**
   * The maximum amount of time to give the pipeline to complete.  This includes the time spent
   * waiting for a worker to be allocated.  If the pipeline fails to complete before the timeout, it
   * will be cancelled and the error code will be set to DEADLINE_EXCEEDED.
   *
   * If unspecified, it will default to 7 days.
   * @param timeout timeout or {@code null} for none
   */
  public Pipeline setTimeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  @Override
  public Pipeline set(String fieldName, Object value) {
    return (Pipeline) super.set(fieldName, value);
  }

  @Override
  public Pipeline clone() {
    return (Pipeline) super.clone();
  }

}
