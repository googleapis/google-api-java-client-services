/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.books.model;

/**
 * Model definition for DownloadAccessRestriction.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Books API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DownloadAccessRestriction extends com.google.api.client.json.GenericJson {

  /**
   * If restricted, whether access is granted for this (user, device, volume).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean deviceAllowed;

  /**
   * If restricted, the number of content download licenses already acquired (including the
   * requesting client, if licensed).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer downloadsAcquired;

  /**
   * If deviceAllowed, whether access was just acquired with this request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean justAcquired;

  /**
   * Resource type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * If restricted, the maximum number of content download licenses for this volume.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxDownloadDevices;

  /**
   * Error/warning message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String message;

  /**
   * Client nonce for verification. Download access and client-validation only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nonce;

  /**
   * Error/warning reason code. Additional codes may be added in the future. 0 OK 100
   * ACCESS_DENIED_PUBLISHER_LIMIT 101 ACCESS_DENIED_LIMIT 200 WARNING_USED_LAST_ACCESS
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reasonCode;

  /**
   * Whether this volume has any download access restrictions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean restricted;

  /**
   * Response signature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signature;

  /**
   * Client app identifier for verification. Download access and client-validation only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Identifies the volume for which this entry applies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String volumeId;

  /**
   * If restricted, whether access is granted for this (user, device, volume).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDeviceAllowed() {
    return deviceAllowed;
  }

  /**
   * If restricted, whether access is granted for this (user, device, volume).
   * @param deviceAllowed deviceAllowed or {@code null} for none
   */
  public DownloadAccessRestriction setDeviceAllowed(java.lang.Boolean deviceAllowed) {
    this.deviceAllowed = deviceAllowed;
    return this;
  }

  /**
   * If restricted, the number of content download licenses already acquired (including the
   * requesting client, if licensed).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDownloadsAcquired() {
    return downloadsAcquired;
  }

  /**
   * If restricted, the number of content download licenses already acquired (including the
   * requesting client, if licensed).
   * @param downloadsAcquired downloadsAcquired or {@code null} for none
   */
  public DownloadAccessRestriction setDownloadsAcquired(java.lang.Integer downloadsAcquired) {
    this.downloadsAcquired = downloadsAcquired;
    return this;
  }

  /**
   * If deviceAllowed, whether access was just acquired with this request.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getJustAcquired() {
    return justAcquired;
  }

  /**
   * If deviceAllowed, whether access was just acquired with this request.
   * @param justAcquired justAcquired or {@code null} for none
   */
  public DownloadAccessRestriction setJustAcquired(java.lang.Boolean justAcquired) {
    this.justAcquired = justAcquired;
    return this;
  }

  /**
   * Resource type.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Resource type.
   * @param kind kind or {@code null} for none
   */
  public DownloadAccessRestriction setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * If restricted, the maximum number of content download licenses for this volume.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxDownloadDevices() {
    return maxDownloadDevices;
  }

  /**
   * If restricted, the maximum number of content download licenses for this volume.
   * @param maxDownloadDevices maxDownloadDevices or {@code null} for none
   */
  public DownloadAccessRestriction setMaxDownloadDevices(java.lang.Integer maxDownloadDevices) {
    this.maxDownloadDevices = maxDownloadDevices;
    return this;
  }

  /**
   * Error/warning message.
   * @return value or {@code null} for none
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Error/warning message.
   * @param message message or {@code null} for none
   */
  public DownloadAccessRestriction setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  /**
   * Client nonce for verification. Download access and client-validation only.
   * @return value or {@code null} for none
   */
  public java.lang.String getNonce() {
    return nonce;
  }

  /**
   * Client nonce for verification. Download access and client-validation only.
   * @param nonce nonce or {@code null} for none
   */
  public DownloadAccessRestriction setNonce(java.lang.String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Error/warning reason code. Additional codes may be added in the future. 0 OK 100
   * ACCESS_DENIED_PUBLISHER_LIMIT 101 ACCESS_DENIED_LIMIT 200 WARNING_USED_LAST_ACCESS
   * @return value or {@code null} for none
   */
  public java.lang.String getReasonCode() {
    return reasonCode;
  }

  /**
   * Error/warning reason code. Additional codes may be added in the future. 0 OK 100
   * ACCESS_DENIED_PUBLISHER_LIMIT 101 ACCESS_DENIED_LIMIT 200 WARNING_USED_LAST_ACCESS
   * @param reasonCode reasonCode or {@code null} for none
   */
  public DownloadAccessRestriction setReasonCode(java.lang.String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Whether this volume has any download access restrictions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRestricted() {
    return restricted;
  }

  /**
   * Whether this volume has any download access restrictions.
   * @param restricted restricted or {@code null} for none
   */
  public DownloadAccessRestriction setRestricted(java.lang.Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

  /**
   * Response signature.
   * @return value or {@code null} for none
   */
  public java.lang.String getSignature() {
    return signature;
  }

  /**
   * Response signature.
   * @param signature signature or {@code null} for none
   */
  public DownloadAccessRestriction setSignature(java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Client app identifier for verification. Download access and client-validation only.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Client app identifier for verification. Download access and client-validation only.
   * @param source source or {@code null} for none
   */
  public DownloadAccessRestriction setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * Identifies the volume for which this entry applies.
   * @return value or {@code null} for none
   */
  public java.lang.String getVolumeId() {
    return volumeId;
  }

  /**
   * Identifies the volume for which this entry applies.
   * @param volumeId volumeId or {@code null} for none
   */
  public DownloadAccessRestriction setVolumeId(java.lang.String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  @Override
  public DownloadAccessRestriction set(String fieldName, Object value) {
    return (DownloadAccessRestriction) super.set(fieldName, value);
  }

  @Override
  public DownloadAccessRestriction clone() {
    return (DownloadAccessRestriction) super.clone();
  }

}
