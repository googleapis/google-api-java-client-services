/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for GeostorePolyLineProto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostorePolyLineProto extends com.google.api.client.json.GenericJson {

  /**
   * Field-level metadata for this polyline. NOTE: there are multiple PolyLineProto fields in the
   * Geo Schema. Metadata here is only expected to be present on FeatureProto.polyline[].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * A place for clients to attach arbitrary data to a polyline. Never set in MapFacts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet temporaryData;

  /**
   * A sequence of vertices connected by geodesics (the equivalent of straight lines on the sphere).
   * Adjacent vertices are connected by the shorter of the two geodesics that connect them, i.e. all
   * edges are 180 degrees or less. Note that the edge definition becomes numerically unstable as
   * the arc length approaches 180 degrees. Polylines are generally expected to be non-self-
   * intersecting, but any such restriction is imposed by the user of the polyline rather than the
   * polyline itself.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostorePointProto> vertex;

  static {
    // hack to force ProGuard to consider GeostorePointProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostorePointProto.class);
  }

  /**
   * Field-level metadata for this polyline. NOTE: there are multiple PolyLineProto fields in the
   * Geo Schema. Metadata here is only expected to be present on FeatureProto.polyline[].
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this polyline. NOTE: there are multiple PolyLineProto fields in the
   * Geo Schema. Metadata here is only expected to be present on FeatureProto.polyline[].
   * @param metadata metadata or {@code null} for none
   */
  public GeostorePolyLineProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * A place for clients to attach arbitrary data to a polyline. Never set in MapFacts.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getTemporaryData() {
    return temporaryData;
  }

  /**
   * A place for clients to attach arbitrary data to a polyline. Never set in MapFacts.
   * @param temporaryData temporaryData or {@code null} for none
   */
  public GeostorePolyLineProto setTemporaryData(Proto2BridgeMessageSet temporaryData) {
    this.temporaryData = temporaryData;
    return this;
  }

  /**
   * A sequence of vertices connected by geodesics (the equivalent of straight lines on the sphere).
   * Adjacent vertices are connected by the shorter of the two geodesics that connect them, i.e. all
   * edges are 180 degrees or less. Note that the edge definition becomes numerically unstable as
   * the arc length approaches 180 degrees. Polylines are generally expected to be non-self-
   * intersecting, but any such restriction is imposed by the user of the polyline rather than the
   * polyline itself.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostorePointProto> getVertex() {
    return vertex;
  }

  /**
   * A sequence of vertices connected by geodesics (the equivalent of straight lines on the sphere).
   * Adjacent vertices are connected by the shorter of the two geodesics that connect them, i.e. all
   * edges are 180 degrees or less. Note that the edge definition becomes numerically unstable as
   * the arc length approaches 180 degrees. Polylines are generally expected to be non-self-
   * intersecting, but any such restriction is imposed by the user of the polyline rather than the
   * polyline itself.
   * @param vertex vertex or {@code null} for none
   */
  public GeostorePolyLineProto setVertex(java.util.List<GeostorePointProto> vertex) {
    this.vertex = vertex;
    return this;
  }

  @Override
  public GeostorePolyLineProto set(String fieldName, Object value) {
    return (GeostorePolyLineProto) super.set(fieldName, value);
  }

  @Override
  public GeostorePolyLineProto clone() {
    return (GeostorePolyLineProto) super.clone();
  }

}
