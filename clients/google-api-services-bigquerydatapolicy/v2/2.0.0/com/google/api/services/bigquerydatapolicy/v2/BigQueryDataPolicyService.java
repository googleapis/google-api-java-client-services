/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigquerydatapolicy.v2;

/**
 * Service definition for BigQueryDataPolicyService (v2).
 *
 * <p>
 * Allows users to manage BigQuery data policies.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/bigquery/docs/column-data-masking" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BigQueryDataPolicyServiceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class BigQueryDataPolicyService extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the BigQuery Data Policy API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://bigquerydatapolicy.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://bigquerydatapolicy.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public BigQueryDataPolicyService(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  BigQueryDataPolicyService(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code BigQueryDataPolicyService bigquerydatapolicy = new BigQueryDataPolicyService(...);}
   *   {@code BigQueryDataPolicyService.Projects.List request = bigquerydatapolicy.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code BigQueryDataPolicyService bigquerydatapolicy = new BigQueryDataPolicyService(...);}
     *   {@code BigQueryDataPolicyService.Locations.List request = bigquerydatapolicy.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the DataPolicies collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code BigQueryDataPolicyService bigquerydatapolicy = new BigQueryDataPolicyService(...);}
       *   {@code BigQueryDataPolicyService.DataPolicies.List request = bigquerydatapolicy.dataPolicies().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public DataPolicies dataPolicies() {
        return new DataPolicies();
      }

      /**
       * The "dataPolicies" collection of methods.
       */
      public class DataPolicies {

        /**
         * Adds new grantees to a data policy. The new grantees will be added to the existing grantees. If
         * the request contains a duplicate grantee, the grantee will be ignored. If the request contains a
         * grantee that already exists, the grantee will be ignored.
         *
         * Create a request for the method "dataPolicies.addGrantees".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link AddGrantees#execute()} method to invoke the remote
         * operation.
         *
         * @param dataPolicy Required. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.AddGranteesRequest}
         * @return the request
         */
        public AddGrantees addGrantees(java.lang.String dataPolicy, com.google.api.services.bigquerydatapolicy.v2.model.AddGranteesRequest content) throws java.io.IOException {
          AddGrantees result = new AddGrantees(dataPolicy, content);
          initialize(result);
          return result;
        }

        public class AddGrantees extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy> {

          private static final String REST_PATH = "v2/{+dataPolicy}:addGrantees";

          private final java.util.regex.Pattern DATA_POLICY_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Adds new grantees to a data policy. The new grantees will be added to the existing grantees. If
           * the request contains a duplicate grantee, the grantee will be ignored. If the request contains
           * a grantee that already exists, the grantee will be ignored.
           *
           * Create a request for the method "dataPolicies.addGrantees".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link AddGrantees#execute()} method to invoke the remote
           * operation. <p> {@link
           * AddGrantees#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param dataPolicy Required. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.AddGranteesRequest}
           * @since 1.13
           */
          protected AddGrantees(java.lang.String dataPolicy, com.google.api.services.bigquerydatapolicy.v2.model.AddGranteesRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy.class);
            this.dataPolicy = com.google.api.client.util.Preconditions.checkNotNull(dataPolicy, "Required parameter dataPolicy must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATA_POLICY_PATTERN.matcher(dataPolicy).matches(),
                  "Parameter dataPolicy must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public AddGrantees set$Xgafv(java.lang.String $Xgafv) {
            return (AddGrantees) super.set$Xgafv($Xgafv);
          }

          @Override
          public AddGrantees setAccessToken(java.lang.String accessToken) {
            return (AddGrantees) super.setAccessToken(accessToken);
          }

          @Override
          public AddGrantees setAlt(java.lang.String alt) {
            return (AddGrantees) super.setAlt(alt);
          }

          @Override
          public AddGrantees setCallback(java.lang.String callback) {
            return (AddGrantees) super.setCallback(callback);
          }

          @Override
          public AddGrantees setFields(java.lang.String fields) {
            return (AddGrantees) super.setFields(fields);
          }

          @Override
          public AddGrantees setKey(java.lang.String key) {
            return (AddGrantees) super.setKey(key);
          }

          @Override
          public AddGrantees setOauthToken(java.lang.String oauthToken) {
            return (AddGrantees) super.setOauthToken(oauthToken);
          }

          @Override
          public AddGrantees setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (AddGrantees) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public AddGrantees setQuotaUser(java.lang.String quotaUser) {
            return (AddGrantees) super.setQuotaUser(quotaUser);
          }

          @Override
          public AddGrantees setUploadType(java.lang.String uploadType) {
            return (AddGrantees) super.setUploadType(uploadType);
          }

          @Override
          public AddGrantees setUploadProtocol(java.lang.String uploadProtocol) {
            return (AddGrantees) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String dataPolicy;

          /** Required. Resource name of this data policy, in the format of
         `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public java.lang.String getDataPolicy() {
            return dataPolicy;
          }

          /**
           * Required. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public AddGrantees setDataPolicy(java.lang.String dataPolicy) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATA_POLICY_PATTERN.matcher(dataPolicy).matches(),
                  "Parameter dataPolicy must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.dataPolicy = dataPolicy;
            return this;
          }

          @Override
          public AddGrantees set(String parameterName, Object value) {
            return (AddGrantees) super.set(parameterName, value);
          }
        }
        /**
         * Creates a new data policy under a project with the given `data_policy_id` (used as the display
         * name), and data policy type.
         *
         * Create a request for the method "dataPolicies.create".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Resource name of the project that the data policy will belong to. The format is
         *        `projects/{project_number}/locations/{location_id}`.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.CreateDataPolicyRequest}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.bigquerydatapolicy.v2.model.CreateDataPolicyRequest content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy> {

          private static final String REST_PATH = "v2/{+parent}/dataPolicies";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new data policy under a project with the given `data_policy_id` (used as the display
           * name), and data policy type.
           *
           * Create a request for the method "dataPolicies.create".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Resource name of the project that the data policy will belong to. The format is
         *        `projects/{project_number}/locations/{location_id}`.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.CreateDataPolicyRequest}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.bigquerydatapolicy.v2.model.CreateDataPolicyRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of the project that the data policy will belong to. The format
           * is `projects/{project_number}/locations/{location_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Resource name of the project that the data policy will belong to. The format is
         `projects/{project_number}/locations/{location_id}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. Resource name of the project that the data policy will belong to. The format
           * is `projects/{project_number}/locations/{location_id}`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes the data policy specified by its resource name.
         *
         * Create a request for the method "dataPolicies.delete".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Resource name of the data policy to delete. Format is
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.Empty> {

          private static final String REST_PATH = "v2/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Deletes the data policy specified by its resource name.
           *
           * Create a request for the method "dataPolicies.delete".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Resource name of the data policy to delete. Format is
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(BigQueryDataPolicyService.this, "DELETE", REST_PATH, null, com.google.api.services.bigquerydatapolicy.v2.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of the data policy to delete. Format is
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Resource name of the data policy to delete. Format is
         `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Resource name of the data policy to delete. Format is
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the data policy specified by its resource name.
         *
         * Create a request for the method "dataPolicies.get".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Resource name of the requested data policy. Format is
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy> {

          private static final String REST_PATH = "v2/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Gets the data policy specified by its resource name.
           *
           * Create a request for the method "dataPolicies.get".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Resource name of the requested data policy. Format is
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(BigQueryDataPolicyService.this, "GET", REST_PATH, null, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of the requested data policy. Format is
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Resource name of the requested data policy. Format is
         `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Resource name of the requested data policy. Format is
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{id}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Gets the IAM policy for the specified data policy.
         *
         * Create a request for the method "dataPolicies.getIamPolicy".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.GetIamPolicyRequest}
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.GetIamPolicyRequest content) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.Policy> {

          private static final String REST_PATH = "v2/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Gets the IAM policy for the specified data policy.
           *
           * Create a request for the method "dataPolicies.getIamPolicy".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.GetIamPolicyRequest}
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.GetIamPolicyRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * List all of the data policies in the specified parent project.
         *
         * Create a request for the method "dataPolicies.list".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Resource name of the project for which to list data policies. Format is
         *        `projects/{project_number}/locations/{location_id}`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.ListDataPoliciesResponse> {

          private static final String REST_PATH = "v2/{+parent}/dataPolicies";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * List all of the data policies in the specified parent project.
           *
           * Create a request for the method "dataPolicies.list".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Resource name of the project for which to list data policies. Format is
         *        `projects/{project_number}/locations/{location_id}`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(BigQueryDataPolicyService.this, "GET", REST_PATH, null, com.google.api.services.bigquerydatapolicy.v2.model.ListDataPoliciesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of the project for which to list data policies. Format is
           * `projects/{project_number}/locations/{location_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Resource name of the project for which to list data policies. Format is
         `projects/{project_number}/locations/{location_id}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. Resource name of the project for which to list data policies. Format is
           * `projects/{project_number}/locations/{location_id}`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. Filters the data policies by policy tags that they are associated with.
           * Currently filter only supports "policy_tag" based filtering and OR based predicates.
           * Sample filter can be "policy_tag: projects/1/locations/us/taxonomies/2/policyTags/3".
           * You may also use wildcard such as "policy_tag: projects/1/locations/us/taxonomies/2*".
           * Please note that OR predicates cannot be used with wildcard filters.
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filters the data policies by policy tags that they are associated with. Currently filter
         only supports "policy_tag" based filtering and OR based predicates. Sample filter can be
         "policy_tag: projects/1/locations/us/taxonomies/2/policyTags/3". You may also use wildcard such as
         "policy_tag: projects/1/locations/us/taxonomies/2*". Please note that OR predicates cannot be used
         with wildcard filters.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * Optional. Filters the data policies by policy tags that they are associated with.
           * Currently filter only supports "policy_tag" based filtering and OR based predicates.
           * Sample filter can be "policy_tag: projects/1/locations/us/taxonomies/2/policyTags/3".
           * You may also use wildcard such as "policy_tag: projects/1/locations/us/taxonomies/2*".
           * Please note that OR predicates cannot be used with wildcard filters.
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. The maximum number of data policies to return. Must be a value between 1 and
           * 1000. If not set, defaults to 50.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. The maximum number of data policies to return. Must be a value between 1 and 1000. If not
         set, defaults to 50.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. The maximum number of data policies to return. Must be a value between 1 and
           * 1000. If not set, defaults to 50.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. The `nextPageToken` value returned from a previous list request, if any. If
           * not set, defaults to an empty string.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. The `nextPageToken` value returned from a previous list request, if any. If not set,
         defaults to an empty string.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. The `nextPageToken` value returned from a previous list request, if any. If
           * not set, defaults to an empty string.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the metadata for an existing data policy. The target data policy can be specified by the
         * resource name.
         *
         * Create a request for the method "dataPolicies.patch".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy> {

          private static final String REST_PATH = "v2/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Updates the metadata for an existing data policy. The target data policy can be specified by
           * the resource name.
           *
           * Create a request for the method "dataPolicies.patch".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy content) {
            super(BigQueryDataPolicyService.this, "PATCH", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. Resource name of this data policy, in the format of
         `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If set to true, and the data policy is not found, a new data policy will be
           * created. In this situation, update_mask is ignored.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If set to true, and the data policy is not found, a new data policy will be created. In
         this situation, update_mask is ignored.
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If set to true, and the data policy is not found, a new data policy will be
           * created. In this situation, update_mask is ignored.
           */
          public Patch setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          /**
           * Optional. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
           * If not set, defaults to all of the fields that are allowed to update. Updates to the
           * `name` and `dataPolicyId` fields are not allowed.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Optional. The update mask applies to the resource. For the `FieldMask` definition, see
         https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If not set,
         defaults to all of the fields that are allowed to update. Updates to the `name` and `dataPolicyId`
         fields are not allowed.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Optional. The update mask applies to the resource. For the `FieldMask` definition, see
           * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
           * If not set, defaults to all of the fields that are allowed to update. Updates to the
           * `name` and `dataPolicyId` fields are not allowed.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Removes grantees from a data policy. The grantees will be removed from the existing grantees. If
         * the request contains a grantee that does not exist, the grantee will be ignored.
         *
         * Create a request for the method "dataPolicies.removeGrantees".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link RemoveGrantees#execute()} method to invoke the remote
         * operation.
         *
         * @param dataPolicy Required. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.RemoveGranteesRequest}
         * @return the request
         */
        public RemoveGrantees removeGrantees(java.lang.String dataPolicy, com.google.api.services.bigquerydatapolicy.v2.model.RemoveGranteesRequest content) throws java.io.IOException {
          RemoveGrantees result = new RemoveGrantees(dataPolicy, content);
          initialize(result);
          return result;
        }

        public class RemoveGrantees extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy> {

          private static final String REST_PATH = "v2/{+dataPolicy}:removeGrantees";

          private final java.util.regex.Pattern DATA_POLICY_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Removes grantees from a data policy. The grantees will be removed from the existing grantees.
           * If the request contains a grantee that does not exist, the grantee will be ignored.
           *
           * Create a request for the method "dataPolicies.removeGrantees".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link RemoveGrantees#execute()} method to invoke the remote
           * operation. <p> {@link RemoveGrantees#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param dataPolicy Required. Resource name of this data policy, in the format of
         *        `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.RemoveGranteesRequest}
           * @since 1.13
           */
          protected RemoveGrantees(java.lang.String dataPolicy, com.google.api.services.bigquerydatapolicy.v2.model.RemoveGranteesRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.DataPolicy.class);
            this.dataPolicy = com.google.api.client.util.Preconditions.checkNotNull(dataPolicy, "Required parameter dataPolicy must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATA_POLICY_PATTERN.matcher(dataPolicy).matches(),
                  "Parameter dataPolicy must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public RemoveGrantees set$Xgafv(java.lang.String $Xgafv) {
            return (RemoveGrantees) super.set$Xgafv($Xgafv);
          }

          @Override
          public RemoveGrantees setAccessToken(java.lang.String accessToken) {
            return (RemoveGrantees) super.setAccessToken(accessToken);
          }

          @Override
          public RemoveGrantees setAlt(java.lang.String alt) {
            return (RemoveGrantees) super.setAlt(alt);
          }

          @Override
          public RemoveGrantees setCallback(java.lang.String callback) {
            return (RemoveGrantees) super.setCallback(callback);
          }

          @Override
          public RemoveGrantees setFields(java.lang.String fields) {
            return (RemoveGrantees) super.setFields(fields);
          }

          @Override
          public RemoveGrantees setKey(java.lang.String key) {
            return (RemoveGrantees) super.setKey(key);
          }

          @Override
          public RemoveGrantees setOauthToken(java.lang.String oauthToken) {
            return (RemoveGrantees) super.setOauthToken(oauthToken);
          }

          @Override
          public RemoveGrantees setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (RemoveGrantees) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public RemoveGrantees setQuotaUser(java.lang.String quotaUser) {
            return (RemoveGrantees) super.setQuotaUser(quotaUser);
          }

          @Override
          public RemoveGrantees setUploadType(java.lang.String uploadType) {
            return (RemoveGrantees) super.setUploadType(uploadType);
          }

          @Override
          public RemoveGrantees setUploadProtocol(java.lang.String uploadProtocol) {
            return (RemoveGrantees) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String dataPolicy;

          /** Required. Resource name of this data policy, in the format of
         `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public java.lang.String getDataPolicy() {
            return dataPolicy;
          }

          /**
           * Required. Resource name of this data policy, in the format of
           * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
           */
          public RemoveGrantees setDataPolicy(java.lang.String dataPolicy) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATA_POLICY_PATTERN.matcher(dataPolicy).matches(),
                  "Parameter dataPolicy must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.dataPolicy = dataPolicy;
            return this;
          }

          @Override
          public RemoveGrantees set(String parameterName, Object value) {
            return (RemoveGrantees) super.set(parameterName, value);
          }
        }
        /**
         * Sets the IAM policy for the specified data policy.
         *
         * Create a request for the method "dataPolicies.setIamPolicy".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.Policy> {

          private static final String REST_PATH = "v2/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Sets the IAM policy for the specified data policy.
           *
           * Create a request for the method "dataPolicies.setIamPolicy".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
           * operation. <p> {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy is being specified. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.SetIamPolicyRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy is being specified. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy is being specified. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Returns the caller's permission on the specified data policy resource.
         *
         * Create a request for the method "dataPolicies.testIamPermissions".
         *
         * This request holds the parameters needed by the bigquerydatapolicy server.  After setting any
         * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation.
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
         * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends BigQueryDataPolicyServiceRequest<com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v2/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");

          /**
           * Returns the caller's permission on the specified data policy resource.
           *
           * Create a request for the method "dataPolicies.testIamPermissions".
           *
           * This request holds the parameters needed by the the bigquerydatapolicy server.  After setting
           * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
           * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
           * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource
         *        names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
         *        this field.
           * @param content the {@link com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsRequest content) {
            super(BigQueryDataPolicyService.this, "POST", REST_PATH, content, com.google.api.services.bigquerydatapolicy.v2.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource
         names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
         field.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The resource for which the policy detail is being requested. See [Resource
           * names](https://cloud.google.com/apis/design/resource_names) for the appropriate value
           * for this field.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/dataPolicies/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link BigQueryDataPolicyService}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link BigQueryDataPolicyService}. */
    @Override
    public BigQueryDataPolicyService build() {
      return new BigQueryDataPolicyService(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BigQueryDataPolicyServiceRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBigQueryDataPolicyServiceRequestInitializer(
        BigQueryDataPolicyServiceRequestInitializer bigquerydatapolicyserviceRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(bigquerydatapolicyserviceRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
