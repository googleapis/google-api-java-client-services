/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.toolresults.model;

/**
 * An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or
 * deploying code.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tool Results API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ToolExecution extends com.google.api.client.json.GenericJson {

  /**
   * The full tokenized command line including the program name (equivalent to argv in a C program).
   *
   * - In response: present if set by create request - In create request: optional - In update
   * request: never set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> commandLineArguments;

  /**
   * Tool execution exit code. This field will be set once the tool has exited.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is
   * already set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ToolExitCode exitCode;

  /**
   * References to any plain text logs output the tool execution.
   *
   * This field can be set before the tool has exited in order to be able to have access to a live
   * view of the logs while the tool is running.
   *
   * The maximum allowed number of tool logs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FileReference> toolLogs;

  static {
    // hack to force ProGuard to consider FileReference used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FileReference.class);
  }

  /**
   * References to opaque files of any format output by the tool execution.
   *
   * The maximum allowed number of tool outputs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ToolOutputReference> toolOutputs;

  /**
   * The full tokenized command line including the program name (equivalent to argv in a C program).
   *
   * - In response: present if set by create request - In create request: optional - In update
   * request: never set
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommandLineArguments() {
    return commandLineArguments;
  }

  /**
   * The full tokenized command line including the program name (equivalent to argv in a C program).
   *
   * - In response: present if set by create request - In create request: optional - In update
   * request: never set
   * @param commandLineArguments commandLineArguments or {@code null} for none
   */
  public ToolExecution setCommandLineArguments(java.util.List<java.lang.String> commandLineArguments) {
    this.commandLineArguments = commandLineArguments;
    return this;
  }

  /**
   * Tool execution exit code. This field will be set once the tool has exited.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is
   * already set.
   * @return value or {@code null} for none
   */
  public ToolExitCode getExitCode() {
    return exitCode;
  }

  /**
   * Tool execution exit code. This field will be set once the tool has exited.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is
   * already set.
   * @param exitCode exitCode or {@code null} for none
   */
  public ToolExecution setExitCode(ToolExitCode exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * References to any plain text logs output the tool execution.
   *
   * This field can be set before the tool has exited in order to be able to have access to a live
   * view of the logs while the tool is running.
   *
   * The maximum allowed number of tool logs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * @return value or {@code null} for none
   */
  public java.util.List<FileReference> getToolLogs() {
    return toolLogs;
  }

  /**
   * References to any plain text logs output the tool execution.
   *
   * This field can be set before the tool has exited in order to be able to have access to a live
   * view of the logs while the tool is running.
   *
   * The maximum allowed number of tool logs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * @param toolLogs toolLogs or {@code null} for none
   */
  public ToolExecution setToolLogs(java.util.List<FileReference> toolLogs) {
    this.toolLogs = toolLogs;
    return this;
  }

  /**
   * References to opaque files of any format output by the tool execution.
   *
   * The maximum allowed number of tool outputs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * @return value or {@code null} for none
   */
  public java.util.List<ToolOutputReference> getToolOutputs() {
    return toolOutputs;
  }

  /**
   * References to opaque files of any format output by the tool execution.
   *
   * The maximum allowed number of tool outputs per step is 1000.
   *
   * - In response: present if set by create/update request - In create request: optional - In
   * update request: optional, any value provided will be appended to the existing list
   * @param toolOutputs toolOutputs or {@code null} for none
   */
  public ToolExecution setToolOutputs(java.util.List<ToolOutputReference> toolOutputs) {
    this.toolOutputs = toolOutputs;
    return this;
  }

  @Override
  public ToolExecution set(String fieldName, Object value) {
    return (ToolExecution) super.set(fieldName, value);
  }

  @Override
  public ToolExecution clone() {
    return (ToolExecution) super.clone();
  }

}
