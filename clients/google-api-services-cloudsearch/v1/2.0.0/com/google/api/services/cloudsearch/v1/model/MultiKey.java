/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * A union-like type for identifiying an object in storage. MultiKeys contain multiple key fields,
 * each in a separate key space. At least one key field must be set. More than one key field may be
 * set as long as all key values refer to the same object. All objects in storage have unique
 * server_id keys. All MultiKeys returned from storage to storage clients will always have the
 * server_id field set. When creating an object, if a MultiKey without a server_id is supplied to
 * storage, the storage system will auto-assign a server ID to the new object. For all other storage
 * requests (i.e. those not creating new objects), clients may omit server_id (as long as they
 * supply another key). Instead of server ids, clients can specify string based
 * client_assigned_perm_id keys. Mail message drafts are a prime example of these kinds of objects.
 * Each time a user saves a new version of a draft, the storage system needs to create a new object
 * with the updated draft content and needs to delete the object containing the old content. The new
 * object gets a new SERVER_ID but should get the same CLIENT_ASSIGNED_PERM_ID as the now-deleted
 * object containing the old content. Carrying forward the perm ID allows it to be used to
 * consistently refer to the same logical object across revisions. These perm IDs save sync clients
 * from having to deal with changing object IDs. For example, assume there's a mail message in
 * storage with SERVER_ID = 123 and CLIENT_ASSIGNED_PERM_ID = "foo". The following are all valid
 * ways of addressing the object using MultiKeys: 1) MultiKey { server_id = 123 } 2) MultiKey {
 * server_id = 123, client_assigned_perm_id = "foo" } 3) MultiKey { client_assigned_perm_id = "foo"
 * } Multikeys are never serialized in the storage. The individual keys are extracted and processed
 * separately. Both the integer ids as well as string ids are indexed for efficient retrieval using
 * the same fields in the backend. See go/tingle-multikeys for more information on background and
 * motivation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MultiKey extends com.google.api.client.json.GenericJson {

  /**
   * A client-assigned string based key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientAssignedPermId;

  /**
   * A server-assigned ID. This ID must be used only by Gmail and is constructed using millesecond
   * ts << 20 + randomness. The ID affects the sort order of the index.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger serverId;

  /**
   * A client-assigned string based key.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientAssignedPermId() {
    return clientAssignedPermId;
  }

  /**
   * A client-assigned string based key.
   * @param clientAssignedPermId clientAssignedPermId or {@code null} for none
   */
  public MultiKey setClientAssignedPermId(java.lang.String clientAssignedPermId) {
    this.clientAssignedPermId = clientAssignedPermId;
    return this;
  }

  /**
   * A server-assigned ID. This ID must be used only by Gmail and is constructed using millesecond
   * ts << 20 + randomness. The ID affects the sort order of the index.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getServerId() {
    return serverId;
  }

  /**
   * A server-assigned ID. This ID must be used only by Gmail and is constructed using millesecond
   * ts << 20 + randomness. The ID affects the sort order of the index.
   * @param serverId serverId or {@code null} for none
   */
  public MultiKey setServerId(java.math.BigInteger serverId) {
    this.serverId = serverId;
    return this;
  }

  @Override
  public MultiKey set(String fieldName, Object value) {
    return (MultiKey) super.set(fieldName, value);
  }

  @Override
  public MultiKey clone() {
    return (MultiKey) super.clone();
  }

}
