/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasedataconnect.v1beta.model;

/**
 * GraphqlError conforms to the GraphQL error spec. https://spec.graphql.org/draft/#sec-Errors
 * Firebase Data Connect API surfaces `GraphqlError` in various APIs: - Upon compile error,
 * `UpdateSchema` and `UpdateConnector` return Code.Invalid_Argument with a list of `GraphqlError`
 * in error details. - Upon query compile error, `ExecuteGraphql` and `ExecuteGraphqlRead` return
 * Code.OK with a list of `GraphqlError` in response body. - Upon query execution error,
 * `ExecuteGraphql`, `ExecuteGraphqlRead`, `ExecuteMutation` and `ExecuteQuery` all return Code.OK
 * with a list of `GraphqlError` in response body.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Data Connect API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GraphqlError extends com.google.api.client.json.GenericJson {

  /**
   * Additional error information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GraphqlErrorExtensions extensions;

  /**
   * The source locations where the error occurred. Locations should help developers and toolings
   * identify the source of error quickly. Included in admin endpoints (`ExecuteGraphql`,
   * `ExecuteGraphqlRead`, `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document. Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't have
   * access access the underlying GQL source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SourceLocation> locations;

  /**
   * The detailed error message. The message should help developer understand the underlying problem
   * without leaking internal data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String message;

  /**
   * The result field which could not be populated due to error. Clients can use path to identify
   * whether a null result is intentional or caused by a runtime error. It should be a list of
   * string or index from the root of GraphQL query document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> path;

  /**
   * Additional error information.
   * @return value or {@code null} for none
   */
  public GraphqlErrorExtensions getExtensions() {
    return extensions;
  }

  /**
   * Additional error information.
   * @param extensions extensions or {@code null} for none
   */
  public GraphqlError setExtensions(GraphqlErrorExtensions extensions) {
    this.extensions = extensions;
    return this;
  }

  /**
   * The source locations where the error occurred. Locations should help developers and toolings
   * identify the source of error quickly. Included in admin endpoints (`ExecuteGraphql`,
   * `ExecuteGraphqlRead`, `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document. Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't have
   * access access the underlying GQL source.
   * @return value or {@code null} for none
   */
  public java.util.List<SourceLocation> getLocations() {
    return locations;
  }

  /**
   * The source locations where the error occurred. Locations should help developers and toolings
   * identify the source of error quickly. Included in admin endpoints (`ExecuteGraphql`,
   * `ExecuteGraphqlRead`, `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document. Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't have
   * access access the underlying GQL source.
   * @param locations locations or {@code null} for none
   */
  public GraphqlError setLocations(java.util.List<SourceLocation> locations) {
    this.locations = locations;
    return this;
  }

  /**
   * The detailed error message. The message should help developer understand the underlying problem
   * without leaking internal data.
   * @return value or {@code null} for none
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * The detailed error message. The message should help developer understand the underlying problem
   * without leaking internal data.
   * @param message message or {@code null} for none
   */
  public GraphqlError setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  /**
   * The result field which could not be populated due to error. Clients can use path to identify
   * whether a null result is intentional or caused by a runtime error. It should be a list of
   * string or index from the root of GraphQL query document.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getPath() {
    return path;
  }

  /**
   * The result field which could not be populated due to error. Clients can use path to identify
   * whether a null result is intentional or caused by a runtime error. It should be a list of
   * string or index from the root of GraphQL query document.
   * @param path path or {@code null} for none
   */
  public GraphqlError setPath(java.util.List<java.lang.Object> path) {
    this.path = path;
    return this;
  }

  @Override
  public GraphqlError set(String fieldName, Object value) {
    return (GraphqlError) super.set(fieldName, value);
  }

  @Override
  public GraphqlError clone() {
    return (GraphqlError) super.clone();
  }

}
