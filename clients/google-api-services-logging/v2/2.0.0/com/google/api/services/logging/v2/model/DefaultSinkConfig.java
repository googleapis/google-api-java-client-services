/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.logging.v2.model;

/**
 * Describes the custom _Default sink configuration that is used to override the built-in _Default
 * sink configuration in newly created resource containers, such as projects or folders.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Logging API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DefaultSinkConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies the set of exclusions to be added to the _Default sink in newly created
   * resource containers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LogExclusion> exclusions;

  /**
   * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-
   * queries). The only exported log entries are those that are in the resource owning the sink and
   * that match the filter.For example:logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND
   * severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value
   * of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Required. Determines the behavior to apply to the built-in _Default sink inclusion
   * filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mode;

  /**
   * Optional. Specifies the set of exclusions to be added to the _Default sink in newly created
   * resource containers.
   * @return value or {@code null} for none
   */
  public java.util.List<LogExclusion> getExclusions() {
    return exclusions;
  }

  /**
   * Optional. Specifies the set of exclusions to be added to the _Default sink in newly created
   * resource containers.
   * @param exclusions exclusions or {@code null} for none
   */
  public DefaultSinkConfig setExclusions(java.util.List<LogExclusion> exclusions) {
    this.exclusions = exclusions;
    return this;
  }

  /**
   * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-
   * queries). The only exported log entries are those that are in the resource owning the sink and
   * that match the filter.For example:logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND
   * severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value
   * of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-
   * queries). The only exported log entries are those that are in the resource owning the sink and
   * that match the filter.For example:logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND
   * severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value
   * of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.
   * @param filter filter or {@code null} for none
   */
  public DefaultSinkConfig setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Required. Determines the behavior to apply to the built-in _Default sink inclusion
   * filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.
   * @return value or {@code null} for none
   */
  public java.lang.String getMode() {
    return mode;
  }

  /**
   * Required. Determines the behavior to apply to the built-in _Default sink inclusion
   * filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.
   * @param mode mode or {@code null} for none
   */
  public DefaultSinkConfig setMode(java.lang.String mode) {
    this.mode = mode;
    return this;
  }

  @Override
  public DefaultSinkConfig set(String fieldName, Object value) {
    return (DefaultSinkConfig) super.set(fieldName, value);
  }

  @Override
  public DefaultSinkConfig clone() {
    return (DefaultSinkConfig) super.clone();
  }

}
