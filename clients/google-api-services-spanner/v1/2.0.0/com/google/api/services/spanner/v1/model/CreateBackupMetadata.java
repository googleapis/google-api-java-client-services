/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Metadata type for the operation returned by CreateBackup.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CreateBackupMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String cancelTime;

  /**
   * The name of the database the backup is created from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * The name of the backup being created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The progress of the CreateBackup operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OperationProgress progress;

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * @return value or {@code null} for none
   */
  public String getCancelTime() {
    return cancelTime;
  }

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * @param cancelTime cancelTime or {@code null} for none
   */
  public CreateBackupMetadata setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  /**
   * The name of the database the backup is created from.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * The name of the database the backup is created from.
   * @param database database or {@code null} for none
   */
  public CreateBackupMetadata setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * The name of the backup being created.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the backup being created.
   * @param name name or {@code null} for none
   */
  public CreateBackupMetadata setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The progress of the CreateBackup operation.
   * @return value or {@code null} for none
   */
  public OperationProgress getProgress() {
    return progress;
  }

  /**
   * The progress of the CreateBackup operation.
   * @param progress progress or {@code null} for none
   */
  public CreateBackupMetadata setProgress(OperationProgress progress) {
    this.progress = progress;
    return this;
  }

  @Override
  public CreateBackupMetadata set(String fieldName, Object value) {
    return (CreateBackupMetadata) super.set(fieldName, value);
  }

  @Override
  public CreateBackupMetadata clone() {
    return (CreateBackupMetadata) super.clone();
  }

}
