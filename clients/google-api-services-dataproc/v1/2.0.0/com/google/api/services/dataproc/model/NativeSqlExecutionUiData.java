/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * Native SQL Execution Data
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NativeSqlExecutionUiData extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Description of the execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Required. Execution ID of the Native SQL Execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long executionId;

  /**
   * Optional. Description of the fallback.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fallbackDescription;

  /**
   * Optional. Fallback node to reason.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FallbackReason> fallbackNodeToReason;

  static {
    // hack to force ProGuard to consider FallbackReason used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FallbackReason.class);
  }

  /**
   * Optional. Number of nodes fallen back to Spark.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numFallbackNodes;

  /**
   * Optional. Number of nodes in Native.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numNativeNodes;

  /**
   * Optional. Description of the execution.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. Description of the execution.
   * @param description description or {@code null} for none
   */
  public NativeSqlExecutionUiData setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Required. Execution ID of the Native SQL Execution.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExecutionId() {
    return executionId;
  }

  /**
   * Required. Execution ID of the Native SQL Execution.
   * @param executionId executionId or {@code null} for none
   */
  public NativeSqlExecutionUiData setExecutionId(java.lang.Long executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Optional. Description of the fallback.
   * @return value or {@code null} for none
   */
  public java.lang.String getFallbackDescription() {
    return fallbackDescription;
  }

  /**
   * Optional. Description of the fallback.
   * @param fallbackDescription fallbackDescription or {@code null} for none
   */
  public NativeSqlExecutionUiData setFallbackDescription(java.lang.String fallbackDescription) {
    this.fallbackDescription = fallbackDescription;
    return this;
  }

  /**
   * Optional. Fallback node to reason.
   * @return value or {@code null} for none
   */
  public java.util.List<FallbackReason> getFallbackNodeToReason() {
    return fallbackNodeToReason;
  }

  /**
   * Optional. Fallback node to reason.
   * @param fallbackNodeToReason fallbackNodeToReason or {@code null} for none
   */
  public NativeSqlExecutionUiData setFallbackNodeToReason(java.util.List<FallbackReason> fallbackNodeToReason) {
    this.fallbackNodeToReason = fallbackNodeToReason;
    return this;
  }

  /**
   * Optional. Number of nodes fallen back to Spark.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumFallbackNodes() {
    return numFallbackNodes;
  }

  /**
   * Optional. Number of nodes fallen back to Spark.
   * @param numFallbackNodes numFallbackNodes or {@code null} for none
   */
  public NativeSqlExecutionUiData setNumFallbackNodes(java.lang.Integer numFallbackNodes) {
    this.numFallbackNodes = numFallbackNodes;
    return this;
  }

  /**
   * Optional. Number of nodes in Native.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumNativeNodes() {
    return numNativeNodes;
  }

  /**
   * Optional. Number of nodes in Native.
   * @param numNativeNodes numNativeNodes or {@code null} for none
   */
  public NativeSqlExecutionUiData setNumNativeNodes(java.lang.Integer numNativeNodes) {
    this.numNativeNodes = numNativeNodes;
    return this;
  }

  @Override
  public NativeSqlExecutionUiData set(String fieldName, Object value) {
    return (NativeSqlExecutionUiData) super.set(fieldName, value);
  }

  @Override
  public NativeSqlExecutionUiData clone() {
    return (NativeSqlExecutionUiData) super.clone();
  }

}
