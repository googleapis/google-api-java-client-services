/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigquerydatatransfer.v1.model;

/**
 * Represents a data transfer run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery Data Transfer API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TransferRun extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Data source id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataSourceId;

  /**
   * Output only. The BigQuery target dataset id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destinationDatasetId;

  /**
   * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * Status of the transfer run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status errorStatus;

  /**
   * The resource name of the transfer run. Transfer run names have the form
   * `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The
   * name is ignored when creating a transfer run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Data transfer specific parameters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> params;

  /**
   * For batch transfer runs, specifies the date and time that data should be ingested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String runTime;

  /**
   * Output only. Describes the schedule of this transfer run if it was created as part of a regular
   * schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system
   * might choose to delay the schedule depending on the current load, so `schedule_time` doesn't
   * always match this.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String schedule;

  /**
   * Minimum time after which a transfer run can be started.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String scheduleTime;

  /**
   * Output only. Time when transfer run was started. Parameter ignored by server for input
   * requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Data transfer run state. Ignored for input requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Last time the data transfer run state was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long userId;

  /**
   * Output only. Data source id.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataSourceId() {
    return dataSourceId;
  }

  /**
   * Output only. Data source id.
   * @param dataSourceId dataSourceId or {@code null} for none
   */
  public TransferRun setDataSourceId(java.lang.String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Output only. The BigQuery target dataset id.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestinationDatasetId() {
    return destinationDatasetId;
  }

  /**
   * Output only. The BigQuery target dataset id.
   * @param destinationDatasetId destinationDatasetId or {@code null} for none
   */
  public TransferRun setDestinationDatasetId(java.lang.String destinationDatasetId) {
    this.destinationDatasetId = destinationDatasetId;
    return this;
  }

  /**
   * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
   * @param endTime endTime or {@code null} for none
   */
  public TransferRun setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Status of the transfer run.
   * @return value or {@code null} for none
   */
  public Status getErrorStatus() {
    return errorStatus;
  }

  /**
   * Status of the transfer run.
   * @param errorStatus errorStatus or {@code null} for none
   */
  public TransferRun setErrorStatus(Status errorStatus) {
    this.errorStatus = errorStatus;
    return this;
  }

  /**
   * The resource name of the transfer run. Transfer run names have the form
   * `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The
   * name is ignored when creating a transfer run.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the transfer run. Transfer run names have the form
   * `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The
   * name is ignored when creating a transfer run.
   * @param name name or {@code null} for none
   */
  public TransferRun setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Data transfer specific parameters.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getParams() {
    return params;
  }

  /**
   * Output only. Data transfer specific parameters.
   * @param params params or {@code null} for none
   */
  public TransferRun setParams(java.util.Map<String, java.lang.Object> params) {
    this.params = params;
    return this;
  }

  /**
   * For batch transfer runs, specifies the date and time that data should be ingested.
   * @return value or {@code null} for none
   */
  public String getRunTime() {
    return runTime;
  }

  /**
   * For batch transfer runs, specifies the date and time that data should be ingested.
   * @param runTime runTime or {@code null} for none
   */
  public TransferRun setRunTime(String runTime) {
    this.runTime = runTime;
    return this;
  }

  /**
   * Output only. Describes the schedule of this transfer run if it was created as part of a regular
   * schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system
   * might choose to delay the schedule depending on the current load, so `schedule_time` doesn't
   * always match this.
   * @return value or {@code null} for none
   */
  public java.lang.String getSchedule() {
    return schedule;
  }

  /**
   * Output only. Describes the schedule of this transfer run if it was created as part of a regular
   * schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system
   * might choose to delay the schedule depending on the current load, so `schedule_time` doesn't
   * always match this.
   * @param schedule schedule or {@code null} for none
   */
  public TransferRun setSchedule(java.lang.String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Minimum time after which a transfer run can be started.
   * @return value or {@code null} for none
   */
  public String getScheduleTime() {
    return scheduleTime;
  }

  /**
   * Minimum time after which a transfer run can be started.
   * @param scheduleTime scheduleTime or {@code null} for none
   */
  public TransferRun setScheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

  /**
   * Output only. Time when transfer run was started. Parameter ignored by server for input
   * requests.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Output only. Time when transfer run was started. Parameter ignored by server for input
   * requests.
   * @param startTime startTime or {@code null} for none
   */
  public TransferRun setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Data transfer run state. Ignored for input requests.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Data transfer run state. Ignored for input requests.
   * @param state state or {@code null} for none
   */
  public TransferRun setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Last time the data transfer run state was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Last time the data transfer run state was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public TransferRun setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUserId() {
    return userId;
  }

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   * @param userId userId or {@code null} for none
   */
  public TransferRun setUserId(java.lang.Long userId) {
    this.userId = userId;
    return this;
  }

  @Override
  public TransferRun set(String fieldName, Object value) {
    return (TransferRun) super.set(fieldName, value);
  }

  @Override
  public TransferRun clone() {
    return (TransferRun) super.clone();
  }

}
