/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Globally allowed spherical meta data.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoFileSphericalMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Like above, but with high-pass motion filtering applied and yaw rotation limited to +/-
   * 15-degrees
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataFOVBounds clampedOptimalFovBounds;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataCubemapProjection cubemap;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataCroppedArea deprecatedCroppedArea;

  /**
   * InitialView is from v1 spec, and is more or less equivalent to Pose from v2 spec. Therefore,
   * InitialView found in xml metadata would populate the pose field in this proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataViewDirection deprecatedInitialView;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataEquirectProjection equirect;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fullPanoHeightPixels;

  /**
   * Dimensions of the full video frame.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fullPanoWidthPixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataMeshProjection mesh;

  /**
   * Metadata source v2(svhd)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadataSource;

  /**
   * If video contains Wally-sanitized mesh and camera motion metadata (see go/wally-format ), this
   * contains the optimal FOV (smallest FOV that encompass all combinations of input mesh FOV and
   * rotations). This field will only be present if full FfmpegAnalyze is performed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataFOVBounds optimalFovBounds;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoFileSphericalMetadataPose pose;

  /**
   * Mapping type used to map the sphere to the rectangular video E.g., "equirectangular",
   * http://en.wikipedia.org/wiki/Equirectangular_projection This is kept as string so that we can
   * retain values that are unknown to us.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectionType;

  /**
   * The number of camera sources used to generate this video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceCount;

  /**
   * Whether the video is spherical or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean spherical;

  /**
   * The stereo mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stereoMode;

  /**
   * Whether the video has already been stitched.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean stitched;

  /**
   * The stitching software.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stitchingSoftware;

  /**
   * Epoch Timestamp of when the first frame in the video was recorded
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long timestamp;

  /**
   * Like above, but with high-pass motion filtering applied and yaw rotation limited to +/-
   * 15-degrees
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataFOVBounds getClampedOptimalFovBounds() {
    return clampedOptimalFovBounds;
  }

  /**
   * Like above, but with high-pass motion filtering applied and yaw rotation limited to +/-
   * 15-degrees
   * @param clampedOptimalFovBounds clampedOptimalFovBounds or {@code null} for none
   */
  public VideoFileSphericalMetadata setClampedOptimalFovBounds(VideoFileSphericalMetadataFOVBounds clampedOptimalFovBounds) {
    this.clampedOptimalFovBounds = clampedOptimalFovBounds;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataCubemapProjection getCubemap() {
    return cubemap;
  }

  /**
   * @param cubemap cubemap or {@code null} for none
   */
  public VideoFileSphericalMetadata setCubemap(VideoFileSphericalMetadataCubemapProjection cubemap) {
    this.cubemap = cubemap;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataCroppedArea getDeprecatedCroppedArea() {
    return deprecatedCroppedArea;
  }

  /**
   * @param deprecatedCroppedArea deprecatedCroppedArea or {@code null} for none
   */
  public VideoFileSphericalMetadata setDeprecatedCroppedArea(VideoFileSphericalMetadataCroppedArea deprecatedCroppedArea) {
    this.deprecatedCroppedArea = deprecatedCroppedArea;
    return this;
  }

  /**
   * InitialView is from v1 spec, and is more or less equivalent to Pose from v2 spec. Therefore,
   * InitialView found in xml metadata would populate the pose field in this proto.
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataViewDirection getDeprecatedInitialView() {
    return deprecatedInitialView;
  }

  /**
   * InitialView is from v1 spec, and is more or less equivalent to Pose from v2 spec. Therefore,
   * InitialView found in xml metadata would populate the pose field in this proto.
   * @param deprecatedInitialView deprecatedInitialView or {@code null} for none
   */
  public VideoFileSphericalMetadata setDeprecatedInitialView(VideoFileSphericalMetadataViewDirection deprecatedInitialView) {
    this.deprecatedInitialView = deprecatedInitialView;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataEquirectProjection getEquirect() {
    return equirect;
  }

  /**
   * @param equirect equirect or {@code null} for none
   */
  public VideoFileSphericalMetadata setEquirect(VideoFileSphericalMetadataEquirectProjection equirect) {
    this.equirect = equirect;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFullPanoHeightPixels() {
    return fullPanoHeightPixels;
  }

  /**
   * @param fullPanoHeightPixels fullPanoHeightPixels or {@code null} for none
   */
  public VideoFileSphericalMetadata setFullPanoHeightPixels(java.lang.Integer fullPanoHeightPixels) {
    this.fullPanoHeightPixels = fullPanoHeightPixels;
    return this;
  }

  /**
   * Dimensions of the full video frame.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFullPanoWidthPixels() {
    return fullPanoWidthPixels;
  }

  /**
   * Dimensions of the full video frame.
   * @param fullPanoWidthPixels fullPanoWidthPixels or {@code null} for none
   */
  public VideoFileSphericalMetadata setFullPanoWidthPixels(java.lang.Integer fullPanoWidthPixels) {
    this.fullPanoWidthPixels = fullPanoWidthPixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataMeshProjection getMesh() {
    return mesh;
  }

  /**
   * @param mesh mesh or {@code null} for none
   */
  public VideoFileSphericalMetadata setMesh(VideoFileSphericalMetadataMeshProjection mesh) {
    this.mesh = mesh;
    return this;
  }

  /**
   * Metadata source v2(svhd)
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadataSource() {
    return metadataSource;
  }

  /**
   * Metadata source v2(svhd)
   * @param metadataSource metadataSource or {@code null} for none
   */
  public VideoFileSphericalMetadata setMetadataSource(java.lang.String metadataSource) {
    this.metadataSource = metadataSource;
    return this;
  }

  /**
   * If video contains Wally-sanitized mesh and camera motion metadata (see go/wally-format ), this
   * contains the optimal FOV (smallest FOV that encompass all combinations of input mesh FOV and
   * rotations). This field will only be present if full FfmpegAnalyze is performed.
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataFOVBounds getOptimalFovBounds() {
    return optimalFovBounds;
  }

  /**
   * If video contains Wally-sanitized mesh and camera motion metadata (see go/wally-format ), this
   * contains the optimal FOV (smallest FOV that encompass all combinations of input mesh FOV and
   * rotations). This field will only be present if full FfmpegAnalyze is performed.
   * @param optimalFovBounds optimalFovBounds or {@code null} for none
   */
  public VideoFileSphericalMetadata setOptimalFovBounds(VideoFileSphericalMetadataFOVBounds optimalFovBounds) {
    this.optimalFovBounds = optimalFovBounds;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public VideoFileSphericalMetadataPose getPose() {
    return pose;
  }

  /**
   * @param pose pose or {@code null} for none
   */
  public VideoFileSphericalMetadata setPose(VideoFileSphericalMetadataPose pose) {
    this.pose = pose;
    return this;
  }

  /**
   * Mapping type used to map the sphere to the rectangular video E.g., "equirectangular",
   * http://en.wikipedia.org/wiki/Equirectangular_projection This is kept as string so that we can
   * retain values that are unknown to us.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectionType() {
    return projectionType;
  }

  /**
   * Mapping type used to map the sphere to the rectangular video E.g., "equirectangular",
   * http://en.wikipedia.org/wiki/Equirectangular_projection This is kept as string so that we can
   * retain values that are unknown to us.
   * @param projectionType projectionType or {@code null} for none
   */
  public VideoFileSphericalMetadata setProjectionType(java.lang.String projectionType) {
    this.projectionType = projectionType;
    return this;
  }

  /**
   * The number of camera sources used to generate this video.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceCount() {
    return sourceCount;
  }

  /**
   * The number of camera sources used to generate this video.
   * @param sourceCount sourceCount or {@code null} for none
   */
  public VideoFileSphericalMetadata setSourceCount(java.lang.Integer sourceCount) {
    this.sourceCount = sourceCount;
    return this;
  }

  /**
   * Whether the video is spherical or not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSpherical() {
    return spherical;
  }

  /**
   * Whether the video is spherical or not.
   * @param spherical spherical or {@code null} for none
   */
  public VideoFileSphericalMetadata setSpherical(java.lang.Boolean spherical) {
    this.spherical = spherical;
    return this;
  }

  /**
   * The stereo mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getStereoMode() {
    return stereoMode;
  }

  /**
   * The stereo mode.
   * @param stereoMode stereoMode or {@code null} for none
   */
  public VideoFileSphericalMetadata setStereoMode(java.lang.String stereoMode) {
    this.stereoMode = stereoMode;
    return this;
  }

  /**
   * Whether the video has already been stitched.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getStitched() {
    return stitched;
  }

  /**
   * Whether the video has already been stitched.
   * @param stitched stitched or {@code null} for none
   */
  public VideoFileSphericalMetadata setStitched(java.lang.Boolean stitched) {
    this.stitched = stitched;
    return this;
  }

  /**
   * The stitching software.
   * @return value or {@code null} for none
   */
  public java.lang.String getStitchingSoftware() {
    return stitchingSoftware;
  }

  /**
   * The stitching software.
   * @param stitchingSoftware stitchingSoftware or {@code null} for none
   */
  public VideoFileSphericalMetadata setStitchingSoftware(java.lang.String stitchingSoftware) {
    this.stitchingSoftware = stitchingSoftware;
    return this;
  }

  /**
   * Epoch Timestamp of when the first frame in the video was recorded
   * @return value or {@code null} for none
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Epoch Timestamp of when the first frame in the video was recorded
   * @param timestamp timestamp or {@code null} for none
   */
  public VideoFileSphericalMetadata setTimestamp(java.lang.Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  @Override
  public VideoFileSphericalMetadata set(String fieldName, Object value) {
    return (VideoFileSphericalMetadata) super.set(fieldName, value);
  }

  @Override
  public VideoFileSphericalMetadata clone() {
    return (VideoFileSphericalMetadata) super.clone();
  }

}
