/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Describes the spatial information about a value in spatial-coverage definition of a dataset. Next
 * ID: 9
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScienceSearchLocation extends com.google.api.client.json.GenericJson {

  /**
   * Coordinates of the corners of the polygon in the form "lat1 long1 lat2 long2"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String boxCoordinates;

  /**
   * Coordinates for the circle area defined by its center and radius: "lat long, radius"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String circleCoordinates;

  /**
   * mids for locations that contain loctions in .
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> containedInMid;

  /**
   * mids for locations covering the dataset, contained in the . A region may contain multiple
   * locations that are identified by mids.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locationMid;

  /**
   * Labels (in the preferred language of the dataset) for the mids in .
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locationMidLabel;

  /**
   * The original name for the area covered by the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationName;

  /**
   * Latitude and longitude for a single point in the form of "lat,long".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pointCoordinates;

  /**
   * Unformatted coordinates describing the region.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unformattedCoordinates;

  /**
   * Coordinates of the corners of the polygon in the form "lat1 long1 lat2 long2"
   * @return value or {@code null} for none
   */
  public java.lang.String getBoxCoordinates() {
    return boxCoordinates;
  }

  /**
   * Coordinates of the corners of the polygon in the form "lat1 long1 lat2 long2"
   * @param boxCoordinates boxCoordinates or {@code null} for none
   */
  public ResearchScienceSearchLocation setBoxCoordinates(java.lang.String boxCoordinates) {
    this.boxCoordinates = boxCoordinates;
    return this;
  }

  /**
   * Coordinates for the circle area defined by its center and radius: "lat long, radius"
   * @return value or {@code null} for none
   */
  public java.lang.String getCircleCoordinates() {
    return circleCoordinates;
  }

  /**
   * Coordinates for the circle area defined by its center and radius: "lat long, radius"
   * @param circleCoordinates circleCoordinates or {@code null} for none
   */
  public ResearchScienceSearchLocation setCircleCoordinates(java.lang.String circleCoordinates) {
    this.circleCoordinates = circleCoordinates;
    return this;
  }

  /**
   * mids for locations that contain loctions in .
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContainedInMid() {
    return containedInMid;
  }

  /**
   * mids for locations that contain loctions in .
   * @param containedInMid containedInMid or {@code null} for none
   */
  public ResearchScienceSearchLocation setContainedInMid(java.util.List<java.lang.String> containedInMid) {
    this.containedInMid = containedInMid;
    return this;
  }

  /**
   * mids for locations covering the dataset, contained in the . A region may contain multiple
   * locations that are identified by mids.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocationMid() {
    return locationMid;
  }

  /**
   * mids for locations covering the dataset, contained in the . A region may contain multiple
   * locations that are identified by mids.
   * @param locationMid locationMid or {@code null} for none
   */
  public ResearchScienceSearchLocation setLocationMid(java.util.List<java.lang.String> locationMid) {
    this.locationMid = locationMid;
    return this;
  }

  /**
   * Labels (in the preferred language of the dataset) for the mids in .
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocationMidLabel() {
    return locationMidLabel;
  }

  /**
   * Labels (in the preferred language of the dataset) for the mids in .
   * @param locationMidLabel locationMidLabel or {@code null} for none
   */
  public ResearchScienceSearchLocation setLocationMidLabel(java.util.List<java.lang.String> locationMidLabel) {
    this.locationMidLabel = locationMidLabel;
    return this;
  }

  /**
   * The original name for the area covered by the dataset.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationName() {
    return locationName;
  }

  /**
   * The original name for the area covered by the dataset.
   * @param locationName locationName or {@code null} for none
   */
  public ResearchScienceSearchLocation setLocationName(java.lang.String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * Latitude and longitude for a single point in the form of "lat,long".
   * @return value or {@code null} for none
   */
  public java.lang.String getPointCoordinates() {
    return pointCoordinates;
  }

  /**
   * Latitude and longitude for a single point in the form of "lat,long".
   * @param pointCoordinates pointCoordinates or {@code null} for none
   */
  public ResearchScienceSearchLocation setPointCoordinates(java.lang.String pointCoordinates) {
    this.pointCoordinates = pointCoordinates;
    return this;
  }

  /**
   * Unformatted coordinates describing the region.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnformattedCoordinates() {
    return unformattedCoordinates;
  }

  /**
   * Unformatted coordinates describing the region.
   * @param unformattedCoordinates unformattedCoordinates or {@code null} for none
   */
  public ResearchScienceSearchLocation setUnformattedCoordinates(java.lang.String unformattedCoordinates) {
    this.unformattedCoordinates = unformattedCoordinates;
    return this;
  }

  @Override
  public ResearchScienceSearchLocation set(String fieldName, Object value) {
    return (ResearchScienceSearchLocation) super.set(fieldName, value);
  }

  @Override
  public ResearchScienceSearchLocation clone() {
    return (ResearchScienceSearchLocation) super.clone();
  }

}
