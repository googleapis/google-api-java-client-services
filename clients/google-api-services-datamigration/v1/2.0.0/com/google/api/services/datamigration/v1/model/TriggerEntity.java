/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * Trigger is not used as an independent entity, it is retrieved as part of a Table entity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TriggerEntity extends com.google.api.client.json.GenericJson {

  /**
   * Custom engine specific features
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> customFeatures;

  /**
   * The name of the trigger
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The SQL code which creates the trigger
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sqlCode;

  /**
   * Indicates when the trigger fires, e.g. BEFORE STATEMENT, AFTER EACH ROW
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String triggerType;

  /**
   * The DML, DDL, or database events that fires the trigger, e.g. INSERT, UPDATE
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> triggeringEvents;

  /**
   * Custom engine specific features
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getCustomFeatures() {
    return customFeatures;
  }

  /**
   * Custom engine specific features
   * @param customFeatures customFeatures or {@code null} for none
   */
  public TriggerEntity setCustomFeatures(java.util.Map<String, java.lang.Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  /**
   * The name of the trigger
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the trigger
   * @param name name or {@code null} for none
   */
  public TriggerEntity setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The SQL code which creates the trigger
   * @return value or {@code null} for none
   */
  public java.lang.String getSqlCode() {
    return sqlCode;
  }

  /**
   * The SQL code which creates the trigger
   * @param sqlCode sqlCode or {@code null} for none
   */
  public TriggerEntity setSqlCode(java.lang.String sqlCode) {
    this.sqlCode = sqlCode;
    return this;
  }

  /**
   * Indicates when the trigger fires, e.g. BEFORE STATEMENT, AFTER EACH ROW
   * @return value or {@code null} for none
   */
  public java.lang.String getTriggerType() {
    return triggerType;
  }

  /**
   * Indicates when the trigger fires, e.g. BEFORE STATEMENT, AFTER EACH ROW
   * @param triggerType triggerType or {@code null} for none
   */
  public TriggerEntity setTriggerType(java.lang.String triggerType) {
    this.triggerType = triggerType;
    return this;
  }

  /**
   * The DML, DDL, or database events that fires the trigger, e.g. INSERT, UPDATE
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTriggeringEvents() {
    return triggeringEvents;
  }

  /**
   * The DML, DDL, or database events that fires the trigger, e.g. INSERT, UPDATE
   * @param triggeringEvents triggeringEvents or {@code null} for none
   */
  public TriggerEntity setTriggeringEvents(java.util.List<java.lang.String> triggeringEvents) {
    this.triggeringEvents = triggeringEvents;
    return this;
  }

  @Override
  public TriggerEntity set(String fieldName, Object value) {
    return (TriggerEntity) super.set(fieldName, value);
  }

  @Override
  public TriggerEntity clone() {
    return (TriggerEntity) super.clone();
  }

}
