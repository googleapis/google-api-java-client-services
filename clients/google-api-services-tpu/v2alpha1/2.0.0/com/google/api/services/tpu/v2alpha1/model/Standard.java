/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.tpu.v2alpha1.model;

/**
 * Details of a standard reservation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud TPU API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Standard extends com.google.api.client.json.GenericJson {

  /**
   * Capacity units this reservation is measured in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String capacityUnits;

  /**
   * The start and end time of the reservation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Interval interval;

  /**
   * The resource type of the reservation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resourceType;

  /**
   * The size of the reservation, in the units specified in the 'capacity_units' field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer size;

  /**
   * The current usage of the reservation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Usage usage;

  /**
   * Capacity units this reservation is measured in.
   * @return value or {@code null} for none
   */
  public java.lang.String getCapacityUnits() {
    return capacityUnits;
  }

  /**
   * Capacity units this reservation is measured in.
   * @param capacityUnits capacityUnits or {@code null} for none
   */
  public Standard setCapacityUnits(java.lang.String capacityUnits) {
    this.capacityUnits = capacityUnits;
    return this;
  }

  /**
   * The start and end time of the reservation.
   * @return value or {@code null} for none
   */
  public Interval getInterval() {
    return interval;
  }

  /**
   * The start and end time of the reservation.
   * @param interval interval or {@code null} for none
   */
  public Standard setInterval(Interval interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The resource type of the reservation.
   * @return value or {@code null} for none
   */
  public java.lang.String getResourceType() {
    return resourceType;
  }

  /**
   * The resource type of the reservation.
   * @param resourceType resourceType or {@code null} for none
   */
  public Standard setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The size of the reservation, in the units specified in the 'capacity_units' field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * The size of the reservation, in the units specified in the 'capacity_units' field.
   * @param size size or {@code null} for none
   */
  public Standard setSize(java.lang.Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The current usage of the reservation.
   * @return value or {@code null} for none
   */
  public Usage getUsage() {
    return usage;
  }

  /**
   * The current usage of the reservation.
   * @param usage usage or {@code null} for none
   */
  public Standard setUsage(Usage usage) {
    this.usage = usage;
    return this;
  }

  @Override
  public Standard set(String fieldName, Object value) {
    return (Standard) super.set(fieldName, value);
  }

  @Override
  public Standard clone() {
    return (Standard) super.clone();
  }

}
