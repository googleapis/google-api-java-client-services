/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.analyticsadmin.v1beta.model;

/**
 * The customized Data Access Record Report response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Analytics Admin API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAnalyticsAdminV1betaRunAccessReportResponse extends com.google.api.client.json.GenericJson {

  /**
   * The header for a column in the report that corresponds to a specific dimension. The number of
   * DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessDimensionHeader> dimensionHeaders;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessDimensionHeader used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessDimensionHeader.class);
  }

  /**
   * The header for a column in the report that corresponds to a specific metric. The number of
   * MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessMetricHeader> metricHeaders;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessMetricHeader used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessMetricHeader.class);
  }

  /**
   * The quota state for this Analytics property including this request. This field doesn't work
   * with account-level requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAnalyticsAdminV1betaAccessQuota quota;

  /**
   * The total number of rows in the query result. `rowCount` is independent of the number of rows
   * returned in the response, the `limit` request parameter, and the `offset` request parameter.
   * For example if a query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination
   * parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1
   * /basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rowCount;

  /**
   * Rows of dimension value combinations and metric values in the report.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleAnalyticsAdminV1betaAccessRow> rows;

  static {
    // hack to force ProGuard to consider GoogleAnalyticsAdminV1betaAccessRow used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleAnalyticsAdminV1betaAccessRow.class);
  }

  /**
   * The header for a column in the report that corresponds to a specific dimension. The number of
   * DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessDimensionHeader> getDimensionHeaders() {
    return dimensionHeaders;
  }

  /**
   * The header for a column in the report that corresponds to a specific dimension. The number of
   * DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
   * @param dimensionHeaders dimensionHeaders or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse setDimensionHeaders(java.util.List<GoogleAnalyticsAdminV1betaAccessDimensionHeader> dimensionHeaders) {
    this.dimensionHeaders = dimensionHeaders;
    return this;
  }

  /**
   * The header for a column in the report that corresponds to a specific metric. The number of
   * MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessMetricHeader> getMetricHeaders() {
    return metricHeaders;
  }

  /**
   * The header for a column in the report that corresponds to a specific metric. The number of
   * MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
   * @param metricHeaders metricHeaders or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse setMetricHeaders(java.util.List<GoogleAnalyticsAdminV1betaAccessMetricHeader> metricHeaders) {
    this.metricHeaders = metricHeaders;
    return this;
  }

  /**
   * The quota state for this Analytics property including this request. This field doesn't work
   * with account-level requests.
   * @return value or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaAccessQuota getQuota() {
    return quota;
  }

  /**
   * The quota state for this Analytics property including this request. This field doesn't work
   * with account-level requests.
   * @param quota quota or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse setQuota(GoogleAnalyticsAdminV1betaAccessQuota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * The total number of rows in the query result. `rowCount` is independent of the number of rows
   * returned in the response, the `limit` request parameter, and the `offset` request parameter.
   * For example if a query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination
   * parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1
   * /basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRowCount() {
    return rowCount;
  }

  /**
   * The total number of rows in the query result. `rowCount` is independent of the number of rows
   * returned in the response, the `limit` request parameter, and the `offset` request parameter.
   * For example if a query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination
   * parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1
   * /basics#pagination).
   * @param rowCount rowCount or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse setRowCount(java.lang.Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * Rows of dimension value combinations and metric values in the report.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleAnalyticsAdminV1betaAccessRow> getRows() {
    return rows;
  }

  /**
   * Rows of dimension value combinations and metric values in the report.
   * @param rows rows or {@code null} for none
   */
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse setRows(java.util.List<GoogleAnalyticsAdminV1betaAccessRow> rows) {
    this.rows = rows;
    return this;
  }

  @Override
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse set(String fieldName, Object value) {
    return (GoogleAnalyticsAdminV1betaRunAccessReportResponse) super.set(fieldName, value);
  }

  @Override
  public GoogleAnalyticsAdminV1betaRunAccessReportResponse clone() {
    return (GoogleAnalyticsAdminV1betaRunAccessReportResponse) super.clone();
  }

}
