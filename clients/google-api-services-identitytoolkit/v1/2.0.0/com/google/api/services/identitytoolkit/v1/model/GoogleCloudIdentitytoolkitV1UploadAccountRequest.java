/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.identitytoolkit.v1.model;

/**
 * Request message for UploadAccount.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity Toolkit API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudIdentitytoolkitV1UploadAccountRequest extends com.google.api.client.json.GenericJson {

  /**
   * Whether to overwrite an existing account in Identity Platform with a matching `local_id` in the
   * request. If true, the existing account will be overwritten. If false, an error will be
   * returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowOverwrite;

  /**
   * The parameters for Argon2 hashing algorithm.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudIdentitytoolkitV1Argon2Parameters argon2Parameters;

  /**
   * The block size parameter used by the STANDARD_SCRYPT hashing function. This parameter, along
   * with parallelization and cpu_mem_cost help tune the resources needed to hash a password, and
   * should be tuned as processor speeds and memory technologies advance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer blockSize;

  /**
   * The CPU memory cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cpuMemCost;

  /**
   * If true, the service will do the following list of checks before an account is uploaded: *
   * Duplicate emails * Duplicate federated IDs * Federated ID provider validation If the
   * duplication exists within the list of accounts to be uploaded, it will prevent the entire list
   * from being uploaded. If the email or federated ID is a duplicate of a user already within the
   * project/tenant, the account will not be uploaded, but the rest of the accounts will be
   * unaffected. If false, these checks will be skipped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long delegatedProjectNumber;

  /**
   * The desired key length for the STANDARD_SCRYPT hashing function. Must be at least 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dkLen;

  /**
   * Required. The hashing function used to hash the account passwords. Must be one of the
   * following: * HMAC_SHA256 * HMAC_SHA1 * HMAC_MD5 * SCRYPT * PBKDF_SHA1 * MD5 * HMAC_SHA512 *
   * SHA1 * BCRYPT * PBKDF2_SHA256 * SHA256 * SHA512 * STANDARD_SCRYPT * ARGON2
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hashAlgorithm;

  /**
   * Memory cost for hash calculation. Only required when the hashing function is SCRYPT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryCost;

  /**
   * The parallelization cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer parallelization;

  /**
   * Password and salt order when verify password.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String passwordHashOrder;

  /**
   * The number of rounds used for hash calculation. Only required for the following hashing
   * functions: * MD5 * SHA1 * SHA256 * SHA512 * PBKDF_SHA1 * PBKDF2_SHA256 * SCRYPT
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rounds;

  /**
   * One or more bytes to be inserted between the salt and plain text password. For stronger
   * security, this should be a single non-printable character.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String saltSeparator;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sanityCheck;

  /**
   * The signer key used to hash the password. Required for the following hashing functions: *
   * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signerKey;

  /**
   * The ID of the Identity Platform tenant the account belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tenantId;

  /**
   * A list of accounts to upload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudIdentitytoolkitV1UserInfo> users;

  /**
   * Whether to overwrite an existing account in Identity Platform with a matching `local_id` in the
   * request. If true, the existing account will be overwritten. If false, an error will be
   * returned.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowOverwrite() {
    return allowOverwrite;
  }

  /**
   * Whether to overwrite an existing account in Identity Platform with a matching `local_id` in the
   * request. If true, the existing account will be overwritten. If false, an error will be
   * returned.
   * @param allowOverwrite allowOverwrite or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setAllowOverwrite(java.lang.Boolean allowOverwrite) {
    this.allowOverwrite = allowOverwrite;
    return this;
  }

  /**
   * The parameters for Argon2 hashing algorithm.
   * @return value or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1Argon2Parameters getArgon2Parameters() {
    return argon2Parameters;
  }

  /**
   * The parameters for Argon2 hashing algorithm.
   * @param argon2Parameters argon2Parameters or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setArgon2Parameters(GoogleCloudIdentitytoolkitV1Argon2Parameters argon2Parameters) {
    this.argon2Parameters = argon2Parameters;
    return this;
  }

  /**
   * The block size parameter used by the STANDARD_SCRYPT hashing function. This parameter, along
   * with parallelization and cpu_mem_cost help tune the resources needed to hash a password, and
   * should be tuned as processor speeds and memory technologies advance.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBlockSize() {
    return blockSize;
  }

  /**
   * The block size parameter used by the STANDARD_SCRYPT hashing function. This parameter, along
   * with parallelization and cpu_mem_cost help tune the resources needed to hash a password, and
   * should be tuned as processor speeds and memory technologies advance.
   * @param blockSize blockSize or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setBlockSize(java.lang.Integer blockSize) {
    this.blockSize = blockSize;
    return this;
  }

  /**
   * The CPU memory cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCpuMemCost() {
    return cpuMemCost;
  }

  /**
   * The CPU memory cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * @param cpuMemCost cpuMemCost or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setCpuMemCost(java.lang.Integer cpuMemCost) {
    this.cpuMemCost = cpuMemCost;
    return this;
  }

  /**
   * If true, the service will do the following list of checks before an account is uploaded: *
   * Duplicate emails * Duplicate federated IDs * Federated ID provider validation If the
   * duplication exists within the list of accounts to be uploaded, it will prevent the entire list
   * from being uploaded. If the email or federated ID is a duplicate of a user already within the
   * project/tenant, the account will not be uploaded, but the rest of the accounts will be
   * unaffected. If false, these checks will be skipped.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  /**
   * If true, the service will do the following list of checks before an account is uploaded: *
   * Duplicate emails * Duplicate federated IDs * Federated ID provider validation If the
   * duplication exists within the list of accounts to be uploaded, it will prevent the entire list
   * from being uploaded. If the email or federated ID is a duplicate of a user already within the
   * project/tenant, the account will not be uploaded, but the rest of the accounts will be
   * unaffected. If false, these checks will be skipped.
   * @param delegatedProjectNumber delegatedProjectNumber or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setDelegatedProjectNumber(java.lang.Long delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * The desired key length for the STANDARD_SCRYPT hashing function. Must be at least 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDkLen() {
    return dkLen;
  }

  /**
   * The desired key length for the STANDARD_SCRYPT hashing function. Must be at least 1.
   * @param dkLen dkLen or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setDkLen(java.lang.Integer dkLen) {
    this.dkLen = dkLen;
    return this;
  }

  /**
   * Required. The hashing function used to hash the account passwords. Must be one of the
   * following: * HMAC_SHA256 * HMAC_SHA1 * HMAC_MD5 * SCRYPT * PBKDF_SHA1 * MD5 * HMAC_SHA512 *
   * SHA1 * BCRYPT * PBKDF2_SHA256 * SHA256 * SHA512 * STANDARD_SCRYPT * ARGON2
   * @return value or {@code null} for none
   */
  public java.lang.String getHashAlgorithm() {
    return hashAlgorithm;
  }

  /**
   * Required. The hashing function used to hash the account passwords. Must be one of the
   * following: * HMAC_SHA256 * HMAC_SHA1 * HMAC_MD5 * SCRYPT * PBKDF_SHA1 * MD5 * HMAC_SHA512 *
   * SHA1 * BCRYPT * PBKDF2_SHA256 * SHA256 * SHA512 * STANDARD_SCRYPT * ARGON2
   * @param hashAlgorithm hashAlgorithm or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setHashAlgorithm(java.lang.String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
    return this;
  }

  /**
   * Memory cost for hash calculation. Only required when the hashing function is SCRYPT.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryCost() {
    return memoryCost;
  }

  /**
   * Memory cost for hash calculation. Only required when the hashing function is SCRYPT.
   * @param memoryCost memoryCost or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setMemoryCost(java.lang.Integer memoryCost) {
    this.memoryCost = memoryCost;
    return this;
  }

  /**
   * The parallelization cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getParallelization() {
    return parallelization;
  }

  /**
   * The parallelization cost parameter to be used by the STANDARD_SCRYPT hashing function. This
   * parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a
   * password, and should be tuned as processor speeds and memory technologies advance.
   * @param parallelization parallelization or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setParallelization(java.lang.Integer parallelization) {
    this.parallelization = parallelization;
    return this;
  }

  /**
   * Password and salt order when verify password.
   * @return value or {@code null} for none
   */
  public java.lang.String getPasswordHashOrder() {
    return passwordHashOrder;
  }

  /**
   * Password and salt order when verify password.
   * @param passwordHashOrder passwordHashOrder or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setPasswordHashOrder(java.lang.String passwordHashOrder) {
    this.passwordHashOrder = passwordHashOrder;
    return this;
  }

  /**
   * The number of rounds used for hash calculation. Only required for the following hashing
   * functions: * MD5 * SHA1 * SHA256 * SHA512 * PBKDF_SHA1 * PBKDF2_SHA256 * SCRYPT
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRounds() {
    return rounds;
  }

  /**
   * The number of rounds used for hash calculation. Only required for the following hashing
   * functions: * MD5 * SHA1 * SHA256 * SHA512 * PBKDF_SHA1 * PBKDF2_SHA256 * SCRYPT
   * @param rounds rounds or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setRounds(java.lang.Integer rounds) {
    this.rounds = rounds;
    return this;
  }

  /**
   * One or more bytes to be inserted between the salt and plain text password. For stronger
   * security, this should be a single non-printable character.
   * @see #decodeSaltSeparator()
   * @return value or {@code null} for none
   */
  public java.lang.String getSaltSeparator() {
    return saltSeparator;
  }

  /**
   * One or more bytes to be inserted between the salt and plain text password. For stronger
   * security, this should be a single non-printable character.
   * @see #getSaltSeparator()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSaltSeparator() {
    return com.google.api.client.util.Base64.decodeBase64(saltSeparator);
  }

  /**
   * One or more bytes to be inserted between the salt and plain text password. For stronger
   * security, this should be a single non-printable character.
   * @see #encodeSaltSeparator()
   * @param saltSeparator saltSeparator or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setSaltSeparator(java.lang.String saltSeparator) {
    this.saltSeparator = saltSeparator;
    return this;
  }

  /**
   * One or more bytes to be inserted between the salt and plain text password. For stronger
   * security, this should be a single non-printable character.
   * @see #setSaltSeparator()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest encodeSaltSeparator(byte[] saltSeparator) {
    this.saltSeparator = com.google.api.client.util.Base64.encodeBase64URLSafeString(saltSeparator);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSanityCheck() {
    return sanityCheck;
  }

  /**
   * @param sanityCheck sanityCheck or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setSanityCheck(java.lang.Boolean sanityCheck) {
    this.sanityCheck = sanityCheck;
    return this;
  }

  /**
   * The signer key used to hash the password. Required for the following hashing functions: *
   * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
   * @see #decodeSignerKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getSignerKey() {
    return signerKey;
  }

  /**
   * The signer key used to hash the password. Required for the following hashing functions: *
   * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
   * @see #getSignerKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSignerKey() {
    return com.google.api.client.util.Base64.decodeBase64(signerKey);
  }

  /**
   * The signer key used to hash the password. Required for the following hashing functions: *
   * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
   * @see #encodeSignerKey()
   * @param signerKey signerKey or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setSignerKey(java.lang.String signerKey) {
    this.signerKey = signerKey;
    return this;
  }

  /**
   * The signer key used to hash the password. Required for the following hashing functions: *
   * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
   * @see #setSignerKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest encodeSignerKey(byte[] signerKey) {
    this.signerKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(signerKey);
    return this;
  }

  /**
   * The ID of the Identity Platform tenant the account belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getTenantId() {
    return tenantId;
  }

  /**
   * The ID of the Identity Platform tenant the account belongs to.
   * @param tenantId tenantId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setTenantId(java.lang.String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * A list of accounts to upload.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudIdentitytoolkitV1UserInfo> getUsers() {
    return users;
  }

  /**
   * A list of accounts to upload.
   * @param users users or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest setUsers(java.util.List<GoogleCloudIdentitytoolkitV1UserInfo> users) {
    this.users = users;
    return this;
  }

  @Override
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest set(String fieldName, Object value) {
    return (GoogleCloudIdentitytoolkitV1UploadAccountRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudIdentitytoolkitV1UploadAccountRequest clone() {
    return (GoogleCloudIdentitytoolkitV1UploadAccountRequest) super.clone();
  }

}
