/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A SemanticType configures a value determined by another source, in particular another intent or a
 * semantic frame. See go/unifying-intents and go/framery.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersSemanticType extends com.google.api.client.json.GenericJson {

  /**
   * Determines whether or not the meaning schema that contains this semantic_type conforms to a
   * function call with the name and arguments taken from the meaning schema. As it refers to the
   * "containing_intent", this field should only be set in a semantic_type declared in an intent's
   * type_members field. The behavior of this field is undefined in other cases, for example,
   * declaring the type of an intent slot. On Assistant, we use meaning schemas for argument types
   * to represent both function call values as well as a reusable tool to host other argument values
   * (opaque types, normalized strings, subsets of entities) across intents. Teams need this
   * information to run conformance checks and annotate new data. Example: If the intents below are
   * in the intent catalog, then: - Intent(slot="some string") is conformant, because Type has
   * string_type{} in its type_members. - Intent(slot=Type()) is not conformant, because Type has
   * set semantic_type.includes_containing_intent to false. - Intent(slot=SubType()) is conformant,
   * because type_members is not inherited. { id: "Intent" slot: { name: "slot" type: {
   * semantic_type { name: "Type" }} } } { id: "Type" type_members { string_type{} semantic_type {
   * includes_containing_intent: false } } } { id: "SubType" parent { id: "Type" relationship_type:
   * SUBTYPE } }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean includesContainingIntent;

  /**
   * Names of valid sources of the semantics (for example: a frame or an intent).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> name;

  /**
   * Contains data about current schema remodelings at the SemanticType name level. The "name" field
   * contains all possible semantic type names and "semantic_type_name_remodelings" acts as an
   * overlay to determine which ones to surface based on which schema remodeling IDs are requested.
   * For more information see go/meaning-remodeling-framework.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpMeaningSemanticTypeNameMeaningRemodelings> nameRemodelings;

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpMeaningMeaningRemodelings remodelings;

  /**
   * Determines whether or not the meaning schema that contains this semantic_type conforms to a
   * function call with the name and arguments taken from the meaning schema. As it refers to the
   * "containing_intent", this field should only be set in a semantic_type declared in an intent's
   * type_members field. The behavior of this field is undefined in other cases, for example,
   * declaring the type of an intent slot. On Assistant, we use meaning schemas for argument types
   * to represent both function call values as well as a reusable tool to host other argument values
   * (opaque types, normalized strings, subsets of entities) across intents. Teams need this
   * information to run conformance checks and annotate new data. Example: If the intents below are
   * in the intent catalog, then: - Intent(slot="some string") is conformant, because Type has
   * string_type{} in its type_members. - Intent(slot=Type()) is not conformant, because Type has
   * set semantic_type.includes_containing_intent to false. - Intent(slot=SubType()) is conformant,
   * because type_members is not inherited. { id: "Intent" slot: { name: "slot" type: {
   * semantic_type { name: "Type" }} } } { id: "Type" type_members { string_type{} semantic_type {
   * includes_containing_intent: false } } } { id: "SubType" parent { id: "Type" relationship_type:
   * SUBTYPE } }
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncludesContainingIntent() {
    return includesContainingIntent;
  }

  /**
   * Determines whether or not the meaning schema that contains this semantic_type conforms to a
   * function call with the name and arguments taken from the meaning schema. As it refers to the
   * "containing_intent", this field should only be set in a semantic_type declared in an intent's
   * type_members field. The behavior of this field is undefined in other cases, for example,
   * declaring the type of an intent slot. On Assistant, we use meaning schemas for argument types
   * to represent both function call values as well as a reusable tool to host other argument values
   * (opaque types, normalized strings, subsets of entities) across intents. Teams need this
   * information to run conformance checks and annotate new data. Example: If the intents below are
   * in the intent catalog, then: - Intent(slot="some string") is conformant, because Type has
   * string_type{} in its type_members. - Intent(slot=Type()) is not conformant, because Type has
   * set semantic_type.includes_containing_intent to false. - Intent(slot=SubType()) is conformant,
   * because type_members is not inherited. { id: "Intent" slot: { name: "slot" type: {
   * semantic_type { name: "Type" }} } } { id: "Type" type_members { string_type{} semantic_type {
   * includes_containing_intent: false } } } { id: "SubType" parent { id: "Type" relationship_type:
   * SUBTYPE } }
   * @param includesContainingIntent includesContainingIntent or {@code null} for none
   */
  public KnowledgeAnswersSemanticType setIncludesContainingIntent(java.lang.Boolean includesContainingIntent) {
    this.includesContainingIntent = includesContainingIntent;
    return this;
  }

  /**
   * Names of valid sources of the semantics (for example: a frame or an intent).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getName() {
    return name;
  }

  /**
   * Names of valid sources of the semantics (for example: a frame or an intent).
   * @param name name or {@code null} for none
   */
  public KnowledgeAnswersSemanticType setName(java.util.List<java.lang.String> name) {
    this.name = name;
    return this;
  }

  /**
   * Contains data about current schema remodelings at the SemanticType name level. The "name" field
   * contains all possible semantic type names and "semantic_type_name_remodelings" acts as an
   * overlay to determine which ones to surface based on which schema remodeling IDs are requested.
   * For more information see go/meaning-remodeling-framework.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpMeaningSemanticTypeNameMeaningRemodelings> getNameRemodelings() {
    return nameRemodelings;
  }

  /**
   * Contains data about current schema remodelings at the SemanticType name level. The "name" field
   * contains all possible semantic type names and "semantic_type_name_remodelings" acts as an
   * overlay to determine which ones to surface based on which schema remodeling IDs are requested.
   * For more information see go/meaning-remodeling-framework.
   * @param nameRemodelings nameRemodelings or {@code null} for none
   */
  public KnowledgeAnswersSemanticType setNameRemodelings(java.util.List<NlpMeaningSemanticTypeNameMeaningRemodelings> nameRemodelings) {
    this.nameRemodelings = nameRemodelings;
    return this;
  }

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * @return value or {@code null} for none
   */
  public NlpMeaningMeaningRemodelings getRemodelings() {
    return remodelings;
  }

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * @param remodelings remodelings or {@code null} for none
   */
  public KnowledgeAnswersSemanticType setRemodelings(NlpMeaningMeaningRemodelings remodelings) {
    this.remodelings = remodelings;
    return this;
  }

  @Override
  public KnowledgeAnswersSemanticType set(String fieldName, Object value) {
    return (KnowledgeAnswersSemanticType) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersSemanticType clone() {
    return (KnowledgeAnswersSemanticType) super.clone();
  }

}
