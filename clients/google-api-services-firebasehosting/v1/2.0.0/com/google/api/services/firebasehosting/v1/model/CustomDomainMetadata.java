/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1.model;

/**
 * Metadata associated with a`CustomDomain` operation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Hosting API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CustomDomainMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The `CertState` of the domain name's SSL certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certState;

  /**
   * The `HostState` of the domain name this `CustomDomain` refers to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostState;

  /**
   * A list of issues that are currently preventing Hosting from completing the operation. These are
   * generally DNS-related issues that Hosting encounters when querying a domain name's records or
   * attempting to mint an SSL certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Status> issues;

  /**
   * A set of DNS record updates and ACME challenges that allow you to transition domain names to
   * Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate
   * and establish ownership for your custom domain before Hosting begins serving traffic on it. If
   * your domain name is already in active use with another provider, add one of the challenges and
   * make the recommended DNS updates. After adding challenges and adjusting DNS records as
   * necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be
   * `CERT_ACTIVE` before sending traffic to Hosting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LiveMigrationStep> liveMigrationSteps;

  /**
   * The `OwnershipState` of the domain name this `CustomDomain` refers to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ownershipState;

  /**
   * A set of DNS record updates that allow Hosting to serve secure content on your domain name. The
   * record type determines the update's purpose: - `A` and `AAAA`: Updates your domain name's IP
   * addresses so that they direct traffic to Hosting servers. - `TXT`: Updates ownership
   * permissions on your domain name, letting Hosting know that your custom domain's project has
   * permission to perform actions for that domain name. - `CAA`: Updates your domain name's list of
   * authorized Certificate Authorities (CAs). Only present if you have existing `CAA` records that
   * prohibit Hosting's CA from minting certs for your domain name. These updates include all DNS
   * changes you'll need to get started with Hosting, but, if made all at once, can result in a
   * brief period of downtime for your domain name--while Hosting creates and uploads an SSL cert,
   * for example. If you'd like to add your domain name to Hosting without downtime, complete the
   * `liveMigrationSteps` first, before making the remaining updates in this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DnsUpdates quickSetupUpdates;

  /**
   * The `CertState` of the domain name's SSL certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertState() {
    return certState;
  }

  /**
   * The `CertState` of the domain name's SSL certificate.
   * @param certState certState or {@code null} for none
   */
  public CustomDomainMetadata setCertState(java.lang.String certState) {
    this.certState = certState;
    return this;
  }

  /**
   * The `HostState` of the domain name this `CustomDomain` refers to.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostState() {
    return hostState;
  }

  /**
   * The `HostState` of the domain name this `CustomDomain` refers to.
   * @param hostState hostState or {@code null} for none
   */
  public CustomDomainMetadata setHostState(java.lang.String hostState) {
    this.hostState = hostState;
    return this;
  }

  /**
   * A list of issues that are currently preventing Hosting from completing the operation. These are
   * generally DNS-related issues that Hosting encounters when querying a domain name's records or
   * attempting to mint an SSL certificate.
   * @return value or {@code null} for none
   */
  public java.util.List<Status> getIssues() {
    return issues;
  }

  /**
   * A list of issues that are currently preventing Hosting from completing the operation. These are
   * generally DNS-related issues that Hosting encounters when querying a domain name's records or
   * attempting to mint an SSL certificate.
   * @param issues issues or {@code null} for none
   */
  public CustomDomainMetadata setIssues(java.util.List<Status> issues) {
    this.issues = issues;
    return this;
  }

  /**
   * A set of DNS record updates and ACME challenges that allow you to transition domain names to
   * Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate
   * and establish ownership for your custom domain before Hosting begins serving traffic on it. If
   * your domain name is already in active use with another provider, add one of the challenges and
   * make the recommended DNS updates. After adding challenges and adjusting DNS records as
   * necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be
   * `CERT_ACTIVE` before sending traffic to Hosting.
   * @return value or {@code null} for none
   */
  public java.util.List<LiveMigrationStep> getLiveMigrationSteps() {
    return liveMigrationSteps;
  }

  /**
   * A set of DNS record updates and ACME challenges that allow you to transition domain names to
   * Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate
   * and establish ownership for your custom domain before Hosting begins serving traffic on it. If
   * your domain name is already in active use with another provider, add one of the challenges and
   * make the recommended DNS updates. After adding challenges and adjusting DNS records as
   * necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be
   * `CERT_ACTIVE` before sending traffic to Hosting.
   * @param liveMigrationSteps liveMigrationSteps or {@code null} for none
   */
  public CustomDomainMetadata setLiveMigrationSteps(java.util.List<LiveMigrationStep> liveMigrationSteps) {
    this.liveMigrationSteps = liveMigrationSteps;
    return this;
  }

  /**
   * The `OwnershipState` of the domain name this `CustomDomain` refers to.
   * @return value or {@code null} for none
   */
  public java.lang.String getOwnershipState() {
    return ownershipState;
  }

  /**
   * The `OwnershipState` of the domain name this `CustomDomain` refers to.
   * @param ownershipState ownershipState or {@code null} for none
   */
  public CustomDomainMetadata setOwnershipState(java.lang.String ownershipState) {
    this.ownershipState = ownershipState;
    return this;
  }

  /**
   * A set of DNS record updates that allow Hosting to serve secure content on your domain name. The
   * record type determines the update's purpose: - `A` and `AAAA`: Updates your domain name's IP
   * addresses so that they direct traffic to Hosting servers. - `TXT`: Updates ownership
   * permissions on your domain name, letting Hosting know that your custom domain's project has
   * permission to perform actions for that domain name. - `CAA`: Updates your domain name's list of
   * authorized Certificate Authorities (CAs). Only present if you have existing `CAA` records that
   * prohibit Hosting's CA from minting certs for your domain name. These updates include all DNS
   * changes you'll need to get started with Hosting, but, if made all at once, can result in a
   * brief period of downtime for your domain name--while Hosting creates and uploads an SSL cert,
   * for example. If you'd like to add your domain name to Hosting without downtime, complete the
   * `liveMigrationSteps` first, before making the remaining updates in this field.
   * @return value or {@code null} for none
   */
  public DnsUpdates getQuickSetupUpdates() {
    return quickSetupUpdates;
  }

  /**
   * A set of DNS record updates that allow Hosting to serve secure content on your domain name. The
   * record type determines the update's purpose: - `A` and `AAAA`: Updates your domain name's IP
   * addresses so that they direct traffic to Hosting servers. - `TXT`: Updates ownership
   * permissions on your domain name, letting Hosting know that your custom domain's project has
   * permission to perform actions for that domain name. - `CAA`: Updates your domain name's list of
   * authorized Certificate Authorities (CAs). Only present if you have existing `CAA` records that
   * prohibit Hosting's CA from minting certs for your domain name. These updates include all DNS
   * changes you'll need to get started with Hosting, but, if made all at once, can result in a
   * brief period of downtime for your domain name--while Hosting creates and uploads an SSL cert,
   * for example. If you'd like to add your domain name to Hosting without downtime, complete the
   * `liveMigrationSteps` first, before making the remaining updates in this field.
   * @param quickSetupUpdates quickSetupUpdates or {@code null} for none
   */
  public CustomDomainMetadata setQuickSetupUpdates(DnsUpdates quickSetupUpdates) {
    this.quickSetupUpdates = quickSetupUpdates;
    return this;
  }

  @Override
  public CustomDomainMetadata set(String fieldName, Object value) {
    return (CustomDomainMetadata) super.set(fieldName, value);
  }

  @Override
  public CustomDomainMetadata clone() {
    return (CustomDomainMetadata) super.clone();
  }

}
