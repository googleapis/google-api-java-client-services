/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A GConceptInstanceProto contains a GConceptID (which is the unique identifier of a GConcept, a
 * category in the Geo Ontology).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreGConceptInstanceProto extends com.google.api.client.json.GenericJson {

  /**
   * The unique identifier of a GConcept (e.g. "gcid:railway").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gconceptId;

  /**
   * Field-level metadata for this GConcept.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * The relative prominence of this category to this feature according to the data provider, as one
   * of the values from the enum above. Prominence is a measure of how well the given GConcept
   * describes the feature. An example is a gas station with convenience store and ATM. All three
   * GConcepts are very relevant, but the gas_station GConcept is the most prominent. If the
   * prominence of this GConcept is unknown, this field should not be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String prominence;

  /**
   * The unique identifier of a GConcept (e.g. "gcid:railway").
   * @return value or {@code null} for none
   */
  public java.lang.String getGconceptId() {
    return gconceptId;
  }

  /**
   * The unique identifier of a GConcept (e.g. "gcid:railway").
   * @param gconceptId gconceptId or {@code null} for none
   */
  public GeostoreGConceptInstanceProto setGconceptId(java.lang.String gconceptId) {
    this.gconceptId = gconceptId;
    return this;
  }

  /**
   * Field-level metadata for this GConcept.
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this GConcept.
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreGConceptInstanceProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The relative prominence of this category to this feature according to the data provider, as one
   * of the values from the enum above. Prominence is a measure of how well the given GConcept
   * describes the feature. An example is a gas station with convenience store and ATM. All three
   * GConcepts are very relevant, but the gas_station GConcept is the most prominent. If the
   * prominence of this GConcept is unknown, this field should not be set.
   * @return value or {@code null} for none
   */
  public java.lang.String getProminence() {
    return prominence;
  }

  /**
   * The relative prominence of this category to this feature according to the data provider, as one
   * of the values from the enum above. Prominence is a measure of how well the given GConcept
   * describes the feature. An example is a gas station with convenience store and ATM. All three
   * GConcepts are very relevant, but the gas_station GConcept is the most prominent. If the
   * prominence of this GConcept is unknown, this field should not be set.
   * @param prominence prominence or {@code null} for none
   */
  public GeostoreGConceptInstanceProto setProminence(java.lang.String prominence) {
    this.prominence = prominence;
    return this;
  }

  @Override
  public GeostoreGConceptInstanceProto set(String fieldName, Object value) {
    return (GeostoreGConceptInstanceProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreGConceptInstanceProto clone() {
    return (GeostoreGConceptInstanceProto) super.clone();
  }

}
