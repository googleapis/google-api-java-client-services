/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A redirect event represents a change in the resource URL for a document. This includes HTTP
 * redirects, as well things which trigger client navigations such as script changing
 * window.location, tags, HTTP Refresh headers, etc.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoRedirectEvent extends com.google.api.client.json.GenericJson {

  /**
   * The HTTP method of the request for the redirect target.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String httpMethod;

  /**
   * For HTTP redirects, the HTTP status code returned in the initial HTTP response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer httpStatusCode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refreshType;

  /**
   * True if the redirect led to a download instead of loading a new page. Note that such redirects
   * can appear anywhere in the list of redirect events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean targetContentDownloaded;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetUrl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The HTTP method of the request for the redirect target.
   * @return value or {@code null} for none
   */
  public java.lang.String getHttpMethod() {
    return httpMethod;
  }

  /**
   * The HTTP method of the request for the redirect target.
   * @param httpMethod httpMethod or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setHttpMethod(java.lang.String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * For HTTP redirects, the HTTP status code returned in the initial HTTP response.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHttpStatusCode() {
    return httpStatusCode;
  }

  /**
   * For HTTP redirects, the HTTP status code returned in the initial HTTP response.
   * @param httpStatusCode httpStatusCode or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setHttpStatusCode(java.lang.Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRefreshType() {
    return refreshType;
  }

  /**
   * @param refreshType refreshType or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setRefreshType(java.lang.String refreshType) {
    this.refreshType = refreshType;
    return this;
  }

  /**
   * True if the redirect led to a download instead of loading a new page. Note that such redirects
   * can appear anywhere in the list of redirect events.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTargetContentDownloaded() {
    return targetContentDownloaded;
  }

  /**
   * True if the redirect led to a download instead of loading a new page. Note that such redirects
   * can appear anywhere in the list of redirect events.
   * @param targetContentDownloaded targetContentDownloaded or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setTargetContentDownloaded(java.lang.Boolean targetContentDownloaded) {
    this.targetContentDownloaded = targetContentDownloaded;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetUrl() {
    return targetUrl;
  }

  /**
   * @param targetUrl targetUrl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setTargetUrl(java.lang.String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRedirectEvent setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRedirectEvent set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoRedirectEvent) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRedirectEvent clone() {
    return (HtmlrenderWebkitHeadlessProtoRedirectEvent) super.clone();
  }

}
