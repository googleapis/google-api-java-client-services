/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * The configuration of a Virtual Private Cloud (VPC) network that can access the Kafka Connect
 * cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConnectNetworkConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Additional subnets may be specified. They may be in another region, but must be in
   * the same VPC network. The Connect workers can communicate with network endpoints in either the
   * primary or additional subnets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> additionalSubnets;

  /**
   * Optional. Additional DNS domain names from the subnet's network to be made visible to the
   * Connect Cluster. When using MirrorMaker2, it's necessary to add the bootstrap address's dns
   * domain name of the target cluster to make it visible to the connector. For example: my-kafka-
   * cluster.us-central1.managedkafka.my-project.cloud.goog
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> dnsDomainNames;

  /**
   * Required. VPC subnet to make available to the Kafka Connect cluster. Structured like:
   * projects/{project}/regions/{region}/subnetworks/{subnet_id} It is used to create a Private
   * Service Connect (PSC) interface for the Kafka Connect workers. It must be located in the same
   * region as the Kafka Connect cluster. The CIDR range of the subnet must be within the IPv4
   * address ranges for private networks, as specified in RFC 1918. The primary subnet CIDR range
   * must have a minimum size of /22 (1024 addresses).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String primarySubnet;

  /**
   * Optional. Additional subnets may be specified. They may be in another region, but must be in
   * the same VPC network. The Connect workers can communicate with network endpoints in either the
   * primary or additional subnets.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAdditionalSubnets() {
    return additionalSubnets;
  }

  /**
   * Optional. Additional subnets may be specified. They may be in another region, but must be in
   * the same VPC network. The Connect workers can communicate with network endpoints in either the
   * primary or additional subnets.
   * @param additionalSubnets additionalSubnets or {@code null} for none
   */
  public ConnectNetworkConfig setAdditionalSubnets(java.util.List<java.lang.String> additionalSubnets) {
    this.additionalSubnets = additionalSubnets;
    return this;
  }

  /**
   * Optional. Additional DNS domain names from the subnet's network to be made visible to the
   * Connect Cluster. When using MirrorMaker2, it's necessary to add the bootstrap address's dns
   * domain name of the target cluster to make it visible to the connector. For example: my-kafka-
   * cluster.us-central1.managedkafka.my-project.cloud.goog
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDnsDomainNames() {
    return dnsDomainNames;
  }

  /**
   * Optional. Additional DNS domain names from the subnet's network to be made visible to the
   * Connect Cluster. When using MirrorMaker2, it's necessary to add the bootstrap address's dns
   * domain name of the target cluster to make it visible to the connector. For example: my-kafka-
   * cluster.us-central1.managedkafka.my-project.cloud.goog
   * @param dnsDomainNames dnsDomainNames or {@code null} for none
   */
  public ConnectNetworkConfig setDnsDomainNames(java.util.List<java.lang.String> dnsDomainNames) {
    this.dnsDomainNames = dnsDomainNames;
    return this;
  }

  /**
   * Required. VPC subnet to make available to the Kafka Connect cluster. Structured like:
   * projects/{project}/regions/{region}/subnetworks/{subnet_id} It is used to create a Private
   * Service Connect (PSC) interface for the Kafka Connect workers. It must be located in the same
   * region as the Kafka Connect cluster. The CIDR range of the subnet must be within the IPv4
   * address ranges for private networks, as specified in RFC 1918. The primary subnet CIDR range
   * must have a minimum size of /22 (1024 addresses).
   * @return value or {@code null} for none
   */
  public java.lang.String getPrimarySubnet() {
    return primarySubnet;
  }

  /**
   * Required. VPC subnet to make available to the Kafka Connect cluster. Structured like:
   * projects/{project}/regions/{region}/subnetworks/{subnet_id} It is used to create a Private
   * Service Connect (PSC) interface for the Kafka Connect workers. It must be located in the same
   * region as the Kafka Connect cluster. The CIDR range of the subnet must be within the IPv4
   * address ranges for private networks, as specified in RFC 1918. The primary subnet CIDR range
   * must have a minimum size of /22 (1024 addresses).
   * @param primarySubnet primarySubnet or {@code null} for none
   */
  public ConnectNetworkConfig setPrimarySubnet(java.lang.String primarySubnet) {
    this.primarySubnet = primarySubnet;
    return this;
  }

  @Override
  public ConnectNetworkConfig set(String fieldName, Object value) {
    return (ConnectNetworkConfig) super.set(fieldName, value);
  }

  @Override
  public ConnectNetworkConfig clone() {
    return (ConnectNetworkConfig) super.clone();
  }

}
