/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Following signals identify spike of spammy anchor phrases. Anchors created during the spike are
 * tagged with LINK_SPAM_PHRASE_SPIKE.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingDocjoinerAnchorPhraseSpamInfo extends com.google.api.client.json.GenericJson {

  /**
   * How many spam phrases found in the anchors among unique domains.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phraseAnchorSpamCount;

  /**
   * Over how many days 80% of these phrases were discovered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phraseAnchorSpamDays;

  /**
   * Total number of demoted anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long phraseAnchorSpamDemoted;

  /**
   * Time when anchor spam spike ended with padding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long phraseAnchorSpamEnd;

  /**
   * Spam phrases fraction of all anchors of the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phraseAnchorSpamFraq;

  /**
   * Combined penalty for anchor demotion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phraseAnchorSpamPenalty;

  /**
   * Total number of observed anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long phraseAnchorSpamProcessed;

  /**
   * Average daily rate of spam anchor discovery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phraseAnchorSpamRate;

  /**
   * Time when anchor spam spike started with padding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long phraseAnchorSpamStart;

  /**
   * How many spam phrases found in the anchors among unique domains.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhraseAnchorSpamCount() {
    return phraseAnchorSpamCount;
  }

  /**
   * How many spam phrases found in the anchors among unique domains.
   * @param phraseAnchorSpamCount phraseAnchorSpamCount or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamCount(java.lang.Float phraseAnchorSpamCount) {
    this.phraseAnchorSpamCount = phraseAnchorSpamCount;
    return this;
  }

  /**
   * Over how many days 80% of these phrases were discovered.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhraseAnchorSpamDays() {
    return phraseAnchorSpamDays;
  }

  /**
   * Over how many days 80% of these phrases were discovered.
   * @param phraseAnchorSpamDays phraseAnchorSpamDays or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamDays(java.lang.Float phraseAnchorSpamDays) {
    this.phraseAnchorSpamDays = phraseAnchorSpamDays;
    return this;
  }

  /**
   * Total number of demoted anchors.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPhraseAnchorSpamDemoted() {
    return phraseAnchorSpamDemoted;
  }

  /**
   * Total number of demoted anchors.
   * @param phraseAnchorSpamDemoted phraseAnchorSpamDemoted or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamDemoted(java.lang.Long phraseAnchorSpamDemoted) {
    this.phraseAnchorSpamDemoted = phraseAnchorSpamDemoted;
    return this;
  }

  /**
   * Time when anchor spam spike ended with padding.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPhraseAnchorSpamEnd() {
    return phraseAnchorSpamEnd;
  }

  /**
   * Time when anchor spam spike ended with padding.
   * @param phraseAnchorSpamEnd phraseAnchorSpamEnd or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamEnd(java.lang.Long phraseAnchorSpamEnd) {
    this.phraseAnchorSpamEnd = phraseAnchorSpamEnd;
    return this;
  }

  /**
   * Spam phrases fraction of all anchors of the document.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhraseAnchorSpamFraq() {
    return phraseAnchorSpamFraq;
  }

  /**
   * Spam phrases fraction of all anchors of the document.
   * @param phraseAnchorSpamFraq phraseAnchorSpamFraq or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamFraq(java.lang.Float phraseAnchorSpamFraq) {
    this.phraseAnchorSpamFraq = phraseAnchorSpamFraq;
    return this;
  }

  /**
   * Combined penalty for anchor demotion.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhraseAnchorSpamPenalty() {
    return phraseAnchorSpamPenalty;
  }

  /**
   * Combined penalty for anchor demotion.
   * @param phraseAnchorSpamPenalty phraseAnchorSpamPenalty or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamPenalty(java.lang.Float phraseAnchorSpamPenalty) {
    this.phraseAnchorSpamPenalty = phraseAnchorSpamPenalty;
    return this;
  }

  /**
   * Total number of observed anchors.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPhraseAnchorSpamProcessed() {
    return phraseAnchorSpamProcessed;
  }

  /**
   * Total number of observed anchors.
   * @param phraseAnchorSpamProcessed phraseAnchorSpamProcessed or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamProcessed(java.lang.Long phraseAnchorSpamProcessed) {
    this.phraseAnchorSpamProcessed = phraseAnchorSpamProcessed;
    return this;
  }

  /**
   * Average daily rate of spam anchor discovery.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhraseAnchorSpamRate() {
    return phraseAnchorSpamRate;
  }

  /**
   * Average daily rate of spam anchor discovery.
   * @param phraseAnchorSpamRate phraseAnchorSpamRate or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamRate(java.lang.Float phraseAnchorSpamRate) {
    this.phraseAnchorSpamRate = phraseAnchorSpamRate;
    return this;
  }

  /**
   * Time when anchor spam spike started with padding.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPhraseAnchorSpamStart() {
    return phraseAnchorSpamStart;
  }

  /**
   * Time when anchor spam spike started with padding.
   * @param phraseAnchorSpamStart phraseAnchorSpamStart or {@code null} for none
   */
  public IndexingDocjoinerAnchorPhraseSpamInfo setPhraseAnchorSpamStart(java.lang.Long phraseAnchorSpamStart) {
    this.phraseAnchorSpamStart = phraseAnchorSpamStart;
    return this;
  }

  @Override
  public IndexingDocjoinerAnchorPhraseSpamInfo set(String fieldName, Object value) {
    return (IndexingDocjoinerAnchorPhraseSpamInfo) super.set(fieldName, value);
  }

  @Override
  public IndexingDocjoinerAnchorPhraseSpamInfo clone() {
    return (IndexingDocjoinerAnchorPhraseSpamInfo) super.clone();
  }

}
