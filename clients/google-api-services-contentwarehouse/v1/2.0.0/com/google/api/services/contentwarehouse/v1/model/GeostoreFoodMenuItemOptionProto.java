/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Example: the choice of chicken, beef, or tofu for the Thai Basil dish. Each option would have its
 * own name, price, allergen info, etc. Note: This proto stores both food and service items despite
 * the name.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreFoodMenuItemOptionProto extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allergenAbsent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allergenPresent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer calories;

  /**
   * Ingredients of the food dish option.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFoodMenuItemOptionProtoIngredient> ingredients;

  /**
   * Photos of the food dish option.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreMediaItemProto> media;

  /**
   * The repeated name_info field here is for item options with names or descriptions listed in
   * multiple languages. When an item option has no names or descriptions, the size of the repeated
   * field name_info may be 0. For example, when a food menu item does not have multiple options,
   * the item option proto is used only to specify price and nutritional information, so it will not
   * have a name_info field. There should be at most one name_info for any given language.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostorePriceListNameInfoProto> nameInfo;

  /**
   * Nutrition facts of the food dish option. Note that it also includes calories information with a
   * finer defined unit information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePriceInfoFoodNutritionFacts nutritionFacts;

  /**
   * Size of the order, represented in units of items. (e.g. 4 "skewers”, 6 "pieces”)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFoodMenuItemOptionProtoPortionSize portionSize;

  /**
   * Methods on how the food dish option is prepared.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> preparationMethods;

  /**
   * We use PriceRangeProto here but we expect the lower_price and upper_price to be both set to
   * equal numbers because an option should have a single price. This field is not required because
   * food item prices may be variable depending on season.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePriceRangeProto price;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> restriction;

  /**
   * Number of people can be served by this food dish option.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer servesNumPeople;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spiciness;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllergenAbsent() {
    return allergenAbsent;
  }

  /**
   * @param allergenAbsent allergenAbsent or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setAllergenAbsent(java.util.List<java.lang.String> allergenAbsent) {
    this.allergenAbsent = allergenAbsent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllergenPresent() {
    return allergenPresent;
  }

  /**
   * @param allergenPresent allergenPresent or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setAllergenPresent(java.util.List<java.lang.String> allergenPresent) {
    this.allergenPresent = allergenPresent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCalories() {
    return calories;
  }

  /**
   * @param calories calories or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setCalories(java.lang.Integer calories) {
    this.calories = calories;
    return this;
  }

  /**
   * Ingredients of the food dish option.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFoodMenuItemOptionProtoIngredient> getIngredients() {
    return ingredients;
  }

  /**
   * Ingredients of the food dish option.
   * @param ingredients ingredients or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setIngredients(java.util.List<GeostoreFoodMenuItemOptionProtoIngredient> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  /**
   * Photos of the food dish option.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreMediaItemProto> getMedia() {
    return media;
  }

  /**
   * Photos of the food dish option.
   * @param media media or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setMedia(java.util.List<GeostoreMediaItemProto> media) {
    this.media = media;
    return this;
  }

  /**
   * The repeated name_info field here is for item options with names or descriptions listed in
   * multiple languages. When an item option has no names or descriptions, the size of the repeated
   * field name_info may be 0. For example, when a food menu item does not have multiple options,
   * the item option proto is used only to specify price and nutritional information, so it will not
   * have a name_info field. There should be at most one name_info for any given language.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostorePriceListNameInfoProto> getNameInfo() {
    return nameInfo;
  }

  /**
   * The repeated name_info field here is for item options with names or descriptions listed in
   * multiple languages. When an item option has no names or descriptions, the size of the repeated
   * field name_info may be 0. For example, when a food menu item does not have multiple options,
   * the item option proto is used only to specify price and nutritional information, so it will not
   * have a name_info field. There should be at most one name_info for any given language.
   * @param nameInfo nameInfo or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setNameInfo(java.util.List<GeostorePriceListNameInfoProto> nameInfo) {
    this.nameInfo = nameInfo;
    return this;
  }

  /**
   * Nutrition facts of the food dish option. Note that it also includes calories information with a
   * finer defined unit information.
   * @return value or {@code null} for none
   */
  public GeostorePriceInfoFoodNutritionFacts getNutritionFacts() {
    return nutritionFacts;
  }

  /**
   * Nutrition facts of the food dish option. Note that it also includes calories information with a
   * finer defined unit information.
   * @param nutritionFacts nutritionFacts or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setNutritionFacts(GeostorePriceInfoFoodNutritionFacts nutritionFacts) {
    this.nutritionFacts = nutritionFacts;
    return this;
  }

  /**
   * Size of the order, represented in units of items. (e.g. 4 "skewers”, 6 "pieces”)
   * @return value or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProtoPortionSize getPortionSize() {
    return portionSize;
  }

  /**
   * Size of the order, represented in units of items. (e.g. 4 "skewers”, 6 "pieces”)
   * @param portionSize portionSize or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setPortionSize(GeostoreFoodMenuItemOptionProtoPortionSize portionSize) {
    this.portionSize = portionSize;
    return this;
  }

  /**
   * Methods on how the food dish option is prepared.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPreparationMethods() {
    return preparationMethods;
  }

  /**
   * Methods on how the food dish option is prepared.
   * @param preparationMethods preparationMethods or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setPreparationMethods(java.util.List<java.lang.String> preparationMethods) {
    this.preparationMethods = preparationMethods;
    return this;
  }

  /**
   * We use PriceRangeProto here but we expect the lower_price and upper_price to be both set to
   * equal numbers because an option should have a single price. This field is not required because
   * food item prices may be variable depending on season.
   * @return value or {@code null} for none
   */
  public GeostorePriceRangeProto getPrice() {
    return price;
  }

  /**
   * We use PriceRangeProto here but we expect the lower_price and upper_price to be both set to
   * equal numbers because an option should have a single price. This field is not required because
   * food item prices may be variable depending on season.
   * @param price price or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setPrice(GeostorePriceRangeProto price) {
    this.price = price;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRestriction() {
    return restriction;
  }

  /**
   * @param restriction restriction or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setRestriction(java.util.List<java.lang.String> restriction) {
    this.restriction = restriction;
    return this;
  }

  /**
   * Number of people can be served by this food dish option.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getServesNumPeople() {
    return servesNumPeople;
  }

  /**
   * Number of people can be served by this food dish option.
   * @param servesNumPeople servesNumPeople or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setServesNumPeople(java.lang.Integer servesNumPeople) {
    this.servesNumPeople = servesNumPeople;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSpiciness() {
    return spiciness;
  }

  /**
   * @param spiciness spiciness or {@code null} for none
   */
  public GeostoreFoodMenuItemOptionProto setSpiciness(java.lang.String spiciness) {
    this.spiciness = spiciness;
    return this;
  }

  @Override
  public GeostoreFoodMenuItemOptionProto set(String fieldName, Object value) {
    return (GeostoreFoodMenuItemOptionProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreFoodMenuItemOptionProto clone() {
    return (GeostoreFoodMenuItemOptionProto) super.clone();
  }

}
