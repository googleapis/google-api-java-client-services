/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1.model;

/**
 * A query for entities.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Query extends com.google.api.client.json.GenericJson {

  /**
   * The properties to make distinct. The query results will contain the first result for each
   * distinct combination of values for the given properties (if empty, all results are returned).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PropertyReference> distinctOn;

  static {
    // hack to force ProGuard to consider PropertyReference used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(PropertyReference.class);
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String endCursor;

  /**
   * The filter to apply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Filter filter;

  /**
   * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be
   * specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<KindExpression> kind;

  static {
    // hack to force ProGuard to consider KindExpression used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(KindExpression.class);
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Optional.
   * Unspecified is interpreted as no limit. Must be >= 0 if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * The number of results to skip. Applies before limit, but after all other constraints. Optional.
   * Must be >= 0 if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer offset;

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PropertyOrder> order;

  static {
    // hack to force ProGuard to consider PropertyOrder used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(PropertyOrder.class);
  }

  /**
   * The projection to return. Defaults to returning all properties.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Projection> projection;

  static {
    // hack to force ProGuard to consider Projection used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Projection.class);
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String startCursor;

  /**
   * The properties to make distinct. The query results will contain the first result for each
   * distinct combination of values for the given properties (if empty, all results are returned).
   * @return value or {@code null} for none
   */
  public java.util.List<PropertyReference> getDistinctOn() {
    return distinctOn;
  }

  /**
   * The properties to make distinct. The query results will contain the first result for each
   * distinct combination of values for the given properties (if empty, all results are returned).
   * @param distinctOn distinctOn or {@code null} for none
   */
  public Query setDistinctOn(java.util.List<PropertyReference> distinctOn) {
    this.distinctOn = distinctOn;
    return this;
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #decodeEndCursor()
   * @return value or {@code null} for none
   */
  public java.lang.String getEndCursor() {
    return endCursor;
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #getEndCursor()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEndCursor() {
    return com.google.api.client.util.Base64.decodeBase64(endCursor);
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #encodeEndCursor()
   * @param endCursor endCursor or {@code null} for none
   */
  public Query setEndCursor(java.lang.String endCursor) {
    this.endCursor = endCursor;
    return this;
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #setEndCursor()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Query encodeEndCursor(byte[] endCursor) {
    this.endCursor = com.google.api.client.util.Base64.encodeBase64URLSafeString(endCursor);
    return this;
  }

  /**
   * The filter to apply.
   * @return value or {@code null} for none
   */
  public Filter getFilter() {
    return filter;
  }

  /**
   * The filter to apply.
   * @param filter filter or {@code null} for none
   */
  public Query setFilter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be
   * specified.
   * @return value or {@code null} for none
   */
  public java.util.List<KindExpression> getKind() {
    return kind;
  }

  /**
   * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be
   * specified.
   * @param kind kind or {@code null} for none
   */
  public Query setKind(java.util.List<KindExpression> kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Optional.
   * Unspecified is interpreted as no limit. Must be >= 0 if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Optional.
   * Unspecified is interpreted as no limit. Must be >= 0 if specified.
   * @param limit limit or {@code null} for none
   */
  public Query setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of results to skip. Applies before limit, but after all other constraints. Optional.
   * Must be >= 0 if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * The number of results to skip. Applies before limit, but after all other constraints. Optional.
   * Must be >= 0 if specified.
   * @param offset offset or {@code null} for none
   */
  public Query setOffset(java.lang.Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   * @return value or {@code null} for none
   */
  public java.util.List<PropertyOrder> getOrder() {
    return order;
  }

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   * @param order order or {@code null} for none
   */
  public Query setOrder(java.util.List<PropertyOrder> order) {
    this.order = order;
    return this;
  }

  /**
   * The projection to return. Defaults to returning all properties.
   * @return value or {@code null} for none
   */
  public java.util.List<Projection> getProjection() {
    return projection;
  }

  /**
   * The projection to return. Defaults to returning all properties.
   * @param projection projection or {@code null} for none
   */
  public Query setProjection(java.util.List<Projection> projection) {
    this.projection = projection;
    return this;
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #decodeStartCursor()
   * @return value or {@code null} for none
   */
  public java.lang.String getStartCursor() {
    return startCursor;
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #getStartCursor()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeStartCursor() {
    return com.google.api.client.util.Base64.decodeBase64(startCursor);
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #encodeStartCursor()
   * @param startCursor startCursor or {@code null} for none
   */
  public Query setStartCursor(java.lang.String startCursor) {
    this.startCursor = startCursor;
    return this;
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @see #setStartCursor()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Query encodeStartCursor(byte[] startCursor) {
    this.startCursor = com.google.api.client.util.Base64.encodeBase64URLSafeString(startCursor);
    return this;
  }

  @Override
  public Query set(String fieldName, Object value) {
    return (Query) super.set(fieldName, value);
  }

  @Override
  public Query clone() {
    return (Query) super.clone();
  }

}
