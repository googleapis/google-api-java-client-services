/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigquery.model;

/**
 * Configuration for BigLake managed tables.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BigLakeConfiguration extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The connection specifying the credentials to be used to read and write to external
   * storage, such as Cloud Storage. The connection_id can have the form
   * `{project}.{location}.{connection_id}` or
   * `projects/{project}/locations/{location}/connections/{connection_id}".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectionId;

  /**
   * Optional. The file format the table data is stored in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fileFormat;

  /**
   * Optional. The fully qualified location prefix of the external folder where table data is
   * stored. The '*' wildcard character is not allowed. The URI should be in the format
   * `gs://bucket/path_to_table/`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String storageUri;

  /**
   * Optional. The table format the metadata only snapshots are stored in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tableFormat;

  /**
   * Optional. The connection specifying the credentials to be used to read and write to external
   * storage, such as Cloud Storage. The connection_id can have the form
   * `{project}.{location}.{connection_id}` or
   * `projects/{project}/locations/{location}/connections/{connection_id}".
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectionId() {
    return connectionId;
  }

  /**
   * Optional. The connection specifying the credentials to be used to read and write to external
   * storage, such as Cloud Storage. The connection_id can have the form
   * `{project}.{location}.{connection_id}` or
   * `projects/{project}/locations/{location}/connections/{connection_id}".
   * @param connectionId connectionId or {@code null} for none
   */
  public BigLakeConfiguration setConnectionId(java.lang.String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Optional. The file format the table data is stored in.
   * @return value or {@code null} for none
   */
  public java.lang.String getFileFormat() {
    return fileFormat;
  }

  /**
   * Optional. The file format the table data is stored in.
   * @param fileFormat fileFormat or {@code null} for none
   */
  public BigLakeConfiguration setFileFormat(java.lang.String fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * Optional. The fully qualified location prefix of the external folder where table data is
   * stored. The '*' wildcard character is not allowed. The URI should be in the format
   * `gs://bucket/path_to_table/`
   * @return value or {@code null} for none
   */
  public java.lang.String getStorageUri() {
    return storageUri;
  }

  /**
   * Optional. The fully qualified location prefix of the external folder where table data is
   * stored. The '*' wildcard character is not allowed. The URI should be in the format
   * `gs://bucket/path_to_table/`
   * @param storageUri storageUri or {@code null} for none
   */
  public BigLakeConfiguration setStorageUri(java.lang.String storageUri) {
    this.storageUri = storageUri;
    return this;
  }

  /**
   * Optional. The table format the metadata only snapshots are stored in.
   * @return value or {@code null} for none
   */
  public java.lang.String getTableFormat() {
    return tableFormat;
  }

  /**
   * Optional. The table format the metadata only snapshots are stored in.
   * @param tableFormat tableFormat or {@code null} for none
   */
  public BigLakeConfiguration setTableFormat(java.lang.String tableFormat) {
    this.tableFormat = tableFormat;
    return this;
  }

  @Override
  public BigLakeConfiguration set(String fieldName, Object value) {
    return (BigLakeConfiguration) super.set(fieldName, value);
  }

  @Override
  public BigLakeConfiguration clone() {
    return (BigLakeConfiguration) super.clone();
  }

}
