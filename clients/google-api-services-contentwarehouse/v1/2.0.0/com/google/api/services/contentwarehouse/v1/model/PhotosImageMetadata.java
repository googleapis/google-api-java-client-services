/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next tag value: 381.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhotosImageMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDBlendingtype")
  private java.lang.String dEPRECATEDBlendingtype;

  /**
   * This field was originally marked incorrectly as optional (rather than repeated). In order to
   * fix it, the first field has been marked as deprecated and replaced with a field with a new name
   * and tag number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDGpstimestamp")
  private java.lang.Float dEPRECATEDGpstimestamp;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDIscolor")
  private java.lang.Integer dEPRECATEDIscolor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDLargestvalidinteriorrectheight")
  private java.lang.Integer dEPRECATEDLargestvalidinteriorrectheight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDLargestvalidinteriorrectleft")
  private java.lang.Integer dEPRECATEDLargestvalidinteriorrectleft;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDLargestvalidinteriorrecttop")
  private java.lang.Integer dEPRECATEDLargestvalidinteriorrecttop;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDLargestvalidinteriorrectwidth")
  private java.lang.Integer dEPRECATEDLargestvalidinteriorrectwidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDProcess")
  private java.lang.Integer dEPRECATEDProcess;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String actionadvised;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String addlmodelinfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> advisory;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double altitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosAnimationMetadata animationMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float aperturefnumber;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float aperturevalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> artworkorobject;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String audioduration;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String audiooutcue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String audiosamplingrate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String audiosamplingresolution;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String audiotype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String author;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorposition;

  /**
   * Indicates whether auto-enhance has been applied to the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoenhance;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String baseurl;

  /**
   * The number of bits per pixel used to express a color. Most images have 8-bit depth and
   * Photos/thumbnailer currently do not support more than 8 bits (except RAW).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer bitDepth;

  /**
   * Start of reflected fields. These do not duplicate the above fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer bitspersample;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float brightnessvalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String burstuuid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cameraid;

  /**
   * Exif camera make
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cameramake;

  /**
   * Exif camera model
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cameramodel;

  /**
   * Caption embedded in IPTC
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String caption;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String captionwriter;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String capturesoftware;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float ccdwidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer celllength;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cellwidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificate;

  /**
   * A typed representation that translates the values from ycbcrsubsampling.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String chromasubsampling;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciadrcity;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciadrctry;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> ciadrextadr;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciadrpcode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciadrregion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciemailwork;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String citelwork;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String city;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ciurlwork;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer colormap;

  /**
   * Indicates whether or not the source image had an embedded color profile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean colorprofile;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer colorspace;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float compressedbitsperpixel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer compressionlevel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contact;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> contentlocationcode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> contentlocationname;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer contrast;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> contributor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String copyrightnotice;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String country;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countrycode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String coverage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String createdate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String credits;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer croppedareaimageheightpixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer croppedareaimagewidthpixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer croppedarealeftpixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer croppedareatoppixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer customrendered;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> cvterm;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String date;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datecreated;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datesent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datetime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datetimedigitized;

  /**
   * 0 = no daylight savings, 1 = daylight savings enabled. Note that this field only represents
   * whether the setting in the camera was turned on or off. It must not be used to modify the
   * timestamp of the photo. That is, the capture time is already completely determined by
   * exif_time, timezoneoffset and timezoneminutes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> daylightsavings;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> destination;

  /**
   * +/- 90 inclusive
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double destinationLatitude;

  /**
   * +/- 180 inclusive
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double destinationLongitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digimageguid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digitalsourcefiletype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digitalsourcetype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float digitalzoomratio;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float distance;

  /**
   * DynamicDepth (go/dynamic-depth) metadata is described in the metadata of sub-images in the
   * container. The presence of this field can be used to determine that an image is in the dynamic
   * depth format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosDynamicDepthMetadata dynamicDepthMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String editorialupdate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String editstatus;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String envelopenumber;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String envelopepriority;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String event;

  /**
   * 4C metadata (caption, copyright, creator, credit) specific to each of the three metadata
   * segments (EXIF, XMP, IPTC). These are used to keep separate the 4C data from each segment so
   * that we can properly preserve the per-segment 4C data on write (when PreserveLevel is set
   * appropriately).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosFourCMetadata exif4c;

  /**
   * Timestamp embedded in the image. The value comes from the first valid date-time field extracted
   * from the metadata in the order: 1) datecreated (ie. DateTimeOriginal) 2) datetimedigitized (ie.
   * DateTimeDigitized) 3) datetime (ie. DateTime or last modified date) The type of this field is
   * equivalent to a time_t (ie. number of seconds since the epoch - 00:00 hours, Jan 1, 1970)
   * except that it is an int64 rather than an int.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long exifTime;

  /**
   * The exif_time_utc field is a UTC-based alternative to the exif_time field, which is in local
   * time, rather than UTC. If they were not separate, clients would be unable to distinguish if the
   * source were UTC- or local-based.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long exifTimeUtc;

  /**
   * The exif_time_utc_source indicates the source from which the exif_time_utc field is calculated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String exifTimeUtcSource;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String expirationdate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String expirationtime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float exposurebias;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float exposureindex;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean exposurelockused;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer exposuremode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer exposureprogram;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float exposuretime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer extrasamples;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fillorder;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firmware;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firstphotodate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fixtureidentifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float flashcompensation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float flashenergy;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer flashreturn;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer flashused;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float focallength;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer focallengthin35mmfilm;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float focalplaneunits;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float focalplanexres;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String format;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long freebytecounts;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer freeoffsets;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fullpanoheightpixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fullpanowidthpixels;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean function;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gaincontrol;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gaudiomime;

  /**
   * A unique String. The property should be present and identical for all images that make up a
   * burst. It should be unique across devices (UUID recommended). Unlike GCreations:CameraBurstId,
   * we should use images with this property to create auto collages and animations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcameraburstid;

  /**
   * A value of 1 indicates that this was the primary (“best shot”) at capture time. Within Photos
   * we should only treat this image as the best shot if the user hasn’t made an explicit choice.
   * Defining the initial primary allows consistency between OEMs, Photos clients, and the Photos
   * backend. This value is optional, cameras are not required to set it on any photo in a burst.
   * Clients will default to the 0th frame, but may run an algorithm to pick a better default.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameraburstprimary;

  /**
   * The possible values are: “Animation”, “Collage”, “Pano”, “Movies”. Photos will avoid creating
   * the listed types using the containing image or video. The property is optional. The property
   * can be included multiple times to disable creation of multiple different types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> gcameradisableautocreation;

  /**
   * The following XMP metadata are used specifically for MicroVideo. More information about
   * MicroVideo format can be found at go/photos-microvideo-format A value of 1 indicates that this
   * file was a MicroVideo at capture time. Otherwise, this is not a MicroVideo (not set or 0).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramicrovideo;

  /**
   * The offset in bytes from the end of the file to the point where the appended mp4 begins
   * (equivalent to the length of the compressed mp4). This field might be provided in the original
   * MicroVideo from client, but it might become invalid when the image component is edited, so it
   * is expected that the thumbnailer will validate it and find the correct value (by scanning
   * through the JPEG) if it is invalid. In other words, only a valid offset should be returned by
   * thumbnailer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramicrovideooffset;

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramicrovideopresentationtimestampus;

  /**
   * Indicates the file format version of the MicroVideo (initially 1).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramicrovideoversion;

  /**
   * An indication that this item should be treated as a Motion Photo. 0 -> Not Motion Photo, 1 ->
   * Motion Photo, everything else is undefined per the spec. If it's a motion photo, the previous
   * gcamera fields should be ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramotionphoto;

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramotionphotopresentationtimestampus;

  /**
   * Indicates the Motion Photo version of the spec (initially 1).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gcameramotionphotoversion;

  /**
   * Camera creations metadata. The opaque id string created by the OEM. For bursts, this field
   * should not be present. Instead, the two properties below will allow Photos to identify and
   * provide special treatment for bursts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcameraspecialtypeid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcreationscameraburstid;

  /**
   * String representation of creation type. Should be one of {"GCameraCollage", "GCameraAnimation",
   * "GCameraGroupSmiles", "GPhotosCollage", "GPhotosAnimation"}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcreationstype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosGDepthMetadata gdepthMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gimagemime;

  /**
   * This is in UTC time. Format is YYYY:mm:dd.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsdatestamp;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsdestbearing;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsdestbearingref;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsdestdistance;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsdestdistanceref;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsdestlatitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsdestlatituderef;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsdestlongitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsdestlongituderef;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gpsdifferential;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsdop;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsimgdirection;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsimgdirectionref;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsmapdatum;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsmeasuremode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpssatellites;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpsspeed;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsspeedref;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpsstatus;

  /**
   * This is in UTC Time. Contains three floats: hour, minute and second. Supports subsecond
   * resolution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> gpstime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gpstrack;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gpstrackref;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer grayresponsecurve;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer grayresponseunit;

  /**
   * The image has an alpha channel (potential transparency). If the image is decoded, this will be
   * updated to indicate whether there is any active transparency. Formats supporting alpha: png,
   * webp, gif, heif.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasAlpha;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String headline;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostcomputer;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> identifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imagenumber;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageorientation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imagetype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float initialhorizontalfovdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float initialverticalfovdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer initialviewheadingdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer initialviewpitchdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer initialviewrolldegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String instructions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String intellectualgenre;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String interoperabilityindex;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosFourCMetadata iptc4c;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String iptclastedited;

  /**
   * The image is a Multi-Picture Object.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ismpformat;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer isoequivalent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> keyword;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> language;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageidentifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lastphotodate;

  /**
   * GPS Info: +/- 90 inclusive
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lens;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lensid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lensinfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lightsource;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String location;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locationshown;

  /**
   * +/- 180 inclusive
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double longitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean marked;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float maxaperturevalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxavailheight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxavailwidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxsamplevalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadatadate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer meteringmode;

  /**
   * This is similar to gcameramicrovideooffset, except it stores the unverified value that was
   * provided in the motion photo file. This field is not part of the XMP or spec. It is used to
   * ensure we preserve data from the original file when offset is modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer microvideooriginaloffset;

  /**
   * Mime type of image
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mimeType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minormodelagedisclosure;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minsamplevalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> modelage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> modelreleaseid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modelreleasestatus;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modifydate;

  /**
   * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for
   * reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more
   * details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String motionphotovideodataboxheader;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nickname;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> objectattributereference;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String objectcycle;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String objecttypereference;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String offsettime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String offsettimedigitized;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String offsettimeoriginal;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> organisationinimagecode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> organisationinimagename;

  /**
   * Exif camera orientation. "1" means "no rotation".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer orientation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originatingprogram;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> owner;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ownername;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosPanoramaMetadata panoramaMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> personinimage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer photometricinterpretation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer planarconfiguration;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float poseheadingdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float posepitchdegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float poserolldegrees;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float primarychromaticities;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> productid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String programversion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectiontype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> propertyreleaseid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String propertyreleasestatus;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> publisher;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rating;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean redeyemode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float referenceblackwhite;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> referencedate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> referencenumber;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> referenceservice;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String relatedimagefileformat;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long relatedimageheight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long relatedimagewidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String relatedsoundfile;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> relation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String releasedate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String releasetime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer resolutionunit;

  /**
   * being returned to caller Use values defined in "MIME_TYPE" This field is deprecated. Rotation
   * is now accomplished via ImageInfo.exif_orientation and ImageInfo.edit_list. Number of degrees
   * (0, 90, 180,
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rotate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long rowsperstrip;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer samplesperpixel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer saturation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scene;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scenecapturetype;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sensingmethod;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float sensorheight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float sensorwidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serialnumber;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceidentifier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sharpness;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float shutterspeedvalue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String software;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourcephotoscount;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spectralsensitivity;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stitchingsoftware;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long stripbytecounts;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long stripoffsets;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer subjectarea;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> subjectcode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer subjectdistancerange;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer subjectlocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> subjectreference;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sublocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subsectime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subsectimedigitized;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subsectimeoriginal;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supplementalcategory;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thresholding;

  /**
   * The build CL for the version of thumbnailer that built this image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thumbnailerBuildCl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timesent;

  /**
   * Remaining minutes of offset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> timezoneminutes;

  /**
   * The elements in the timezone and daylight savings field arrays correspond to the following
   * date/time fields: 0) datecreated (ie. DateTimeOriginal) 1) datetime (ie. DateTime or last
   * modified date) 2) datetimedigitized (ie. DateTimeDigitized) If the field does not exist, then
   * there is no valid time zone information for that date/time field. Offset in hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> timezoneoffset;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String title;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transmissionreference;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> type;

  /**
   * For unique hash:
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uniqueid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uno;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String urgency;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String usageterms;

  /**
   * GPano-related fields. A handful of these have been deprecated due to a change in the spec since
   * its initial design.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean usepanoramaviewer;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String version;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webstatement;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer whitebalance;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float whitepoint;

  /**
   * width and height are before any rotation (including EXIF orientation).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosFourCMetadata xmp4c;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float xresolution;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float ycbcrcoefficients;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ycbcrpositioning;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ycbcrsubsampling;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float yresolution;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDEPRECATEDBlendingtype() {
    return dEPRECATEDBlendingtype;
  }

  /**
   * @param dEPRECATEDBlendingtype dEPRECATEDBlendingtype or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDBlendingtype(java.lang.String dEPRECATEDBlendingtype) {
    this.dEPRECATEDBlendingtype = dEPRECATEDBlendingtype;
    return this;
  }

  /**
   * This field was originally marked incorrectly as optional (rather than repeated). In order to
   * fix it, the first field has been marked as deprecated and replaced with a field with a new name
   * and tag number.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDEPRECATEDGpstimestamp() {
    return dEPRECATEDGpstimestamp;
  }

  /**
   * This field was originally marked incorrectly as optional (rather than repeated). In order to
   * fix it, the first field has been marked as deprecated and replaced with a field with a new name
   * and tag number.
   * @param dEPRECATEDGpstimestamp dEPRECATEDGpstimestamp or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDGpstimestamp(java.lang.Float dEPRECATEDGpstimestamp) {
    this.dEPRECATEDGpstimestamp = dEPRECATEDGpstimestamp;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDIscolor() {
    return dEPRECATEDIscolor;
  }

  /**
   * @param dEPRECATEDIscolor dEPRECATEDIscolor or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDIscolor(java.lang.Integer dEPRECATEDIscolor) {
    this.dEPRECATEDIscolor = dEPRECATEDIscolor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDLargestvalidinteriorrectheight() {
    return dEPRECATEDLargestvalidinteriorrectheight;
  }

  /**
   * @param dEPRECATEDLargestvalidinteriorrectheight dEPRECATEDLargestvalidinteriorrectheight or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDLargestvalidinteriorrectheight(java.lang.Integer dEPRECATEDLargestvalidinteriorrectheight) {
    this.dEPRECATEDLargestvalidinteriorrectheight = dEPRECATEDLargestvalidinteriorrectheight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDLargestvalidinteriorrectleft() {
    return dEPRECATEDLargestvalidinteriorrectleft;
  }

  /**
   * @param dEPRECATEDLargestvalidinteriorrectleft dEPRECATEDLargestvalidinteriorrectleft or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDLargestvalidinteriorrectleft(java.lang.Integer dEPRECATEDLargestvalidinteriorrectleft) {
    this.dEPRECATEDLargestvalidinteriorrectleft = dEPRECATEDLargestvalidinteriorrectleft;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDLargestvalidinteriorrecttop() {
    return dEPRECATEDLargestvalidinteriorrecttop;
  }

  /**
   * @param dEPRECATEDLargestvalidinteriorrecttop dEPRECATEDLargestvalidinteriorrecttop or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDLargestvalidinteriorrecttop(java.lang.Integer dEPRECATEDLargestvalidinteriorrecttop) {
    this.dEPRECATEDLargestvalidinteriorrecttop = dEPRECATEDLargestvalidinteriorrecttop;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDLargestvalidinteriorrectwidth() {
    return dEPRECATEDLargestvalidinteriorrectwidth;
  }

  /**
   * @param dEPRECATEDLargestvalidinteriorrectwidth dEPRECATEDLargestvalidinteriorrectwidth or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDLargestvalidinteriorrectwidth(java.lang.Integer dEPRECATEDLargestvalidinteriorrectwidth) {
    this.dEPRECATEDLargestvalidinteriorrectwidth = dEPRECATEDLargestvalidinteriorrectwidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDProcess() {
    return dEPRECATEDProcess;
  }

  /**
   * @param dEPRECATEDProcess dEPRECATEDProcess or {@code null} for none
   */
  public PhotosImageMetadata setDEPRECATEDProcess(java.lang.Integer dEPRECATEDProcess) {
    this.dEPRECATEDProcess = dEPRECATEDProcess;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getActionadvised() {
    return actionadvised;
  }

  /**
   * @param actionadvised actionadvised or {@code null} for none
   */
  public PhotosImageMetadata setActionadvised(java.lang.String actionadvised) {
    this.actionadvised = actionadvised;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAddlmodelinfo() {
    return addlmodelinfo;
  }

  /**
   * @param addlmodelinfo addlmodelinfo or {@code null} for none
   */
  public PhotosImageMetadata setAddlmodelinfo(java.lang.String addlmodelinfo) {
    this.addlmodelinfo = addlmodelinfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAdvisory() {
    return advisory;
  }

  /**
   * @param advisory advisory or {@code null} for none
   */
  public PhotosImageMetadata setAdvisory(java.util.List<java.lang.String> advisory) {
    this.advisory = advisory;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getAltitude() {
    return altitude;
  }

  /**
   * @param altitude altitude or {@code null} for none
   */
  public PhotosImageMetadata setAltitude(java.lang.Double altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosAnimationMetadata getAnimationMetadata() {
    return animationMetadata;
  }

  /**
   * @param animationMetadata animationMetadata or {@code null} for none
   */
  public PhotosImageMetadata setAnimationMetadata(PhotosAnimationMetadata animationMetadata) {
    this.animationMetadata = animationMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAperturefnumber() {
    return aperturefnumber;
  }

  /**
   * @param aperturefnumber aperturefnumber or {@code null} for none
   */
  public PhotosImageMetadata setAperturefnumber(java.lang.Float aperturefnumber) {
    this.aperturefnumber = aperturefnumber;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAperturevalue() {
    return aperturevalue;
  }

  /**
   * @param aperturevalue aperturevalue or {@code null} for none
   */
  public PhotosImageMetadata setAperturevalue(java.lang.Float aperturevalue) {
    this.aperturevalue = aperturevalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArtworkorobject() {
    return artworkorobject;
  }

  /**
   * @param artworkorobject artworkorobject or {@code null} for none
   */
  public PhotosImageMetadata setArtworkorobject(java.util.List<java.lang.String> artworkorobject) {
    this.artworkorobject = artworkorobject;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAudioduration() {
    return audioduration;
  }

  /**
   * @param audioduration audioduration or {@code null} for none
   */
  public PhotosImageMetadata setAudioduration(java.lang.String audioduration) {
    this.audioduration = audioduration;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAudiooutcue() {
    return audiooutcue;
  }

  /**
   * @param audiooutcue audiooutcue or {@code null} for none
   */
  public PhotosImageMetadata setAudiooutcue(java.lang.String audiooutcue) {
    this.audiooutcue = audiooutcue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAudiosamplingrate() {
    return audiosamplingrate;
  }

  /**
   * @param audiosamplingrate audiosamplingrate or {@code null} for none
   */
  public PhotosImageMetadata setAudiosamplingrate(java.lang.String audiosamplingrate) {
    this.audiosamplingrate = audiosamplingrate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAudiosamplingresolution() {
    return audiosamplingresolution;
  }

  /**
   * @param audiosamplingresolution audiosamplingresolution or {@code null} for none
   */
  public PhotosImageMetadata setAudiosamplingresolution(java.lang.String audiosamplingresolution) {
    this.audiosamplingresolution = audiosamplingresolution;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAudiotype() {
    return audiotype;
  }

  /**
   * @param audiotype audiotype or {@code null} for none
   */
  public PhotosImageMetadata setAudiotype(java.lang.String audiotype) {
    this.audiotype = audiotype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthor() {
    return author;
  }

  /**
   * @param author author or {@code null} for none
   */
  public PhotosImageMetadata setAuthor(java.lang.String author) {
    this.author = author;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorposition() {
    return authorposition;
  }

  /**
   * @param authorposition authorposition or {@code null} for none
   */
  public PhotosImageMetadata setAuthorposition(java.lang.String authorposition) {
    this.authorposition = authorposition;
    return this;
  }

  /**
   * Indicates whether auto-enhance has been applied to the image.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoenhance() {
    return autoenhance;
  }

  /**
   * Indicates whether auto-enhance has been applied to the image.
   * @param autoenhance autoenhance or {@code null} for none
   */
  public PhotosImageMetadata setAutoenhance(java.lang.Boolean autoenhance) {
    this.autoenhance = autoenhance;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getBaseurl() {
    return baseurl;
  }

  /**
   * @param baseurl baseurl or {@code null} for none
   */
  public PhotosImageMetadata setBaseurl(java.lang.String baseurl) {
    this.baseurl = baseurl;
    return this;
  }

  /**
   * The number of bits per pixel used to express a color. Most images have 8-bit depth and
   * Photos/thumbnailer currently do not support more than 8 bits (except RAW).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBitDepth() {
    return bitDepth;
  }

  /**
   * The number of bits per pixel used to express a color. Most images have 8-bit depth and
   * Photos/thumbnailer currently do not support more than 8 bits (except RAW).
   * @param bitDepth bitDepth or {@code null} for none
   */
  public PhotosImageMetadata setBitDepth(java.lang.Integer bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Start of reflected fields. These do not duplicate the above fields.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBitspersample() {
    return bitspersample;
  }

  /**
   * Start of reflected fields. These do not duplicate the above fields.
   * @param bitspersample bitspersample or {@code null} for none
   */
  public PhotosImageMetadata setBitspersample(java.lang.Integer bitspersample) {
    this.bitspersample = bitspersample;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBrightnessvalue() {
    return brightnessvalue;
  }

  /**
   * @param brightnessvalue brightnessvalue or {@code null} for none
   */
  public PhotosImageMetadata setBrightnessvalue(java.lang.Float brightnessvalue) {
    this.brightnessvalue = brightnessvalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getBurstuuid() {
    return burstuuid;
  }

  /**
   * @param burstuuid burstuuid or {@code null} for none
   */
  public PhotosImageMetadata setBurstuuid(java.lang.String burstuuid) {
    this.burstuuid = burstuuid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCameraid() {
    return cameraid;
  }

  /**
   * @param cameraid cameraid or {@code null} for none
   */
  public PhotosImageMetadata setCameraid(java.lang.String cameraid) {
    this.cameraid = cameraid;
    return this;
  }

  /**
   * Exif camera make
   * @return value or {@code null} for none
   */
  public java.lang.String getCameramake() {
    return cameramake;
  }

  /**
   * Exif camera make
   * @param cameramake cameramake or {@code null} for none
   */
  public PhotosImageMetadata setCameramake(java.lang.String cameramake) {
    this.cameramake = cameramake;
    return this;
  }

  /**
   * Exif camera model
   * @return value or {@code null} for none
   */
  public java.lang.String getCameramodel() {
    return cameramodel;
  }

  /**
   * Exif camera model
   * @param cameramodel cameramodel or {@code null} for none
   */
  public PhotosImageMetadata setCameramodel(java.lang.String cameramodel) {
    this.cameramodel = cameramodel;
    return this;
  }

  /**
   * Caption embedded in IPTC
   * @return value or {@code null} for none
   */
  public java.lang.String getCaption() {
    return caption;
  }

  /**
   * Caption embedded in IPTC
   * @param caption caption or {@code null} for none
   */
  public PhotosImageMetadata setCaption(java.lang.String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCaptionwriter() {
    return captionwriter;
  }

  /**
   * @param captionwriter captionwriter or {@code null} for none
   */
  public PhotosImageMetadata setCaptionwriter(java.lang.String captionwriter) {
    this.captionwriter = captionwriter;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCapturesoftware() {
    return capturesoftware;
  }

  /**
   * @param capturesoftware capturesoftware or {@code null} for none
   */
  public PhotosImageMetadata setCapturesoftware(java.lang.String capturesoftware) {
    this.capturesoftware = capturesoftware;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * @param category category or {@code null} for none
   */
  public PhotosImageMetadata setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getCcdwidth() {
    return ccdwidth;
  }

  /**
   * @param ccdwidth ccdwidth or {@code null} for none
   */
  public PhotosImageMetadata setCcdwidth(java.lang.Float ccdwidth) {
    this.ccdwidth = ccdwidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCelllength() {
    return celllength;
  }

  /**
   * @param celllength celllength or {@code null} for none
   */
  public PhotosImageMetadata setCelllength(java.lang.Integer celllength) {
    this.celllength = celllength;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCellwidth() {
    return cellwidth;
  }

  /**
   * @param cellwidth cellwidth or {@code null} for none
   */
  public PhotosImageMetadata setCellwidth(java.lang.Integer cellwidth) {
    this.cellwidth = cellwidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificate() {
    return certificate;
  }

  /**
   * @param certificate certificate or {@code null} for none
   */
  public PhotosImageMetadata setCertificate(java.lang.String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * A typed representation that translates the values from ycbcrsubsampling.
   * @return value or {@code null} for none
   */
  public java.lang.String getChromasubsampling() {
    return chromasubsampling;
  }

  /**
   * A typed representation that translates the values from ycbcrsubsampling.
   * @param chromasubsampling chromasubsampling or {@code null} for none
   */
  public PhotosImageMetadata setChromasubsampling(java.lang.String chromasubsampling) {
    this.chromasubsampling = chromasubsampling;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiadrcity() {
    return ciadrcity;
  }

  /**
   * @param ciadrcity ciadrcity or {@code null} for none
   */
  public PhotosImageMetadata setCiadrcity(java.lang.String ciadrcity) {
    this.ciadrcity = ciadrcity;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiadrctry() {
    return ciadrctry;
  }

  /**
   * @param ciadrctry ciadrctry or {@code null} for none
   */
  public PhotosImageMetadata setCiadrctry(java.lang.String ciadrctry) {
    this.ciadrctry = ciadrctry;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCiadrextadr() {
    return ciadrextadr;
  }

  /**
   * @param ciadrextadr ciadrextadr or {@code null} for none
   */
  public PhotosImageMetadata setCiadrextadr(java.util.List<java.lang.String> ciadrextadr) {
    this.ciadrextadr = ciadrextadr;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiadrpcode() {
    return ciadrpcode;
  }

  /**
   * @param ciadrpcode ciadrpcode or {@code null} for none
   */
  public PhotosImageMetadata setCiadrpcode(java.lang.String ciadrpcode) {
    this.ciadrpcode = ciadrpcode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiadrregion() {
    return ciadrregion;
  }

  /**
   * @param ciadrregion ciadrregion or {@code null} for none
   */
  public PhotosImageMetadata setCiadrregion(java.lang.String ciadrregion) {
    this.ciadrregion = ciadrregion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiemailwork() {
    return ciemailwork;
  }

  /**
   * @param ciemailwork ciemailwork or {@code null} for none
   */
  public PhotosImageMetadata setCiemailwork(java.lang.String ciemailwork) {
    this.ciemailwork = ciemailwork;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCitelwork() {
    return citelwork;
  }

  /**
   * @param citelwork citelwork or {@code null} for none
   */
  public PhotosImageMetadata setCitelwork(java.lang.String citelwork) {
    this.citelwork = citelwork;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCity() {
    return city;
  }

  /**
   * @param city city or {@code null} for none
   */
  public PhotosImageMetadata setCity(java.lang.String city) {
    this.city = city;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCiurlwork() {
    return ciurlwork;
  }

  /**
   * @param ciurlwork ciurlwork or {@code null} for none
   */
  public PhotosImageMetadata setCiurlwork(java.lang.String ciurlwork) {
    this.ciurlwork = ciurlwork;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColormap() {
    return colormap;
  }

  /**
   * @param colormap colormap or {@code null} for none
   */
  public PhotosImageMetadata setColormap(java.lang.Integer colormap) {
    this.colormap = colormap;
    return this;
  }

  /**
   * Indicates whether or not the source image had an embedded color profile.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getColorprofile() {
    return colorprofile;
  }

  /**
   * Indicates whether or not the source image had an embedded color profile.
   * @param colorprofile colorprofile or {@code null} for none
   */
  public PhotosImageMetadata setColorprofile(java.lang.Boolean colorprofile) {
    this.colorprofile = colorprofile;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColorspace() {
    return colorspace;
  }

  /**
   * @param colorspace colorspace or {@code null} for none
   */
  public PhotosImageMetadata setColorspace(java.lang.Integer colorspace) {
    this.colorspace = colorspace;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getCompressedbitsperpixel() {
    return compressedbitsperpixel;
  }

  /**
   * @param compressedbitsperpixel compressedbitsperpixel or {@code null} for none
   */
  public PhotosImageMetadata setCompressedbitsperpixel(java.lang.Float compressedbitsperpixel) {
    this.compressedbitsperpixel = compressedbitsperpixel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCompressionlevel() {
    return compressionlevel;
  }

  /**
   * @param compressionlevel compressionlevel or {@code null} for none
   */
  public PhotosImageMetadata setCompressionlevel(java.lang.Integer compressionlevel) {
    this.compressionlevel = compressionlevel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getContact() {
    return contact;
  }

  /**
   * @param contact contact or {@code null} for none
   */
  public PhotosImageMetadata setContact(java.lang.String contact) {
    this.contact = contact;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContentlocationcode() {
    return contentlocationcode;
  }

  /**
   * @param contentlocationcode contentlocationcode or {@code null} for none
   */
  public PhotosImageMetadata setContentlocationcode(java.util.List<java.lang.String> contentlocationcode) {
    this.contentlocationcode = contentlocationcode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContentlocationname() {
    return contentlocationname;
  }

  /**
   * @param contentlocationname contentlocationname or {@code null} for none
   */
  public PhotosImageMetadata setContentlocationname(java.util.List<java.lang.String> contentlocationname) {
    this.contentlocationname = contentlocationname;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContrast() {
    return contrast;
  }

  /**
   * @param contrast contrast or {@code null} for none
   */
  public PhotosImageMetadata setContrast(java.lang.Integer contrast) {
    this.contrast = contrast;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContributor() {
    return contributor;
  }

  /**
   * @param contributor contributor or {@code null} for none
   */
  public PhotosImageMetadata setContributor(java.util.List<java.lang.String> contributor) {
    this.contributor = contributor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCopyrightnotice() {
    return copyrightnotice;
  }

  /**
   * @param copyrightnotice copyrightnotice or {@code null} for none
   */
  public PhotosImageMetadata setCopyrightnotice(java.lang.String copyrightnotice) {
    this.copyrightnotice = copyrightnotice;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * @param country country or {@code null} for none
   */
  public PhotosImageMetadata setCountry(java.lang.String country) {
    this.country = country;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCountrycode() {
    return countrycode;
  }

  /**
   * @param countrycode countrycode or {@code null} for none
   */
  public PhotosImageMetadata setCountrycode(java.lang.String countrycode) {
    this.countrycode = countrycode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCoverage() {
    return coverage;
  }

  /**
   * @param coverage coverage or {@code null} for none
   */
  public PhotosImageMetadata setCoverage(java.lang.String coverage) {
    this.coverage = coverage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCreatedate() {
    return createdate;
  }

  /**
   * @param createdate createdate or {@code null} for none
   */
  public PhotosImageMetadata setCreatedate(java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCredits() {
    return credits;
  }

  /**
   * @param credits credits or {@code null} for none
   */
  public PhotosImageMetadata setCredits(java.lang.String credits) {
    this.credits = credits;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCroppedareaimageheightpixels() {
    return croppedareaimageheightpixels;
  }

  /**
   * @param croppedareaimageheightpixels croppedareaimageheightpixels or {@code null} for none
   */
  public PhotosImageMetadata setCroppedareaimageheightpixels(java.lang.Integer croppedareaimageheightpixels) {
    this.croppedareaimageheightpixels = croppedareaimageheightpixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCroppedareaimagewidthpixels() {
    return croppedareaimagewidthpixels;
  }

  /**
   * @param croppedareaimagewidthpixels croppedareaimagewidthpixels or {@code null} for none
   */
  public PhotosImageMetadata setCroppedareaimagewidthpixels(java.lang.Integer croppedareaimagewidthpixels) {
    this.croppedareaimagewidthpixels = croppedareaimagewidthpixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCroppedarealeftpixels() {
    return croppedarealeftpixels;
  }

  /**
   * @param croppedarealeftpixels croppedarealeftpixels or {@code null} for none
   */
  public PhotosImageMetadata setCroppedarealeftpixels(java.lang.Integer croppedarealeftpixels) {
    this.croppedarealeftpixels = croppedarealeftpixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCroppedareatoppixels() {
    return croppedareatoppixels;
  }

  /**
   * @param croppedareatoppixels croppedareatoppixels or {@code null} for none
   */
  public PhotosImageMetadata setCroppedareatoppixels(java.lang.Integer croppedareatoppixels) {
    this.croppedareatoppixels = croppedareatoppixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCustomrendered() {
    return customrendered;
  }

  /**
   * @param customrendered customrendered or {@code null} for none
   */
  public PhotosImageMetadata setCustomrendered(java.lang.Integer customrendered) {
    this.customrendered = customrendered;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCvterm() {
    return cvterm;
  }

  /**
   * @param cvterm cvterm or {@code null} for none
   */
  public PhotosImageMetadata setCvterm(java.util.List<java.lang.String> cvterm) {
    this.cvterm = cvterm;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * @param date date or {@code null} for none
   */
  public PhotosImageMetadata setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDatecreated() {
    return datecreated;
  }

  /**
   * @param datecreated datecreated or {@code null} for none
   */
  public PhotosImageMetadata setDatecreated(java.lang.String datecreated) {
    this.datecreated = datecreated;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDatesent() {
    return datesent;
  }

  /**
   * @param datesent datesent or {@code null} for none
   */
  public PhotosImageMetadata setDatesent(java.lang.String datesent) {
    this.datesent = datesent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDatetime() {
    return datetime;
  }

  /**
   * @param datetime datetime or {@code null} for none
   */
  public PhotosImageMetadata setDatetime(java.lang.String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDatetimedigitized() {
    return datetimedigitized;
  }

  /**
   * @param datetimedigitized datetimedigitized or {@code null} for none
   */
  public PhotosImageMetadata setDatetimedigitized(java.lang.String datetimedigitized) {
    this.datetimedigitized = datetimedigitized;
    return this;
  }

  /**
   * 0 = no daylight savings, 1 = daylight savings enabled. Note that this field only represents
   * whether the setting in the camera was turned on or off. It must not be used to modify the
   * timestamp of the photo. That is, the capture time is already completely determined by
   * exif_time, timezoneoffset and timezoneminutes.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDaylightsavings() {
    return daylightsavings;
  }

  /**
   * 0 = no daylight savings, 1 = daylight savings enabled. Note that this field only represents
   * whether the setting in the camera was turned on or off. It must not be used to modify the
   * timestamp of the photo. That is, the capture time is already completely determined by
   * exif_time, timezoneoffset and timezoneminutes.
   * @param daylightsavings daylightsavings or {@code null} for none
   */
  public PhotosImageMetadata setDaylightsavings(java.util.List<java.lang.Integer> daylightsavings) {
    this.daylightsavings = daylightsavings;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDestination() {
    return destination;
  }

  /**
   * @param destination destination or {@code null} for none
   */
  public PhotosImageMetadata setDestination(java.util.List<java.lang.String> destination) {
    this.destination = destination;
    return this;
  }

  /**
   * +/- 90 inclusive
   * @return value or {@code null} for none
   */
  public java.lang.Double getDestinationLatitude() {
    return destinationLatitude;
  }

  /**
   * +/- 90 inclusive
   * @param destinationLatitude destinationLatitude or {@code null} for none
   */
  public PhotosImageMetadata setDestinationLatitude(java.lang.Double destinationLatitude) {
    this.destinationLatitude = destinationLatitude;
    return this;
  }

  /**
   * +/- 180 inclusive
   * @return value or {@code null} for none
   */
  public java.lang.Double getDestinationLongitude() {
    return destinationLongitude;
  }

  /**
   * +/- 180 inclusive
   * @param destinationLongitude destinationLongitude or {@code null} for none
   */
  public PhotosImageMetadata setDestinationLongitude(java.lang.Double destinationLongitude) {
    this.destinationLongitude = destinationLongitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDigimageguid() {
    return digimageguid;
  }

  /**
   * @param digimageguid digimageguid or {@code null} for none
   */
  public PhotosImageMetadata setDigimageguid(java.lang.String digimageguid) {
    this.digimageguid = digimageguid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDigitalsourcefiletype() {
    return digitalsourcefiletype;
  }

  /**
   * @param digitalsourcefiletype digitalsourcefiletype or {@code null} for none
   */
  public PhotosImageMetadata setDigitalsourcefiletype(java.lang.String digitalsourcefiletype) {
    this.digitalsourcefiletype = digitalsourcefiletype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDigitalsourcetype() {
    return digitalsourcetype;
  }

  /**
   * @param digitalsourcetype digitalsourcetype or {@code null} for none
   */
  public PhotosImageMetadata setDigitalsourcetype(java.lang.String digitalsourcetype) {
    this.digitalsourcetype = digitalsourcetype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getDigitalzoomratio() {
    return digitalzoomratio;
  }

  /**
   * @param digitalzoomratio digitalzoomratio or {@code null} for none
   */
  public PhotosImageMetadata setDigitalzoomratio(java.lang.Float digitalzoomratio) {
    this.digitalzoomratio = digitalzoomratio;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getDistance() {
    return distance;
  }

  /**
   * @param distance distance or {@code null} for none
   */
  public PhotosImageMetadata setDistance(java.lang.Float distance) {
    this.distance = distance;
    return this;
  }

  /**
   * DynamicDepth (go/dynamic-depth) metadata is described in the metadata of sub-images in the
   * container. The presence of this field can be used to determine that an image is in the dynamic
   * depth format.
   * @return value or {@code null} for none
   */
  public PhotosDynamicDepthMetadata getDynamicDepthMetadata() {
    return dynamicDepthMetadata;
  }

  /**
   * DynamicDepth (go/dynamic-depth) metadata is described in the metadata of sub-images in the
   * container. The presence of this field can be used to determine that an image is in the dynamic
   * depth format.
   * @param dynamicDepthMetadata dynamicDepthMetadata or {@code null} for none
   */
  public PhotosImageMetadata setDynamicDepthMetadata(PhotosDynamicDepthMetadata dynamicDepthMetadata) {
    this.dynamicDepthMetadata = dynamicDepthMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEditorialupdate() {
    return editorialupdate;
  }

  /**
   * @param editorialupdate editorialupdate or {@code null} for none
   */
  public PhotosImageMetadata setEditorialupdate(java.lang.String editorialupdate) {
    this.editorialupdate = editorialupdate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEditstatus() {
    return editstatus;
  }

  /**
   * @param editstatus editstatus or {@code null} for none
   */
  public PhotosImageMetadata setEditstatus(java.lang.String editstatus) {
    this.editstatus = editstatus;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEnvelopenumber() {
    return envelopenumber;
  }

  /**
   * @param envelopenumber envelopenumber or {@code null} for none
   */
  public PhotosImageMetadata setEnvelopenumber(java.lang.String envelopenumber) {
    this.envelopenumber = envelopenumber;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEnvelopepriority() {
    return envelopepriority;
  }

  /**
   * @param envelopepriority envelopepriority or {@code null} for none
   */
  public PhotosImageMetadata setEnvelopepriority(java.lang.String envelopepriority) {
    this.envelopepriority = envelopepriority;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEvent() {
    return event;
  }

  /**
   * @param event event or {@code null} for none
   */
  public PhotosImageMetadata setEvent(java.lang.String event) {
    this.event = event;
    return this;
  }

  /**
   * 4C metadata (caption, copyright, creator, credit) specific to each of the three metadata
   * segments (EXIF, XMP, IPTC). These are used to keep separate the 4C data from each segment so
   * that we can properly preserve the per-segment 4C data on write (when PreserveLevel is set
   * appropriately).
   * @return value or {@code null} for none
   */
  public PhotosFourCMetadata getExif4c() {
    return exif4c;
  }

  /**
   * 4C metadata (caption, copyright, creator, credit) specific to each of the three metadata
   * segments (EXIF, XMP, IPTC). These are used to keep separate the 4C data from each segment so
   * that we can properly preserve the per-segment 4C data on write (when PreserveLevel is set
   * appropriately).
   * @param exif4c exif4c or {@code null} for none
   */
  public PhotosImageMetadata setExif4c(PhotosFourCMetadata exif4c) {
    this.exif4c = exif4c;
    return this;
  }

  /**
   * Timestamp embedded in the image. The value comes from the first valid date-time field extracted
   * from the metadata in the order: 1) datecreated (ie. DateTimeOriginal) 2) datetimedigitized (ie.
   * DateTimeDigitized) 3) datetime (ie. DateTime or last modified date) The type of this field is
   * equivalent to a time_t (ie. number of seconds since the epoch - 00:00 hours, Jan 1, 1970)
   * except that it is an int64 rather than an int.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExifTime() {
    return exifTime;
  }

  /**
   * Timestamp embedded in the image. The value comes from the first valid date-time field extracted
   * from the metadata in the order: 1) datecreated (ie. DateTimeOriginal) 2) datetimedigitized (ie.
   * DateTimeDigitized) 3) datetime (ie. DateTime or last modified date) The type of this field is
   * equivalent to a time_t (ie. number of seconds since the epoch - 00:00 hours, Jan 1, 1970)
   * except that it is an int64 rather than an int.
   * @param exifTime exifTime or {@code null} for none
   */
  public PhotosImageMetadata setExifTime(java.lang.Long exifTime) {
    this.exifTime = exifTime;
    return this;
  }

  /**
   * The exif_time_utc field is a UTC-based alternative to the exif_time field, which is in local
   * time, rather than UTC. If they were not separate, clients would be unable to distinguish if the
   * source were UTC- or local-based.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExifTimeUtc() {
    return exifTimeUtc;
  }

  /**
   * The exif_time_utc field is a UTC-based alternative to the exif_time field, which is in local
   * time, rather than UTC. If they were not separate, clients would be unable to distinguish if the
   * source were UTC- or local-based.
   * @param exifTimeUtc exifTimeUtc or {@code null} for none
   */
  public PhotosImageMetadata setExifTimeUtc(java.lang.Long exifTimeUtc) {
    this.exifTimeUtc = exifTimeUtc;
    return this;
  }

  /**
   * The exif_time_utc_source indicates the source from which the exif_time_utc field is calculated.
   * @return value or {@code null} for none
   */
  public java.lang.String getExifTimeUtcSource() {
    return exifTimeUtcSource;
  }

  /**
   * The exif_time_utc_source indicates the source from which the exif_time_utc field is calculated.
   * @param exifTimeUtcSource exifTimeUtcSource or {@code null} for none
   */
  public PhotosImageMetadata setExifTimeUtcSource(java.lang.String exifTimeUtcSource) {
    this.exifTimeUtcSource = exifTimeUtcSource;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getExpirationdate() {
    return expirationdate;
  }

  /**
   * @param expirationdate expirationdate or {@code null} for none
   */
  public PhotosImageMetadata setExpirationdate(java.lang.String expirationdate) {
    this.expirationdate = expirationdate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getExpirationtime() {
    return expirationtime;
  }

  /**
   * @param expirationtime expirationtime or {@code null} for none
   */
  public PhotosImageMetadata setExpirationtime(java.lang.String expirationtime) {
    this.expirationtime = expirationtime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getExposurebias() {
    return exposurebias;
  }

  /**
   * @param exposurebias exposurebias or {@code null} for none
   */
  public PhotosImageMetadata setExposurebias(java.lang.Float exposurebias) {
    this.exposurebias = exposurebias;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getExposureindex() {
    return exposureindex;
  }

  /**
   * @param exposureindex exposureindex or {@code null} for none
   */
  public PhotosImageMetadata setExposureindex(java.lang.Float exposureindex) {
    this.exposureindex = exposureindex;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExposurelockused() {
    return exposurelockused;
  }

  /**
   * @param exposurelockused exposurelockused or {@code null} for none
   */
  public PhotosImageMetadata setExposurelockused(java.lang.Boolean exposurelockused) {
    this.exposurelockused = exposurelockused;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExposuremode() {
    return exposuremode;
  }

  /**
   * @param exposuremode exposuremode or {@code null} for none
   */
  public PhotosImageMetadata setExposuremode(java.lang.Integer exposuremode) {
    this.exposuremode = exposuremode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExposureprogram() {
    return exposureprogram;
  }

  /**
   * @param exposureprogram exposureprogram or {@code null} for none
   */
  public PhotosImageMetadata setExposureprogram(java.lang.Integer exposureprogram) {
    this.exposureprogram = exposureprogram;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getExposuretime() {
    return exposuretime;
  }

  /**
   * @param exposuretime exposuretime or {@code null} for none
   */
  public PhotosImageMetadata setExposuretime(java.lang.Float exposuretime) {
    this.exposuretime = exposuretime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExtrasamples() {
    return extrasamples;
  }

  /**
   * @param extrasamples extrasamples or {@code null} for none
   */
  public PhotosImageMetadata setExtrasamples(java.lang.Integer extrasamples) {
    this.extrasamples = extrasamples;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFillorder() {
    return fillorder;
  }

  /**
   * @param fillorder fillorder or {@code null} for none
   */
  public PhotosImageMetadata setFillorder(java.lang.Integer fillorder) {
    this.fillorder = fillorder;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFirmware() {
    return firmware;
  }

  /**
   * @param firmware firmware or {@code null} for none
   */
  public PhotosImageMetadata setFirmware(java.lang.String firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFirstphotodate() {
    return firstphotodate;
  }

  /**
   * @param firstphotodate firstphotodate or {@code null} for none
   */
  public PhotosImageMetadata setFirstphotodate(java.lang.String firstphotodate) {
    this.firstphotodate = firstphotodate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFixtureidentifier() {
    return fixtureidentifier;
  }

  /**
   * @param fixtureidentifier fixtureidentifier or {@code null} for none
   */
  public PhotosImageMetadata setFixtureidentifier(java.lang.String fixtureidentifier) {
    this.fixtureidentifier = fixtureidentifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFlashcompensation() {
    return flashcompensation;
  }

  /**
   * @param flashcompensation flashcompensation or {@code null} for none
   */
  public PhotosImageMetadata setFlashcompensation(java.lang.Float flashcompensation) {
    this.flashcompensation = flashcompensation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFlashenergy() {
    return flashenergy;
  }

  /**
   * @param flashenergy flashenergy or {@code null} for none
   */
  public PhotosImageMetadata setFlashenergy(java.lang.Float flashenergy) {
    this.flashenergy = flashenergy;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFlashreturn() {
    return flashreturn;
  }

  /**
   * @param flashreturn flashreturn or {@code null} for none
   */
  public PhotosImageMetadata setFlashreturn(java.lang.Integer flashreturn) {
    this.flashreturn = flashreturn;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFlashused() {
    return flashused;
  }

  /**
   * @param flashused flashused or {@code null} for none
   */
  public PhotosImageMetadata setFlashused(java.lang.Integer flashused) {
    this.flashused = flashused;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFocallength() {
    return focallength;
  }

  /**
   * @param focallength focallength or {@code null} for none
   */
  public PhotosImageMetadata setFocallength(java.lang.Float focallength) {
    this.focallength = focallength;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFocallengthin35mmfilm() {
    return focallengthin35mmfilm;
  }

  /**
   * @param focallengthin35mmfilm focallengthin35mmfilm or {@code null} for none
   */
  public PhotosImageMetadata setFocallengthin35mmfilm(java.lang.Integer focallengthin35mmfilm) {
    this.focallengthin35mmfilm = focallengthin35mmfilm;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFocalplaneunits() {
    return focalplaneunits;
  }

  /**
   * @param focalplaneunits focalplaneunits or {@code null} for none
   */
  public PhotosImageMetadata setFocalplaneunits(java.lang.Float focalplaneunits) {
    this.focalplaneunits = focalplaneunits;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFocalplanexres() {
    return focalplanexres;
  }

  /**
   * @param focalplanexres focalplanexres or {@code null} for none
   */
  public PhotosImageMetadata setFocalplanexres(java.lang.Float focalplanexres) {
    this.focalplanexres = focalplanexres;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFormat() {
    return format;
  }

  /**
   * @param format format or {@code null} for none
   */
  public PhotosImageMetadata setFormat(java.lang.String format) {
    this.format = format;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getFreebytecounts() {
    return freebytecounts;
  }

  /**
   * @param freebytecounts freebytecounts or {@code null} for none
   */
  public PhotosImageMetadata setFreebytecounts(java.lang.Long freebytecounts) {
    this.freebytecounts = freebytecounts;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFreeoffsets() {
    return freeoffsets;
  }

  /**
   * @param freeoffsets freeoffsets or {@code null} for none
   */
  public PhotosImageMetadata setFreeoffsets(java.lang.Integer freeoffsets) {
    this.freeoffsets = freeoffsets;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFullpanoheightpixels() {
    return fullpanoheightpixels;
  }

  /**
   * @param fullpanoheightpixels fullpanoheightpixels or {@code null} for none
   */
  public PhotosImageMetadata setFullpanoheightpixels(java.lang.Integer fullpanoheightpixels) {
    this.fullpanoheightpixels = fullpanoheightpixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFullpanowidthpixels() {
    return fullpanowidthpixels;
  }

  /**
   * @param fullpanowidthpixels fullpanowidthpixels or {@code null} for none
   */
  public PhotosImageMetadata setFullpanowidthpixels(java.lang.Integer fullpanowidthpixels) {
    this.fullpanowidthpixels = fullpanowidthpixels;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFunction() {
    return function;
  }

  /**
   * @param function function or {@code null} for none
   */
  public PhotosImageMetadata setFunction(java.lang.Boolean function) {
    this.function = function;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGaincontrol() {
    return gaincontrol;
  }

  /**
   * @param gaincontrol gaincontrol or {@code null} for none
   */
  public PhotosImageMetadata setGaincontrol(java.lang.Integer gaincontrol) {
    this.gaincontrol = gaincontrol;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGaudiomime() {
    return gaudiomime;
  }

  /**
   * @param gaudiomime gaudiomime or {@code null} for none
   */
  public PhotosImageMetadata setGaudiomime(java.lang.String gaudiomime) {
    this.gaudiomime = gaudiomime;
    return this;
  }

  /**
   * A unique String. The property should be present and identical for all images that make up a
   * burst. It should be unique across devices (UUID recommended). Unlike GCreations:CameraBurstId,
   * we should use images with this property to create auto collages and animations.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcameraburstid() {
    return gcameraburstid;
  }

  /**
   * A unique String. The property should be present and identical for all images that make up a
   * burst. It should be unique across devices (UUID recommended). Unlike GCreations:CameraBurstId,
   * we should use images with this property to create auto collages and animations.
   * @param gcameraburstid gcameraburstid or {@code null} for none
   */
  public PhotosImageMetadata setGcameraburstid(java.lang.String gcameraburstid) {
    this.gcameraburstid = gcameraburstid;
    return this;
  }

  /**
   * A value of 1 indicates that this was the primary (“best shot”) at capture time. Within Photos
   * we should only treat this image as the best shot if the user hasn’t made an explicit choice.
   * Defining the initial primary allows consistency between OEMs, Photos clients, and the Photos
   * backend. This value is optional, cameras are not required to set it on any photo in a burst.
   * Clients will default to the 0th frame, but may run an algorithm to pick a better default.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameraburstprimary() {
    return gcameraburstprimary;
  }

  /**
   * A value of 1 indicates that this was the primary (“best shot”) at capture time. Within Photos
   * we should only treat this image as the best shot if the user hasn’t made an explicit choice.
   * Defining the initial primary allows consistency between OEMs, Photos clients, and the Photos
   * backend. This value is optional, cameras are not required to set it on any photo in a burst.
   * Clients will default to the 0th frame, but may run an algorithm to pick a better default.
   * @param gcameraburstprimary gcameraburstprimary or {@code null} for none
   */
  public PhotosImageMetadata setGcameraburstprimary(java.lang.Integer gcameraburstprimary) {
    this.gcameraburstprimary = gcameraburstprimary;
    return this;
  }

  /**
   * The possible values are: “Animation”, “Collage”, “Pano”, “Movies”. Photos will avoid creating
   * the listed types using the containing image or video. The property is optional. The property
   * can be included multiple times to disable creation of multiple different types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGcameradisableautocreation() {
    return gcameradisableautocreation;
  }

  /**
   * The possible values are: “Animation”, “Collage”, “Pano”, “Movies”. Photos will avoid creating
   * the listed types using the containing image or video. The property is optional. The property
   * can be included multiple times to disable creation of multiple different types.
   * @param gcameradisableautocreation gcameradisableautocreation or {@code null} for none
   */
  public PhotosImageMetadata setGcameradisableautocreation(java.util.List<java.lang.String> gcameradisableautocreation) {
    this.gcameradisableautocreation = gcameradisableautocreation;
    return this;
  }

  /**
   * The following XMP metadata are used specifically for MicroVideo. More information about
   * MicroVideo format can be found at go/photos-microvideo-format A value of 1 indicates that this
   * file was a MicroVideo at capture time. Otherwise, this is not a MicroVideo (not set or 0).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramicrovideo() {
    return gcameramicrovideo;
  }

  /**
   * The following XMP metadata are used specifically for MicroVideo. More information about
   * MicroVideo format can be found at go/photos-microvideo-format A value of 1 indicates that this
   * file was a MicroVideo at capture time. Otherwise, this is not a MicroVideo (not set or 0).
   * @param gcameramicrovideo gcameramicrovideo or {@code null} for none
   */
  public PhotosImageMetadata setGcameramicrovideo(java.lang.Integer gcameramicrovideo) {
    this.gcameramicrovideo = gcameramicrovideo;
    return this;
  }

  /**
   * The offset in bytes from the end of the file to the point where the appended mp4 begins
   * (equivalent to the length of the compressed mp4). This field might be provided in the original
   * MicroVideo from client, but it might become invalid when the image component is edited, so it
   * is expected that the thumbnailer will validate it and find the correct value (by scanning
   * through the JPEG) if it is invalid. In other words, only a valid offset should be returned by
   * thumbnailer.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramicrovideooffset() {
    return gcameramicrovideooffset;
  }

  /**
   * The offset in bytes from the end of the file to the point where the appended mp4 begins
   * (equivalent to the length of the compressed mp4). This field might be provided in the original
   * MicroVideo from client, but it might become invalid when the image component is edited, so it
   * is expected that the thumbnailer will validate it and find the correct value (by scanning
   * through the JPEG) if it is invalid. In other words, only a valid offset should be returned by
   * thumbnailer.
   * @param gcameramicrovideooffset gcameramicrovideooffset or {@code null} for none
   */
  public PhotosImageMetadata setGcameramicrovideooffset(java.lang.Integer gcameramicrovideooffset) {
    this.gcameramicrovideooffset = gcameramicrovideooffset;
    return this;
  }

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramicrovideopresentationtimestampus() {
    return gcameramicrovideopresentationtimestampus;
  }

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * @param gcameramicrovideopresentationtimestampus gcameramicrovideopresentationtimestampus or {@code null} for none
   */
  public PhotosImageMetadata setGcameramicrovideopresentationtimestampus(java.lang.Integer gcameramicrovideopresentationtimestampus) {
    this.gcameramicrovideopresentationtimestampus = gcameramicrovideopresentationtimestampus;
    return this;
  }

  /**
   * Indicates the file format version of the MicroVideo (initially 1).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramicrovideoversion() {
    return gcameramicrovideoversion;
  }

  /**
   * Indicates the file format version of the MicroVideo (initially 1).
   * @param gcameramicrovideoversion gcameramicrovideoversion or {@code null} for none
   */
  public PhotosImageMetadata setGcameramicrovideoversion(java.lang.Integer gcameramicrovideoversion) {
    this.gcameramicrovideoversion = gcameramicrovideoversion;
    return this;
  }

  /**
   * An indication that this item should be treated as a Motion Photo. 0 -> Not Motion Photo, 1 ->
   * Motion Photo, everything else is undefined per the spec. If it's a motion photo, the previous
   * gcamera fields should be ignored.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramotionphoto() {
    return gcameramotionphoto;
  }

  /**
   * An indication that this item should be treated as a Motion Photo. 0 -> Not Motion Photo, 1 ->
   * Motion Photo, everything else is undefined per the spec. If it's a motion photo, the previous
   * gcamera fields should be ignored.
   * @param gcameramotionphoto gcameramotionphoto or {@code null} for none
   */
  public PhotosImageMetadata setGcameramotionphoto(java.lang.Integer gcameramotionphoto) {
    this.gcameramotionphoto = gcameramotionphoto;
    return this;
  }

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramotionphotopresentationtimestampus() {
    return gcameramotionphotopresentationtimestampus;
  }

  /**
   * The presentation timestamp in microseconds of the video frame corresponding to the image still.
   * Value may be -1 to denote unset/unspecified.
   * @param gcameramotionphotopresentationtimestampus gcameramotionphotopresentationtimestampus or {@code null} for none
   */
  public PhotosImageMetadata setGcameramotionphotopresentationtimestampus(java.lang.Integer gcameramotionphotopresentationtimestampus) {
    this.gcameramotionphotopresentationtimestampus = gcameramotionphotopresentationtimestampus;
    return this;
  }

  /**
   * Indicates the Motion Photo version of the spec (initially 1).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGcameramotionphotoversion() {
    return gcameramotionphotoversion;
  }

  /**
   * Indicates the Motion Photo version of the spec (initially 1).
   * @param gcameramotionphotoversion gcameramotionphotoversion or {@code null} for none
   */
  public PhotosImageMetadata setGcameramotionphotoversion(java.lang.Integer gcameramotionphotoversion) {
    this.gcameramotionphotoversion = gcameramotionphotoversion;
    return this;
  }

  /**
   * Camera creations metadata. The opaque id string created by the OEM. For bursts, this field
   * should not be present. Instead, the two properties below will allow Photos to identify and
   * provide special treatment for bursts.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcameraspecialtypeid() {
    return gcameraspecialtypeid;
  }

  /**
   * Camera creations metadata. The opaque id string created by the OEM. For bursts, this field
   * should not be present. Instead, the two properties below will allow Photos to identify and
   * provide special treatment for bursts.
   * @param gcameraspecialtypeid gcameraspecialtypeid or {@code null} for none
   */
  public PhotosImageMetadata setGcameraspecialtypeid(java.lang.String gcameraspecialtypeid) {
    this.gcameraspecialtypeid = gcameraspecialtypeid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGcreationscameraburstid() {
    return gcreationscameraburstid;
  }

  /**
   * @param gcreationscameraburstid gcreationscameraburstid or {@code null} for none
   */
  public PhotosImageMetadata setGcreationscameraburstid(java.lang.String gcreationscameraburstid) {
    this.gcreationscameraburstid = gcreationscameraburstid;
    return this;
  }

  /**
   * String representation of creation type. Should be one of {"GCameraCollage", "GCameraAnimation",
   * "GCameraGroupSmiles", "GPhotosCollage", "GPhotosAnimation"}.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcreationstype() {
    return gcreationstype;
  }

  /**
   * String representation of creation type. Should be one of {"GCameraCollage", "GCameraAnimation",
   * "GCameraGroupSmiles", "GPhotosCollage", "GPhotosAnimation"}.
   * @param gcreationstype gcreationstype or {@code null} for none
   */
  public PhotosImageMetadata setGcreationstype(java.lang.String gcreationstype) {
    this.gcreationstype = gcreationstype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosGDepthMetadata getGdepthMetadata() {
    return gdepthMetadata;
  }

  /**
   * @param gdepthMetadata gdepthMetadata or {@code null} for none
   */
  public PhotosImageMetadata setGdepthMetadata(PhotosGDepthMetadata gdepthMetadata) {
    this.gdepthMetadata = gdepthMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGimagemime() {
    return gimagemime;
  }

  /**
   * @param gimagemime gimagemime or {@code null} for none
   */
  public PhotosImageMetadata setGimagemime(java.lang.String gimagemime) {
    this.gimagemime = gimagemime;
    return this;
  }

  /**
   * This is in UTC time. Format is YYYY:mm:dd.
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsdatestamp() {
    return gpsdatestamp;
  }

  /**
   * This is in UTC time. Format is YYYY:mm:dd.
   * @param gpsdatestamp gpsdatestamp or {@code null} for none
   */
  public PhotosImageMetadata setGpsdatestamp(java.lang.String gpsdatestamp) {
    this.gpsdatestamp = gpsdatestamp;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsdestbearing() {
    return gpsdestbearing;
  }

  /**
   * @param gpsdestbearing gpsdestbearing or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestbearing(java.lang.Float gpsdestbearing) {
    this.gpsdestbearing = gpsdestbearing;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsdestbearingref() {
    return gpsdestbearingref;
  }

  /**
   * @param gpsdestbearingref gpsdestbearingref or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestbearingref(java.lang.String gpsdestbearingref) {
    this.gpsdestbearingref = gpsdestbearingref;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsdestdistance() {
    return gpsdestdistance;
  }

  /**
   * @param gpsdestdistance gpsdestdistance or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestdistance(java.lang.Float gpsdestdistance) {
    this.gpsdestdistance = gpsdestdistance;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsdestdistanceref() {
    return gpsdestdistanceref;
  }

  /**
   * @param gpsdestdistanceref gpsdestdistanceref or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestdistanceref(java.lang.String gpsdestdistanceref) {
    this.gpsdestdistanceref = gpsdestdistanceref;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsdestlatitude() {
    return gpsdestlatitude;
  }

  /**
   * @param gpsdestlatitude gpsdestlatitude or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestlatitude(java.lang.Float gpsdestlatitude) {
    this.gpsdestlatitude = gpsdestlatitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsdestlatituderef() {
    return gpsdestlatituderef;
  }

  /**
   * @param gpsdestlatituderef gpsdestlatituderef or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestlatituderef(java.lang.String gpsdestlatituderef) {
    this.gpsdestlatituderef = gpsdestlatituderef;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsdestlongitude() {
    return gpsdestlongitude;
  }

  /**
   * @param gpsdestlongitude gpsdestlongitude or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestlongitude(java.lang.Float gpsdestlongitude) {
    this.gpsdestlongitude = gpsdestlongitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsdestlongituderef() {
    return gpsdestlongituderef;
  }

  /**
   * @param gpsdestlongituderef gpsdestlongituderef or {@code null} for none
   */
  public PhotosImageMetadata setGpsdestlongituderef(java.lang.String gpsdestlongituderef) {
    this.gpsdestlongituderef = gpsdestlongituderef;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGpsdifferential() {
    return gpsdifferential;
  }

  /**
   * @param gpsdifferential gpsdifferential or {@code null} for none
   */
  public PhotosImageMetadata setGpsdifferential(java.lang.Integer gpsdifferential) {
    this.gpsdifferential = gpsdifferential;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsdop() {
    return gpsdop;
  }

  /**
   * @param gpsdop gpsdop or {@code null} for none
   */
  public PhotosImageMetadata setGpsdop(java.lang.Float gpsdop) {
    this.gpsdop = gpsdop;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsimgdirection() {
    return gpsimgdirection;
  }

  /**
   * @param gpsimgdirection gpsimgdirection or {@code null} for none
   */
  public PhotosImageMetadata setGpsimgdirection(java.lang.Float gpsimgdirection) {
    this.gpsimgdirection = gpsimgdirection;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsimgdirectionref() {
    return gpsimgdirectionref;
  }

  /**
   * @param gpsimgdirectionref gpsimgdirectionref or {@code null} for none
   */
  public PhotosImageMetadata setGpsimgdirectionref(java.lang.String gpsimgdirectionref) {
    this.gpsimgdirectionref = gpsimgdirectionref;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsmapdatum() {
    return gpsmapdatum;
  }

  /**
   * @param gpsmapdatum gpsmapdatum or {@code null} for none
   */
  public PhotosImageMetadata setGpsmapdatum(java.lang.String gpsmapdatum) {
    this.gpsmapdatum = gpsmapdatum;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsmeasuremode() {
    return gpsmeasuremode;
  }

  /**
   * @param gpsmeasuremode gpsmeasuremode or {@code null} for none
   */
  public PhotosImageMetadata setGpsmeasuremode(java.lang.String gpsmeasuremode) {
    this.gpsmeasuremode = gpsmeasuremode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpssatellites() {
    return gpssatellites;
  }

  /**
   * @param gpssatellites gpssatellites or {@code null} for none
   */
  public PhotosImageMetadata setGpssatellites(java.lang.String gpssatellites) {
    this.gpssatellites = gpssatellites;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpsspeed() {
    return gpsspeed;
  }

  /**
   * @param gpsspeed gpsspeed or {@code null} for none
   */
  public PhotosImageMetadata setGpsspeed(java.lang.Float gpsspeed) {
    this.gpsspeed = gpsspeed;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsspeedref() {
    return gpsspeedref;
  }

  /**
   * @param gpsspeedref gpsspeedref or {@code null} for none
   */
  public PhotosImageMetadata setGpsspeedref(java.lang.String gpsspeedref) {
    this.gpsspeedref = gpsspeedref;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpsstatus() {
    return gpsstatus;
  }

  /**
   * @param gpsstatus gpsstatus or {@code null} for none
   */
  public PhotosImageMetadata setGpsstatus(java.lang.String gpsstatus) {
    this.gpsstatus = gpsstatus;
    return this;
  }

  /**
   * This is in UTC Time. Contains three floats: hour, minute and second. Supports subsecond
   * resolution.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getGpstime() {
    return gpstime;
  }

  /**
   * This is in UTC Time. Contains three floats: hour, minute and second. Supports subsecond
   * resolution.
   * @param gpstime gpstime or {@code null} for none
   */
  public PhotosImageMetadata setGpstime(java.util.List<java.lang.Float> gpstime) {
    this.gpstime = gpstime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGpstrack() {
    return gpstrack;
  }

  /**
   * @param gpstrack gpstrack or {@code null} for none
   */
  public PhotosImageMetadata setGpstrack(java.lang.Float gpstrack) {
    this.gpstrack = gpstrack;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGpstrackref() {
    return gpstrackref;
  }

  /**
   * @param gpstrackref gpstrackref or {@code null} for none
   */
  public PhotosImageMetadata setGpstrackref(java.lang.String gpstrackref) {
    this.gpstrackref = gpstrackref;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGrayresponsecurve() {
    return grayresponsecurve;
  }

  /**
   * @param grayresponsecurve grayresponsecurve or {@code null} for none
   */
  public PhotosImageMetadata setGrayresponsecurve(java.lang.Integer grayresponsecurve) {
    this.grayresponsecurve = grayresponsecurve;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGrayresponseunit() {
    return grayresponseunit;
  }

  /**
   * @param grayresponseunit grayresponseunit or {@code null} for none
   */
  public PhotosImageMetadata setGrayresponseunit(java.lang.Integer grayresponseunit) {
    this.grayresponseunit = grayresponseunit;
    return this;
  }

  /**
   * The image has an alpha channel (potential transparency). If the image is decoded, this will be
   * updated to indicate whether there is any active transparency. Formats supporting alpha: png,
   * webp, gif, heif.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasAlpha() {
    return hasAlpha;
  }

  /**
   * The image has an alpha channel (potential transparency). If the image is decoded, this will be
   * updated to indicate whether there is any active transparency. Formats supporting alpha: png,
   * webp, gif, heif.
   * @param hasAlpha hasAlpha or {@code null} for none
   */
  public PhotosImageMetadata setHasAlpha(java.lang.Boolean hasAlpha) {
    this.hasAlpha = hasAlpha;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getHeadline() {
    return headline;
  }

  /**
   * @param headline headline or {@code null} for none
   */
  public PhotosImageMetadata setHeadline(java.lang.String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * @param height height or {@code null} for none
   */
  public PhotosImageMetadata setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getHostcomputer() {
    return hostcomputer;
  }

  /**
   * @param hostcomputer hostcomputer or {@code null} for none
   */
  public PhotosImageMetadata setHostcomputer(java.lang.String hostcomputer) {
    this.hostcomputer = hostcomputer;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIdentifier() {
    return identifier;
  }

  /**
   * @param identifier identifier or {@code null} for none
   */
  public PhotosImageMetadata setIdentifier(java.util.List<java.lang.String> identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getImagenumber() {
    return imagenumber;
  }

  /**
   * @param imagenumber imagenumber or {@code null} for none
   */
  public PhotosImageMetadata setImagenumber(java.lang.String imagenumber) {
    this.imagenumber = imagenumber;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getImageorientation() {
    return imageorientation;
  }

  /**
   * @param imageorientation imageorientation or {@code null} for none
   */
  public PhotosImageMetadata setImageorientation(java.lang.String imageorientation) {
    this.imageorientation = imageorientation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getImagetype() {
    return imagetype;
  }

  /**
   * @param imagetype imagetype or {@code null} for none
   */
  public PhotosImageMetadata setImagetype(java.lang.String imagetype) {
    this.imagetype = imagetype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getInitialhorizontalfovdegrees() {
    return initialhorizontalfovdegrees;
  }

  /**
   * @param initialhorizontalfovdegrees initialhorizontalfovdegrees or {@code null} for none
   */
  public PhotosImageMetadata setInitialhorizontalfovdegrees(java.lang.Float initialhorizontalfovdegrees) {
    this.initialhorizontalfovdegrees = initialhorizontalfovdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getInitialverticalfovdegrees() {
    return initialverticalfovdegrees;
  }

  /**
   * @param initialverticalfovdegrees initialverticalfovdegrees or {@code null} for none
   */
  public PhotosImageMetadata setInitialverticalfovdegrees(java.lang.Float initialverticalfovdegrees) {
    this.initialverticalfovdegrees = initialverticalfovdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInitialviewheadingdegrees() {
    return initialviewheadingdegrees;
  }

  /**
   * @param initialviewheadingdegrees initialviewheadingdegrees or {@code null} for none
   */
  public PhotosImageMetadata setInitialviewheadingdegrees(java.lang.Integer initialviewheadingdegrees) {
    this.initialviewheadingdegrees = initialviewheadingdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInitialviewpitchdegrees() {
    return initialviewpitchdegrees;
  }

  /**
   * @param initialviewpitchdegrees initialviewpitchdegrees or {@code null} for none
   */
  public PhotosImageMetadata setInitialviewpitchdegrees(java.lang.Integer initialviewpitchdegrees) {
    this.initialviewpitchdegrees = initialviewpitchdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInitialviewrolldegrees() {
    return initialviewrolldegrees;
  }

  /**
   * @param initialviewrolldegrees initialviewrolldegrees or {@code null} for none
   */
  public PhotosImageMetadata setInitialviewrolldegrees(java.lang.Integer initialviewrolldegrees) {
    this.initialviewrolldegrees = initialviewrolldegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getInstructions() {
    return instructions;
  }

  /**
   * @param instructions instructions or {@code null} for none
   */
  public PhotosImageMetadata setInstructions(java.lang.String instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getIntellectualgenre() {
    return intellectualgenre;
  }

  /**
   * @param intellectualgenre intellectualgenre or {@code null} for none
   */
  public PhotosImageMetadata setIntellectualgenre(java.lang.String intellectualgenre) {
    this.intellectualgenre = intellectualgenre;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getInteroperabilityindex() {
    return interoperabilityindex;
  }

  /**
   * @param interoperabilityindex interoperabilityindex or {@code null} for none
   */
  public PhotosImageMetadata setInteroperabilityindex(java.lang.String interoperabilityindex) {
    this.interoperabilityindex = interoperabilityindex;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosFourCMetadata getIptc4c() {
    return iptc4c;
  }

  /**
   * @param iptc4c iptc4c or {@code null} for none
   */
  public PhotosImageMetadata setIptc4c(PhotosFourCMetadata iptc4c) {
    this.iptc4c = iptc4c;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getIptclastedited() {
    return iptclastedited;
  }

  /**
   * @param iptclastedited iptclastedited or {@code null} for none
   */
  public PhotosImageMetadata setIptclastedited(java.lang.String iptclastedited) {
    this.iptclastedited = iptclastedited;
    return this;
  }

  /**
   * The image is a Multi-Picture Object.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsmpformat() {
    return ismpformat;
  }

  /**
   * The image is a Multi-Picture Object.
   * @param ismpformat ismpformat or {@code null} for none
   */
  public PhotosImageMetadata setIsmpformat(java.lang.Boolean ismpformat) {
    this.ismpformat = ismpformat;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIsoequivalent() {
    return isoequivalent;
  }

  /**
   * @param isoequivalent isoequivalent or {@code null} for none
   */
  public PhotosImageMetadata setIsoequivalent(java.lang.Integer isoequivalent) {
    this.isoequivalent = isoequivalent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getKeyword() {
    return keyword;
  }

  /**
   * @param keyword keyword or {@code null} for none
   */
  public PhotosImageMetadata setKeyword(java.util.List<java.lang.String> keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * @param label label or {@code null} for none
   */
  public PhotosImageMetadata setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLanguage() {
    return language;
  }

  /**
   * @param language language or {@code null} for none
   */
  public PhotosImageMetadata setLanguage(java.util.List<java.lang.String> language) {
    this.language = language;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageidentifier() {
    return languageidentifier;
  }

  /**
   * @param languageidentifier languageidentifier or {@code null} for none
   */
  public PhotosImageMetadata setLanguageidentifier(java.lang.String languageidentifier) {
    this.languageidentifier = languageidentifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLastphotodate() {
    return lastphotodate;
  }

  /**
   * @param lastphotodate lastphotodate or {@code null} for none
   */
  public PhotosImageMetadata setLastphotodate(java.lang.String lastphotodate) {
    this.lastphotodate = lastphotodate;
    return this;
  }

  /**
   * GPS Info: +/- 90 inclusive
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * GPS Info: +/- 90 inclusive
   * @param latitude latitude or {@code null} for none
   */
  public PhotosImageMetadata setLatitude(java.lang.Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLens() {
    return lens;
  }

  /**
   * @param lens lens or {@code null} for none
   */
  public PhotosImageMetadata setLens(java.lang.String lens) {
    this.lens = lens;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLensid() {
    return lensid;
  }

  /**
   * @param lensid lensid or {@code null} for none
   */
  public PhotosImageMetadata setLensid(java.lang.String lensid) {
    this.lensid = lensid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLensinfo() {
    return lensinfo;
  }

  /**
   * @param lensinfo lensinfo or {@code null} for none
   */
  public PhotosImageMetadata setLensinfo(java.lang.String lensinfo) {
    this.lensinfo = lensinfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLightsource() {
    return lightsource;
  }

  /**
   * @param lightsource lightsource or {@code null} for none
   */
  public PhotosImageMetadata setLightsource(java.lang.Integer lightsource) {
    this.lightsource = lightsource;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLocation() {
    return location;
  }

  /**
   * @param location location or {@code null} for none
   */
  public PhotosImageMetadata setLocation(java.lang.String location) {
    this.location = location;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocationshown() {
    return locationshown;
  }

  /**
   * @param locationshown locationshown or {@code null} for none
   */
  public PhotosImageMetadata setLocationshown(java.util.List<java.lang.String> locationshown) {
    this.locationshown = locationshown;
    return this;
  }

  /**
   * +/- 180 inclusive
   * @return value or {@code null} for none
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * +/- 180 inclusive
   * @param longitude longitude or {@code null} for none
   */
  public PhotosImageMetadata setLongitude(java.lang.Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMarked() {
    return marked;
  }

  /**
   * @param marked marked or {@code null} for none
   */
  public PhotosImageMetadata setMarked(java.lang.Boolean marked) {
    this.marked = marked;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getMaxaperturevalue() {
    return maxaperturevalue;
  }

  /**
   * @param maxaperturevalue maxaperturevalue or {@code null} for none
   */
  public PhotosImageMetadata setMaxaperturevalue(java.lang.Float maxaperturevalue) {
    this.maxaperturevalue = maxaperturevalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxavailheight() {
    return maxavailheight;
  }

  /**
   * @param maxavailheight maxavailheight or {@code null} for none
   */
  public PhotosImageMetadata setMaxavailheight(java.lang.Integer maxavailheight) {
    this.maxavailheight = maxavailheight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxavailwidth() {
    return maxavailwidth;
  }

  /**
   * @param maxavailwidth maxavailwidth or {@code null} for none
   */
  public PhotosImageMetadata setMaxavailwidth(java.lang.Integer maxavailwidth) {
    this.maxavailwidth = maxavailwidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxsamplevalue() {
    return maxsamplevalue;
  }

  /**
   * @param maxsamplevalue maxsamplevalue or {@code null} for none
   */
  public PhotosImageMetadata setMaxsamplevalue(java.lang.Integer maxsamplevalue) {
    this.maxsamplevalue = maxsamplevalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadatadate() {
    return metadatadate;
  }

  /**
   * @param metadatadate metadatadate or {@code null} for none
   */
  public PhotosImageMetadata setMetadatadate(java.lang.String metadatadate) {
    this.metadatadate = metadatadate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMeteringmode() {
    return meteringmode;
  }

  /**
   * @param meteringmode meteringmode or {@code null} for none
   */
  public PhotosImageMetadata setMeteringmode(java.lang.Integer meteringmode) {
    this.meteringmode = meteringmode;
    return this;
  }

  /**
   * This is similar to gcameramicrovideooffset, except it stores the unverified value that was
   * provided in the motion photo file. This field is not part of the XMP or spec. It is used to
   * ensure we preserve data from the original file when offset is modified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMicrovideooriginaloffset() {
    return microvideooriginaloffset;
  }

  /**
   * This is similar to gcameramicrovideooffset, except it stores the unverified value that was
   * provided in the motion photo file. This field is not part of the XMP or spec. It is used to
   * ensure we preserve data from the original file when offset is modified.
   * @param microvideooriginaloffset microvideooriginaloffset or {@code null} for none
   */
  public PhotosImageMetadata setMicrovideooriginaloffset(java.lang.Integer microvideooriginaloffset) {
    this.microvideooriginaloffset = microvideooriginaloffset;
    return this;
  }

  /**
   * Mime type of image
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMimeType() {
    return mimeType;
  }

  /**
   * Mime type of image
   * @param mimeType mimeType or {@code null} for none
   */
  public PhotosImageMetadata setMimeType(java.lang.Integer mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMinormodelagedisclosure() {
    return minormodelagedisclosure;
  }

  /**
   * @param minormodelagedisclosure minormodelagedisclosure or {@code null} for none
   */
  public PhotosImageMetadata setMinormodelagedisclosure(java.lang.String minormodelagedisclosure) {
    this.minormodelagedisclosure = minormodelagedisclosure;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinsamplevalue() {
    return minsamplevalue;
  }

  /**
   * @param minsamplevalue minsamplevalue or {@code null} for none
   */
  public PhotosImageMetadata setMinsamplevalue(java.lang.Integer minsamplevalue) {
    this.minsamplevalue = minsamplevalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMode() {
    return mode;
  }

  /**
   * @param mode mode or {@code null} for none
   */
  public PhotosImageMetadata setMode(java.lang.Integer mode) {
    this.mode = mode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getModelage() {
    return modelage;
  }

  /**
   * @param modelage modelage or {@code null} for none
   */
  public PhotosImageMetadata setModelage(java.util.List<java.lang.Integer> modelage) {
    this.modelage = modelage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getModelreleaseid() {
    return modelreleaseid;
  }

  /**
   * @param modelreleaseid modelreleaseid or {@code null} for none
   */
  public PhotosImageMetadata setModelreleaseid(java.util.List<java.lang.String> modelreleaseid) {
    this.modelreleaseid = modelreleaseid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getModelreleasestatus() {
    return modelreleasestatus;
  }

  /**
   * @param modelreleasestatus modelreleasestatus or {@code null} for none
   */
  public PhotosImageMetadata setModelreleasestatus(java.lang.String modelreleasestatus) {
    this.modelreleasestatus = modelreleasestatus;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getModifydate() {
    return modifydate;
  }

  /**
   * @param modifydate modifydate or {@code null} for none
   */
  public PhotosImageMetadata setModifydate(java.lang.String modifydate) {
    this.modifydate = modifydate;
    return this;
  }

  /**
   * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for
   * reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more
   * details.
   * @see #decodeMotionphotovideodataboxheader()
   * @return value or {@code null} for none
   */
  public java.lang.String getMotionphotovideodataboxheader() {
    return motionphotovideodataboxheader;
  }

  /**
   * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for
   * reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more
   * details.
   * @see #getMotionphotovideodataboxheader()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeMotionphotovideodataboxheader() {
    return com.google.api.client.util.Base64.decodeBase64(motionphotovideodataboxheader);
  }

  /**
   * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for
   * reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more
   * details.
   * @see #encodeMotionphotovideodataboxheader()
   * @param motionphotovideodataboxheader motionphotovideodataboxheader or {@code null} for none
   */
  public PhotosImageMetadata setMotionphotovideodataboxheader(java.lang.String motionphotovideodataboxheader) {
    this.motionphotovideodataboxheader = motionphotovideodataboxheader;
    return this;
  }

  /**
   * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for
   * reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more
   * details.
   * @see #setMotionphotovideodataboxheader()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PhotosImageMetadata encodeMotionphotovideodataboxheader(byte[] motionphotovideodataboxheader) {
    this.motionphotovideodataboxheader = com.google.api.client.util.Base64.encodeBase64URLSafeString(motionphotovideodataboxheader);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getNickname() {
    return nickname;
  }

  /**
   * @param nickname nickname or {@code null} for none
   */
  public PhotosImageMetadata setNickname(java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getObjectattributereference() {
    return objectattributereference;
  }

  /**
   * @param objectattributereference objectattributereference or {@code null} for none
   */
  public PhotosImageMetadata setObjectattributereference(java.util.List<java.lang.String> objectattributereference) {
    this.objectattributereference = objectattributereference;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getObjectcycle() {
    return objectcycle;
  }

  /**
   * @param objectcycle objectcycle or {@code null} for none
   */
  public PhotosImageMetadata setObjectcycle(java.lang.String objectcycle) {
    this.objectcycle = objectcycle;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getObjecttypereference() {
    return objecttypereference;
  }

  /**
   * @param objecttypereference objecttypereference or {@code null} for none
   */
  public PhotosImageMetadata setObjecttypereference(java.lang.String objecttypereference) {
    this.objecttypereference = objecttypereference;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOffsettime() {
    return offsettime;
  }

  /**
   * @param offsettime offsettime or {@code null} for none
   */
  public PhotosImageMetadata setOffsettime(java.lang.String offsettime) {
    this.offsettime = offsettime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOffsettimedigitized() {
    return offsettimedigitized;
  }

  /**
   * @param offsettimedigitized offsettimedigitized or {@code null} for none
   */
  public PhotosImageMetadata setOffsettimedigitized(java.lang.String offsettimedigitized) {
    this.offsettimedigitized = offsettimedigitized;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOffsettimeoriginal() {
    return offsettimeoriginal;
  }

  /**
   * @param offsettimeoriginal offsettimeoriginal or {@code null} for none
   */
  public PhotosImageMetadata setOffsettimeoriginal(java.lang.String offsettimeoriginal) {
    this.offsettimeoriginal = offsettimeoriginal;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOrganisationinimagecode() {
    return organisationinimagecode;
  }

  /**
   * @param organisationinimagecode organisationinimagecode or {@code null} for none
   */
  public PhotosImageMetadata setOrganisationinimagecode(java.util.List<java.lang.String> organisationinimagecode) {
    this.organisationinimagecode = organisationinimagecode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOrganisationinimagename() {
    return organisationinimagename;
  }

  /**
   * @param organisationinimagename organisationinimagename or {@code null} for none
   */
  public PhotosImageMetadata setOrganisationinimagename(java.util.List<java.lang.String> organisationinimagename) {
    this.organisationinimagename = organisationinimagename;
    return this;
  }

  /**
   * Exif camera orientation. "1" means "no rotation".
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOrientation() {
    return orientation;
  }

  /**
   * Exif camera orientation. "1" means "no rotation".
   * @param orientation orientation or {@code null} for none
   */
  public PhotosImageMetadata setOrientation(java.lang.Integer orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginatingprogram() {
    return originatingprogram;
  }

  /**
   * @param originatingprogram originatingprogram or {@code null} for none
   */
  public PhotosImageMetadata setOriginatingprogram(java.lang.String originatingprogram) {
    this.originatingprogram = originatingprogram;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOwner() {
    return owner;
  }

  /**
   * @param owner owner or {@code null} for none
   */
  public PhotosImageMetadata setOwner(java.util.List<java.lang.String> owner) {
    this.owner = owner;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOwnername() {
    return ownername;
  }

  /**
   * @param ownername ownername or {@code null} for none
   */
  public PhotosImageMetadata setOwnername(java.lang.String ownername) {
    this.ownername = ownername;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosPanoramaMetadata getPanoramaMetadata() {
    return panoramaMetadata;
  }

  /**
   * @param panoramaMetadata panoramaMetadata or {@code null} for none
   */
  public PhotosImageMetadata setPanoramaMetadata(PhotosPanoramaMetadata panoramaMetadata) {
    this.panoramaMetadata = panoramaMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPersoninimage() {
    return personinimage;
  }

  /**
   * @param personinimage personinimage or {@code null} for none
   */
  public PhotosImageMetadata setPersoninimage(java.util.List<java.lang.String> personinimage) {
    this.personinimage = personinimage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPhotometricinterpretation() {
    return photometricinterpretation;
  }

  /**
   * @param photometricinterpretation photometricinterpretation or {@code null} for none
   */
  public PhotosImageMetadata setPhotometricinterpretation(java.lang.Integer photometricinterpretation) {
    this.photometricinterpretation = photometricinterpretation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPlanarconfiguration() {
    return planarconfiguration;
  }

  /**
   * @param planarconfiguration planarconfiguration or {@code null} for none
   */
  public PhotosImageMetadata setPlanarconfiguration(java.lang.Integer planarconfiguration) {
    this.planarconfiguration = planarconfiguration;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getPoseheadingdegrees() {
    return poseheadingdegrees;
  }

  /**
   * @param poseheadingdegrees poseheadingdegrees or {@code null} for none
   */
  public PhotosImageMetadata setPoseheadingdegrees(java.lang.Float poseheadingdegrees) {
    this.poseheadingdegrees = poseheadingdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getPosepitchdegrees() {
    return posepitchdegrees;
  }

  /**
   * @param posepitchdegrees posepitchdegrees or {@code null} for none
   */
  public PhotosImageMetadata setPosepitchdegrees(java.lang.Float posepitchdegrees) {
    this.posepitchdegrees = posepitchdegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getPoserolldegrees() {
    return poserolldegrees;
  }

  /**
   * @param poserolldegrees poserolldegrees or {@code null} for none
   */
  public PhotosImageMetadata setPoserolldegrees(java.lang.Float poserolldegrees) {
    this.poserolldegrees = poserolldegrees;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getPrimarychromaticities() {
    return primarychromaticities;
  }

  /**
   * @param primarychromaticities primarychromaticities or {@code null} for none
   */
  public PhotosImageMetadata setPrimarychromaticities(java.lang.Float primarychromaticities) {
    this.primarychromaticities = primarychromaticities;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getProductid() {
    return productid;
  }

  /**
   * @param productid productid or {@code null} for none
   */
  public PhotosImageMetadata setProductid(java.util.List<java.lang.String> productid) {
    this.productid = productid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getProgramversion() {
    return programversion;
  }

  /**
   * @param programversion programversion or {@code null} for none
   */
  public PhotosImageMetadata setProgramversion(java.lang.String programversion) {
    this.programversion = programversion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectiontype() {
    return projectiontype;
  }

  /**
   * @param projectiontype projectiontype or {@code null} for none
   */
  public PhotosImageMetadata setProjectiontype(java.lang.String projectiontype) {
    this.projectiontype = projectiontype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPropertyreleaseid() {
    return propertyreleaseid;
  }

  /**
   * @param propertyreleaseid propertyreleaseid or {@code null} for none
   */
  public PhotosImageMetadata setPropertyreleaseid(java.util.List<java.lang.String> propertyreleaseid) {
    this.propertyreleaseid = propertyreleaseid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPropertyreleasestatus() {
    return propertyreleasestatus;
  }

  /**
   * @param propertyreleasestatus propertyreleasestatus or {@code null} for none
   */
  public PhotosImageMetadata setPropertyreleasestatus(java.lang.String propertyreleasestatus) {
    this.propertyreleasestatus = propertyreleasestatus;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPublisher() {
    return publisher;
  }

  /**
   * @param publisher publisher or {@code null} for none
   */
  public PhotosImageMetadata setPublisher(java.util.List<java.lang.String> publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getRating() {
    return rating;
  }

  /**
   * @param rating rating or {@code null} for none
   */
  public PhotosImageMetadata setRating(java.lang.Float rating) {
    this.rating = rating;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRedeyemode() {
    return redeyemode;
  }

  /**
   * @param redeyemode redeyemode or {@code null} for none
   */
  public PhotosImageMetadata setRedeyemode(java.lang.Boolean redeyemode) {
    this.redeyemode = redeyemode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getReferenceblackwhite() {
    return referenceblackwhite;
  }

  /**
   * @param referenceblackwhite referenceblackwhite or {@code null} for none
   */
  public PhotosImageMetadata setReferenceblackwhite(java.lang.Float referenceblackwhite) {
    this.referenceblackwhite = referenceblackwhite;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getReferencedate() {
    return referencedate;
  }

  /**
   * @param referencedate referencedate or {@code null} for none
   */
  public PhotosImageMetadata setReferencedate(java.util.List<java.lang.String> referencedate) {
    this.referencedate = referencedate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getReferencenumber() {
    return referencenumber;
  }

  /**
   * @param referencenumber referencenumber or {@code null} for none
   */
  public PhotosImageMetadata setReferencenumber(java.util.List<java.lang.String> referencenumber) {
    this.referencenumber = referencenumber;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getReferenceservice() {
    return referenceservice;
  }

  /**
   * @param referenceservice referenceservice or {@code null} for none
   */
  public PhotosImageMetadata setReferenceservice(java.util.List<java.lang.String> referenceservice) {
    this.referenceservice = referenceservice;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRelatedimagefileformat() {
    return relatedimagefileformat;
  }

  /**
   * @param relatedimagefileformat relatedimagefileformat or {@code null} for none
   */
  public PhotosImageMetadata setRelatedimagefileformat(java.lang.String relatedimagefileformat) {
    this.relatedimagefileformat = relatedimagefileformat;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getRelatedimageheight() {
    return relatedimageheight;
  }

  /**
   * @param relatedimageheight relatedimageheight or {@code null} for none
   */
  public PhotosImageMetadata setRelatedimageheight(java.lang.Long relatedimageheight) {
    this.relatedimageheight = relatedimageheight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getRelatedimagewidth() {
    return relatedimagewidth;
  }

  /**
   * @param relatedimagewidth relatedimagewidth or {@code null} for none
   */
  public PhotosImageMetadata setRelatedimagewidth(java.lang.Long relatedimagewidth) {
    this.relatedimagewidth = relatedimagewidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRelatedsoundfile() {
    return relatedsoundfile;
  }

  /**
   * @param relatedsoundfile relatedsoundfile or {@code null} for none
   */
  public PhotosImageMetadata setRelatedsoundfile(java.lang.String relatedsoundfile) {
    this.relatedsoundfile = relatedsoundfile;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRelation() {
    return relation;
  }

  /**
   * @param relation relation or {@code null} for none
   */
  public PhotosImageMetadata setRelation(java.util.List<java.lang.String> relation) {
    this.relation = relation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getReleasedate() {
    return releasedate;
  }

  /**
   * @param releasedate releasedate or {@code null} for none
   */
  public PhotosImageMetadata setReleasedate(java.lang.String releasedate) {
    this.releasedate = releasedate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getReleasetime() {
    return releasetime;
  }

  /**
   * @param releasetime releasetime or {@code null} for none
   */
  public PhotosImageMetadata setReleasetime(java.lang.String releasetime) {
    this.releasetime = releasetime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getResolutionunit() {
    return resolutionunit;
  }

  /**
   * @param resolutionunit resolutionunit or {@code null} for none
   */
  public PhotosImageMetadata setResolutionunit(java.lang.Integer resolutionunit) {
    this.resolutionunit = resolutionunit;
    return this;
  }

  /**
   * being returned to caller Use values defined in "MIME_TYPE" This field is deprecated. Rotation
   * is now accomplished via ImageInfo.exif_orientation and ImageInfo.edit_list. Number of degrees
   * (0, 90, 180,
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRotate() {
    return rotate;
  }

  /**
   * being returned to caller Use values defined in "MIME_TYPE" This field is deprecated. Rotation
   * is now accomplished via ImageInfo.exif_orientation and ImageInfo.edit_list. Number of degrees
   * (0, 90, 180,
   * @param rotate rotate or {@code null} for none
   */
  public PhotosImageMetadata setRotate(java.lang.Integer rotate) {
    this.rotate = rotate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getRowsperstrip() {
    return rowsperstrip;
  }

  /**
   * @param rowsperstrip rowsperstrip or {@code null} for none
   */
  public PhotosImageMetadata setRowsperstrip(java.lang.Long rowsperstrip) {
    this.rowsperstrip = rowsperstrip;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSamplesperpixel() {
    return samplesperpixel;
  }

  /**
   * @param samplesperpixel samplesperpixel or {@code null} for none
   */
  public PhotosImageMetadata setSamplesperpixel(java.lang.Integer samplesperpixel) {
    this.samplesperpixel = samplesperpixel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSaturation() {
    return saturation;
  }

  /**
   * @param saturation saturation or {@code null} for none
   */
  public PhotosImageMetadata setSaturation(java.lang.Integer saturation) {
    this.saturation = saturation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScene() {
    return scene;
  }

  /**
   * @param scene scene or {@code null} for none
   */
  public PhotosImageMetadata setScene(java.util.List<java.lang.String> scene) {
    this.scene = scene;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScenecapturetype() {
    return scenecapturetype;
  }

  /**
   * @param scenecapturetype scenecapturetype or {@code null} for none
   */
  public PhotosImageMetadata setScenecapturetype(java.lang.Integer scenecapturetype) {
    this.scenecapturetype = scenecapturetype;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSensingmethod() {
    return sensingmethod;
  }

  /**
   * @param sensingmethod sensingmethod or {@code null} for none
   */
  public PhotosImageMetadata setSensingmethod(java.lang.Integer sensingmethod) {
    this.sensingmethod = sensingmethod;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getSensorheight() {
    return sensorheight;
  }

  /**
   * @param sensorheight sensorheight or {@code null} for none
   */
  public PhotosImageMetadata setSensorheight(java.lang.Float sensorheight) {
    this.sensorheight = sensorheight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getSensorwidth() {
    return sensorwidth;
  }

  /**
   * @param sensorwidth sensorwidth or {@code null} for none
   */
  public PhotosImageMetadata setSensorwidth(java.lang.Float sensorwidth) {
    this.sensorwidth = sensorwidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSerialnumber() {
    return serialnumber;
  }

  /**
   * @param serialnumber serialnumber or {@code null} for none
   */
  public PhotosImageMetadata setSerialnumber(java.lang.String serialnumber) {
    this.serialnumber = serialnumber;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceidentifier() {
    return serviceidentifier;
  }

  /**
   * @param serviceidentifier serviceidentifier or {@code null} for none
   */
  public PhotosImageMetadata setServiceidentifier(java.lang.String serviceidentifier) {
    this.serviceidentifier = serviceidentifier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSharpness() {
    return sharpness;
  }

  /**
   * @param sharpness sharpness or {@code null} for none
   */
  public PhotosImageMetadata setSharpness(java.lang.Integer sharpness) {
    this.sharpness = sharpness;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getShutterspeedvalue() {
    return shutterspeedvalue;
  }

  /**
   * @param shutterspeedvalue shutterspeedvalue or {@code null} for none
   */
  public PhotosImageMetadata setShutterspeedvalue(java.lang.Float shutterspeedvalue) {
    this.shutterspeedvalue = shutterspeedvalue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSoftware() {
    return software;
  }

  /**
   * @param software software or {@code null} for none
   */
  public PhotosImageMetadata setSoftware(java.lang.String software) {
    this.software = software;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * @param source source or {@code null} for none
   */
  public PhotosImageMetadata setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourcephotoscount() {
    return sourcephotoscount;
  }

  /**
   * @param sourcephotoscount sourcephotoscount or {@code null} for none
   */
  public PhotosImageMetadata setSourcephotoscount(java.lang.Integer sourcephotoscount) {
    this.sourcephotoscount = sourcephotoscount;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSpectralsensitivity() {
    return spectralsensitivity;
  }

  /**
   * @param spectralsensitivity spectralsensitivity or {@code null} for none
   */
  public PhotosImageMetadata setSpectralsensitivity(java.lang.String spectralsensitivity) {
    this.spectralsensitivity = spectralsensitivity;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * @param state state or {@code null} for none
   */
  public PhotosImageMetadata setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getStitchingsoftware() {
    return stitchingsoftware;
  }

  /**
   * @param stitchingsoftware stitchingsoftware or {@code null} for none
   */
  public PhotosImageMetadata setStitchingsoftware(java.lang.String stitchingsoftware) {
    this.stitchingsoftware = stitchingsoftware;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getStripbytecounts() {
    return stripbytecounts;
  }

  /**
   * @param stripbytecounts stripbytecounts or {@code null} for none
   */
  public PhotosImageMetadata setStripbytecounts(java.lang.Long stripbytecounts) {
    this.stripbytecounts = stripbytecounts;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getStripoffsets() {
    return stripoffsets;
  }

  /**
   * @param stripoffsets stripoffsets or {@code null} for none
   */
  public PhotosImageMetadata setStripoffsets(java.lang.Long stripoffsets) {
    this.stripoffsets = stripoffsets;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSubjectarea() {
    return subjectarea;
  }

  /**
   * @param subjectarea subjectarea or {@code null} for none
   */
  public PhotosImageMetadata setSubjectarea(java.lang.Integer subjectarea) {
    this.subjectarea = subjectarea;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSubjectcode() {
    return subjectcode;
  }

  /**
   * @param subjectcode subjectcode or {@code null} for none
   */
  public PhotosImageMetadata setSubjectcode(java.util.List<java.lang.String> subjectcode) {
    this.subjectcode = subjectcode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSubjectdistancerange() {
    return subjectdistancerange;
  }

  /**
   * @param subjectdistancerange subjectdistancerange or {@code null} for none
   */
  public PhotosImageMetadata setSubjectdistancerange(java.lang.Integer subjectdistancerange) {
    this.subjectdistancerange = subjectdistancerange;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSubjectlocation() {
    return subjectlocation;
  }

  /**
   * @param subjectlocation subjectlocation or {@code null} for none
   */
  public PhotosImageMetadata setSubjectlocation(java.lang.Integer subjectlocation) {
    this.subjectlocation = subjectlocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSubjectreference() {
    return subjectreference;
  }

  /**
   * @param subjectreference subjectreference or {@code null} for none
   */
  public PhotosImageMetadata setSubjectreference(java.util.List<java.lang.String> subjectreference) {
    this.subjectreference = subjectreference;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSublocation() {
    return sublocation;
  }

  /**
   * @param sublocation sublocation or {@code null} for none
   */
  public PhotosImageMetadata setSublocation(java.lang.String sublocation) {
    this.sublocation = sublocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSubsectime() {
    return subsectime;
  }

  /**
   * @param subsectime subsectime or {@code null} for none
   */
  public PhotosImageMetadata setSubsectime(java.lang.String subsectime) {
    this.subsectime = subsectime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSubsectimedigitized() {
    return subsectimedigitized;
  }

  /**
   * @param subsectimedigitized subsectimedigitized or {@code null} for none
   */
  public PhotosImageMetadata setSubsectimedigitized(java.lang.String subsectimedigitized) {
    this.subsectimedigitized = subsectimedigitized;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSubsectimeoriginal() {
    return subsectimeoriginal;
  }

  /**
   * @param subsectimeoriginal subsectimeoriginal or {@code null} for none
   */
  public PhotosImageMetadata setSubsectimeoriginal(java.lang.String subsectimeoriginal) {
    this.subsectimeoriginal = subsectimeoriginal;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupplementalcategory() {
    return supplementalcategory;
  }

  /**
   * @param supplementalcategory supplementalcategory or {@code null} for none
   */
  public PhotosImageMetadata setSupplementalcategory(java.util.List<java.lang.String> supplementalcategory) {
    this.supplementalcategory = supplementalcategory;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThresholding() {
    return thresholding;
  }

  /**
   * @param thresholding thresholding or {@code null} for none
   */
  public PhotosImageMetadata setThresholding(java.lang.Integer thresholding) {
    this.thresholding = thresholding;
    return this;
  }

  /**
   * The build CL for the version of thumbnailer that built this image.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThumbnailerBuildCl() {
    return thumbnailerBuildCl;
  }

  /**
   * The build CL for the version of thumbnailer that built this image.
   * @param thumbnailerBuildCl thumbnailerBuildCl or {@code null} for none
   */
  public PhotosImageMetadata setThumbnailerBuildCl(java.lang.Integer thumbnailerBuildCl) {
    this.thumbnailerBuildCl = thumbnailerBuildCl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getTimesent() {
    return timesent;
  }

  /**
   * @param timesent timesent or {@code null} for none
   */
  public PhotosImageMetadata setTimesent(java.lang.String timesent) {
    this.timesent = timesent;
    return this;
  }

  /**
   * Remaining minutes of offset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getTimezoneminutes() {
    return timezoneminutes;
  }

  /**
   * Remaining minutes of offset.
   * @param timezoneminutes timezoneminutes or {@code null} for none
   */
  public PhotosImageMetadata setTimezoneminutes(java.util.List<java.lang.Integer> timezoneminutes) {
    this.timezoneminutes = timezoneminutes;
    return this;
  }

  /**
   * The elements in the timezone and daylight savings field arrays correspond to the following
   * date/time fields: 0) datecreated (ie. DateTimeOriginal) 1) datetime (ie. DateTime or last
   * modified date) 2) datetimedigitized (ie. DateTimeDigitized) If the field does not exist, then
   * there is no valid time zone information for that date/time field. Offset in hours.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getTimezoneoffset() {
    return timezoneoffset;
  }

  /**
   * The elements in the timezone and daylight savings field arrays correspond to the following
   * date/time fields: 0) datecreated (ie. DateTimeOriginal) 1) datetime (ie. DateTime or last
   * modified date) 2) datetimedigitized (ie. DateTimeDigitized) If the field does not exist, then
   * there is no valid time zone information for that date/time field. Offset in hours.
   * @param timezoneoffset timezoneoffset or {@code null} for none
   */
  public PhotosImageMetadata setTimezoneoffset(java.util.List<java.lang.Integer> timezoneoffset) {
    this.timezoneoffset = timezoneoffset;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * @param title title or {@code null} for none
   */
  public PhotosImageMetadata setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getTransmissionreference() {
    return transmissionreference;
  }

  /**
   * @param transmissionreference transmissionreference or {@code null} for none
   */
  public PhotosImageMetadata setTransmissionreference(java.lang.String transmissionreference) {
    this.transmissionreference = transmissionreference;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public PhotosImageMetadata setType(java.util.List<java.lang.String> type) {
    this.type = type;
    return this;
  }

  /**
   * For unique hash:
   * @return value or {@code null} for none
   */
  public java.lang.String getUniqueid() {
    return uniqueid;
  }

  /**
   * For unique hash:
   * @param uniqueid uniqueid or {@code null} for none
   */
  public PhotosImageMetadata setUniqueid(java.lang.String uniqueid) {
    this.uniqueid = uniqueid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUno() {
    return uno;
  }

  /**
   * @param uno uno or {@code null} for none
   */
  public PhotosImageMetadata setUno(java.lang.String uno) {
    this.uno = uno;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUrgency() {
    return urgency;
  }

  /**
   * @param urgency urgency or {@code null} for none
   */
  public PhotosImageMetadata setUrgency(java.lang.String urgency) {
    this.urgency = urgency;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * @param url url or {@code null} for none
   */
  public PhotosImageMetadata setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUsageterms() {
    return usageterms;
  }

  /**
   * @param usageterms usageterms or {@code null} for none
   */
  public PhotosImageMetadata setUsageterms(java.lang.String usageterms) {
    this.usageterms = usageterms;
    return this;
  }

  /**
   * GPano-related fields. A handful of these have been deprecated due to a change in the spec since
   * its initial design.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUsepanoramaviewer() {
    return usepanoramaviewer;
  }

  /**
   * GPano-related fields. A handful of these have been deprecated due to a change in the spec since
   * its initial design.
   * @param usepanoramaviewer usepanoramaviewer or {@code null} for none
   */
  public PhotosImageMetadata setUsepanoramaviewer(java.lang.Boolean usepanoramaviewer) {
    this.usepanoramaviewer = usepanoramaviewer;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * @param version version or {@code null} for none
   */
  public PhotosImageMetadata setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getWebstatement() {
    return webstatement;
  }

  /**
   * @param webstatement webstatement or {@code null} for none
   */
  public PhotosImageMetadata setWebstatement(java.lang.String webstatement) {
    this.webstatement = webstatement;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWhitebalance() {
    return whitebalance;
  }

  /**
   * @param whitebalance whitebalance or {@code null} for none
   */
  public PhotosImageMetadata setWhitebalance(java.lang.Integer whitebalance) {
    this.whitebalance = whitebalance;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getWhitepoint() {
    return whitepoint;
  }

  /**
   * @param whitepoint whitepoint or {@code null} for none
   */
  public PhotosImageMetadata setWhitepoint(java.lang.Float whitepoint) {
    this.whitepoint = whitepoint;
    return this;
  }

  /**
   * width and height are before any rotation (including EXIF orientation).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * width and height are before any rotation (including EXIF orientation).
   * @param width width or {@code null} for none
   */
  public PhotosImageMetadata setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosFourCMetadata getXmp4c() {
    return xmp4c;
  }

  /**
   * @param xmp4c xmp4c or {@code null} for none
   */
  public PhotosImageMetadata setXmp4c(PhotosFourCMetadata xmp4c) {
    this.xmp4c = xmp4c;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getXresolution() {
    return xresolution;
  }

  /**
   * @param xresolution xresolution or {@code null} for none
   */
  public PhotosImageMetadata setXresolution(java.lang.Float xresolution) {
    this.xresolution = xresolution;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getYcbcrcoefficients() {
    return ycbcrcoefficients;
  }

  /**
   * @param ycbcrcoefficients ycbcrcoefficients or {@code null} for none
   */
  public PhotosImageMetadata setYcbcrcoefficients(java.lang.Float ycbcrcoefficients) {
    this.ycbcrcoefficients = ycbcrcoefficients;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYcbcrpositioning() {
    return ycbcrpositioning;
  }

  /**
   * @param ycbcrpositioning ycbcrpositioning or {@code null} for none
   */
  public PhotosImageMetadata setYcbcrpositioning(java.lang.Integer ycbcrpositioning) {
    this.ycbcrpositioning = ycbcrpositioning;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYcbcrsubsampling() {
    return ycbcrsubsampling;
  }

  /**
   * @param ycbcrsubsampling ycbcrsubsampling or {@code null} for none
   */
  public PhotosImageMetadata setYcbcrsubsampling(java.lang.Integer ycbcrsubsampling) {
    this.ycbcrsubsampling = ycbcrsubsampling;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getYresolution() {
    return yresolution;
  }

  /**
   * @param yresolution yresolution or {@code null} for none
   */
  public PhotosImageMetadata setYresolution(java.lang.Float yresolution) {
    this.yresolution = yresolution;
    return this;
  }

  @Override
  public PhotosImageMetadata set(String fieldName, Object value) {
    return (PhotosImageMetadata) super.set(fieldName, value);
  }

  @Override
  public PhotosImageMetadata clone() {
    return (PhotosImageMetadata) super.clone();
  }

}
