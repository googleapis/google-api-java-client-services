/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The goal of the special words are to: - Canonicalize the user query by rewriting abbreviations
 * into the canonical version that is indexed. - Figure out at index time for each element which
 * tokens are important. We use this to decide if an address component is matched or not. For
 * instance in "1600 Pennsylvania Ave NW" since "NW" is recognised as a directional (and "Ave" is
 * recognised as a street visible type), "Pennsylvania" becomes the name and you can't match this
 * street by just specifying "avenue" or "NW".
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MapsQualitySpecialWordsProto extends com.google.api.client.json.GenericJson {

  /**
   * Alternate versions of this canonical form. This is mainly abbreviations of the canonical form
   * e.g. "St", "NE", etc. This should be present as it is used in the specified language with the
   * correct capitalization, accents, etc. in UTF-8.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> alternate;

  /**
   * Canonical versions: the version which is in oyster. This should be present as it is used in the
   * specified language with the correct capitalization, accents, etc. in UTF-8. The canonical can
   * be a single or a multi-token string. There can be several canonicals, e.g. "center" and
   * "centre" in English.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> canonical;

  /**
   * If empty, apply this rule to any country. Otherwise, a list of ISO 3166-1 alpha-2 (2-letter
   * uppercase) country codes that this description applies to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> country;

  /**
   * Boolean flags indicating what type of special word this is.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MapsQualitySpecialWordsFlags flags;

  /**
   * The III language code of the language that this description applies to. No language means that
   * this applies worldwide. This could be useful for codes like country codes or airport codes or
   * for displayed language neutral icons. A special word with a language code here also applies to
   * the regional variants of that language (e.g. "en" applies to "en-GB" and "en-US" as well).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> language;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String position;

  /**
   * visible_type_id from VisibleTypeProto for visible types converted to the special words. For
   * original special words this field is empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> visibleTypeId;

  /**
   * Alternate versions of this canonical form. This is mainly abbreviations of the canonical form
   * e.g. "St", "NE", etc. This should be present as it is used in the specified language with the
   * correct capitalization, accents, etc. in UTF-8.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAlternate() {
    return alternate;
  }

  /**
   * Alternate versions of this canonical form. This is mainly abbreviations of the canonical form
   * e.g. "St", "NE", etc. This should be present as it is used in the specified language with the
   * correct capitalization, accents, etc. in UTF-8.
   * @param alternate alternate or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setAlternate(java.util.List<java.lang.String> alternate) {
    this.alternate = alternate;
    return this;
  }

  /**
   * Canonical versions: the version which is in oyster. This should be present as it is used in the
   * specified language with the correct capitalization, accents, etc. in UTF-8. The canonical can
   * be a single or a multi-token string. There can be several canonicals, e.g. "center" and
   * "centre" in English.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCanonical() {
    return canonical;
  }

  /**
   * Canonical versions: the version which is in oyster. This should be present as it is used in the
   * specified language with the correct capitalization, accents, etc. in UTF-8. The canonical can
   * be a single or a multi-token string. There can be several canonicals, e.g. "center" and
   * "centre" in English.
   * @param canonical canonical or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setCanonical(java.util.List<java.lang.String> canonical) {
    this.canonical = canonical;
    return this;
  }

  /**
   * If empty, apply this rule to any country. Otherwise, a list of ISO 3166-1 alpha-2 (2-letter
   * uppercase) country codes that this description applies to.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCountry() {
    return country;
  }

  /**
   * If empty, apply this rule to any country. Otherwise, a list of ISO 3166-1 alpha-2 (2-letter
   * uppercase) country codes that this description applies to.
   * @param country country or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setCountry(java.util.List<java.lang.String> country) {
    this.country = country;
    return this;
  }

  /**
   * Boolean flags indicating what type of special word this is.
   * @return value or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags getFlags() {
    return flags;
  }

  /**
   * Boolean flags indicating what type of special word this is.
   * @param flags flags or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setFlags(MapsQualitySpecialWordsFlags flags) {
    this.flags = flags;
    return this;
  }

  /**
   * The III language code of the language that this description applies to. No language means that
   * this applies worldwide. This could be useful for codes like country codes or airport codes or
   * for displayed language neutral icons. A special word with a language code here also applies to
   * the regional variants of that language (e.g. "en" applies to "en-GB" and "en-US" as well).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLanguage() {
    return language;
  }

  /**
   * The III language code of the language that this description applies to. No language means that
   * this applies worldwide. This could be useful for codes like country codes or airport codes or
   * for displayed language neutral icons. A special word with a language code here also applies to
   * the regional variants of that language (e.g. "en" applies to "en-GB" and "en-US" as well).
   * @param language language or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setLanguage(java.util.List<java.lang.String> language) {
    this.language = language;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPosition() {
    return position;
  }

  /**
   * @param position position or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setPosition(java.lang.String position) {
    this.position = position;
    return this;
  }

  /**
   * visible_type_id from VisibleTypeProto for visible types converted to the special words. For
   * original special words this field is empty.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVisibleTypeId() {
    return visibleTypeId;
  }

  /**
   * visible_type_id from VisibleTypeProto for visible types converted to the special words. For
   * original special words this field is empty.
   * @param visibleTypeId visibleTypeId or {@code null} for none
   */
  public MapsQualitySpecialWordsProto setVisibleTypeId(java.util.List<java.lang.String> visibleTypeId) {
    this.visibleTypeId = visibleTypeId;
    return this;
  }

  @Override
  public MapsQualitySpecialWordsProto set(String fieldName, Object value) {
    return (MapsQualitySpecialWordsProto) super.set(fieldName, value);
  }

  @Override
  public MapsQualitySpecialWordsProto clone() {
    return (MapsQualitySpecialWordsProto) super.clone();
  }

}
