/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dfareporting.model;

/**
 * This message is for backends to pass their scotty media specific fields to ESF. Backend will
 * include this in their response message to ESF. Example: ExportFile is an rpc defined for upload
 * using scotty from ESF. rpc ExportFile(ExportFileRequest) returns (ExportFileResponse) Message
 * ExportFileResponse will include apiserving.MediaResponseInfo to tell ESF about data like
 * dynamic_dropzone it needs to pass to Scotty. message ExportFileResponse { optional gdata.Media
 * blob = 1; optional apiserving.MediaResponseInfo media_response_info = 2 }
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the DCM/DFA Reporting And Trafficking API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MediaResponseInfo extends com.google.api.client.json.GenericJson {

  /**
   * Data to copy from backend response to the next backend requests. Custom data is returned to
   * Scotty in the agent_state field, which Scotty will then provide in subsequent upload
   * notifications.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String customData;

  /**
   * Specifies any transformation to be applied to data before persisting it or retrieving from
   * storage. E.g., encryption options for blobstore2. This should be of the form
   * uploader_service.DataStorageTransform.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataStorageTransform;

  /**
   * Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty
   * does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the
   * location specified in this drop target. Unlike drop zones, the drop target is the final storage
   * location for an upload. So, the agent does not need to clone the blob at the end of the upload.
   * The agent is responsible for garbage collecting any orphaned blobs that may occur due to
   * aborted uploads. For more information, see the drop target design doc here:
   * http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the
   * identified field in the response must be of the type uploader.agent.DropTarget.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dynamicDropTarget;

  /**
   * Specifies the Scotty dropzone to use for uploads.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dynamicDropzone;

  /**
   * Request class to use for all Blobstore operations for this request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requestClass;

  /**
   * Specifies the TrafficClass that Scotty should use for any RPCs to fetch the response bytes.
   * Will override the traffic class GTOS of the incoming http request. This is a temporary field to
   * facilitate whitelisting and experimentation by the bigstore agent only. For instance, this does
   * not apply to RTMP reads. WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String trafficClassField;

  /**
   * Tells Scotty to verify hashes on the agent's behalf by parsing out the X-Goog-Hash header.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean verifyHashFromHeader;

  /**
   * Data to copy from backend response to the next backend requests. Custom data is returned to
   * Scotty in the agent_state field, which Scotty will then provide in subsequent upload
   * notifications.
   * @return value or {@code null} for none
   */
  public java.lang.String getCustomData() {
    return customData;
  }

  /**
   * Data to copy from backend response to the next backend requests. Custom data is returned to
   * Scotty in the agent_state field, which Scotty will then provide in subsequent upload
   * notifications.
   * @param customData customData or {@code null} for none
   */
  public MediaResponseInfo setCustomData(java.lang.String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Specifies any transformation to be applied to data before persisting it or retrieving from
   * storage. E.g., encryption options for blobstore2. This should be of the form
   * uploader_service.DataStorageTransform.
   * @see #decodeDataStorageTransform()
   * @return value or {@code null} for none
   */
  public java.lang.String getDataStorageTransform() {
    return dataStorageTransform;
  }

  /**
   * Specifies any transformation to be applied to data before persisting it or retrieving from
   * storage. E.g., encryption options for blobstore2. This should be of the form
   * uploader_service.DataStorageTransform.
   * @see #getDataStorageTransform()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeDataStorageTransform() {
    return com.google.api.client.util.Base64.decodeBase64(dataStorageTransform);
  }

  /**
   * Specifies any transformation to be applied to data before persisting it or retrieving from
   * storage. E.g., encryption options for blobstore2. This should be of the form
   * uploader_service.DataStorageTransform.
   * @see #encodeDataStorageTransform()
   * @param dataStorageTransform dataStorageTransform or {@code null} for none
   */
  public MediaResponseInfo setDataStorageTransform(java.lang.String dataStorageTransform) {
    this.dataStorageTransform = dataStorageTransform;
    return this;
  }

  /**
   * Specifies any transformation to be applied to data before persisting it or retrieving from
   * storage. E.g., encryption options for blobstore2. This should be of the form
   * uploader_service.DataStorageTransform.
   * @see #setDataStorageTransform()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public MediaResponseInfo encodeDataStorageTransform(byte[] dataStorageTransform) {
    this.dataStorageTransform = com.google.api.client.util.Base64.encodeBase64URLSafeString(dataStorageTransform);
    return this;
  }

  /**
   * Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty
   * does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the
   * location specified in this drop target. Unlike drop zones, the drop target is the final storage
   * location for an upload. So, the agent does not need to clone the blob at the end of the upload.
   * The agent is responsible for garbage collecting any orphaned blobs that may occur due to
   * aborted uploads. For more information, see the drop target design doc here:
   * http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the
   * identified field in the response must be of the type uploader.agent.DropTarget.
   * @see #decodeDynamicDropTarget()
   * @return value or {@code null} for none
   */
  public java.lang.String getDynamicDropTarget() {
    return dynamicDropTarget;
  }

  /**
   * Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty
   * does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the
   * location specified in this drop target. Unlike drop zones, the drop target is the final storage
   * location for an upload. So, the agent does not need to clone the blob at the end of the upload.
   * The agent is responsible for garbage collecting any orphaned blobs that may occur due to
   * aborted uploads. For more information, see the drop target design doc here:
   * http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the
   * identified field in the response must be of the type uploader.agent.DropTarget.
   * @see #getDynamicDropTarget()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeDynamicDropTarget() {
    return com.google.api.client.util.Base64.decodeBase64(dynamicDropTarget);
  }

  /**
   * Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty
   * does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the
   * location specified in this drop target. Unlike drop zones, the drop target is the final storage
   * location for an upload. So, the agent does not need to clone the blob at the end of the upload.
   * The agent is responsible for garbage collecting any orphaned blobs that may occur due to
   * aborted uploads. For more information, see the drop target design doc here:
   * http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the
   * identified field in the response must be of the type uploader.agent.DropTarget.
   * @see #encodeDynamicDropTarget()
   * @param dynamicDropTarget dynamicDropTarget or {@code null} for none
   */
  public MediaResponseInfo setDynamicDropTarget(java.lang.String dynamicDropTarget) {
    this.dynamicDropTarget = dynamicDropTarget;
    return this;
  }

  /**
   * Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty
   * does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the
   * location specified in this drop target. Unlike drop zones, the drop target is the final storage
   * location for an upload. So, the agent does not need to clone the blob at the end of the upload.
   * The agent is responsible for garbage collecting any orphaned blobs that may occur due to
   * aborted uploads. For more information, see the drop target design doc here:
   * http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the
   * identified field in the response must be of the type uploader.agent.DropTarget.
   * @see #setDynamicDropTarget()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public MediaResponseInfo encodeDynamicDropTarget(byte[] dynamicDropTarget) {
    this.dynamicDropTarget = com.google.api.client.util.Base64.encodeBase64URLSafeString(dynamicDropTarget);
    return this;
  }

  /**
   * Specifies the Scotty dropzone to use for uploads.
   * @return value or {@code null} for none
   */
  public java.lang.String getDynamicDropzone() {
    return dynamicDropzone;
  }

  /**
   * Specifies the Scotty dropzone to use for uploads.
   * @param dynamicDropzone dynamicDropzone or {@code null} for none
   */
  public MediaResponseInfo setDynamicDropzone(java.lang.String dynamicDropzone) {
    this.dynamicDropzone = dynamicDropzone;
    return this;
  }

  /**
   * Request class to use for all Blobstore operations for this request.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequestClass() {
    return requestClass;
  }

  /**
   * Request class to use for all Blobstore operations for this request.
   * @param requestClass requestClass or {@code null} for none
   */
  public MediaResponseInfo setRequestClass(java.lang.String requestClass) {
    this.requestClass = requestClass;
    return this;
  }

  /**
   * Specifies the TrafficClass that Scotty should use for any RPCs to fetch the response bytes.
   * Will override the traffic class GTOS of the incoming http request. This is a temporary field to
   * facilitate whitelisting and experimentation by the bigstore agent only. For instance, this does
   * not apply to RTMP reads. WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.
   * @return value or {@code null} for none
   */
  public java.lang.String getTrafficClassField() {
    return trafficClassField;
  }

  /**
   * Specifies the TrafficClass that Scotty should use for any RPCs to fetch the response bytes.
   * Will override the traffic class GTOS of the incoming http request. This is a temporary field to
   * facilitate whitelisting and experimentation by the bigstore agent only. For instance, this does
   * not apply to RTMP reads. WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.
   * @param trafficClassField trafficClassField or {@code null} for none
   */
  public MediaResponseInfo setTrafficClassField(java.lang.String trafficClassField) {
    this.trafficClassField = trafficClassField;
    return this;
  }

  /**
   * Tells Scotty to verify hashes on the agent's behalf by parsing out the X-Goog-Hash header.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getVerifyHashFromHeader() {
    return verifyHashFromHeader;
  }

  /**
   * Tells Scotty to verify hashes on the agent's behalf by parsing out the X-Goog-Hash header.
   * @param verifyHashFromHeader verifyHashFromHeader or {@code null} for none
   */
  public MediaResponseInfo setVerifyHashFromHeader(java.lang.Boolean verifyHashFromHeader) {
    this.verifyHashFromHeader = verifyHashFromHeader;
    return this;
  }

  @Override
  public MediaResponseInfo set(String fieldName, Object value) {
    return (MediaResponseInfo) super.set(fieldName, value);
  }

  @Override
  public MediaResponseInfo clone() {
    return (MediaResponseInfo) super.clone();
  }

}
