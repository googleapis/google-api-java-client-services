/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v3.model;

/**
 * A condition type that checks whether a log message in the scoping project
 * (https://cloud.google.com/monitoring/api/v3#project_name) satisfies the given filter. Logs from
 * other projects in the metrics scope are not evaluated.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LogMatch extends com.google.api.client.json.GenericJson {

  /**
   * Required. A logs-based filter. See Advanced Logs Queries for how this filter should be
   * constructed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Optional. A map from a label key to an extractor expression, which is used to extract the value
   * for this label key. Each entry in this map is a specification for how data should be extracted
   * from log entries that match filter. Each combination of extracted values is treated as a
   * separate rule for the purposes of triggering notifications. Label keys and corresponding values
   * can be used in notifications generated by this condition.Please see the documentation on logs-
   * based metric valueExtractors for syntax and examples.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labelExtractors;

  /**
   * Required. A logs-based filter. See Advanced Logs Queries for how this filter should be
   * constructed.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Required. A logs-based filter. See Advanced Logs Queries for how this filter should be
   * constructed.
   * @param filter filter or {@code null} for none
   */
  public LogMatch setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Optional. A map from a label key to an extractor expression, which is used to extract the value
   * for this label key. Each entry in this map is a specification for how data should be extracted
   * from log entries that match filter. Each combination of extracted values is treated as a
   * separate rule for the purposes of triggering notifications. Label keys and corresponding values
   * can be used in notifications generated by this condition.Please see the documentation on logs-
   * based metric valueExtractors for syntax and examples.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabelExtractors() {
    return labelExtractors;
  }

  /**
   * Optional. A map from a label key to an extractor expression, which is used to extract the value
   * for this label key. Each entry in this map is a specification for how data should be extracted
   * from log entries that match filter. Each combination of extracted values is treated as a
   * separate rule for the purposes of triggering notifications. Label keys and corresponding values
   * can be used in notifications generated by this condition.Please see the documentation on logs-
   * based metric valueExtractors for syntax and examples.
   * @param labelExtractors labelExtractors or {@code null} for none
   */
  public LogMatch setLabelExtractors(java.util.Map<String, java.lang.String> labelExtractors) {
    this.labelExtractors = labelExtractors;
    return this;
  }

  @Override
  public LogMatch set(String fieldName, Object value) {
    return (LogMatch) super.set(fieldName, value);
  }

  @Override
  public LogMatch clone() {
    return (LogMatch) super.clone();
  }

}
