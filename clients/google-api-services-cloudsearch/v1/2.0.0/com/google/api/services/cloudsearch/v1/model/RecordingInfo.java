/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * This message is deprecated, please use RecordingSessionInfo instead. Information about recording
 * in the current conference.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RecordingInfo extends com.google.api.client.json.GenericJson {

  /**
   * The latest recording event. This can be used by clients to help explain what is going on, why
   * recording stopped, etc. This will always be set if there is or was an active recording, which
   * means there can be latest event when recording is INACTIVE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RecordingEvent latestRecordingEvent;

  /**
   * The display name of the owner of the recording output. Email notifications about uploaded
   * recordings will also be sent to this owner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ownerDisplayName;

  /**
   * The device resource name of the producer device for the currently active recording. Note that,
   * after the producer drops/leaves the conference, this field will be cleaned up by the server
   * after a delay.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String producerDeviceId;

  /**
   * The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED`
   * if `recording_status` is inactive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordingApplicationType;

  /**
   * An identifier for the current recording, if any. This is returned whenever recording_status is
   * either `RECORDING_STARTING` or `RECORDING_STARTED`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordingId;

  /**
   * The current status of the recording. This can be used by clients to show a recording dot or
   * similar to indicated to the user that a recording is taking place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordingStatus;

  /**
   * The latest recording event. This can be used by clients to help explain what is going on, why
   * recording stopped, etc. This will always be set if there is or was an active recording, which
   * means there can be latest event when recording is INACTIVE.
   * @return value or {@code null} for none
   */
  public RecordingEvent getLatestRecordingEvent() {
    return latestRecordingEvent;
  }

  /**
   * The latest recording event. This can be used by clients to help explain what is going on, why
   * recording stopped, etc. This will always be set if there is or was an active recording, which
   * means there can be latest event when recording is INACTIVE.
   * @param latestRecordingEvent latestRecordingEvent or {@code null} for none
   */
  public RecordingInfo setLatestRecordingEvent(RecordingEvent latestRecordingEvent) {
    this.latestRecordingEvent = latestRecordingEvent;
    return this;
  }

  /**
   * The display name of the owner of the recording output. Email notifications about uploaded
   * recordings will also be sent to this owner.
   * @return value or {@code null} for none
   */
  public java.lang.String getOwnerDisplayName() {
    return ownerDisplayName;
  }

  /**
   * The display name of the owner of the recording output. Email notifications about uploaded
   * recordings will also be sent to this owner.
   * @param ownerDisplayName ownerDisplayName or {@code null} for none
   */
  public RecordingInfo setOwnerDisplayName(java.lang.String ownerDisplayName) {
    this.ownerDisplayName = ownerDisplayName;
    return this;
  }

  /**
   * The device resource name of the producer device for the currently active recording. Note that,
   * after the producer drops/leaves the conference, this field will be cleaned up by the server
   * after a delay.
   * @return value or {@code null} for none
   */
  public java.lang.String getProducerDeviceId() {
    return producerDeviceId;
  }

  /**
   * The device resource name of the producer device for the currently active recording. Note that,
   * after the producer drops/leaves the conference, this field will be cleaned up by the server
   * after a delay.
   * @param producerDeviceId producerDeviceId or {@code null} for none
   */
  public RecordingInfo setProducerDeviceId(java.lang.String producerDeviceId) {
    this.producerDeviceId = producerDeviceId;
    return this;
  }

  /**
   * The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED`
   * if `recording_status` is inactive.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordingApplicationType() {
    return recordingApplicationType;
  }

  /**
   * The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED`
   * if `recording_status` is inactive.
   * @param recordingApplicationType recordingApplicationType or {@code null} for none
   */
  public RecordingInfo setRecordingApplicationType(java.lang.String recordingApplicationType) {
    this.recordingApplicationType = recordingApplicationType;
    return this;
  }

  /**
   * An identifier for the current recording, if any. This is returned whenever recording_status is
   * either `RECORDING_STARTING` or `RECORDING_STARTED`.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordingId() {
    return recordingId;
  }

  /**
   * An identifier for the current recording, if any. This is returned whenever recording_status is
   * either `RECORDING_STARTING` or `RECORDING_STARTED`.
   * @param recordingId recordingId or {@code null} for none
   */
  public RecordingInfo setRecordingId(java.lang.String recordingId) {
    this.recordingId = recordingId;
    return this;
  }

  /**
   * The current status of the recording. This can be used by clients to show a recording dot or
   * similar to indicated to the user that a recording is taking place.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordingStatus() {
    return recordingStatus;
  }

  /**
   * The current status of the recording. This can be used by clients to show a recording dot or
   * similar to indicated to the user that a recording is taking place.
   * @param recordingStatus recordingStatus or {@code null} for none
   */
  public RecordingInfo setRecordingStatus(java.lang.String recordingStatus) {
    this.recordingStatus = recordingStatus;
    return this;
  }

  @Override
  public RecordingInfo set(String fieldName, Object value) {
    return (RecordingInfo) super.set(fieldName, value);
  }

  @Override
  public RecordingInfo clone() {
    return (RecordingInfo) super.clone();
  }

}
