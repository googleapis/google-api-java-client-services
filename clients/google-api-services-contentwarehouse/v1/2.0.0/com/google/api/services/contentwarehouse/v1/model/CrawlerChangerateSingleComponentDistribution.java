/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Proto contains parameters of a single component distribution.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CrawlerChangerateSingleComponentDistribution extends com.google.api.client.json.GenericJson {

  /**
   * Scaling factor to ensure the approximated posterior to have the same scale as the product of
   * prior and likelihood. This value is used to compute posterior weights. Uses log scale to
   * provide a wider range. This field is for internal use only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float logScaling;

  /**
   * The type indicates the type of the distribution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The weight is only used in multiple component scenarios.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float weight;

  /**
   * Scaling factor to ensure the approximated posterior to have the same scale as the product of
   * prior and likelihood. This value is used to compute posterior weights. Uses log scale to
   * provide a wider range. This field is for internal use only.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLogScaling() {
    return logScaling;
  }

  /**
   * Scaling factor to ensure the approximated posterior to have the same scale as the product of
   * prior and likelihood. This value is used to compute posterior weights. Uses log scale to
   * provide a wider range. This field is for internal use only.
   * @param logScaling logScaling or {@code null} for none
   */
  public CrawlerChangerateSingleComponentDistribution setLogScaling(java.lang.Float logScaling) {
    this.logScaling = logScaling;
    return this;
  }

  /**
   * The type indicates the type of the distribution.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type indicates the type of the distribution.
   * @param type type or {@code null} for none
   */
  public CrawlerChangerateSingleComponentDistribution setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The weight is only used in multiple component scenarios.
   * @return value or {@code null} for none
   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * The weight is only used in multiple component scenarios.
   * @param weight weight or {@code null} for none
   */
  public CrawlerChangerateSingleComponentDistribution setWeight(java.lang.Float weight) {
    this.weight = weight;
    return this;
  }

  @Override
  public CrawlerChangerateSingleComponentDistribution set(String fieldName, Object value) {
    return (CrawlerChangerateSingleComponentDistribution) super.set(fieldName, value);
  }

  @Override
  public CrawlerChangerateSingleComponentDistribution clone() {
    return (CrawlerChangerateSingleComponentDistribution) super.clone();
  }

}
