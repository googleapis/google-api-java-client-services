/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.toolresults.model;

/**
 * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as
 * a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an
 * epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the
 * Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are
 * "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear
 * smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to
 * and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tool Results API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Timestamp extends com.google.api.client.json.GenericJson {

  /**
   * Non-negative fractions of a second at nanosecond resolution. Negative second values with
   * fractions must still have non-negative nanos values that count forward in time. Must be from 0
   * to 999,999,999 inclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nanos;

  /**
   * Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from
   * 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long seconds;

  /**
   * Non-negative fractions of a second at nanosecond resolution. Negative second values with
   * fractions must still have non-negative nanos values that count forward in time. Must be from 0
   * to 999,999,999 inclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNanos() {
    return nanos;
  }

  /**
   * Non-negative fractions of a second at nanosecond resolution. Negative second values with
   * fractions must still have non-negative nanos values that count forward in time. Must be from 0
   * to 999,999,999 inclusive.
   * @param nanos nanos or {@code null} for none
   */
  public Timestamp setNanos(java.lang.Integer nanos) {
    this.nanos = nanos;
    return this;
  }

  /**
   * Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from
   * 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSeconds() {
    return seconds;
  }

  /**
   * Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from
   * 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
   * @param seconds seconds or {@code null} for none
   */
  public Timestamp setSeconds(java.lang.Long seconds) {
    this.seconds = seconds;
    return this;
  }

  @Override
  public Timestamp set(String fieldName, Object value) {
    return (Timestamp) super.set(fieldName, value);
  }

  @Override
  public Timestamp clone() {
    return (Timestamp) super.clone();
  }

}
