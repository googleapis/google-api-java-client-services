/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.storagetransfer.v1.model;

/**
 * Specifies the metadata options for running a transfer.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Storage Transfer API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MetadataOptions extends com.google.api.client.json.GenericJson {

  /**
   * Specifies how each file's GID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as GID_SKIP when the source is a POSIX file system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gid;

  /**
   * Specifies how each file's mode attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as MODE_SKIP when the source is a POSIX file system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mode;

  /**
   * Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior
   * is the same as SYMLINK_SKIP when the source is a POSIX file system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String symlink;

  /**
   * Specifies how each file's UID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as UID_SKIP when the source is a POSIX file system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Specifies how each file's GID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as GID_SKIP when the source is a POSIX file system.
   * @return value or {@code null} for none
   */
  public java.lang.String getGid() {
    return gid;
  }

  /**
   * Specifies how each file's GID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as GID_SKIP when the source is a POSIX file system.
   * @param gid gid or {@code null} for none
   */
  public MetadataOptions setGid(java.lang.String gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Specifies how each file's mode attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as MODE_SKIP when the source is a POSIX file system.
   * @return value or {@code null} for none
   */
  public java.lang.String getMode() {
    return mode;
  }

  /**
   * Specifies how each file's mode attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as MODE_SKIP when the source is a POSIX file system.
   * @param mode mode or {@code null} for none
   */
  public MetadataOptions setMode(java.lang.String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior
   * is the same as SYMLINK_SKIP when the source is a POSIX file system.
   * @return value or {@code null} for none
   */
  public java.lang.String getSymlink() {
    return symlink;
  }

  /**
   * Specifies how symlinks should be handled by the transfer. If unspecified, the default behavior
   * is the same as SYMLINK_SKIP when the source is a POSIX file system.
   * @param symlink symlink or {@code null} for none
   */
  public MetadataOptions setSymlink(java.lang.String symlink) {
    this.symlink = symlink;
    return this;
  }

  /**
   * Specifies how each file's UID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as UID_SKIP when the source is a POSIX file system.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Specifies how each file's UID attribute should be handled by the transfer. If unspecified, the
   * default behavior is the same as UID_SKIP when the source is a POSIX file system.
   * @param uid uid or {@code null} for none
   */
  public MetadataOptions setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  @Override
  public MetadataOptions set(String fieldName, Object value) {
    return (MetadataOptions) super.set(fieldName, value);
  }

  @Override
  public MetadataOptions clone() {
    return (MetadataOptions) super.clone();
  }

}
