/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message describes roughly what a surface is capable of doing and metadata around those
 * capabilities. These capabilities are determined based on: - device hardware - software - status
 * (e.g. volume level, battery percentage) These capabilities refer to the surface and not the
 * physical device. The list of supported surfaces can be found in the
 * assistant.api.core_types.SurfaceType enum. A surface's capabilities can differ from the device's.
 * An example would be ANDROID_ALLO running on Pixel. Allo does not support AudioInput while the
 * Pixel does. In this case, audio_input will be set to false for Assistant Allo requests while it
 * might be set to true for OPA_NEXUS requests. Next ID: 34
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiDeviceCapabilities extends com.google.api.client.json.GenericJson {

  /**
   * Capabilites related to Android intent support.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiAndroidIntentCapabilities androidIntentCapabilities;

  /**
   * These capabilities are scoped to the ability to gather audio. It includes information like the
   * type of audio that can be gathered (e.g. public, private).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiAudioInput audioInput;

  /**
   * These capabilities are scoped to the ability to play audio. It includes information like the
   * type of audio that can be played (e.g. public, private).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiAudioOutput audioOutput;

  /**
   * The call capabilities of this device. go/call-capabilities
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCallCapabilities callCapabilities;

  /**
   * These capabilities are scoped to the camera abilities of this device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCameraCapabilities camera;

  /**
   * UX restrictions for Auto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> carUxRestrictions;

  /**
   * These capabilities are scoped to the cast abilities of this device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCastCapabilities cast;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCommunicationUiCapabilities communicationUiCapabilities;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiContactLookupCapabilities contactLookupCapabilities;

  /**
   * This is the same device id that is specified in the conversation protocol and should be unique
   * to each device/user/model combination. For example, if a request is coming from a watch through
   * AGSA the watch and AGSA should have different device_ids. Note: this field should only be used
   * to determine which device the capabilities belong to and not to access the id of the device.
   * Instead DeviceProperties should be used and accessed through ParamsAccessor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesDeviceId deviceId;

  /**
   * Capabilities related to Android tablet UX experience.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceUxMode;

  /**
   * Indicates that the device has connection to cellular network that allows it to make voice
   * calls. This is distinct from device just being capable of voice telephony, because the device
   * can be capable yet miss the suitable SIM card (for example, it could miss SIM card altogether,
   * or have data-only SIM card).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasVoiceTelephony;

  /**
   * Indicates if the client supports Javascript Whatsnext (go/jwn). Also contains the Jwn libraries
   * present on the client along with their versions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiJwnCapabilities jwnCapabilities;

  /**
   * Capabilities related to Lens Perception, i.e. image understanding. See go/lens-perception-sdk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiLensPerceptionCapabilities lensPerceptionCapabilities;

  /**
   * These capabilities are scoped to the location abilities of this device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiLocationCapabilities location;

  /**
   * Data which is produced for logging and debugging. Servers MUST NOT use this for any other
   * purposes, such as branching on it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiLoggingOnlyData loggingOnlyData;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiMessageCapabilities messageCapabilities;

  /**
   * These capabilities are scoped to abilities of the device to move around.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiMovementCapabilities movement;

  /**
   * DEPRECATED: Use SystemNotificationRestrictions instead. Specifies whether the surface is able
   * to display notifications. This field is superficially similar to ProactiveNotificationOutput,
   * but unlike that field which tracks a per-user preference on the OPA side, this field captures
   * whether the surface is capable of displaying notifications.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String notificationCapabilities;

  /**
   * Settings, that reflect whether a specific notification type is allowed for current device, e.g.
   * if the user opted out from notification category or category group. This settings are server-
   * side stored and evaluated unlike SystemNotificationRestrictions field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiNotificationOutputRestrictions notificationOutputRestrictions;

  /**
   * These are user configured restrictions indicating what the device is allowed to output from the
   * privacy point of view.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiOutputRestrictions outputRestrictions;

  /**
   * Capability to support Pop on lockscreen. TODO(b/230626444) this is for short term workaround
   * for TNG MA DF. Should be deprecated when long term solution is available. go/pop-on-lockscreen-
   * for-tng-ma.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String popOnLockscreenCapability;

  /**
   * Indicates if the client has safety related restriction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String safetyRestrictions;

  /**
   * These capabilities are scoped to the ability to see and interact with the Assistant through a
   * screen. If the device has no screen it should send an empty ScreenCapabilities. Sending no
   * ScreenCapabilities will cause this to be overridden with the surface default.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiScreenCapabilities screen;

  /**
   * Capabilities related to SODA (Speech On-Device API).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiSodaCapabilities sodaCapabilities;

  /**
   * These capabilities are scoped to the software available on the device as well as the set of
   * supported Assistant features.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiSoftwareCapabilities software;

  /**
   * DEPRECATED Capabilities related to speech detection on devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiSpeechCapabilities speechCapabilities;

  /**
   * Locales supported by assistant settings for speaking and display. This is independent from
   * device language that is defined in device setting. New locales are added based on rollout,
   * whitelist and app version releases because older versions does not have model support.
   * Currently supported locale list differs by surface type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supportedLocale;

  /**
   * The set of information that helps the server identify the surface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesSurfaceIdentity surfaceIdentity;

  /**
   * The device's surface type. This is the string version of the
   * assistant.api.core_types.SurfaceType enum. The server should not use this field, rather it
   * should use the SurfaceType value derived from this string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String surfaceTypeString;

  /**
   * Restrictions related to system-level notifications. This field is superficially similar to
   * ProactiveNotificationOutput, but unlike that field which tracks a per-user preference on the
   * OPA side, this field captures system level notifications restrictions. This field is not stored
   * and is merged to capablities from conversation params. It exists mostly for logging purposes of
   * android channel state and global app-level notification opt out.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiSystemNotificationRestrictions systemNotificationRestrictions;

  /**
   * Capabilities related to third party integration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiThirdPartyCapabilities thirdPartyCapabilities;

  /**
   * Capabilites related to Android intent support.
   * @return value or {@code null} for none
   */
  public AssistantApiAndroidIntentCapabilities getAndroidIntentCapabilities() {
    return androidIntentCapabilities;
  }

  /**
   * Capabilites related to Android intent support.
   * @param androidIntentCapabilities androidIntentCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setAndroidIntentCapabilities(AssistantApiAndroidIntentCapabilities androidIntentCapabilities) {
    this.androidIntentCapabilities = androidIntentCapabilities;
    return this;
  }

  /**
   * These capabilities are scoped to the ability to gather audio. It includes information like the
   * type of audio that can be gathered (e.g. public, private).
   * @return value or {@code null} for none
   */
  public AssistantApiAudioInput getAudioInput() {
    return audioInput;
  }

  /**
   * These capabilities are scoped to the ability to gather audio. It includes information like the
   * type of audio that can be gathered (e.g. public, private).
   * @param audioInput audioInput or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setAudioInput(AssistantApiAudioInput audioInput) {
    this.audioInput = audioInput;
    return this;
  }

  /**
   * These capabilities are scoped to the ability to play audio. It includes information like the
   * type of audio that can be played (e.g. public, private).
   * @return value or {@code null} for none
   */
  public AssistantApiAudioOutput getAudioOutput() {
    return audioOutput;
  }

  /**
   * These capabilities are scoped to the ability to play audio. It includes information like the
   * type of audio that can be played (e.g. public, private).
   * @param audioOutput audioOutput or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setAudioOutput(AssistantApiAudioOutput audioOutput) {
    this.audioOutput = audioOutput;
    return this;
  }

  /**
   * The call capabilities of this device. go/call-capabilities
   * @return value or {@code null} for none
   */
  public AssistantApiCallCapabilities getCallCapabilities() {
    return callCapabilities;
  }

  /**
   * The call capabilities of this device. go/call-capabilities
   * @param callCapabilities callCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setCallCapabilities(AssistantApiCallCapabilities callCapabilities) {
    this.callCapabilities = callCapabilities;
    return this;
  }

  /**
   * These capabilities are scoped to the camera abilities of this device.
   * @return value or {@code null} for none
   */
  public AssistantApiCameraCapabilities getCamera() {
    return camera;
  }

  /**
   * These capabilities are scoped to the camera abilities of this device.
   * @param camera camera or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setCamera(AssistantApiCameraCapabilities camera) {
    this.camera = camera;
    return this;
  }

  /**
   * UX restrictions for Auto.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCarUxRestrictions() {
    return carUxRestrictions;
  }

  /**
   * UX restrictions for Auto.
   * @param carUxRestrictions carUxRestrictions or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setCarUxRestrictions(java.util.List<java.lang.String> carUxRestrictions) {
    this.carUxRestrictions = carUxRestrictions;
    return this;
  }

  /**
   * These capabilities are scoped to the cast abilities of this device.
   * @return value or {@code null} for none
   */
  public AssistantApiCastCapabilities getCast() {
    return cast;
  }

  /**
   * These capabilities are scoped to the cast abilities of this device.
   * @param cast cast or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setCast(AssistantApiCastCapabilities cast) {
    this.cast = cast;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantApiCommunicationUiCapabilities getCommunicationUiCapabilities() {
    return communicationUiCapabilities;
  }

  /**
   * @param communicationUiCapabilities communicationUiCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setCommunicationUiCapabilities(AssistantApiCommunicationUiCapabilities communicationUiCapabilities) {
    this.communicationUiCapabilities = communicationUiCapabilities;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantApiContactLookupCapabilities getContactLookupCapabilities() {
    return contactLookupCapabilities;
  }

  /**
   * @param contactLookupCapabilities contactLookupCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setContactLookupCapabilities(AssistantApiContactLookupCapabilities contactLookupCapabilities) {
    this.contactLookupCapabilities = contactLookupCapabilities;
    return this;
  }

  /**
   * This is the same device id that is specified in the conversation protocol and should be unique
   * to each device/user/model combination. For example, if a request is coming from a watch through
   * AGSA the watch and AGSA should have different device_ids. Note: this field should only be used
   * to determine which device the capabilities belong to and not to access the id of the device.
   * Instead DeviceProperties should be used and accessed through ParamsAccessor.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesDeviceId getDeviceId() {
    return deviceId;
  }

  /**
   * This is the same device id that is specified in the conversation protocol and should be unique
   * to each device/user/model combination. For example, if a request is coming from a watch through
   * AGSA the watch and AGSA should have different device_ids. Note: this field should only be used
   * to determine which device the capabilities belong to and not to access the id of the device.
   * Instead DeviceProperties should be used and accessed through ParamsAccessor.
   * @param deviceId deviceId or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setDeviceId(AssistantApiCoreTypesDeviceId deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Capabilities related to Android tablet UX experience.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceUxMode() {
    return deviceUxMode;
  }

  /**
   * Capabilities related to Android tablet UX experience.
   * @param deviceUxMode deviceUxMode or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setDeviceUxMode(java.lang.String deviceUxMode) {
    this.deviceUxMode = deviceUxMode;
    return this;
  }

  /**
   * Indicates that the device has connection to cellular network that allows it to make voice
   * calls. This is distinct from device just being capable of voice telephony, because the device
   * can be capable yet miss the suitable SIM card (for example, it could miss SIM card altogether,
   * or have data-only SIM card).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasVoiceTelephony() {
    return hasVoiceTelephony;
  }

  /**
   * Indicates that the device has connection to cellular network that allows it to make voice
   * calls. This is distinct from device just being capable of voice telephony, because the device
   * can be capable yet miss the suitable SIM card (for example, it could miss SIM card altogether,
   * or have data-only SIM card).
   * @param hasVoiceTelephony hasVoiceTelephony or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setHasVoiceTelephony(java.lang.Boolean hasVoiceTelephony) {
    this.hasVoiceTelephony = hasVoiceTelephony;
    return this;
  }

  /**
   * Indicates if the client supports Javascript Whatsnext (go/jwn). Also contains the Jwn libraries
   * present on the client along with their versions.
   * @return value or {@code null} for none
   */
  public AssistantApiJwnCapabilities getJwnCapabilities() {
    return jwnCapabilities;
  }

  /**
   * Indicates if the client supports Javascript Whatsnext (go/jwn). Also contains the Jwn libraries
   * present on the client along with their versions.
   * @param jwnCapabilities jwnCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setJwnCapabilities(AssistantApiJwnCapabilities jwnCapabilities) {
    this.jwnCapabilities = jwnCapabilities;
    return this;
  }

  /**
   * Capabilities related to Lens Perception, i.e. image understanding. See go/lens-perception-sdk.
   * @return value or {@code null} for none
   */
  public AssistantApiLensPerceptionCapabilities getLensPerceptionCapabilities() {
    return lensPerceptionCapabilities;
  }

  /**
   * Capabilities related to Lens Perception, i.e. image understanding. See go/lens-perception-sdk.
   * @param lensPerceptionCapabilities lensPerceptionCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setLensPerceptionCapabilities(AssistantApiLensPerceptionCapabilities lensPerceptionCapabilities) {
    this.lensPerceptionCapabilities = lensPerceptionCapabilities;
    return this;
  }

  /**
   * These capabilities are scoped to the location abilities of this device.
   * @return value or {@code null} for none
   */
  public AssistantApiLocationCapabilities getLocation() {
    return location;
  }

  /**
   * These capabilities are scoped to the location abilities of this device.
   * @param location location or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setLocation(AssistantApiLocationCapabilities location) {
    this.location = location;
    return this;
  }

  /**
   * Data which is produced for logging and debugging. Servers MUST NOT use this for any other
   * purposes, such as branching on it.
   * @return value or {@code null} for none
   */
  public AssistantApiLoggingOnlyData getLoggingOnlyData() {
    return loggingOnlyData;
  }

  /**
   * Data which is produced for logging and debugging. Servers MUST NOT use this for any other
   * purposes, such as branching on it.
   * @param loggingOnlyData loggingOnlyData or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setLoggingOnlyData(AssistantApiLoggingOnlyData loggingOnlyData) {
    this.loggingOnlyData = loggingOnlyData;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantApiMessageCapabilities getMessageCapabilities() {
    return messageCapabilities;
  }

  /**
   * @param messageCapabilities messageCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setMessageCapabilities(AssistantApiMessageCapabilities messageCapabilities) {
    this.messageCapabilities = messageCapabilities;
    return this;
  }

  /**
   * These capabilities are scoped to abilities of the device to move around.
   * @return value or {@code null} for none
   */
  public AssistantApiMovementCapabilities getMovement() {
    return movement;
  }

  /**
   * These capabilities are scoped to abilities of the device to move around.
   * @param movement movement or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setMovement(AssistantApiMovementCapabilities movement) {
    this.movement = movement;
    return this;
  }

  /**
   * DEPRECATED: Use SystemNotificationRestrictions instead. Specifies whether the surface is able
   * to display notifications. This field is superficially similar to ProactiveNotificationOutput,
   * but unlike that field which tracks a per-user preference on the OPA side, this field captures
   * whether the surface is capable of displaying notifications.
   * @return value or {@code null} for none
   */
  public java.lang.String getNotificationCapabilities() {
    return notificationCapabilities;
  }

  /**
   * DEPRECATED: Use SystemNotificationRestrictions instead. Specifies whether the surface is able
   * to display notifications. This field is superficially similar to ProactiveNotificationOutput,
   * but unlike that field which tracks a per-user preference on the OPA side, this field captures
   * whether the surface is capable of displaying notifications.
   * @param notificationCapabilities notificationCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setNotificationCapabilities(java.lang.String notificationCapabilities) {
    this.notificationCapabilities = notificationCapabilities;
    return this;
  }

  /**
   * Settings, that reflect whether a specific notification type is allowed for current device, e.g.
   * if the user opted out from notification category or category group. This settings are server-
   * side stored and evaluated unlike SystemNotificationRestrictions field.
   * @return value or {@code null} for none
   */
  public AssistantApiNotificationOutputRestrictions getNotificationOutputRestrictions() {
    return notificationOutputRestrictions;
  }

  /**
   * Settings, that reflect whether a specific notification type is allowed for current device, e.g.
   * if the user opted out from notification category or category group. This settings are server-
   * side stored and evaluated unlike SystemNotificationRestrictions field.
   * @param notificationOutputRestrictions notificationOutputRestrictions or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setNotificationOutputRestrictions(AssistantApiNotificationOutputRestrictions notificationOutputRestrictions) {
    this.notificationOutputRestrictions = notificationOutputRestrictions;
    return this;
  }

  /**
   * These are user configured restrictions indicating what the device is allowed to output from the
   * privacy point of view.
   * @return value or {@code null} for none
   */
  public AssistantApiOutputRestrictions getOutputRestrictions() {
    return outputRestrictions;
  }

  /**
   * These are user configured restrictions indicating what the device is allowed to output from the
   * privacy point of view.
   * @param outputRestrictions outputRestrictions or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setOutputRestrictions(AssistantApiOutputRestrictions outputRestrictions) {
    this.outputRestrictions = outputRestrictions;
    return this;
  }

  /**
   * Capability to support Pop on lockscreen. TODO(b/230626444) this is for short term workaround
   * for TNG MA DF. Should be deprecated when long term solution is available. go/pop-on-lockscreen-
   * for-tng-ma.
   * @return value or {@code null} for none
   */
  public java.lang.String getPopOnLockscreenCapability() {
    return popOnLockscreenCapability;
  }

  /**
   * Capability to support Pop on lockscreen. TODO(b/230626444) this is for short term workaround
   * for TNG MA DF. Should be deprecated when long term solution is available. go/pop-on-lockscreen-
   * for-tng-ma.
   * @param popOnLockscreenCapability popOnLockscreenCapability or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setPopOnLockscreenCapability(java.lang.String popOnLockscreenCapability) {
    this.popOnLockscreenCapability = popOnLockscreenCapability;
    return this;
  }

  /**
   * Indicates if the client has safety related restriction.
   * @return value or {@code null} for none
   */
  public java.lang.String getSafetyRestrictions() {
    return safetyRestrictions;
  }

  /**
   * Indicates if the client has safety related restriction.
   * @param safetyRestrictions safetyRestrictions or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSafetyRestrictions(java.lang.String safetyRestrictions) {
    this.safetyRestrictions = safetyRestrictions;
    return this;
  }

  /**
   * These capabilities are scoped to the ability to see and interact with the Assistant through a
   * screen. If the device has no screen it should send an empty ScreenCapabilities. Sending no
   * ScreenCapabilities will cause this to be overridden with the surface default.
   * @return value or {@code null} for none
   */
  public AssistantApiScreenCapabilities getScreen() {
    return screen;
  }

  /**
   * These capabilities are scoped to the ability to see and interact with the Assistant through a
   * screen. If the device has no screen it should send an empty ScreenCapabilities. Sending no
   * ScreenCapabilities will cause this to be overridden with the surface default.
   * @param screen screen or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setScreen(AssistantApiScreenCapabilities screen) {
    this.screen = screen;
    return this;
  }

  /**
   * Capabilities related to SODA (Speech On-Device API).
   * @return value or {@code null} for none
   */
  public AssistantApiSodaCapabilities getSodaCapabilities() {
    return sodaCapabilities;
  }

  /**
   * Capabilities related to SODA (Speech On-Device API).
   * @param sodaCapabilities sodaCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSodaCapabilities(AssistantApiSodaCapabilities sodaCapabilities) {
    this.sodaCapabilities = sodaCapabilities;
    return this;
  }

  /**
   * These capabilities are scoped to the software available on the device as well as the set of
   * supported Assistant features.
   * @return value or {@code null} for none
   */
  public AssistantApiSoftwareCapabilities getSoftware() {
    return software;
  }

  /**
   * These capabilities are scoped to the software available on the device as well as the set of
   * supported Assistant features.
   * @param software software or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSoftware(AssistantApiSoftwareCapabilities software) {
    this.software = software;
    return this;
  }

  /**
   * DEPRECATED Capabilities related to speech detection on devices.
   * @return value or {@code null} for none
   */
  public AssistantApiSpeechCapabilities getSpeechCapabilities() {
    return speechCapabilities;
  }

  /**
   * DEPRECATED Capabilities related to speech detection on devices.
   * @param speechCapabilities speechCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSpeechCapabilities(AssistantApiSpeechCapabilities speechCapabilities) {
    this.speechCapabilities = speechCapabilities;
    return this;
  }

  /**
   * Locales supported by assistant settings for speaking and display. This is independent from
   * device language that is defined in device setting. New locales are added based on rollout,
   * whitelist and app version releases because older versions does not have model support.
   * Currently supported locale list differs by surface type.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupportedLocale() {
    return supportedLocale;
  }

  /**
   * Locales supported by assistant settings for speaking and display. This is independent from
   * device language that is defined in device setting. New locales are added based on rollout,
   * whitelist and app version releases because older versions does not have model support.
   * Currently supported locale list differs by surface type.
   * @param supportedLocale supportedLocale or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSupportedLocale(java.util.List<java.lang.String> supportedLocale) {
    this.supportedLocale = supportedLocale;
    return this;
  }

  /**
   * The set of information that helps the server identify the surface.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesSurfaceIdentity getSurfaceIdentity() {
    return surfaceIdentity;
  }

  /**
   * The set of information that helps the server identify the surface.
   * @param surfaceIdentity surfaceIdentity or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSurfaceIdentity(AssistantApiCoreTypesSurfaceIdentity surfaceIdentity) {
    this.surfaceIdentity = surfaceIdentity;
    return this;
  }

  /**
   * The device's surface type. This is the string version of the
   * assistant.api.core_types.SurfaceType enum. The server should not use this field, rather it
   * should use the SurfaceType value derived from this string.
   * @return value or {@code null} for none
   */
  public java.lang.String getSurfaceTypeString() {
    return surfaceTypeString;
  }

  /**
   * The device's surface type. This is the string version of the
   * assistant.api.core_types.SurfaceType enum. The server should not use this field, rather it
   * should use the SurfaceType value derived from this string.
   * @param surfaceTypeString surfaceTypeString or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSurfaceTypeString(java.lang.String surfaceTypeString) {
    this.surfaceTypeString = surfaceTypeString;
    return this;
  }

  /**
   * Restrictions related to system-level notifications. This field is superficially similar to
   * ProactiveNotificationOutput, but unlike that field which tracks a per-user preference on the
   * OPA side, this field captures system level notifications restrictions. This field is not stored
   * and is merged to capablities from conversation params. It exists mostly for logging purposes of
   * android channel state and global app-level notification opt out.
   * @return value or {@code null} for none
   */
  public AssistantApiSystemNotificationRestrictions getSystemNotificationRestrictions() {
    return systemNotificationRestrictions;
  }

  /**
   * Restrictions related to system-level notifications. This field is superficially similar to
   * ProactiveNotificationOutput, but unlike that field which tracks a per-user preference on the
   * OPA side, this field captures system level notifications restrictions. This field is not stored
   * and is merged to capablities from conversation params. It exists mostly for logging purposes of
   * android channel state and global app-level notification opt out.
   * @param systemNotificationRestrictions systemNotificationRestrictions or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setSystemNotificationRestrictions(AssistantApiSystemNotificationRestrictions systemNotificationRestrictions) {
    this.systemNotificationRestrictions = systemNotificationRestrictions;
    return this;
  }

  /**
   * Capabilities related to third party integration.
   * @return value or {@code null} for none
   */
  public AssistantApiThirdPartyCapabilities getThirdPartyCapabilities() {
    return thirdPartyCapabilities;
  }

  /**
   * Capabilities related to third party integration.
   * @param thirdPartyCapabilities thirdPartyCapabilities or {@code null} for none
   */
  public AssistantApiDeviceCapabilities setThirdPartyCapabilities(AssistantApiThirdPartyCapabilities thirdPartyCapabilities) {
    this.thirdPartyCapabilities = thirdPartyCapabilities;
    return this;
  }

  @Override
  public AssistantApiDeviceCapabilities set(String fieldName, Object value) {
    return (AssistantApiDeviceCapabilities) super.set(fieldName, value);
  }

  @Override
  public AssistantApiDeviceCapabilities clone() {
    return (AssistantApiDeviceCapabilities) super.clone();
  }

}
