/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * A mod describes all data changes in a watched table row.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Mod extends com.google.api.client.json.GenericJson {

  /**
   * Returns the value of the primary key of the modified row.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ModValue> keys;

  /**
   * Returns the new values after the change for the modified columns. Always empty for DELETE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ModValue> newValues;

  /**
   * Returns the old values before the change for the modified columns. Always empty for INSERT, or
   * if old values are not being captured specified by value_capture_type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ModValue> oldValues;

  /**
   * Returns the value of the primary key of the modified row.
   * @return value or {@code null} for none
   */
  public java.util.List<ModValue> getKeys() {
    return keys;
  }

  /**
   * Returns the value of the primary key of the modified row.
   * @param keys keys or {@code null} for none
   */
  public Mod setKeys(java.util.List<ModValue> keys) {
    this.keys = keys;
    return this;
  }

  /**
   * Returns the new values after the change for the modified columns. Always empty for DELETE.
   * @return value or {@code null} for none
   */
  public java.util.List<ModValue> getNewValues() {
    return newValues;
  }

  /**
   * Returns the new values after the change for the modified columns. Always empty for DELETE.
   * @param newValues newValues or {@code null} for none
   */
  public Mod setNewValues(java.util.List<ModValue> newValues) {
    this.newValues = newValues;
    return this;
  }

  /**
   * Returns the old values before the change for the modified columns. Always empty for INSERT, or
   * if old values are not being captured specified by value_capture_type.
   * @return value or {@code null} for none
   */
  public java.util.List<ModValue> getOldValues() {
    return oldValues;
  }

  /**
   * Returns the old values before the change for the modified columns. Always empty for INSERT, or
   * if old values are not being captured specified by value_capture_type.
   * @param oldValues oldValues or {@code null} for none
   */
  public Mod setOldValues(java.util.List<ModValue> oldValues) {
    this.oldValues = oldValues;
    return this;
  }

  @Override
  public Mod set(String fieldName, Object value) {
    return (Mod) super.set(fieldName, value);
  }

  @Override
  public Mod clone() {
    return (Mod) super.clone();
  }

}
