/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Derived fields that encapsulate the possible enforcement states of a Comment. Used to influence
 * the viewer experience. NextID: 11 ----- CommentDemotedRestriction Summary ----- Demoted
 * Restriction hides live chat messages from being shown in Top Chat.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class YoutubeCommentsApiCommentEnforcementStatus extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The severity of the active demotion. At most one CommentDemotedRestriction can be
   * active at any time. Only supported for Comments with an associated ChatEvent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String demotedRestrictionSeverity;

  /**
   * Output only. True if the comment is auto-approved by creator-defined roles and is not subject
   * to automod hold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean exemptFromHold;

  /**
   * Output only. True if the comment is held and going to be reviewed by channel owner or
   * moderators. The issuers that can hold entity comments are: 1) TNS 2) AUTOMOD, 3)
   * CHANNEL_SETTINGS, 4) CHANNEL_MODERATOR, 5)GLOBAL, 6) ISSUER_UNSPECIFIED. The issuers that can
   * hold live chat are // 1) AUTOMOD, 2) GLOBAL, 3) ISSUER_UNSPECIFIED. Issuer definitions: https:/
   * /source.corp.google.com/piperdepot/google3/video/youtube/comments/api/proto/comment_restriction
   * _issuer.proto;rcl=586954033;l=15 This is used to infer the SBE moderation_state for entity
   * comment and live chat.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean held;

  /**
   * Output only. The moderation state of comments that have been held. Currently only effective for
   * live chat because we can not tell the rejected creator review status for entity comments from
   * current data model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String heldForCreatorReviewStatus;

  /**
   * Output only. True if the comment is moderated and not overridden by creator reviews.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean moderated;

  /**
   * Output only. True if the comment is moderated due to any of the creator-defined blocked words.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean moderatedByBlockedWords;

  /**
   * Output only. Live Chat only. True only if the live chat message is directly moderated by a
   * privileged user from Live Chat chat room. go/ytfexit-live-chat-moderation#remove-chat-messages
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean moderatedByChatRemoval;

  /**
   * Output only. True if the comment is moderated by TnS. Maps to SBE Spam http://google3/video/you
   * tube/comments/backstage/backend/lib/stream_v2/stream_item_reader.cc?l=597
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean moderatedByTns;

  /**
   * Output only. True if the comment is rejected or taken down by TNS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean rejected;

  /**
   * Output only. The moderation decision on comments from privileged users. This field can be used
   * to take place of `held_for_creator_review_status` for live chat, together with
   * `held_by_non_tns`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private YoutubeCommentsApiCommentEnforcementStatusUserModerationDecision userModerationDecision;

  /**
   * Output only. The severity of the active demotion. At most one CommentDemotedRestriction can be
   * active at any time. Only supported for Comments with an associated ChatEvent.
   * @return value or {@code null} for none
   */
  public java.lang.String getDemotedRestrictionSeverity() {
    return demotedRestrictionSeverity;
  }

  /**
   * Output only. The severity of the active demotion. At most one CommentDemotedRestriction can be
   * active at any time. Only supported for Comments with an associated ChatEvent.
   * @param demotedRestrictionSeverity demotedRestrictionSeverity or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setDemotedRestrictionSeverity(java.lang.String demotedRestrictionSeverity) {
    this.demotedRestrictionSeverity = demotedRestrictionSeverity;
    return this;
  }

  /**
   * Output only. True if the comment is auto-approved by creator-defined roles and is not subject
   * to automod hold.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExemptFromHold() {
    return exemptFromHold;
  }

  /**
   * Output only. True if the comment is auto-approved by creator-defined roles and is not subject
   * to automod hold.
   * @param exemptFromHold exemptFromHold or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setExemptFromHold(java.lang.Boolean exemptFromHold) {
    this.exemptFromHold = exemptFromHold;
    return this;
  }

  /**
   * Output only. True if the comment is held and going to be reviewed by channel owner or
   * moderators. The issuers that can hold entity comments are: 1) TNS 2) AUTOMOD, 3)
   * CHANNEL_SETTINGS, 4) CHANNEL_MODERATOR, 5)GLOBAL, 6) ISSUER_UNSPECIFIED. The issuers that can
   * hold live chat are // 1) AUTOMOD, 2) GLOBAL, 3) ISSUER_UNSPECIFIED. Issuer definitions: https:/
   * /source.corp.google.com/piperdepot/google3/video/youtube/comments/api/proto/comment_restriction
   * _issuer.proto;rcl=586954033;l=15 This is used to infer the SBE moderation_state for entity
   * comment and live chat.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHeld() {
    return held;
  }

  /**
   * Output only. True if the comment is held and going to be reviewed by channel owner or
   * moderators. The issuers that can hold entity comments are: 1) TNS 2) AUTOMOD, 3)
   * CHANNEL_SETTINGS, 4) CHANNEL_MODERATOR, 5)GLOBAL, 6) ISSUER_UNSPECIFIED. The issuers that can
   * hold live chat are // 1) AUTOMOD, 2) GLOBAL, 3) ISSUER_UNSPECIFIED. Issuer definitions: https:/
   * /source.corp.google.com/piperdepot/google3/video/youtube/comments/api/proto/comment_restriction
   * _issuer.proto;rcl=586954033;l=15 This is used to infer the SBE moderation_state for entity
   * comment and live chat.
   * @param held held or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setHeld(java.lang.Boolean held) {
    this.held = held;
    return this;
  }

  /**
   * Output only. The moderation state of comments that have been held. Currently only effective for
   * live chat because we can not tell the rejected creator review status for entity comments from
   * current data model.
   * @return value or {@code null} for none
   */
  public java.lang.String getHeldForCreatorReviewStatus() {
    return heldForCreatorReviewStatus;
  }

  /**
   * Output only. The moderation state of comments that have been held. Currently only effective for
   * live chat because we can not tell the rejected creator review status for entity comments from
   * current data model.
   * @param heldForCreatorReviewStatus heldForCreatorReviewStatus or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setHeldForCreatorReviewStatus(java.lang.String heldForCreatorReviewStatus) {
    this.heldForCreatorReviewStatus = heldForCreatorReviewStatus;
    return this;
  }

  /**
   * Output only. True if the comment is moderated and not overridden by creator reviews.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getModerated() {
    return moderated;
  }

  /**
   * Output only. True if the comment is moderated and not overridden by creator reviews.
   * @param moderated moderated or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setModerated(java.lang.Boolean moderated) {
    this.moderated = moderated;
    return this;
  }

  /**
   * Output only. True if the comment is moderated due to any of the creator-defined blocked words.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getModeratedByBlockedWords() {
    return moderatedByBlockedWords;
  }

  /**
   * Output only. True if the comment is moderated due to any of the creator-defined blocked words.
   * @param moderatedByBlockedWords moderatedByBlockedWords or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setModeratedByBlockedWords(java.lang.Boolean moderatedByBlockedWords) {
    this.moderatedByBlockedWords = moderatedByBlockedWords;
    return this;
  }

  /**
   * Output only. Live Chat only. True only if the live chat message is directly moderated by a
   * privileged user from Live Chat chat room. go/ytfexit-live-chat-moderation#remove-chat-messages
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getModeratedByChatRemoval() {
    return moderatedByChatRemoval;
  }

  /**
   * Output only. Live Chat only. True only if the live chat message is directly moderated by a
   * privileged user from Live Chat chat room. go/ytfexit-live-chat-moderation#remove-chat-messages
   * @param moderatedByChatRemoval moderatedByChatRemoval or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setModeratedByChatRemoval(java.lang.Boolean moderatedByChatRemoval) {
    this.moderatedByChatRemoval = moderatedByChatRemoval;
    return this;
  }

  /**
   * Output only. True if the comment is moderated by TnS. Maps to SBE Spam http://google3/video/you
   * tube/comments/backstage/backend/lib/stream_v2/stream_item_reader.cc?l=597
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getModeratedByTns() {
    return moderatedByTns;
  }

  /**
   * Output only. True if the comment is moderated by TnS. Maps to SBE Spam http://google3/video/you
   * tube/comments/backstage/backend/lib/stream_v2/stream_item_reader.cc?l=597
   * @param moderatedByTns moderatedByTns or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setModeratedByTns(java.lang.Boolean moderatedByTns) {
    this.moderatedByTns = moderatedByTns;
    return this;
  }

  /**
   * Output only. True if the comment is rejected or taken down by TNS.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRejected() {
    return rejected;
  }

  /**
   * Output only. True if the comment is rejected or taken down by TNS.
   * @param rejected rejected or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setRejected(java.lang.Boolean rejected) {
    this.rejected = rejected;
    return this;
  }

  /**
   * Output only. The moderation decision on comments from privileged users. This field can be used
   * to take place of `held_for_creator_review_status` for live chat, together with
   * `held_by_non_tns`.
   * @return value or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatusUserModerationDecision getUserModerationDecision() {
    return userModerationDecision;
  }

  /**
   * Output only. The moderation decision on comments from privileged users. This field can be used
   * to take place of `held_for_creator_review_status` for live chat, together with
   * `held_by_non_tns`.
   * @param userModerationDecision userModerationDecision or {@code null} for none
   */
  public YoutubeCommentsApiCommentEnforcementStatus setUserModerationDecision(YoutubeCommentsApiCommentEnforcementStatusUserModerationDecision userModerationDecision) {
    this.userModerationDecision = userModerationDecision;
    return this;
  }

  @Override
  public YoutubeCommentsApiCommentEnforcementStatus set(String fieldName, Object value) {
    return (YoutubeCommentsApiCommentEnforcementStatus) super.set(fieldName, value);
  }

  @Override
  public YoutubeCommentsApiCommentEnforcementStatus clone() {
    return (YoutubeCommentsApiCommentEnforcementStatus) super.clone();
  }

}
