/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1.model;

/**
 * A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL
 * certificate and establish project ownership for your domain name before you direct traffic to
 * Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other
 * services. After you've made the recommended updates, check your custom domain's `ownershipState`
 * and `certState`. To avoid downtime, they should be `OWNERSHIP_ACTIVE` and `CERT_ACTIVE`,
 * respectively, before you update your `A` and `AAAA` records.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Hosting API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LiveMigrationStep extends com.google.api.client.json.GenericJson {

  /**
   * Output only. A pair of ACME challenges that Hosting's Certificate Authority (CA) can use to
   * create an SSL cert for your domain name. Use either the DNS or HTTP challenge; it's not
   * necessary to provide both.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CertVerification certVerification;

  /**
   * Output only. DNS updates to facilitate your domain's zero-downtime migration to Hosting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DnsUpdates dnsUpdates;

  /**
   * Output only. Issues that prevent the current step from completing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Status> issues;

  /**
   * Output only. The state of the live migration step, indicates whether you should work to
   * complete the step now, in the future, or have already completed it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. A pair of ACME challenges that Hosting's Certificate Authority (CA) can use to
   * create an SSL cert for your domain name. Use either the DNS or HTTP challenge; it's not
   * necessary to provide both.
   * @return value or {@code null} for none
   */
  public CertVerification getCertVerification() {
    return certVerification;
  }

  /**
   * Output only. A pair of ACME challenges that Hosting's Certificate Authority (CA) can use to
   * create an SSL cert for your domain name. Use either the DNS or HTTP challenge; it's not
   * necessary to provide both.
   * @param certVerification certVerification or {@code null} for none
   */
  public LiveMigrationStep setCertVerification(CertVerification certVerification) {
    this.certVerification = certVerification;
    return this;
  }

  /**
   * Output only. DNS updates to facilitate your domain's zero-downtime migration to Hosting.
   * @return value or {@code null} for none
   */
  public DnsUpdates getDnsUpdates() {
    return dnsUpdates;
  }

  /**
   * Output only. DNS updates to facilitate your domain's zero-downtime migration to Hosting.
   * @param dnsUpdates dnsUpdates or {@code null} for none
   */
  public LiveMigrationStep setDnsUpdates(DnsUpdates dnsUpdates) {
    this.dnsUpdates = dnsUpdates;
    return this;
  }

  /**
   * Output only. Issues that prevent the current step from completing.
   * @return value or {@code null} for none
   */
  public java.util.List<Status> getIssues() {
    return issues;
  }

  /**
   * Output only. Issues that prevent the current step from completing.
   * @param issues issues or {@code null} for none
   */
  public LiveMigrationStep setIssues(java.util.List<Status> issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Output only. The state of the live migration step, indicates whether you should work to
   * complete the step now, in the future, or have already completed it.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the live migration step, indicates whether you should work to
   * complete the step now, in the future, or have already completed it.
   * @param state state or {@code null} for none
   */
  public LiveMigrationStep setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public LiveMigrationStep set(String fieldName, Object value) {
    return (LiveMigrationStep) super.set(fieldName, value);
  }

  @Override
  public LiveMigrationStep clone() {
    return (LiveMigrationStep) super.clone();
  }

}
