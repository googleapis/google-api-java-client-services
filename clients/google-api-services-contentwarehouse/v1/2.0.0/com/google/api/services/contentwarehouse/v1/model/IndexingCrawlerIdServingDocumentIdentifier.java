/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for IndexingCrawlerIdServingDocumentIdentifier.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingCrawlerIdServingDocumentIdentifier extends com.google.api.client.json.GenericJson {

  /**
   * Only for double indexing experiments. This field is set for duplicated documents so that
   * docjoin users will not see duplicated docs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String doubleIndexingExperimentId;

  /**
   * Only for Experimental clusters, not relevant for production serving data: Index-Dups can run
   * experiments in Quality Clusters where different versions of the same document (e.g. with
   * different signals) are serving in parallel. They are uniquely identified by the dup-experiment-
   * IDs. This is for experimental clusters only. In prod-versions the member will not be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dupExperimentId;

  /**
   * The primary identifier of a production document is the document key, which is the same as the
   * row-key in Alexandria, and represents a URL and its crawling context. The document key is the
   * unique identifier for each document, but multiple document keys can cover the same URL (e.g.
   * crawled with different device types). In your production code, please always assume that the
   * document key is the only way to uniquely identify a document. Link for more background
   * information: http://go/url The document key is populated for all docs in indexing since
   * 2014-03. ## Recommended way of reading: const string& doc_key = cdoc.doc().id().key(); ##
   * CHECK(!doc_key.empty()); Note: For older DocJoins (e.g. historical DocJoins), the field is not
   * populated. In those scenarios it is recommended to use the function
   * 'GetDocumentKeyFromCompositeDoc' in
   * '//indexing/crawler_id/utils/compositedoc/compositedoc_util.h' instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String key;

  /**
   * Only for double indexing experiments. This field is set for duplicated documents so that
   * docjoin users will not see duplicated docs.
   * @return value or {@code null} for none
   */
  public java.lang.String getDoubleIndexingExperimentId() {
    return doubleIndexingExperimentId;
  }

  /**
   * Only for double indexing experiments. This field is set for duplicated documents so that
   * docjoin users will not see duplicated docs.
   * @param doubleIndexingExperimentId doubleIndexingExperimentId or {@code null} for none
   */
  public IndexingCrawlerIdServingDocumentIdentifier setDoubleIndexingExperimentId(java.lang.String doubleIndexingExperimentId) {
    this.doubleIndexingExperimentId = doubleIndexingExperimentId;
    return this;
  }

  /**
   * Only for Experimental clusters, not relevant for production serving data: Index-Dups can run
   * experiments in Quality Clusters where different versions of the same document (e.g. with
   * different signals) are serving in parallel. They are uniquely identified by the dup-experiment-
   * IDs. This is for experimental clusters only. In prod-versions the member will not be set.
   * @return value or {@code null} for none
   */
  public java.lang.String getDupExperimentId() {
    return dupExperimentId;
  }

  /**
   * Only for Experimental clusters, not relevant for production serving data: Index-Dups can run
   * experiments in Quality Clusters where different versions of the same document (e.g. with
   * different signals) are serving in parallel. They are uniquely identified by the dup-experiment-
   * IDs. This is for experimental clusters only. In prod-versions the member will not be set.
   * @param dupExperimentId dupExperimentId or {@code null} for none
   */
  public IndexingCrawlerIdServingDocumentIdentifier setDupExperimentId(java.lang.String dupExperimentId) {
    this.dupExperimentId = dupExperimentId;
    return this;
  }

  /**
   * The primary identifier of a production document is the document key, which is the same as the
   * row-key in Alexandria, and represents a URL and its crawling context. The document key is the
   * unique identifier for each document, but multiple document keys can cover the same URL (e.g.
   * crawled with different device types). In your production code, please always assume that the
   * document key is the only way to uniquely identify a document. Link for more background
   * information: http://go/url The document key is populated for all docs in indexing since
   * 2014-03. ## Recommended way of reading: const string& doc_key = cdoc.doc().id().key(); ##
   * CHECK(!doc_key.empty()); Note: For older DocJoins (e.g. historical DocJoins), the field is not
   * populated. In those scenarios it is recommended to use the function
   * 'GetDocumentKeyFromCompositeDoc' in
   * '//indexing/crawler_id/utils/compositedoc/compositedoc_util.h' instead.
   * @return value or {@code null} for none
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * The primary identifier of a production document is the document key, which is the same as the
   * row-key in Alexandria, and represents a URL and its crawling context. The document key is the
   * unique identifier for each document, but multiple document keys can cover the same URL (e.g.
   * crawled with different device types). In your production code, please always assume that the
   * document key is the only way to uniquely identify a document. Link for more background
   * information: http://go/url The document key is populated for all docs in indexing since
   * 2014-03. ## Recommended way of reading: const string& doc_key = cdoc.doc().id().key(); ##
   * CHECK(!doc_key.empty()); Note: For older DocJoins (e.g. historical DocJoins), the field is not
   * populated. In those scenarios it is recommended to use the function
   * 'GetDocumentKeyFromCompositeDoc' in
   * '//indexing/crawler_id/utils/compositedoc/compositedoc_util.h' instead.
   * @param key key or {@code null} for none
   */
  public IndexingCrawlerIdServingDocumentIdentifier setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  @Override
  public IndexingCrawlerIdServingDocumentIdentifier set(String fieldName, Object value) {
    return (IndexingCrawlerIdServingDocumentIdentifier) super.set(fieldName, value);
  }

  @Override
  public IndexingCrawlerIdServingDocumentIdentifier clone() {
    return (IndexingCrawlerIdServingDocumentIdentifier) super.clone();
  }

}
