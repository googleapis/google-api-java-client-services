/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The fetcher keeps track of various time intervals spent in the states of the fetcher url control
 * flow. Sometimes flows branch out into more than one flow (next flow), and we aggregate all the
 * time intervals spent in a specific state for all the flows to get the time interval for the
 * state. The time interval for a state is therefore not the time interval of an individual flow, if
 * the WaitNextFlow time is non zero. The WaitNextFlow interval included here is the time spent by
 * one flow waiting for another flow. Although the WaitNextFlow time is the time spent by a flow in
 * the WaitNextFlow state, its also equivalent to the entire timeline of another flow. It is the
 * time spent in the various states of another flow. In computing the total time spent in the
 * primary flow, one must omit the WaitNextFlow time, since it is already included in the form of
 * slices of individual state time intervals in the aggregated time intervals for other states, and
 * will result in double counting.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TrawlerFetchReplyDataFetchStats extends com.google.api.client.json.GenericJson {

  /**
   * Overhead spent RPCing with the Bot/proxy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("BotOverheadMS")
  private java.lang.Integer botOverheadMS;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ClientControlflowStats")
  private TrawlerFetchReplyDataFetchStatsClientStateStats clientControlflowStats;

  /**
   * Report only with first request on connection, so that we keep track of the connect time with a
   * host. Sometimes a connection is initiated by a prior request that times out before the
   * connection is established. Another request can get scheduled on a connection that is already in
   * the process of being established but has no request scheduled onto it. We want to keep track of
   * the entire connect time even if a request didn't need to wait for the entire connection
   * establishment time. Sometimes a connection may get established before the first request uses
   * it. We tag along the connect time with the first request using the connection. ConnectTimeMs
   * also includes SSL negotiation time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ConnectTimeMs")
  private java.lang.Integer connectTimeMs;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ControlflowStats")
  private TrawlerFetchReplyDataFetchStatsStateStats controlflowStats;

  /**
   * DownLoadTime = Share of connect time + ServerResponseTimeMs + TransferTimeMs (see below) in ms
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DownLoadTime")
  private java.lang.Integer downLoadTime;

  /**
   * Overhead spent routing the request from HOPE to edge egress nodes, which open connection to
   * webservers. This is only set for edge fetches (e.g., through Floonet egress nodes).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("EdgeEgressOverheadMs")
  private java.lang.Integer edgeEgressOverheadMs;

  /**
   * ConnectTimeMs includes TCP connect time + SSL time, whereas SSLConnectTimeMs includes only the
   * latter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SSLConnectTimeMs")
  private java.lang.Integer sSLConnectTimeMs;

  /**
   * Time between the request send and the receipt of the first fragment of the response. For HTTP
   * responses the first fragment is the first fragment of the response payload (the headers are
   * ignored).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ServerResponseTimeMs")
  private java.lang.Integer serverResponseTimeMs;

  /**
   * Time to receive the entire response payload starting the clock on receiving the first fragment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("TransferTimeMs")
  private java.lang.Integer transferTimeMs;

  /**
   * Overhead spent RPCing with the Bot/proxy.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBotOverheadMS() {
    return botOverheadMS;
  }

  /**
   * Overhead spent RPCing with the Bot/proxy.
   * @param botOverheadMS botOverheadMS or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setBotOverheadMS(java.lang.Integer botOverheadMS) {
    this.botOverheadMS = botOverheadMS;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStatsClientStateStats getClientControlflowStats() {
    return clientControlflowStats;
  }

  /**
   * @param clientControlflowStats clientControlflowStats or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setClientControlflowStats(TrawlerFetchReplyDataFetchStatsClientStateStats clientControlflowStats) {
    this.clientControlflowStats = clientControlflowStats;
    return this;
  }

  /**
   * Report only with first request on connection, so that we keep track of the connect time with a
   * host. Sometimes a connection is initiated by a prior request that times out before the
   * connection is established. Another request can get scheduled on a connection that is already in
   * the process of being established but has no request scheduled onto it. We want to keep track of
   * the entire connect time even if a request didn't need to wait for the entire connection
   * establishment time. Sometimes a connection may get established before the first request uses
   * it. We tag along the connect time with the first request using the connection. ConnectTimeMs
   * also includes SSL negotiation time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConnectTimeMs() {
    return connectTimeMs;
  }

  /**
   * Report only with first request on connection, so that we keep track of the connect time with a
   * host. Sometimes a connection is initiated by a prior request that times out before the
   * connection is established. Another request can get scheduled on a connection that is already in
   * the process of being established but has no request scheduled onto it. We want to keep track of
   * the entire connect time even if a request didn't need to wait for the entire connection
   * establishment time. Sometimes a connection may get established before the first request uses
   * it. We tag along the connect time with the first request using the connection. ConnectTimeMs
   * also includes SSL negotiation time.
   * @param connectTimeMs connectTimeMs or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setConnectTimeMs(java.lang.Integer connectTimeMs) {
    this.connectTimeMs = connectTimeMs;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStatsStateStats getControlflowStats() {
    return controlflowStats;
  }

  /**
   * @param controlflowStats controlflowStats or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setControlflowStats(TrawlerFetchReplyDataFetchStatsStateStats controlflowStats) {
    this.controlflowStats = controlflowStats;
    return this;
  }

  /**
   * DownLoadTime = Share of connect time + ServerResponseTimeMs + TransferTimeMs (see below) in ms
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDownLoadTime() {
    return downLoadTime;
  }

  /**
   * DownLoadTime = Share of connect time + ServerResponseTimeMs + TransferTimeMs (see below) in ms
   * @param downLoadTime downLoadTime or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setDownLoadTime(java.lang.Integer downLoadTime) {
    this.downLoadTime = downLoadTime;
    return this;
  }

  /**
   * Overhead spent routing the request from HOPE to edge egress nodes, which open connection to
   * webservers. This is only set for edge fetches (e.g., through Floonet egress nodes).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEdgeEgressOverheadMs() {
    return edgeEgressOverheadMs;
  }

  /**
   * Overhead spent routing the request from HOPE to edge egress nodes, which open connection to
   * webservers. This is only set for edge fetches (e.g., through Floonet egress nodes).
   * @param edgeEgressOverheadMs edgeEgressOverheadMs or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setEdgeEgressOverheadMs(java.lang.Integer edgeEgressOverheadMs) {
    this.edgeEgressOverheadMs = edgeEgressOverheadMs;
    return this;
  }

  /**
   * ConnectTimeMs includes TCP connect time + SSL time, whereas SSLConnectTimeMs includes only the
   * latter.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSSLConnectTimeMs() {
    return sSLConnectTimeMs;
  }

  /**
   * ConnectTimeMs includes TCP connect time + SSL time, whereas SSLConnectTimeMs includes only the
   * latter.
   * @param sSLConnectTimeMs sSLConnectTimeMs or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setSSLConnectTimeMs(java.lang.Integer sSLConnectTimeMs) {
    this.sSLConnectTimeMs = sSLConnectTimeMs;
    return this;
  }

  /**
   * Time between the request send and the receipt of the first fragment of the response. For HTTP
   * responses the first fragment is the first fragment of the response payload (the headers are
   * ignored).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getServerResponseTimeMs() {
    return serverResponseTimeMs;
  }

  /**
   * Time between the request send and the receipt of the first fragment of the response. For HTTP
   * responses the first fragment is the first fragment of the response payload (the headers are
   * ignored).
   * @param serverResponseTimeMs serverResponseTimeMs or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setServerResponseTimeMs(java.lang.Integer serverResponseTimeMs) {
    this.serverResponseTimeMs = serverResponseTimeMs;
    return this;
  }

  /**
   * Time to receive the entire response payload starting the clock on receiving the first fragment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTransferTimeMs() {
    return transferTimeMs;
  }

  /**
   * Time to receive the entire response payload starting the clock on receiving the first fragment.
   * @param transferTimeMs transferTimeMs or {@code null} for none
   */
  public TrawlerFetchReplyDataFetchStats setTransferTimeMs(java.lang.Integer transferTimeMs) {
    this.transferTimeMs = transferTimeMs;
    return this;
  }

  @Override
  public TrawlerFetchReplyDataFetchStats set(String fieldName, Object value) {
    return (TrawlerFetchReplyDataFetchStats) super.set(fieldName, value);
  }

  @Override
  public TrawlerFetchReplyDataFetchStats clone() {
    return (TrawlerFetchReplyDataFetchStats) super.clone();
  }

}
