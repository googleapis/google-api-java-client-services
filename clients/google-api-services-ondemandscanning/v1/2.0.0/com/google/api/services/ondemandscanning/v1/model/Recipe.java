/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.ondemandscanning.v1.model;

/**
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one
 * step in the recipe.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the On-Demand Scanning API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Recipe extends com.google.api.client.json.GenericJson {

  /**
   * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial
   * and recipe.entryPoint. For example, if the recipe type were "make", then this might be the
   * flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the
   * arguments field can greatly vary in structure, depending on the builder and recipe type, this
   * is of form "Any".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.util.Map<String, java.lang.Object>> arguments;

  /**
   * Index in materials containing the recipe steps that are not implied by recipe.type. For
   * example, if the recipe type were "make", then this would point to the source containing the
   * Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as
   * zero is default unset value for int64.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long definedInMaterial;

  /**
   * String identifying the entry point into the build. This is often a path to a configuration file
   * and/or a target label within that file. The syntax and meaning are defined by recipe.type. For
   * example, if the recipe type were "make", then this would reference the directory in which to
   * run make as well as which target to use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entryPoint;

  /**
   * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only
   * needed for reproducing the build but not evaluated as part of policy. Since the environment
   * field can greatly vary in structure, depending on the builder and recipe type, this is of form
   * "Any".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.util.Map<String, java.lang.Object>> environment;

  /**
   * URI indicating what type of recipe was performed. It determines the meaning of
   * recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial
   * and recipe.entryPoint. For example, if the recipe type were "make", then this might be the
   * flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the
   * arguments field can greatly vary in structure, depending on the builder and recipe type, this
   * is of form "Any".
   * @return value or {@code null} for none
   */
  public java.util.List<java.util.Map<String, java.lang.Object>> getArguments() {
    return arguments;
  }

  /**
   * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial
   * and recipe.entryPoint. For example, if the recipe type were "make", then this might be the
   * flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the
   * arguments field can greatly vary in structure, depending on the builder and recipe type, this
   * is of form "Any".
   * @param arguments arguments or {@code null} for none
   */
  public Recipe setArguments(java.util.List<java.util.Map<String, java.lang.Object>> arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Index in materials containing the recipe steps that are not implied by recipe.type. For
   * example, if the recipe type were "make", then this would point to the source containing the
   * Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as
   * zero is default unset value for int64.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDefinedInMaterial() {
    return definedInMaterial;
  }

  /**
   * Index in materials containing the recipe steps that are not implied by recipe.type. For
   * example, if the recipe type were "make", then this would point to the source containing the
   * Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as
   * zero is default unset value for int64.
   * @param definedInMaterial definedInMaterial or {@code null} for none
   */
  public Recipe setDefinedInMaterial(java.lang.Long definedInMaterial) {
    this.definedInMaterial = definedInMaterial;
    return this;
  }

  /**
   * String identifying the entry point into the build. This is often a path to a configuration file
   * and/or a target label within that file. The syntax and meaning are defined by recipe.type. For
   * example, if the recipe type were "make", then this would reference the directory in which to
   * run make as well as which target to use.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntryPoint() {
    return entryPoint;
  }

  /**
   * String identifying the entry point into the build. This is often a path to a configuration file
   * and/or a target label within that file. The syntax and meaning are defined by recipe.type. For
   * example, if the recipe type were "make", then this would reference the directory in which to
   * run make as well as which target to use.
   * @param entryPoint entryPoint or {@code null} for none
   */
  public Recipe setEntryPoint(java.lang.String entryPoint) {
    this.entryPoint = entryPoint;
    return this;
  }

  /**
   * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only
   * needed for reproducing the build but not evaluated as part of policy. Since the environment
   * field can greatly vary in structure, depending on the builder and recipe type, this is of form
   * "Any".
   * @return value or {@code null} for none
   */
  public java.util.List<java.util.Map<String, java.lang.Object>> getEnvironment() {
    return environment;
  }

  /**
   * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only
   * needed for reproducing the build but not evaluated as part of policy. Since the environment
   * field can greatly vary in structure, depending on the builder and recipe type, this is of form
   * "Any".
   * @param environment environment or {@code null} for none
   */
  public Recipe setEnvironment(java.util.List<java.util.Map<String, java.lang.Object>> environment) {
    this.environment = environment;
    return this;
  }

  /**
   * URI indicating what type of recipe was performed. It determines the meaning of
   * recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * URI indicating what type of recipe was performed. It determines the meaning of
   * recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
   * @param type type or {@code null} for none
   */
  public Recipe setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public Recipe set(String fieldName, Object value) {
    return (Recipe) super.set(fieldName, value);
  }

  @Override
  public Recipe clone() {
    return (Recipe) super.clone();
  }

}
