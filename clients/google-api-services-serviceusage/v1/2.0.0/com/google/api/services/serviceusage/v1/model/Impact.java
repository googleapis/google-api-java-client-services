/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.serviceusage.v1.model;

/**
 * A message to group impacts of updating a policy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Usage API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Impact extends com.google.api.client.json.GenericJson {

  /**
   * Output only. User friendly impact detail in a free form message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String detail;

  /**
   * Output only. The type of impact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String impactType;

  /**
   * The parent resource that the analysis is based on and the service name that the analysis is
   * for. Example: `projects/100/services/compute.googleapis.com`,
   * folders/101/services/compute.googleapis.com` and
   * `organizations/102/services/compute.googleapis.com`. Usually, the parent resource here is same
   * as the parent resource of the analyzed policy. However, for some analysis types, the parent can
   * be different. For example, for resource existence analysis, if the parent resource of the
   * analyzed policy is a folder or an organization, the parent resource here can still be the
   * project that contains the resources.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parent;

  /**
   * Output only. User friendly impact detail in a free form message.
   * @return value or {@code null} for none
   */
  public java.lang.String getDetail() {
    return detail;
  }

  /**
   * Output only. User friendly impact detail in a free form message.
   * @param detail detail or {@code null} for none
   */
  public Impact setDetail(java.lang.String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Output only. The type of impact.
   * @return value or {@code null} for none
   */
  public java.lang.String getImpactType() {
    return impactType;
  }

  /**
   * Output only. The type of impact.
   * @param impactType impactType or {@code null} for none
   */
  public Impact setImpactType(java.lang.String impactType) {
    this.impactType = impactType;
    return this;
  }

  /**
   * The parent resource that the analysis is based on and the service name that the analysis is
   * for. Example: `projects/100/services/compute.googleapis.com`,
   * folders/101/services/compute.googleapis.com` and
   * `organizations/102/services/compute.googleapis.com`. Usually, the parent resource here is same
   * as the parent resource of the analyzed policy. However, for some analysis types, the parent can
   * be different. For example, for resource existence analysis, if the parent resource of the
   * analyzed policy is a folder or an organization, the parent resource here can still be the
   * project that contains the resources.
   * @return value or {@code null} for none
   */
  public java.lang.String getParent() {
    return parent;
  }

  /**
   * The parent resource that the analysis is based on and the service name that the analysis is
   * for. Example: `projects/100/services/compute.googleapis.com`,
   * folders/101/services/compute.googleapis.com` and
   * `organizations/102/services/compute.googleapis.com`. Usually, the parent resource here is same
   * as the parent resource of the analyzed policy. However, for some analysis types, the parent can
   * be different. For example, for resource existence analysis, if the parent resource of the
   * analyzed policy is a folder or an organization, the parent resource here can still be the
   * project that contains the resources.
   * @param parent parent or {@code null} for none
   */
  public Impact setParent(java.lang.String parent) {
    this.parent = parent;
    return this;
  }

  @Override
  public Impact set(String fieldName, Object value) {
    return (Impact) super.set(fieldName, value);
  }

  @Override
  public Impact clone() {
    return (Impact) super.clone();
  }

}
