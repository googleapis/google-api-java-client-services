/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.workloadmanager.v1.model;

/**
 * Message describing resource filters
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Workload Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResourceFilter extends com.google.api.client.json.GenericJson {

  /**
   * Filter compute engine resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GceInstanceFilter gceInstanceFilter;

  /**
   * The label used for filter resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> inclusionLabels;

  /**
   * The id pattern for filter resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> resourceIdPatterns;

  /**
   * The scopes of evaluation resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scopes;

  /**
   * Filter compute engine resource
   * @return value or {@code null} for none
   */
  public GceInstanceFilter getGceInstanceFilter() {
    return gceInstanceFilter;
  }

  /**
   * Filter compute engine resource
   * @param gceInstanceFilter gceInstanceFilter or {@code null} for none
   */
  public ResourceFilter setGceInstanceFilter(GceInstanceFilter gceInstanceFilter) {
    this.gceInstanceFilter = gceInstanceFilter;
    return this;
  }

  /**
   * The label used for filter resource
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getInclusionLabels() {
    return inclusionLabels;
  }

  /**
   * The label used for filter resource
   * @param inclusionLabels inclusionLabels or {@code null} for none
   */
  public ResourceFilter setInclusionLabels(java.util.Map<String, java.lang.String> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
    return this;
  }

  /**
   * The id pattern for filter resource
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getResourceIdPatterns() {
    return resourceIdPatterns;
  }

  /**
   * The id pattern for filter resource
   * @param resourceIdPatterns resourceIdPatterns or {@code null} for none
   */
  public ResourceFilter setResourceIdPatterns(java.util.List<java.lang.String> resourceIdPatterns) {
    this.resourceIdPatterns = resourceIdPatterns;
    return this;
  }

  /**
   * The scopes of evaluation resource
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScopes() {
    return scopes;
  }

  /**
   * The scopes of evaluation resource
   * @param scopes scopes or {@code null} for none
   */
  public ResourceFilter setScopes(java.util.List<java.lang.String> scopes) {
    this.scopes = scopes;
    return this;
  }

  @Override
  public ResourceFilter set(String fieldName, Object value) {
    return (ResourceFilter) super.set(fieldName, value);
  }

  @Override
  public ResourceFilter clone() {
    return (ResourceFilter) super.clone();
  }

}
