/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * The default application information for a specific DefaultApplicationType.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DefaultApplicationInfo extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Details on the default application setting attempts, in the same order as listed
   * in defaultApplications.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DefaultApplicationSettingAttempt> defaultApplicationSettingAttempts;

  /**
   * Output only. The default application type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String defaultApplicationType;

  /**
   * Output only. The package name of the current default application.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageName;

  /**
   * Output only. Details on the default application setting attempts, in the same order as listed
   * in defaultApplications.
   * @return value or {@code null} for none
   */
  public java.util.List<DefaultApplicationSettingAttempt> getDefaultApplicationSettingAttempts() {
    return defaultApplicationSettingAttempts;
  }

  /**
   * Output only. Details on the default application setting attempts, in the same order as listed
   * in defaultApplications.
   * @param defaultApplicationSettingAttempts defaultApplicationSettingAttempts or {@code null} for none
   */
  public DefaultApplicationInfo setDefaultApplicationSettingAttempts(java.util.List<DefaultApplicationSettingAttempt> defaultApplicationSettingAttempts) {
    this.defaultApplicationSettingAttempts = defaultApplicationSettingAttempts;
    return this;
  }

  /**
   * Output only. The default application type.
   * @return value or {@code null} for none
   */
  public java.lang.String getDefaultApplicationType() {
    return defaultApplicationType;
  }

  /**
   * Output only. The default application type.
   * @param defaultApplicationType defaultApplicationType or {@code null} for none
   */
  public DefaultApplicationInfo setDefaultApplicationType(java.lang.String defaultApplicationType) {
    this.defaultApplicationType = defaultApplicationType;
    return this;
  }

  /**
   * Output only. The package name of the current default application.
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * Output only. The package name of the current default application.
   * @param packageName packageName or {@code null} for none
   */
  public DefaultApplicationInfo setPackageName(java.lang.String packageName) {
    this.packageName = packageName;
    return this;
  }

  @Override
  public DefaultApplicationInfo set(String fieldName, Object value) {
    return (DefaultApplicationInfo) super.set(fieldName, value);
  }

  @Override
  public DefaultApplicationInfo clone() {
    return (DefaultApplicationInfo) super.clone();
  }

}
