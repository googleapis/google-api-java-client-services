/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v1alpha1.model;

/**
 * RevisionStatus communicates the observed state of the Revision (from the controller).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RevisionStatus extends com.google.api.client.json.GenericJson {

  /**
   * Conditions communicates information about ongoing/complete reconciliation processes that bring
   * the "spec" inline with the observed state of the world.
   *
   * As a Revision is being prepared, it will incrementally update conditions "ResourcesAvailable",
   * "ContainerHealthy", and "Active", which contribute to the overall "Ready" condition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RevisionCondition> conditions;

  static {
    // hack to force ProGuard to consider RevisionCondition used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RevisionCondition.class);
  }

  /**
   * ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The
   * digest is resolved during the creation of Revision. This field holds the digest value
   * regardless of whether a tag or digest was originally specified in the Container object.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageDigest;

  /**
   * Specifies the generated logging url for this particular revision based on the revision url
   * template specified in the controller's config. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String logUrl;

  /**
   * ObservedGeneration is the 'Generation' of the Revision that was last processed by the
   * controller.
   *
   * Clients polling for completed reconciliation should poll until observedGeneration =
   * metadata.generation, and the Ready condition's status is True or False.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer observedGeneration;

  /**
   * Not currently used by Cloud Run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceName;

  /**
   * Conditions communicates information about ongoing/complete reconciliation processes that bring
   * the "spec" inline with the observed state of the world.
   *
   * As a Revision is being prepared, it will incrementally update conditions "ResourcesAvailable",
   * "ContainerHealthy", and "Active", which contribute to the overall "Ready" condition.
   * @return value or {@code null} for none
   */
  public java.util.List<RevisionCondition> getConditions() {
    return conditions;
  }

  /**
   * Conditions communicates information about ongoing/complete reconciliation processes that bring
   * the "spec" inline with the observed state of the world.
   *
   * As a Revision is being prepared, it will incrementally update conditions "ResourcesAvailable",
   * "ContainerHealthy", and "Active", which contribute to the overall "Ready" condition.
   * @param conditions conditions or {@code null} for none
   */
  public RevisionStatus setConditions(java.util.List<RevisionCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The
   * digest is resolved during the creation of Revision. This field holds the digest value
   * regardless of whether a tag or digest was originally specified in the Container object.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageDigest() {
    return imageDigest;
  }

  /**
   * ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The
   * digest is resolved during the creation of Revision. This field holds the digest value
   * regardless of whether a tag or digest was originally specified in the Container object.
   * @param imageDigest imageDigest or {@code null} for none
   */
  public RevisionStatus setImageDigest(java.lang.String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Specifies the generated logging url for this particular revision based on the revision url
   * template specified in the controller's config. +optional
   * @return value or {@code null} for none
   */
  public java.lang.String getLogUrl() {
    return logUrl;
  }

  /**
   * Specifies the generated logging url for this particular revision based on the revision url
   * template specified in the controller's config. +optional
   * @param logUrl logUrl or {@code null} for none
   */
  public RevisionStatus setLogUrl(java.lang.String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * ObservedGeneration is the 'Generation' of the Revision that was last processed by the
   * controller.
   *
   * Clients polling for completed reconciliation should poll until observedGeneration =
   * metadata.generation, and the Ready condition's status is True or False.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getObservedGeneration() {
    return observedGeneration;
  }

  /**
   * ObservedGeneration is the 'Generation' of the Revision that was last processed by the
   * controller.
   *
   * Clients polling for completed reconciliation should poll until observedGeneration =
   * metadata.generation, and the Ready condition's status is True or False.
   * @param observedGeneration observedGeneration or {@code null} for none
   */
  public RevisionStatus setObservedGeneration(java.lang.Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * Not currently used by Cloud Run.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceName() {
    return serviceName;
  }

  /**
   * Not currently used by Cloud Run.
   * @param serviceName serviceName or {@code null} for none
   */
  public RevisionStatus setServiceName(java.lang.String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  @Override
  public RevisionStatus set(String fieldName, Object value) {
    return (RevisionStatus) super.set(fieldName, value);
  }

  @Override
  public RevisionStatus clone() {
    return (RevisionStatus) super.clone();
  }

}
