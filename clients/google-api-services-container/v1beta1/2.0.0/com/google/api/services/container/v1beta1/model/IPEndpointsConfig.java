/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.container.v1beta1.model;

/**
 * IP endpoints configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Kubernetes Engine API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IPEndpointsConfig extends com.google.api.client.json.GenericJson {

  /**
   * Configuration of authorized networks. If enabled, restricts access to the control plane based
   * on source IP. It is invalid to specify both Cluster.masterAuthorizedNetworksConfig and this
   * field at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MasterAuthorizedNetworksConfig authorizedNetworksConfig;

  /**
   * Controls whether the control plane allows access through a public IP. It is invalid to specify
   * both PrivateClusterConfig.enablePrivateEndpoint and this field at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enablePublicEndpoint;

  /**
   * Controls whether to allow direct IP access.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enabled;

  /**
   * Controls whether the control plane's private endpoint is accessible from sources in other
   * regions. It is invalid to specify both PrivateClusterMasterGlobalAccessConfig.enabled and this
   * field at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean globalAccess;

  /**
   * Output only. The internal IP address of this cluster's control plane. Only populated if
   * enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateEndpoint;

  /**
   * Subnet to provision the master's private endpoint during cluster creation. Specified in
   * projects/regions/subnetworks format. It is invalid to specify both
   * PrivateClusterConfig.privateEndpointSubnetwork and this field at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateEndpointSubnetwork;

  /**
   * Output only. The external IP address of this cluster's control plane. Only populated if
   * enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publicEndpoint;

  /**
   * Configuration of authorized networks. If enabled, restricts access to the control plane based
   * on source IP. It is invalid to specify both Cluster.masterAuthorizedNetworksConfig and this
   * field at the same time.
   * @return value or {@code null} for none
   */
  public MasterAuthorizedNetworksConfig getAuthorizedNetworksConfig() {
    return authorizedNetworksConfig;
  }

  /**
   * Configuration of authorized networks. If enabled, restricts access to the control plane based
   * on source IP. It is invalid to specify both Cluster.masterAuthorizedNetworksConfig and this
   * field at the same time.
   * @param authorizedNetworksConfig authorizedNetworksConfig or {@code null} for none
   */
  public IPEndpointsConfig setAuthorizedNetworksConfig(MasterAuthorizedNetworksConfig authorizedNetworksConfig) {
    this.authorizedNetworksConfig = authorizedNetworksConfig;
    return this;
  }

  /**
   * Controls whether the control plane allows access through a public IP. It is invalid to specify
   * both PrivateClusterConfig.enablePrivateEndpoint and this field at the same time.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnablePublicEndpoint() {
    return enablePublicEndpoint;
  }

  /**
   * Controls whether the control plane allows access through a public IP. It is invalid to specify
   * both PrivateClusterConfig.enablePrivateEndpoint and this field at the same time.
   * @param enablePublicEndpoint enablePublicEndpoint or {@code null} for none
   */
  public IPEndpointsConfig setEnablePublicEndpoint(java.lang.Boolean enablePublicEndpoint) {
    this.enablePublicEndpoint = enablePublicEndpoint;
    return this;
  }

  /**
   * Controls whether to allow direct IP access.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnabled() {
    return enabled;
  }

  /**
   * Controls whether to allow direct IP access.
   * @param enabled enabled or {@code null} for none
   */
  public IPEndpointsConfig setEnabled(java.lang.Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Controls whether the control plane's private endpoint is accessible from sources in other
   * regions. It is invalid to specify both PrivateClusterMasterGlobalAccessConfig.enabled and this
   * field at the same time.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGlobalAccess() {
    return globalAccess;
  }

  /**
   * Controls whether the control plane's private endpoint is accessible from sources in other
   * regions. It is invalid to specify both PrivateClusterMasterGlobalAccessConfig.enabled and this
   * field at the same time.
   * @param globalAccess globalAccess or {@code null} for none
   */
  public IPEndpointsConfig setGlobalAccess(java.lang.Boolean globalAccess) {
    this.globalAccess = globalAccess;
    return this;
  }

  /**
   * Output only. The internal IP address of this cluster's control plane. Only populated if
   * enabled.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateEndpoint() {
    return privateEndpoint;
  }

  /**
   * Output only. The internal IP address of this cluster's control plane. Only populated if
   * enabled.
   * @param privateEndpoint privateEndpoint or {@code null} for none
   */
  public IPEndpointsConfig setPrivateEndpoint(java.lang.String privateEndpoint) {
    this.privateEndpoint = privateEndpoint;
    return this;
  }

  /**
   * Subnet to provision the master's private endpoint during cluster creation. Specified in
   * projects/regions/subnetworks format. It is invalid to specify both
   * PrivateClusterConfig.privateEndpointSubnetwork and this field at the same time.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateEndpointSubnetwork() {
    return privateEndpointSubnetwork;
  }

  /**
   * Subnet to provision the master's private endpoint during cluster creation. Specified in
   * projects/regions/subnetworks format. It is invalid to specify both
   * PrivateClusterConfig.privateEndpointSubnetwork and this field at the same time.
   * @param privateEndpointSubnetwork privateEndpointSubnetwork or {@code null} for none
   */
  public IPEndpointsConfig setPrivateEndpointSubnetwork(java.lang.String privateEndpointSubnetwork) {
    this.privateEndpointSubnetwork = privateEndpointSubnetwork;
    return this;
  }

  /**
   * Output only. The external IP address of this cluster's control plane. Only populated if
   * enabled.
   * @return value or {@code null} for none
   */
  public java.lang.String getPublicEndpoint() {
    return publicEndpoint;
  }

  /**
   * Output only. The external IP address of this cluster's control plane. Only populated if
   * enabled.
   * @param publicEndpoint publicEndpoint or {@code null} for none
   */
  public IPEndpointsConfig setPublicEndpoint(java.lang.String publicEndpoint) {
    this.publicEndpoint = publicEndpoint;
    return this;
  }

  @Override
  public IPEndpointsConfig set(String fieldName, Object value) {
    return (IPEndpointsConfig) super.set(fieldName, value);
  }

  @Override
  public IPEndpointsConfig clone() {
    return (IPEndpointsConfig) super.clone();
  }

}
