/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * KeyRange represents a range of rows in a table or index.
 *
 * A range has a start key and an end key. These keys can be open or closed, indicating if the range
 * includes rows with that key.
 *
 * Keys are represented by lists, where the ith value in the list corresponds to the ith component
 * of the table or index primary key. Individual values are encoded as described here.
 *
 * For example, consider the following table definition:
 *
 *     CREATE TABLE UserEvents (       UserName STRING(MAX),       EventDate STRING(10)     )
 * PRIMARY KEY(UserName, EventDate);
 *
 * The following keys name rows in this table:
 *
 *     "Bob", "2014-09-23"
 *
 * Since the `UserEvents` table's `PRIMARY KEY` clause names two columns, each `UserEvents` key has
 * two elements; the first is the `UserName`, and the second is the `EventDate`.
 *
 * Key ranges with multiple components are interpreted lexicographically by component using the
 * table or index key's declared sort order. For example, the following range returns all events for
 * user `"Bob"` that occurred in the year 2015:
 *
 *     "start_closed": ["Bob", "2015-01-01"]     "end_closed": ["Bob", "2015-12-31"]
 *
 * Start and end keys can omit trailing key components. This affects the inclusion and exclusion of
 * rows that exactly match the provided key components: if the key is closed, then rows that exactly
 * match the provided components are included; if the key is open, then rows that exactly match are
 * not included.
 *
 * For example, the following range includes all events for `"Bob"` that occurred during and after
 * the year 2000:
 *
 *     "start_closed": ["Bob", "2000-01-01"]     "end_closed": ["Bob"]
 *
 * The next example retrieves all events for `"Bob"`:
 *
 *     "start_closed": ["Bob"]     "end_closed": ["Bob"]
 *
 * To retrieve events before the year 2000:
 *
 *     "start_closed": ["Bob"]     "end_open": ["Bob", "2000-01-01"]
 *
 * The following range includes all rows in the table:
 *
 *     "start_closed": []     "end_closed": []
 *
 * This range returns all users whose `UserName` begins with any character from A to C:
 *
 *     "start_closed": ["A"]     "end_open": ["D"]
 *
 * This range returns all users whose `UserName` begins with B:
 *
 *     "start_closed": ["B"]     "end_open": ["C"]
 *
 * Key ranges honor column sort order. For example, suppose a table is defined as follows:
 *
 *     CREATE TABLE DescendingSortedTable {       Key INT64,       ...     ) PRIMARY KEY(Key DESC);
 *
 * The following range retrieves all rows with key values between 1 and 100 inclusive:
 *
 *     "start_closed": ["100"]     "end_closed": ["1"]
 *
 * Note that 100 is passed as the start, and 1 is passed as the end, because `Key` is a descending
 * column in the schema.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KeyRange extends com.google.api.client.json.GenericJson {

  /**
   * If the end is closed, then the range includes all rows whose first `len(end_closed)` key
   * columns exactly match `end_closed`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> endClosed;

  /**
   * If the end is open, then the range excludes rows whose first `len(end_open)` key columns
   * exactly match `end_open`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> endOpen;

  /**
   * If the start is closed, then the range includes all rows whose first `len(start_closed)` key
   * columns exactly match `start_closed`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> startClosed;

  /**
   * If the start is open, then the range excludes rows whose first `len(start_open)` key columns
   * exactly match `start_open`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> startOpen;

  /**
   * If the end is closed, then the range includes all rows whose first `len(end_closed)` key
   * columns exactly match `end_closed`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getEndClosed() {
    return endClosed;
  }

  /**
   * If the end is closed, then the range includes all rows whose first `len(end_closed)` key
   * columns exactly match `end_closed`.
   * @param endClosed endClosed or {@code null} for none
   */
  public KeyRange setEndClosed(java.util.List<java.lang.Object> endClosed) {
    this.endClosed = endClosed;
    return this;
  }

  /**
   * If the end is open, then the range excludes rows whose first `len(end_open)` key columns
   * exactly match `end_open`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getEndOpen() {
    return endOpen;
  }

  /**
   * If the end is open, then the range excludes rows whose first `len(end_open)` key columns
   * exactly match `end_open`.
   * @param endOpen endOpen or {@code null} for none
   */
  public KeyRange setEndOpen(java.util.List<java.lang.Object> endOpen) {
    this.endOpen = endOpen;
    return this;
  }

  /**
   * If the start is closed, then the range includes all rows whose first `len(start_closed)` key
   * columns exactly match `start_closed`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getStartClosed() {
    return startClosed;
  }

  /**
   * If the start is closed, then the range includes all rows whose first `len(start_closed)` key
   * columns exactly match `start_closed`.
   * @param startClosed startClosed or {@code null} for none
   */
  public KeyRange setStartClosed(java.util.List<java.lang.Object> startClosed) {
    this.startClosed = startClosed;
    return this;
  }

  /**
   * If the start is open, then the range excludes rows whose first `len(start_open)` key columns
   * exactly match `start_open`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getStartOpen() {
    return startOpen;
  }

  /**
   * If the start is open, then the range excludes rows whose first `len(start_open)` key columns
   * exactly match `start_open`.
   * @param startOpen startOpen or {@code null} for none
   */
  public KeyRange setStartOpen(java.util.List<java.lang.Object> startOpen) {
    this.startOpen = startOpen;
    return this;
  }

  @Override
  public KeyRange set(String fieldName, Object value) {
    return (KeyRange) super.set(fieldName, value);
  }

  @Override
  public KeyRange clone() {
    return (KeyRange) super.clone();
  }

}
