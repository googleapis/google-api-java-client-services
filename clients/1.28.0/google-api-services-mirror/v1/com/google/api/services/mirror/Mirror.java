/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mirror;

/**
 * Service definition for Mirror (v1).
 *
 * <p>
 * Interacts with Glass users via the timeline.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/glass" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MirrorRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Mirror extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Google Mirror API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "mirror/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/mirror/v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Mirror(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Mirror(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Accounts.List request = mirror.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounts accounts() {
    return new Accounts();
  }

  /**
   * The "accounts" collection of methods.
   */
  public class Accounts {

    /**
     * Inserts a new account for a user
     *
     * Create a request for the method "accounts.insert".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param userToken The ID for the user.
     * @param accountType Account type to be passed to Android Account Manager.
     * @param accountName The name of the account to be passed to the Android Account Manager.
     * @param content the {@link com.google.api.services.mirror.model.Account}
     * @return the request
     */
    public Insert insert(java.lang.String userToken, java.lang.String accountType, java.lang.String accountName, com.google.api.services.mirror.model.Account content) throws java.io.IOException {
      Insert result = new Insert(userToken, accountType, accountName, content);
      initialize(result);
      return result;
    }

    public class Insert extends MirrorRequest<com.google.api.services.mirror.model.Account> {

      private static final String REST_PATH = "accounts/{userToken}/{accountType}/{accountName}";

      /**
       * Inserts a new account for a user
       *
       * Create a request for the method "accounts.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userToken The ID for the user.
       * @param accountType Account type to be passed to Android Account Manager.
       * @param accountName The name of the account to be passed to the Android Account Manager.
       * @param content the {@link com.google.api.services.mirror.model.Account}
       * @since 1.13
       */
      protected Insert(java.lang.String userToken, java.lang.String accountType, java.lang.String accountName, com.google.api.services.mirror.model.Account content) {
        super(Mirror.this, "POST", REST_PATH, content, com.google.api.services.mirror.model.Account.class);
        this.userToken = com.google.api.client.util.Preconditions.checkNotNull(userToken, "Required parameter userToken must be specified.");
        this.accountType = com.google.api.client.util.Preconditions.checkNotNull(accountType, "Required parameter accountType must be specified.");
        this.accountName = com.google.api.client.util.Preconditions.checkNotNull(accountName, "Required parameter accountName must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The ID for the user. */
      @com.google.api.client.util.Key
      private java.lang.String userToken;

      /** The ID for the user.
       */
      public java.lang.String getUserToken() {
        return userToken;
      }

      /** The ID for the user. */
      public Insert setUserToken(java.lang.String userToken) {
        this.userToken = userToken;
        return this;
      }

      /** Account type to be passed to Android Account Manager. */
      @com.google.api.client.util.Key
      private java.lang.String accountType;

      /** Account type to be passed to Android Account Manager.
       */
      public java.lang.String getAccountType() {
        return accountType;
      }

      /** Account type to be passed to Android Account Manager. */
      public Insert setAccountType(java.lang.String accountType) {
        this.accountType = accountType;
        return this;
      }

      /** The name of the account to be passed to the Android Account Manager. */
      @com.google.api.client.util.Key
      private java.lang.String accountName;

      /** The name of the account to be passed to the Android Account Manager.
       */
      public java.lang.String getAccountName() {
        return accountName;
      }

      /** The name of the account to be passed to the Android Account Manager. */
      public Insert setAccountName(java.lang.String accountName) {
        this.accountName = accountName;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Contacts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Contacts.List request = mirror.contacts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Contacts contacts() {
    return new Contacts();
  }

  /**
   * The "contacts" collection of methods.
   */
  public class Contacts {

    /**
     * Deletes a contact.
     *
     * Create a request for the method "contacts.delete".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the contact.
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends MirrorRequest<Void> {

      private static final String REST_PATH = "contacts/{id}";

      /**
       * Deletes a contact.
       *
       * Create a request for the method "contacts.delete".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the contact.
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Mirror.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the contact. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the contact.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the contact. */
      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a single contact by ID.
     *
     * Create a request for the method "contacts.get".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the contact.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends MirrorRequest<com.google.api.services.mirror.model.Contact> {

      private static final String REST_PATH = "contacts/{id}";

      /**
       * Gets a single contact by ID.
       *
       * Create a request for the method "contacts.get".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the contact.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.Contact.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the contact. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the contact.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the contact. */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a new contact.
     *
     * Create a request for the method "contacts.insert".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.mirror.model.Contact}
     * @return the request
     */
    public Insert insert(com.google.api.services.mirror.model.Contact content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends MirrorRequest<com.google.api.services.mirror.model.Contact> {

      private static final String REST_PATH = "contacts";

      /**
       * Inserts a new contact.
       *
       * Create a request for the method "contacts.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.mirror.model.Contact}
       * @since 1.13
       */
      protected Insert(com.google.api.services.mirror.model.Contact content) {
        super(Mirror.this, "POST", REST_PATH, content, com.google.api.services.mirror.model.Contact.class);
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getDisplayName(), "Contact.getDisplayName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getId(), "Contact.getId()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of contacts for the authenticated user.
     *
     * Create a request for the method "contacts.list".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends MirrorRequest<com.google.api.services.mirror.model.ContactsListResponse> {

      private static final String REST_PATH = "contacts";

      /**
       * Retrieves a list of contacts for the authenticated user.
       *
       * Create a request for the method "contacts.list".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.ContactsListResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates a contact in place. This method supports patch semantics.
     *
     * Create a request for the method "contacts.patch".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the contact.
     * @param content the {@link com.google.api.services.mirror.model.Contact}
     * @return the request
     */
    public Patch patch(java.lang.String id, com.google.api.services.mirror.model.Contact content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends MirrorRequest<com.google.api.services.mirror.model.Contact> {

      private static final String REST_PATH = "contacts/{id}";

      /**
       * Updates a contact in place. This method supports patch semantics.
       *
       * Create a request for the method "contacts.patch".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the contact.
       * @param content the {@link com.google.api.services.mirror.model.Contact}
       * @since 1.13
       */
      protected Patch(java.lang.String id, com.google.api.services.mirror.model.Contact content) {
        super(Mirror.this, "PATCH", REST_PATH, content, com.google.api.services.mirror.model.Contact.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the contact. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the contact.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the contact. */
      public Patch setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates a contact in place.
     *
     * Create a request for the method "contacts.update".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the contact.
     * @param content the {@link com.google.api.services.mirror.model.Contact}
     * @return the request
     */
    public Update update(java.lang.String id, com.google.api.services.mirror.model.Contact content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends MirrorRequest<com.google.api.services.mirror.model.Contact> {

      private static final String REST_PATH = "contacts/{id}";

      /**
       * Updates a contact in place.
       *
       * Create a request for the method "contacts.update".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the contact.
       * @param content the {@link com.google.api.services.mirror.model.Contact}
       * @since 1.13
       */
      protected Update(java.lang.String id, com.google.api.services.mirror.model.Contact content) {
        super(Mirror.this, "PUT", REST_PATH, content, com.google.api.services.mirror.model.Contact.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getDisplayName(), "Contact.getDisplayName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getId(), "Contact.getId()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the contact. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the contact.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the contact. */
      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Locations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Locations.List request = mirror.locations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Locations locations() {
    return new Locations();
  }

  /**
   * The "locations" collection of methods.
   */
  public class Locations {

    /**
     * Gets a single location by ID.
     *
     * Create a request for the method "locations.get".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the location or latest for the last known location.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends MirrorRequest<com.google.api.services.mirror.model.Location> {

      private static final String REST_PATH = "locations/{id}";

      /**
       * Gets a single location by ID.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the location or latest for the last known location.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.Location.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the location or latest for the last known location. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the location or latest for the last known location.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the location or latest for the last known location. */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of locations for the user.
     *
     * Create a request for the method "locations.list".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends MirrorRequest<com.google.api.services.mirror.model.LocationsListResponse> {

      private static final String REST_PATH = "locations";

      /**
       * Retrieves a list of locations for the user.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.LocationsListResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Settings collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Settings.List request = mirror.settings().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Settings settings() {
    return new Settings();
  }

  /**
   * The "settings" collection of methods.
   */
  public class Settings {

    /**
     * Gets a single setting by ID.
     *
     * Create a request for the method "settings.get".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the setting. The following IDs are valid:
    - locale - The key to the user’s
     *        language/locale (BCP 47 identifier) that Glassware should use to render localized content.
     *        - timezone - The key to the user’s current time zone region as defined in the tz database.
     *        Example: America/Los_Angeles.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends MirrorRequest<com.google.api.services.mirror.model.Setting> {

      private static final String REST_PATH = "settings/{id}";

      /**
       * Gets a single setting by ID.
       *
       * Create a request for the method "settings.get".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the setting. The following IDs are valid:
    - locale - The key to the user’s
     *        language/locale (BCP 47 identifier) that Glassware should use to render localized content.
     *        - timezone - The key to the user’s current time zone region as defined in the tz database.
     *        Example: America/Los_Angeles.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.Setting.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * The ID of the setting. The following IDs are valid: - locale - The key to the user’s
       * language/locale (BCP 47 identifier) that Glassware should use to render localized content.
       * - timezone - The key to the user’s current time zone region as defined in the tz database.
       * Example: America/Los_Angeles.
       */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the setting. The following IDs are valid: - locale - The key to the user’s
     language/locale (BCP 47 identifier) that Glassware should use to render localized content. -
     timezone - The key to the user’s current time zone region as defined in the tz database. Example:
     America/Los_Angeles.
       */
      public java.lang.String getId() {
        return id;
      }

      /**
       * The ID of the setting. The following IDs are valid: - locale - The key to the user’s
       * language/locale (BCP 47 identifier) that Glassware should use to render localized content.
       * - timezone - The key to the user’s current time zone region as defined in the tz database.
       * Example: America/Los_Angeles.
       */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Subscriptions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Subscriptions.List request = mirror.subscriptions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Subscriptions subscriptions() {
    return new Subscriptions();
  }

  /**
   * The "subscriptions" collection of methods.
   */
  public class Subscriptions {

    /**
     * Deletes a subscription.
     *
     * Create a request for the method "subscriptions.delete".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the subscription.
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends MirrorRequest<Void> {

      private static final String REST_PATH = "subscriptions/{id}";

      /**
       * Deletes a subscription.
       *
       * Create a request for the method "subscriptions.delete".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the subscription.
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Mirror.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the subscription. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the subscription.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the subscription. */
      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Creates a new subscription.
     *
     * Create a request for the method "subscriptions.insert".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.mirror.model.Subscription}
     * @return the request
     */
    public Insert insert(com.google.api.services.mirror.model.Subscription content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends MirrorRequest<com.google.api.services.mirror.model.Subscription> {

      private static final String REST_PATH = "subscriptions";

      /**
       * Creates a new subscription.
       *
       * Create a request for the method "subscriptions.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.mirror.model.Subscription}
       * @since 1.13
       */
      protected Insert(com.google.api.services.mirror.model.Subscription content) {
        super(Mirror.this, "POST", REST_PATH, content, com.google.api.services.mirror.model.Subscription.class);
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getCallbackUrl(), "Subscription.getCallbackUrl()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getCollection(), "Subscription.getCollection()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of subscriptions for the authenticated user and service.
     *
     * Create a request for the method "subscriptions.list".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends MirrorRequest<com.google.api.services.mirror.model.SubscriptionsListResponse> {

      private static final String REST_PATH = "subscriptions";

      /**
       * Retrieves a list of subscriptions for the authenticated user and service.
       *
       * Create a request for the method "subscriptions.list".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.SubscriptionsListResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing subscription in place.
     *
     * Create a request for the method "subscriptions.update".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the subscription.
     * @param content the {@link com.google.api.services.mirror.model.Subscription}
     * @return the request
     */
    public Update update(java.lang.String id, com.google.api.services.mirror.model.Subscription content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends MirrorRequest<com.google.api.services.mirror.model.Subscription> {

      private static final String REST_PATH = "subscriptions/{id}";

      /**
       * Updates an existing subscription in place.
       *
       * Create a request for the method "subscriptions.update".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the subscription.
       * @param content the {@link com.google.api.services.mirror.model.Subscription}
       * @since 1.13
       */
      protected Update(java.lang.String id, com.google.api.services.mirror.model.Subscription content) {
        super(Mirror.this, "PUT", REST_PATH, content, com.google.api.services.mirror.model.Subscription.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getCallbackUrl(), "Subscription.getCallbackUrl()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getCollection(), "Subscription.getCollection()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the subscription. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the subscription.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the subscription. */
      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Timeline collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Mirror mirror = new Mirror(...);}
   *   {@code Mirror.Timeline.List request = mirror.timeline().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Timeline timeline() {
    return new Timeline();
  }

  /**
   * The "timeline" collection of methods.
   */
  public class Timeline {

    /**
     * Deletes a timeline item.
     *
     * Create a request for the method "timeline.delete".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the timeline item.
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends MirrorRequest<Void> {

      private static final String REST_PATH = "timeline/{id}";

      /**
       * Deletes a timeline item.
       *
       * Create a request for the method "timeline.delete".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the timeline item.
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Mirror.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the timeline item. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the timeline item.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the timeline item. */
      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a single timeline item by ID.
     *
     * Create a request for the method "timeline.get".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the timeline item.
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends MirrorRequest<com.google.api.services.mirror.model.TimelineItem> {

      private static final String REST_PATH = "timeline/{id}";

      /**
       * Gets a single timeline item by ID.
       *
       * Create a request for the method "timeline.get".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the timeline item.
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.TimelineItem.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the timeline item. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the timeline item.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the timeline item. */
      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a new item into the timeline.
     *
     * Create a request for the method "timeline.insert".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
     * @return the request
     */
    public Insert insert(com.google.api.services.mirror.model.TimelineItem content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    /**
     * Inserts a new item into the timeline.
     *
     * Create a request for the method "timeline.insert".
     *
     * This request holds the parameters needed by the the mirror server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     *
     * @param content the {@link com.google.api.services.mirror.model.TimelineItem} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Insert insert(com.google.api.services.mirror.model.TimelineItem content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Insert result = new Insert(content, mediaContent);
      initialize(result);
      return result;
    }

    public class Insert extends MirrorRequest<com.google.api.services.mirror.model.TimelineItem> {

      private static final String REST_PATH = "timeline";

      /**
       * Inserts a new item into the timeline.
       *
       * Create a request for the method "timeline.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
       * @since 1.13
       */
      protected Insert(com.google.api.services.mirror.model.TimelineItem content) {
        super(Mirror.this, "POST", REST_PATH, content, com.google.api.services.mirror.model.TimelineItem.class);
      }

      /**
       * Inserts a new item into the timeline.
       *
       * Create a request for the method "timeline.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       *
       * @param content the {@link com.google.api.services.mirror.model.TimelineItem} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Insert(com.google.api.services.mirror.model.TimelineItem content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Mirror.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.mirror.model.TimelineItem.class);
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of timeline items for the authenticated user.
     *
     * Create a request for the method "timeline.list".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends MirrorRequest<com.google.api.services.mirror.model.TimelineListResponse> {

      private static final String REST_PATH = "timeline";

      /**
       * Retrieves a list of timeline items for the authenticated user.
       *
       * Create a request for the method "timeline.list".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.TimelineListResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** If provided, only items with the given bundleId will be returned. */
      @com.google.api.client.util.Key
      private java.lang.String bundleId;

      /** If provided, only items with the given bundleId will be returned.
       */
      public java.lang.String getBundleId() {
        return bundleId;
      }

      /** If provided, only items with the given bundleId will be returned. */
      public List setBundleId(java.lang.String bundleId) {
        this.bundleId = bundleId;
        return this;
      }

      /** If true, tombstone records for deleted items will be returned. */
      @com.google.api.client.util.Key
      private java.lang.Boolean includeDeleted;

      /** If true, tombstone records for deleted items will be returned.
       */
      public java.lang.Boolean getIncludeDeleted() {
        return includeDeleted;
      }

      /** If true, tombstone records for deleted items will be returned. */
      public List setIncludeDeleted(java.lang.Boolean includeDeleted) {
        this.includeDeleted = includeDeleted;
        return this;
      }

      /** The maximum number of items to include in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of items to include in the response, used for paging.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of items to include in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Controls the order in which timeline items are returned. */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Controls the order in which timeline items are returned.
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** Controls the order in which timeline items are returned. */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /** Token for the page of results to return. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token for the page of results to return.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token for the page of results to return. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** If true, only pinned items will be returned. */
      @com.google.api.client.util.Key
      private java.lang.Boolean pinnedOnly;

      /** If true, only pinned items will be returned.
       */
      public java.lang.Boolean getPinnedOnly() {
        return pinnedOnly;
      }

      /** If true, only pinned items will be returned. */
      public List setPinnedOnly(java.lang.Boolean pinnedOnly) {
        this.pinnedOnly = pinnedOnly;
        return this;
      }

      /** If provided, only items with the given sourceItemId will be returned. */
      @com.google.api.client.util.Key
      private java.lang.String sourceItemId;

      /** If provided, only items with the given sourceItemId will be returned.
       */
      public java.lang.String getSourceItemId() {
        return sourceItemId;
      }

      /** If provided, only items with the given sourceItemId will be returned. */
      public List setSourceItemId(java.lang.String sourceItemId) {
        this.sourceItemId = sourceItemId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates a timeline item in place. This method supports patch semantics.
     *
     * Create a request for the method "timeline.patch".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the timeline item.
     * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
     * @return the request
     */
    public Patch patch(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends MirrorRequest<com.google.api.services.mirror.model.TimelineItem> {

      private static final String REST_PATH = "timeline/{id}";

      /**
       * Updates a timeline item in place. This method supports patch semantics.
       *
       * Create a request for the method "timeline.patch".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the timeline item.
       * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
       * @since 1.13
       */
      protected Patch(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content) {
        super(Mirror.this, "PATCH", REST_PATH, content, com.google.api.services.mirror.model.TimelineItem.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the timeline item. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the timeline item.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the timeline item. */
      public Patch setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates a timeline item in place.
     *
     * Create a request for the method "timeline.update".
     *
     * This request holds the parameters needed by the mirror server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id The ID of the timeline item.
     * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
     * @return the request
     */
    public Update update(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    /**
     * Updates a timeline item in place.
     *
     * Create a request for the method "timeline.update".
     *
     * This request holds the parameters needed by the the mirror server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param id The ID of the timeline item.
     * @param content the {@link com.google.api.services.mirror.model.TimelineItem} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Update update(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Update result = new Update(id, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Update extends MirrorRequest<com.google.api.services.mirror.model.TimelineItem> {

      private static final String REST_PATH = "timeline/{id}";

      /**
       * Updates a timeline item in place.
       *
       * Create a request for the method "timeline.update".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The ID of the timeline item.
       * @param content the {@link com.google.api.services.mirror.model.TimelineItem}
       * @since 1.13
       */
      protected Update(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content) {
        super(Mirror.this, "PUT", REST_PATH, content, com.google.api.services.mirror.model.TimelineItem.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      /**
       * Updates a timeline item in place.
       *
       * Create a request for the method "timeline.update".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param id The ID of the timeline item.
       * @param content the {@link com.google.api.services.mirror.model.TimelineItem} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Update(java.lang.String id, com.google.api.services.mirror.model.TimelineItem content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Mirror.this, "PUT", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.mirror.model.TimelineItem.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the timeline item. */
      @com.google.api.client.util.Key
      private java.lang.String id;

      /** The ID of the timeline item.
       */
      public java.lang.String getId() {
        return id;
      }

      /** The ID of the timeline item. */
      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Attachments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Mirror mirror = new Mirror(...);}
     *   {@code Mirror.Attachments.List request = mirror.attachments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Attachments attachments() {
      return new Attachments();
    }

    /**
     * The "attachments" collection of methods.
     */
    public class Attachments {

      /**
       * Deletes an attachment from a timeline item.
       *
       * Create a request for the method "attachments.delete".
       *
       * This request holds the parameters needed by the mirror server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param itemId The ID of the timeline item the attachment belongs to.
       * @param attachmentId The ID of the attachment.
       * @return the request
       */
      public Delete delete(java.lang.String itemId, java.lang.String attachmentId) throws java.io.IOException {
        Delete result = new Delete(itemId, attachmentId);
        initialize(result);
        return result;
      }

      public class Delete extends MirrorRequest<Void> {

        private static final String REST_PATH = "timeline/{itemId}/attachments/{attachmentId}";

        /**
         * Deletes an attachment from a timeline item.
         *
         * Create a request for the method "attachments.delete".
         *
         * This request holds the parameters needed by the the mirror server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param itemId The ID of the timeline item the attachment belongs to.
         * @param attachmentId The ID of the attachment.
         * @since 1.13
         */
        protected Delete(java.lang.String itemId, java.lang.String attachmentId) {
          super(Mirror.this, "DELETE", REST_PATH, null, Void.class);
          this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
          this.attachmentId = com.google.api.client.util.Preconditions.checkNotNull(attachmentId, "Required parameter attachmentId must be specified.");
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(java.lang.String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        /** The ID of the timeline item the attachment belongs to. */
        @com.google.api.client.util.Key
        private java.lang.String itemId;

        /** The ID of the timeline item the attachment belongs to.
         */
        public java.lang.String getItemId() {
          return itemId;
        }

        /** The ID of the timeline item the attachment belongs to. */
        public Delete setItemId(java.lang.String itemId) {
          this.itemId = itemId;
          return this;
        }

        /** The ID of the attachment. */
        @com.google.api.client.util.Key
        private java.lang.String attachmentId;

        /** The ID of the attachment.
         */
        public java.lang.String getAttachmentId() {
          return attachmentId;
        }

        /** The ID of the attachment. */
        public Delete setAttachmentId(java.lang.String attachmentId) {
          this.attachmentId = attachmentId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves an attachment on a timeline item by item ID and attachment ID.
       *
       * Create a request for the method "attachments.get".
       *
       * This request holds the parameters needed by the mirror server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param itemId The ID of the timeline item the attachment belongs to.
       * @param attachmentId The ID of the attachment.
       * @return the request
       */
      public Get get(java.lang.String itemId, java.lang.String attachmentId) throws java.io.IOException {
        Get result = new Get(itemId, attachmentId);
        initialize(result);
        return result;
      }

      public class Get extends MirrorRequest<com.google.api.services.mirror.model.Attachment> {

        private static final String REST_PATH = "timeline/{itemId}/attachments/{attachmentId}";

        /**
         * Retrieves an attachment on a timeline item by item ID and attachment ID.
         *
         * Create a request for the method "attachments.get".
         *
         * This request holds the parameters needed by the the mirror server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param itemId The ID of the timeline item the attachment belongs to.
         * @param attachmentId The ID of the attachment.
         * @since 1.13
         */
        protected Get(java.lang.String itemId, java.lang.String attachmentId) {
          super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.Attachment.class);
          this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
          this.attachmentId = com.google.api.client.util.Preconditions.checkNotNull(attachmentId, "Required parameter attachmentId must be specified.");
          initializeMediaDownload();
        }

        @Override
        public void executeMediaAndDownloadTo(java.io.OutputStream outputStream) throws java.io.IOException {
          super.executeMediaAndDownloadTo(outputStream);
        }

        @Override
        public java.io.InputStream executeMediaAsInputStream() throws java.io.IOException {
          return super.executeMediaAsInputStream();
        }

        @Override
        public com.google.api.client.http.HttpResponse executeMedia() throws java.io.IOException {
          return super.executeMedia();
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        /** The ID of the timeline item the attachment belongs to. */
        @com.google.api.client.util.Key
        private java.lang.String itemId;

        /** The ID of the timeline item the attachment belongs to.
         */
        public java.lang.String getItemId() {
          return itemId;
        }

        /** The ID of the timeline item the attachment belongs to. */
        public Get setItemId(java.lang.String itemId) {
          this.itemId = itemId;
          return this;
        }

        /** The ID of the attachment. */
        @com.google.api.client.util.Key
        private java.lang.String attachmentId;

        /** The ID of the attachment.
         */
        public java.lang.String getAttachmentId() {
          return attachmentId;
        }

        /** The ID of the attachment. */
        public Get setAttachmentId(java.lang.String attachmentId) {
          this.attachmentId = attachmentId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Adds a new attachment to a timeline item.
       *
       * Create a request for the method "attachments.insert".
       *
       * This request holds the parameters needed by the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param itemId The ID of the timeline item the attachment belongs to.
       * @return the request
       */
      public Insert insert(java.lang.String itemId) throws java.io.IOException {
        Insert result = new Insert(itemId);
        initialize(result);
        return result;
      }

      /**
       * Adds a new attachment to a timeline item.
       *
       * Create a request for the method "attachments.insert".
       *
       * This request holds the parameters needed by the the mirror server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param itemId The ID of the timeline item the attachment belongs to.
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       * @throws java.io.IOException if the initialization of the request fails
       */
      public Insert insert(java.lang.String itemId, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
        Insert result = new Insert(itemId, mediaContent);
        initialize(result);
        return result;
      }

      public class Insert extends MirrorRequest<com.google.api.services.mirror.model.Attachment> {

        private static final String REST_PATH = "timeline/{itemId}/attachments";

        /**
         * Adds a new attachment to a timeline item.
         *
         * Create a request for the method "attachments.insert".
         *
         * This request holds the parameters needed by the the mirror server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param itemId The ID of the timeline item the attachment belongs to.
         * @since 1.13
         */
        protected Insert(java.lang.String itemId) {
          super(Mirror.this, "POST", REST_PATH, null, com.google.api.services.mirror.model.Attachment.class);
          this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
        }

        /**
         * Adds a new attachment to a timeline item.
         *
         * Create a request for the method "attachments.insert".
         *
         * This request holds the parameters needed by the the mirror server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param itemId The ID of the timeline item the attachment belongs to.
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected Insert(java.lang.String itemId, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
          super(Mirror.this, "POST", "/upload/" + getServicePath() + REST_PATH, null, com.google.api.services.mirror.model.Attachment.class);
          this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
          initializeMediaUpload(mediaContent);
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        /** The ID of the timeline item the attachment belongs to. */
        @com.google.api.client.util.Key
        private java.lang.String itemId;

        /** The ID of the timeline item the attachment belongs to.
         */
        public java.lang.String getItemId() {
          return itemId;
        }

        /** The ID of the timeline item the attachment belongs to. */
        public Insert setItemId(java.lang.String itemId) {
          this.itemId = itemId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Returns a list of attachments for a timeline item.
       *
       * Create a request for the method "attachments.list".
       *
       * This request holds the parameters needed by the mirror server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param itemId The ID of the timeline item whose attachments should be listed.
       * @return the request
       */
      public List list(java.lang.String itemId) throws java.io.IOException {
        List result = new List(itemId);
        initialize(result);
        return result;
      }

      public class List extends MirrorRequest<com.google.api.services.mirror.model.AttachmentsListResponse> {

        private static final String REST_PATH = "timeline/{itemId}/attachments";

        /**
         * Returns a list of attachments for a timeline item.
         *
         * Create a request for the method "attachments.list".
         *
         * This request holds the parameters needed by the the mirror server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param itemId The ID of the timeline item whose attachments should be listed.
         * @since 1.13
         */
        protected List(java.lang.String itemId) {
          super(Mirror.this, "GET", REST_PATH, null, com.google.api.services.mirror.model.AttachmentsListResponse.class);
          this.itemId = com.google.api.client.util.Preconditions.checkNotNull(itemId, "Required parameter itemId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        /** The ID of the timeline item whose attachments should be listed. */
        @com.google.api.client.util.Key
        private java.lang.String itemId;

        /** The ID of the timeline item whose attachments should be listed.
         */
        public java.lang.String getItemId() {
          return itemId;
        }

        /** The ID of the timeline item whose attachments should be listed. */
        public List setItemId(java.lang.String itemId) {
          this.itemId = itemId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Mirror}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Mirror}. */
    @Override
    public Mirror build() {
      return new Mirror(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MirrorRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMirrorRequestInitializer(
        MirrorRequestInitializer mirrorRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(mirrorRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
