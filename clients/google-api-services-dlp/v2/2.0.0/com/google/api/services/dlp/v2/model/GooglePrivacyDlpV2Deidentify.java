/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * Create a de-identified copy of a storage bucket. Only compatible with Cloud Storage buckets. A
 * TransformationDetail will be created for each transformation. Compatible with: Inspection of
 * Cloud Storage
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Sensitive Data Protection (DLP). For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2Deidentify extends com.google.api.client.json.GenericJson {

  /**
   * Required. User settable Cloud Storage bucket and folders to store de-identified files. This
   * field must be set for Cloud Storage deidentification. The output Cloud Storage bucket must be
   * different from the input bucket. De-identified files will overwrite files in the output path.
   * Form of: gs://bucket/folder/ or gs://bucket
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloudStorageOutput;

  /**
   * List of user-specified file type groups to transform. If specified, only the files with these
   * file types are transformed. If empty, all supported files are transformed. Supported types may
   * be automatically added over time. Any unsupported file types that are set in this field are
   * excluded from de-identification. An error is recorded for each unsupported file in the
   * TransformationDetails output table. Currently the only file types supported are: IMAGES,
   * TEXT_FILES, CSV, TSV.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> fileTypesToTransform;

  /**
   * User specified deidentify templates and configs for structured, unstructured, and image files.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2TransformationConfig transformationConfig;

  /**
   * Config for storing transformation details. This field specifies the configuration for storing
   * detailed metadata about each transformation performed during a de-identification process. The
   * metadata is stored separately from the de-identified content itself and provides a granular
   * record of both successful transformations and any failures that occurred. Enabling this
   * configuration is essential for users who need to access comprehensive information about the
   * status, outcome, and specifics of each transformation. The details are captured in the
   * TransformationDetails message for each operation. Key use cases: * **Auditing and compliance**
   * * Provides a verifiable audit trail of de-identification activities, which is crucial for
   * meeting regulatory requirements and internal data governance policies. * Logs what data was
   * transformed, what transformations were applied, when they occurred, and their success status.
   * This helps demonstrate accountability and due diligence in protecting sensitive data. *
   * **Troubleshooting and debugging** * Offers detailed error messages and context if a
   * transformation fails. This information is useful for diagnosing and resolving issues in the de-
   * identification pipeline. * Helps pinpoint the exact location and nature of failures, speeding
   * up the debugging process. * **Process verification and quality assurance** * Allows users to
   * confirm that de-identification rules and transformations were applied correctly and
   * consistently across the dataset as intended. * Helps in verifying the effectiveness of the
   * chosen de-identification strategies. * **Data lineage and impact analysis** * Creates a record
   * of how data elements were modified, contributing to data lineage. This is useful for
   * understanding the provenance of de-identified data. * Aids in assessing the potential impact of
   * de-identification choices on downstream analytical processes or data usability. * **Reporting
   * and operational insights** * You can analyze the metadata stored in a queryable BigQuery table
   * to generate reports on transformation success rates, common error types, processing volumes
   * (e.g., transformedBytes), and the types of transformations applied. * These insights can inform
   * optimization of de-identification configurations and resource planning. To take advantage of
   * these benefits, set this configuration. The stored details include a description of the
   * transformation, success or error codes, error messages, the number of bytes transformed, the
   * location of the transformed content, and identifiers for the job and source data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2TransformationDetailsStorageConfig transformationDetailsStorageConfig;

  /**
   * Required. User settable Cloud Storage bucket and folders to store de-identified files. This
   * field must be set for Cloud Storage deidentification. The output Cloud Storage bucket must be
   * different from the input bucket. De-identified files will overwrite files in the output path.
   * Form of: gs://bucket/folder/ or gs://bucket
   * @return value or {@code null} for none
   */
  public java.lang.String getCloudStorageOutput() {
    return cloudStorageOutput;
  }

  /**
   * Required. User settable Cloud Storage bucket and folders to store de-identified files. This
   * field must be set for Cloud Storage deidentification. The output Cloud Storage bucket must be
   * different from the input bucket. De-identified files will overwrite files in the output path.
   * Form of: gs://bucket/folder/ or gs://bucket
   * @param cloudStorageOutput cloudStorageOutput or {@code null} for none
   */
  public GooglePrivacyDlpV2Deidentify setCloudStorageOutput(java.lang.String cloudStorageOutput) {
    this.cloudStorageOutput = cloudStorageOutput;
    return this;
  }

  /**
   * List of user-specified file type groups to transform. If specified, only the files with these
   * file types are transformed. If empty, all supported files are transformed. Supported types may
   * be automatically added over time. Any unsupported file types that are set in this field are
   * excluded from de-identification. An error is recorded for each unsupported file in the
   * TransformationDetails output table. Currently the only file types supported are: IMAGES,
   * TEXT_FILES, CSV, TSV.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFileTypesToTransform() {
    return fileTypesToTransform;
  }

  /**
   * List of user-specified file type groups to transform. If specified, only the files with these
   * file types are transformed. If empty, all supported files are transformed. Supported types may
   * be automatically added over time. Any unsupported file types that are set in this field are
   * excluded from de-identification. An error is recorded for each unsupported file in the
   * TransformationDetails output table. Currently the only file types supported are: IMAGES,
   * TEXT_FILES, CSV, TSV.
   * @param fileTypesToTransform fileTypesToTransform or {@code null} for none
   */
  public GooglePrivacyDlpV2Deidentify setFileTypesToTransform(java.util.List<java.lang.String> fileTypesToTransform) {
    this.fileTypesToTransform = fileTypesToTransform;
    return this;
  }

  /**
   * User specified deidentify templates and configs for structured, unstructured, and image files.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2TransformationConfig getTransformationConfig() {
    return transformationConfig;
  }

  /**
   * User specified deidentify templates and configs for structured, unstructured, and image files.
   * @param transformationConfig transformationConfig or {@code null} for none
   */
  public GooglePrivacyDlpV2Deidentify setTransformationConfig(GooglePrivacyDlpV2TransformationConfig transformationConfig) {
    this.transformationConfig = transformationConfig;
    return this;
  }

  /**
   * Config for storing transformation details. This field specifies the configuration for storing
   * detailed metadata about each transformation performed during a de-identification process. The
   * metadata is stored separately from the de-identified content itself and provides a granular
   * record of both successful transformations and any failures that occurred. Enabling this
   * configuration is essential for users who need to access comprehensive information about the
   * status, outcome, and specifics of each transformation. The details are captured in the
   * TransformationDetails message for each operation. Key use cases: * **Auditing and compliance**
   * * Provides a verifiable audit trail of de-identification activities, which is crucial for
   * meeting regulatory requirements and internal data governance policies. * Logs what data was
   * transformed, what transformations were applied, when they occurred, and their success status.
   * This helps demonstrate accountability and due diligence in protecting sensitive data. *
   * **Troubleshooting and debugging** * Offers detailed error messages and context if a
   * transformation fails. This information is useful for diagnosing and resolving issues in the de-
   * identification pipeline. * Helps pinpoint the exact location and nature of failures, speeding
   * up the debugging process. * **Process verification and quality assurance** * Allows users to
   * confirm that de-identification rules and transformations were applied correctly and
   * consistently across the dataset as intended. * Helps in verifying the effectiveness of the
   * chosen de-identification strategies. * **Data lineage and impact analysis** * Creates a record
   * of how data elements were modified, contributing to data lineage. This is useful for
   * understanding the provenance of de-identified data. * Aids in assessing the potential impact of
   * de-identification choices on downstream analytical processes or data usability. * **Reporting
   * and operational insights** * You can analyze the metadata stored in a queryable BigQuery table
   * to generate reports on transformation success rates, common error types, processing volumes
   * (e.g., transformedBytes), and the types of transformations applied. * These insights can inform
   * optimization of de-identification configurations and resource planning. To take advantage of
   * these benefits, set this configuration. The stored details include a description of the
   * transformation, success or error codes, error messages, the number of bytes transformed, the
   * location of the transformed content, and identifiers for the job and source data.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2TransformationDetailsStorageConfig getTransformationDetailsStorageConfig() {
    return transformationDetailsStorageConfig;
  }

  /**
   * Config for storing transformation details. This field specifies the configuration for storing
   * detailed metadata about each transformation performed during a de-identification process. The
   * metadata is stored separately from the de-identified content itself and provides a granular
   * record of both successful transformations and any failures that occurred. Enabling this
   * configuration is essential for users who need to access comprehensive information about the
   * status, outcome, and specifics of each transformation. The details are captured in the
   * TransformationDetails message for each operation. Key use cases: * **Auditing and compliance**
   * * Provides a verifiable audit trail of de-identification activities, which is crucial for
   * meeting regulatory requirements and internal data governance policies. * Logs what data was
   * transformed, what transformations were applied, when they occurred, and their success status.
   * This helps demonstrate accountability and due diligence in protecting sensitive data. *
   * **Troubleshooting and debugging** * Offers detailed error messages and context if a
   * transformation fails. This information is useful for diagnosing and resolving issues in the de-
   * identification pipeline. * Helps pinpoint the exact location and nature of failures, speeding
   * up the debugging process. * **Process verification and quality assurance** * Allows users to
   * confirm that de-identification rules and transformations were applied correctly and
   * consistently across the dataset as intended. * Helps in verifying the effectiveness of the
   * chosen de-identification strategies. * **Data lineage and impact analysis** * Creates a record
   * of how data elements were modified, contributing to data lineage. This is useful for
   * understanding the provenance of de-identified data. * Aids in assessing the potential impact of
   * de-identification choices on downstream analytical processes or data usability. * **Reporting
   * and operational insights** * You can analyze the metadata stored in a queryable BigQuery table
   * to generate reports on transformation success rates, common error types, processing volumes
   * (e.g., transformedBytes), and the types of transformations applied. * These insights can inform
   * optimization of de-identification configurations and resource planning. To take advantage of
   * these benefits, set this configuration. The stored details include a description of the
   * transformation, success or error codes, error messages, the number of bytes transformed, the
   * location of the transformed content, and identifiers for the job and source data.
   * @param transformationDetailsStorageConfig transformationDetailsStorageConfig or {@code null} for none
   */
  public GooglePrivacyDlpV2Deidentify setTransformationDetailsStorageConfig(GooglePrivacyDlpV2TransformationDetailsStorageConfig transformationDetailsStorageConfig) {
    this.transformationDetailsStorageConfig = transformationDetailsStorageConfig;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2Deidentify set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2Deidentify) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2Deidentify clone() {
    return (GooglePrivacyDlpV2Deidentify) super.clone();
  }

}
