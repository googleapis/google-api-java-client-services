/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.container.model;

/**
 * TopologyManager defines the configuration options for Topology Manager feature. See
 * https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Kubernetes Engine API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TopologyManager extends com.google.api.client.json.GenericJson {

  /**
   * Configures the strategy for resource alignment. Allowed values are: * none: the default policy,
   * and does not perform any topology alignment. * restricted: the topology manager stores the
   * preferred NUMA node affinity for the container, and will reject the pod if the affinity if not
   * preferred. * best-effort: the topology manager stores the preferred NUMA node affinity for the
   * container. If the affinity is not preferred, the topology manager will admit the pod to the
   * node anyway. * single-numa-node: the topology manager determines if the single NUMA node
   * affinity is possible. If it is, Topology Manager will store this and the Hint Providers can
   * then use this information when making the resource allocation decision. If, however, this is
   * not possible then the Topology Manager will reject the pod from the node. This will result in a
   * pod in a Terminated state with a pod admission failure. The default policy value is 'none' if
   * unspecified. Details about each strategy can be found
   * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-
   * policies).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String policy;

  /**
   * The Topology Manager aligns resources in following scopes: * container * pod The default scope
   * is 'container' if unspecified. See https://kubernetes.io/docs/tasks/administer-
   * cluster/topology-manager/#topology-manager-scopes
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scope;

  /**
   * Configures the strategy for resource alignment. Allowed values are: * none: the default policy,
   * and does not perform any topology alignment. * restricted: the topology manager stores the
   * preferred NUMA node affinity for the container, and will reject the pod if the affinity if not
   * preferred. * best-effort: the topology manager stores the preferred NUMA node affinity for the
   * container. If the affinity is not preferred, the topology manager will admit the pod to the
   * node anyway. * single-numa-node: the topology manager determines if the single NUMA node
   * affinity is possible. If it is, Topology Manager will store this and the Hint Providers can
   * then use this information when making the resource allocation decision. If, however, this is
   * not possible then the Topology Manager will reject the pod from the node. This will result in a
   * pod in a Terminated state with a pod admission failure. The default policy value is 'none' if
   * unspecified. Details about each strategy can be found
   * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-
   * policies).
   * @return value or {@code null} for none
   */
  public java.lang.String getPolicy() {
    return policy;
  }

  /**
   * Configures the strategy for resource alignment. Allowed values are: * none: the default policy,
   * and does not perform any topology alignment. * restricted: the topology manager stores the
   * preferred NUMA node affinity for the container, and will reject the pod if the affinity if not
   * preferred. * best-effort: the topology manager stores the preferred NUMA node affinity for the
   * container. If the affinity is not preferred, the topology manager will admit the pod to the
   * node anyway. * single-numa-node: the topology manager determines if the single NUMA node
   * affinity is possible. If it is, Topology Manager will store this and the Hint Providers can
   * then use this information when making the resource allocation decision. If, however, this is
   * not possible then the Topology Manager will reject the pod from the node. This will result in a
   * pod in a Terminated state with a pod admission failure. The default policy value is 'none' if
   * unspecified. Details about each strategy can be found
   * [here](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager/#topology-manager-
   * policies).
   * @param policy policy or {@code null} for none
   */
  public TopologyManager setPolicy(java.lang.String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * The Topology Manager aligns resources in following scopes: * container * pod The default scope
   * is 'container' if unspecified. See https://kubernetes.io/docs/tasks/administer-
   * cluster/topology-manager/#topology-manager-scopes
   * @return value or {@code null} for none
   */
  public java.lang.String getScope() {
    return scope;
  }

  /**
   * The Topology Manager aligns resources in following scopes: * container * pod The default scope
   * is 'container' if unspecified. See https://kubernetes.io/docs/tasks/administer-
   * cluster/topology-manager/#topology-manager-scopes
   * @param scope scope or {@code null} for none
   */
  public TopologyManager setScope(java.lang.String scope) {
    this.scope = scope;
    return this;
  }

  @Override
  public TopologyManager set(String fieldName, Object value) {
    return (TopologyManager) super.set(fieldName, value);
  }

  @Override
  public TopologyManager clone() {
    return (TopologyManager) super.clone();
  }

}
