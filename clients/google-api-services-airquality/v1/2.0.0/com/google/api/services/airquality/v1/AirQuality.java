/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.airquality.v1;

/**
 * Service definition for AirQuality (v1).
 *
 * <p>
 * The Air Quality API.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/maps/documentation/air-quality" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AirQualityRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class AirQuality extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Air Quality API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://airquality.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://airquality.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public AirQuality(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  AirQuality(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the CurrentConditions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AirQuality airquality = new AirQuality(...);}
   *   {@code AirQuality.CurrentConditions.List request = airquality.currentConditions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public CurrentConditions currentConditions() {
    return new CurrentConditions();
  }

  /**
   * The "currentConditions" collection of methods.
   */
  public class CurrentConditions {

    /**
     * The Current Conditions endpoint provides hourly air quality information in more than 100
     * countries, up to a 500 x 500 meters resolution. Includes over 70 local indexes and global air
     * quality index and categories.
     *
     * Create a request for the method "currentConditions.lookup".
     *
     * This request holds the parameters needed by the airquality server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.airquality.v1.model.LookupCurrentConditionsRequest}
     * @return the request
     */
    public Lookup lookup(com.google.api.services.airquality.v1.model.LookupCurrentConditionsRequest content) throws java.io.IOException {
      Lookup result = new Lookup(content);
      initialize(result);
      return result;
    }

    public class Lookup extends AirQualityRequest<com.google.api.services.airquality.v1.model.LookupCurrentConditionsResponse> {

      private static final String REST_PATH = "v1/currentConditions:lookup";

      /**
       * The Current Conditions endpoint provides hourly air quality information in more than 100
       * countries, up to a 500 x 500 meters resolution. Includes over 70 local indexes and global air
       * quality index and categories.
       *
       * Create a request for the method "currentConditions.lookup".
       *
       * This request holds the parameters needed by the the airquality server.  After setting any
       * optional parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
       * <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.airquality.v1.model.LookupCurrentConditionsRequest}
       * @since 1.13
       */
      protected Lookup(com.google.api.services.airquality.v1.model.LookupCurrentConditionsRequest content) {
        super(AirQuality.this, "POST", REST_PATH, content, com.google.api.services.airquality.v1.model.LookupCurrentConditionsResponse.class);
      }

      @Override
      public Lookup set$Xgafv(java.lang.String $Xgafv) {
        return (Lookup) super.set$Xgafv($Xgafv);
      }

      @Override
      public Lookup setAccessToken(java.lang.String accessToken) {
        return (Lookup) super.setAccessToken(accessToken);
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setCallback(java.lang.String callback) {
        return (Lookup) super.setCallback(callback);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUploadType(java.lang.String uploadType) {
        return (Lookup) super.setUploadType(uploadType);
      }

      @Override
      public Lookup setUploadProtocol(java.lang.String uploadProtocol) {
        return (Lookup) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Forecast collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AirQuality airquality = new AirQuality(...);}
   *   {@code AirQuality.Forecast.List request = airquality.forecast().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Forecast forecast() {
    return new Forecast();
  }

  /**
   * The "forecast" collection of methods.
   */
  public class Forecast {

    /**
     * Returns air quality forecast for a specific location for a given time range.
     *
     * Create a request for the method "forecast.lookup".
     *
     * This request holds the parameters needed by the airquality server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.airquality.v1.model.LookupForecastRequest}
     * @return the request
     */
    public Lookup lookup(com.google.api.services.airquality.v1.model.LookupForecastRequest content) throws java.io.IOException {
      Lookup result = new Lookup(content);
      initialize(result);
      return result;
    }

    public class Lookup extends AirQualityRequest<com.google.api.services.airquality.v1.model.LookupForecastResponse> {

      private static final String REST_PATH = "v1/forecast:lookup";

      /**
       * Returns air quality forecast for a specific location for a given time range.
       *
       * Create a request for the method "forecast.lookup".
       *
       * This request holds the parameters needed by the the airquality server.  After setting any
       * optional parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
       * <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.airquality.v1.model.LookupForecastRequest}
       * @since 1.13
       */
      protected Lookup(com.google.api.services.airquality.v1.model.LookupForecastRequest content) {
        super(AirQuality.this, "POST", REST_PATH, content, com.google.api.services.airquality.v1.model.LookupForecastResponse.class);
      }

      @Override
      public Lookup set$Xgafv(java.lang.String $Xgafv) {
        return (Lookup) super.set$Xgafv($Xgafv);
      }

      @Override
      public Lookup setAccessToken(java.lang.String accessToken) {
        return (Lookup) super.setAccessToken(accessToken);
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setCallback(java.lang.String callback) {
        return (Lookup) super.setCallback(callback);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUploadType(java.lang.String uploadType) {
        return (Lookup) super.setUploadType(uploadType);
      }

      @Override
      public Lookup setUploadProtocol(java.lang.String uploadProtocol) {
        return (Lookup) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the History collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AirQuality airquality = new AirQuality(...);}
   *   {@code AirQuality.History.List request = airquality.history().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public History history() {
    return new History();
  }

  /**
   * The "history" collection of methods.
   */
  public class History {

    /**
     * Returns air quality history for a specific location for a given time range.
     *
     * Create a request for the method "history.lookup".
     *
     * This request holds the parameters needed by the airquality server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.airquality.v1.model.LookupHistoryRequest}
     * @return the request
     */
    public Lookup lookup(com.google.api.services.airquality.v1.model.LookupHistoryRequest content) throws java.io.IOException {
      Lookup result = new Lookup(content);
      initialize(result);
      return result;
    }

    public class Lookup extends AirQualityRequest<com.google.api.services.airquality.v1.model.LookupHistoryResponse> {

      private static final String REST_PATH = "v1/history:lookup";

      /**
       * Returns air quality history for a specific location for a given time range.
       *
       * Create a request for the method "history.lookup".
       *
       * This request holds the parameters needed by the the airquality server.  After setting any
       * optional parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
       * <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.airquality.v1.model.LookupHistoryRequest}
       * @since 1.13
       */
      protected Lookup(com.google.api.services.airquality.v1.model.LookupHistoryRequest content) {
        super(AirQuality.this, "POST", REST_PATH, content, com.google.api.services.airquality.v1.model.LookupHistoryResponse.class);
      }

      @Override
      public Lookup set$Xgafv(java.lang.String $Xgafv) {
        return (Lookup) super.set$Xgafv($Xgafv);
      }

      @Override
      public Lookup setAccessToken(java.lang.String accessToken) {
        return (Lookup) super.setAccessToken(accessToken);
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setCallback(java.lang.String callback) {
        return (Lookup) super.setCallback(callback);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUploadType(java.lang.String uploadType) {
        return (Lookup) super.setUploadType(uploadType);
      }

      @Override
      public Lookup setUploadProtocol(java.lang.String uploadProtocol) {
        return (Lookup) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the MapTypes collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AirQuality airquality = new AirQuality(...);}
   *   {@code AirQuality.MapTypes.List request = airquality.mapTypes().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MapTypes mapTypes() {
    return new MapTypes();
  }

  /**
   * The "mapTypes" collection of methods.
   */
  public class MapTypes {

    /**
     * An accessor for creating requests from the HeatmapTiles collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AirQuality airquality = new AirQuality(...);}
     *   {@code AirQuality.HeatmapTiles.List request = airquality.heatmapTiles().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public HeatmapTiles heatmapTiles() {
      return new HeatmapTiles();
    }

    /**
     * The "heatmapTiles" collection of methods.
     */
    public class HeatmapTiles {

      /**
       * Returns a bytes array containing the data of the tile PNG image.
       *
       * Create a request for the method "heatmapTiles.lookupHeatmapTile".
       *
       * This request holds the parameters needed by the airquality server.  After setting any optional
       * parameters, call the {@link LookupHeatmapTile#execute()} method to invoke the remote operation.
       *
       * @param mapType Required. The type of the air quality heatmap. Defines the pollutant that the map will graphically
       *        represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) -
       *        UAQI_INDIGO_PERSIAN (UAQI, indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA -
       *        DEU_UBA - CAN_EC - FRA_ATMO - US_AQI
       * @param zoom Required. The map's zoom level. Defines how large or small the contents of a map appear in a map
       *        view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the entire world
       *        in 4 tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is the entire
       *        world in 65,536 tiles. Allowed values: 0-16
       * @param x Required. Defines the east-west point in the requested tile.
       * @param y Required. Defines the north-south point in the requested tile.
       * @return the request
       */
      public LookupHeatmapTile lookupHeatmapTile(java.lang.String mapType, java.lang.Integer zoom, java.lang.Integer x, java.lang.Integer y) throws java.io.IOException {
        LookupHeatmapTile result = new LookupHeatmapTile(mapType, zoom, x, y);
        initialize(result);
        return result;
      }

      public class LookupHeatmapTile extends AirQualityRequest<com.google.api.services.airquality.v1.model.HttpBody> {

        private static final String REST_PATH = "v1/mapTypes/{mapType}/heatmapTiles/{zoom}/{x}/{y}";

        /**
         * Returns a bytes array containing the data of the tile PNG image.
         *
         * Create a request for the method "heatmapTiles.lookupHeatmapTile".
         *
         * This request holds the parameters needed by the the airquality server.  After setting any
         * optional parameters, call the {@link LookupHeatmapTile#execute()} method to invoke the remote
         * operation. <p> {@link LookupHeatmapTile#initialize(com.google.api.client.googleapis.services.Ab
         * stractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param mapType Required. The type of the air quality heatmap. Defines the pollutant that the map will graphically
       *        represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) -
       *        UAQI_INDIGO_PERSIAN (UAQI, indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA -
       *        DEU_UBA - CAN_EC - FRA_ATMO - US_AQI
         * @param zoom Required. The map's zoom level. Defines how large or small the contents of a map appear in a map
       *        view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the entire world
       *        in 4 tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is the entire
       *        world in 65,536 tiles. Allowed values: 0-16
         * @param x Required. Defines the east-west point in the requested tile.
         * @param y Required. Defines the north-south point in the requested tile.
         * @since 1.13
         */
        protected LookupHeatmapTile(java.lang.String mapType, java.lang.Integer zoom, java.lang.Integer x, java.lang.Integer y) {
          super(AirQuality.this, "GET", REST_PATH, null, com.google.api.services.airquality.v1.model.HttpBody.class);
          this.mapType = com.google.api.client.util.Preconditions.checkNotNull(mapType, "Required parameter mapType must be specified.");
          this.zoom = com.google.api.client.util.Preconditions.checkNotNull(zoom, "Required parameter zoom must be specified.");
          this.x = com.google.api.client.util.Preconditions.checkNotNull(x, "Required parameter x must be specified.");
          this.y = com.google.api.client.util.Preconditions.checkNotNull(y, "Required parameter y must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public LookupHeatmapTile set$Xgafv(java.lang.String $Xgafv) {
          return (LookupHeatmapTile) super.set$Xgafv($Xgafv);
        }

        @Override
        public LookupHeatmapTile setAccessToken(java.lang.String accessToken) {
          return (LookupHeatmapTile) super.setAccessToken(accessToken);
        }

        @Override
        public LookupHeatmapTile setAlt(java.lang.String alt) {
          return (LookupHeatmapTile) super.setAlt(alt);
        }

        @Override
        public LookupHeatmapTile setCallback(java.lang.String callback) {
          return (LookupHeatmapTile) super.setCallback(callback);
        }

        @Override
        public LookupHeatmapTile setFields(java.lang.String fields) {
          return (LookupHeatmapTile) super.setFields(fields);
        }

        @Override
        public LookupHeatmapTile setKey(java.lang.String key) {
          return (LookupHeatmapTile) super.setKey(key);
        }

        @Override
        public LookupHeatmapTile setOauthToken(java.lang.String oauthToken) {
          return (LookupHeatmapTile) super.setOauthToken(oauthToken);
        }

        @Override
        public LookupHeatmapTile setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (LookupHeatmapTile) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public LookupHeatmapTile setQuotaUser(java.lang.String quotaUser) {
          return (LookupHeatmapTile) super.setQuotaUser(quotaUser);
        }

        @Override
        public LookupHeatmapTile setUploadType(java.lang.String uploadType) {
          return (LookupHeatmapTile) super.setUploadType(uploadType);
        }

        @Override
        public LookupHeatmapTile setUploadProtocol(java.lang.String uploadProtocol) {
          return (LookupHeatmapTile) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The type of the air quality heatmap. Defines the pollutant that the map will
         * graphically represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) -
         * UAQI_INDIGO_PERSIAN (UAQI, indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA -
         * DEU_UBA - CAN_EC - FRA_ATMO - US_AQI
         */
        @com.google.api.client.util.Key
        private java.lang.String mapType;

        /** Required. The type of the air quality heatmap. Defines the pollutant that the map will graphically
       represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) - UAQI_INDIGO_PERSIAN (UAQI,
       indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA - DEU_UBA - CAN_EC - FRA_ATMO - US_AQI
         */
        public java.lang.String getMapType() {
          return mapType;
        }

        /**
         * Required. The type of the air quality heatmap. Defines the pollutant that the map will
         * graphically represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) -
         * UAQI_INDIGO_PERSIAN (UAQI, indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA -
         * DEU_UBA - CAN_EC - FRA_ATMO - US_AQI
         */
        public LookupHeatmapTile setMapType(java.lang.String mapType) {
          this.mapType = mapType;
          return this;
        }

        /**
         * Required. The map's zoom level. Defines how large or small the contents of a map appear
         * in a map view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the
         * entire world in 4 tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is
         * the entire world in 65,536 tiles. Allowed values: 0-16
         */
        @com.google.api.client.util.Key
        private java.lang.Integer zoom;

        /** Required. The map's zoom level. Defines how large or small the contents of a map appear in a map
       view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the entire world in 4
       tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is the entire world in 65,536
       tiles. Allowed values: 0-16
         */
        public java.lang.Integer getZoom() {
          return zoom;
        }

        /**
         * Required. The map's zoom level. Defines how large or small the contents of a map appear
         * in a map view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the
         * entire world in 4 tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is
         * the entire world in 65,536 tiles. Allowed values: 0-16
         */
        public LookupHeatmapTile setZoom(java.lang.Integer zoom) {
          this.zoom = zoom;
          return this;
        }

        /** Required. Defines the east-west point in the requested tile. */
        @com.google.api.client.util.Key
        private java.lang.Integer x;

        /** Required. Defines the east-west point in the requested tile.
         */
        public java.lang.Integer getX() {
          return x;
        }

        /** Required. Defines the east-west point in the requested tile. */
        public LookupHeatmapTile setX(java.lang.Integer x) {
          this.x = x;
          return this;
        }

        /** Required. Defines the north-south point in the requested tile. */
        @com.google.api.client.util.Key
        private java.lang.Integer y;

        /** Required. Defines the north-south point in the requested tile.
         */
        public java.lang.Integer getY() {
          return y;
        }

        /** Required. Defines the north-south point in the requested tile. */
        public LookupHeatmapTile setY(java.lang.Integer y) {
          this.y = y;
          return this;
        }

        @Override
        public LookupHeatmapTile set(String parameterName, Object value) {
          return (LookupHeatmapTile) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link AirQuality}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link AirQuality}. */
    @Override
    public AirQuality build() {
      return new AirQuality(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AirQualityRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAirQualityRequestInitializer(
        AirQualityRequestInitializer airqualityRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(airqualityRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
