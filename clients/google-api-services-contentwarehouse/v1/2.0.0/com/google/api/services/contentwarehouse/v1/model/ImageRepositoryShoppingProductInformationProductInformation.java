/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Information about a single product. For ProductNet models, each product has one label with a
 * detection score. The label is mapped to one or multiple category ids. For PRIMI generic feature
 * models, each product can have multiple entities, and each entity has a score. The category_id and
 * detection_score fields are not populated for PRIMI generic feature models.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageRepositoryShoppingProductInformationProductInformation extends com.google.api.client.json.GenericJson {

  /**
   * The possible Merlot ids for the item. There may be more than one if the product detector result
   * corresponds to a collection of merlot ids, which can't be easily grouped up to a common
   * ancestor, for which the detector would still make sense for all the children. E.g. a detected
   * "chair" can be either an indoor chair or an outdoor one, however in Merlot the common ancestor
   * of the two is furniture.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> categoryId;

  /**
   * The k-d tree clusters for retrieval. Will be deprecated, use the token_groups instead. To add
   * tokens/cluster_ids from new tokenization model in the future, add it to the token_groups.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> clusterIds;

  /**
   * The localization detection score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float detectionScore;

  /**
   * The serialized embedding values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String embedding;

  /**
   * The recognized entities and scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageRepositoryShoppingProductInformationEntity> entities;

  static {
    // hack to force ProGuard to consider ImageRepositoryShoppingProductInformationEntity used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ImageRepositoryShoppingProductInformationEntity.class);
  }

  /**
   * Feature type (different detectors and embedders) requested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featureType;

  /**
   * The bounding box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryShoppingProductInformationBoundingBox productLocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageRepositoryShoppingProductInformationProductInformationTokenGroup> tokenGroups;

  /**
   * The possible Merlot ids for the item. There may be more than one if the product detector result
   * corresponds to a collection of merlot ids, which can't be easily grouped up to a common
   * ancestor, for which the detector would still make sense for all the children. E.g. a detected
   * "chair" can be either an indoor chair or an outdoor one, however in Merlot the common ancestor
   * of the two is furniture.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getCategoryId() {
    return categoryId;
  }

  /**
   * The possible Merlot ids for the item. There may be more than one if the product detector result
   * corresponds to a collection of merlot ids, which can't be easily grouped up to a common
   * ancestor, for which the detector would still make sense for all the children. E.g. a detected
   * "chair" can be either an indoor chair or an outdoor one, however in Merlot the common ancestor
   * of the two is furniture.
   * @param categoryId categoryId or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setCategoryId(java.util.List<java.lang.Integer> categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The k-d tree clusters for retrieval. Will be deprecated, use the token_groups instead. To add
   * tokens/cluster_ids from new tokenization model in the future, add it to the token_groups.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getClusterIds() {
    return clusterIds;
  }

  /**
   * The k-d tree clusters for retrieval. Will be deprecated, use the token_groups instead. To add
   * tokens/cluster_ids from new tokenization model in the future, add it to the token_groups.
   * @param clusterIds clusterIds or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setClusterIds(java.util.List<java.lang.Integer> clusterIds) {
    this.clusterIds = clusterIds;
    return this;
  }

  /**
   * The localization detection score.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDetectionScore() {
    return detectionScore;
  }

  /**
   * The localization detection score.
   * @param detectionScore detectionScore or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setDetectionScore(java.lang.Float detectionScore) {
    this.detectionScore = detectionScore;
    return this;
  }

  /**
   * The serialized embedding values.
   * @see #decodeEmbedding()
   * @return value or {@code null} for none
   */
  public java.lang.String getEmbedding() {
    return embedding;
  }

  /**
   * The serialized embedding values.
   * @see #getEmbedding()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEmbedding() {
    return com.google.api.client.util.Base64.decodeBase64(embedding);
  }

  /**
   * The serialized embedding values.
   * @see #encodeEmbedding()
   * @param embedding embedding or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setEmbedding(java.lang.String embedding) {
    this.embedding = embedding;
    return this;
  }

  /**
   * The serialized embedding values.
   * @see #setEmbedding()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ImageRepositoryShoppingProductInformationProductInformation encodeEmbedding(byte[] embedding) {
    this.embedding = com.google.api.client.util.Base64.encodeBase64URLSafeString(embedding);
    return this;
  }

  /**
   * The recognized entities and scores.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageRepositoryShoppingProductInformationEntity> getEntities() {
    return entities;
  }

  /**
   * The recognized entities and scores.
   * @param entities entities or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setEntities(java.util.List<ImageRepositoryShoppingProductInformationEntity> entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Feature type (different detectors and embedders) requested.
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatureType() {
    return featureType;
  }

  /**
   * Feature type (different detectors and embedders) requested.
   * @param featureType featureType or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setFeatureType(java.lang.String featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * The bounding box.
   * @return value or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationBoundingBox getProductLocation() {
    return productLocation;
  }

  /**
   * The bounding box.
   * @param productLocation productLocation or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setProductLocation(ImageRepositoryShoppingProductInformationBoundingBox productLocation) {
    this.productLocation = productLocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ImageRepositoryShoppingProductInformationProductInformationTokenGroup> getTokenGroups() {
    return tokenGroups;
  }

  /**
   * @param tokenGroups tokenGroups or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformationProductInformation setTokenGroups(java.util.List<ImageRepositoryShoppingProductInformationProductInformationTokenGroup> tokenGroups) {
    this.tokenGroups = tokenGroups;
    return this;
  }

  @Override
  public ImageRepositoryShoppingProductInformationProductInformation set(String fieldName, Object value) {
    return (ImageRepositoryShoppingProductInformationProductInformation) super.set(fieldName, value);
  }

  @Override
  public ImageRepositoryShoppingProductInformationProductInformation clone() {
    return (ImageRepositoryShoppingProductInformationProductInformation) super.clone();
  }

}
