/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A pose is an object's position in space, as well as its orientation. All fields except lat and
 * lng are optional. All fields are in the WGS-84 ellipsoid, and rotations are right-hand rule (i.e.
 * if the right hand thumb points along a vector, curled fingers indicate positive rotation
 * direction). An un-rotated pose would be pointing due North, along the surface of the ellipsoid.
 * Rotations are applied in the order: yaw, pitch, roll. Note that the rotation axes are rotated
 * along with the model for each rotation step. WARNING: This proto is not meant to be used
 * directly. Please use the provided libraries: //geostore/base/public/pose.h
 * //java/com/google/geostore/base/Pose.java
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostorePoseProto extends com.google.api.client.json.GenericJson {

  /**
   * The height of the pose. A positive height is above the WGS-84 ellipsoid in meters; negative is
   * below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double altitude;

  /**
   * The index of the PoseProto in a list of PoseProtos.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer index;

  /**
   * The latitude of the pose in degrees [-90, 90].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lat;

  /**
   * The longitude of the pose in degrees (-180,180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lng;

  /**
   * The rotation around the longitude line East tangent in degrees [-90, 90].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pitch;

  /**
   * The rotation around the latitude line North tangent in degrees (-180, 180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double roll;

  /**
   * The rotation around the Up vector, from North, in degrees (-180, 180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double yaw;

  /**
   * The height of the pose. A positive height is above the WGS-84 ellipsoid in meters; negative is
   * below.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAltitude() {
    return altitude;
  }

  /**
   * The height of the pose. A positive height is above the WGS-84 ellipsoid in meters; negative is
   * below.
   * @param altitude altitude or {@code null} for none
   */
  public GeostorePoseProto setAltitude(java.lang.Double altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * The index of the PoseProto in a list of PoseProtos.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * The index of the PoseProto in a list of PoseProtos.
   * @param index index or {@code null} for none
   */
  public GeostorePoseProto setIndex(java.lang.Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The latitude of the pose in degrees [-90, 90].
   * @return value or {@code null} for none
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * The latitude of the pose in degrees [-90, 90].
   * @param lat lat or {@code null} for none
   */
  public GeostorePoseProto setLat(java.lang.Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * The longitude of the pose in degrees (-180,180].
   * @return value or {@code null} for none
   */
  public java.lang.Double getLng() {
    return lng;
  }

  /**
   * The longitude of the pose in degrees (-180,180].
   * @param lng lng or {@code null} for none
   */
  public GeostorePoseProto setLng(java.lang.Double lng) {
    this.lng = lng;
    return this;
  }

  /**
   * The rotation around the longitude line East tangent in degrees [-90, 90].
   * @return value or {@code null} for none
   */
  public java.lang.Double getPitch() {
    return pitch;
  }

  /**
   * The rotation around the longitude line East tangent in degrees [-90, 90].
   * @param pitch pitch or {@code null} for none
   */
  public GeostorePoseProto setPitch(java.lang.Double pitch) {
    this.pitch = pitch;
    return this;
  }

  /**
   * The rotation around the latitude line North tangent in degrees (-180, 180].
   * @return value or {@code null} for none
   */
  public java.lang.Double getRoll() {
    return roll;
  }

  /**
   * The rotation around the latitude line North tangent in degrees (-180, 180].
   * @param roll roll or {@code null} for none
   */
  public GeostorePoseProto setRoll(java.lang.Double roll) {
    this.roll = roll;
    return this;
  }

  /**
   * The rotation around the Up vector, from North, in degrees (-180, 180].
   * @return value or {@code null} for none
   */
  public java.lang.Double getYaw() {
    return yaw;
  }

  /**
   * The rotation around the Up vector, from North, in degrees (-180, 180].
   * @param yaw yaw or {@code null} for none
   */
  public GeostorePoseProto setYaw(java.lang.Double yaw) {
    this.yaw = yaw;
    return this;
  }

  @Override
  public GeostorePoseProto set(String fieldName, Object value) {
    return (GeostorePoseProto) super.set(fieldName, value);
  }

  @Override
  public GeostorePoseProto clone() {
    return (GeostorePoseProto) super.clone();
  }

}
