/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbilling.v1beta.model;

/**
 * Encapsulates all the information needed to perform a cost estimate. It includes a specification
 * of the Google Cloud usage whose costs are estimated, and configuration options.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Billing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CostScenario extends com.google.api.client.json.GenericJson {

  /**
   * New commitments to estimate the costs for. The cost of the commitments will be included in the
   * estimate result and discounts the commitment entitles will be included in the workload cost
   * estimates. A maximum of 100 workloads can be provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Commitment> commitments;

  static {
    // hack to force ProGuard to consider Commitment used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Commitment.class);
  }

  /**
   * Configuration for the scenario.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ScenarioConfig scenarioConfig;

  /**
   * The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Workload> workloads;

  /**
   * New commitments to estimate the costs for. The cost of the commitments will be included in the
   * estimate result and discounts the commitment entitles will be included in the workload cost
   * estimates. A maximum of 100 workloads can be provided.
   * @return value or {@code null} for none
   */
  public java.util.List<Commitment> getCommitments() {
    return commitments;
  }

  /**
   * New commitments to estimate the costs for. The cost of the commitments will be included in the
   * estimate result and discounts the commitment entitles will be included in the workload cost
   * estimates. A maximum of 100 workloads can be provided.
   * @param commitments commitments or {@code null} for none
   */
  public CostScenario setCommitments(java.util.List<Commitment> commitments) {
    this.commitments = commitments;
    return this;
  }

  /**
   * Configuration for the scenario.
   * @return value or {@code null} for none
   */
  public ScenarioConfig getScenarioConfig() {
    return scenarioConfig;
  }

  /**
   * Configuration for the scenario.
   * @param scenarioConfig scenarioConfig or {@code null} for none
   */
  public CostScenario setScenarioConfig(ScenarioConfig scenarioConfig) {
    this.scenarioConfig = scenarioConfig;
    return this;
  }

  /**
   * The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.
   * @return value or {@code null} for none
   */
  public java.util.List<Workload> getWorkloads() {
    return workloads;
  }

  /**
   * The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.
   * @param workloads workloads or {@code null} for none
   */
  public CostScenario setWorkloads(java.util.List<Workload> workloads) {
    this.workloads = workloads;
    return this;
  }

  @Override
  public CostScenario set(String fieldName, Object value) {
    return (CostScenario) super.set(fieldName, value);
  }

  @Override
  public CostScenario clone() {
    return (CostScenario) super.clone();
  }

}
