/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v1.model;

/**
 * GitRepoSource describes a repo and ref of a code repository.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GitRepoSource extends com.google.api.client.json.GenericJson {

  /**
   * The full resource name of the bitbucket server config. Format:
   * `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bitbucketServerConfig;

  /**
   * The full resource name of the github enterprise config. Format:
   * `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
   * `projects/{project}/githubEnterpriseConfigs/{id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String githubEnterpriseConfig;

  /**
   * The branch or tag to use. Must start with "refs/" (required).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ref;

  /**
   * See RepoType below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String repoType;

  /**
   * The qualified resource name of the Repo API repository Either uri or repository can be
   * specified and is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String repository;

  /**
   * The URI of the repo. Either uri or repository can be specified and is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * The full resource name of the bitbucket server config. Format:
   * `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getBitbucketServerConfig() {
    return bitbucketServerConfig;
  }

  /**
   * The full resource name of the bitbucket server config. Format:
   * `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
   * @param bitbucketServerConfig bitbucketServerConfig or {@code null} for none
   */
  public GitRepoSource setBitbucketServerConfig(java.lang.String bitbucketServerConfig) {
    this.bitbucketServerConfig = bitbucketServerConfig;
    return this;
  }

  /**
   * The full resource name of the github enterprise config. Format:
   * `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
   * `projects/{project}/githubEnterpriseConfigs/{id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getGithubEnterpriseConfig() {
    return githubEnterpriseConfig;
  }

  /**
   * The full resource name of the github enterprise config. Format:
   * `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
   * `projects/{project}/githubEnterpriseConfigs/{id}`.
   * @param githubEnterpriseConfig githubEnterpriseConfig or {@code null} for none
   */
  public GitRepoSource setGithubEnterpriseConfig(java.lang.String githubEnterpriseConfig) {
    this.githubEnterpriseConfig = githubEnterpriseConfig;
    return this;
  }

  /**
   * The branch or tag to use. Must start with "refs/" (required).
   * @return value or {@code null} for none
   */
  public java.lang.String getRef() {
    return ref;
  }

  /**
   * The branch or tag to use. Must start with "refs/" (required).
   * @param ref ref or {@code null} for none
   */
  public GitRepoSource setRef(java.lang.String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * See RepoType below.
   * @return value or {@code null} for none
   */
  public java.lang.String getRepoType() {
    return repoType;
  }

  /**
   * See RepoType below.
   * @param repoType repoType or {@code null} for none
   */
  public GitRepoSource setRepoType(java.lang.String repoType) {
    this.repoType = repoType;
    return this;
  }

  /**
   * The qualified resource name of the Repo API repository Either uri or repository can be
   * specified and is required.
   * @return value or {@code null} for none
   */
  public java.lang.String getRepository() {
    return repository;
  }

  /**
   * The qualified resource name of the Repo API repository Either uri or repository can be
   * specified and is required.
   * @param repository repository or {@code null} for none
   */
  public GitRepoSource setRepository(java.lang.String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The URI of the repo. Either uri or repository can be specified and is required.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * The URI of the repo. Either uri or repository can be specified and is required.
   * @param uri uri or {@code null} for none
   */
  public GitRepoSource setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public GitRepoSource set(String fieldName, Object value) {
    return (GitRepoSource) super.set(fieldName, value);
  }

  @Override
  public GitRepoSource clone() {
    return (GitRepoSource) super.clone();
  }

}
