/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.servicedirectory.v1beta1.model;

/**
 * The request message for LookupService.ResolveService. Looks up a service by its name, returns the
 * service and its endpoints.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Directory API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResolveServiceRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The filter applied to the endpoints of the resolved service. General filter string
   * syntax: () can be "name" or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of
   * which ":" means HAS and is roughly the same as "=". must be the same data type as the field.
   * can be "AND, OR, NOT". Examples of valid filters: * "metadata.owner" returns Endpoints that
   * have a label with the key "owner", this is the same as "metadata:owner" *
   * "metadata.protocol=gRPC" returns Endpoints that have key/value "protocol=gRPC" *
   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have "owner" field in metadata
   * with a value that is not "sd" AND have the key/value foo=bar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String endpointFilter;

  /**
   * Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value
   * less than one is specified, the Default is used. If a value greater than the Maximum is
   * specified, the Maximum is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxEndpoints;

  /**
   * Optional. The filter applied to the endpoints of the resolved service. General filter string
   * syntax: () can be "name" or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of
   * which ":" means HAS and is roughly the same as "=". must be the same data type as the field.
   * can be "AND, OR, NOT". Examples of valid filters: * "metadata.owner" returns Endpoints that
   * have a label with the key "owner", this is the same as "metadata:owner" *
   * "metadata.protocol=gRPC" returns Endpoints that have key/value "protocol=gRPC" *
   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have "owner" field in metadata
   * with a value that is not "sd" AND have the key/value foo=bar.
   * @return value or {@code null} for none
   */
  public java.lang.String getEndpointFilter() {
    return endpointFilter;
  }

  /**
   * Optional. The filter applied to the endpoints of the resolved service. General filter string
   * syntax: () can be "name" or "metadata." for map field. can be "<, >, <=, >=, !=, =, :". Of
   * which ":" means HAS and is roughly the same as "=". must be the same data type as the field.
   * can be "AND, OR, NOT". Examples of valid filters: * "metadata.owner" returns Endpoints that
   * have a label with the key "owner", this is the same as "metadata:owner" *
   * "metadata.protocol=gRPC" returns Endpoints that have key/value "protocol=gRPC" *
   * "metadata.owner!=sd AND metadata.foo=bar" returns Endpoints that have "owner" field in metadata
   * with a value that is not "sd" AND have the key/value foo=bar.
   * @param endpointFilter endpointFilter or {@code null} for none
   */
  public ResolveServiceRequest setEndpointFilter(java.lang.String endpointFilter) {
    this.endpointFilter = endpointFilter;
    return this;
  }

  /**
   * Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value
   * less than one is specified, the Default is used. If a value greater than the Maximum is
   * specified, the Maximum is used.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxEndpoints() {
    return maxEndpoints;
  }

  /**
   * Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value
   * less than one is specified, the Default is used. If a value greater than the Maximum is
   * specified, the Maximum is used.
   * @param maxEndpoints maxEndpoints or {@code null} for none
   */
  public ResolveServiceRequest setMaxEndpoints(java.lang.Integer maxEndpoints) {
    this.maxEndpoints = maxEndpoints;
    return this;
  }

  @Override
  public ResolveServiceRequest set(String fieldName, Object value) {
    return (ResolveServiceRequest) super.set(fieldName, value);
  }

  @Override
  public ResolveServiceRequest clone() {
    return (ResolveServiceRequest) super.clone();
  }

}
