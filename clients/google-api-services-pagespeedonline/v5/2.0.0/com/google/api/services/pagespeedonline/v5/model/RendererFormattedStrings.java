/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.pagespeedonline.v5.model;

/**
 * Message holding the formatted strings used in the renderer.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the PageSpeed Insights API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RendererFormattedStrings extends com.google.api.client.json.GenericJson {

  /**
   * The tooltip text on an expandable chevron icon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String auditGroupExpandTooltip;

  /**
   * Text link pointing to the Lighthouse scoring calculator. This link immediately follows a
   * sentence stating the performance score is calculated from the perf metrics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String calculatorLink;

  /**
   * The label for the initial request in a critical request chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crcInitialNavigation;

  /**
   * The label for values shown in the summary of critical request chains.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crcLongestDurationLabel;

  /**
   * Option in a dropdown menu that copies the Lighthouse JSON object to the system clipboard.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownCopyJSON;

  /**
   * Option in a dropdown menu that toggles the themeing of the report between Light(default) and
   * Dark themes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownDarkTheme;

  /**
   * Option in a dropdown menu that opens a full Lighthouse report in a print dialog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownPrintExpanded;

  /**
   * Option in a dropdown menu that opens a small, summary report in a print dialog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownPrintSummary;

  /**
   * Option in a dropdown menu that saves the current report as a new GitHub Gist.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownSaveGist;

  /**
   * Option in a dropdown menu that saves the Lighthouse report HTML locally to the system as a
   * '.html' file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownSaveHTML;

  /**
   * Option in a dropdown menu that saves the Lighthouse JSON object to the local system as a
   * '.json' file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownSaveJSON;

  /**
   * Option in a dropdown menu that opens the current report in the Lighthouse Viewer Application.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropdownViewer;

  /**
   * The label shown next to an audit or metric that has had an error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String errorLabel;

  /**
   * The error string shown next to an erroring audit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String errorMissingAuditInfo;

  /**
   * Label for button to create an issue against the Lighthouse GitHub project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String footerIssue;

  /**
   * The title of the lab data performance category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String labDataTitle;

  /**
   * The disclaimer shown under performance explaining that the network can vary.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lsPerformanceCategoryDescription;

  /**
   * The heading shown above a list of audits that were not computerd in the run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String manualAuditsGroupTitle;

  /**
   * The heading shown above a list of audits that do not apply to a page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String notApplicableAuditsGroupTitle;

  /**
   * The heading for the estimated page load savings opportunity of an audit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String opportunityResourceColumnLabel;

  /**
   * The heading for the estimated page load savings of opportunity audits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String opportunitySavingsColumnLabel;

  /**
   * The heading that is shown above a list of audits that are passing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String passedAuditsGroupTitle;

  /**
   * Descriptive explanation for emulation setting when emulating a generic desktop form factor, as
   * opposed to a mobile-device like form factor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeDesktopEmulation;

  /**
   * Descriptive explanation for emulation setting when emulating a Nexus 5X mobile device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeMobileEmulation;

  /**
   * Descriptive explanation for emulation setting when no device emulation is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeNoEmulation;

  /**
   * Label for a row in a table that shows the version of the Axe library used
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsAxeVersion;

  /**
   * Label for a row in a table that shows the estimated CPU power of the machine running
   * Lighthouse. Example row values: 532, 1492, 783.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsBenchmark;

  /**
   * Label for a row in a table that describes the CPU throttling conditions that were used during a
   * Lighthouse run, if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsCPUThrottling;

  /**
   * Label for a row in a table that shows in what tool Lighthouse is being run (e.g. The lighthouse
   * CLI, Chrome DevTools, Lightrider, WebPageTest, etc).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsChannel;

  /**
   * Label for a row in a table that describes the kind of device that was emulated for the
   * Lighthouse run. Example values for row elements: 'No Emulation', 'Emulated Desktop', etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsDevice;

  /**
   * Label for a row in a table that shows the time at which a Lighthouse run was conducted;
   * formatted as a timestamp, e.g. Jan 1, 1970 12:00 AM UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsFetchTime;

  /**
   * Label for a row in a table that describes the network throttling conditions that were used
   * during a Lighthouse run, if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsNetworkThrottling;

  /**
   * Title of the Runtime settings table in a Lighthouse report. Runtime settings are the
   * environment configurations that a specific report used at auditing time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsTitle;

  /**
   * Label for a row in a table that shows the User Agent that was detected on the Host machine that
   * ran Lighthouse.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsUA;

  /**
   * Label for a row in a table that shows the User Agent that was used to send out all network
   * requests during the Lighthouse run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsUANetwork;

  /**
   * Label for a row in a table that shows the URL that was audited during a Lighthouse run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeSettingsUrl;

  /**
   * Descriptive explanation for a runtime setting that is set to an unknown value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String runtimeUnknown;

  /**
   * The label that explains the score gauges scale (0-49, 50-89, 90-100).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scorescaleLabel;

  /**
   * Label preceding a radio control for filtering the list of audits. The radio choices are various
   * performance metrics (FCP, LCP, TBT), and if chosen, the audits in the report are hidden if they
   * are not relevant to the selected metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String showRelevantAudits;

  /**
   * The label for the button to show only a few lines of a snippet
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snippetCollapseButtonLabel;

  /**
   * The label for the button to show all lines of a snippet
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snippetExpandButtonLabel;

  /**
   * This label is for a filter checkbox above a table of items
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String thirdPartyResourcesLabel;

  /**
   * Descriptive explanation for environment throttling that was provided by the runtime environment
   * instead of provided by Lighthouse throttling.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String throttlingProvided;

  /**
   * The label shown preceding important warnings that may have invalidated an entire report.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String toplevelWarningsMessage;

  /**
   * The disclaimer shown below a performance metric value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String varianceDisclaimer;

  /**
   * Label for a button that opens the Treemap App
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String viewTreemapLabel;

  /**
   * The heading that is shown above a list of audits that have warnings
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String warningAuditsGroupTitle;

  /**
   * The label shown above a bulleted list of warnings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String warningHeader;

  /**
   * The tooltip text on an expandable chevron icon.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuditGroupExpandTooltip() {
    return auditGroupExpandTooltip;
  }

  /**
   * The tooltip text on an expandable chevron icon.
   * @param auditGroupExpandTooltip auditGroupExpandTooltip or {@code null} for none
   */
  public RendererFormattedStrings setAuditGroupExpandTooltip(java.lang.String auditGroupExpandTooltip) {
    this.auditGroupExpandTooltip = auditGroupExpandTooltip;
    return this;
  }

  /**
   * Text link pointing to the Lighthouse scoring calculator. This link immediately follows a
   * sentence stating the performance score is calculated from the perf metrics.
   * @return value or {@code null} for none
   */
  public java.lang.String getCalculatorLink() {
    return calculatorLink;
  }

  /**
   * Text link pointing to the Lighthouse scoring calculator. This link immediately follows a
   * sentence stating the performance score is calculated from the perf metrics.
   * @param calculatorLink calculatorLink or {@code null} for none
   */
  public RendererFormattedStrings setCalculatorLink(java.lang.String calculatorLink) {
    this.calculatorLink = calculatorLink;
    return this;
  }

  /**
   * The label for the initial request in a critical request chain.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrcInitialNavigation() {
    return crcInitialNavigation;
  }

  /**
   * The label for the initial request in a critical request chain.
   * @param crcInitialNavigation crcInitialNavigation or {@code null} for none
   */
  public RendererFormattedStrings setCrcInitialNavigation(java.lang.String crcInitialNavigation) {
    this.crcInitialNavigation = crcInitialNavigation;
    return this;
  }

  /**
   * The label for values shown in the summary of critical request chains.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrcLongestDurationLabel() {
    return crcLongestDurationLabel;
  }

  /**
   * The label for values shown in the summary of critical request chains.
   * @param crcLongestDurationLabel crcLongestDurationLabel or {@code null} for none
   */
  public RendererFormattedStrings setCrcLongestDurationLabel(java.lang.String crcLongestDurationLabel) {
    this.crcLongestDurationLabel = crcLongestDurationLabel;
    return this;
  }

  /**
   * Option in a dropdown menu that copies the Lighthouse JSON object to the system clipboard.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownCopyJSON() {
    return dropdownCopyJSON;
  }

  /**
   * Option in a dropdown menu that copies the Lighthouse JSON object to the system clipboard.
   * @param dropdownCopyJSON dropdownCopyJSON or {@code null} for none
   */
  public RendererFormattedStrings setDropdownCopyJSON(java.lang.String dropdownCopyJSON) {
    this.dropdownCopyJSON = dropdownCopyJSON;
    return this;
  }

  /**
   * Option in a dropdown menu that toggles the themeing of the report between Light(default) and
   * Dark themes.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownDarkTheme() {
    return dropdownDarkTheme;
  }

  /**
   * Option in a dropdown menu that toggles the themeing of the report between Light(default) and
   * Dark themes.
   * @param dropdownDarkTheme dropdownDarkTheme or {@code null} for none
   */
  public RendererFormattedStrings setDropdownDarkTheme(java.lang.String dropdownDarkTheme) {
    this.dropdownDarkTheme = dropdownDarkTheme;
    return this;
  }

  /**
   * Option in a dropdown menu that opens a full Lighthouse report in a print dialog.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownPrintExpanded() {
    return dropdownPrintExpanded;
  }

  /**
   * Option in a dropdown menu that opens a full Lighthouse report in a print dialog.
   * @param dropdownPrintExpanded dropdownPrintExpanded or {@code null} for none
   */
  public RendererFormattedStrings setDropdownPrintExpanded(java.lang.String dropdownPrintExpanded) {
    this.dropdownPrintExpanded = dropdownPrintExpanded;
    return this;
  }

  /**
   * Option in a dropdown menu that opens a small, summary report in a print dialog.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownPrintSummary() {
    return dropdownPrintSummary;
  }

  /**
   * Option in a dropdown menu that opens a small, summary report in a print dialog.
   * @param dropdownPrintSummary dropdownPrintSummary or {@code null} for none
   */
  public RendererFormattedStrings setDropdownPrintSummary(java.lang.String dropdownPrintSummary) {
    this.dropdownPrintSummary = dropdownPrintSummary;
    return this;
  }

  /**
   * Option in a dropdown menu that saves the current report as a new GitHub Gist.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownSaveGist() {
    return dropdownSaveGist;
  }

  /**
   * Option in a dropdown menu that saves the current report as a new GitHub Gist.
   * @param dropdownSaveGist dropdownSaveGist or {@code null} for none
   */
  public RendererFormattedStrings setDropdownSaveGist(java.lang.String dropdownSaveGist) {
    this.dropdownSaveGist = dropdownSaveGist;
    return this;
  }

  /**
   * Option in a dropdown menu that saves the Lighthouse report HTML locally to the system as a
   * '.html' file.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownSaveHTML() {
    return dropdownSaveHTML;
  }

  /**
   * Option in a dropdown menu that saves the Lighthouse report HTML locally to the system as a
   * '.html' file.
   * @param dropdownSaveHTML dropdownSaveHTML or {@code null} for none
   */
  public RendererFormattedStrings setDropdownSaveHTML(java.lang.String dropdownSaveHTML) {
    this.dropdownSaveHTML = dropdownSaveHTML;
    return this;
  }

  /**
   * Option in a dropdown menu that saves the Lighthouse JSON object to the local system as a
   * '.json' file.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownSaveJSON() {
    return dropdownSaveJSON;
  }

  /**
   * Option in a dropdown menu that saves the Lighthouse JSON object to the local system as a
   * '.json' file.
   * @param dropdownSaveJSON dropdownSaveJSON or {@code null} for none
   */
  public RendererFormattedStrings setDropdownSaveJSON(java.lang.String dropdownSaveJSON) {
    this.dropdownSaveJSON = dropdownSaveJSON;
    return this;
  }

  /**
   * Option in a dropdown menu that opens the current report in the Lighthouse Viewer Application.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropdownViewer() {
    return dropdownViewer;
  }

  /**
   * Option in a dropdown menu that opens the current report in the Lighthouse Viewer Application.
   * @param dropdownViewer dropdownViewer or {@code null} for none
   */
  public RendererFormattedStrings setDropdownViewer(java.lang.String dropdownViewer) {
    this.dropdownViewer = dropdownViewer;
    return this;
  }

  /**
   * The label shown next to an audit or metric that has had an error.
   * @return value or {@code null} for none
   */
  public java.lang.String getErrorLabel() {
    return errorLabel;
  }

  /**
   * The label shown next to an audit or metric that has had an error.
   * @param errorLabel errorLabel or {@code null} for none
   */
  public RendererFormattedStrings setErrorLabel(java.lang.String errorLabel) {
    this.errorLabel = errorLabel;
    return this;
  }

  /**
   * The error string shown next to an erroring audit.
   * @return value or {@code null} for none
   */
  public java.lang.String getErrorMissingAuditInfo() {
    return errorMissingAuditInfo;
  }

  /**
   * The error string shown next to an erroring audit.
   * @param errorMissingAuditInfo errorMissingAuditInfo or {@code null} for none
   */
  public RendererFormattedStrings setErrorMissingAuditInfo(java.lang.String errorMissingAuditInfo) {
    this.errorMissingAuditInfo = errorMissingAuditInfo;
    return this;
  }

  /**
   * Label for button to create an issue against the Lighthouse GitHub project.
   * @return value or {@code null} for none
   */
  public java.lang.String getFooterIssue() {
    return footerIssue;
  }

  /**
   * Label for button to create an issue against the Lighthouse GitHub project.
   * @param footerIssue footerIssue or {@code null} for none
   */
  public RendererFormattedStrings setFooterIssue(java.lang.String footerIssue) {
    this.footerIssue = footerIssue;
    return this;
  }

  /**
   * The title of the lab data performance category.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabDataTitle() {
    return labDataTitle;
  }

  /**
   * The title of the lab data performance category.
   * @param labDataTitle labDataTitle or {@code null} for none
   */
  public RendererFormattedStrings setLabDataTitle(java.lang.String labDataTitle) {
    this.labDataTitle = labDataTitle;
    return this;
  }

  /**
   * The disclaimer shown under performance explaining that the network can vary.
   * @return value or {@code null} for none
   */
  public java.lang.String getLsPerformanceCategoryDescription() {
    return lsPerformanceCategoryDescription;
  }

  /**
   * The disclaimer shown under performance explaining that the network can vary.
   * @param lsPerformanceCategoryDescription lsPerformanceCategoryDescription or {@code null} for none
   */
  public RendererFormattedStrings setLsPerformanceCategoryDescription(java.lang.String lsPerformanceCategoryDescription) {
    this.lsPerformanceCategoryDescription = lsPerformanceCategoryDescription;
    return this;
  }

  /**
   * The heading shown above a list of audits that were not computerd in the run.
   * @return value or {@code null} for none
   */
  public java.lang.String getManualAuditsGroupTitle() {
    return manualAuditsGroupTitle;
  }

  /**
   * The heading shown above a list of audits that were not computerd in the run.
   * @param manualAuditsGroupTitle manualAuditsGroupTitle or {@code null} for none
   */
  public RendererFormattedStrings setManualAuditsGroupTitle(java.lang.String manualAuditsGroupTitle) {
    this.manualAuditsGroupTitle = manualAuditsGroupTitle;
    return this;
  }

  /**
   * The heading shown above a list of audits that do not apply to a page.
   * @return value or {@code null} for none
   */
  public java.lang.String getNotApplicableAuditsGroupTitle() {
    return notApplicableAuditsGroupTitle;
  }

  /**
   * The heading shown above a list of audits that do not apply to a page.
   * @param notApplicableAuditsGroupTitle notApplicableAuditsGroupTitle or {@code null} for none
   */
  public RendererFormattedStrings setNotApplicableAuditsGroupTitle(java.lang.String notApplicableAuditsGroupTitle) {
    this.notApplicableAuditsGroupTitle = notApplicableAuditsGroupTitle;
    return this;
  }

  /**
   * The heading for the estimated page load savings opportunity of an audit.
   * @return value or {@code null} for none
   */
  public java.lang.String getOpportunityResourceColumnLabel() {
    return opportunityResourceColumnLabel;
  }

  /**
   * The heading for the estimated page load savings opportunity of an audit.
   * @param opportunityResourceColumnLabel opportunityResourceColumnLabel or {@code null} for none
   */
  public RendererFormattedStrings setOpportunityResourceColumnLabel(java.lang.String opportunityResourceColumnLabel) {
    this.opportunityResourceColumnLabel = opportunityResourceColumnLabel;
    return this;
  }

  /**
   * The heading for the estimated page load savings of opportunity audits.
   * @return value or {@code null} for none
   */
  public java.lang.String getOpportunitySavingsColumnLabel() {
    return opportunitySavingsColumnLabel;
  }

  /**
   * The heading for the estimated page load savings of opportunity audits.
   * @param opportunitySavingsColumnLabel opportunitySavingsColumnLabel or {@code null} for none
   */
  public RendererFormattedStrings setOpportunitySavingsColumnLabel(java.lang.String opportunitySavingsColumnLabel) {
    this.opportunitySavingsColumnLabel = opportunitySavingsColumnLabel;
    return this;
  }

  /**
   * The heading that is shown above a list of audits that are passing.
   * @return value or {@code null} for none
   */
  public java.lang.String getPassedAuditsGroupTitle() {
    return passedAuditsGroupTitle;
  }

  /**
   * The heading that is shown above a list of audits that are passing.
   * @param passedAuditsGroupTitle passedAuditsGroupTitle or {@code null} for none
   */
  public RendererFormattedStrings setPassedAuditsGroupTitle(java.lang.String passedAuditsGroupTitle) {
    this.passedAuditsGroupTitle = passedAuditsGroupTitle;
    return this;
  }

  /**
   * Descriptive explanation for emulation setting when emulating a generic desktop form factor, as
   * opposed to a mobile-device like form factor.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeDesktopEmulation() {
    return runtimeDesktopEmulation;
  }

  /**
   * Descriptive explanation for emulation setting when emulating a generic desktop form factor, as
   * opposed to a mobile-device like form factor.
   * @param runtimeDesktopEmulation runtimeDesktopEmulation or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeDesktopEmulation(java.lang.String runtimeDesktopEmulation) {
    this.runtimeDesktopEmulation = runtimeDesktopEmulation;
    return this;
  }

  /**
   * Descriptive explanation for emulation setting when emulating a Nexus 5X mobile device.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeMobileEmulation() {
    return runtimeMobileEmulation;
  }

  /**
   * Descriptive explanation for emulation setting when emulating a Nexus 5X mobile device.
   * @param runtimeMobileEmulation runtimeMobileEmulation or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeMobileEmulation(java.lang.String runtimeMobileEmulation) {
    this.runtimeMobileEmulation = runtimeMobileEmulation;
    return this;
  }

  /**
   * Descriptive explanation for emulation setting when no device emulation is set.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeNoEmulation() {
    return runtimeNoEmulation;
  }

  /**
   * Descriptive explanation for emulation setting when no device emulation is set.
   * @param runtimeNoEmulation runtimeNoEmulation or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeNoEmulation(java.lang.String runtimeNoEmulation) {
    this.runtimeNoEmulation = runtimeNoEmulation;
    return this;
  }

  /**
   * Label for a row in a table that shows the version of the Axe library used
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsAxeVersion() {
    return runtimeSettingsAxeVersion;
  }

  /**
   * Label for a row in a table that shows the version of the Axe library used
   * @param runtimeSettingsAxeVersion runtimeSettingsAxeVersion or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsAxeVersion(java.lang.String runtimeSettingsAxeVersion) {
    this.runtimeSettingsAxeVersion = runtimeSettingsAxeVersion;
    return this;
  }

  /**
   * Label for a row in a table that shows the estimated CPU power of the machine running
   * Lighthouse. Example row values: 532, 1492, 783.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsBenchmark() {
    return runtimeSettingsBenchmark;
  }

  /**
   * Label for a row in a table that shows the estimated CPU power of the machine running
   * Lighthouse. Example row values: 532, 1492, 783.
   * @param runtimeSettingsBenchmark runtimeSettingsBenchmark or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsBenchmark(java.lang.String runtimeSettingsBenchmark) {
    this.runtimeSettingsBenchmark = runtimeSettingsBenchmark;
    return this;
  }

  /**
   * Label for a row in a table that describes the CPU throttling conditions that were used during a
   * Lighthouse run, if any.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsCPUThrottling() {
    return runtimeSettingsCPUThrottling;
  }

  /**
   * Label for a row in a table that describes the CPU throttling conditions that were used during a
   * Lighthouse run, if any.
   * @param runtimeSettingsCPUThrottling runtimeSettingsCPUThrottling or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsCPUThrottling(java.lang.String runtimeSettingsCPUThrottling) {
    this.runtimeSettingsCPUThrottling = runtimeSettingsCPUThrottling;
    return this;
  }

  /**
   * Label for a row in a table that shows in what tool Lighthouse is being run (e.g. The lighthouse
   * CLI, Chrome DevTools, Lightrider, WebPageTest, etc).
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsChannel() {
    return runtimeSettingsChannel;
  }

  /**
   * Label for a row in a table that shows in what tool Lighthouse is being run (e.g. The lighthouse
   * CLI, Chrome DevTools, Lightrider, WebPageTest, etc).
   * @param runtimeSettingsChannel runtimeSettingsChannel or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsChannel(java.lang.String runtimeSettingsChannel) {
    this.runtimeSettingsChannel = runtimeSettingsChannel;
    return this;
  }

  /**
   * Label for a row in a table that describes the kind of device that was emulated for the
   * Lighthouse run. Example values for row elements: 'No Emulation', 'Emulated Desktop', etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsDevice() {
    return runtimeSettingsDevice;
  }

  /**
   * Label for a row in a table that describes the kind of device that was emulated for the
   * Lighthouse run. Example values for row elements: 'No Emulation', 'Emulated Desktop', etc.
   * @param runtimeSettingsDevice runtimeSettingsDevice or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsDevice(java.lang.String runtimeSettingsDevice) {
    this.runtimeSettingsDevice = runtimeSettingsDevice;
    return this;
  }

  /**
   * Label for a row in a table that shows the time at which a Lighthouse run was conducted;
   * formatted as a timestamp, e.g. Jan 1, 1970 12:00 AM UTC.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsFetchTime() {
    return runtimeSettingsFetchTime;
  }

  /**
   * Label for a row in a table that shows the time at which a Lighthouse run was conducted;
   * formatted as a timestamp, e.g. Jan 1, 1970 12:00 AM UTC.
   * @param runtimeSettingsFetchTime runtimeSettingsFetchTime or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsFetchTime(java.lang.String runtimeSettingsFetchTime) {
    this.runtimeSettingsFetchTime = runtimeSettingsFetchTime;
    return this;
  }

  /**
   * Label for a row in a table that describes the network throttling conditions that were used
   * during a Lighthouse run, if any.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsNetworkThrottling() {
    return runtimeSettingsNetworkThrottling;
  }

  /**
   * Label for a row in a table that describes the network throttling conditions that were used
   * during a Lighthouse run, if any.
   * @param runtimeSettingsNetworkThrottling runtimeSettingsNetworkThrottling or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsNetworkThrottling(java.lang.String runtimeSettingsNetworkThrottling) {
    this.runtimeSettingsNetworkThrottling = runtimeSettingsNetworkThrottling;
    return this;
  }

  /**
   * Title of the Runtime settings table in a Lighthouse report. Runtime settings are the
   * environment configurations that a specific report used at auditing time.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsTitle() {
    return runtimeSettingsTitle;
  }

  /**
   * Title of the Runtime settings table in a Lighthouse report. Runtime settings are the
   * environment configurations that a specific report used at auditing time.
   * @param runtimeSettingsTitle runtimeSettingsTitle or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsTitle(java.lang.String runtimeSettingsTitle) {
    this.runtimeSettingsTitle = runtimeSettingsTitle;
    return this;
  }

  /**
   * Label for a row in a table that shows the User Agent that was detected on the Host machine that
   * ran Lighthouse.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsUA() {
    return runtimeSettingsUA;
  }

  /**
   * Label for a row in a table that shows the User Agent that was detected on the Host machine that
   * ran Lighthouse.
   * @param runtimeSettingsUA runtimeSettingsUA or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsUA(java.lang.String runtimeSettingsUA) {
    this.runtimeSettingsUA = runtimeSettingsUA;
    return this;
  }

  /**
   * Label for a row in a table that shows the User Agent that was used to send out all network
   * requests during the Lighthouse run.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsUANetwork() {
    return runtimeSettingsUANetwork;
  }

  /**
   * Label for a row in a table that shows the User Agent that was used to send out all network
   * requests during the Lighthouse run.
   * @param runtimeSettingsUANetwork runtimeSettingsUANetwork or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsUANetwork(java.lang.String runtimeSettingsUANetwork) {
    this.runtimeSettingsUANetwork = runtimeSettingsUANetwork;
    return this;
  }

  /**
   * Label for a row in a table that shows the URL that was audited during a Lighthouse run.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeSettingsUrl() {
    return runtimeSettingsUrl;
  }

  /**
   * Label for a row in a table that shows the URL that was audited during a Lighthouse run.
   * @param runtimeSettingsUrl runtimeSettingsUrl or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeSettingsUrl(java.lang.String runtimeSettingsUrl) {
    this.runtimeSettingsUrl = runtimeSettingsUrl;
    return this;
  }

  /**
   * Descriptive explanation for a runtime setting that is set to an unknown value.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuntimeUnknown() {
    return runtimeUnknown;
  }

  /**
   * Descriptive explanation for a runtime setting that is set to an unknown value.
   * @param runtimeUnknown runtimeUnknown or {@code null} for none
   */
  public RendererFormattedStrings setRuntimeUnknown(java.lang.String runtimeUnknown) {
    this.runtimeUnknown = runtimeUnknown;
    return this;
  }

  /**
   * The label that explains the score gauges scale (0-49, 50-89, 90-100).
   * @return value or {@code null} for none
   */
  public java.lang.String getScorescaleLabel() {
    return scorescaleLabel;
  }

  /**
   * The label that explains the score gauges scale (0-49, 50-89, 90-100).
   * @param scorescaleLabel scorescaleLabel or {@code null} for none
   */
  public RendererFormattedStrings setScorescaleLabel(java.lang.String scorescaleLabel) {
    this.scorescaleLabel = scorescaleLabel;
    return this;
  }

  /**
   * Label preceding a radio control for filtering the list of audits. The radio choices are various
   * performance metrics (FCP, LCP, TBT), and if chosen, the audits in the report are hidden if they
   * are not relevant to the selected metric.
   * @return value or {@code null} for none
   */
  public java.lang.String getShowRelevantAudits() {
    return showRelevantAudits;
  }

  /**
   * Label preceding a radio control for filtering the list of audits. The radio choices are various
   * performance metrics (FCP, LCP, TBT), and if chosen, the audits in the report are hidden if they
   * are not relevant to the selected metric.
   * @param showRelevantAudits showRelevantAudits or {@code null} for none
   */
  public RendererFormattedStrings setShowRelevantAudits(java.lang.String showRelevantAudits) {
    this.showRelevantAudits = showRelevantAudits;
    return this;
  }

  /**
   * The label for the button to show only a few lines of a snippet
   * @return value or {@code null} for none
   */
  public java.lang.String getSnippetCollapseButtonLabel() {
    return snippetCollapseButtonLabel;
  }

  /**
   * The label for the button to show only a few lines of a snippet
   * @param snippetCollapseButtonLabel snippetCollapseButtonLabel or {@code null} for none
   */
  public RendererFormattedStrings setSnippetCollapseButtonLabel(java.lang.String snippetCollapseButtonLabel) {
    this.snippetCollapseButtonLabel = snippetCollapseButtonLabel;
    return this;
  }

  /**
   * The label for the button to show all lines of a snippet
   * @return value or {@code null} for none
   */
  public java.lang.String getSnippetExpandButtonLabel() {
    return snippetExpandButtonLabel;
  }

  /**
   * The label for the button to show all lines of a snippet
   * @param snippetExpandButtonLabel snippetExpandButtonLabel or {@code null} for none
   */
  public RendererFormattedStrings setSnippetExpandButtonLabel(java.lang.String snippetExpandButtonLabel) {
    this.snippetExpandButtonLabel = snippetExpandButtonLabel;
    return this;
  }

  /**
   * This label is for a filter checkbox above a table of items
   * @return value or {@code null} for none
   */
  public java.lang.String getThirdPartyResourcesLabel() {
    return thirdPartyResourcesLabel;
  }

  /**
   * This label is for a filter checkbox above a table of items
   * @param thirdPartyResourcesLabel thirdPartyResourcesLabel or {@code null} for none
   */
  public RendererFormattedStrings setThirdPartyResourcesLabel(java.lang.String thirdPartyResourcesLabel) {
    this.thirdPartyResourcesLabel = thirdPartyResourcesLabel;
    return this;
  }

  /**
   * Descriptive explanation for environment throttling that was provided by the runtime environment
   * instead of provided by Lighthouse throttling.
   * @return value or {@code null} for none
   */
  public java.lang.String getThrottlingProvided() {
    return throttlingProvided;
  }

  /**
   * Descriptive explanation for environment throttling that was provided by the runtime environment
   * instead of provided by Lighthouse throttling.
   * @param throttlingProvided throttlingProvided or {@code null} for none
   */
  public RendererFormattedStrings setThrottlingProvided(java.lang.String throttlingProvided) {
    this.throttlingProvided = throttlingProvided;
    return this;
  }

  /**
   * The label shown preceding important warnings that may have invalidated an entire report.
   * @return value or {@code null} for none
   */
  public java.lang.String getToplevelWarningsMessage() {
    return toplevelWarningsMessage;
  }

  /**
   * The label shown preceding important warnings that may have invalidated an entire report.
   * @param toplevelWarningsMessage toplevelWarningsMessage or {@code null} for none
   */
  public RendererFormattedStrings setToplevelWarningsMessage(java.lang.String toplevelWarningsMessage) {
    this.toplevelWarningsMessage = toplevelWarningsMessage;
    return this;
  }

  /**
   * The disclaimer shown below a performance metric value.
   * @return value or {@code null} for none
   */
  public java.lang.String getVarianceDisclaimer() {
    return varianceDisclaimer;
  }

  /**
   * The disclaimer shown below a performance metric value.
   * @param varianceDisclaimer varianceDisclaimer or {@code null} for none
   */
  public RendererFormattedStrings setVarianceDisclaimer(java.lang.String varianceDisclaimer) {
    this.varianceDisclaimer = varianceDisclaimer;
    return this;
  }

  /**
   * Label for a button that opens the Treemap App
   * @return value or {@code null} for none
   */
  public java.lang.String getViewTreemapLabel() {
    return viewTreemapLabel;
  }

  /**
   * Label for a button that opens the Treemap App
   * @param viewTreemapLabel viewTreemapLabel or {@code null} for none
   */
  public RendererFormattedStrings setViewTreemapLabel(java.lang.String viewTreemapLabel) {
    this.viewTreemapLabel = viewTreemapLabel;
    return this;
  }

  /**
   * The heading that is shown above a list of audits that have warnings
   * @return value or {@code null} for none
   */
  public java.lang.String getWarningAuditsGroupTitle() {
    return warningAuditsGroupTitle;
  }

  /**
   * The heading that is shown above a list of audits that have warnings
   * @param warningAuditsGroupTitle warningAuditsGroupTitle or {@code null} for none
   */
  public RendererFormattedStrings setWarningAuditsGroupTitle(java.lang.String warningAuditsGroupTitle) {
    this.warningAuditsGroupTitle = warningAuditsGroupTitle;
    return this;
  }

  /**
   * The label shown above a bulleted list of warnings.
   * @return value or {@code null} for none
   */
  public java.lang.String getWarningHeader() {
    return warningHeader;
  }

  /**
   * The label shown above a bulleted list of warnings.
   * @param warningHeader warningHeader or {@code null} for none
   */
  public RendererFormattedStrings setWarningHeader(java.lang.String warningHeader) {
    this.warningHeader = warningHeader;
    return this;
  }

  @Override
  public RendererFormattedStrings set(String fieldName, Object value) {
    return (RendererFormattedStrings) super.set(fieldName, value);
  }

  @Override
  public RendererFormattedStrings clone() {
    return (RendererFormattedStrings) super.clone();
  }

}
