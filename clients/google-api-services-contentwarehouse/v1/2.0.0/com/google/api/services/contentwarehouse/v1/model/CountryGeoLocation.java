/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Stores one location and all meta-data associated with that location.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CountryGeoLocation extends com.google.api.client.json.GenericJson {

  /**
   * The radius (in miles) around the assigned location that the document gets 50% of its clicks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long clickRadius50Percent;

  /**
   * Confidence on the location. Ranges in [0.0, 1.0]. Cleared during index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidence;

  /**
   * Confidence mapped to [0, 100]. Converted to integer for efficient storage. Populated during
   * index creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long confidencePercent;

  /**
   * Used for compressed docloc data. In compressed data, instead of location_info, only an integer
   * ID for that LocationInfo is stored. A separate lookup table is used to get full LocationInfo
   * from the internal ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer internalId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CountryLocationInfo locationInfo;

  /**
   * True if this location is assigned to one of the subpages, and not to the page itself. If the
   * total number of locations assigned to all the subpages of a page is small (usually up to 5),
   * then that page also gets assigned those locations, and this flag is set for those locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean propagatedFromASubpage;

  /**
   * The radius (in miles) around the assigned location that the document gets 50% of its clicks.
   * @return value or {@code null} for none
   */
  public java.lang.Long getClickRadius50Percent() {
    return clickRadius50Percent;
  }

  /**
   * The radius (in miles) around the assigned location that the document gets 50% of its clicks.
   * @param clickRadius50Percent clickRadius50Percent or {@code null} for none
   */
  public CountryGeoLocation setClickRadius50Percent(java.lang.Long clickRadius50Percent) {
    this.clickRadius50Percent = clickRadius50Percent;
    return this;
  }

  /**
   * Confidence on the location. Ranges in [0.0, 1.0]. Cleared during index creation.
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidence() {
    return confidence;
  }

  /**
   * Confidence on the location. Ranges in [0.0, 1.0]. Cleared during index creation.
   * @param confidence confidence or {@code null} for none
   */
  public CountryGeoLocation setConfidence(java.lang.Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence mapped to [0, 100]. Converted to integer for efficient storage. Populated during
   * index creation.
   * @return value or {@code null} for none
   */
  public java.lang.Long getConfidencePercent() {
    return confidencePercent;
  }

  /**
   * Confidence mapped to [0, 100]. Converted to integer for efficient storage. Populated during
   * index creation.
   * @param confidencePercent confidencePercent or {@code null} for none
   */
  public CountryGeoLocation setConfidencePercent(java.lang.Long confidencePercent) {
    this.confidencePercent = confidencePercent;
    return this;
  }

  /**
   * Used for compressed docloc data. In compressed data, instead of location_info, only an integer
   * ID for that LocationInfo is stored. A separate lookup table is used to get full LocationInfo
   * from the internal ID.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInternalId() {
    return internalId;
  }

  /**
   * Used for compressed docloc data. In compressed data, instead of location_info, only an integer
   * ID for that LocationInfo is stored. A separate lookup table is used to get full LocationInfo
   * from the internal ID.
   * @param internalId internalId or {@code null} for none
   */
  public CountryGeoLocation setInternalId(java.lang.Integer internalId) {
    this.internalId = internalId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public CountryLocationInfo getLocationInfo() {
    return locationInfo;
  }

  /**
   * @param locationInfo locationInfo or {@code null} for none
   */
  public CountryGeoLocation setLocationInfo(CountryLocationInfo locationInfo) {
    this.locationInfo = locationInfo;
    return this;
  }

  /**
   * True if this location is assigned to one of the subpages, and not to the page itself. If the
   * total number of locations assigned to all the subpages of a page is small (usually up to 5),
   * then that page also gets assigned those locations, and this flag is set for those locations.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPropagatedFromASubpage() {
    return propagatedFromASubpage;
  }

  /**
   * True if this location is assigned to one of the subpages, and not to the page itself. If the
   * total number of locations assigned to all the subpages of a page is small (usually up to 5),
   * then that page also gets assigned those locations, and this flag is set for those locations.
   * @param propagatedFromASubpage propagatedFromASubpage or {@code null} for none
   */
  public CountryGeoLocation setPropagatedFromASubpage(java.lang.Boolean propagatedFromASubpage) {
    this.propagatedFromASubpage = propagatedFromASubpage;
    return this;
  }

  @Override
  public CountryGeoLocation set(String fieldName, Object value) {
    return (CountryGeoLocation) super.set(fieldName, value);
  }

  @Override
  public CountryGeoLocation clone() {
    return (CountryGeoLocation) super.clone();
  }

}
