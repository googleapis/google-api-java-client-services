/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.domains.v1alpha2.model;

/**
 * Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It
 * contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Domains API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DsRecord extends com.google.api.client.json.GenericJson {

  /**
   * The algorithm used to generate the referenced DNSKEY.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String algorithm;

  /**
   * The digest generated from the referenced DNSKEY.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digest;

  /**
   * The hash function used to generate the digest of the referenced DNSKEY.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String digestType;

  /**
   * The key tag of the record. Must be set in range 0 -- 65535.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer keyTag;

  /**
   * The algorithm used to generate the referenced DNSKEY.
   * @return value or {@code null} for none
   */
  public java.lang.String getAlgorithm() {
    return algorithm;
  }

  /**
   * The algorithm used to generate the referenced DNSKEY.
   * @param algorithm algorithm or {@code null} for none
   */
  public DsRecord setAlgorithm(java.lang.String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * The digest generated from the referenced DNSKEY.
   * @return value or {@code null} for none
   */
  public java.lang.String getDigest() {
    return digest;
  }

  /**
   * The digest generated from the referenced DNSKEY.
   * @param digest digest or {@code null} for none
   */
  public DsRecord setDigest(java.lang.String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * The hash function used to generate the digest of the referenced DNSKEY.
   * @return value or {@code null} for none
   */
  public java.lang.String getDigestType() {
    return digestType;
  }

  /**
   * The hash function used to generate the digest of the referenced DNSKEY.
   * @param digestType digestType or {@code null} for none
   */
  public DsRecord setDigestType(java.lang.String digestType) {
    this.digestType = digestType;
    return this;
  }

  /**
   * The key tag of the record. Must be set in range 0 -- 65535.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getKeyTag() {
    return keyTag;
  }

  /**
   * The key tag of the record. Must be set in range 0 -- 65535.
   * @param keyTag keyTag or {@code null} for none
   */
  public DsRecord setKeyTag(java.lang.Integer keyTag) {
    this.keyTag = keyTag;
    return this;
  }

  @Override
  public DsRecord set(String fieldName, Object value) {
    return (DsRecord) super.set(fieldName, value);
  }

  @Override
  public DsRecord clone() {
    return (DsRecord) super.clone();
  }

}
