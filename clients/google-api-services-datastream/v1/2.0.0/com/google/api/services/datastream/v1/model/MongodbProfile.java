/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * MongoDB profile.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MongodbProfile extends com.google.api.client.json.GenericJson {

  /**
   * Required. List of host addresses for a MongoDB cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HostAddress> hostAddresses;

  static {
    // hack to force ProGuard to consider HostAddress used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HostAddress.class);
  }

  /**
   * Optional. Password for the MongoDB connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String password;

  /**
   * Optional. Name of the replica set. Only needed for self hosted replica set type MongoDB
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String replicaSet;

  /**
   * Optional. A reference to a Secret Manager resource name storing the SQLServer connection
   * password. Mutually exclusive with the `password` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String secretManagerStoredPassword;

  /**
   * Srv connection format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SrvConnectionFormat srvConnectionFormat;

  /**
   * Standard connection format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StandardConnectionFormat standardConnectionFormat;

  /**
   * Required. Username for the MongoDB connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Required. List of host addresses for a MongoDB cluster.
   * @return value or {@code null} for none
   */
  public java.util.List<HostAddress> getHostAddresses() {
    return hostAddresses;
  }

  /**
   * Required. List of host addresses for a MongoDB cluster.
   * @param hostAddresses hostAddresses or {@code null} for none
   */
  public MongodbProfile setHostAddresses(java.util.List<HostAddress> hostAddresses) {
    this.hostAddresses = hostAddresses;
    return this;
  }

  /**
   * Optional. Password for the MongoDB connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Optional. Password for the MongoDB connection. Mutually exclusive with the
   * `secret_manager_stored_password` field.
   * @param password password or {@code null} for none
   */
  public MongodbProfile setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  /**
   * Optional. Name of the replica set. Only needed for self hosted replica set type MongoDB
   * cluster.
   * @return value or {@code null} for none
   */
  public java.lang.String getReplicaSet() {
    return replicaSet;
  }

  /**
   * Optional. Name of the replica set. Only needed for self hosted replica set type MongoDB
   * cluster.
   * @param replicaSet replicaSet or {@code null} for none
   */
  public MongodbProfile setReplicaSet(java.lang.String replicaSet) {
    this.replicaSet = replicaSet;
    return this;
  }

  /**
   * Optional. A reference to a Secret Manager resource name storing the SQLServer connection
   * password. Mutually exclusive with the `password` field.
   * @return value or {@code null} for none
   */
  public java.lang.String getSecretManagerStoredPassword() {
    return secretManagerStoredPassword;
  }

  /**
   * Optional. A reference to a Secret Manager resource name storing the SQLServer connection
   * password. Mutually exclusive with the `password` field.
   * @param secretManagerStoredPassword secretManagerStoredPassword or {@code null} for none
   */
  public MongodbProfile setSecretManagerStoredPassword(java.lang.String secretManagerStoredPassword) {
    this.secretManagerStoredPassword = secretManagerStoredPassword;
    return this;
  }

  /**
   * Srv connection format.
   * @return value or {@code null} for none
   */
  public SrvConnectionFormat getSrvConnectionFormat() {
    return srvConnectionFormat;
  }

  /**
   * Srv connection format.
   * @param srvConnectionFormat srvConnectionFormat or {@code null} for none
   */
  public MongodbProfile setSrvConnectionFormat(SrvConnectionFormat srvConnectionFormat) {
    this.srvConnectionFormat = srvConnectionFormat;
    return this;
  }

  /**
   * Standard connection format.
   * @return value or {@code null} for none
   */
  public StandardConnectionFormat getStandardConnectionFormat() {
    return standardConnectionFormat;
  }

  /**
   * Standard connection format.
   * @param standardConnectionFormat standardConnectionFormat or {@code null} for none
   */
  public MongodbProfile setStandardConnectionFormat(StandardConnectionFormat standardConnectionFormat) {
    this.standardConnectionFormat = standardConnectionFormat;
    return this;
  }

  /**
   * Required. Username for the MongoDB connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Required. Username for the MongoDB connection.
   * @param username username or {@code null} for none
   */
  public MongodbProfile setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  @Override
  public MongodbProfile set(String fieldName, Object value) {
    return (MongodbProfile) super.set(fieldName, value);
  }

  @Override
  public MongodbProfile clone() {
    return (MongodbProfile) super.clone();
  }

}
