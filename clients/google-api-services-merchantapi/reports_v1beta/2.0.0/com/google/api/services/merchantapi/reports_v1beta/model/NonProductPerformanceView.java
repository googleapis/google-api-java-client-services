/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.reports_v1beta.model;

/**
 * Fields available for query in `non_product_performance_view` table. Performance data on images
 * and online store links leading to your non-product pages. This includes performance metrics (for
 * example, `clicks`) and dimensions according to which performance metrics are segmented (for
 * example, `date`). Segment fields cannot be selected in queries without also selecting at least
 * one metric field. Values are only set for fields requested explicitly in the request's search
 * query.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NonProductPerformanceView extends com.google.api.client.json.GenericJson {

  /**
   * Click-through rate - the number of clicks (`clicks`) divided by the number of impressions
   * (`impressions`) of images and online store links leading to your non-product pages. Metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double clickThroughRate;

  /**
   * Number of clicks on images and online store links leading to your non-product pages. Metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long clicks;

  /**
   * Date in the merchant timezone to which metrics apply. Segment. Condition on `date` is required
   * in the `WHERE` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date date;

  /**
   * Number of times images and online store links leading to your non-product pages were shown.
   * Metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long impressions;

  /**
   * First day of the week (Monday) of the metrics date in the merchant timezone. Segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date week;

  /**
   * Click-through rate - the number of clicks (`clicks`) divided by the number of impressions
   * (`impressions`) of images and online store links leading to your non-product pages. Metric.
   * @return value or {@code null} for none
   */
  public java.lang.Double getClickThroughRate() {
    return clickThroughRate;
  }

  /**
   * Click-through rate - the number of clicks (`clicks`) divided by the number of impressions
   * (`impressions`) of images and online store links leading to your non-product pages. Metric.
   * @param clickThroughRate clickThroughRate or {@code null} for none
   */
  public NonProductPerformanceView setClickThroughRate(java.lang.Double clickThroughRate) {
    this.clickThroughRate = clickThroughRate;
    return this;
  }

  /**
   * Number of clicks on images and online store links leading to your non-product pages. Metric.
   * @return value or {@code null} for none
   */
  public java.lang.Long getClicks() {
    return clicks;
  }

  /**
   * Number of clicks on images and online store links leading to your non-product pages. Metric.
   * @param clicks clicks or {@code null} for none
   */
  public NonProductPerformanceView setClicks(java.lang.Long clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Date in the merchant timezone to which metrics apply. Segment. Condition on `date` is required
   * in the `WHERE` clause.
   * @return value or {@code null} for none
   */
  public Date getDate() {
    return date;
  }

  /**
   * Date in the merchant timezone to which metrics apply. Segment. Condition on `date` is required
   * in the `WHERE` clause.
   * @param date date or {@code null} for none
   */
  public NonProductPerformanceView setDate(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Number of times images and online store links leading to your non-product pages were shown.
   * Metric.
   * @return value or {@code null} for none
   */
  public java.lang.Long getImpressions() {
    return impressions;
  }

  /**
   * Number of times images and online store links leading to your non-product pages were shown.
   * Metric.
   * @param impressions impressions or {@code null} for none
   */
  public NonProductPerformanceView setImpressions(java.lang.Long impressions) {
    this.impressions = impressions;
    return this;
  }

  /**
   * First day of the week (Monday) of the metrics date in the merchant timezone. Segment.
   * @return value or {@code null} for none
   */
  public Date getWeek() {
    return week;
  }

  /**
   * First day of the week (Monday) of the metrics date in the merchant timezone. Segment.
   * @param week week or {@code null} for none
   */
  public NonProductPerformanceView setWeek(Date week) {
    this.week = week;
    return this;
  }

  @Override
  public NonProductPerformanceView set(String fieldName, Object value) {
    return (NonProductPerformanceView) super.set(fieldName, value);
  }

  @Override
  public NonProductPerformanceView clone() {
    return (NonProductPerformanceView) super.clone();
  }

}
