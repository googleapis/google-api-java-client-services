/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.developerconnect.v1.model;

/**
 * Configuration for connections to an instance of GitLab Enterprise.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Developer Connect API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GitLabEnterpriseConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. A GitLab personal access token with the minimum `api` scope access and a minimum role
   * of `maintainer`. The GitLab Projects visible to this Personal Access Token will control which
   * Projects Developer Connect has access to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserCredential authorizerCredential;

  /**
   * Required. The URI of the GitLab Enterprise host this connection is for.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostUri;

  /**
   * Required. A GitLab personal access token with the minimum `read_api` scope access and a minimum
   * role of `reporter`. The GitLab Projects visible to this Personal Access Token will control
   * which Projects Developer Connect has access to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserCredential readAuthorizerCredential;

  /**
   * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serverVersion;

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitLab Enterprise
   * instance. This should only be set if the GitLab Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitLab Enterprise
   * server will be made over the public internet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ServiceDirectoryConfig serviceDirectoryConfig;

  /**
   * Optional. SSL Certificate Authority certificate to use for requests to GitLab Enterprise
   * instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sslCaCertificate;

  /**
   * Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
   * formatted as `projects/secrets/versions`. This is used to validate webhooks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webhookSecretSecretVersion;

  /**
   * Required. A GitLab personal access token with the minimum `api` scope access and a minimum role
   * of `maintainer`. The GitLab Projects visible to this Personal Access Token will control which
   * Projects Developer Connect has access to.
   * @return value or {@code null} for none
   */
  public UserCredential getAuthorizerCredential() {
    return authorizerCredential;
  }

  /**
   * Required. A GitLab personal access token with the minimum `api` scope access and a minimum role
   * of `maintainer`. The GitLab Projects visible to this Personal Access Token will control which
   * Projects Developer Connect has access to.
   * @param authorizerCredential authorizerCredential or {@code null} for none
   */
  public GitLabEnterpriseConfig setAuthorizerCredential(UserCredential authorizerCredential) {
    this.authorizerCredential = authorizerCredential;
    return this;
  }

  /**
   * Required. The URI of the GitLab Enterprise host this connection is for.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostUri() {
    return hostUri;
  }

  /**
   * Required. The URI of the GitLab Enterprise host this connection is for.
   * @param hostUri hostUri or {@code null} for none
   */
  public GitLabEnterpriseConfig setHostUri(java.lang.String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

  /**
   * Required. A GitLab personal access token with the minimum `read_api` scope access and a minimum
   * role of `reporter`. The GitLab Projects visible to this Personal Access Token will control
   * which Projects Developer Connect has access to.
   * @return value or {@code null} for none
   */
  public UserCredential getReadAuthorizerCredential() {
    return readAuthorizerCredential;
  }

  /**
   * Required. A GitLab personal access token with the minimum `read_api` scope access and a minimum
   * role of `reporter`. The GitLab Projects visible to this Personal Access Token will control
   * which Projects Developer Connect has access to.
   * @param readAuthorizerCredential readAuthorizerCredential or {@code null} for none
   */
  public GitLabEnterpriseConfig setReadAuthorizerCredential(UserCredential readAuthorizerCredential) {
    this.readAuthorizerCredential = readAuthorizerCredential;
    return this;
  }

  /**
   * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
   * @return value or {@code null} for none
   */
  public java.lang.String getServerVersion() {
    return serverVersion;
  }

  /**
   * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
   * @param serverVersion serverVersion or {@code null} for none
   */
  public GitLabEnterpriseConfig setServerVersion(java.lang.String serverVersion) {
    this.serverVersion = serverVersion;
    return this;
  }

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitLab Enterprise
   * instance. This should only be set if the GitLab Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitLab Enterprise
   * server will be made over the public internet.
   * @return value or {@code null} for none
   */
  public ServiceDirectoryConfig getServiceDirectoryConfig() {
    return serviceDirectoryConfig;
  }

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitLab Enterprise
   * instance. This should only be set if the GitLab Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitLab Enterprise
   * server will be made over the public internet.
   * @param serviceDirectoryConfig serviceDirectoryConfig or {@code null} for none
   */
  public GitLabEnterpriseConfig setServiceDirectoryConfig(ServiceDirectoryConfig serviceDirectoryConfig) {
    this.serviceDirectoryConfig = serviceDirectoryConfig;
    return this;
  }

  /**
   * Optional. SSL Certificate Authority certificate to use for requests to GitLab Enterprise
   * instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getSslCaCertificate() {
    return sslCaCertificate;
  }

  /**
   * Optional. SSL Certificate Authority certificate to use for requests to GitLab Enterprise
   * instance.
   * @param sslCaCertificate sslCaCertificate or {@code null} for none
   */
  public GitLabEnterpriseConfig setSslCaCertificate(java.lang.String sslCaCertificate) {
    this.sslCaCertificate = sslCaCertificate;
    return this;
  }

  /**
   * Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
   * formatted as `projects/secrets/versions`. This is used to validate webhooks.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebhookSecretSecretVersion() {
    return webhookSecretSecretVersion;
  }

  /**
   * Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
   * formatted as `projects/secrets/versions`. This is used to validate webhooks.
   * @param webhookSecretSecretVersion webhookSecretSecretVersion or {@code null} for none
   */
  public GitLabEnterpriseConfig setWebhookSecretSecretVersion(java.lang.String webhookSecretSecretVersion) {
    this.webhookSecretSecretVersion = webhookSecretSecretVersion;
    return this;
  }

  @Override
  public GitLabEnterpriseConfig set(String fieldName, Object value) {
    return (GitLabEnterpriseConfig) super.set(fieldName, value);
  }

  @Override
  public GitLabEnterpriseConfig clone() {
    return (GitLabEnterpriseConfig) super.clone();
  }

}
