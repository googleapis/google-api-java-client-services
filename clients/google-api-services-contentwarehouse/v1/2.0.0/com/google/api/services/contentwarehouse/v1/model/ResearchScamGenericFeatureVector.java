/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * ===================================================================== # GenericFeatureVector Last
 * tag used: 23
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScamGenericFeatureVector extends com.google.api.client.json.GenericJson {

  /**
   * The class label of this datapoint. This should be populated if ScaM is being used for nearest-
   * neighbor-based classification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String classLabel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamGenericFeatureVectorCrowding crowding;

  /**
   * Optional point id that can contain an arbitrary (unrestricted in content) value except when the
   * data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be
   * set for _all_ points in all shards or the SSTable keys will be used as the values for the
   * data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly
   * or via the key--the values must be unique across all shards.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataIdStr;

  /**
   * A timestamp after which this datapoint is considered no longer valid and is eligible for
   * deletion. The exact meaning varies with application/configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expirationTimestamp;

  /**
   * DEPRECATED: - this field can safely be left unspecified. For dense vectors, dimensionality is
   * inferred from the number of values specified, and must be identical to this, or unspecified.
   * For sparse vectors, the default value is correct for most users, and allows use of 64-bit hash
   * values for feature indices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger featureDim;

  /**
   * - for SPARSE vectors, specifies indices of the nonzero dimensions whose values are specified by
   * the , , or field. This field is not used when specifying dense vectors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.math.BigInteger> featureIndex;

  /**
   * Describes the type of feature values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featureType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Double> featureValueDouble;

  /**
   * Actual feature vector. Only one of the following should be populated. This list has to be kept
   * in sync with FeatureType enum. NOTES: Binary features are stored as ones or zeroes in
   * feature_value_int64. Floating point values (feature_value_float, feature_value_double) may not
   * be NaN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> featureValueFloat;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> featureValueInt64;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featureValueString;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamGenericFeatureVectorFixedPointMetadata fixedPointMetadata;

  /**
   * Describes if data has been normalized and the type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String normType;

  /**
   * copybara:strip_begin A field that contains metadata information when the datapoint is acting as
   * a query. copybara:strip_end
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamQueryMetadata queryMetadata;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamGenericFeatureVectorRestrictTokens restrictTokens;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> tokens;

  /**
   * This field allows application-specific metadata to be stored in a GFV. This information may be
   * used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are
   * not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or
   * network location. * An alternative, possibly more human-readable representation of the data
   * represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field
   * verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userinfo;

  /**
   * DEPRECATED fields. Ignored by ScaM binaries. Do not use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float weight;

  /**
   * The class label of this datapoint. This should be populated if ScaM is being used for nearest-
   * neighbor-based classification.
   * @return value or {@code null} for none
   */
  public java.lang.String getClassLabel() {
    return classLabel;
  }

  /**
   * The class label of this datapoint. This should be populated if ScaM is being used for nearest-
   * neighbor-based classification.
   * @param classLabel classLabel or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setClassLabel(java.lang.String classLabel) {
    this.classLabel = classLabel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorCrowding getCrowding() {
    return crowding;
  }

  /**
   * @param crowding crowding or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setCrowding(ResearchScamGenericFeatureVectorCrowding crowding) {
    this.crowding = crowding;
    return this;
  }

  /**
   * Optional point id that can contain an arbitrary (unrestricted in content) value except when the
   * data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be
   * set for _all_ points in all shards or the SSTable keys will be used as the values for the
   * data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly
   * or via the key--the values must be unique across all shards.
   * @see #decodeDataIdStr()
   * @return value or {@code null} for none
   */
  public java.lang.String getDataIdStr() {
    return dataIdStr;
  }

  /**
   * Optional point id that can contain an arbitrary (unrestricted in content) value except when the
   * data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be
   * set for _all_ points in all shards or the SSTable keys will be used as the values for the
   * data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly
   * or via the key--the values must be unique across all shards.
   * @see #getDataIdStr()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeDataIdStr() {
    return com.google.api.client.util.Base64.decodeBase64(dataIdStr);
  }

  /**
   * Optional point id that can contain an arbitrary (unrestricted in content) value except when the
   * data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be
   * set for _all_ points in all shards or the SSTable keys will be used as the values for the
   * data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly
   * or via the key--the values must be unique across all shards.
   * @see #encodeDataIdStr()
   * @param dataIdStr dataIdStr or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setDataIdStr(java.lang.String dataIdStr) {
    this.dataIdStr = dataIdStr;
    return this;
  }

  /**
   * Optional point id that can contain an arbitrary (unrestricted in content) value except when the
   * data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be
   * set for _all_ points in all shards or the SSTable keys will be used as the values for the
   * data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly
   * or via the key--the values must be unique across all shards.
   * @see #setDataIdStr()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ResearchScamGenericFeatureVector encodeDataIdStr(byte[] dataIdStr) {
    this.dataIdStr = com.google.api.client.util.Base64.encodeBase64URLSafeString(dataIdStr);
    return this;
  }

  /**
   * A timestamp after which this datapoint is considered no longer valid and is eligible for
   * deletion. The exact meaning varies with application/configuration.
   * @return value or {@code null} for none
   */
  public String getExpirationTimestamp() {
    return expirationTimestamp;
  }

  /**
   * A timestamp after which this datapoint is considered no longer valid and is eligible for
   * deletion. The exact meaning varies with application/configuration.
   * @param expirationTimestamp expirationTimestamp or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setExpirationTimestamp(String expirationTimestamp) {
    this.expirationTimestamp = expirationTimestamp;
    return this;
  }

  /**
   * DEPRECATED: - this field can safely be left unspecified. For dense vectors, dimensionality is
   * inferred from the number of values specified, and must be identical to this, or unspecified.
   * For sparse vectors, the default value is correct for most users, and allows use of 64-bit hash
   * values for feature indices.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getFeatureDim() {
    return featureDim;
  }

  /**
   * DEPRECATED: - this field can safely be left unspecified. For dense vectors, dimensionality is
   * inferred from the number of values specified, and must be identical to this, or unspecified.
   * For sparse vectors, the default value is correct for most users, and allows use of 64-bit hash
   * values for feature indices.
   * @param featureDim featureDim or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureDim(java.math.BigInteger featureDim) {
    this.featureDim = featureDim;
    return this;
  }

  /**
   * - for SPARSE vectors, specifies indices of the nonzero dimensions whose values are specified by
   * the , , or field. This field is not used when specifying dense vectors.
   * @return value or {@code null} for none
   */
  public java.util.List<java.math.BigInteger> getFeatureIndex() {
    return featureIndex;
  }

  /**
   * - for SPARSE vectors, specifies indices of the nonzero dimensions whose values are specified by
   * the , , or field. This field is not used when specifying dense vectors.
   * @param featureIndex featureIndex or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureIndex(java.util.List<java.math.BigInteger> featureIndex) {
    this.featureIndex = featureIndex;
    return this;
  }

  /**
   * Describes the type of feature values.
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatureType() {
    return featureType;
  }

  /**
   * Describes the type of feature values.
   * @param featureType featureType or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureType(java.lang.String featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Double> getFeatureValueDouble() {
    return featureValueDouble;
  }

  /**
   * @param featureValueDouble featureValueDouble or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureValueDouble(java.util.List<java.lang.Double> featureValueDouble) {
    this.featureValueDouble = featureValueDouble;
    return this;
  }

  /**
   * Actual feature vector. Only one of the following should be populated. This list has to be kept
   * in sync with FeatureType enum. NOTES: Binary features are stored as ones or zeroes in
   * feature_value_int64. Floating point values (feature_value_float, feature_value_double) may not
   * be NaN.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getFeatureValueFloat() {
    return featureValueFloat;
  }

  /**
   * Actual feature vector. Only one of the following should be populated. This list has to be kept
   * in sync with FeatureType enum. NOTES: Binary features are stored as ones or zeroes in
   * feature_value_int64. Floating point values (feature_value_float, feature_value_double) may not
   * be NaN.
   * @param featureValueFloat featureValueFloat or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureValueFloat(java.util.List<java.lang.Float> featureValueFloat) {
    this.featureValueFloat = featureValueFloat;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getFeatureValueInt64() {
    return featureValueInt64;
  }

  /**
   * @param featureValueInt64 featureValueInt64 or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureValueInt64(java.util.List<java.lang.Long> featureValueInt64) {
    this.featureValueInt64 = featureValueInt64;
    return this;
  }

  /**
   * @see #decodeFeatureValueString()
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatureValueString() {
    return featureValueString;
  }

  /**

   * @see #getFeatureValueString()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeFeatureValueString() {
    return com.google.api.client.util.Base64.decodeBase64(featureValueString);
  }

  /**
   * @see #encodeFeatureValueString()
   * @param featureValueString featureValueString or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFeatureValueString(java.lang.String featureValueString) {
    this.featureValueString = featureValueString;
    return this;
  }

  /**

   * @see #setFeatureValueString()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ResearchScamGenericFeatureVector encodeFeatureValueString(byte[] featureValueString) {
    this.featureValueString = com.google.api.client.util.Base64.encodeBase64URLSafeString(featureValueString);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorFixedPointMetadata getFixedPointMetadata() {
    return fixedPointMetadata;
  }

  /**
   * @param fixedPointMetadata fixedPointMetadata or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setFixedPointMetadata(ResearchScamGenericFeatureVectorFixedPointMetadata fixedPointMetadata) {
    this.fixedPointMetadata = fixedPointMetadata;
    return this;
  }

  /**
   * Describes if data has been normalized and the type.
   * @return value or {@code null} for none
   */
  public java.lang.String getNormType() {
    return normType;
  }

  /**
   * Describes if data has been normalized and the type.
   * @param normType normType or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setNormType(java.lang.String normType) {
    this.normType = normType;
    return this;
  }

  /**
   * copybara:strip_begin A field that contains metadata information when the datapoint is acting as
   * a query. copybara:strip_end
   * @return value or {@code null} for none
   */
  public ResearchScamQueryMetadata getQueryMetadata() {
    return queryMetadata;
  }

  /**
   * copybara:strip_begin A field that contains metadata information when the datapoint is acting as
   * a query. copybara:strip_end
   * @param queryMetadata queryMetadata or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setQueryMetadata(ResearchScamQueryMetadata queryMetadata) {
    this.queryMetadata = queryMetadata;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens getRestrictTokens() {
    return restrictTokens;
  }

  /**
   * @param restrictTokens restrictTokens or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setRestrictTokens(ResearchScamGenericFeatureVectorRestrictTokens restrictTokens) {
    this.restrictTokens = restrictTokens;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getTokens() {
    return tokens;
  }

  /**
   * @param tokens tokens or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setTokens(java.util.List<java.lang.Integer> tokens) {
    this.tokens = tokens;
    return this;
  }

  /**
   * This field allows application-specific metadata to be stored in a GFV. This information may be
   * used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are
   * not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or
   * network location. * An alternative, possibly more human-readable representation of the data
   * represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field
   * verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
   * @see #decodeUserinfo()
   * @return value or {@code null} for none
   */
  public java.lang.String getUserinfo() {
    return userinfo;
  }

  /**
   * This field allows application-specific metadata to be stored in a GFV. This information may be
   * used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are
   * not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or
   * network location. * An alternative, possibly more human-readable representation of the data
   * represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field
   * verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
   * @see #getUserinfo()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeUserinfo() {
    return com.google.api.client.util.Base64.decodeBase64(userinfo);
  }

  /**
   * This field allows application-specific metadata to be stored in a GFV. This information may be
   * used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are
   * not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or
   * network location. * An alternative, possibly more human-readable representation of the data
   * represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field
   * verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
   * @see #encodeUserinfo()
   * @param userinfo userinfo or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setUserinfo(java.lang.String userinfo) {
    this.userinfo = userinfo;
    return this;
  }

  /**
   * This field allows application-specific metadata to be stored in a GFV. This information may be
   * used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are
   * not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or
   * network location. * An alternative, possibly more human-readable representation of the data
   * represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field
   * verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
   * @see #setUserinfo()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ResearchScamGenericFeatureVector encodeUserinfo(byte[] userinfo) {
    this.userinfo = com.google.api.client.util.Base64.encodeBase64URLSafeString(userinfo);
    return this;
  }

  /**
   * DEPRECATED fields. Ignored by ScaM binaries. Do not use.
   * @return value or {@code null} for none
   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * DEPRECATED fields. Ignored by ScaM binaries. Do not use.
   * @param weight weight or {@code null} for none
   */
  public ResearchScamGenericFeatureVector setWeight(java.lang.Float weight) {
    this.weight = weight;
    return this;
  }

  @Override
  public ResearchScamGenericFeatureVector set(String fieldName, Object value) {
    return (ResearchScamGenericFeatureVector) super.set(fieldName, value);
  }

  @Override
  public ResearchScamGenericFeatureVector clone() {
    return (ResearchScamGenericFeatureVector) super.clone();
  }

}
