/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigquerydatatransfer.v1.model;

/**
 * Represents data source metadata. Metadata is sufficient to render UI and request proper OAuth
 * tokens.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery Data Transfer API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DataSource extends com.google.api.client.json.GenericJson {

  /**
   * Indicates the type of authorization.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorizationType;

  /**
   * Data source client id which should be used to receive refresh token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientId;

  /**
   * Specifies whether the data source supports automatic data refresh for the past few days, and
   * how it's supported. For some data sources, data might not be complete until a few days later,
   * so it's useful to refresh data automatically.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataRefreshType;

  /**
   * Data source id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataSourceId;

  /**
   * Default data refresh window on days. Only meaningful when `data_refresh_type` =
   * `SLIDING_WINDOW`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer defaultDataRefreshWindowDays;

  /**
   * Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month
   * 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String defaultSchedule;

  /**
   * User friendly data source description string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * User friendly data source name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Url for the help document for this data source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String helpUrl;

  /**
   * Disables backfilling and manual run scheduling for the data source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean manualRunsDisabled;

  /**
   * The minimum interval for scheduler to schedule runs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String minimumScheduleInterval;

  /**
   * Output only. Data source resource name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Data source parameters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DataSourceParameter> parameters;

  /**
   * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data
   * source to prepare data and ingest them into BigQuery, e.g.,
   * https://www.googleapis.com/auth/bigquery
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> scopes;

  /**
   * Specifies whether the data source supports a user defined schedule, or operates on the default
   * schedule. When set to `true`, user can override default schedule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsCustomSchedule;

  /**
   * Deprecated. This field has no effect.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean supportsMultipleTransfers;

  /**
   * Deprecated. This field has no effect.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transferType;

  /**
   * The number of seconds to wait for an update from the data source before the Data Transfer
   * Service marks the transfer as FAILED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer updateDeadlineSeconds;

  /**
   * Indicates the type of authorization.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorizationType() {
    return authorizationType;
  }

  /**
   * Indicates the type of authorization.
   * @param authorizationType authorizationType or {@code null} for none
   */
  public DataSource setAuthorizationType(java.lang.String authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * Data source client id which should be used to receive refresh token.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * Data source client id which should be used to receive refresh token.
   * @param clientId clientId or {@code null} for none
   */
  public DataSource setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Specifies whether the data source supports automatic data refresh for the past few days, and
   * how it's supported. For some data sources, data might not be complete until a few days later,
   * so it's useful to refresh data automatically.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataRefreshType() {
    return dataRefreshType;
  }

  /**
   * Specifies whether the data source supports automatic data refresh for the past few days, and
   * how it's supported. For some data sources, data might not be complete until a few days later,
   * so it's useful to refresh data automatically.
   * @param dataRefreshType dataRefreshType or {@code null} for none
   */
  public DataSource setDataRefreshType(java.lang.String dataRefreshType) {
    this.dataRefreshType = dataRefreshType;
    return this;
  }

  /**
   * Data source id.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataSourceId() {
    return dataSourceId;
  }

  /**
   * Data source id.
   * @param dataSourceId dataSourceId or {@code null} for none
   */
  public DataSource setDataSourceId(java.lang.String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Default data refresh window on days. Only meaningful when `data_refresh_type` =
   * `SLIDING_WINDOW`.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDefaultDataRefreshWindowDays() {
    return defaultDataRefreshWindowDays;
  }

  /**
   * Default data refresh window on days. Only meaningful when `data_refresh_type` =
   * `SLIDING_WINDOW`.
   * @param defaultDataRefreshWindowDays defaultDataRefreshWindowDays or {@code null} for none
   */
  public DataSource setDefaultDataRefreshWindowDays(java.lang.Integer defaultDataRefreshWindowDays) {
    this.defaultDataRefreshWindowDays = defaultDataRefreshWindowDays;
    return this;
  }

  /**
   * Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month
   * 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDefaultSchedule() {
    return defaultSchedule;
  }

  /**
   * Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month
   * 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
   * @param defaultSchedule defaultSchedule or {@code null} for none
   */
  public DataSource setDefaultSchedule(java.lang.String defaultSchedule) {
    this.defaultSchedule = defaultSchedule;
    return this;
  }

  /**
   * User friendly data source description string.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * User friendly data source description string.
   * @param description description or {@code null} for none
   */
  public DataSource setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * User friendly data source name.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * User friendly data source name.
   * @param displayName displayName or {@code null} for none
   */
  public DataSource setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Url for the help document for this data source.
   * @return value or {@code null} for none
   */
  public java.lang.String getHelpUrl() {
    return helpUrl;
  }

  /**
   * Url for the help document for this data source.
   * @param helpUrl helpUrl or {@code null} for none
   */
  public DataSource setHelpUrl(java.lang.String helpUrl) {
    this.helpUrl = helpUrl;
    return this;
  }

  /**
   * Disables backfilling and manual run scheduling for the data source.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getManualRunsDisabled() {
    return manualRunsDisabled;
  }

  /**
   * Disables backfilling and manual run scheduling for the data source.
   * @param manualRunsDisabled manualRunsDisabled or {@code null} for none
   */
  public DataSource setManualRunsDisabled(java.lang.Boolean manualRunsDisabled) {
    this.manualRunsDisabled = manualRunsDisabled;
    return this;
  }

  /**
   * The minimum interval for scheduler to schedule runs.
   * @return value or {@code null} for none
   */
  public String getMinimumScheduleInterval() {
    return minimumScheduleInterval;
  }

  /**
   * The minimum interval for scheduler to schedule runs.
   * @param minimumScheduleInterval minimumScheduleInterval or {@code null} for none
   */
  public DataSource setMinimumScheduleInterval(String minimumScheduleInterval) {
    this.minimumScheduleInterval = minimumScheduleInterval;
    return this;
  }

  /**
   * Output only. Data source resource name.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. Data source resource name.
   * @param name name or {@code null} for none
   */
  public DataSource setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Data source parameters.
   * @return value or {@code null} for none
   */
  public java.util.List<DataSourceParameter> getParameters() {
    return parameters;
  }

  /**
   * Data source parameters.
   * @param parameters parameters or {@code null} for none
   */
  public DataSource setParameters(java.util.List<DataSourceParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data
   * source to prepare data and ingest them into BigQuery, e.g.,
   * https://www.googleapis.com/auth/bigquery
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getScopes() {
    return scopes;
  }

  /**
   * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data
   * source to prepare data and ingest them into BigQuery, e.g.,
   * https://www.googleapis.com/auth/bigquery
   * @param scopes scopes or {@code null} for none
   */
  public DataSource setScopes(java.util.List<java.lang.String> scopes) {
    this.scopes = scopes;
    return this;
  }

  /**
   * Specifies whether the data source supports a user defined schedule, or operates on the default
   * schedule. When set to `true`, user can override default schedule.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsCustomSchedule() {
    return supportsCustomSchedule;
  }

  /**
   * Specifies whether the data source supports a user defined schedule, or operates on the default
   * schedule. When set to `true`, user can override default schedule.
   * @param supportsCustomSchedule supportsCustomSchedule or {@code null} for none
   */
  public DataSource setSupportsCustomSchedule(java.lang.Boolean supportsCustomSchedule) {
    this.supportsCustomSchedule = supportsCustomSchedule;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSupportsMultipleTransfers() {
    return supportsMultipleTransfers;
  }

  /**
   * Deprecated. This field has no effect.
   * @param supportsMultipleTransfers supportsMultipleTransfers or {@code null} for none
   */
  public DataSource setSupportsMultipleTransfers(java.lang.Boolean supportsMultipleTransfers) {
    this.supportsMultipleTransfers = supportsMultipleTransfers;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransferType() {
    return transferType;
  }

  /**
   * Deprecated. This field has no effect.
   * @param transferType transferType or {@code null} for none
   */
  public DataSource setTransferType(java.lang.String transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * The number of seconds to wait for an update from the data source before the Data Transfer
   * Service marks the transfer as FAILED.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUpdateDeadlineSeconds() {
    return updateDeadlineSeconds;
  }

  /**
   * The number of seconds to wait for an update from the data source before the Data Transfer
   * Service marks the transfer as FAILED.
   * @param updateDeadlineSeconds updateDeadlineSeconds or {@code null} for none
   */
  public DataSource setUpdateDeadlineSeconds(java.lang.Integer updateDeadlineSeconds) {
    this.updateDeadlineSeconds = updateDeadlineSeconds;
    return this;
  }

  @Override
  public DataSource set(String fieldName, Object value) {
    return (DataSource) super.set(fieldName, value);
  }

  @Override
  public DataSource clone() {
    return (DataSource) super.clone();
  }

}
