/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.policysimulator.v1beta.model;

/**
 * The proposed changes to OrgPolicy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Policy Simulator API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay extends com.google.api.client.json.GenericJson {

  /**
   * The OrgPolicy CustomConstraint changes to preview violations for. Any existing
   * CustomConstraints with the same name will be overridden in the simulation. That is, violations
   * will be determined as if all custom constraints in the overlay were instantiated. Only a single
   * custom_constraint is supported in the overlay at a time. For evaluating multiple constraints,
   * multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a
   * single constraint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> customConstraints;

  /**
   * The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name
   * will be overridden in the simulation. That is, violations will be determined as if all policies
   * in the overlay were created or updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> policies;

  /**
   * The OrgPolicy CustomConstraint changes to preview violations for. Any existing
   * CustomConstraints with the same name will be overridden in the simulation. That is, violations
   * will be determined as if all custom constraints in the overlay were instantiated. Only a single
   * custom_constraint is supported in the overlay at a time. For evaluating multiple constraints,
   * multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a
   * single constraint.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> getCustomConstraints() {
    return customConstraints;
  }

  /**
   * The OrgPolicy CustomConstraint changes to preview violations for. Any existing
   * CustomConstraints with the same name will be overridden in the simulation. That is, violations
   * will be determined as if all custom constraints in the overlay were instantiated. Only a single
   * custom_constraint is supported in the overlay at a time. For evaluating multiple constraints,
   * multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a
   * single constraint.
   * @param customConstraints customConstraints or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay setCustomConstraints(java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> customConstraints) {
    this.customConstraints = customConstraints;
    return this;
  }

  /**
   * The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name
   * will be overridden in the simulation. That is, violations will be determined as if all policies
   * in the overlay were created or updated.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> getPolicies() {
    return policies;
  }

  /**
   * The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name
   * will be overridden in the simulation. That is, violations will be determined as if all policies
   * in the overlay were created or updated.
   * @param policies policies or {@code null} for none
   */
  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay setPolicies(java.util.List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> policies) {
    this.policies = policies;
    return this;
  }

  @Override
  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay set(String fieldName, Object value) {
    return (GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay clone() {
    return (GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay) super.clone();
  }

}
