/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1.model;

/**
 * Details about data retention deletion violations, in which the data is non-compliant based on
 * their retention or deletion time, as defined in the applicable data security policy. The Data
 * Retention Deletion (DRD) control is a control of the DSPM (Data Security Posture Management)
 * suite that enables organizations to manage data retention and deletion policies in compliance
 * with regulations, such as GDPR and CRPA. DRD supports two primary policy types: maximum storage
 * length (max TTL) and minimum storage length (min TTL). Both are aimed at helping organizations
 * meet regulatory and data management commitments.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DataRetentionDeletionEvent extends com.google.api.client.json.GenericJson {

  /**
   * Number of objects that violated the policy for this resource. If the number is less than 1,000,
   * then the value of this field is the exact number. If the number of objects that violated the
   * policy is greater than or equal to 1,000, then the value of this field is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long dataObjectCount;

  /**
   * Timestamp indicating when the event was detected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String eventDetectionTime;

  /**
   * Type of the DRD event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventType;

  /**
   * Maximum duration of retention allowed from the DRD control. This comes from the DRD control
   * where users set a max TTL for their data. For example, suppose that a user set the max TTL for
   * a Cloud Storage bucket to 90 days. However, an object in that bucket is 100 days old. In this
   * case, a DataRetentionDeletionEvent will be generated for that Cloud Storage bucket, and the
   * max_retention_allowed is 90 days.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String maxRetentionAllowed;

  /**
   * Number of objects that violated the policy for this resource. If the number is less than 1,000,
   * then the value of this field is the exact number. If the number of objects that violated the
   * policy is greater than or equal to 1,000, then the value of this field is 1000.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDataObjectCount() {
    return dataObjectCount;
  }

  /**
   * Number of objects that violated the policy for this resource. If the number is less than 1,000,
   * then the value of this field is the exact number. If the number of objects that violated the
   * policy is greater than or equal to 1,000, then the value of this field is 1000.
   * @param dataObjectCount dataObjectCount or {@code null} for none
   */
  public DataRetentionDeletionEvent setDataObjectCount(java.lang.Long dataObjectCount) {
    this.dataObjectCount = dataObjectCount;
    return this;
  }

  /**
   * Timestamp indicating when the event was detected.
   * @return value or {@code null} for none
   */
  public String getEventDetectionTime() {
    return eventDetectionTime;
  }

  /**
   * Timestamp indicating when the event was detected.
   * @param eventDetectionTime eventDetectionTime or {@code null} for none
   */
  public DataRetentionDeletionEvent setEventDetectionTime(String eventDetectionTime) {
    this.eventDetectionTime = eventDetectionTime;
    return this;
  }

  /**
   * Type of the DRD event.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Type of the DRD event.
   * @param eventType eventType or {@code null} for none
   */
  public DataRetentionDeletionEvent setEventType(java.lang.String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Maximum duration of retention allowed from the DRD control. This comes from the DRD control
   * where users set a max TTL for their data. For example, suppose that a user set the max TTL for
   * a Cloud Storage bucket to 90 days. However, an object in that bucket is 100 days old. In this
   * case, a DataRetentionDeletionEvent will be generated for that Cloud Storage bucket, and the
   * max_retention_allowed is 90 days.
   * @return value or {@code null} for none
   */
  public String getMaxRetentionAllowed() {
    return maxRetentionAllowed;
  }

  /**
   * Maximum duration of retention allowed from the DRD control. This comes from the DRD control
   * where users set a max TTL for their data. For example, suppose that a user set the max TTL for
   * a Cloud Storage bucket to 90 days. However, an object in that bucket is 100 days old. In this
   * case, a DataRetentionDeletionEvent will be generated for that Cloud Storage bucket, and the
   * max_retention_allowed is 90 days.
   * @param maxRetentionAllowed maxRetentionAllowed or {@code null} for none
   */
  public DataRetentionDeletionEvent setMaxRetentionAllowed(String maxRetentionAllowed) {
    this.maxRetentionAllowed = maxRetentionAllowed;
    return this;
  }

  @Override
  public DataRetentionDeletionEvent set(String fieldName, Object value) {
    return (DataRetentionDeletionEvent) super.set(fieldName, value);
  }

  @Override
  public DataRetentionDeletionEvent clone() {
    return (DataRetentionDeletionEvent) super.clone();
  }

}
