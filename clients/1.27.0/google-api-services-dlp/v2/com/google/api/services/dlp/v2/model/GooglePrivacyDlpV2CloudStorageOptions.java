/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * Options defining a file or a set of files within a Google Cloud Storage bucket.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Loss Prevention (DLP) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2CloudStorageOptions extends com.google.api.client.json.GenericJson {

  /**
   * Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
   * then the rest of the bytes are omitted. Only one of bytes_limit_per_file and
   * bytes_limit_per_file_percent can be specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bytesLimitPerFile;

  /**
   * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned
   * is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be
   * specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer bytesLimitPerFilePercent;

  /**
   * The set of one or more files to scan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2FileSet fileSet;

  /**
   * List of file type groups to include in the scan. If empty, all files are scanned and available
   * data format processors are applied. In addition, the binary content of the selected files is
   * always scanned as well.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> fileTypes;

  /**
   * Limits the number of files to scan to this percentage of the input FileSet. Number of files
   * scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer filesLimitPercent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sampleMethod;

  /**
   * Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
   * then the rest of the bytes are omitted. Only one of bytes_limit_per_file and
   * bytes_limit_per_file_percent can be specified.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBytesLimitPerFile() {
    return bytesLimitPerFile;
  }

  /**
   * Max number of bytes to scan from a file. If a scanned file's size is bigger than this value
   * then the rest of the bytes are omitted. Only one of bytes_limit_per_file and
   * bytes_limit_per_file_percent can be specified.
   * @param bytesLimitPerFile bytesLimitPerFile or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setBytesLimitPerFile(java.lang.Long bytesLimitPerFile) {
    this.bytesLimitPerFile = bytesLimitPerFile;
    return this;
  }

  /**
   * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned
   * is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be
   * specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBytesLimitPerFilePercent() {
    return bytesLimitPerFilePercent;
  }

  /**
   * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned
   * is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be
   * specified.
   * @param bytesLimitPerFilePercent bytesLimitPerFilePercent or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setBytesLimitPerFilePercent(java.lang.Integer bytesLimitPerFilePercent) {
    this.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
    return this;
  }

  /**
   * The set of one or more files to scan.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2FileSet getFileSet() {
    return fileSet;
  }

  /**
   * The set of one or more files to scan.
   * @param fileSet fileSet or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setFileSet(GooglePrivacyDlpV2FileSet fileSet) {
    this.fileSet = fileSet;
    return this;
  }

  /**
   * List of file type groups to include in the scan. If empty, all files are scanned and available
   * data format processors are applied. In addition, the binary content of the selected files is
   * always scanned as well.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFileTypes() {
    return fileTypes;
  }

  /**
   * List of file type groups to include in the scan. If empty, all files are scanned and available
   * data format processors are applied. In addition, the binary content of the selected files is
   * always scanned as well.
   * @param fileTypes fileTypes or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setFileTypes(java.util.List<java.lang.String> fileTypes) {
    this.fileTypes = fileTypes;
    return this;
  }

  /**
   * Limits the number of files to scan to this percentage of the input FileSet. Number of files
   * scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFilesLimitPercent() {
    return filesLimitPercent;
  }

  /**
   * Limits the number of files to scan to this percentage of the input FileSet. Number of files
   * scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit.
   * Defaults to 0.
   * @param filesLimitPercent filesLimitPercent or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setFilesLimitPercent(java.lang.Integer filesLimitPercent) {
    this.filesLimitPercent = filesLimitPercent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSampleMethod() {
    return sampleMethod;
  }

  /**
   * @param sampleMethod sampleMethod or {@code null} for none
   */
  public GooglePrivacyDlpV2CloudStorageOptions setSampleMethod(java.lang.String sampleMethod) {
    this.sampleMethod = sampleMethod;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2CloudStorageOptions set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2CloudStorageOptions) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2CloudStorageOptions clone() {
    return (GooglePrivacyDlpV2CloudStorageOptions) super.clone();
  }

}
