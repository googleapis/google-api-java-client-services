/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * FaceParams are a collection of parameters of a single face found in an image. WARNING: This
 * message has a jspb target. If you add a new message field inside, either put its definition
 * inside this message as well or add the js file corresponding to the new message to the js_deps
 * and proto_js rules in the BUILD file; otherwise it will break lots of builds. The js file name is
 * the message name all in lowercase letters. Next available id: 40.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhotosVisionServiceFaceFaceParams extends com.google.api.client.json.GenericJson {

  /**
   * The age of the face. Range [0.0, 120.0].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float age;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float angerProbability;

  /**
   * Attributes for the detected face. Information returned or stored in this message may be
   * sensitive from a privacy, policy, or legal point of view. Clients should consult with their
   * p-counsels and the privacy working group (go/pwg) to make sure their use respects Google
   * policies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HumanSensingFaceAttribute> attribute;

  static {
    // hack to force ProGuard to consider HumanSensingFaceAttribute used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HumanSensingFaceAttribute.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float beardProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float blurredProbability;

  /**
   * Bounding box around the face. The coordinates of the bounding box are in the original image's
   * scale as returned in ImageParams. The bounding box is computed to "frame" the face as a human
   * would expect, and is typically used in UI (e.g. G+ to show circles around detected faces). It
   * is based on the landmarker results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionServiceFaceFaceParamsBoundingBox boundingBox;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float darkGlassesProbability;

  /**
   * Confidence is in the range [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float detectionConfidence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PhotosVisionServiceFaceFaceParamsExtendedLandmark> extendedLandmarks;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float eyesClosedProbability;

  /**
   * Attributes of the detected face useful for generating a cartoon version of the face.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchVisionFace2cartoonFace2CartoonResults face2cartoonResults;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionServiceFaceFaceParamsFaceCropV8 faceCropV8;

  /**
   * This other bounding box is tighter than the previous one, and encloses only the skin part of
   * the face. It is typically used to eliminate the face from any image analysis that looks up the
   * "amount of skin" visible in an image (e.g. safesearch content score). It is not based on the
   * landmarker results, just on the initial face detection, hence the 'fd' prefix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionServiceFaceFaceParamsBoundingBox fdBoundingBox;

  /**
   * Probability is in the range [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float femaleProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float frontalGazeProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float glassesProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float headwearProbability;

  /**
   * A copy of the 'image_params' field that is also returned as part of the ExtractFacesReply. It
   * contains the with and height of the image the face extraction was performed on and provides the
   * original frame of reference for the bounding boxes above.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionServiceFaceImageParams imageParams;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float joyProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PhotosVisionServiceFaceFaceParamsLandmarkPosition> landmarkPositions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float landmarkingConfidence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float leftEyeClosedProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float longHairProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float mouthOpenProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float nonHumanProbability;

  /**
   * Yaw angle. Indicates how much leftward/rightward the face is pointing relative to the vertical
   * plane perpendicular to the image. Range [-180,180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float panAngle;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionServiceFaceFaceParamsPoseMatrix poseMatrix;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pretemplate;

  /**
   * A score produced by the Face Quality Scoring Module that indicates overall quality of the face
   * and its relative suitability for using it in conjunction with face recognition for instance. As
   * such, the score predicts the likelihood to recognize a given face correctly. A face recognition
   * client could use the score and a threshold to determine whether to use the face in a face
   * model, or whether to even consider it for recognition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float qualityScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rightEyeClosedProbability;

  /**
   * Roll angle indicates how much clockwise/anti-clockwise the face is rotated relative to the
   * image vertical and about the axis perpendicular to the face. Range [-180,180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rollAngle;

  /**
   * Deprecated: signature will continue to be used for the pre-1.7 SDK template format typically
   * created by the converter module CNVprec_461. All newer templates created with CNVprec_465 or
   * later will use the repeated 'versioned_signatures' field to store the templates and version
   * info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signature;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float skinBrightnessProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float sorrowProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float surpriseProbability;

  /**
   * Pitch angle. Indicates how much upwards/downwards the face is pointing relative to the image's
   * horizontal plane. Range [-180,180].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float tiltAngle;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float underExposedProbability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PhotosVisionServiceFaceVersionedFaceSignature> versionedSignatures;

  /**
   * The age of the face. Range [0.0, 120.0].
   * @return value or {@code null} for none
   */
  public java.lang.Float getAge() {
    return age;
  }

  /**
   * The age of the face. Range [0.0, 120.0].
   * @param age age or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setAge(java.lang.Float age) {
    this.age = age;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAngerProbability() {
    return angerProbability;
  }

  /**
   * @param angerProbability angerProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setAngerProbability(java.lang.Float angerProbability) {
    this.angerProbability = angerProbability;
    return this;
  }

  /**
   * Attributes for the detected face. Information returned or stored in this message may be
   * sensitive from a privacy, policy, or legal point of view. Clients should consult with their
   * p-counsels and the privacy working group (go/pwg) to make sure their use respects Google
   * policies.
   * @return value or {@code null} for none
   */
  public java.util.List<HumanSensingFaceAttribute> getAttribute() {
    return attribute;
  }

  /**
   * Attributes for the detected face. Information returned or stored in this message may be
   * sensitive from a privacy, policy, or legal point of view. Clients should consult with their
   * p-counsels and the privacy working group (go/pwg) to make sure their use respects Google
   * policies.
   * @param attribute attribute or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setAttribute(java.util.List<HumanSensingFaceAttribute> attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBeardProbability() {
    return beardProbability;
  }

  /**
   * @param beardProbability beardProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setBeardProbability(java.lang.Float beardProbability) {
    this.beardProbability = beardProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBlurredProbability() {
    return blurredProbability;
  }

  /**
   * @param blurredProbability blurredProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setBlurredProbability(java.lang.Float blurredProbability) {
    this.blurredProbability = blurredProbability;
    return this;
  }

  /**
   * Bounding box around the face. The coordinates of the bounding box are in the original image's
   * scale as returned in ImageParams. The bounding box is computed to "frame" the face as a human
   * would expect, and is typically used in UI (e.g. G+ to show circles around detected faces). It
   * is based on the landmarker results.
   * @return value or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParamsBoundingBox getBoundingBox() {
    return boundingBox;
  }

  /**
   * Bounding box around the face. The coordinates of the bounding box are in the original image's
   * scale as returned in ImageParams. The bounding box is computed to "frame" the face as a human
   * would expect, and is typically used in UI (e.g. G+ to show circles around detected faces). It
   * is based on the landmarker results.
   * @param boundingBox boundingBox or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setBoundingBox(PhotosVisionServiceFaceFaceParamsBoundingBox boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getDarkGlassesProbability() {
    return darkGlassesProbability;
  }

  /**
   * @param darkGlassesProbability darkGlassesProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setDarkGlassesProbability(java.lang.Float darkGlassesProbability) {
    this.darkGlassesProbability = darkGlassesProbability;
    return this;
  }

  /**
   * Confidence is in the range [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getDetectionConfidence() {
    return detectionConfidence;
  }

  /**
   * Confidence is in the range [0,1].
   * @param detectionConfidence detectionConfidence or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setDetectionConfidence(java.lang.Float detectionConfidence) {
    this.detectionConfidence = detectionConfidence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<PhotosVisionServiceFaceFaceParamsExtendedLandmark> getExtendedLandmarks() {
    return extendedLandmarks;
  }

  /**
   * @param extendedLandmarks extendedLandmarks or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setExtendedLandmarks(java.util.List<PhotosVisionServiceFaceFaceParamsExtendedLandmark> extendedLandmarks) {
    this.extendedLandmarks = extendedLandmarks;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getEyesClosedProbability() {
    return eyesClosedProbability;
  }

  /**
   * @param eyesClosedProbability eyesClosedProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setEyesClosedProbability(java.lang.Float eyesClosedProbability) {
    this.eyesClosedProbability = eyesClosedProbability;
    return this;
  }

  /**
   * Attributes of the detected face useful for generating a cartoon version of the face.
   * @return value or {@code null} for none
   */
  public ResearchVisionFace2cartoonFace2CartoonResults getFace2cartoonResults() {
    return face2cartoonResults;
  }

  /**
   * Attributes of the detected face useful for generating a cartoon version of the face.
   * @param face2cartoonResults face2cartoonResults or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setFace2cartoonResults(ResearchVisionFace2cartoonFace2CartoonResults face2cartoonResults) {
    this.face2cartoonResults = face2cartoonResults;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParamsFaceCropV8 getFaceCropV8() {
    return faceCropV8;
  }

  /**
   * @param faceCropV8 faceCropV8 or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setFaceCropV8(PhotosVisionServiceFaceFaceParamsFaceCropV8 faceCropV8) {
    this.faceCropV8 = faceCropV8;
    return this;
  }

  /**
   * This other bounding box is tighter than the previous one, and encloses only the skin part of
   * the face. It is typically used to eliminate the face from any image analysis that looks up the
   * "amount of skin" visible in an image (e.g. safesearch content score). It is not based on the
   * landmarker results, just on the initial face detection, hence the 'fd' prefix.
   * @return value or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParamsBoundingBox getFdBoundingBox() {
    return fdBoundingBox;
  }

  /**
   * This other bounding box is tighter than the previous one, and encloses only the skin part of
   * the face. It is typically used to eliminate the face from any image analysis that looks up the
   * "amount of skin" visible in an image (e.g. safesearch content score). It is not based on the
   * landmarker results, just on the initial face detection, hence the 'fd' prefix.
   * @param fdBoundingBox fdBoundingBox or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setFdBoundingBox(PhotosVisionServiceFaceFaceParamsBoundingBox fdBoundingBox) {
    this.fdBoundingBox = fdBoundingBox;
    return this;
  }

  /**
   * Probability is in the range [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getFemaleProbability() {
    return femaleProbability;
  }

  /**
   * Probability is in the range [0,1].
   * @param femaleProbability femaleProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setFemaleProbability(java.lang.Float femaleProbability) {
    this.femaleProbability = femaleProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getFrontalGazeProbability() {
    return frontalGazeProbability;
  }

  /**
   * @param frontalGazeProbability frontalGazeProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setFrontalGazeProbability(java.lang.Float frontalGazeProbability) {
    this.frontalGazeProbability = frontalGazeProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getGlassesProbability() {
    return glassesProbability;
  }

  /**
   * @param glassesProbability glassesProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setGlassesProbability(java.lang.Float glassesProbability) {
    this.glassesProbability = glassesProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getHeadwearProbability() {
    return headwearProbability;
  }

  /**
   * @param headwearProbability headwearProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setHeadwearProbability(java.lang.Float headwearProbability) {
    this.headwearProbability = headwearProbability;
    return this;
  }

  /**
   * A copy of the 'image_params' field that is also returned as part of the ExtractFacesReply. It
   * contains the with and height of the image the face extraction was performed on and provides the
   * original frame of reference for the bounding boxes above.
   * @return value or {@code null} for none
   */
  public PhotosVisionServiceFaceImageParams getImageParams() {
    return imageParams;
  }

  /**
   * A copy of the 'image_params' field that is also returned as part of the ExtractFacesReply. It
   * contains the with and height of the image the face extraction was performed on and provides the
   * original frame of reference for the bounding boxes above.
   * @param imageParams imageParams or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setImageParams(PhotosVisionServiceFaceImageParams imageParams) {
    this.imageParams = imageParams;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getJoyProbability() {
    return joyProbability;
  }

  /**
   * @param joyProbability joyProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setJoyProbability(java.lang.Float joyProbability) {
    this.joyProbability = joyProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<PhotosVisionServiceFaceFaceParamsLandmarkPosition> getLandmarkPositions() {
    return landmarkPositions;
  }

  /**
   * @param landmarkPositions landmarkPositions or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setLandmarkPositions(java.util.List<PhotosVisionServiceFaceFaceParamsLandmarkPosition> landmarkPositions) {
    this.landmarkPositions = landmarkPositions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getLandmarkingConfidence() {
    return landmarkingConfidence;
  }

  /**
   * @param landmarkingConfidence landmarkingConfidence or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setLandmarkingConfidence(java.lang.Float landmarkingConfidence) {
    this.landmarkingConfidence = landmarkingConfidence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getLeftEyeClosedProbability() {
    return leftEyeClosedProbability;
  }

  /**
   * @param leftEyeClosedProbability leftEyeClosedProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setLeftEyeClosedProbability(java.lang.Float leftEyeClosedProbability) {
    this.leftEyeClosedProbability = leftEyeClosedProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getLongHairProbability() {
    return longHairProbability;
  }

  /**
   * @param longHairProbability longHairProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setLongHairProbability(java.lang.Float longHairProbability) {
    this.longHairProbability = longHairProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getMouthOpenProbability() {
    return mouthOpenProbability;
  }

  /**
   * @param mouthOpenProbability mouthOpenProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setMouthOpenProbability(java.lang.Float mouthOpenProbability) {
    this.mouthOpenProbability = mouthOpenProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getNonHumanProbability() {
    return nonHumanProbability;
  }

  /**
   * @param nonHumanProbability nonHumanProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setNonHumanProbability(java.lang.Float nonHumanProbability) {
    this.nonHumanProbability = nonHumanProbability;
    return this;
  }

  /**
   * Yaw angle. Indicates how much leftward/rightward the face is pointing relative to the vertical
   * plane perpendicular to the image. Range [-180,180].
   * @return value or {@code null} for none
   */
  public java.lang.Float getPanAngle() {
    return panAngle;
  }

  /**
   * Yaw angle. Indicates how much leftward/rightward the face is pointing relative to the vertical
   * plane perpendicular to the image. Range [-180,180].
   * @param panAngle panAngle or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setPanAngle(java.lang.Float panAngle) {
    this.panAngle = panAngle;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParamsPoseMatrix getPoseMatrix() {
    return poseMatrix;
  }

  /**
   * @param poseMatrix poseMatrix or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setPoseMatrix(PhotosVisionServiceFaceFaceParamsPoseMatrix poseMatrix) {
    this.poseMatrix = poseMatrix;
    return this;
  }

  /**
   * @see #decodePretemplate()
   * @return value or {@code null} for none
   */
  public java.lang.String getPretemplate() {
    return pretemplate;
  }

  /**

   * @see #getPretemplate()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodePretemplate() {
    return com.google.api.client.util.Base64.decodeBase64(pretemplate);
  }

  /**
   * @see #encodePretemplate()
   * @param pretemplate pretemplate or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setPretemplate(java.lang.String pretemplate) {
    this.pretemplate = pretemplate;
    return this;
  }

  /**

   * @see #setPretemplate()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PhotosVisionServiceFaceFaceParams encodePretemplate(byte[] pretemplate) {
    this.pretemplate = com.google.api.client.util.Base64.encodeBase64URLSafeString(pretemplate);
    return this;
  }

  /**
   * A score produced by the Face Quality Scoring Module that indicates overall quality of the face
   * and its relative suitability for using it in conjunction with face recognition for instance. As
   * such, the score predicts the likelihood to recognize a given face correctly. A face recognition
   * client could use the score and a threshold to determine whether to use the face in a face
   * model, or whether to even consider it for recognition.
   * @return value or {@code null} for none
   */
  public java.lang.Float getQualityScore() {
    return qualityScore;
  }

  /**
   * A score produced by the Face Quality Scoring Module that indicates overall quality of the face
   * and its relative suitability for using it in conjunction with face recognition for instance. As
   * such, the score predicts the likelihood to recognize a given face correctly. A face recognition
   * client could use the score and a threshold to determine whether to use the face in a face
   * model, or whether to even consider it for recognition.
   * @param qualityScore qualityScore or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setQualityScore(java.lang.Float qualityScore) {
    this.qualityScore = qualityScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getRightEyeClosedProbability() {
    return rightEyeClosedProbability;
  }

  /**
   * @param rightEyeClosedProbability rightEyeClosedProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setRightEyeClosedProbability(java.lang.Float rightEyeClosedProbability) {
    this.rightEyeClosedProbability = rightEyeClosedProbability;
    return this;
  }

  /**
   * Roll angle indicates how much clockwise/anti-clockwise the face is rotated relative to the
   * image vertical and about the axis perpendicular to the face. Range [-180,180].
   * @return value or {@code null} for none
   */
  public java.lang.Float getRollAngle() {
    return rollAngle;
  }

  /**
   * Roll angle indicates how much clockwise/anti-clockwise the face is rotated relative to the
   * image vertical and about the axis perpendicular to the face. Range [-180,180].
   * @param rollAngle rollAngle or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setRollAngle(java.lang.Float rollAngle) {
    this.rollAngle = rollAngle;
    return this;
  }

  /**
   * Deprecated: signature will continue to be used for the pre-1.7 SDK template format typically
   * created by the converter module CNVprec_461. All newer templates created with CNVprec_465 or
   * later will use the repeated 'versioned_signatures' field to store the templates and version
   * info.
   * @see #decodeSignature()
   * @return value or {@code null} for none
   */
  public java.lang.String getSignature() {
    return signature;
  }

  /**
   * Deprecated: signature will continue to be used for the pre-1.7 SDK template format typically
   * created by the converter module CNVprec_461. All newer templates created with CNVprec_465 or
   * later will use the repeated 'versioned_signatures' field to store the templates and version
   * info.
   * @see #getSignature()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSignature() {
    return com.google.api.client.util.Base64.decodeBase64(signature);
  }

  /**
   * Deprecated: signature will continue to be used for the pre-1.7 SDK template format typically
   * created by the converter module CNVprec_461. All newer templates created with CNVprec_465 or
   * later will use the repeated 'versioned_signatures' field to store the templates and version
   * info.
   * @see #encodeSignature()
   * @param signature signature or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setSignature(java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Deprecated: signature will continue to be used for the pre-1.7 SDK template format typically
   * created by the converter module CNVprec_461. All newer templates created with CNVprec_465 or
   * later will use the repeated 'versioned_signatures' field to store the templates and version
   * info.
   * @see #setSignature()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PhotosVisionServiceFaceFaceParams encodeSignature(byte[] signature) {
    this.signature = com.google.api.client.util.Base64.encodeBase64URLSafeString(signature);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getSkinBrightnessProbability() {
    return skinBrightnessProbability;
  }

  /**
   * @param skinBrightnessProbability skinBrightnessProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setSkinBrightnessProbability(java.lang.Float skinBrightnessProbability) {
    this.skinBrightnessProbability = skinBrightnessProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getSorrowProbability() {
    return sorrowProbability;
  }

  /**
   * @param sorrowProbability sorrowProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setSorrowProbability(java.lang.Float sorrowProbability) {
    this.sorrowProbability = sorrowProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getSurpriseProbability() {
    return surpriseProbability;
  }

  /**
   * @param surpriseProbability surpriseProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setSurpriseProbability(java.lang.Float surpriseProbability) {
    this.surpriseProbability = surpriseProbability;
    return this;
  }

  /**
   * Pitch angle. Indicates how much upwards/downwards the face is pointing relative to the image's
   * horizontal plane. Range [-180,180].
   * @return value or {@code null} for none
   */
  public java.lang.Float getTiltAngle() {
    return tiltAngle;
  }

  /**
   * Pitch angle. Indicates how much upwards/downwards the face is pointing relative to the image's
   * horizontal plane. Range [-180,180].
   * @param tiltAngle tiltAngle or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setTiltAngle(java.lang.Float tiltAngle) {
    this.tiltAngle = tiltAngle;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getUnderExposedProbability() {
    return underExposedProbability;
  }

  /**
   * @param underExposedProbability underExposedProbability or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setUnderExposedProbability(java.lang.Float underExposedProbability) {
    this.underExposedProbability = underExposedProbability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<PhotosVisionServiceFaceVersionedFaceSignature> getVersionedSignatures() {
    return versionedSignatures;
  }

  /**
   * @param versionedSignatures versionedSignatures or {@code null} for none
   */
  public PhotosVisionServiceFaceFaceParams setVersionedSignatures(java.util.List<PhotosVisionServiceFaceVersionedFaceSignature> versionedSignatures) {
    this.versionedSignatures = versionedSignatures;
    return this;
  }

  @Override
  public PhotosVisionServiceFaceFaceParams set(String fieldName, Object value) {
    return (PhotosVisionServiceFaceFaceParams) super.set(fieldName, value);
  }

  @Override
  public PhotosVisionServiceFaceFaceParams clone() {
    return (PhotosVisionServiceFaceFaceParams) super.clone();
  }

}
