/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.developerconnect.v1.model;

/**
 * The artifact config of the artifact that is deployed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Developer Connect API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ArtifactConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Set if the artifact metadata is stored in Artifact analysis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleArtifactAnalysis googleArtifactAnalysis;

  /**
   * Optional. Set if the artifact is stored in Artifact regsitry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleArtifactRegistry googleArtifactRegistry;

  /**
   * Required. Immutable. The URI of the artifact that is deployed. e.g. `us-docker.pkg.dev/my-
   * project/my-repo/image`. The URI does not include the tag / digest because it captures a lineage
   * of artifacts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Optional. Set if the artifact metadata is stored in Artifact analysis.
   * @return value or {@code null} for none
   */
  public GoogleArtifactAnalysis getGoogleArtifactAnalysis() {
    return googleArtifactAnalysis;
  }

  /**
   * Optional. Set if the artifact metadata is stored in Artifact analysis.
   * @param googleArtifactAnalysis googleArtifactAnalysis or {@code null} for none
   */
  public ArtifactConfig setGoogleArtifactAnalysis(GoogleArtifactAnalysis googleArtifactAnalysis) {
    this.googleArtifactAnalysis = googleArtifactAnalysis;
    return this;
  }

  /**
   * Optional. Set if the artifact is stored in Artifact regsitry.
   * @return value or {@code null} for none
   */
  public GoogleArtifactRegistry getGoogleArtifactRegistry() {
    return googleArtifactRegistry;
  }

  /**
   * Optional. Set if the artifact is stored in Artifact regsitry.
   * @param googleArtifactRegistry googleArtifactRegistry or {@code null} for none
   */
  public ArtifactConfig setGoogleArtifactRegistry(GoogleArtifactRegistry googleArtifactRegistry) {
    this.googleArtifactRegistry = googleArtifactRegistry;
    return this;
  }

  /**
   * Required. Immutable. The URI of the artifact that is deployed. e.g. `us-docker.pkg.dev/my-
   * project/my-repo/image`. The URI does not include the tag / digest because it captures a lineage
   * of artifacts.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Required. Immutable. The URI of the artifact that is deployed. e.g. `us-docker.pkg.dev/my-
   * project/my-repo/image`. The URI does not include the tag / digest because it captures a lineage
   * of artifacts.
   * @param uri uri or {@code null} for none
   */
  public ArtifactConfig setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public ArtifactConfig set(String fieldName, Object value) {
    return (ArtifactConfig) super.set(fieldName, value);
  }

  @Override
  public ArtifactConfig clone() {
    return (ArtifactConfig) super.clone();
  }

}
