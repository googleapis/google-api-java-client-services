/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Law have tree-like sturcture (title, section, etc), but the levels and their names are not fixed.
 * e.g., we could have: US Constitution -> Article 3 -> Section 4, OR, US Code -> Title 12 ->
 * Chapter 6 -> Sub-chapter I -> Section 602, OR, US Code -> Title 10 -> Sub-title A -> Part 2 ->
 * Chapter 32 -> Section 523. We use a repeated group to represent this structure. NOTE: Always
 * insert higher levels before lower levels,
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LegalCitationLawLevel extends com.google.api.client.json.GenericJson {

  /**
   * A counter that specifies the depth of the level in the parse
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Depth")
  private java.lang.Integer depth;

  /**
   * "SECTION, TITLE, PART, etc."
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LevelTypeNormalized")
  private java.lang.String levelTypeNormalized;

  /**
   * "Section, Sect., ยง, etc"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LevelTypeSourceText")
  private java.lang.String levelTypeSourceText;

  /**
   * deprecated
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LevelTypeString")
  private java.lang.String levelTypeString;

  /**
   * The name of the chapter/section/etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Name")
  private java.lang.String name;

  /**
   * deprecated
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Type")
  private java.lang.Integer type;

  /**
   * "3", "42(a)", etc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Value")
  private java.lang.String value;

  /**
   * A counter that specifies the depth of the level in the parse
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDepth() {
    return depth;
  }

  /**
   * A counter that specifies the depth of the level in the parse
   * @param depth depth or {@code null} for none
   */
  public LegalCitationLawLevel setDepth(java.lang.Integer depth) {
    this.depth = depth;
    return this;
  }

  /**
   * "SECTION, TITLE, PART, etc."
   * @return value or {@code null} for none
   */
  public java.lang.String getLevelTypeNormalized() {
    return levelTypeNormalized;
  }

  /**
   * "SECTION, TITLE, PART, etc."
   * @param levelTypeNormalized levelTypeNormalized or {@code null} for none
   */
  public LegalCitationLawLevel setLevelTypeNormalized(java.lang.String levelTypeNormalized) {
    this.levelTypeNormalized = levelTypeNormalized;
    return this;
  }

  /**
   * "Section, Sect., ยง, etc"
   * @return value or {@code null} for none
   */
  public java.lang.String getLevelTypeSourceText() {
    return levelTypeSourceText;
  }

  /**
   * "Section, Sect., ยง, etc"
   * @param levelTypeSourceText levelTypeSourceText or {@code null} for none
   */
  public LegalCitationLawLevel setLevelTypeSourceText(java.lang.String levelTypeSourceText) {
    this.levelTypeSourceText = levelTypeSourceText;
    return this;
  }

  /**
   * deprecated
   * @return value or {@code null} for none
   */
  public java.lang.String getLevelTypeString() {
    return levelTypeString;
  }

  /**
   * deprecated
   * @param levelTypeString levelTypeString or {@code null} for none
   */
  public LegalCitationLawLevel setLevelTypeString(java.lang.String levelTypeString) {
    this.levelTypeString = levelTypeString;
    return this;
  }

  /**
   * The name of the chapter/section/etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the chapter/section/etc.
   * @param name name or {@code null} for none
   */
  public LegalCitationLawLevel setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * deprecated
   * @return value or {@code null} for none
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * deprecated
   * @param type type or {@code null} for none
   */
  public LegalCitationLawLevel setType(java.lang.Integer type) {
    this.type = type;
    return this;
  }

  /**
   * "3", "42(a)", etc
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * "3", "42(a)", etc
   * @param value value or {@code null} for none
   */
  public LegalCitationLawLevel setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public LegalCitationLawLevel set(String fieldName, Object value) {
    return (LegalCitationLawLevel) super.set(fieldName, value);
  }

  @Override
  public LegalCitationLawLevel clone() {
    return (LegalCitationLawLevel) super.clone();
  }

}
