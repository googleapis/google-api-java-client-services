/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbilling.v1beta.model;

/**
 * Information about SKUs appearing in the cost estimate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Billing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Sku extends com.google.api.client.json.GenericJson {

  /**
   * The display name for the SKU. Example: A2 Instance Core running in Americas
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * A timeline of prices for a SKU in chronological order. Note: The API currently only supports
   * using a constant price for the entire estimation time frame so this list will contain a single
   * value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Price> prices;

  static {
    // hack to force ProGuard to consider Price used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Price.class);
  }

  /**
   * The resource name for the SKU. Example: "services/DA34-426B-A397/skus/AA95-CD31-42FE"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sku;

  /**
   * The display name for the SKU. Example: A2 Instance Core running in Americas
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name for the SKU. Example: A2 Instance Core running in Americas
   * @param displayName displayName or {@code null} for none
   */
  public Sku setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A timeline of prices for a SKU in chronological order. Note: The API currently only supports
   * using a constant price for the entire estimation time frame so this list will contain a single
   * value.
   * @return value or {@code null} for none
   */
  public java.util.List<Price> getPrices() {
    return prices;
  }

  /**
   * A timeline of prices for a SKU in chronological order. Note: The API currently only supports
   * using a constant price for the entire estimation time frame so this list will contain a single
   * value.
   * @param prices prices or {@code null} for none
   */
  public Sku setPrices(java.util.List<Price> prices) {
    this.prices = prices;
    return this;
  }

  /**
   * The resource name for the SKU. Example: "services/DA34-426B-A397/skus/AA95-CD31-42FE"
   * @return value or {@code null} for none
   */
  public java.lang.String getSku() {
    return sku;
  }

  /**
   * The resource name for the SKU. Example: "services/DA34-426B-A397/skus/AA95-CD31-42FE"
   * @param sku sku or {@code null} for none
   */
  public Sku setSku(java.lang.String sku) {
    this.sku = sku;
    return this;
  }

  @Override
  public Sku set(String fieldName, Object value) {
    return (Sku) super.set(fieldName, value);
  }

  @Override
  public Sku clone() {
    return (Sku) super.clone();
  }

}
