/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinesslodging.v1.model;

/**
 * Information about sleeping features in the living area.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Lodging API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LivingAreaSleeping extends com.google.api.client.json.GenericJson {

  /**
   * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway
   * beds, cribs or sofabeds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer bedsCount;

  /**
   * Beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bedsCountException;

  /**
   * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly
   * above another by means of a physical frame. This allows one person(s) to sleep in the bottom
   * bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer bunkBedsCount;

  /**
   * Bunk beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bunkBedsCountException;

  /**
   * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain.
   * The bed is surrounded by a high railing to prevent the child from falling or climbing out of
   * the bed
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cribsCount;

  /**
   * Cribs count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cribsCountException;

  /**
   * Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known
   * as full size bed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer doubleBedsCount;

  /**
   * Double beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String doubleBedsCountException;

  /**
   * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers
   * and down of ducks or geese.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean featherPillows;

  /**
   * Feather pillows exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featherPillowsException;

  /**
   * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that
   * are made of materials known to be resistant to allergens such as mold, dust and dander.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hypoallergenicBedding;

  /**
   * Hypoallergenic bedding exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hypoallergenicBeddingException;

  /**
   * King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often
   * meant to accompany two people. Includes California king and super king.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer kingBedsCount;

  /**
   * King beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kingBedsCountException;

  /**
   * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-
   * made foam that responds to body heat by conforming to the body closely, and then recovers its
   * shape when the pillow cools down.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean memoryFoamPillows;

  /**
   * Memory foam pillows exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String memoryFoamPillowsException;

  /**
   * Other beds count. The number of beds that are not standard mattress and boxspring setups such
   * as Japanese tatami mats, trundle beds, air mattresses and cots.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer otherBedsCount;

  /**
   * Other beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String otherBedsCountException;

  /**
   * Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer queenBedsCount;

  /**
   * Queen beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String queenBedsCountException;

  /**
   * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and
   * rolled away for easy storage that the guestroom can obtain upon request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rollAwayBedsCount;

  /**
   * Roll away beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rollAwayBedsCountException;

  /**
   * Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that
   * can accommodate one adult.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer singleOrTwinBedsCount;

  /**
   * Single or twin beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String singleOrTwinBedsCountException;

  /**
   * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by
   * lowering its hinged upholstered back to horizontal position or by pulling out a concealed
   * mattress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sofaBedsCount;

  /**
   * Sofa beds count exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sofaBedsCountException;

  /**
   * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material
   * crafted to reproduce the feel of a pillow stuffed with down and feathers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean syntheticPillows;

  /**
   * Synthetic pillows exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String syntheticPillowsException;

  /**
   * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway
   * beds, cribs or sofabeds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBedsCount() {
    return bedsCount;
  }

  /**
   * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway
   * beds, cribs or sofabeds.
   * @param bedsCount bedsCount or {@code null} for none
   */
  public LivingAreaSleeping setBedsCount(java.lang.Integer bedsCount) {
    this.bedsCount = bedsCount;
    return this;
  }

  /**
   * Beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getBedsCountException() {
    return bedsCountException;
  }

  /**
   * Beds count exception.
   * @param bedsCountException bedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setBedsCountException(java.lang.String bedsCountException) {
    this.bedsCountException = bedsCountException;
    return this;
  }

  /**
   * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly
   * above another by means of a physical frame. This allows one person(s) to sleep in the bottom
   * bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBunkBedsCount() {
    return bunkBedsCount;
  }

  /**
   * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly
   * above another by means of a physical frame. This allows one person(s) to sleep in the bottom
   * bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
   * @param bunkBedsCount bunkBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setBunkBedsCount(java.lang.Integer bunkBedsCount) {
    this.bunkBedsCount = bunkBedsCount;
    return this;
  }

  /**
   * Bunk beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getBunkBedsCountException() {
    return bunkBedsCountException;
  }

  /**
   * Bunk beds count exception.
   * @param bunkBedsCountException bunkBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setBunkBedsCountException(java.lang.String bunkBedsCountException) {
    this.bunkBedsCountException = bunkBedsCountException;
    return this;
  }

  /**
   * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain.
   * The bed is surrounded by a high railing to prevent the child from falling or climbing out of
   * the bed
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCribsCount() {
    return cribsCount;
  }

  /**
   * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain.
   * The bed is surrounded by a high railing to prevent the child from falling or climbing out of
   * the bed
   * @param cribsCount cribsCount or {@code null} for none
   */
  public LivingAreaSleeping setCribsCount(java.lang.Integer cribsCount) {
    this.cribsCount = cribsCount;
    return this;
  }

  /**
   * Cribs count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getCribsCountException() {
    return cribsCountException;
  }

  /**
   * Cribs count exception.
   * @param cribsCountException cribsCountException or {@code null} for none
   */
  public LivingAreaSleeping setCribsCountException(java.lang.String cribsCountException) {
    this.cribsCountException = cribsCountException;
    return this;
  }

  /**
   * Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known
   * as full size bed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDoubleBedsCount() {
    return doubleBedsCount;
  }

  /**
   * Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known
   * as full size bed.
   * @param doubleBedsCount doubleBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setDoubleBedsCount(java.lang.Integer doubleBedsCount) {
    this.doubleBedsCount = doubleBedsCount;
    return this;
  }

  /**
   * Double beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getDoubleBedsCountException() {
    return doubleBedsCountException;
  }

  /**
   * Double beds count exception.
   * @param doubleBedsCountException doubleBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setDoubleBedsCountException(java.lang.String doubleBedsCountException) {
    this.doubleBedsCountException = doubleBedsCountException;
    return this;
  }

  /**
   * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers
   * and down of ducks or geese.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFeatherPillows() {
    return featherPillows;
  }

  /**
   * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers
   * and down of ducks or geese.
   * @param featherPillows featherPillows or {@code null} for none
   */
  public LivingAreaSleeping setFeatherPillows(java.lang.Boolean featherPillows) {
    this.featherPillows = featherPillows;
    return this;
  }

  /**
   * Feather pillows exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatherPillowsException() {
    return featherPillowsException;
  }

  /**
   * Feather pillows exception.
   * @param featherPillowsException featherPillowsException or {@code null} for none
   */
  public LivingAreaSleeping setFeatherPillowsException(java.lang.String featherPillowsException) {
    this.featherPillowsException = featherPillowsException;
    return this;
  }

  /**
   * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that
   * are made of materials known to be resistant to allergens such as mold, dust and dander.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHypoallergenicBedding() {
    return hypoallergenicBedding;
  }

  /**
   * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that
   * are made of materials known to be resistant to allergens such as mold, dust and dander.
   * @param hypoallergenicBedding hypoallergenicBedding or {@code null} for none
   */
  public LivingAreaSleeping setHypoallergenicBedding(java.lang.Boolean hypoallergenicBedding) {
    this.hypoallergenicBedding = hypoallergenicBedding;
    return this;
  }

  /**
   * Hypoallergenic bedding exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getHypoallergenicBeddingException() {
    return hypoallergenicBeddingException;
  }

  /**
   * Hypoallergenic bedding exception.
   * @param hypoallergenicBeddingException hypoallergenicBeddingException or {@code null} for none
   */
  public LivingAreaSleeping setHypoallergenicBeddingException(java.lang.String hypoallergenicBeddingException) {
    this.hypoallergenicBeddingException = hypoallergenicBeddingException;
    return this;
  }

  /**
   * King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often
   * meant to accompany two people. Includes California king and super king.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getKingBedsCount() {
    return kingBedsCount;
  }

  /**
   * King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often
   * meant to accompany two people. Includes California king and super king.
   * @param kingBedsCount kingBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setKingBedsCount(java.lang.Integer kingBedsCount) {
    this.kingBedsCount = kingBedsCount;
    return this;
  }

  /**
   * King beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getKingBedsCountException() {
    return kingBedsCountException;
  }

  /**
   * King beds count exception.
   * @param kingBedsCountException kingBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setKingBedsCountException(java.lang.String kingBedsCountException) {
    this.kingBedsCountException = kingBedsCountException;
    return this;
  }

  /**
   * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-
   * made foam that responds to body heat by conforming to the body closely, and then recovers its
   * shape when the pillow cools down.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMemoryFoamPillows() {
    return memoryFoamPillows;
  }

  /**
   * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-
   * made foam that responds to body heat by conforming to the body closely, and then recovers its
   * shape when the pillow cools down.
   * @param memoryFoamPillows memoryFoamPillows or {@code null} for none
   */
  public LivingAreaSleeping setMemoryFoamPillows(java.lang.Boolean memoryFoamPillows) {
    this.memoryFoamPillows = memoryFoamPillows;
    return this;
  }

  /**
   * Memory foam pillows exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getMemoryFoamPillowsException() {
    return memoryFoamPillowsException;
  }

  /**
   * Memory foam pillows exception.
   * @param memoryFoamPillowsException memoryFoamPillowsException or {@code null} for none
   */
  public LivingAreaSleeping setMemoryFoamPillowsException(java.lang.String memoryFoamPillowsException) {
    this.memoryFoamPillowsException = memoryFoamPillowsException;
    return this;
  }

  /**
   * Other beds count. The number of beds that are not standard mattress and boxspring setups such
   * as Japanese tatami mats, trundle beds, air mattresses and cots.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOtherBedsCount() {
    return otherBedsCount;
  }

  /**
   * Other beds count. The number of beds that are not standard mattress and boxspring setups such
   * as Japanese tatami mats, trundle beds, air mattresses and cots.
   * @param otherBedsCount otherBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setOtherBedsCount(java.lang.Integer otherBedsCount) {
    this.otherBedsCount = otherBedsCount;
    return this;
  }

  /**
   * Other beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getOtherBedsCountException() {
    return otherBedsCountException;
  }

  /**
   * Other beds count exception.
   * @param otherBedsCountException otherBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setOtherBedsCountException(java.lang.String otherBedsCountException) {
    this.otherBedsCountException = otherBedsCountException;
    return this;
  }

  /**
   * Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getQueenBedsCount() {
    return queenBedsCount;
  }

  /**
   * Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
   * @param queenBedsCount queenBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setQueenBedsCount(java.lang.Integer queenBedsCount) {
    this.queenBedsCount = queenBedsCount;
    return this;
  }

  /**
   * Queen beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getQueenBedsCountException() {
    return queenBedsCountException;
  }

  /**
   * Queen beds count exception.
   * @param queenBedsCountException queenBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setQueenBedsCountException(java.lang.String queenBedsCountException) {
    this.queenBedsCountException = queenBedsCountException;
    return this;
  }

  /**
   * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and
   * rolled away for easy storage that the guestroom can obtain upon request.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRollAwayBedsCount() {
    return rollAwayBedsCount;
  }

  /**
   * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and
   * rolled away for easy storage that the guestroom can obtain upon request.
   * @param rollAwayBedsCount rollAwayBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setRollAwayBedsCount(java.lang.Integer rollAwayBedsCount) {
    this.rollAwayBedsCount = rollAwayBedsCount;
    return this;
  }

  /**
   * Roll away beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getRollAwayBedsCountException() {
    return rollAwayBedsCountException;
  }

  /**
   * Roll away beds count exception.
   * @param rollAwayBedsCountException rollAwayBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setRollAwayBedsCountException(java.lang.String rollAwayBedsCountException) {
    this.rollAwayBedsCountException = rollAwayBedsCountException;
    return this;
  }

  /**
   * Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that
   * can accommodate one adult.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSingleOrTwinBedsCount() {
    return singleOrTwinBedsCount;
  }

  /**
   * Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that
   * can accommodate one adult.
   * @param singleOrTwinBedsCount singleOrTwinBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setSingleOrTwinBedsCount(java.lang.Integer singleOrTwinBedsCount) {
    this.singleOrTwinBedsCount = singleOrTwinBedsCount;
    return this;
  }

  /**
   * Single or twin beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSingleOrTwinBedsCountException() {
    return singleOrTwinBedsCountException;
  }

  /**
   * Single or twin beds count exception.
   * @param singleOrTwinBedsCountException singleOrTwinBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setSingleOrTwinBedsCountException(java.lang.String singleOrTwinBedsCountException) {
    this.singleOrTwinBedsCountException = singleOrTwinBedsCountException;
    return this;
  }

  /**
   * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by
   * lowering its hinged upholstered back to horizontal position or by pulling out a concealed
   * mattress.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSofaBedsCount() {
    return sofaBedsCount;
  }

  /**
   * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by
   * lowering its hinged upholstered back to horizontal position or by pulling out a concealed
   * mattress.
   * @param sofaBedsCount sofaBedsCount or {@code null} for none
   */
  public LivingAreaSleeping setSofaBedsCount(java.lang.Integer sofaBedsCount) {
    this.sofaBedsCount = sofaBedsCount;
    return this;
  }

  /**
   * Sofa beds count exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSofaBedsCountException() {
    return sofaBedsCountException;
  }

  /**
   * Sofa beds count exception.
   * @param sofaBedsCountException sofaBedsCountException or {@code null} for none
   */
  public LivingAreaSleeping setSofaBedsCountException(java.lang.String sofaBedsCountException) {
    this.sofaBedsCountException = sofaBedsCountException;
    return this;
  }

  /**
   * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material
   * crafted to reproduce the feel of a pillow stuffed with down and feathers.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSyntheticPillows() {
    return syntheticPillows;
  }

  /**
   * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material
   * crafted to reproduce the feel of a pillow stuffed with down and feathers.
   * @param syntheticPillows syntheticPillows or {@code null} for none
   */
  public LivingAreaSleeping setSyntheticPillows(java.lang.Boolean syntheticPillows) {
    this.syntheticPillows = syntheticPillows;
    return this;
  }

  /**
   * Synthetic pillows exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSyntheticPillowsException() {
    return syntheticPillowsException;
  }

  /**
   * Synthetic pillows exception.
   * @param syntheticPillowsException syntheticPillowsException or {@code null} for none
   */
  public LivingAreaSleeping setSyntheticPillowsException(java.lang.String syntheticPillowsException) {
    this.syntheticPillowsException = syntheticPillowsException;
    return this;
  }

  @Override
  public LivingAreaSleeping set(String fieldName, Object value) {
    return (LivingAreaSleeping) super.set(fieldName, value);
  }

  @Override
  public LivingAreaSleeping clone() {
    return (LivingAreaSleeping) super.clone();
  }

}
