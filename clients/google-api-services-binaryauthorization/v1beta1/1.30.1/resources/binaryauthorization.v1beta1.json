{
  "schemas": {
    "TestIamPermissionsRequest": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      },
      "description": "Request message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsRequest"
    },
    "TestIamPermissionsResponse": {
      "type": "object",
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "AttestorPublicKey": {
      "description": "An attestor public key that will be used to verify attestations signed by this attestor.",
      "properties": {
        "pkixPublicKey": {
          "description": "A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.",
          "$ref": "PkixPublicKey"
        },
        "comment": {
          "description": "Optional. A descriptive comment. This field may be updated.",
          "type": "string"
        },
        "asciiArmoredPgpPublicKey": {
          "description": "ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AttestorPublicKey"
    },
    "SetIamPolicyRequest": {
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "IamPolicy"
        }
      },
      "id": "SetIamPolicyRequest",
      "type": "object",
      "description": "Request message for `SetIamPolicy` method."
    },
    "AdmissionRule": {
      "properties": {
        "requireAttestationsBy": {
          "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enforcementMode": {
          "enum": [
            "ENFORCEMENT_MODE_UNSPECIFIED",
            "ENFORCED_BLOCK_AND_AUDIT_LOG",
            "DRYRUN_AUDIT_LOG_ONLY"
          ],
          "enumDescriptions": [
            "Do not use.",
            "Enforce the admission rule by blocking the pod creation.",
            "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
          ],
          "description": "Required. The action when a pod creation is denied by the admission rule.",
          "type": "string"
        },
        "evaluationMode": {
          "enum": [
            "EVALUATION_MODE_UNSPECIFIED",
            "ALWAYS_ALLOW",
            "REQUIRE_ATTESTATION",
            "ALWAYS_DENY"
          ],
          "description": "Required. How this admission rule will be evaluated.",
          "enumDescriptions": [
            "Do not use.",
            "This rule allows all all pod creations.",
            "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
            "This rule denies all pod creations."
          ],
          "type": "string"
        }
      },
      "id": "AdmissionRule",
      "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission whitelist pattern are exempted from admission rules and will never block a pod creation.",
      "type": "object"
    },
    "IamPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "format": "byte",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
        }
      },
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "IamPolicy"
    },
    "AdmissionWhitelistPattern": {
      "properties": {
        "namePattern": {
          "type": "string",
          "description": "An image name pattern to whitelist, in the form `registry/path/to/image`. This supports a trailing `*` as a wildcard, but this is allowed only in text after the `registry/` part."
        }
      },
      "description": "An admission whitelist pattern exempts images from checks by admission rules.",
      "type": "object",
      "id": "AdmissionWhitelistPattern"
    },
    "UserOwnedDrydockNote": {
      "id": "UserOwnedDrydockNote",
      "properties": {
        "publicKeys": {
          "description": "Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.",
          "items": {
            "$ref": "AttestorPublicKey"
          },
          "type": "array"
        },
        "delegationServiceAccountEmail": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern."
        },
        "noteReference": {
          "type": "string",
          "description": "Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency."
        }
      },
      "type": "object",
      "description": "An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user."
    },
    "PkixPublicKey": {
      "type": "object",
      "id": "PkixPublicKey",
      "description": "A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.",
      "properties": {
        "publicKeyPem": {
          "description": "A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13",
          "type": "string"
        },
        "signatureAlgorithm": {
          "type": "string",
          "description": "The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).",
          "enum": [
            "SIGNATURE_ALGORITHM_UNSPECIFIED",
            "RSA_PSS_2048_SHA256",
            "RSA_PSS_3072_SHA256",
            "RSA_PSS_4096_SHA256",
            "RSA_PSS_4096_SHA512",
            "RSA_SIGN_PKCS1_2048_SHA256",
            "RSA_SIGN_PKCS1_3072_SHA256",
            "RSA_SIGN_PKCS1_4096_SHA256",
            "RSA_SIGN_PKCS1_4096_SHA512",
            "ECDSA_P256_SHA256",
            "EC_SIGN_P256_SHA256",
            "ECDSA_P384_SHA384",
            "EC_SIGN_P384_SHA384",
            "ECDSA_P521_SHA512",
            "EC_SIGN_P521_SHA512"
          ],
          "enumDescriptions": [
            "Not specified.",
            "RSASSA-PSS 2048 bit key with a SHA256 digest.",
            "RSASSA-PSS 3072 bit key with a SHA256 digest.",
            "RSASSA-PSS 4096 bit key with a SHA256 digest.",
            "RSASSA-PSS 4096 bit key with a SHA512 digest.",
            "RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.",
            "ECDSA on the NIST P-256 curve with a SHA256 digest.",
            "ECDSA on the NIST P-256 curve with a SHA256 digest.",
            "ECDSA on the NIST P-384 curve with a SHA384 digest.",
            "ECDSA on the NIST P-384 curve with a SHA384 digest.",
            "ECDSA on the NIST P-521 curve with a SHA512 digest.",
            "ECDSA on the NIST P-521 curve with a SHA512 digest."
          ]
        }
      }
    },
    "Expr": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        }
      },
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object"
    },
    "Binding": {
      "type": "object",
      "properties": {
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "bindingId": {
          "type": "string",
          "description": "A client-specified ID for this binding. Expected to be globally unique to support the internal bindings-by-ID API."
        },
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Binding",
      "description": "Associates `members` with a `role`."
    },
    "Policy": {
      "type": "object",
      "description": "A policy for container image binary authorization.",
      "id": "Policy",
      "properties": {
        "name": {
          "description": "Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.",
          "type": "string",
          "readOnly": true
        },
        "globalPolicyEvaluationMode": {
          "description": "Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.",
          "enum": [
            "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",
            "ENABLE",
            "DISABLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Not specified: DISABLE is assumed.",
            "Enables global policy evaluation.",
            "Disables global policy evaluation."
          ]
        },
        "description": {
          "description": "Optional. A descriptive comment.",
          "type": "string"
        },
        "admissionWhitelistPatterns": {
          "description": "Optional. Admission policy whitelisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.",
          "type": "array",
          "items": {
            "$ref": "AdmissionWhitelistPattern"
          }
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time when the policy was last updated.",
          "type": "string"
        },
        "defaultAdmissionRule": {
          "description": "Required. Default admission rule for a cluster without a per-cluster, per- kubernetes-service-account, or per-istio-service-identity admission rule.",
          "$ref": "AdmissionRule"
        },
        "clusterAdmissionRules": {
          "type": "object",
          "description": "Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.",
          "additionalProperties": {
            "$ref": "AdmissionRule"
          }
        }
      }
    },
    "Attestor": {
      "type": "object",
      "id": "Attestor",
      "description": "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated.",
      "properties": {
        "name": {
          "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Time when the attestor was last updated.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "description": {
          "type": "string",
          "description": "Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs."
        },
        "userOwnedDrydockNote": {
          "description": "A Drydock ATTESTATION_AUTHORITY Note, created by the user.",
          "$ref": "UserOwnedDrydockNote"
        }
      }
    },
    "ListAttestorsResponse": {
      "description": "Response message for BinauthzManagementService.ListAttestors.",
      "type": "object",
      "id": "ListAttestorsResponse",
      "properties": {
        "attestors": {
          "description": "The list of attestors.",
          "items": {
            "$ref": "Attestor"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListAttestorsRequest.page_token field in the subsequent call to the `ListAttestors` method to retrieve the next page of results."
        }
      }
    }
  },
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "parameters": {
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    }
  },
  "revision": "20200828",
  "resources": {
    "projects": {
      "resources": {
        "attestors": {
          "methods": {
            "list": {
              "flatPath": "v1beta1/projects/{projectsId}/attestors",
              "parameters": {
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "parent": {
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "Required. The resource name of the project associated with the attestors, in the format `projects/*`."
                },
                "pageToken": {
                  "description": "A token identifying a page of results the server should return. Typically, this is the value of ListAttestorsResponse.next_page_token returned from the previous call to the `ListAttestors` method.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "path": "v1beta1/{+parent}/attestors",
              "response": {
                "$ref": "ListAttestorsResponse"
              },
              "id": "binaryauthorization.projects.attestors.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists attestors. Returns INVALID_ARGUMENT if the project does not exist."
            },
            "setIamPolicy": {
              "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "IamPolicy"
              },
              "parameterOrder": [
                "resource"
              ],
              "id": "binaryauthorization.projects.attestors.setIamPolicy",
              "parameters": {
                "resource": {
                  "pattern": "^projects/[^/]+/attestors/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "type": "string"
                }
              },
              "path": "v1beta1/{+resource}:setIamPolicy",
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:setIamPolicy"
            },
            "create": {
              "response": {
                "$ref": "Attestor"
              },
              "id": "binaryauthorization.projects.attestors.create",
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. The parent of this attestor.",
                  "location": "path"
                },
                "attestorId": {
                  "type": "string",
                  "description": "Required. The attestors ID.",
                  "location": "query"
                }
              },
              "httpMethod": "POST",
              "flatPath": "v1beta1/projects/{projectsId}/attestors",
              "request": {
                "$ref": "Attestor"
              },
              "description": "Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.",
              "path": "v1beta1/{+parent}/attestors",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "description": "Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.",
              "httpMethod": "DELETE",
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/attestors/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the attestors to delete, in the format `projects/*/attestors/*`.",
                  "location": "path"
                }
              },
              "id": "binaryauthorization.projects.attestors.delete",
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              }
            },
            "get": {
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
              "id": "binaryauthorization.projects.attestors.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets an attestor. Returns NOT_FOUND if the attestor does not exist.",
              "response": {
                "$ref": "Attestor"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. The name of the attestor to retrieve, in the format `projects/*/attestors/*`.",
                  "required": true,
                  "pattern": "^projects/[^/]+/attestors/[^/]+$"
                }
              }
            },
            "update": {
              "id": "binaryauthorization.projects.attestors.update",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
              "description": "Updates an attestor. Returns NOT_FOUND if the attestor does not exist.",
              "response": {
                "$ref": "Attestor"
              },
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/attestors/[^/]+$",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Attestor"
              },
              "httpMethod": "PUT"
            },
            "testIamPermissions": {
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "pattern": "^projects/[^/]+/attestors/[^/]+$",
                  "location": "path",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1beta1/{+resource}:testIamPermissions",
              "id": "binaryauthorization.projects.attestors.testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:testIamPermissions"
            },
            "getIamPolicy": {
              "path": "v1beta1/{+resource}:getIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "id": "binaryauthorization.projects.attestors.getIamPolicy",
              "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:getIamPolicy",
              "httpMethod": "GET",
              "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
              "parameters": {
                "options.requestedPolicyVersion": {
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/attestors/[^/]+$",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "resource"
              ]
            }
          }
        },
        "policy": {
          "methods": {
            "testIamPermissions": {
              "flatPath": "v1beta1/projects/{projectsId}/policy:testIamPermissions",
              "parameters": {
                "resource": {
                  "required": true,
                  "pattern": "^projects/[^/]+/policy$",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
              "path": "v1beta1/{+resource}:testIamPermissions",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ],
              "id": "binaryauthorization.projects.policy.testIamPermissions"
            },
            "getIamPolicy": {
              "path": "v1beta1/{+resource}:getIamPolicy",
              "flatPath": "v1beta1/projects/{projectsId}/policy:getIamPolicy",
              "httpMethod": "GET",
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/policy$",
                  "location": "path"
                },
                "options.requestedPolicyVersion": {
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                }
              },
              "id": "binaryauthorization.projects.policy.getIamPolicy"
            },
            "setIamPolicy": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "parameters": {
                "resource": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/policy$",
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field."
                }
              },
              "path": "v1beta1/{+resource}:setIamPolicy",
              "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "IamPolicy"
              },
              "httpMethod": "POST",
              "flatPath": "v1beta1/projects/{projectsId}/policy:setIamPolicy",
              "id": "binaryauthorization.projects.policy.setIamPolicy"
            }
          }
        }
      },
      "methods": {
        "getPolicy": {
          "response": {
            "$ref": "Policy"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "description": "A policy specifies the attestors that must attest to a container image, before the project is allowed to deploy that image. There is at most one policy per project. All image admission requests are permitted if a project has no policy. Gets the policy for this project. Returns a default policy if the project does not have one.",
          "path": "v1beta1/{+name}",
          "id": "binaryauthorization.projects.getPolicy",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1beta1/projects/{projectsId}/policy",
          "parameters": {
            "name": {
              "pattern": "^projects/[^/]+/policy$",
              "description": "Required. The resource name of the policy to retrieve, in the format `projects/*/policy`.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "updatePolicy": {
          "path": "v1beta1/{+name}",
          "httpMethod": "PUT",
          "response": {
            "$ref": "Policy"
          },
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1beta1/projects/{projectsId}/policy",
          "id": "binaryauthorization.projects.updatePolicy",
          "request": {
            "$ref": "Policy"
          },
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "required": true,
              "pattern": "^projects/[^/]+/policy$",
              "description": "Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project."
            }
          },
          "description": "Creates or updates a project's policy, and returns a copy of the new policy. A policy is always updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!) requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    }
  },
  "mtlsRootUrl": "https://binaryauthorization.mtls.googleapis.com/",
  "version": "v1beta1",
  "description": "The management interface for Binary Authorization, a system providing policy control for images deployed to Kubernetes Engine clusters. ",
  "name": "binaryauthorization",
  "ownerDomain": "google.com",
  "basePath": "",
  "baseUrl": "https://binaryauthorization.googleapis.com/",
  "documentationLink": "https://cloud.google.com/binary-authorization/",
  "id": "binaryauthorization:v1beta1",
  "canonicalName": "Binary Authorization",
  "batchPath": "batch",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerName": "Google",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "title": "Binary Authorization API",
  "version_module": true,
  "servicePath": "",
  "rootUrl": "https://binaryauthorization.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1"
}
