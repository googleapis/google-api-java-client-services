/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A set of vehicle attribute conditionals (ex: weight >= 20T && num_trailers = 2) used to define a
 * slice of all possible vehicles. This can be useful for filtering one or more vehicles by a
 * predicate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreVehicleAttributeFilterProto extends com.google.api.client.json.GenericJson {

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count < 4" AND "count >= 2" means "2 <= count < 4").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreCountComparisonProto> axleCount;

  static {
    // hack to force ProGuard to consider GeostoreCountComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreCountComparisonProto.class);
  }

  /**
   * Whether the applied vehicle types have a trailer attached to them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasTrailer;

  /**
   * List of prohibited hazardous goods for a vehicle to carry. A repeated value here is treated as
   * an OR operation, meaning that they may not carry ANY of the goods listed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> hazardousGoods;

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count <= 4" AND "count > 2" means "2 < count <= 4").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreCountComparisonProto> numTrailers;

  static {
    // hack to force ProGuard to consider GeostoreCountComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreCountComparisonProto.class);
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 53ft" AND "length > 48ft" means "48ft < length <= 53ft").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreDimensionComparisonProto> trailerLength;

  static {
    // hack to force ProGuard to consider GeostoreDimensionComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreDimensionComparisonProto.class);
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "height > 3m" AND "height <= 5m" means "3m < height <= 5m").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreDimensionComparisonProto> vehicleHeight;

  static {
    // hack to force ProGuard to consider GeostoreDimensionComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreDimensionComparisonProto.class);
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 40m" AND "length > 35m" means "35m < length <= 40m").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreDimensionComparisonProto> vehicleLength;

  static {
    // hack to force ProGuard to consider GeostoreDimensionComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreDimensionComparisonProto.class);
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "weight < 8T" AND "weight >= 3T" means "3T <= weight < 8T").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreWeightComparisonProto> vehicleWeight;

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "width < 4m" AND "width >= 2m" means "2m <= width < 4m").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreDimensionComparisonProto> vehicleWidth;

  static {
    // hack to force ProGuard to consider GeostoreDimensionComparisonProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreDimensionComparisonProto.class);
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count < 4" AND "count >= 2" means "2 <= count < 4").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreCountComparisonProto> getAxleCount() {
    return axleCount;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count < 4" AND "count >= 2" means "2 <= count < 4").
   * @param axleCount axleCount or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setAxleCount(java.util.List<GeostoreCountComparisonProto> axleCount) {
    this.axleCount = axleCount;
    return this;
  }

  /**
   * Whether the applied vehicle types have a trailer attached to them.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasTrailer() {
    return hasTrailer;
  }

  /**
   * Whether the applied vehicle types have a trailer attached to them.
   * @param hasTrailer hasTrailer or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setHasTrailer(java.lang.Boolean hasTrailer) {
    this.hasTrailer = hasTrailer;
    return this;
  }

  /**
   * List of prohibited hazardous goods for a vehicle to carry. A repeated value here is treated as
   * an OR operation, meaning that they may not carry ANY of the goods listed.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getHazardousGoods() {
    return hazardousGoods;
  }

  /**
   * List of prohibited hazardous goods for a vehicle to carry. A repeated value here is treated as
   * an OR operation, meaning that they may not carry ANY of the goods listed.
   * @param hazardousGoods hazardousGoods or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setHazardousGoods(java.util.List<java.lang.String> hazardousGoods) {
    this.hazardousGoods = hazardousGoods;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count <= 4" AND "count > 2" means "2 < count <= 4").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreCountComparisonProto> getNumTrailers() {
    return numTrailers;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "count <= 4" AND "count > 2" means "2 < count <= 4").
   * @param numTrailers numTrailers or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setNumTrailers(java.util.List<GeostoreCountComparisonProto> numTrailers) {
    this.numTrailers = numTrailers;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 53ft" AND "length > 48ft" means "48ft < length <= 53ft").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreDimensionComparisonProto> getTrailerLength() {
    return trailerLength;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 53ft" AND "length > 48ft" means "48ft < length <= 53ft").
   * @param trailerLength trailerLength or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setTrailerLength(java.util.List<GeostoreDimensionComparisonProto> trailerLength) {
    this.trailerLength = trailerLength;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "height > 3m" AND "height <= 5m" means "3m < height <= 5m").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreDimensionComparisonProto> getVehicleHeight() {
    return vehicleHeight;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "height > 3m" AND "height <= 5m" means "3m < height <= 5m").
   * @param vehicleHeight vehicleHeight or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setVehicleHeight(java.util.List<GeostoreDimensionComparisonProto> vehicleHeight) {
    this.vehicleHeight = vehicleHeight;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 40m" AND "length > 35m" means "35m < length <= 40m").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreDimensionComparisonProto> getVehicleLength() {
    return vehicleLength;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "length <= 40m" AND "length > 35m" means "35m < length <= 40m").
   * @param vehicleLength vehicleLength or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setVehicleLength(java.util.List<GeostoreDimensionComparisonProto> vehicleLength) {
    this.vehicleLength = vehicleLength;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "weight < 8T" AND "weight >= 3T" means "3T <= weight < 8T").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreWeightComparisonProto> getVehicleWeight() {
    return vehicleWeight;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "weight < 8T" AND "weight >= 3T" means "3T <= weight < 8T").
   * @param vehicleWeight vehicleWeight or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setVehicleWeight(java.util.List<GeostoreWeightComparisonProto> vehicleWeight) {
    this.vehicleWeight = vehicleWeight;
    return this;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "width < 4m" AND "width >= 2m" means "2m <= width < 4m").
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreDimensionComparisonProto> getVehicleWidth() {
    return vehicleWidth;
  }

  /**
   * A repeated value here is treated as an AND operation. This allows for ranges to be represented
   * by two values (ex: "width < 4m" AND "width >= 2m" means "2m <= width < 4m").
   * @param vehicleWidth vehicleWidth or {@code null} for none
   */
  public GeostoreVehicleAttributeFilterProto setVehicleWidth(java.util.List<GeostoreDimensionComparisonProto> vehicleWidth) {
    this.vehicleWidth = vehicleWidth;
    return this;
  }

  @Override
  public GeostoreVehicleAttributeFilterProto set(String fieldName, Object value) {
    return (GeostoreVehicleAttributeFilterProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreVehicleAttributeFilterProto clone() {
    return (GeostoreVehicleAttributeFilterProto) super.clone();
  }

}
