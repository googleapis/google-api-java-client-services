/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oslogin.v1alpha.model;

/**
 * The credential information for a Google registered security key.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud OS Login API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SecurityKey extends com.google.api.client.json.GenericJson {

  /**
   * Hardware-backed private key text in SSH format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateKey;

  /**
   * Public key text in SSH format, defined by [RFC4253]("https://www.ietf.org/rfc/rfc4253.txt")
   * section 6.6.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publicKey;

  /**
   * The U2F protocol type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UniversalTwoFactor universalTwoFactor;

  /**
   * The Web Authentication protocol type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private WebAuthn webAuthn;

  /**
   * Hardware-backed private key text in SSH format.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateKey() {
    return privateKey;
  }

  /**
   * Hardware-backed private key text in SSH format.
   * @param privateKey privateKey or {@code null} for none
   */
  public SecurityKey setPrivateKey(java.lang.String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Public key text in SSH format, defined by [RFC4253]("https://www.ietf.org/rfc/rfc4253.txt")
   * section 6.6.
   * @return value or {@code null} for none
   */
  public java.lang.String getPublicKey() {
    return publicKey;
  }

  /**
   * Public key text in SSH format, defined by [RFC4253]("https://www.ietf.org/rfc/rfc4253.txt")
   * section 6.6.
   * @param publicKey publicKey or {@code null} for none
   */
  public SecurityKey setPublicKey(java.lang.String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * The U2F protocol type.
   * @return value or {@code null} for none
   */
  public UniversalTwoFactor getUniversalTwoFactor() {
    return universalTwoFactor;
  }

  /**
   * The U2F protocol type.
   * @param universalTwoFactor universalTwoFactor or {@code null} for none
   */
  public SecurityKey setUniversalTwoFactor(UniversalTwoFactor universalTwoFactor) {
    this.universalTwoFactor = universalTwoFactor;
    return this;
  }

  /**
   * The Web Authentication protocol type.
   * @return value or {@code null} for none
   */
  public WebAuthn getWebAuthn() {
    return webAuthn;
  }

  /**
   * The Web Authentication protocol type.
   * @param webAuthn webAuthn or {@code null} for none
   */
  public SecurityKey setWebAuthn(WebAuthn webAuthn) {
    this.webAuthn = webAuthn;
    return this;
  }

  @Override
  public SecurityKey set(String fieldName, Object value) {
    return (SecurityKey) super.set(fieldName, value);
  }

  @Override
  public SecurityKey clone() {
    return (SecurityKey) super.clone();
  }

}
