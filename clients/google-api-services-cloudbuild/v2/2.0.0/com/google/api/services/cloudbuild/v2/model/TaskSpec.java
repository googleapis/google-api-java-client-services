/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v2.model;

/**
 * TaskSpec contains the Spec to instantiate a TaskRun.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TaskSpec extends com.google.api.client.json.GenericJson {

  /**
   * Description of the task.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Sidecars that run alongside the Task’s step containers that should be added to this Task.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> managedSidecars;

  /**
   * List of parameters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ParamSpec> params;

  static {
    // hack to force ProGuard to consider ParamSpec used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ParamSpec.class);
  }

  /**
   * Values that this Task can output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TaskResult> results;

  static {
    // hack to force ProGuard to consider TaskResult used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(TaskResult.class);
  }

  /**
   * Sidecars that run alongside the Task's step containers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Sidecar> sidecars;

  static {
    // hack to force ProGuard to consider Sidecar used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Sidecar.class);
  }

  /**
   * Optional. StepTemplate can be used as the basis for all step containers within the Task, so
   * that the steps inherit settings on the base container.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StepTemplate stepTemplate;

  /**
   * Steps of the task.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Step> steps;

  static {
    // hack to force ProGuard to consider Step used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Step.class);
  }

  /**
   * A collection of volumes that are available to mount into steps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VolumeSource> volumes;

  /**
   * The volumes that this Task requires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<WorkspaceDeclaration> workspaces;

  /**
   * Description of the task.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the task.
   * @param description description or {@code null} for none
   */
  public TaskSpec setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Sidecars that run alongside the Task’s step containers that should be added to this Task.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getManagedSidecars() {
    return managedSidecars;
  }

  /**
   * Sidecars that run alongside the Task’s step containers that should be added to this Task.
   * @param managedSidecars managedSidecars or {@code null} for none
   */
  public TaskSpec setManagedSidecars(java.util.List<java.lang.String> managedSidecars) {
    this.managedSidecars = managedSidecars;
    return this;
  }

  /**
   * List of parameters.
   * @return value or {@code null} for none
   */
  public java.util.List<ParamSpec> getParams() {
    return params;
  }

  /**
   * List of parameters.
   * @param params params or {@code null} for none
   */
  public TaskSpec setParams(java.util.List<ParamSpec> params) {
    this.params = params;
    return this;
  }

  /**
   * Values that this Task can output.
   * @return value or {@code null} for none
   */
  public java.util.List<TaskResult> getResults() {
    return results;
  }

  /**
   * Values that this Task can output.
   * @param results results or {@code null} for none
   */
  public TaskSpec setResults(java.util.List<TaskResult> results) {
    this.results = results;
    return this;
  }

  /**
   * Sidecars that run alongside the Task's step containers.
   * @return value or {@code null} for none
   */
  public java.util.List<Sidecar> getSidecars() {
    return sidecars;
  }

  /**
   * Sidecars that run alongside the Task's step containers.
   * @param sidecars sidecars or {@code null} for none
   */
  public TaskSpec setSidecars(java.util.List<Sidecar> sidecars) {
    this.sidecars = sidecars;
    return this;
  }

  /**
   * Optional. StepTemplate can be used as the basis for all step containers within the Task, so
   * that the steps inherit settings on the base container.
   * @return value or {@code null} for none
   */
  public StepTemplate getStepTemplate() {
    return stepTemplate;
  }

  /**
   * Optional. StepTemplate can be used as the basis for all step containers within the Task, so
   * that the steps inherit settings on the base container.
   * @param stepTemplate stepTemplate or {@code null} for none
   */
  public TaskSpec setStepTemplate(StepTemplate stepTemplate) {
    this.stepTemplate = stepTemplate;
    return this;
  }

  /**
   * Steps of the task.
   * @return value or {@code null} for none
   */
  public java.util.List<Step> getSteps() {
    return steps;
  }

  /**
   * Steps of the task.
   * @param steps steps or {@code null} for none
   */
  public TaskSpec setSteps(java.util.List<Step> steps) {
    this.steps = steps;
    return this;
  }

  /**
   * A collection of volumes that are available to mount into steps.
   * @return value or {@code null} for none
   */
  public java.util.List<VolumeSource> getVolumes() {
    return volumes;
  }

  /**
   * A collection of volumes that are available to mount into steps.
   * @param volumes volumes or {@code null} for none
   */
  public TaskSpec setVolumes(java.util.List<VolumeSource> volumes) {
    this.volumes = volumes;
    return this;
  }

  /**
   * The volumes that this Task requires.
   * @return value or {@code null} for none
   */
  public java.util.List<WorkspaceDeclaration> getWorkspaces() {
    return workspaces;
  }

  /**
   * The volumes that this Task requires.
   * @param workspaces workspaces or {@code null} for none
   */
  public TaskSpec setWorkspaces(java.util.List<WorkspaceDeclaration> workspaces) {
    this.workspaces = workspaces;
    return this;
  }

  @Override
  public TaskSpec set(String fieldName, Object value) {
    return (TaskSpec) super.set(fieldName, value);
  }

  @Override
  public TaskSpec clone() {
    return (TaskSpec) super.clone();
  }

}
