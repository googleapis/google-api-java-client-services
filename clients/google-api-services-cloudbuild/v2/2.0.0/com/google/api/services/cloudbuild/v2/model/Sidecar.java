/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v2.model;

/**
 * Sidecars run alongside the Task's step containers.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Sidecar extends com.google.api.client.json.GenericJson {

  /**
   * Arguments to the entrypoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> args;

  /**
   * Entrypoint array.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> command;

  /**
   * List of environment variables to set in the container.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnvVar> env;

  static {
    // hack to force ProGuard to consider EnvVar used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EnvVar.class);
  }

  /**
   * Docker image name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String image;

  /**
   * Name of the Sidecar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The contents of an executable file to execute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String script;

  /**
   * Security options the container should be run with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SecurityContext securityContext;

  /**
   * Pod volumes to mount into the container's filesystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VolumeMount> volumeMounts;

  /**
   * Container's working directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workingDir;

  /**
   * Arguments to the entrypoint.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArgs() {
    return args;
  }

  /**
   * Arguments to the entrypoint.
   * @param args args or {@code null} for none
   */
  public Sidecar setArgs(java.util.List<java.lang.String> args) {
    this.args = args;
    return this;
  }

  /**
   * Entrypoint array.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommand() {
    return command;
  }

  /**
   * Entrypoint array.
   * @param command command or {@code null} for none
   */
  public Sidecar setCommand(java.util.List<java.lang.String> command) {
    this.command = command;
    return this;
  }

  /**
   * List of environment variables to set in the container.
   * @return value or {@code null} for none
   */
  public java.util.List<EnvVar> getEnv() {
    return env;
  }

  /**
   * List of environment variables to set in the container.
   * @param env env or {@code null} for none
   */
  public Sidecar setEnv(java.util.List<EnvVar> env) {
    this.env = env;
    return this;
  }

  /**
   * Docker image name.
   * @return value or {@code null} for none
   */
  public java.lang.String getImage() {
    return image;
  }

  /**
   * Docker image name.
   * @param image image or {@code null} for none
   */
  public Sidecar setImage(java.lang.String image) {
    this.image = image;
    return this;
  }

  /**
   * Name of the Sidecar.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the Sidecar.
   * @param name name or {@code null} for none
   */
  public Sidecar setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The contents of an executable file to execute.
   * @return value or {@code null} for none
   */
  public java.lang.String getScript() {
    return script;
  }

  /**
   * The contents of an executable file to execute.
   * @param script script or {@code null} for none
   */
  public Sidecar setScript(java.lang.String script) {
    this.script = script;
    return this;
  }

  /**
   * Security options the container should be run with.
   * @return value or {@code null} for none
   */
  public SecurityContext getSecurityContext() {
    return securityContext;
  }

  /**
   * Security options the container should be run with.
   * @param securityContext securityContext or {@code null} for none
   */
  public Sidecar setSecurityContext(SecurityContext securityContext) {
    this.securityContext = securityContext;
    return this;
  }

  /**
   * Pod volumes to mount into the container's filesystem.
   * @return value or {@code null} for none
   */
  public java.util.List<VolumeMount> getVolumeMounts() {
    return volumeMounts;
  }

  /**
   * Pod volumes to mount into the container's filesystem.
   * @param volumeMounts volumeMounts or {@code null} for none
   */
  public Sidecar setVolumeMounts(java.util.List<VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
    return this;
  }

  /**
   * Container's working directory.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkingDir() {
    return workingDir;
  }

  /**
   * Container's working directory.
   * @param workingDir workingDir or {@code null} for none
   */
  public Sidecar setWorkingDir(java.lang.String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  @Override
  public Sidecar set(String fieldName, Object value) {
    return (Sidecar) super.set(fieldName, value);
  }

  @Override
  public Sidecar clone() {
    return (Sidecar) super.clone();
  }

}
