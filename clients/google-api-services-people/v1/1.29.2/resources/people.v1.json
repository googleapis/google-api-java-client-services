{
  "ownerDomain": "google.com",
  "name": "people",
  "batchPath": "batch",
  "title": "People API",
  "ownerName": "Google",
  "resources": {
    "people": {
      "methods": {
        "get": {
          "id": "people.people.get",
          "path": "v1/{+resourceName}",
          "description": "Provides information about a person by specifying a resource name. Use\n`people/me` to indicate the authenticated user.\n\u003cbr\u003e\nThe request throws a 400 error if 'personFields' is not specified.",
          "httpMethod": "GET",
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "Person"
          },
          "parameters": {
            "resourceName": {
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path",
              "description": "The resource name of the person to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about a google account, specify\n `people/`\u003cvar\u003eaccount_id\u003c/var\u003e.\n- To get information about a contact, specify the resource name that\n  identifies the contact as returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list)."
            },
            "personFields": {
              "type": "string",
              "location": "query",
              "description": "**Required.** A field mask to restrict which fields on the person are\nreturned. Multiple fields can be specified by separating them with commas.\nValid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined",
              "format": "google-fieldmask"
            },
            "requestMask.includeField": {
              "location": "query",
              "description": "**Required.** Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
              "format": "google-fieldmask",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "flatPath": "v1/people/{peopleId}"
        },
        "deleteContact": {
          "response": {
            "$ref": "Empty"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "description": "The resource name of the contact to delete.",
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path"
            }
          },
          "flatPath": "v1/people/{peopleId}:deleteContact",
          "path": "v1/{+resourceName}:deleteContact",
          "id": "people.people.deleteContact",
          "description": "Delete a contact person. Any non-contact data will not be deleted."
        },
        "getBatchGet": {
          "description": "Provides information about a list of specific people by specifying a list\nof requested resource names. Use `people/me` to indicate the authenticated\nuser.\n\u003cbr\u003e\nThe request throws a 400 error if 'personFields' is not specified.",
          "httpMethod": "GET",
          "response": {
            "$ref": "GetPeopleResponse"
          },
          "parameterOrder": [],
          "parameters": {
            "personFields": {
              "description": "**Required.** A field mask to restrict which fields on each person are\nreturned. Multiple fields can be specified by separating them with commas.\nValid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined",
              "format": "google-fieldmask",
              "type": "string",
              "location": "query"
            },
            "requestMask.includeField": {
              "location": "query",
              "description": "**Required.** Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
              "format": "google-fieldmask",
              "type": "string"
            },
            "resourceNames": {
              "description": "The resource names of the people to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about a google account, specify\n  `people/`\u003cvar\u003eaccount_id\u003c/var\u003e.\n- To get information about a contact, specify the resource name that\n  identifies the contact as returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list).\n\nYou can include up to 50 resource names in one request.",
              "type": "string",
              "repeated": true,
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "flatPath": "v1/people:batchGet",
          "id": "people.people.getBatchGet",
          "path": "v1/people:batchGet"
        },
        "updateContactPhoto": {
          "flatPath": "v1/people/{peopleId}:updateContactPhoto",
          "path": "v1/{+resourceName}:updateContactPhoto",
          "id": "people.people.updateContactPhoto",
          "request": {
            "$ref": "UpdateContactPhotoRequest"
          },
          "description": "Update a contact's photo.",
          "response": {
            "$ref": "UpdateContactPhotoResponse"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "description": "Person resource name",
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path"
            }
          }
        },
        "deleteContactPhoto": {
          "flatPath": "v1/people/{peopleId}:deleteContactPhoto",
          "id": "people.people.deleteContactPhoto",
          "path": "v1/{+resourceName}:deleteContactPhoto",
          "description": "Delete a contact's photo.",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "DeleteContactPhotoResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "description": "The resource name of the contact whose photo will be deleted.",
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path"
            },
            "personFields": {
              "location": "query",
              "description": "**Optional.** Not specifying any fields will skip the post mutate read.\nA field mask to restrict which fields on the person are\nreturned. Multiple fields can be specified by separating them with commas.\nValid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined",
              "format": "google-fieldmask",
              "type": "string"
            }
          }
        },
        "updateContact": {
          "description": "Update contact data for an existing contact person. Any non-contact data\nwill not be modified.\n\nThe request throws a 400 error if `updatePersonFields` is not specified.\n\u003cbr\u003e\nThe request throws a 400 error if `person.metadata.sources` is not\nspecified for the contact to be updated.\n\u003cbr\u003e\nThe request throws a 412 error if `person.metadata.sources.etag` is\ndifferent than the contact's etag, which indicates the contact has changed\nsince its data was read. Clients should get the latest person and re-apply\ntheir updates to the latest person.",
          "request": {
            "$ref": "Person"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "Person"
          },
          "parameters": {
            "resourceName": {
              "description": "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/`\u003cvar\u003eperson_id\u003c/var\u003e.",
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path"
            },
            "updatePersonFields": {
              "location": "query",
              "description": "**Required.** A field mask to restrict which fields on the person are\nupdated. Multiple fields can be specified by separating them with commas.\nAll updated fields will be replaced. Valid values are:\n\n* addresses\n* biographies\n* birthdays\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* relations\n* residences\n* sipAddresses\n* urls\n* userDefined",
              "format": "google-fieldmask",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/people/{peopleId}:updateContact",
          "id": "people.people.updateContact",
          "path": "v1/{+resourceName}:updateContact"
        },
        "createContact": {
          "description": "Create a new contact and return the person resource for that contact.",
          "request": {
            "$ref": "Person"
          },
          "response": {
            "$ref": "Person"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "parameters": {
            "parent": {
              "location": "query",
              "description": "The resource name of the owning person resource.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/people:createContact",
          "path": "v1/people:createContact",
          "id": "people.people.createContact"
        }
      },
      "resources": {
        "connections": {
          "methods": {
            "list": {
              "response": {
                "$ref": "ListConnectionsResponse"
              },
              "parameterOrder": [
                "resourceName"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/contacts",
                "https://www.googleapis.com/auth/contacts.readonly"
              ],
              "parameters": {
                "personFields": {
                  "location": "query",
                  "description": "**Required.** A field mask to restrict which fields on each person are\nreturned. Multiple fields can be specified by separating them with commas.\nValid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "sortOrder": {
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "LAST_MODIFIED_ASCENDING",
                    "LAST_MODIFIED_DESCENDING",
                    "FIRST_NAME_ASCENDING",
                    "LAST_NAME_ASCENDING"
                  ],
                  "description": "The order in which the connections should be sorted. Defaults to\n`LAST_MODIFIED_ASCENDING`."
                },
                "requestSyncToken": {
                  "description": "Whether the response should include a sync token, which can be used to get\nall changes since the last request. For subsequent sync requests use the\n`sync_token` param instead. Initial sync requests that specify\n`request_sync_token` have an additional rate limit.",
                  "type": "boolean",
                  "location": "query"
                },
                "resourceName": {
                  "location": "path",
                  "description": "The resource name to return connections for. Only `people/me` is valid.",
                  "required": true,
                  "type": "string",
                  "pattern": "^people/[^/]+$"
                },
                "pageToken": {
                  "location": "query",
                  "description": "The token of the page to be returned.",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The number of connections to include in the response. Valid values are\nbetween 1 and 2000, inclusive. Defaults to 100.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "requestMask.includeField": {
                  "location": "query",
                  "description": "**Required.** Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "syncToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A sync token returned by a previous call to `people.connections.list`.\nOnly resources changed since the sync token was created will be returned.\nSync requests that specify `sync_token` have an additional rate limit."
                }
              },
              "flatPath": "v1/people/{peopleId}/connections",
              "path": "v1/{+resourceName}/connections",
              "id": "people.people.connections.list",
              "description": "Provides a list of the authenticated user's contacts merged with any\nconnected profiles.\n\u003cbr\u003e\nThe request throws a 400 error if 'personFields' is not specified."
            }
          }
        }
      }
    },
    "contactGroups": {
      "methods": {
        "batchGet": {
          "response": {
            "$ref": "BatchGetContactGroupsResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "maxMembers": {
              "location": "query",
              "description": "Specifies the maximum number of members to return for each group.",
              "format": "int32",
              "type": "integer"
            },
            "resourceNames": {
              "type": "string",
              "repeated": true,
              "location": "query",
              "description": "The resource names of the contact groups to get."
            }
          },
          "flatPath": "v1/contactGroups:batchGet",
          "path": "v1/contactGroups:batchGet",
          "id": "people.contactGroups.batchGet",
          "description": "Get a list of contact groups owned by the authenticated user by specifying\na list of contact group resource names."
        },
        "delete": {
          "description": "Delete an existing contact group owned by the authenticated user by\nspecifying a contact group resource name.",
          "response": {
            "$ref": "Empty"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "resourceName": {
              "location": "path",
              "description": "The resource name of the contact group to delete.",
              "required": true,
              "type": "string",
              "pattern": "^contactGroups/[^/]+$"
            },
            "deleteContacts": {
              "type": "boolean",
              "location": "query",
              "description": "Set to true to also delete the contacts in the specified group."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.delete"
        },
        "list": {
          "description": "List all contact groups owned by the authenticated user. Members of the\ncontact groups are not populated.",
          "response": {
            "$ref": "ListContactGroupsResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "pageToken": {
              "description": "The next_page_token value returned from a previous call to\n[ListContactGroups](/people/api/rest/v1/contactgroups/list).\nRequests the next page of resources.",
              "type": "string",
              "location": "query"
            },
            "pageSize": {
              "description": "The maximum number of resources to return.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "syncToken": {
              "location": "query",
              "description": "A sync token, returned by a previous call to `contactgroups.list`.\nOnly resources changed since the sync token was created will be returned.",
              "type": "string"
            }
          },
          "flatPath": "v1/contactGroups",
          "path": "v1/contactGroups",
          "id": "people.contactGroups.list"
        },
        "create": {
          "request": {
            "$ref": "CreateContactGroupRequest"
          },
          "description": "Create a new contact group owned by the authenticated user.",
          "response": {
            "$ref": "ContactGroup"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {},
          "flatPath": "v1/contactGroups",
          "path": "v1/contactGroups",
          "id": "people.contactGroups.create"
        },
        "get": {
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.get",
          "description": "Get a specific contact group owned by the authenticated user by specifying\na contact group resource name.",
          "response": {
            "$ref": "ContactGroup"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "maxMembers": {
              "description": "Specifies the maximum number of members to return.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "resourceName": {
              "pattern": "^contactGroups/[^/]+$",
              "location": "path",
              "description": "The resource name of the contact group to get.",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v1/contactGroups/{contactGroupsId}"
        },
        "update": {
          "parameters": {
            "resourceName": {
              "location": "path",
              "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`\u003cvar\u003econtact_group_id\u003c/var\u003e.",
              "required": true,
              "type": "string",
              "pattern": "^contactGroups/[^/]+$"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.update",
          "description": "Update the name of an existing contact group owned by the authenticated\nuser.",
          "request": {
            "$ref": "UpdateContactGroupRequest"
          },
          "response": {
            "$ref": "ContactGroup"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "PUT"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "modify": {
              "response": {
                "$ref": "ModifyContactGroupMembersResponse"
              },
              "parameterOrder": [
                "resourceName"
              ],
              "httpMethod": "POST",
              "parameters": {
                "resourceName": {
                  "required": true,
                  "type": "string",
                  "pattern": "^contactGroups/[^/]+$",
                  "location": "path",
                  "description": "The resource name of the contact group to modify."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/contacts"
              ],
              "flatPath": "v1/contactGroups/{contactGroupsId}/members:modify",
              "path": "v1/{+resourceName}/members:modify",
              "id": "people.contactGroups.members.modify",
              "description": "Modify the members of a contact group owned by the authenticated user.\n\u003cbr\u003e\nThe only system contact groups that can have members added are\n`contactGroups/myContacts` and `contactGroups/starred`. Other system\ncontact groups are deprecated and can only have contacts removed.",
              "request": {
                "$ref": "ModifyContactGroupMembersRequest"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    }
  },
  "version": "v1",
  "baseUrl": "https://people.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "Provides access to information about profiles and contacts.",
  "servicePath": "",
  "basePath": "",
  "id": "people:v1",
  "revision": "20190727",
  "documentationLink": "https://developers.google.com/people/",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {}
    },
    "UserDefined": {
      "id": "UserDefined",
      "description": "Arbitrary user data that is populated by the end users.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The end user specified key of the user defined data."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the user defined data."
        },
        "value": {
          "type": "string",
          "description": "The end user specified value of the user defined data."
        }
      }
    },
    "Biography": {
      "id": "Biography",
      "description": "A person's short biography.",
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Plain text.",
            "HTML text."
          ],
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "TEXT_PLAIN",
            "TEXT_HTML"
          ],
          "description": "The content type of the biography."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the biography."
        },
        "value": {
          "description": "The short biography.",
          "type": "string"
        }
      }
    },
    "FieldMetadata": {
      "id": "FieldMetadata",
      "description": "Metadata about a field.",
      "type": "object",
      "properties": {
        "verified": {
          "description": "True if the field is verified; false if the field is unverified. A\nverified field is typically a name, email address, phone number, or\nwebsite that has been confirmed to be owned by the person.",
          "type": "boolean"
        },
        "primary": {
          "description": "True if the field is the primary field; false if the field is a secondary\nfield.",
          "type": "boolean"
        },
        "source": {
          "description": "The source of the field.",
          "$ref": "Source"
        }
      }
    },
    "RelationshipInterest": {
      "id": "RelationshipInterest",
      "description": "A person's read-only relationship interest .",
      "type": "object",
      "properties": {
        "formattedValue": {
          "type": "string",
          "description": "The value of the relationship interest translated and formatted in the\nviewer's account locale or the locale specified in the Accept-Language\nHTTP header."
        },
        "metadata": {
          "description": "Metadata about the relationship interest.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "description": "The kind of relationship the person is looking for. The value can be custom\nor one of these predefined values:\n\n* `friend`\n* `date`\n* `relationship`\n* `networking`",
          "type": "string"
        }
      }
    },
    "Source": {
      "description": "The source of a field.",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "ACCOUNT",
            "PROFILE",
            "DOMAIN_PROFILE",
            "CONTACT"
          ],
          "description": "The source type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "[Google Account](https://accounts.google.com).",
            "[Google profile](https://profiles.google.com). You can view the\nprofile at https://profiles.google.com/\u003cvar\u003eid\u003c/var\u003e where\n\u003cvar\u003eid\u003c/var\u003e is the source id.",
            "[G Suite domain profile](https://support.google.com/a/answer/1628008).",
            "[Google contact](https://contacts.google.com). You can view the\ncontact at https://contact.google.com/\u003cvar\u003eid\u003c/var\u003e where \u003cvar\u003eid\u003c/var\u003e\nis the source id."
          ]
        },
        "etag": {
          "description": "**Only populated in `person.metadata.sources`.**\n\nThe [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nsource. Used for web cache validation.",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier within the source type generated by the server.",
          "type": "string"
        },
        "profileMetadata": {
          "$ref": "ProfileMetadata",
          "description": "**Only populated in `person.metadata.sources`.**\n\nMetadata about a source of type PROFILE."
        },
        "updateTime": {
          "type": "string",
          "description": "**Only populated in `person.metadata.sources`.**\n\nLast update timestamp of this source.",
          "format": "google-datetime"
        }
      },
      "id": "Source"
    },
    "UpdateContactPhotoRequest": {
      "description": "A request to update an existing contact's photo.\nAll requests must have a valid photo format: JPEG or PNG.",
      "type": "object",
      "properties": {
        "personFields": {
          "description": "**Optional.** Not specifying any fields will skip the post mutate read.\nA field mask to restrict which fields on the person are\nreturned. Multiple fields can be specified by separating them with commas.\nValid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* braggingRights\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* relationshipInterests\n* relationshipStatuses\n* residences\n* sipAddresses\n* skills\n* taglines\n* urls\n* userDefined",
          "format": "google-fieldmask",
          "type": "string"
        },
        "photoBytes": {
          "description": "Raw photo bytes",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "UpdateContactPhotoRequest"
    },
    "GetPeopleResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "description": "The response for each requested resource name.",
          "type": "array",
          "items": {
            "$ref": "PersonResponse"
          }
        }
      },
      "id": "GetPeopleResponse"
    },
    "PhoneNumber": {
      "description": "A person's phone number.",
      "type": "object",
      "properties": {
        "canonicalForm": {
          "description": "The read-only canonicalized [ITU-T\nE.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)\nform of the phone number.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the phone number.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the phone number. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `homeFax`\n* `workFax`\n* `otherFax`\n* `pager`\n* `workMobile`\n* `workPager`\n* `main`\n* `googleVoice`\n* `other`",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The phone number."
        },
        "formattedType": {
          "description": "The read-only type of the phone number translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      },
      "id": "PhoneNumber"
    },
    "Photo": {
      "description": "A person's read-only photo. A picture shown next to the person's name to\nhelp others recognize the person.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the photo."
        },
        "default": {
          "description": "True if the photo is a default photo;\nfalse if the photo is a user-provided photo.",
          "type": "boolean"
        },
        "url": {
          "description": "The URL of the photo. You can change the desired size by appending a query\nparameter `sz=`\u003cvar\u003esize\u003c/var\u003e at the end of the url. Example:\n`https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`",
          "type": "string"
        }
      },
      "id": "Photo"
    },
    "ListConnectionsResponse": {
      "type": "object",
      "properties": {
        "connections": {
          "description": "The list of people that the requestor is connected to.",
          "type": "array",
          "items": {
            "$ref": "Person"
          }
        },
        "nextSyncToken": {
          "description": "The token that can be used to retrieve changes since the last request.",
          "type": "string"
        },
        "totalItems": {
          "description": "The total number of items in the list without pagination.",
          "format": "int32",
          "type": "integer"
        },
        "totalPeople": {
          "description": "**DEPRECATED** (Please use totalItems)\nThe total number of people in the list without pagination.",
          "format": "int32",
          "type": "integer"
        },
        "nextPageToken": {
          "description": "The token that can be used to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "ListConnectionsResponse"
    },
    "Birthday": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the birthday."
        },
        "text": {
          "description": "A free-form string representing the user's birthday.",
          "type": "string"
        },
        "date": {
          "description": "The date of the birthday.",
          "$ref": "Date"
        }
      },
      "id": "Birthday",
      "description": "A person's birthday. At least one of the `date` and `text` fields are\nspecified. The `date` and `text` fields typically represent the same\ndate, but are not guaranteed to."
    },
    "CreateContactGroupRequest": {
      "description": "A request to create a new contact group.",
      "type": "object",
      "properties": {
        "contactGroup": {
          "description": "The contact group to create.",
          "$ref": "ContactGroup"
        }
      },
      "id": "CreateContactGroupRequest"
    },
    "UpdateContactPhotoResponse": {
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the\nUpdateContactPhotoRequest; otherwise this will be unset."
        }
      },
      "id": "UpdateContactPhotoResponse",
      "description": "The response for updating a contact's photo."
    },
    "Address": {
      "description": "A person's physical address. May be a P.O. box or street address. All fields\nare optional.",
      "type": "object",
      "properties": {
        "poBox": {
          "description": "The P.O. box of the address.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code of the address.",
          "type": "string"
        },
        "region": {
          "description": "The region of the address; for example, the state or province.",
          "type": "string"
        },
        "streetAddress": {
          "description": "The street address.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the address.",
          "$ref": "FieldMetadata"
        },
        "countryCode": {
          "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country\ncode of the address.",
          "type": "string"
        },
        "formattedType": {
          "type": "string",
          "description": "The read-only type of the address translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale."
        },
        "city": {
          "description": "The city of the address.",
          "type": "string"
        },
        "formattedValue": {
          "type": "string",
          "description": "The unstructured value of the address. If this is not set by the user it\nwill be automatically constructed from structured values."
        },
        "country": {
          "description": "The country of the address.",
          "type": "string"
        },
        "type": {
          "description": "The type of the address. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `other`",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "The extended address of the address; for example, the apartment number."
        }
      },
      "id": "Address"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      },
      "id": "Status"
    },
    "ContactGroupMembership": {
      "description": "A Google contact group membership.",
      "type": "object",
      "properties": {
        "contactGroupId": {
          "type": "string",
          "description": "The read-only contact group ID for the contact group membership."
        },
        "contactGroupResourceName": {
          "type": "string",
          "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`\u003cvar\u003econtact_group_id\u003c/var\u003e.\nOnly contact_group_resource_name can be used for modifying memberships.\nAny contact group membership can be removed, but only user group or\n\"myContacts\" or \"starred\" system groups memberships can be added. A\ncontact must always have at least one contact group membership."
        }
      },
      "id": "ContactGroupMembership"
    },
    "PersonMetadata": {
      "id": "PersonMetadata",
      "description": "The read-only metadata about a person.",
      "type": "object",
      "properties": {
        "linkedPeopleResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resource names of people linked to this resource."
        },
        "sources": {
          "description": "The sources of data for the person.",
          "type": "array",
          "items": {
            "$ref": "Source"
          }
        },
        "previousResourceNames": {
          "description": "Any former resource names this person has had. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.\n\nThe resource name may change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or\nprofile URL.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleted": {
          "description": "True if the person resource has been deleted. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.",
          "type": "boolean"
        },
        "objectType": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ],
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "description": "**DEPRECATED** (Please use\n`person.metadata.sources.profileMetadata.objectType` instead)\n\nThe type of the person object."
        }
      }
    },
    "ModifyContactGroupMembersRequest": {
      "id": "ModifyContactGroupMembersRequest",
      "description": "A request to modify an existing contact group's members. Contacts can be\nremoved from any group but they can only be added to a user group or\n\"myContacts\" or \"starred\" system groups.",
      "type": "object",
      "properties": {
        "resourceNamesToRemove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The resource names of the contact people to remove in the form of in the\nform of `people/`\u003cvar\u003eperson_id\u003c/var\u003e."
        },
        "resourceNamesToAdd": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The resource names of the contact people to add in the form of in the form\n`people/`\u003cvar\u003eperson_id\u003c/var\u003e."
        }
      }
    },
    "ContactGroupResponse": {
      "description": "The response for a specific contact group.",
      "type": "object",
      "properties": {
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "The contact group."
        },
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        },
        "requestedResourceName": {
          "description": "The original requested resource name.",
          "type": "string"
        }
      },
      "id": "ContactGroupResponse"
    },
    "Url": {
      "description": "A person's associated URLs.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the URL."
        },
        "type": {
          "type": "string",
          "description": "The type of the URL. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `blog`\n* `profile`\n* `homePage`\n* `ftp`\n* `reservations`\n* `appInstallPage`: website for a Google+ application.\n* `other`"
        },
        "value": {
          "description": "The URL.",
          "type": "string"
        },
        "formattedType": {
          "description": "The read-only type of the URL translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      },
      "id": "Url"
    },
    "ImClient": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the IM client.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The type of the IM client. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`"
        },
        "protocol": {
          "type": "string",
          "description": "The protocol of the IM client. The protocol can be custom or one of these\npredefined values:\n\n* `aim`\n* `msn`\n* `yahoo`\n* `skype`\n* `qq`\n* `googleTalk`\n* `icq`\n* `jabber`\n* `netMeeting`"
        },
        "username": {
          "description": "The user name used in the IM client.",
          "type": "string"
        },
        "formattedProtocol": {
          "type": "string",
          "description": "The read-only protocol of the IM client formatted in the viewer's account\nlocale or the `Accept-Language` HTTP header locale."
        },
        "formattedType": {
          "description": "The read-only type of the IM client translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      },
      "id": "ImClient",
      "description": "A person's instant messaging client."
    },
    "DomainMembership": {
      "type": "object",
      "properties": {
        "inViewerDomain": {
          "description": "True if the person is in the viewer's G Suite domain.",
          "type": "boolean"
        }
      },
      "id": "DomainMembership",
      "description": "A read-only G Suite Domain membership."
    },
    "BatchGetContactGroupsResponse": {
      "id": "BatchGetContactGroupsResponse",
      "description": "The response to a batch get contact groups request.",
      "type": "object",
      "properties": {
        "responses": {
          "description": "The list of responses for each requested contact group resource.",
          "type": "array",
          "items": {
            "$ref": "ContactGroupResponse"
          }
        }
      }
    },
    "Membership": {
      "id": "Membership",
      "description": "A person's membership in a group. Only contact group memberships can be\nmodified.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the membership."
        },
        "contactGroupMembership": {
          "description": "The contact group membership.",
          "$ref": "ContactGroupMembership"
        },
        "domainMembership": {
          "$ref": "DomainMembership",
          "description": "The read-only domain membership."
        }
      }
    },
    "RelationshipStatus": {
      "type": "object",
      "properties": {
        "formattedValue": {
          "description": "The read-only value of the relationship status translated and formatted in\nthe viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the relationship status."
        },
        "value": {
          "type": "string",
          "description": "The relationship status. The value can be custom or one of these\npredefined values:\n\n* `single`\n* `inARelationship`\n* `engaged`\n* `married`\n* `itsComplicated`\n* `openRelationship`\n* `widowed`\n* `inDomesticPartnership`\n* `inCivilUnion`"
        }
      },
      "id": "RelationshipStatus",
      "description": "A person's read-only relationship status."
    },
    "BraggingRights": {
      "description": "A person's bragging rights.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the bragging rights."
        },
        "value": {
          "description": "The bragging rights; for example, `climbed mount everest`.",
          "type": "string"
        }
      },
      "id": "BraggingRights"
    },
    "SipAddress": {
      "id": "SipAddress",
      "description": "A person's SIP address. Session Initial Protocol addresses are used for VoIP\ncommunications to make voice or video calls over the internet.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the SIP address."
        },
        "type": {
          "type": "string",
          "description": "The type of the SIP address. The type can be custom or or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `other`"
        },
        "value": {
          "type": "string",
          "description": "The SIP address in the\n[RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI\nformat."
        },
        "formattedType": {
          "description": "The read-only type of the SIP address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      }
    },
    "Organization": {
      "id": "Organization",
      "description": "A person's past or current organization. Overlapping date ranges are\npermitted.",
      "type": "object",
      "properties": {
        "symbol": {
          "description": "The symbol associated with the organization; for example, a stock ticker\nsymbol, abbreviation, or acronym.",
          "type": "string"
        },
        "name": {
          "description": "The name of the organization.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the organization."
        },
        "location": {
          "description": "The location of the organization office the person works at.",
          "type": "string"
        },
        "title": {
          "description": "The person's job title at the organization.",
          "type": "string"
        },
        "current": {
          "type": "boolean",
          "description": "True if the organization is the person's current organization;\nfalse if the organization is a past organization."
        },
        "formattedType": {
          "description": "The read-only type of the organization translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "startDate": {
          "$ref": "Date",
          "description": "The start date when the person joined the organization."
        },
        "domain": {
          "type": "string",
          "description": "The domain name associated with the organization; for example,\n`google.com`."
        },
        "department": {
          "description": "The person's department at the organization.",
          "type": "string"
        },
        "phoneticName": {
          "description": "The phonetic name of the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of the organization. The type can be custom or  one of these\npredefined values:\n\n* `work`\n* `school`"
        },
        "jobDescription": {
          "type": "string",
          "description": "The person's job description at the organization."
        },
        "endDate": {
          "$ref": "Date",
          "description": "The end date when the person left the organization."
        }
      }
    },
    "AgeRangeType": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the age range."
        },
        "ageRange": {
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "description": "The age range.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ]
        }
      },
      "id": "AgeRangeType",
      "description": "A person's age range."
    },
    "ListContactGroupsResponse": {
      "type": "object",
      "properties": {
        "totalItems": {
          "description": "The total number of items in the list without pagination.",
          "format": "int32",
          "type": "integer"
        },
        "nextSyncToken": {
          "description": "The token that can be used to retrieve changes since the last request.",
          "type": "string"
        },
        "contactGroups": {
          "description": "The list of contact groups. Members of the contact groups are not\npopulated.",
          "type": "array",
          "items": {
            "$ref": "ContactGroup"
          }
        },
        "nextPageToken": {
          "description": "The token that can be used to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "ListContactGroupsResponse",
      "description": "The response to a list contact groups request."
    },
    "PersonResponse": {
      "description": "The response for a single person",
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The person."
        },
        "status": {
          "$ref": "Status",
          "description": "The status of the response."
        },
        "httpStatusCode": {
          "description": "**DEPRECATED** (Please use status instead)\n\n[HTTP 1.1 status code]\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
          "format": "int32",
          "type": "integer"
        },
        "requestedResourceName": {
          "type": "string",
          "description": "The original requested resource name. May be different than the resource\nname on the returned person.\n\nThe resource name can change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or a\nprofile URL."
        }
      },
      "id": "PersonResponse"
    },
    "Relation": {
      "description": "A person's relation to another person.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the relation.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The person's relation to the other person. The type can be custom or one of\nthese predefined values:\n\n* `spouse`\n* `child`\n* `mother`\n* `father`\n* `parent`\n* `brother`\n* `sister`\n* `friend`\n* `relative`\n* `domesticPartner`\n* `manager`\n* `assistant`\n* `referredBy`\n* `partner`"
        },
        "person": {
          "description": "The name of the other person this relation refers to.",
          "type": "string"
        },
        "formattedType": {
          "description": "The type of the relation translated and formatted in the viewer's account\nlocale or the locale specified in the Accept-Language HTTP header.",
          "type": "string"
        }
      },
      "id": "Relation"
    },
    "Occupation": {
      "description": "A person's occupation.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The occupation; for example, `carpenter`.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the occupation."
        }
      },
      "id": "Occupation"
    },
    "ContactGroup": {
      "description": "A contact group.",
      "type": "object",
      "properties": {
        "resourceName": {
          "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/`\u003cvar\u003econtact_group_id\u003c/var\u003e.",
          "type": "string"
        },
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.",
          "type": "string"
        },
        "formattedName": {
          "type": "string",
          "description": "The read-only name translated and formatted in the viewer's account locale\nor the `Accept-Language` HTTP header locale for system groups names.\nGroup names set by the owner are the same as name."
        },
        "groupType": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "User defined contact group.",
            "System defined contact group."
          ],
          "enum": [
            "GROUP_TYPE_UNSPECIFIED",
            "USER_CONTACT_GROUP",
            "SYSTEM_CONTACT_GROUP"
          ],
          "description": "The read-only contact group type."
        },
        "name": {
          "type": "string",
          "description": "The contact group name set by the group owner or a system provided name\nfor system groups."
        },
        "memberResourceNames": {
          "description": "The list of contact person resource names that are members of the contact\ngroup. The field is not populated for LIST requests and can only be updated\nthrough the\n[ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Metadata about the contact group.",
          "$ref": "ContactGroupMetadata"
        },
        "memberCount": {
          "description": "The total number of contacts in the group irrespective of max members in\nspecified in the request.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "ContactGroup"
    },
    "Person": {
      "id": "Person",
      "description": "Information about a person merged from various data sources such as the\nauthenticated user's contacts and profile data.\n\nMost fields can have multiple items. The items in a field have no guaranteed\norder, but each non-empty field is guaranteed to have exactly one field with\n`metadata.primary` set to true.",
      "type": "object",
      "properties": {
        "coverPhotos": {
          "type": "array",
          "items": {
            "$ref": "CoverPhoto"
          },
          "description": "The person's read-only cover photos."
        },
        "imClients": {
          "type": "array",
          "items": {
            "$ref": "ImClient"
          },
          "description": "The person's instant messaging clients."
        },
        "birthdays": {
          "description": "The person's birthdays.",
          "type": "array",
          "items": {
            "$ref": "Birthday"
          }
        },
        "userDefined": {
          "description": "The person's user defined data.",
          "type": "array",
          "items": {
            "$ref": "UserDefined"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "$ref": "Locale"
          },
          "description": "The person's locale preferences."
        },
        "relationshipInterests": {
          "description": "The person's read-only relationship interests.",
          "type": "array",
          "items": {
            "$ref": "RelationshipInterest"
          }
        },
        "urls": {
          "description": "The person's associated URLs.",
          "type": "array",
          "items": {
            "$ref": "Url"
          }
        },
        "nicknames": {
          "description": "The person's nicknames.",
          "type": "array",
          "items": {
            "$ref": "Nickname"
          }
        },
        "relations": {
          "description": "The person's relations.",
          "type": "array",
          "items": {
            "$ref": "Relation"
          }
        },
        "names": {
          "description": "The person's names.",
          "type": "array",
          "items": {
            "$ref": "Name"
          }
        },
        "occupations": {
          "type": "array",
          "items": {
            "$ref": "Occupation"
          },
          "description": "The person's occupations."
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "$ref": "EmailAddress"
          },
          "description": "The person's email addresses."
        },
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "Organization"
          },
          "description": "The person's past or current organizations."
        },
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.",
          "type": "string"
        },
        "braggingRights": {
          "description": "The person's bragging rights.",
          "type": "array",
          "items": {
            "$ref": "BraggingRights"
          }
        },
        "metadata": {
          "description": "Read-only metadata about the person.",
          "$ref": "PersonMetadata"
        },
        "residences": {
          "description": "The person's residences.",
          "type": "array",
          "items": {
            "$ref": "Residence"
          }
        },
        "genders": {
          "description": "The person's genders.",
          "type": "array",
          "items": {
            "$ref": "Gender"
          }
        },
        "interests": {
          "type": "array",
          "items": {
            "$ref": "Interest"
          },
          "description": "The person's interests."
        },
        "resourceName": {
          "description": "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/`\u003cvar\u003eperson_id\u003c/var\u003e.",
          "type": "string"
        },
        "biographies": {
          "description": "The person's biographies.",
          "type": "array",
          "items": {
            "$ref": "Biography"
          }
        },
        "skills": {
          "description": "The person's skills.",
          "type": "array",
          "items": {
            "$ref": "Skill"
          }
        },
        "relationshipStatuses": {
          "type": "array",
          "items": {
            "$ref": "RelationshipStatus"
          },
          "description": "The person's read-only relationship statuses."
        },
        "photos": {
          "type": "array",
          "items": {
            "$ref": "Photo"
          },
          "description": "The person's read-only photos."
        },
        "ageRange": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "description": "**DEPRECATED** (Please use `person.ageRanges` instead)**\n\nThe person's read-only age range."
        },
        "taglines": {
          "description": "The person's read-only taglines.",
          "type": "array",
          "items": {
            "$ref": "Tagline"
          }
        },
        "ageRanges": {
          "type": "array",
          "items": {
            "$ref": "AgeRangeType"
          },
          "description": "The person's read-only age ranges."
        },
        "sipAddresses": {
          "type": "array",
          "items": {
            "$ref": "SipAddress"
          },
          "description": "The person's SIP addresses."
        },
        "addresses": {
          "description": "The person's street addresses.",
          "type": "array",
          "items": {
            "$ref": "Address"
          }
        },
        "events": {
          "description": "The person's events.",
          "type": "array",
          "items": {
            "$ref": "Event"
          }
        },
        "memberships": {
          "description": "The person's group memberships.",
          "type": "array",
          "items": {
            "$ref": "Membership"
          }
        },
        "phoneNumbers": {
          "description": "The person's phone numbers.",
          "type": "array",
          "items": {
            "$ref": "PhoneNumber"
          }
        }
      }
    },
    "UpdateContactGroupRequest": {
      "type": "object",
      "properties": {
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "The contact group to update."
        }
      },
      "id": "UpdateContactGroupRequest",
      "description": "A request to update an existing user contact group. All updated fields will\nbe replaced."
    },
    "ContactGroupMetadata": {
      "description": "The read-only metadata about a contact group.",
      "type": "object",
      "properties": {
        "deleted": {
          "description": "True if the contact group resource has been deleted. Populated only for\n[`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests\nthat include a sync token.",
          "type": "boolean"
        },
        "updateTime": {
          "description": "The time the group was last updated.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "ContactGroupMetadata"
    },
    "Residence": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the residence."
        },
        "current": {
          "description": "True if the residence is the person's current residence;\nfalse if the residence is a past residence.",
          "type": "boolean"
        },
        "value": {
          "description": "The address of the residence.",
          "type": "string"
        }
      },
      "id": "Residence",
      "description": "A person's past or current residence."
    },
    "Event": {
      "id": "Event",
      "description": "An event related to the person.",
      "type": "object",
      "properties": {
        "formattedType": {
          "type": "string",
          "description": "The read-only type of the event translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "metadata": {
          "description": "Metadata about the event.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the event. The type can be custom or one of these predefined\nvalues:\n\n* `anniversary`\n* `other`",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date of the event."
        }
      }
    },
    "DeleteContactPhotoResponse": {
      "description": "The response for deleteing a contact's photo.",
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the\nDeleteContactPhotoRequest; otherwise this will be unset."
        }
      },
      "id": "DeleteContactPhotoResponse"
    },
    "ModifyContactGroupMembersResponse": {
      "id": "ModifyContactGroupMembersResponse",
      "description": "The response to a modify contact group members request.",
      "type": "object",
      "properties": {
        "notFoundResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The contact people resource names that were not found."
        },
        "canNotRemoveLastContactGroupResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The contact people resource names that cannot be removed from their\nlast contact group."
        }
      }
    },
    "ProfileMetadata": {
      "id": "ProfileMetadata",
      "description": "The read-only metadata about a profile.",
      "type": "object",
      "properties": {
        "objectType": {
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "description": "The profile object type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ]
        },
        "userTypes": {
          "description": "The user types.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "USER_TYPE_UNKNOWN",
              "GOOGLE_USER",
              "GPLUS_USER",
              "GOOGLE_APPS_USER"
            ]
          },
          "enumDescriptions": [
            "The user type is not known.",
            "The user is a Google user.",
            "The user is a Google+ user.",
            "The user is a G Suite user."
          ]
        }
      }
    },
    "Gender": {
      "description": "A person's gender.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the gender."
        },
        "value": {
          "description": "The gender for the person. The gender can be custom or one of these\npredefined values:\n\n* `male`\n* `female`\n* `other`\n* `unknown`",
          "type": "string"
        },
        "formattedValue": {
          "type": "string",
          "description": "The read-only value of the gender translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale."
        }
      },
      "id": "Gender"
    },
    "CoverPhoto": {
      "description": "A person's read-only cover photo. A large image shown on the person's\nprofile page that represents who they are or what they care about.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the cover photo."
        },
        "default": {
          "description": "True if the cover photo is the default cover photo;\nfalse if the cover photo is a user-provided cover photo.",
          "type": "boolean"
        },
        "url": {
          "description": "The URL of the cover photo.",
          "type": "string"
        }
      },
      "id": "CoverPhoto"
    },
    "Interest": {
      "id": "Interest",
      "description": "One of the person's interests.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The interest; for example, `stargazing`.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the interest."
        }
      }
    },
    "EmailAddress": {
      "description": "A person's email address.",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the email."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the email address."
        },
        "type": {
          "type": "string",
          "description": "The type of the email address. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`"
        },
        "value": {
          "type": "string",
          "description": "The email address."
        },
        "formattedType": {
          "description": "The read-only type of the email address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      },
      "id": "EmailAddress"
    },
    "Nickname": {
      "description": "A person's nickname.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the nickname."
        },
        "type": {
          "enum": [
            "DEFAULT",
            "MAIDEN_NAME",
            "INITIALS",
            "GPLUS",
            "OTHER_NAME"
          ],
          "description": "The type of the nickname.",
          "type": "string",
          "enumDescriptions": [
            "Generic nickname.",
            "Maiden name or birth family name. Used when the person's family name has\nchanged as a result of marriage.",
            "Initials.",
            "Google+ profile nickname.",
            "A professional affiliation or other name; for example, `Dr. Smith.`"
          ]
        },
        "value": {
          "type": "string",
          "description": "The nickname."
        }
      },
      "id": "Nickname"
    },
    "Skill": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the skill."
        },
        "value": {
          "type": "string",
          "description": "The skill; for example, `underwater basket weaving`."
        }
      },
      "id": "Skill",
      "description": "A skill that the person has."
    },
    "Date": {
      "type": "object",
      "properties": {
        "year": {
          "type": "integer",
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
          "format": "int32"
        },
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Date",
      "description": "Represents a whole calendar date, for example a date of birth. The time\nof day and time zone are either specified elsewhere or are not\nsignificant. The date is relative to the\n[Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar).\nThe day may be 0 to represent a year and month where the day is not\nsignificant. The year may be 0 to represent a month and day independent\nof year; for example, anniversary date."
    },
    "Tagline": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the tagline."
        },
        "value": {
          "type": "string",
          "description": "The tagline."
        }
      },
      "id": "Tagline",
      "description": "A read-only brief one-line description of the person."
    },
    "Name": {
      "type": "object",
      "properties": {
        "displayNameLastFirst": {
          "description": "The read-only display name with the last name first formatted according to\nthe locale specified by the viewer's account or the\n`Accept-Language` HTTP header.",
          "type": "string"
        },
        "displayName": {
          "description": "The read-only display name formatted according to the locale specified by\nthe viewer's account or the `Accept-Language` HTTP header.",
          "type": "string"
        },
        "honorificSuffix": {
          "description": "The honorific suffixes, such as `Jr.`",
          "type": "string"
        },
        "honorificPrefix": {
          "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
          "type": "string"
        },
        "phoneticHonorificSuffix": {
          "type": "string",
          "description": "The honorific suffixes spelled as they sound."
        },
        "middleName": {
          "description": "The middle name(s).",
          "type": "string"
        },
        "givenName": {
          "description": "The given name.",
          "type": "string"
        },
        "phoneticHonorificPrefix": {
          "type": "string",
          "description": "The honorific prefixes spelled as they sound."
        },
        "phoneticGivenName": {
          "description": "The given name spelled as it sounds.",
          "type": "string"
        },
        "phoneticFamilyName": {
          "description": "The family name spelled as it sounds.",
          "type": "string"
        },
        "familyName": {
          "description": "The family name.",
          "type": "string"
        },
        "phoneticMiddleName": {
          "type": "string",
          "description": "The middle name(s) spelled as they sound."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the name."
        },
        "phoneticFullName": {
          "description": "The full name spelled as it sounds.",
          "type": "string"
        }
      },
      "id": "Name",
      "description": "A person's name. If the name is a mononym, the family name is empty."
    },
    "Locale": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the locale."
        },
        "value": {
          "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)\nlanguage tag representing the locale.",
          "type": "string"
        }
      },
      "id": "Locale",
      "description": "A person's locale preference."
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "protocol": "rest",
  "canonicalName": "People Service",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/contacts": {
          "description": "See, edit, download, and permanently delete your contacts"
        },
        "https://www.googleapis.com/auth/user.addresses.read": {
          "description": "View your street addresses"
        },
        "https://www.googleapis.com/auth/user.emails.read": {
          "description": "View your email addresses"
        },
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        },
        "https://www.googleapis.com/auth/user.phonenumbers.read": {
          "description": "View your phone numbers"
        },
        "https://www.googleapis.com/auth/user.birthday.read": {
          "description": "View your complete date of birth"
        },
        "https://www.googleapis.com/auth/contacts.readonly": {
          "description": "See and download your contacts"
        },
        "https://www.googleapis.com/auth/userinfo.profile": {
          "description": "See your personal info, including any personal info you've made publicly available"
        }
      }
    }
  },
  "rootUrl": "https://people.googleapis.com/"
}
