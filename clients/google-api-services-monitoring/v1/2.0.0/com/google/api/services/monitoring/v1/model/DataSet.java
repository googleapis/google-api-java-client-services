/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v1.model;

/**
 * Groups a time series query definition with charting options.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DataSet extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The collection of breakdowns to be applied to the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Breakdown> breakdowns;

  static {
    // hack to force ProGuard to consider Breakdown used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Breakdown.class);
  }

  /**
   * Optional. A collection of dimension columns.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Dimension> dimensions;

  /**
   * A template string for naming TimeSeries in the resulting data set. This should be a string with
   * interpolations of the form ${label_name}, which will resolve to the label's value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String legendTemplate;

  /**
   * Optional. A collection of measures.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Measure> measures;

  /**
   * Optional. The lower bound on data point frequency for this data set, implemented by specifying
   * the minimum alignment period to use in a time series query For example, if the data is
   * published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It
   * would not make sense to fetch and align data at one minute intervals.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String minAlignmentPeriod;

  /**
   * How this data should be plotted on the chart.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String plotType;

  /**
   * Optional. A collection of sort options, affects the order of the data and legend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ColumnSortingOptions> sort;

  static {
    // hack to force ProGuard to consider ColumnSortingOptions used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ColumnSortingOptions.class);
  }

  /**
   * Optional. The target axis to use for plotting the metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetAxis;

  /**
   * Required. Fields for querying time series data from the Stackdriver metrics API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeSeriesQuery timeSeriesQuery;

  /**
   * Optional. The collection of breakdowns to be applied to the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<Breakdown> getBreakdowns() {
    return breakdowns;
  }

  /**
   * Optional. The collection of breakdowns to be applied to the dataset.
   * @param breakdowns breakdowns or {@code null} for none
   */
  public DataSet setBreakdowns(java.util.List<Breakdown> breakdowns) {
    this.breakdowns = breakdowns;
    return this;
  }

  /**
   * Optional. A collection of dimension columns.
   * @return value or {@code null} for none
   */
  public java.util.List<Dimension> getDimensions() {
    return dimensions;
  }

  /**
   * Optional. A collection of dimension columns.
   * @param dimensions dimensions or {@code null} for none
   */
  public DataSet setDimensions(java.util.List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * A template string for naming TimeSeries in the resulting data set. This should be a string with
   * interpolations of the form ${label_name}, which will resolve to the label's value.
   * @return value or {@code null} for none
   */
  public java.lang.String getLegendTemplate() {
    return legendTemplate;
  }

  /**
   * A template string for naming TimeSeries in the resulting data set. This should be a string with
   * interpolations of the form ${label_name}, which will resolve to the label's value.
   * @param legendTemplate legendTemplate or {@code null} for none
   */
  public DataSet setLegendTemplate(java.lang.String legendTemplate) {
    this.legendTemplate = legendTemplate;
    return this;
  }

  /**
   * Optional. A collection of measures.
   * @return value or {@code null} for none
   */
  public java.util.List<Measure> getMeasures() {
    return measures;
  }

  /**
   * Optional. A collection of measures.
   * @param measures measures or {@code null} for none
   */
  public DataSet setMeasures(java.util.List<Measure> measures) {
    this.measures = measures;
    return this;
  }

  /**
   * Optional. The lower bound on data point frequency for this data set, implemented by specifying
   * the minimum alignment period to use in a time series query For example, if the data is
   * published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It
   * would not make sense to fetch and align data at one minute intervals.
   * @return value or {@code null} for none
   */
  public String getMinAlignmentPeriod() {
    return minAlignmentPeriod;
  }

  /**
   * Optional. The lower bound on data point frequency for this data set, implemented by specifying
   * the minimum alignment period to use in a time series query For example, if the data is
   * published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It
   * would not make sense to fetch and align data at one minute intervals.
   * @param minAlignmentPeriod minAlignmentPeriod or {@code null} for none
   */
  public DataSet setMinAlignmentPeriod(String minAlignmentPeriod) {
    this.minAlignmentPeriod = minAlignmentPeriod;
    return this;
  }

  /**
   * How this data should be plotted on the chart.
   * @return value or {@code null} for none
   */
  public java.lang.String getPlotType() {
    return plotType;
  }

  /**
   * How this data should be plotted on the chart.
   * @param plotType plotType or {@code null} for none
   */
  public DataSet setPlotType(java.lang.String plotType) {
    this.plotType = plotType;
    return this;
  }

  /**
   * Optional. A collection of sort options, affects the order of the data and legend.
   * @return value or {@code null} for none
   */
  public java.util.List<ColumnSortingOptions> getSort() {
    return sort;
  }

  /**
   * Optional. A collection of sort options, affects the order of the data and legend.
   * @param sort sort or {@code null} for none
   */
  public DataSet setSort(java.util.List<ColumnSortingOptions> sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Optional. The target axis to use for plotting the metric.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetAxis() {
    return targetAxis;
  }

  /**
   * Optional. The target axis to use for plotting the metric.
   * @param targetAxis targetAxis or {@code null} for none
   */
  public DataSet setTargetAxis(java.lang.String targetAxis) {
    this.targetAxis = targetAxis;
    return this;
  }

  /**
   * Required. Fields for querying time series data from the Stackdriver metrics API.
   * @return value or {@code null} for none
   */
  public TimeSeriesQuery getTimeSeriesQuery() {
    return timeSeriesQuery;
  }

  /**
   * Required. Fields for querying time series data from the Stackdriver metrics API.
   * @param timeSeriesQuery timeSeriesQuery or {@code null} for none
   */
  public DataSet setTimeSeriesQuery(TimeSeriesQuery timeSeriesQuery) {
    this.timeSeriesQuery = timeSeriesQuery;
    return this;
  }

  @Override
  public DataSet set(String fieldName, Object value) {
    return (DataSet) super.set(fieldName, value);
  }

  @Override
  public DataSet clone() {
    return (DataSet) super.clone();
  }

}
