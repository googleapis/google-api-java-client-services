/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkconnectivity.v1.model;

/**
 * Summarizes information about the spokes associated with a hub. The summary includes a count of
 * spokes according to type and according to state. If any spokes are inactive, the summary also
 * lists the reasons they are inactive, including a count for each reason.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Connectivity API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SpokeSummary extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Counts the number of spokes that are in each state and associated with a given
   * hub.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SpokeStateCount> spokeStateCounts;

  static {
    // hack to force ProGuard to consider SpokeStateCount used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(SpokeStateCount.class);
  }

  /**
   * Output only. Counts the number of spokes that are inactive for each possible reason and
   * associated with a given hub.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SpokeStateReasonCount> spokeStateReasonCounts;

  static {
    // hack to force ProGuard to consider SpokeStateReasonCount used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(SpokeStateReasonCount.class);
  }

  /**
   * Output only. Counts the number of spokes of each type that are associated with a specific hub.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SpokeTypeCount> spokeTypeCounts;

  /**
   * Output only. Counts the number of spokes that are in each state and associated with a given
   * hub.
   * @return value or {@code null} for none
   */
  public java.util.List<SpokeStateCount> getSpokeStateCounts() {
    return spokeStateCounts;
  }

  /**
   * Output only. Counts the number of spokes that are in each state and associated with a given
   * hub.
   * @param spokeStateCounts spokeStateCounts or {@code null} for none
   */
  public SpokeSummary setSpokeStateCounts(java.util.List<SpokeStateCount> spokeStateCounts) {
    this.spokeStateCounts = spokeStateCounts;
    return this;
  }

  /**
   * Output only. Counts the number of spokes that are inactive for each possible reason and
   * associated with a given hub.
   * @return value or {@code null} for none
   */
  public java.util.List<SpokeStateReasonCount> getSpokeStateReasonCounts() {
    return spokeStateReasonCounts;
  }

  /**
   * Output only. Counts the number of spokes that are inactive for each possible reason and
   * associated with a given hub.
   * @param spokeStateReasonCounts spokeStateReasonCounts or {@code null} for none
   */
  public SpokeSummary setSpokeStateReasonCounts(java.util.List<SpokeStateReasonCount> spokeStateReasonCounts) {
    this.spokeStateReasonCounts = spokeStateReasonCounts;
    return this;
  }

  /**
   * Output only. Counts the number of spokes of each type that are associated with a specific hub.
   * @return value or {@code null} for none
   */
  public java.util.List<SpokeTypeCount> getSpokeTypeCounts() {
    return spokeTypeCounts;
  }

  /**
   * Output only. Counts the number of spokes of each type that are associated with a specific hub.
   * @param spokeTypeCounts spokeTypeCounts or {@code null} for none
   */
  public SpokeSummary setSpokeTypeCounts(java.util.List<SpokeTypeCount> spokeTypeCounts) {
    this.spokeTypeCounts = spokeTypeCounts;
    return this;
  }

  @Override
  public SpokeSummary set(String fieldName, Object value) {
    return (SpokeSummary) super.set(fieldName, value);
  }

  @Override
  public SpokeSummary clone() {
    return (SpokeSummary) super.clone();
  }

}
