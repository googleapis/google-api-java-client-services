/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Information about a streaming session in conference.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StreamingSessionInfo extends com.google.api.client.json.GenericJson {

  /**
   * The application type of the current streaming session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String applicationType;

  /**
   * The latest streaming session event. This can be used by clients to help explain what is going
   * on, why recording stopped, etc. This will always be set to a valid event and consistent with
   * the status. It can be set when current session is inactive to indicate latest event that makes
   * current session to become inactive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SessionEvent latestSessionEvent;

  /**
   * The display name of the owner of the recording output. It's only set when there will be
   * uploaded recordings. Currently, it's only set when application type is RECORDING or
   * GLIVE_STREAM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ownerDisplayName;

  /**
   * This is the REST name and unique identifier of this streaming session and has the form
   * `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sessionId;

  /**
   * The current status of this streaming session. This can be used by clients to show session
   * status indicator and/or notification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * When true, this recording may be used for training new transcription models.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean trainingEnabled;

  /**
   * The policy that controls who can view the broadcast. This setting applies for broadcast
   * session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String viewerAccessPolicy;

  /**
   * Contains information about viewers of the livestream. It is only set when application type is
   * BROADCAST.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StreamViewerStats viewerStats;

  /**
   * The application type of the current streaming session.
   * @return value or {@code null} for none
   */
  public java.lang.String getApplicationType() {
    return applicationType;
  }

  /**
   * The application type of the current streaming session.
   * @param applicationType applicationType or {@code null} for none
   */
  public StreamingSessionInfo setApplicationType(java.lang.String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * The latest streaming session event. This can be used by clients to help explain what is going
   * on, why recording stopped, etc. This will always be set to a valid event and consistent with
   * the status. It can be set when current session is inactive to indicate latest event that makes
   * current session to become inactive.
   * @return value or {@code null} for none
   */
  public SessionEvent getLatestSessionEvent() {
    return latestSessionEvent;
  }

  /**
   * The latest streaming session event. This can be used by clients to help explain what is going
   * on, why recording stopped, etc. This will always be set to a valid event and consistent with
   * the status. It can be set when current session is inactive to indicate latest event that makes
   * current session to become inactive.
   * @param latestSessionEvent latestSessionEvent or {@code null} for none
   */
  public StreamingSessionInfo setLatestSessionEvent(SessionEvent latestSessionEvent) {
    this.latestSessionEvent = latestSessionEvent;
    return this;
  }

  /**
   * The display name of the owner of the recording output. It's only set when there will be
   * uploaded recordings. Currently, it's only set when application type is RECORDING or
   * GLIVE_STREAM.
   * @return value or {@code null} for none
   */
  public java.lang.String getOwnerDisplayName() {
    return ownerDisplayName;
  }

  /**
   * The display name of the owner of the recording output. It's only set when there will be
   * uploaded recordings. Currently, it's only set when application type is RECORDING or
   * GLIVE_STREAM.
   * @param ownerDisplayName ownerDisplayName or {@code null} for none
   */
  public StreamingSessionInfo setOwnerDisplayName(java.lang.String ownerDisplayName) {
    this.ownerDisplayName = ownerDisplayName;
    return this;
  }

  /**
   * This is the REST name and unique identifier of this streaming session and has the form
   * `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`.
   * @return value or {@code null} for none
   */
  public java.lang.String getSessionId() {
    return sessionId;
  }

  /**
   * This is the REST name and unique identifier of this streaming session and has the form
   * `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`.
   * @param sessionId sessionId or {@code null} for none
   */
  public StreamingSessionInfo setSessionId(java.lang.String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The current status of this streaming session. This can be used by clients to show session
   * status indicator and/or notification.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * The current status of this streaming session. This can be used by clients to show session
   * status indicator and/or notification.
   * @param status status or {@code null} for none
   */
  public StreamingSessionInfo setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * When true, this recording may be used for training new transcription models.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTrainingEnabled() {
    return trainingEnabled;
  }

  /**
   * When true, this recording may be used for training new transcription models.
   * @param trainingEnabled trainingEnabled or {@code null} for none
   */
  public StreamingSessionInfo setTrainingEnabled(java.lang.Boolean trainingEnabled) {
    this.trainingEnabled = trainingEnabled;
    return this;
  }

  /**
   * The policy that controls who can view the broadcast. This setting applies for broadcast
   * session.
   * @return value or {@code null} for none
   */
  public java.lang.String getViewerAccessPolicy() {
    return viewerAccessPolicy;
  }

  /**
   * The policy that controls who can view the broadcast. This setting applies for broadcast
   * session.
   * @param viewerAccessPolicy viewerAccessPolicy or {@code null} for none
   */
  public StreamingSessionInfo setViewerAccessPolicy(java.lang.String viewerAccessPolicy) {
    this.viewerAccessPolicy = viewerAccessPolicy;
    return this;
  }

  /**
   * Contains information about viewers of the livestream. It is only set when application type is
   * BROADCAST.
   * @return value or {@code null} for none
   */
  public StreamViewerStats getViewerStats() {
    return viewerStats;
  }

  /**
   * Contains information about viewers of the livestream. It is only set when application type is
   * BROADCAST.
   * @param viewerStats viewerStats or {@code null} for none
   */
  public StreamingSessionInfo setViewerStats(StreamViewerStats viewerStats) {
    this.viewerStats = viewerStats;
    return this;
  }

  @Override
  public StreamingSessionInfo set(String fieldName, Object value) {
    return (StreamingSessionInfo) super.set(fieldName, value);
  }

  @Override
  public StreamingSessionInfo clone() {
    return (StreamingSessionInfo) super.clone();
  }

}
