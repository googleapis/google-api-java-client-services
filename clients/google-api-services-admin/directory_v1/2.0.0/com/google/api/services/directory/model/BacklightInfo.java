/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.directory.model;

/**
 * Information about the device's backlights.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Admin SDK API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BacklightInfo extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Current brightness of the backlight, between 0 and max_brightness.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer brightness;

  /**
   * Output only. Maximum brightness for the backlight.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxBrightness;

  /**
   * Output only. Path to this backlight on the system. Useful if the caller needs to correlate with
   * other information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * Output only. Current brightness of the backlight, between 0 and max_brightness.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBrightness() {
    return brightness;
  }

  /**
   * Output only. Current brightness of the backlight, between 0 and max_brightness.
   * @param brightness brightness or {@code null} for none
   */
  public BacklightInfo setBrightness(java.lang.Integer brightness) {
    this.brightness = brightness;
    return this;
  }

  /**
   * Output only. Maximum brightness for the backlight.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxBrightness() {
    return maxBrightness;
  }

  /**
   * Output only. Maximum brightness for the backlight.
   * @param maxBrightness maxBrightness or {@code null} for none
   */
  public BacklightInfo setMaxBrightness(java.lang.Integer maxBrightness) {
    this.maxBrightness = maxBrightness;
    return this;
  }

  /**
   * Output only. Path to this backlight on the system. Useful if the caller needs to correlate with
   * other information.
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * Output only. Path to this backlight on the system. Useful if the caller needs to correlate with
   * other information.
   * @param path path or {@code null} for none
   */
  public BacklightInfo setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  @Override
  public BacklightInfo set(String fieldName, Object value) {
    return (BacklightInfo) super.set(fieldName, value);
  }

  @Override
  public BacklightInfo clone() {
    return (BacklightInfo) super.clone();
  }

}
