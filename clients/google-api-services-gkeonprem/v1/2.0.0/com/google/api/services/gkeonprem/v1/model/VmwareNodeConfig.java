/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkeonprem.v1.model;

/**
 * Parameters that describe the configuration of all nodes within a given node pool.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Anthos On-Prem API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmwareNodeConfig extends com.google.api.client.json.GenericJson {

  /**
   * VMware disk size to be used during creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bootDiskSizeGb;

  /**
   * The number of CPUs for each node in the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long cpus;

  /**
   * Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load
   * balancers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableLoadBalancer;

  /**
   * The OS image name in vCenter, only valid when using Windows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String image;

  /**
   * Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`,
   * `ubuntu_containerd` and `windows` are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageType;

  /**
   * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in
   * addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in
   * label keys, the applied set may differ depending on the Kubernetes version -- it's best to
   * assume the behavior is undefined and conflicts should be avoided. For more information,
   * including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview
   * /working-with-objects/labels/
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The megabytes of memory for each node in the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long memoryMb;

  /**
   * The number of nodes in the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long replicas;

  /**
   * The initial taints assigned to nodes of this node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NodeTaint> taints;

  static {
    // hack to force ProGuard to consider NodeTaint used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NodeTaint.class);
  }

  /**
   * Output only. Specifies the vSphere config for node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VmwareVsphereConfig vsphereConfig;

  /**
   * VMware disk size to be used during creation.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBootDiskSizeGb() {
    return bootDiskSizeGb;
  }

  /**
   * VMware disk size to be used during creation.
   * @param bootDiskSizeGb bootDiskSizeGb or {@code null} for none
   */
  public VmwareNodeConfig setBootDiskSizeGb(java.lang.Long bootDiskSizeGb) {
    this.bootDiskSizeGb = bootDiskSizeGb;
    return this;
  }

  /**
   * The number of CPUs for each node in the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCpus() {
    return cpus;
  }

  /**
   * The number of CPUs for each node in the node pool.
   * @param cpus cpus or {@code null} for none
   */
  public VmwareNodeConfig setCpus(java.lang.Long cpus) {
    this.cpus = cpus;
    return this;
  }

  /**
   * Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load
   * balancers.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableLoadBalancer() {
    return enableLoadBalancer;
  }

  /**
   * Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load
   * balancers.
   * @param enableLoadBalancer enableLoadBalancer or {@code null} for none
   */
  public VmwareNodeConfig setEnableLoadBalancer(java.lang.Boolean enableLoadBalancer) {
    this.enableLoadBalancer = enableLoadBalancer;
    return this;
  }

  /**
   * The OS image name in vCenter, only valid when using Windows.
   * @return value or {@code null} for none
   */
  public java.lang.String getImage() {
    return image;
  }

  /**
   * The OS image name in vCenter, only valid when using Windows.
   * @param image image or {@code null} for none
   */
  public VmwareNodeConfig setImage(java.lang.String image) {
    this.image = image;
    return this;
  }

  /**
   * Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`,
   * `ubuntu_containerd` and `windows` are supported.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageType() {
    return imageType;
  }

  /**
   * Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`,
   * `ubuntu_containerd` and `windows` are supported.
   * @param imageType imageType or {@code null} for none
   */
  public VmwareNodeConfig setImageType(java.lang.String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in
   * addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in
   * label keys, the applied set may differ depending on the Kubernetes version -- it's best to
   * assume the behavior is undefined and conflicts should be avoided. For more information,
   * including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview
   * /working-with-objects/labels/
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in
   * addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in
   * label keys, the applied set may differ depending on the Kubernetes version -- it's best to
   * assume the behavior is undefined and conflicts should be avoided. For more information,
   * including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview
   * /working-with-objects/labels/
   * @param labels labels or {@code null} for none
   */
  public VmwareNodeConfig setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The megabytes of memory for each node in the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMemoryMb() {
    return memoryMb;
  }

  /**
   * The megabytes of memory for each node in the node pool.
   * @param memoryMb memoryMb or {@code null} for none
   */
  public VmwareNodeConfig setMemoryMb(java.lang.Long memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * The number of nodes in the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.Long getReplicas() {
    return replicas;
  }

  /**
   * The number of nodes in the node pool.
   * @param replicas replicas or {@code null} for none
   */
  public VmwareNodeConfig setReplicas(java.lang.Long replicas) {
    this.replicas = replicas;
    return this;
  }

  /**
   * The initial taints assigned to nodes of this node pool.
   * @return value or {@code null} for none
   */
  public java.util.List<NodeTaint> getTaints() {
    return taints;
  }

  /**
   * The initial taints assigned to nodes of this node pool.
   * @param taints taints or {@code null} for none
   */
  public VmwareNodeConfig setTaints(java.util.List<NodeTaint> taints) {
    this.taints = taints;
    return this;
  }

  /**
   * Output only. Specifies the vSphere config for node pool.
   * @return value or {@code null} for none
   */
  public VmwareVsphereConfig getVsphereConfig() {
    return vsphereConfig;
  }

  /**
   * Output only. Specifies the vSphere config for node pool.
   * @param vsphereConfig vsphereConfig or {@code null} for none
   */
  public VmwareNodeConfig setVsphereConfig(VmwareVsphereConfig vsphereConfig) {
    this.vsphereConfig = vsphereConfig;
    return this;
  }

  @Override
  public VmwareNodeConfig set(String fieldName, Object value) {
    return (VmwareNodeConfig) super.set(fieldName, value);
  }

  @Override
  public VmwareNodeConfig clone() {
    return (VmwareNodeConfig) super.clone();
  }

}
