/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.playintegrity.v1.model;

/**
 * Contains the recall bits write dates.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Play Integrity API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WriteDates extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the first bit. Note that this
   * value won't be set if the first bit is false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer yyyymmFirst;

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the second bit. Note that this
   * value won't be set if the second bit is false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer yyyymmSecond;

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the third bit. Note that this
   * value won't be set if the third bit is false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer yyyymmThird;

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the first bit. Note that this
   * value won't be set if the first bit is false.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYyyymmFirst() {
    return yyyymmFirst;
  }

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the first bit. Note that this
   * value won't be set if the first bit is false.
   * @param yyyymmFirst yyyymmFirst or {@code null} for none
   */
  public WriteDates setYyyymmFirst(java.lang.Integer yyyymmFirst) {
    this.yyyymmFirst = yyyymmFirst;
    return this;
  }

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the second bit. Note that this
   * value won't be set if the second bit is false.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYyyymmSecond() {
    return yyyymmSecond;
  }

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the second bit. Note that this
   * value won't be set if the second bit is false.
   * @param yyyymmSecond yyyymmSecond or {@code null} for none
   */
  public WriteDates setYyyymmSecond(java.lang.Integer yyyymmSecond) {
    this.yyyymmSecond = yyyymmSecond;
    return this;
  }

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the third bit. Note that this
   * value won't be set if the third bit is false.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYyyymmThird() {
    return yyyymmThird;
  }

  /**
   * Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the third bit. Note that this
   * value won't be set if the third bit is false.
   * @param yyyymmThird yyyymmThird or {@code null} for none
   */
  public WriteDates setYyyymmThird(java.lang.Integer yyyymmThird) {
    this.yyyymmThird = yyyymmThird;
    return this;
  }

  @Override
  public WriteDates set(String fieldName, Object value) {
    return (WriteDates) super.set(fieldName, value);
  }

  @Override
  public WriteDates clone() {
    return (WriteDates) super.clone();
  }

}
