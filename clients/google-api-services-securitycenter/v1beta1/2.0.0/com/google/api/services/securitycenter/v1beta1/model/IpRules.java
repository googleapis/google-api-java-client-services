/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1beta1.model;

/**
 * IP rules associated with the finding.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IpRules extends com.google.api.client.json.GenericJson {

  /**
   * Tuple with allowed rules.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Allowed allowed;

  /**
   * Tuple with denied rules.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Denied denied;

  /**
   * If destination IP ranges are specified, the firewall rule applies only to traffic that has a
   * destination IP address in these ranges. These ranges must be expressed in CIDR format. Only
   * supports IPv4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> destinationIpRanges;

  /**
   * The direction that the rule is applicable to, one of ingress or egress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String direction;

  /**
   * Name of the network protocol service, such as FTP, that is exposed by the open port. Follows
   * the naming convention available at: https://www.iana.org/assignments/service-names-port-
   * numbers/service-names-port-numbers.xhtml.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> exposedServices;

  /**
   * If source IP ranges are specified, the firewall rule applies only to traffic that has a source
   * IP address in these ranges. These ranges must be expressed in CIDR format. Only supports IPv4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sourceIpRanges;

  /**
   * Tuple with allowed rules.
   * @return value or {@code null} for none
   */
  public Allowed getAllowed() {
    return allowed;
  }

  /**
   * Tuple with allowed rules.
   * @param allowed allowed or {@code null} for none
   */
  public IpRules setAllowed(Allowed allowed) {
    this.allowed = allowed;
    return this;
  }

  /**
   * Tuple with denied rules.
   * @return value or {@code null} for none
   */
  public Denied getDenied() {
    return denied;
  }

  /**
   * Tuple with denied rules.
   * @param denied denied or {@code null} for none
   */
  public IpRules setDenied(Denied denied) {
    this.denied = denied;
    return this;
  }

  /**
   * If destination IP ranges are specified, the firewall rule applies only to traffic that has a
   * destination IP address in these ranges. These ranges must be expressed in CIDR format. Only
   * supports IPv4.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDestinationIpRanges() {
    return destinationIpRanges;
  }

  /**
   * If destination IP ranges are specified, the firewall rule applies only to traffic that has a
   * destination IP address in these ranges. These ranges must be expressed in CIDR format. Only
   * supports IPv4.
   * @param destinationIpRanges destinationIpRanges or {@code null} for none
   */
  public IpRules setDestinationIpRanges(java.util.List<java.lang.String> destinationIpRanges) {
    this.destinationIpRanges = destinationIpRanges;
    return this;
  }

  /**
   * The direction that the rule is applicable to, one of ingress or egress.
   * @return value or {@code null} for none
   */
  public java.lang.String getDirection() {
    return direction;
  }

  /**
   * The direction that the rule is applicable to, one of ingress or egress.
   * @param direction direction or {@code null} for none
   */
  public IpRules setDirection(java.lang.String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Name of the network protocol service, such as FTP, that is exposed by the open port. Follows
   * the naming convention available at: https://www.iana.org/assignments/service-names-port-
   * numbers/service-names-port-numbers.xhtml.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExposedServices() {
    return exposedServices;
  }

  /**
   * Name of the network protocol service, such as FTP, that is exposed by the open port. Follows
   * the naming convention available at: https://www.iana.org/assignments/service-names-port-
   * numbers/service-names-port-numbers.xhtml.
   * @param exposedServices exposedServices or {@code null} for none
   */
  public IpRules setExposedServices(java.util.List<java.lang.String> exposedServices) {
    this.exposedServices = exposedServices;
    return this;
  }

  /**
   * If source IP ranges are specified, the firewall rule applies only to traffic that has a source
   * IP address in these ranges. These ranges must be expressed in CIDR format. Only supports IPv4.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSourceIpRanges() {
    return sourceIpRanges;
  }

  /**
   * If source IP ranges are specified, the firewall rule applies only to traffic that has a source
   * IP address in these ranges. These ranges must be expressed in CIDR format. Only supports IPv4.
   * @param sourceIpRanges sourceIpRanges or {@code null} for none
   */
  public IpRules setSourceIpRanges(java.util.List<java.lang.String> sourceIpRanges) {
    this.sourceIpRanges = sourceIpRanges;
    return this;
  }

  @Override
  public IpRules set(String fieldName, Object value) {
    return (IpRules) super.set(fieldName, value);
  }

  @Override
  public IpRules clone() {
    return (IpRules) super.clone();
  }

}
