/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1;

/**
 * Service definition for Firestore (v1beta1).
 *
 * <p>
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/firestore" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirestoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Firestore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Firestore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firestore.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Firestore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Firestore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firestore firestore = new Firestore(...);}
   *   {@code Firestore.Projects.List request = firestore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Databases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firestore firestore = new Firestore(...);}
     *   {@code Firestore.Databases.List request = firestore.databases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Databases databases() {
      return new Databases();
    }

    /**
     * The "databases" collection of methods.
     */
    public class Databases {

      /**
       * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
       * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
       * export. The export occurs in the background and its progress can be monitored and managed via the
       * Operation resource that is created. The output of an export may only be used once the associated
       * operation is done. If an export operation is cancelled before completion it may leave partial
       * data behind in Google Cloud Storage.
       *
       * Create a request for the method "databases.exportDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ExportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Database to export. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ExportDocumentsRequest}
       * @return the request
       */
      public ExportDocuments exportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ExportDocumentsRequest content) throws java.io.IOException {
        ExportDocuments result = new ExportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ExportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1beta1/{+name}:exportDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
         * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
         * export. The export occurs in the background and its progress can be monitored and managed via
         * the Operation resource that is created. The output of an export may only be used once the
         * associated operation is done. If an export operation is cancelled before completion it may
         * leave partial data behind in Google Cloud Storage.
         *
         * Create a request for the method "databases.exportDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ExportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ExportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Database to export. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ExportDocumentsRequest}
         * @since 1.13
         */
        protected ExportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ExportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ExportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ExportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExportDocuments setAccessToken(java.lang.String accessToken) {
          return (ExportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ExportDocuments setAlt(java.lang.String alt) {
          return (ExportDocuments) super.setAlt(alt);
        }

        @Override
        public ExportDocuments setCallback(java.lang.String callback) {
          return (ExportDocuments) super.setCallback(callback);
        }

        @Override
        public ExportDocuments setFields(java.lang.String fields) {
          return (ExportDocuments) super.setFields(fields);
        }

        @Override
        public ExportDocuments setKey(java.lang.String key) {
          return (ExportDocuments) super.setKey(key);
        }

        @Override
        public ExportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ExportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ExportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ExportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExportDocuments setUploadType(java.lang.String uploadType) {
          return (ExportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ExportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ExportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ExportDocuments set(String parameterName, Object value) {
          return (ExportDocuments) super.set(parameterName, value);
        }
      }
      /**
       * Imports documents into Google Cloud Firestore. Existing documents with the same name are
       * overwritten. The import occurs in the background and its progress can be monitored and managed
       * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
       * possible that a subset of the data has already been imported to Cloud Firestore.
       *
       * Create a request for the method "databases.importDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ImportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Database to import into. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ImportDocumentsRequest}
       * @return the request
       */
      public ImportDocuments importDocuments(java.lang.String name, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ImportDocumentsRequest content) throws java.io.IOException {
        ImportDocuments result = new ImportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ImportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1beta1/{+name}:importDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Imports documents into Google Cloud Firestore. Existing documents with the same name are
         * overwritten. The import occurs in the background and its progress can be monitored and managed
         * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
         * possible that a subset of the data has already been imported to Cloud Firestore.
         *
         * Create a request for the method "databases.importDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ImportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ImportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Database to import into. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ImportDocumentsRequest}
         * @since 1.13
         */
        protected ImportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ImportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ImportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ImportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ImportDocuments setAccessToken(java.lang.String accessToken) {
          return (ImportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ImportDocuments setAlt(java.lang.String alt) {
          return (ImportDocuments) super.setAlt(alt);
        }

        @Override
        public ImportDocuments setCallback(java.lang.String callback) {
          return (ImportDocuments) super.setCallback(callback);
        }

        @Override
        public ImportDocuments setFields(java.lang.String fields) {
          return (ImportDocuments) super.setFields(fields);
        }

        @Override
        public ImportDocuments setKey(java.lang.String key) {
          return (ImportDocuments) super.setKey(key);
        }

        @Override
        public ImportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ImportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ImportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ImportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ImportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ImportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ImportDocuments setUploadType(java.lang.String uploadType) {
          return (ImportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ImportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ImportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ImportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ImportDocuments set(String parameterName, Object value) {
          return (ImportDocuments) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Documents collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.Documents.List request = firestore.documents().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Documents documents() {
        return new Documents();
      }

      /**
       * The "documents" collection of methods.
       */
      public class Documents {

        /**
         * Gets multiple documents.
         *
         * Documents returned by this method are not guaranteed to be returned in the same order that they
         * were requested.
         *
         * Create a request for the method "documents.batchGet".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsRequest}
         * @return the request
         */
        public BatchGet batchGet(java.lang.String database, com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsRequest content) throws java.io.IOException {
          BatchGet result = new BatchGet(database, content);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsResponse> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:batchGet";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Gets multiple documents.
           *
           * Documents returned by this method are not guaranteed to be returned in the same order that they
           * were requested.
           *
           * Create a request for the method "documents.batchGet".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsRequest}
           * @since 1.13
           */
          protected BatchGet(java.lang.String database, com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.BatchGetDocumentsResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public BatchGet setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Starts a new transaction.
         *
         * Create a request for the method "documents.beginTransaction".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.BeginTransactionRequest}
         * @return the request
         */
        public BeginTransaction beginTransaction(java.lang.String database, com.google.api.services.firestore.v1beta1.model.BeginTransactionRequest content) throws java.io.IOException {
          BeginTransaction result = new BeginTransaction(database, content);
          initialize(result);
          return result;
        }

        public class BeginTransaction extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.BeginTransactionResponse> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:beginTransaction";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Starts a new transaction.
           *
           * Create a request for the method "documents.beginTransaction".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link BeginTransaction#execute()} method to invoke the remote
           * operation. <p> {@link BeginTransaction#initialize(com.google.api.client.googleapis.services.Abs
           * tractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.BeginTransactionRequest}
           * @since 1.13
           */
          protected BeginTransaction(java.lang.String database, com.google.api.services.firestore.v1beta1.model.BeginTransactionRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.BeginTransactionResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public BeginTransaction set$Xgafv(java.lang.String $Xgafv) {
            return (BeginTransaction) super.set$Xgafv($Xgafv);
          }

          @Override
          public BeginTransaction setAccessToken(java.lang.String accessToken) {
            return (BeginTransaction) super.setAccessToken(accessToken);
          }

          @Override
          public BeginTransaction setAlt(java.lang.String alt) {
            return (BeginTransaction) super.setAlt(alt);
          }

          @Override
          public BeginTransaction setCallback(java.lang.String callback) {
            return (BeginTransaction) super.setCallback(callback);
          }

          @Override
          public BeginTransaction setFields(java.lang.String fields) {
            return (BeginTransaction) super.setFields(fields);
          }

          @Override
          public BeginTransaction setKey(java.lang.String key) {
            return (BeginTransaction) super.setKey(key);
          }

          @Override
          public BeginTransaction setOauthToken(java.lang.String oauthToken) {
            return (BeginTransaction) super.setOauthToken(oauthToken);
          }

          @Override
          public BeginTransaction setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BeginTransaction) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BeginTransaction setQuotaUser(java.lang.String quotaUser) {
            return (BeginTransaction) super.setQuotaUser(quotaUser);
          }

          @Override
          public BeginTransaction setUploadType(java.lang.String uploadType) {
            return (BeginTransaction) super.setUploadType(uploadType);
          }

          @Override
          public BeginTransaction setUploadProtocol(java.lang.String uploadProtocol) {
            return (BeginTransaction) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public BeginTransaction setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public BeginTransaction set(String parameterName, Object value) {
            return (BeginTransaction) super.set(parameterName, value);
          }
        }
        /**
         * Commits a transaction, while optionally updating documents.
         *
         * Create a request for the method "documents.commit".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Commit#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.CommitRequest}
         * @return the request
         */
        public Commit commit(java.lang.String database, com.google.api.services.firestore.v1beta1.model.CommitRequest content) throws java.io.IOException {
          Commit result = new Commit(database, content);
          initialize(result);
          return result;
        }

        public class Commit extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.CommitResponse> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:commit";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Commits a transaction, while optionally updating documents.
           *
           * Create a request for the method "documents.commit".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Commit#execute()} method to invoke the remote operation.
           * <p> {@link
           * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.CommitRequest}
           * @since 1.13
           */
          protected Commit(java.lang.String database, com.google.api.services.firestore.v1beta1.model.CommitRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.CommitResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Commit set$Xgafv(java.lang.String $Xgafv) {
            return (Commit) super.set$Xgafv($Xgafv);
          }

          @Override
          public Commit setAccessToken(java.lang.String accessToken) {
            return (Commit) super.setAccessToken(accessToken);
          }

          @Override
          public Commit setAlt(java.lang.String alt) {
            return (Commit) super.setAlt(alt);
          }

          @Override
          public Commit setCallback(java.lang.String callback) {
            return (Commit) super.setCallback(callback);
          }

          @Override
          public Commit setFields(java.lang.String fields) {
            return (Commit) super.setFields(fields);
          }

          @Override
          public Commit setKey(java.lang.String key) {
            return (Commit) super.setKey(key);
          }

          @Override
          public Commit setOauthToken(java.lang.String oauthToken) {
            return (Commit) super.setOauthToken(oauthToken);
          }

          @Override
          public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Commit) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Commit setQuotaUser(java.lang.String quotaUser) {
            return (Commit) super.setQuotaUser(quotaUser);
          }

          @Override
          public Commit setUploadType(java.lang.String uploadType) {
            return (Commit) super.setUploadType(uploadType);
          }

          @Override
          public Commit setUploadProtocol(java.lang.String uploadProtocol) {
            return (Commit) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public Commit setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Commit set(String parameterName, Object value) {
            return (Commit) super.set(parameterName, value);
          }
        }
        /**
         * Creates a new document.
         *
         * Create a request for the method "documents.createDocument".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link CreateDocument#execute()} method to invoke the remote operation.
         *
         * @param parent The parent resource. For example:
        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
         * @param collectionId The collection ID, relative to `parent`, to list. For example: `chatrooms`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.Document}
         * @return the request
         */
        public CreateDocument createDocument(java.lang.String parent, java.lang.String collectionId, com.google.api.services.firestore.v1beta1.model.Document content) throws java.io.IOException {
          CreateDocument result = new CreateDocument(parent, collectionId, content);
          initialize(result);
          return result;
        }

        public class CreateDocument extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Document> {

          private static final String REST_PATH = "v1beta1/{+parent}/{collectionId}";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/.+$");

          /**
           * Creates a new document.
           *
           * Create a request for the method "documents.createDocument".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link CreateDocument#execute()} method to invoke the remote
           * operation. <p> {@link CreateDocument#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent The parent resource. For example:
        `projects/{project_id}/databases/{database_id}/documents` or
         *        `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           * @param collectionId The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.Document}
           * @since 1.13
           */
          protected CreateDocument(java.lang.String parent, java.lang.String collectionId, com.google.api.services.firestore.v1beta1.model.Document content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.Document.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/.+$");
            }
            this.collectionId = com.google.api.client.util.Preconditions.checkNotNull(collectionId, "Required parameter collectionId must be specified.");
          }

          @Override
          public CreateDocument set$Xgafv(java.lang.String $Xgafv) {
            return (CreateDocument) super.set$Xgafv($Xgafv);
          }

          @Override
          public CreateDocument setAccessToken(java.lang.String accessToken) {
            return (CreateDocument) super.setAccessToken(accessToken);
          }

          @Override
          public CreateDocument setAlt(java.lang.String alt) {
            return (CreateDocument) super.setAlt(alt);
          }

          @Override
          public CreateDocument setCallback(java.lang.String callback) {
            return (CreateDocument) super.setCallback(callback);
          }

          @Override
          public CreateDocument setFields(java.lang.String fields) {
            return (CreateDocument) super.setFields(fields);
          }

          @Override
          public CreateDocument setKey(java.lang.String key) {
            return (CreateDocument) super.setKey(key);
          }

          @Override
          public CreateDocument setOauthToken(java.lang.String oauthToken) {
            return (CreateDocument) super.setOauthToken(oauthToken);
          }

          @Override
          public CreateDocument setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (CreateDocument) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public CreateDocument setQuotaUser(java.lang.String quotaUser) {
            return (CreateDocument) super.setQuotaUser(quotaUser);
          }

          @Override
          public CreateDocument setUploadType(java.lang.String uploadType) {
            return (CreateDocument) super.setUploadType(uploadType);
          }

          @Override
          public CreateDocument setUploadProtocol(java.lang.String uploadProtocol) {
            return (CreateDocument) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent resource. For example:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent resource. For example: `projects/{project_id}/databases/{database_id}/documents` or
         `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent resource. For example:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          public CreateDocument setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/.+$");
            }
            this.parent = parent;
            return this;
          }

          /** The collection ID, relative to `parent`, to list. For example: `chatrooms`. */
          @com.google.api.client.util.Key
          private java.lang.String collectionId;

          /** The collection ID, relative to `parent`, to list. For example: `chatrooms`.
           */
          public java.lang.String getCollectionId() {
            return collectionId;
          }

          /** The collection ID, relative to `parent`, to list. For example: `chatrooms`. */
          public CreateDocument setCollectionId(java.lang.String collectionId) {
            this.collectionId = collectionId;
            return this;
          }

          /**
           * The client-assigned document ID to use for this document.
           *
           * Optional. If not specified, an ID will be assigned by the service.
           */
          @com.google.api.client.util.Key
          private java.lang.String documentId;

          /** The client-assigned document ID to use for this document.

         Optional. If not specified, an ID will be assigned by the service.
           */
          public java.lang.String getDocumentId() {
            return documentId;
          }

          /**
           * The client-assigned document ID to use for this document.
           *
           * Optional. If not specified, an ID will be assigned by the service.
           */
          public CreateDocument setDocumentId(java.lang.String documentId) {
            this.documentId = documentId;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public CreateDocument setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          @Override
          public CreateDocument set(String parameterName, Object value) {
            return (CreateDocument) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a document.
         *
         * Create a request for the method "documents.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the Document to delete. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Deletes a document.
           *
           * Create a request for the method "documents.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the Document to delete. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the Document to delete. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the Document to delete. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the Document to delete. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.name = name;
            return this;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          @com.google.api.client.util.Key("currentDocument.exists")
          private java.lang.Boolean currentDocumentExists;

          /** When set to `true`, the target document must exist. When set to `false`, the target document must
         not exist.
           */
          public java.lang.Boolean getCurrentDocumentExists() {
            return currentDocumentExists;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          public Delete setCurrentDocumentExists(java.lang.Boolean currentDocumentExists) {
            this.currentDocumentExists = currentDocumentExists;
            return this;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           */
          @com.google.api.client.util.Key("currentDocument.updateTime")
          private String currentDocumentUpdateTime;

          /** When set, the target document must exist and have been last updated at that time.
           */
          public String getCurrentDocumentUpdateTime() {
            return currentDocumentUpdateTime;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           */
          public Delete setCurrentDocumentUpdateTime(String currentDocumentUpdateTime) {
            this.currentDocumentUpdateTime = currentDocumentUpdateTime;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a single document.
         *
         * Create a request for the method "documents.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the Document to get. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Document> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Gets a single document.
           *
           * Create a request for the method "documents.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the Document to get. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.Document.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the Document to get. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the Document to get. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the Document to get. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.name = name;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Get setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * Reads the version of the document at the given time. This may not be older than 60
           * seconds.
           */
          @com.google.api.client.util.Key
          private String readTime;

          /** Reads the version of the document at the given time. This may not be older than 60 seconds.
           */
          public String getReadTime() {
            return readTime;
          }

          /**
           * Reads the version of the document at the given time. This may not be older than 60
           * seconds.
           */
          public Get setReadTime(String readTime) {
            this.readTime = readTime;
            return this;
          }

          /** Reads the document in a transaction. */
          @com.google.api.client.util.Key
          private java.lang.String transaction;

          /** Reads the document in a transaction.
           */
          public java.lang.String getTransaction() {
            return transaction;
          }

          /** Reads the document in a transaction. */
          public Get setTransaction(java.lang.String transaction) {
            this.transaction = transaction;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists documents.
         *
         * Create a request for the method "documents.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent The parent resource name. In the format:
        `projects/{project_id}/databases/{database_id}/documents`
         *        or
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents` or
        `projects/my-project/databases
         *        /my-database/documents/chatrooms/my-chatroom`
         * @param collectionId The collection ID, relative to `parent`, to list. For example: `chatrooms`
        or `messages`.
         * @return the request
         */
        public List list(java.lang.String parent, java.lang.String collectionId) throws java.io.IOException {
          List result = new List(parent, collectionId);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.ListDocumentsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/{collectionId}";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Lists documents.
           *
           * Create a request for the method "documents.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The parent resource name. In the format:
        `projects/{project_id}/databases/{database_id}/documents`
         *        or
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents` or
        `projects/my-project/databases
         *        /my-database/documents/chatrooms/my-chatroom`
           * @param collectionId The collection ID, relative to `parent`, to list. For example: `chatrooms`
        or `messages`.
           * @since 1.13
           */
          protected List(java.lang.String parent, java.lang.String collectionId) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.ListDocumentsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.collectionId = com.google.api.client.util.Preconditions.checkNotNull(collectionId, "Required parameter collectionId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-project/databases
           * /my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents`
         or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-project/databases
           * /my-database/documents/chatrooms/my-chatroom`
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`.
           */
          @com.google.api.client.util.Key
          private java.lang.String collectionId;

          /** The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`.
           */
          public java.lang.String getCollectionId() {
            return collectionId;
          }

          /**
           * The collection ID, relative to `parent`, to list. For example: `chatrooms` or
           * `messages`.
           */
          public List setCollectionId(java.lang.String collectionId) {
            this.collectionId = collectionId;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public List setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /** The order to sort results by. For example: `priority desc, name`. */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** The order to sort results by. For example: `priority desc, name`.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /** The order to sort results by. For example: `priority desc, name`. */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /** The maximum number of documents to return. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of documents to return.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The maximum number of documents to return. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The `next_page_token` value returned from a previous List request, if any. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The `next_page_token` value returned from a previous List request, if any.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The `next_page_token` value returned from a previous List request, if any. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Reads documents as they were at the given time. This may not be older than 60 seconds.
           */
          @com.google.api.client.util.Key
          private String readTime;

          /** Reads documents as they were at the given time. This may not be older than 60 seconds.
           */
          public String getReadTime() {
            return readTime;
          }

          /**
           * Reads documents as they were at the given time. This may not be older than 60 seconds.
           */
          public List setReadTime(String readTime) {
            this.readTime = readTime;
            return this;
          }

          /**
           * If the list should show missing documents. A missing document is a document that does
           * not exist but has sub-documents. These documents will be returned with a key but will
           * not have fields, Document.create_time, or Document.update_time set.
           *
           * Requests with `show_missing` may not specify `where` or `order_by`.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean showMissing;

          /** If the list should show missing documents. A missing document is a document that does not exist but
         has sub-documents. These documents will be returned with a key but will not have fields,
         Document.create_time, or Document.update_time set.

         Requests with `show_missing` may not specify `where` or `order_by`.
           */
          public java.lang.Boolean getShowMissing() {
            return showMissing;
          }

          /**
           * If the list should show missing documents. A missing document is a document that does
           * not exist but has sub-documents. These documents will be returned with a key but will
           * not have fields, Document.create_time, or Document.update_time set.
           *
           * Requests with `show_missing` may not specify `where` or `order_by`.
           */
          public List setShowMissing(java.lang.Boolean showMissing) {
            this.showMissing = showMissing;
            return this;
          }

          /** Reads documents in a transaction. */
          @com.google.api.client.util.Key
          private java.lang.String transaction;

          /** Reads documents in a transaction.
           */
          public java.lang.String getTransaction() {
            return transaction;
          }

          /** Reads documents in a transaction. */
          public List setTransaction(java.lang.String transaction) {
            this.transaction = transaction;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Lists all the collection IDs underneath a document.
         *
         * Create a request for the method "documents.listCollectionIds".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link ListCollectionIds#execute()} method to invoke the remote operation.
         *
         * @param parent The parent document. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.ListCollectionIdsRequest}
         * @return the request
         */
        public ListCollectionIds listCollectionIds(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.ListCollectionIdsRequest content) throws java.io.IOException {
          ListCollectionIds result = new ListCollectionIds(parent, content);
          initialize(result);
          return result;
        }

        public class ListCollectionIds extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.ListCollectionIdsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}:listCollectionIds";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Lists all the collection IDs underneath a document.
           *
           * Create a request for the method "documents.listCollectionIds".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link ListCollectionIds#execute()} method to invoke the remote
           * operation. <p> {@link ListCollectionIds#initialize(com.google.api.client.googleapis.services.Ab
           * stractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param parent The parent document. In the format:
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.ListCollectionIdsRequest}
           * @since 1.13
           */
          protected ListCollectionIds(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.ListCollectionIdsRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.ListCollectionIdsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
          }

          @Override
          public ListCollectionIds set$Xgafv(java.lang.String $Xgafv) {
            return (ListCollectionIds) super.set$Xgafv($Xgafv);
          }

          @Override
          public ListCollectionIds setAccessToken(java.lang.String accessToken) {
            return (ListCollectionIds) super.setAccessToken(accessToken);
          }

          @Override
          public ListCollectionIds setAlt(java.lang.String alt) {
            return (ListCollectionIds) super.setAlt(alt);
          }

          @Override
          public ListCollectionIds setCallback(java.lang.String callback) {
            return (ListCollectionIds) super.setCallback(callback);
          }

          @Override
          public ListCollectionIds setFields(java.lang.String fields) {
            return (ListCollectionIds) super.setFields(fields);
          }

          @Override
          public ListCollectionIds setKey(java.lang.String key) {
            return (ListCollectionIds) super.setKey(key);
          }

          @Override
          public ListCollectionIds setOauthToken(java.lang.String oauthToken) {
            return (ListCollectionIds) super.setOauthToken(oauthToken);
          }

          @Override
          public ListCollectionIds setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ListCollectionIds) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ListCollectionIds setQuotaUser(java.lang.String quotaUser) {
            return (ListCollectionIds) super.setQuotaUser(quotaUser);
          }

          @Override
          public ListCollectionIds setUploadType(java.lang.String uploadType) {
            return (ListCollectionIds) super.setUploadType(uploadType);
          }

          @Override
          public ListCollectionIds setUploadProtocol(java.lang.String uploadProtocol) {
            return (ListCollectionIds) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent document. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent document. In the format:
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects
         /my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent document. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          public ListCollectionIds setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public ListCollectionIds set(String parameterName, Object value) {
            return (ListCollectionIds) super.set(parameterName, value);
          }
        }
        /**
         * Listens to changes.
         *
         * Create a request for the method "documents.listen".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Listen#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.ListenRequest}
         * @return the request
         */
        public Listen listen(java.lang.String database, com.google.api.services.firestore.v1beta1.model.ListenRequest content) throws java.io.IOException {
          Listen result = new Listen(database, content);
          initialize(result);
          return result;
        }

        public class Listen extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.ListenResponse> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:listen";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Listens to changes.
           *
           * Create a request for the method "documents.listen".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Listen#execute()} method to invoke the remote operation.
           * <p> {@link
           * Listen#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.ListenRequest}
           * @since 1.13
           */
          protected Listen(java.lang.String database, com.google.api.services.firestore.v1beta1.model.ListenRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.ListenResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Listen set$Xgafv(java.lang.String $Xgafv) {
            return (Listen) super.set$Xgafv($Xgafv);
          }

          @Override
          public Listen setAccessToken(java.lang.String accessToken) {
            return (Listen) super.setAccessToken(accessToken);
          }

          @Override
          public Listen setAlt(java.lang.String alt) {
            return (Listen) super.setAlt(alt);
          }

          @Override
          public Listen setCallback(java.lang.String callback) {
            return (Listen) super.setCallback(callback);
          }

          @Override
          public Listen setFields(java.lang.String fields) {
            return (Listen) super.setFields(fields);
          }

          @Override
          public Listen setKey(java.lang.String key) {
            return (Listen) super.setKey(key);
          }

          @Override
          public Listen setOauthToken(java.lang.String oauthToken) {
            return (Listen) super.setOauthToken(oauthToken);
          }

          @Override
          public Listen setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Listen) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Listen setQuotaUser(java.lang.String quotaUser) {
            return (Listen) super.setQuotaUser(quotaUser);
          }

          @Override
          public Listen setUploadType(java.lang.String uploadType) {
            return (Listen) super.setUploadType(uploadType);
          }

          @Override
          public Listen setUploadProtocol(java.lang.String uploadProtocol) {
            return (Listen) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public Listen setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Listen set(String parameterName, Object value) {
            return (Listen) super.set(parameterName, value);
          }
        }
        /**
         * Updates or inserts a document.
         *
         * Create a request for the method "documents.patch".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the document, for example
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.Document}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firestore.v1beta1.model.Document content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Document> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Updates or inserts a document.
           *
           * Create a request for the method "documents.patch".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the document, for example
         *        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.Document}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firestore.v1beta1.model.Document content) {
            super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.Document.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the document, for example
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the document, for example
         `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the document, for example
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.name = name;
            return this;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          @com.google.api.client.util.Key("currentDocument.exists")
          private java.lang.Boolean currentDocumentExists;

          /** When set to `true`, the target document must exist. When set to `false`, the target document must
         not exist.
           */
          public java.lang.Boolean getCurrentDocumentExists() {
            return currentDocumentExists;
          }

          /**
           * When set to `true`, the target document must exist. When set to `false`, the target
           * document must not exist.
           */
          public Patch setCurrentDocumentExists(java.lang.Boolean currentDocumentExists) {
            this.currentDocumentExists = currentDocumentExists;
            return this;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           */
          @com.google.api.client.util.Key("currentDocument.updateTime")
          private String currentDocumentUpdateTime;

          /** When set, the target document must exist and have been last updated at that time.
           */
          public String getCurrentDocumentUpdateTime() {
            return currentDocumentUpdateTime;
          }

          /**
           * When set, the target document must exist and have been last updated at that time.
           */
          public Patch setCurrentDocumentUpdateTime(String currentDocumentUpdateTime) {
            this.currentDocumentUpdateTime = currentDocumentUpdateTime;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("mask.fieldPaths")
          private java.util.List<java.lang.String> maskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getMaskFieldPaths() {
            return maskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Patch setMaskFieldPaths(java.util.List<java.lang.String> maskFieldPaths) {
            this.maskFieldPaths = maskFieldPaths;
            return this;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          @com.google.api.client.util.Key("updateMask.fieldPaths")
          private java.util.List<java.lang.String> updateMaskFieldPaths;

          /** The list of field paths in the mask. See Document.fields for a field path syntax reference.
           */
          public java.util.List<java.lang.String> getUpdateMaskFieldPaths() {
            return updateMaskFieldPaths;
          }

          /**
           * The list of field paths in the mask. See Document.fields for a field path syntax
           * reference.
           */
          public Patch setUpdateMaskFieldPaths(java.util.List<java.lang.String> updateMaskFieldPaths) {
            this.updateMaskFieldPaths = updateMaskFieldPaths;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Rolls back a transaction.
         *
         * Create a request for the method "documents.rollback".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.RollbackRequest}
         * @return the request
         */
        public Rollback rollback(java.lang.String database, com.google.api.services.firestore.v1beta1.model.RollbackRequest content) throws java.io.IOException {
          Rollback result = new Rollback(database, content);
          initialize(result);
          return result;
        }

        public class Rollback extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:rollback";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Rolls back a transaction.
           *
           * Create a request for the method "documents.rollback".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
           * <p> {@link
           * Rollback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.RollbackRequest}
           * @since 1.13
           */
          protected Rollback(java.lang.String database, com.google.api.services.firestore.v1beta1.model.RollbackRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.Empty.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Rollback set$Xgafv(java.lang.String $Xgafv) {
            return (Rollback) super.set$Xgafv($Xgafv);
          }

          @Override
          public Rollback setAccessToken(java.lang.String accessToken) {
            return (Rollback) super.setAccessToken(accessToken);
          }

          @Override
          public Rollback setAlt(java.lang.String alt) {
            return (Rollback) super.setAlt(alt);
          }

          @Override
          public Rollback setCallback(java.lang.String callback) {
            return (Rollback) super.setCallback(callback);
          }

          @Override
          public Rollback setFields(java.lang.String fields) {
            return (Rollback) super.setFields(fields);
          }

          @Override
          public Rollback setKey(java.lang.String key) {
            return (Rollback) super.setKey(key);
          }

          @Override
          public Rollback setOauthToken(java.lang.String oauthToken) {
            return (Rollback) super.setOauthToken(oauthToken);
          }

          @Override
          public Rollback setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Rollback) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Rollback setQuotaUser(java.lang.String quotaUser) {
            return (Rollback) super.setQuotaUser(quotaUser);
          }

          @Override
          public Rollback setUploadType(java.lang.String uploadType) {
            return (Rollback) super.setUploadType(uploadType);
          }

          @Override
          public Rollback setUploadProtocol(java.lang.String uploadProtocol) {
            return (Rollback) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`.
           */
          public Rollback setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Rollback set(String parameterName, Object value) {
            return (Rollback) super.set(parameterName, value);
          }
        }
        /**
         * Runs a query.
         *
         * Create a request for the method "documents.runQuery".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
         *
         * @param parent The parent resource name. In the format:
        `projects/{project_id}/databases/{database_id}/documents`
         *        or
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents` or
        `projects/my-project/databases
         *        /my-database/documents/chatrooms/my-chatroom`
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.RunQueryRequest}
         * @return the request
         */
        public RunQuery runQuery(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.RunQueryRequest content) throws java.io.IOException {
          RunQuery result = new RunQuery(parent, content);
          initialize(result);
          return result;
        }

        public class RunQuery extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.RunQueryResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}:runQuery";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");

          /**
           * Runs a query.
           *
           * Create a request for the method "documents.runQuery".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
           * <p> {@link
           * RunQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The parent resource name. In the format:
        `projects/{project_id}/databases/{database_id}/documents`
         *        or
        `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        For example:
         *        `projects/my-project/databases/my-database/documents` or
        `projects/my-project/databases
         *        /my-database/documents/chatrooms/my-chatroom`
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.RunQueryRequest}
           * @since 1.13
           */
          protected RunQuery(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.RunQueryRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.RunQueryResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
          }

          @Override
          public RunQuery set$Xgafv(java.lang.String $Xgafv) {
            return (RunQuery) super.set$Xgafv($Xgafv);
          }

          @Override
          public RunQuery setAccessToken(java.lang.String accessToken) {
            return (RunQuery) super.setAccessToken(accessToken);
          }

          @Override
          public RunQuery setAlt(java.lang.String alt) {
            return (RunQuery) super.setAlt(alt);
          }

          @Override
          public RunQuery setCallback(java.lang.String callback) {
            return (RunQuery) super.setCallback(callback);
          }

          @Override
          public RunQuery setFields(java.lang.String fields) {
            return (RunQuery) super.setFields(fields);
          }

          @Override
          public RunQuery setKey(java.lang.String key) {
            return (RunQuery) super.setKey(key);
          }

          @Override
          public RunQuery setOauthToken(java.lang.String oauthToken) {
            return (RunQuery) super.setOauthToken(oauthToken);
          }

          @Override
          public RunQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (RunQuery) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public RunQuery setQuotaUser(java.lang.String quotaUser) {
            return (RunQuery) super.setQuotaUser(quotaUser);
          }

          @Override
          public RunQuery setUploadType(java.lang.String uploadType) {
            return (RunQuery) super.setUploadType(uploadType);
          }

          @Override
          public RunQuery setUploadProtocol(java.lang.String uploadProtocol) {
            return (RunQuery) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-project/databases
           * /my-database/documents/chatrooms/my-chatroom`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents`
         or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
         `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-
         database/documents/chatrooms/my-chatroom`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example:
           * `projects/my-project/databases/my-database/documents` or `projects/my-project/databases
           * /my-database/documents/chatrooms/my-chatroom`
           */
          public RunQuery setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public RunQuery set(String parameterName, Object value) {
            return (RunQuery) super.set(parameterName, value);
          }
        }
        /**
         * Streams batches of document updates and deletes, in order.
         *
         * Create a request for the method "documents.write".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Write#execute()} method to invoke the remote operation.
         *
         * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
        This is only
         *        required in the first message.
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.WriteRequest}
         * @return the request
         */
        public Write write(java.lang.String database, com.google.api.services.firestore.v1beta1.model.WriteRequest content) throws java.io.IOException {
          Write result = new Write(database, content);
          initialize(result);
          return result;
        }

        public class Write extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.WriteResponse> {

          private static final String REST_PATH = "v1beta1/{+database}/documents:write";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Streams batches of document updates and deletes, in order.
           *
           * Create a request for the method "documents.write".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Write#execute()} method to invoke the remote operation.
           * <p> {@link
           * Write#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database The database name. In the format:
        `projects/{project_id}/databases/{database_id}`.
        This is only
         *        required in the first message.
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.WriteRequest}
           * @since 1.13
           */
          protected Write(java.lang.String database, com.google.api.services.firestore.v1beta1.model.WriteRequest content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.WriteResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Write set$Xgafv(java.lang.String $Xgafv) {
            return (Write) super.set$Xgafv($Xgafv);
          }

          @Override
          public Write setAccessToken(java.lang.String accessToken) {
            return (Write) super.setAccessToken(accessToken);
          }

          @Override
          public Write setAlt(java.lang.String alt) {
            return (Write) super.setAlt(alt);
          }

          @Override
          public Write setCallback(java.lang.String callback) {
            return (Write) super.setCallback(callback);
          }

          @Override
          public Write setFields(java.lang.String fields) {
            return (Write) super.setFields(fields);
          }

          @Override
          public Write setKey(java.lang.String key) {
            return (Write) super.setKey(key);
          }

          @Override
          public Write setOauthToken(java.lang.String oauthToken) {
            return (Write) super.setOauthToken(oauthToken);
          }

          @Override
          public Write setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Write) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Write setQuotaUser(java.lang.String quotaUser) {
            return (Write) super.setQuotaUser(quotaUser);
          }

          @Override
          public Write setUploadType(java.lang.String uploadType) {
            return (Write) super.setUploadType(uploadType);
          }

          @Override
          public Write setUploadProtocol(java.lang.String uploadProtocol) {
            return (Write) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`. This
           * is only required in the first message.
           */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is only
         required in the first message.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /**
           * The database name. In the format: `projects/{project_id}/databases/{database_id}`. This
           * is only required in the first message.
           */
          public Write setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public Write set(String parameterName, Object value) {
            return (Write) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Indexes collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.Indexes.List request = firestore.indexes().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Indexes indexes() {
        return new Indexes();
      }

      /**
       * The "indexes" collection of methods.
       */
      public class Indexes {

        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion
         * of the returned google.longrunning.Operation, the state will be `READY`. If the index already
         * exists, the call will return an `ALREADY_EXISTS` status.
         *
         * During creation, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, removing
         * the index with delete, then re-creating the index with create.
         *
         * Indexes with a single field cannot be created.
         *
         * Create a request for the method "indexes.create".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent The name of the database this index will apply to. For example:
         *        `projects/{project_id}/databases/{database_id}`
         * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation> {

          private static final String REST_PATH = "v1beta1/{+parent}/indexes";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Creates the specified index. A newly created index's initial state is `CREATING`. On completion
           * of the returned google.longrunning.Operation, the state will be `READY`. If the index already
           * exists, the call will return an `ALREADY_EXISTS` status.
           *
           * During creation, the process could result in an error, in which case the index will move to the
           * `ERROR` state. The process can be recovered by fixing the data that caused the error, removing
           * the index with delete, then re-creating the index with create.
           *
           * Indexes with a single field cannot be created.
           *
           * Create a request for the method "indexes.create".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The name of the database this index will apply to. For example:
         *        `projects/{project_id}/databases/{database_id}`
           * @param content the {@link com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index content) {
            super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta1.model.GoogleLongrunningOperation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The name of the database this index will apply to. For example:
           * `projects/{project_id}/databases/{database_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The name of the database this index will apply to. For example:
         `projects/{project_id}/databases/{database_id}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The name of the database this index will apply to. For example:
           * `projects/{project_id}/databases/{database_id}`
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes an index.
         *
         * Create a request for the method "indexes.delete".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The index name. For example:
        `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");

          /**
           * Deletes an index.
           *
           * Create a request for the method "indexes.delete".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The index name. For example:
        `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The index name. For example:
           * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The index name. For example: `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The index name. For example:
           * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets an index.
         *
         * Create a request for the method "indexes.get".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the index. For example:
         *        `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");

          /**
           * Gets an index.
           *
           * Create a request for the method "indexes.get".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the index. For example:
         *        `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1Index.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The name of the index. For example:
           * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the index. For example:
         `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The name of the index. For example:
           * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+/indexes/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the indexes that match the specified filters.
         *
         * Create a request for the method "indexes.list".
         *
         * This request holds the parameters needed by the firestore server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent The database name. For example:
        `projects/{project_id}/databases/{database_id}`
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirestoreRequest<com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ListIndexesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/indexes";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

          /**
           * Lists the indexes that match the specified filters.
           *
           * Create a request for the method "indexes.list".
           *
           * This request holds the parameters needed by the the firestore server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The database name. For example:
        `projects/{project_id}/databases/{database_id}`
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta1.model.GoogleFirestoreAdminV1beta1ListIndexesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The database name. For example: `projects/{project_id}/databases/{database_id}`
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The database name. For example: `projects/{project_id}/databases/{database_id}`
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The database name. For example: `projects/{project_id}/databases/{database_id}`
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/databases/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.String filter;

          /**

           */
          public java.lang.String getFilter() {
            return filter;
          }

          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard List page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard List page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard List page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard List page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard List page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard List page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link Firestore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Firestore}. */
    @Override
    public Firestore build() {
      return new Firestore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirestoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirestoreRequestInitializer(
        FirestoreRequestInitializer firestoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firestoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
