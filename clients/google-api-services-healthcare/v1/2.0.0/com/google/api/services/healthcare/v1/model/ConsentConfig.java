/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1.model;

/**
 * Configures whether to enforce consent for the FHIR store and which consent enforcement version is
 * being used.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConsentConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies how the server logs the consent-aware requests. If not specified, the
   * `AccessDeterminationLogConfig.LogLevel.MINIMUM` option is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AccessDeterminationLogConfig accessDeterminationLogConfig;

  /**
   * Optional. The default value is false. If set to true, when accessing FHIR resources, the
   * consent headers will be verified against consents given by patients. See the
   * ConsentEnforcementVersion for the supported consent headers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean accessEnforced;

  /**
   * Optional. Different options to configure the behaviour of the server when handling the
   * `X-Consent-Scope` header.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ConsentHeaderHandling consentHeaderHandling;

  /**
   * Output only. The versioned names of the enforced admin Consent resource(s), in the format `proj
   * ects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Co
   * nsent/{resource_id}/_history/{version_id}`. For FHIR stores with
   * `disable_resource_versioning=true`, the format is `projects/{project_id}/locations/{location}/d
   * atasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`. This field can
   * only be updated using ApplyAdminConsents.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> enforcedAdminConsents;

  /**
   * Required. Specifies which consent enforcement version is being used for this FHIR store. This
   * field can only be set once by either CreateFhirStore or UpdateFhirStore. After that, you must
   * call ApplyConsents to change the version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String version;

  /**
   * Optional. Specifies how the server logs the consent-aware requests. If not specified, the
   * `AccessDeterminationLogConfig.LogLevel.MINIMUM` option is used.
   * @return value or {@code null} for none
   */
  public AccessDeterminationLogConfig getAccessDeterminationLogConfig() {
    return accessDeterminationLogConfig;
  }

  /**
   * Optional. Specifies how the server logs the consent-aware requests. If not specified, the
   * `AccessDeterminationLogConfig.LogLevel.MINIMUM` option is used.
   * @param accessDeterminationLogConfig accessDeterminationLogConfig or {@code null} for none
   */
  public ConsentConfig setAccessDeterminationLogConfig(AccessDeterminationLogConfig accessDeterminationLogConfig) {
    this.accessDeterminationLogConfig = accessDeterminationLogConfig;
    return this;
  }

  /**
   * Optional. The default value is false. If set to true, when accessing FHIR resources, the
   * consent headers will be verified against consents given by patients. See the
   * ConsentEnforcementVersion for the supported consent headers.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAccessEnforced() {
    return accessEnforced;
  }

  /**
   * Optional. The default value is false. If set to true, when accessing FHIR resources, the
   * consent headers will be verified against consents given by patients. See the
   * ConsentEnforcementVersion for the supported consent headers.
   * @param accessEnforced accessEnforced or {@code null} for none
   */
  public ConsentConfig setAccessEnforced(java.lang.Boolean accessEnforced) {
    this.accessEnforced = accessEnforced;
    return this;
  }

  /**
   * Optional. Different options to configure the behaviour of the server when handling the
   * `X-Consent-Scope` header.
   * @return value or {@code null} for none
   */
  public ConsentHeaderHandling getConsentHeaderHandling() {
    return consentHeaderHandling;
  }

  /**
   * Optional. Different options to configure the behaviour of the server when handling the
   * `X-Consent-Scope` header.
   * @param consentHeaderHandling consentHeaderHandling or {@code null} for none
   */
  public ConsentConfig setConsentHeaderHandling(ConsentHeaderHandling consentHeaderHandling) {
    this.consentHeaderHandling = consentHeaderHandling;
    return this;
  }

  /**
   * Output only. The versioned names of the enforced admin Consent resource(s), in the format `proj
   * ects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Co
   * nsent/{resource_id}/_history/{version_id}`. For FHIR stores with
   * `disable_resource_versioning=true`, the format is `projects/{project_id}/locations/{location}/d
   * atasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`. This field can
   * only be updated using ApplyAdminConsents.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEnforcedAdminConsents() {
    return enforcedAdminConsents;
  }

  /**
   * Output only. The versioned names of the enforced admin Consent resource(s), in the format `proj
   * ects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Co
   * nsent/{resource_id}/_history/{version_id}`. For FHIR stores with
   * `disable_resource_versioning=true`, the format is `projects/{project_id}/locations/{location}/d
   * atasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`. This field can
   * only be updated using ApplyAdminConsents.
   * @param enforcedAdminConsents enforcedAdminConsents or {@code null} for none
   */
  public ConsentConfig setEnforcedAdminConsents(java.util.List<java.lang.String> enforcedAdminConsents) {
    this.enforcedAdminConsents = enforcedAdminConsents;
    return this;
  }

  /**
   * Required. Specifies which consent enforcement version is being used for this FHIR store. This
   * field can only be set once by either CreateFhirStore or UpdateFhirStore. After that, you must
   * call ApplyConsents to change the version.
   * @return value or {@code null} for none
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Required. Specifies which consent enforcement version is being used for this FHIR store. This
   * field can only be set once by either CreateFhirStore or UpdateFhirStore. After that, you must
   * call ApplyConsents to change the version.
   * @param version version or {@code null} for none
   */
  public ConsentConfig setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  @Override
  public ConsentConfig set(String fieldName, Object value) {
    return (ConsentConfig) super.set(fieldName, value);
  }

  @Override
  public ConsentConfig clone() {
    return (ConsentConfig) super.clone();
  }

}
