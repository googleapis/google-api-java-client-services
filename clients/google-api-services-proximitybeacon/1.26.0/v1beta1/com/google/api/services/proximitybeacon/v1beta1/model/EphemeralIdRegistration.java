/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1.model;

/**
 * Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely
 * registering an Eddystone-EID beacon with the service are supported:
 *
 * 1. Perform an ECDH key exchange via this API, including a previous call    to `GET
 * /v1beta1/eidparams`. In this case the fields    `beacon_ecdh_public_key` and
 * `service_ecdh_public_key` should be    populated and `beacon_identity_key` should not be
 * populated. This    method ensures that only the two parties in the ECDH key exchange can
 * compute the identity key, which becomes a secret between them. 2. Derive or obtain the beacon's
 * identity key via other secure means    (perhaps an ECDH key exchange between the beacon and a
 * mobile device    or any other secure method), and then submit the resulting identity key    to
 * the service. In this case `beacon_identity_key` field should be    populated, and neither of
 * `beacon_ecdh_public_key` nor    `service_ecdh_public_key` fields should be. The security of this
 * method    depends on how securely the parties involved (in particular the    bluetooth client)
 * handle the identity key, and obviously on how    securely the identity key was generated.
 *
 * See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
 * at GitHub.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Proximity Beacon API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EphemeralIdRegistration extends com.google.api.client.json.GenericJson {

  /**
   * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String beaconEcdhPublicKey;

  /**
   * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and
   * `service_ecdh_public_key` must not be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String beaconIdentityKey;

  /**
   * The initial clock value of the beacon. The beacon's clock must have begun counting at this
   * value immediately prior to transmitting this value to the resolving service. Significant delay
   * in transmitting this value to the service risks registration or resolution failures. If a value
   * is not provided, the default is zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger initialClockValue;

  /**
   * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`,
   * and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key`
   * and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm
   * that the key exchange process was successful.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String initialEid;

  /**
   * Indicates the nominal period between each rotation of the beacon's ephemeral ID. "Nominal"
   * because the beacon should randomize the actual interval. See [the spec at
   * github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value
   * corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the
   * beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long rotationPeriodExponent;

  /**
   * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceEcdhPublicKey;

  /**
   * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #decodeBeaconEcdhPublicKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getBeaconEcdhPublicKey() {
    return beaconEcdhPublicKey;
  }

  /**
   * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #getBeaconEcdhPublicKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeBeaconEcdhPublicKey() {
    return com.google.api.client.util.Base64.decodeBase64(beaconEcdhPublicKey);
  }

  /**
   * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #encodeBeaconEcdhPublicKey()
   * @param beaconEcdhPublicKey beaconEcdhPublicKey or {@code null} for none
   */
  public EphemeralIdRegistration setBeaconEcdhPublicKey(java.lang.String beaconEcdhPublicKey) {
    this.beaconEcdhPublicKey = beaconEcdhPublicKey;
    return this;
  }

  /**
   * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #setBeaconEcdhPublicKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public EphemeralIdRegistration encodeBeaconEcdhPublicKey(byte[] beaconEcdhPublicKey) {
    this.beaconEcdhPublicKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(beaconEcdhPublicKey);
    return this;
  }

  /**
   * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and
   * `service_ecdh_public_key` must not be populated.
   * @see #decodeBeaconIdentityKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getBeaconIdentityKey() {
    return beaconIdentityKey;
  }

  /**
   * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and
   * `service_ecdh_public_key` must not be populated.
   * @see #getBeaconIdentityKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeBeaconIdentityKey() {
    return com.google.api.client.util.Base64.decodeBase64(beaconIdentityKey);
  }

  /**
   * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and
   * `service_ecdh_public_key` must not be populated.
   * @see #encodeBeaconIdentityKey()
   * @param beaconIdentityKey beaconIdentityKey or {@code null} for none
   */
  public EphemeralIdRegistration setBeaconIdentityKey(java.lang.String beaconIdentityKey) {
    this.beaconIdentityKey = beaconIdentityKey;
    return this;
  }

  /**
   * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and
   * `service_ecdh_public_key` must not be populated.
   * @see #setBeaconIdentityKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public EphemeralIdRegistration encodeBeaconIdentityKey(byte[] beaconIdentityKey) {
    this.beaconIdentityKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(beaconIdentityKey);
    return this;
  }

  /**
   * The initial clock value of the beacon. The beacon's clock must have begun counting at this
   * value immediately prior to transmitting this value to the resolving service. Significant delay
   * in transmitting this value to the service risks registration or resolution failures. If a value
   * is not provided, the default is zero.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getInitialClockValue() {
    return initialClockValue;
  }

  /**
   * The initial clock value of the beacon. The beacon's clock must have begun counting at this
   * value immediately prior to transmitting this value to the resolving service. Significant delay
   * in transmitting this value to the service risks registration or resolution failures. If a value
   * is not provided, the default is zero.
   * @param initialClockValue initialClockValue or {@code null} for none
   */
  public EphemeralIdRegistration setInitialClockValue(java.math.BigInteger initialClockValue) {
    this.initialClockValue = initialClockValue;
    return this;
  }

  /**
   * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`,
   * and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key`
   * and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm
   * that the key exchange process was successful.
   * @see #decodeInitialEid()
   * @return value or {@code null} for none
   */
  public java.lang.String getInitialEid() {
    return initialEid;
  }

  /**
   * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`,
   * and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key`
   * and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm
   * that the key exchange process was successful.
   * @see #getInitialEid()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeInitialEid() {
    return com.google.api.client.util.Base64.decodeBase64(initialEid);
  }

  /**
   * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`,
   * and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key`
   * and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm
   * that the key exchange process was successful.
   * @see #encodeInitialEid()
   * @param initialEid initialEid or {@code null} for none
   */
  public EphemeralIdRegistration setInitialEid(java.lang.String initialEid) {
    this.initialEid = initialEid;
    return this;
  }

  /**
   * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`,
   * and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key`
   * and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm
   * that the key exchange process was successful.
   * @see #setInitialEid()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public EphemeralIdRegistration encodeInitialEid(byte[] initialEid) {
    this.initialEid = com.google.api.client.util.Base64.encodeBase64URLSafeString(initialEid);
    return this;
  }

  /**
   * Indicates the nominal period between each rotation of the beacon's ephemeral ID. "Nominal"
   * because the beacon should randomize the actual interval. See [the spec at
   * github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value
   * corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the
   * beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRotationPeriodExponent() {
    return rotationPeriodExponent;
  }

  /**
   * Indicates the nominal period between each rotation of the beacon's ephemeral ID. "Nominal"
   * because the beacon should randomize the actual interval. See [the spec at
   * github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value
   * corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the
   * beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.
   * @param rotationPeriodExponent rotationPeriodExponent or {@code null} for none
   */
  public EphemeralIdRegistration setRotationPeriodExponent(java.lang.Long rotationPeriodExponent) {
    this.rotationPeriodExponent = rotationPeriodExponent;
    return this;
  }

  /**
   * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #decodeServiceEcdhPublicKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceEcdhPublicKey() {
    return serviceEcdhPublicKey;
  }

  /**
   * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #getServiceEcdhPublicKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeServiceEcdhPublicKey() {
    return com.google.api.client.util.Base64.decodeBase64(serviceEcdhPublicKey);
  }

  /**
   * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #encodeServiceEcdhPublicKey()
   * @param serviceEcdhPublicKey serviceEcdhPublicKey or {@code null} for none
   */
  public EphemeralIdRegistration setServiceEcdhPublicKey(java.lang.String serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
    return this;
  }

  /**
   * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this
   * field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key`
   * must not be.
   * @see #setServiceEcdhPublicKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public EphemeralIdRegistration encodeServiceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(serviceEcdhPublicKey);
    return this;
  }

  @Override
  public EphemeralIdRegistration set(String fieldName, Object value) {
    return (EphemeralIdRegistration) super.set(fieldName, value);
  }

  @Override
  public EphemeralIdRegistration clone() {
    return (EphemeralIdRegistration) super.clone();
  }

}
