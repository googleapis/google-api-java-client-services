/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Features for the set of OnScreenText.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchOnScreenTextClusterFeature extends com.google.api.client.json.GenericJson {

  /**
   * Average confidence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageConfidence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageDurationRatio;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageHorizontalPosition;

  /**
   * Deprecated. Please use ocr_text_length_stats.median instead. The average length of anchor
   * labels. average_ocr_text_length is deprecated, because now ocr_text_length_stats has a field
   * for holding the same value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageOcrTextLength;

  /**
   * Deprecated. Please use text_height_ratio_stats.mean instead. Average value of text height ratio
   * (over image height), which is taken average over the same text.
   * average_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageOfAverageTextHeightRatio;

  /**
   * Average of label center position.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageVerticalPosition;

  /**
   * The number of anchors in the cluster over the number of anchors in the video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float clusterRatio;

  /**
   * The number of anchors in the cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer clusterSize;

  /**
   * The number of anchors that had a counting number over the number of anchors in total.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float countingNumberRatio;

  /**
   * Median, average and standard deviation of duration_ms among anchors in the same cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats durationMsStats;

  /**
   * Frame size ratio over total frames in video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float frameSizeRatio;

  /**
   * Average and standard deviation of logarithm of the length of labels among anchors in the same
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats logOcrTextLengthStats;

  /**
   * Average and standard deviation of log(average_text_height_ratio) among anchors in the same
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats logTextHeightRatioStats;

  /**
   * Average and standard deviation of log(1000 + duration_ms) among anchors in the same cluster.
   * Since duration_ms can be zero, 1000 is added before applying logarithm.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats logp1000DurationMsStats;

  /**
   * The maximum ratio of duration between two consecutive anchors to video duration. This is
   * calculated after all anchor filtering has been completed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float maxVideoDurationRatioBetweenAnchors;

  /**
   * Stats for ratio of frame time intervals, over total video time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float maximumDurationRatio;

  /**
   * The median cluster distance for the anchors in the cluster. The way the distance is calculated
   * will vary depending on the clustering method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianClusteringDistance;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianDurationRatio;

  /**
   * Deprecated. Please use text_height_ratio_stats.median instead. Median value of text height
   * ratio (over image height), which is taken average over the same text.
   * median_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianOfAverageTextHeightRatio;

  /**
   * Features for the overlap between OCR and ASR.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchOcrAsrSetFeature ocrAsrFeature;

  /**
   * Median, average and standard deviation of the length of labels among anchors in the same
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats ocrTextLengthStats;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float stddevDurationRatio;

  /**
   * Median, average and standard deviation of average_text_height_ratio among anchors in the same
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchMetricStats textHeightRatioStats;

  /**
   * Average confidence.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageConfidence() {
    return averageConfidence;
  }

  /**
   * Average confidence.
   * @param averageConfidence averageConfidence or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageConfidence(java.lang.Float averageConfidence) {
    this.averageConfidence = averageConfidence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageDurationRatio() {
    return averageDurationRatio;
  }

  /**
   * @param averageDurationRatio averageDurationRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageDurationRatio(java.lang.Float averageDurationRatio) {
    this.averageDurationRatio = averageDurationRatio;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageHorizontalPosition() {
    return averageHorizontalPosition;
  }

  /**
   * @param averageHorizontalPosition averageHorizontalPosition or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageHorizontalPosition(java.lang.Float averageHorizontalPosition) {
    this.averageHorizontalPosition = averageHorizontalPosition;
    return this;
  }

  /**
   * Deprecated. Please use ocr_text_length_stats.median instead. The average length of anchor
   * labels. average_ocr_text_length is deprecated, because now ocr_text_length_stats has a field
   * for holding the same value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageOcrTextLength() {
    return averageOcrTextLength;
  }

  /**
   * Deprecated. Please use ocr_text_length_stats.median instead. The average length of anchor
   * labels. average_ocr_text_length is deprecated, because now ocr_text_length_stats has a field
   * for holding the same value.
   * @param averageOcrTextLength averageOcrTextLength or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageOcrTextLength(java.lang.Float averageOcrTextLength) {
    this.averageOcrTextLength = averageOcrTextLength;
    return this;
  }

  /**
   * Deprecated. Please use text_height_ratio_stats.mean instead. Average value of text height ratio
   * (over image height), which is taken average over the same text.
   * average_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageOfAverageTextHeightRatio() {
    return averageOfAverageTextHeightRatio;
  }

  /**
   * Deprecated. Please use text_height_ratio_stats.mean instead. Average value of text height ratio
   * (over image height), which is taken average over the same text.
   * average_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * @param averageOfAverageTextHeightRatio averageOfAverageTextHeightRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageOfAverageTextHeightRatio(java.lang.Float averageOfAverageTextHeightRatio) {
    this.averageOfAverageTextHeightRatio = averageOfAverageTextHeightRatio;
    return this;
  }

  /**
   * Average of label center position.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageVerticalPosition() {
    return averageVerticalPosition;
  }

  /**
   * Average of label center position.
   * @param averageVerticalPosition averageVerticalPosition or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setAverageVerticalPosition(java.lang.Float averageVerticalPosition) {
    this.averageVerticalPosition = averageVerticalPosition;
    return this;
  }

  /**
   * The number of anchors in the cluster over the number of anchors in the video.
   * @return value or {@code null} for none
   */
  public java.lang.Float getClusterRatio() {
    return clusterRatio;
  }

  /**
   * The number of anchors in the cluster over the number of anchors in the video.
   * @param clusterRatio clusterRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setClusterRatio(java.lang.Float clusterRatio) {
    this.clusterRatio = clusterRatio;
    return this;
  }

  /**
   * The number of anchors in the cluster.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getClusterSize() {
    return clusterSize;
  }

  /**
   * The number of anchors in the cluster.
   * @param clusterSize clusterSize or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setClusterSize(java.lang.Integer clusterSize) {
    this.clusterSize = clusterSize;
    return this;
  }

  /**
   * The number of anchors that had a counting number over the number of anchors in total.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCountingNumberRatio() {
    return countingNumberRatio;
  }

  /**
   * The number of anchors that had a counting number over the number of anchors in total.
   * @param countingNumberRatio countingNumberRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setCountingNumberRatio(java.lang.Float countingNumberRatio) {
    this.countingNumberRatio = countingNumberRatio;
    return this;
  }

  /**
   * Median, average and standard deviation of duration_ms among anchors in the same cluster.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getDurationMsStats() {
    return durationMsStats;
  }

  /**
   * Median, average and standard deviation of duration_ms among anchors in the same cluster.
   * @param durationMsStats durationMsStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setDurationMsStats(VideoContentSearchMetricStats durationMsStats) {
    this.durationMsStats = durationMsStats;
    return this;
  }

  /**
   * Frame size ratio over total frames in video.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFrameSizeRatio() {
    return frameSizeRatio;
  }

  /**
   * Frame size ratio over total frames in video.
   * @param frameSizeRatio frameSizeRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setFrameSizeRatio(java.lang.Float frameSizeRatio) {
    this.frameSizeRatio = frameSizeRatio;
    return this;
  }

  /**
   * Average and standard deviation of logarithm of the length of labels among anchors in the same
   * cluster.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getLogOcrTextLengthStats() {
    return logOcrTextLengthStats;
  }

  /**
   * Average and standard deviation of logarithm of the length of labels among anchors in the same
   * cluster.
   * @param logOcrTextLengthStats logOcrTextLengthStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setLogOcrTextLengthStats(VideoContentSearchMetricStats logOcrTextLengthStats) {
    this.logOcrTextLengthStats = logOcrTextLengthStats;
    return this;
  }

  /**
   * Average and standard deviation of log(average_text_height_ratio) among anchors in the same
   * cluster.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getLogTextHeightRatioStats() {
    return logTextHeightRatioStats;
  }

  /**
   * Average and standard deviation of log(average_text_height_ratio) among anchors in the same
   * cluster.
   * @param logTextHeightRatioStats logTextHeightRatioStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setLogTextHeightRatioStats(VideoContentSearchMetricStats logTextHeightRatioStats) {
    this.logTextHeightRatioStats = logTextHeightRatioStats;
    return this;
  }

  /**
   * Average and standard deviation of log(1000 + duration_ms) among anchors in the same cluster.
   * Since duration_ms can be zero, 1000 is added before applying logarithm.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getLogp1000DurationMsStats() {
    return logp1000DurationMsStats;
  }

  /**
   * Average and standard deviation of log(1000 + duration_ms) among anchors in the same cluster.
   * Since duration_ms can be zero, 1000 is added before applying logarithm.
   * @param logp1000DurationMsStats logp1000DurationMsStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setLogp1000DurationMsStats(VideoContentSearchMetricStats logp1000DurationMsStats) {
    this.logp1000DurationMsStats = logp1000DurationMsStats;
    return this;
  }

  /**
   * The maximum ratio of duration between two consecutive anchors to video duration. This is
   * calculated after all anchor filtering has been completed.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMaxVideoDurationRatioBetweenAnchors() {
    return maxVideoDurationRatioBetweenAnchors;
  }

  /**
   * The maximum ratio of duration between two consecutive anchors to video duration. This is
   * calculated after all anchor filtering has been completed.
   * @param maxVideoDurationRatioBetweenAnchors maxVideoDurationRatioBetweenAnchors or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setMaxVideoDurationRatioBetweenAnchors(java.lang.Float maxVideoDurationRatioBetweenAnchors) {
    this.maxVideoDurationRatioBetweenAnchors = maxVideoDurationRatioBetweenAnchors;
    return this;
  }

  /**
   * Stats for ratio of frame time intervals, over total video time.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMaximumDurationRatio() {
    return maximumDurationRatio;
  }

  /**
   * Stats for ratio of frame time intervals, over total video time.
   * @param maximumDurationRatio maximumDurationRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setMaximumDurationRatio(java.lang.Float maximumDurationRatio) {
    this.maximumDurationRatio = maximumDurationRatio;
    return this;
  }

  /**
   * The median cluster distance for the anchors in the cluster. The way the distance is calculated
   * will vary depending on the clustering method.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianClusteringDistance() {
    return medianClusteringDistance;
  }

  /**
   * The median cluster distance for the anchors in the cluster. The way the distance is calculated
   * will vary depending on the clustering method.
   * @param medianClusteringDistance medianClusteringDistance or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setMedianClusteringDistance(java.lang.Float medianClusteringDistance) {
    this.medianClusteringDistance = medianClusteringDistance;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianDurationRatio() {
    return medianDurationRatio;
  }

  /**
   * @param medianDurationRatio medianDurationRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setMedianDurationRatio(java.lang.Float medianDurationRatio) {
    this.medianDurationRatio = medianDurationRatio;
    return this;
  }

  /**
   * Deprecated. Please use text_height_ratio_stats.median instead. Median value of text height
   * ratio (over image height), which is taken average over the same text.
   * median_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianOfAverageTextHeightRatio() {
    return medianOfAverageTextHeightRatio;
  }

  /**
   * Deprecated. Please use text_height_ratio_stats.median instead. Median value of text height
   * ratio (over image height), which is taken average over the same text.
   * median_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a
   * field for keeping the same value.
   * @param medianOfAverageTextHeightRatio medianOfAverageTextHeightRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setMedianOfAverageTextHeightRatio(java.lang.Float medianOfAverageTextHeightRatio) {
    this.medianOfAverageTextHeightRatio = medianOfAverageTextHeightRatio;
    return this;
  }

  /**
   * Features for the overlap between OCR and ASR.
   * @return value or {@code null} for none
   */
  public VideoContentSearchOcrAsrSetFeature getOcrAsrFeature() {
    return ocrAsrFeature;
  }

  /**
   * Features for the overlap between OCR and ASR.
   * @param ocrAsrFeature ocrAsrFeature or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setOcrAsrFeature(VideoContentSearchOcrAsrSetFeature ocrAsrFeature) {
    this.ocrAsrFeature = ocrAsrFeature;
    return this;
  }

  /**
   * Median, average and standard deviation of the length of labels among anchors in the same
   * cluster.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getOcrTextLengthStats() {
    return ocrTextLengthStats;
  }

  /**
   * Median, average and standard deviation of the length of labels among anchors in the same
   * cluster.
   * @param ocrTextLengthStats ocrTextLengthStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setOcrTextLengthStats(VideoContentSearchMetricStats ocrTextLengthStats) {
    this.ocrTextLengthStats = ocrTextLengthStats;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getStddevDurationRatio() {
    return stddevDurationRatio;
  }

  /**
   * @param stddevDurationRatio stddevDurationRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setStddevDurationRatio(java.lang.Float stddevDurationRatio) {
    this.stddevDurationRatio = stddevDurationRatio;
    return this;
  }

  /**
   * Median, average and standard deviation of average_text_height_ratio among anchors in the same
   * cluster.
   * @return value or {@code null} for none
   */
  public VideoContentSearchMetricStats getTextHeightRatioStats() {
    return textHeightRatioStats;
  }

  /**
   * Median, average and standard deviation of average_text_height_ratio among anchors in the same
   * cluster.
   * @param textHeightRatioStats textHeightRatioStats or {@code null} for none
   */
  public VideoContentSearchOnScreenTextClusterFeature setTextHeightRatioStats(VideoContentSearchMetricStats textHeightRatioStats) {
    this.textHeightRatioStats = textHeightRatioStats;
    return this;
  }

  @Override
  public VideoContentSearchOnScreenTextClusterFeature set(String fieldName, Object value) {
    return (VideoContentSearchOnScreenTextClusterFeature) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchOnScreenTextClusterFeature clone() {
    return (VideoContentSearchOnScreenTextClusterFeature) super.clone();
  }

}
