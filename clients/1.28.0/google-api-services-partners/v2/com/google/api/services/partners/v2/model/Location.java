/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.partners.v2.model;

/**
 * A location with address and geographic coordinates. May optionally contain a detailed (multi-
 * field) version of the address.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Partners API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Location extends com.google.api.client.json.GenericJson {

  /**
   * The single string version of the address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String address;

  /**
   * The following address lines represent the most specific part of any address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> addressLine;

  /**
   * Top-level administrative subdivision of this country.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String administrativeArea;

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dependentLocality;

  /**
   * Language code of the address. Should be in BCP 47 format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * The latitude and longitude of the location, in degrees.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLng latLng;

  /**
   * Generally refers to the city/town portion of an address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locality;

  /**
   * Values are frequently alphanumeric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postalCode;

  /**
   * CLDR (Common Locale Data Repository) region code .
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String regionCode;

  /**
   * Use of this code is very country-specific, but will refer to a secondary classification code
   * for sorting mail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sortingCode;

  /**
   * The single string version of the address.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * The single string version of the address.
   * @param address address or {@code null} for none
   */
  public Location setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  /**
   * The following address lines represent the most specific part of any address.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAddressLine() {
    return addressLine;
  }

  /**
   * The following address lines represent the most specific part of any address.
   * @param addressLine addressLine or {@code null} for none
   */
  public Location setAddressLine(java.util.List<java.lang.String> addressLine) {
    this.addressLine = addressLine;
    return this;
  }

  /**
   * Top-level administrative subdivision of this country.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdministrativeArea() {
    return administrativeArea;
  }

  /**
   * Top-level administrative subdivision of this country.
   * @param administrativeArea administrativeArea or {@code null} for none
   */
  public Location setAdministrativeArea(java.lang.String administrativeArea) {
    this.administrativeArea = administrativeArea;
    return this;
  }

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations.
   * @return value or {@code null} for none
   */
  public java.lang.String getDependentLocality() {
    return dependentLocality;
  }

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations.
   * @param dependentLocality dependentLocality or {@code null} for none
   */
  public Location setDependentLocality(java.lang.String dependentLocality) {
    this.dependentLocality = dependentLocality;
    return this;
  }

  /**
   * Language code of the address. Should be in BCP 47 format.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Language code of the address. Should be in BCP 47 format.
   * @param languageCode languageCode or {@code null} for none
   */
  public Location setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The latitude and longitude of the location, in degrees.
   * @return value or {@code null} for none
   */
  public LatLng getLatLng() {
    return latLng;
  }

  /**
   * The latitude and longitude of the location, in degrees.
   * @param latLng latLng or {@code null} for none
   */
  public Location setLatLng(LatLng latLng) {
    this.latLng = latLng;
    return this;
  }

  /**
   * Generally refers to the city/town portion of an address.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocality() {
    return locality;
  }

  /**
   * Generally refers to the city/town portion of an address.
   * @param locality locality or {@code null} for none
   */
  public Location setLocality(java.lang.String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * Values are frequently alphanumeric.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostalCode() {
    return postalCode;
  }

  /**
   * Values are frequently alphanumeric.
   * @param postalCode postalCode or {@code null} for none
   */
  public Location setPostalCode(java.lang.String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * CLDR (Common Locale Data Repository) region code .
   * @return value or {@code null} for none
   */
  public java.lang.String getRegionCode() {
    return regionCode;
  }

  /**
   * CLDR (Common Locale Data Repository) region code .
   * @param regionCode regionCode or {@code null} for none
   */
  public Location setRegionCode(java.lang.String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Use of this code is very country-specific, but will refer to a secondary classification code
   * for sorting mail.
   * @return value or {@code null} for none
   */
  public java.lang.String getSortingCode() {
    return sortingCode;
  }

  /**
   * Use of this code is very country-specific, but will refer to a secondary classification code
   * for sorting mail.
   * @param sortingCode sortingCode or {@code null} for none
   */
  public Location setSortingCode(java.lang.String sortingCode) {
    this.sortingCode = sortingCode;
    return this;
  }

  @Override
  public Location set(String fieldName, Object value) {
    return (Location) super.set(fieldName, value);
  }

  @Override
  public Location clone() {
    return (Location) super.clone();
  }

}
