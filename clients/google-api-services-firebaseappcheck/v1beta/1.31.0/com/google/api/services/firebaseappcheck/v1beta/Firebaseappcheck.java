/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseappcheck.v1beta;

/**
 * Service definition for Firebaseappcheck (v1beta).
 *
 * <p>
 * Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/app-check" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseappcheckRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Firebaseappcheck extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.32.1 of the Firebase App Check API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebaseappcheck.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebaseappcheck.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Firebaseappcheck(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Firebaseappcheck(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Jwks collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
   *   {@code Firebaseappcheck.Jwks.List request = firebaseappcheck.jwks().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Jwks jwks() {
    return new Jwks();
  }

  /**
   * The "jwks" collection of methods.
   */
  public class Jwks {

    /**
     * Returns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that can
     * be used to verify App Check tokens. Exactly one of the public keys in the returned set will
     * successfully validate any App Check token that is currently valid.
     *
     * Create a request for the method "jwks.get".
     *
     * This request holds the parameters needed by the firebaseappcheck server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name Required. The relative resource name to the public JWK set. Must always be exactly the string
     *        `jwks`.
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPublicJwkSet> {

      private static final String REST_PATH = "v1beta/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^jwks$");

      /**
       * Returns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that
       * can be used to verify App Check tokens. Exactly one of the public keys in the returned set will
       * successfully validate any App Check token that is currently valid.
       *
       * Create a request for the method "jwks.get".
       *
       * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The relative resource name to the public JWK set. Must always be exactly the string
     *        `jwks`.
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPublicJwkSet.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^jwks$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The relative resource name to the public JWK set. Must always be exactly the
       * string `jwks`.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The relative resource name to the public JWK set. Must always be exactly the string
     `jwks`.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The relative resource name to the public JWK set. Must always be exactly the
       * string `jwks`.
       */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^jwks$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
   *   {@code Firebaseappcheck.Projects.List request = firebaseappcheck.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Apps collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
     *   {@code Firebaseappcheck.Apps.List request = firebaseappcheck.apps().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Apps apps() {
      return new Apps();
    }

    /**
     * The "apps" collection of methods.
     */
    public class Apps {

      /**
       * Accepts an App Attest assertion and an artifact previously obtained from
       * ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeAppAttestAssertion".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeAppAttestAssertion#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest}
       * @return the request
       */
      public ExchangeAppAttestAssertion exchangeAppAttestAssertion(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest content) throws java.io.IOException {
        ExchangeAppAttestAssertion result = new ExchangeAppAttestAssertion(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeAppAttestAssertion extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeAppAttestAssertion";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Accepts an App Attest assertion and an artifact previously obtained from
         * ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangeAppAttestAssertion".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeAppAttestAssertion#execute()} method to invoke the
         * remote operation. <p> {@link ExchangeAppAttestAssertion#initialize(com.google.api.client.google
         * apis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest}
         * @since 1.13
         */
        protected ExchangeAppAttestAssertion(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeAppAttestAssertion set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeAppAttestAssertion) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeAppAttestAssertion setAccessToken(java.lang.String accessToken) {
          return (ExchangeAppAttestAssertion) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeAppAttestAssertion setAlt(java.lang.String alt) {
          return (ExchangeAppAttestAssertion) super.setAlt(alt);
        }

        @Override
        public ExchangeAppAttestAssertion setCallback(java.lang.String callback) {
          return (ExchangeAppAttestAssertion) super.setCallback(callback);
        }

        @Override
        public ExchangeAppAttestAssertion setFields(java.lang.String fields) {
          return (ExchangeAppAttestAssertion) super.setFields(fields);
        }

        @Override
        public ExchangeAppAttestAssertion setKey(java.lang.String key) {
          return (ExchangeAppAttestAssertion) super.setKey(key);
        }

        @Override
        public ExchangeAppAttestAssertion setOauthToken(java.lang.String oauthToken) {
          return (ExchangeAppAttestAssertion) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeAppAttestAssertion setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeAppAttestAssertion) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeAppAttestAssertion setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeAppAttestAssertion) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeAppAttestAssertion setUploadType(java.lang.String uploadType) {
          return (ExchangeAppAttestAssertion) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeAppAttestAssertion setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeAppAttestAssertion) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the iOS app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeAppAttestAssertion setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeAppAttestAssertion set(String parameterName, Object value) {
          return (ExchangeAppAttestAssertion) super.set(parameterName, value);
        }
      }
      /**
       * Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team
       * and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an
       * AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's
       * response object will also contain an AppCheckToken (if the verification is successful).
       *
       * Create a request for the method "apps.exchangeAppAttestAttestation".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeAppAttestAttestation#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest}
       * @return the request
       */
      public ExchangeAppAttestAttestation exchangeAppAttestAttestation(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest content) throws java.io.IOException {
        ExchangeAppAttestAttestation result = new ExchangeAppAttestAttestation(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeAppAttestAttestation extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeAppAttestAttestation";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team
         * and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an
         * AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's
         * response object will also contain an AppCheckToken (if the verification is successful).
         *
         * Create a request for the method "apps.exchangeAppAttestAttestation".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeAppAttestAttestation#execute()} method to invoke
         * the remote operation. <p> {@link ExchangeAppAttestAttestation#initialize(com.google.api.client.
         * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest}
         * @since 1.13
         */
        protected ExchangeAppAttestAttestation(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeAppAttestAttestation set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeAppAttestAttestation) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeAppAttestAttestation setAccessToken(java.lang.String accessToken) {
          return (ExchangeAppAttestAttestation) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeAppAttestAttestation setAlt(java.lang.String alt) {
          return (ExchangeAppAttestAttestation) super.setAlt(alt);
        }

        @Override
        public ExchangeAppAttestAttestation setCallback(java.lang.String callback) {
          return (ExchangeAppAttestAttestation) super.setCallback(callback);
        }

        @Override
        public ExchangeAppAttestAttestation setFields(java.lang.String fields) {
          return (ExchangeAppAttestAttestation) super.setFields(fields);
        }

        @Override
        public ExchangeAppAttestAttestation setKey(java.lang.String key) {
          return (ExchangeAppAttestAttestation) super.setKey(key);
        }

        @Override
        public ExchangeAppAttestAttestation setOauthToken(java.lang.String oauthToken) {
          return (ExchangeAppAttestAttestation) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeAppAttestAttestation setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeAppAttestAttestation) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeAppAttestAttestation setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeAppAttestAttestation) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeAppAttestAttestation setUploadType(java.lang.String uploadType) {
          return (ExchangeAppAttestAttestation) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeAppAttestAttestation setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeAppAttestAttestation) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the iOS app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeAppAttestAttestation setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeAppAttestAttestation set(String parameterName, Object value) {
          return (ExchangeAppAttestAttestation) super.set(parameterName, value);
        }
      }
      /**
       * Validates a custom token signed using your project's Admin SDK service account credentials. If
       * valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeCustomToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeCustomToken#execute()} method to invoke the remote
       * operation.
       *
       * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest}
       * @return the request
       */
      public ExchangeCustomToken exchangeCustomToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest content) throws java.io.IOException {
        ExchangeCustomToken result = new ExchangeCustomToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeCustomToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeCustomToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates a custom token signed using your project's Admin SDK service account credentials. If
         * valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangeCustomToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeCustomToken#execute()} method to invoke the remote
         * operation. <p> {@link ExchangeCustomToken#initialize(com.google.api.client.googleapis.services.
         * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest}
         * @since 1.13
         */
        protected ExchangeCustomToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeCustomToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeCustomToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeCustomToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeCustomToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeCustomToken setAlt(java.lang.String alt) {
          return (ExchangeCustomToken) super.setAlt(alt);
        }

        @Override
        public ExchangeCustomToken setCallback(java.lang.String callback) {
          return (ExchangeCustomToken) super.setCallback(callback);
        }

        @Override
        public ExchangeCustomToken setFields(java.lang.String fields) {
          return (ExchangeCustomToken) super.setFields(fields);
        }

        @Override
        public ExchangeCustomToken setKey(java.lang.String key) {
          return (ExchangeCustomToken) super.setKey(key);
        }

        @Override
        public ExchangeCustomToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeCustomToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeCustomToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeCustomToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeCustomToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeCustomToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeCustomToken setUploadType(java.lang.String uploadType) {
          return (ExchangeCustomToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeCustomToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeCustomToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeCustomToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeCustomToken set(String parameterName, Object value) {
          return (ExchangeCustomToken) super.set(parameterName, value);
        }
      }
      /**
       * Validates a debug token secret that you have previously created using CreateDebugToken. If valid,
       * returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent
       * accidental exposure of the app to abuse.
       *
       * Create a request for the method "apps.exchangeDebugToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeDebugToken#execute()} method to invoke the remote
       * operation.
       *
       * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest}
       * @return the request
       */
      public ExchangeDebugToken exchangeDebugToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest content) throws java.io.IOException {
        ExchangeDebugToken result = new ExchangeDebugToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeDebugToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeDebugToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates a debug token secret that you have previously created using CreateDebugToken. If
         * valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to
         * prevent accidental exposure of the app to abuse.
         *
         * Create a request for the method "apps.exchangeDebugToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeDebugToken#execute()} method to invoke the remote
         * operation. <p> {@link ExchangeDebugToken#initialize(com.google.api.client.googleapis.services.A
         * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest}
         * @since 1.13
         */
        protected ExchangeDebugToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeDebugToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeDebugToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeDebugToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeDebugToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeDebugToken setAlt(java.lang.String alt) {
          return (ExchangeDebugToken) super.setAlt(alt);
        }

        @Override
        public ExchangeDebugToken setCallback(java.lang.String callback) {
          return (ExchangeDebugToken) super.setCallback(callback);
        }

        @Override
        public ExchangeDebugToken setFields(java.lang.String fields) {
          return (ExchangeDebugToken) super.setFields(fields);
        }

        @Override
        public ExchangeDebugToken setKey(java.lang.String key) {
          return (ExchangeDebugToken) super.setKey(key);
        }

        @Override
        public ExchangeDebugToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeDebugToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeDebugToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeDebugToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeDebugToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeDebugToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeDebugToken setUploadType(java.lang.String uploadType) {
          return (ExchangeDebugToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeDebugToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeDebugToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeDebugToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeDebugToken set(String parameterName, Object value) {
          return (ExchangeDebugToken) super.set(parameterName, value);
        }
      }
      /**
       * Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued
       * by DeviceCheck, and attempts to validate it with Apple. If valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeDeviceCheckToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeDeviceCheckToken#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest}
       * @return the request
       */
      public ExchangeDeviceCheckToken exchangeDeviceCheckToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest content) throws java.io.IOException {
        ExchangeDeviceCheckToken result = new ExchangeDeviceCheckToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeDeviceCheckToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeDeviceCheckToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice)
         * issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an
         * AppCheckToken.
         *
         * Create a request for the method "apps.exchangeDeviceCheckToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeDeviceCheckToken#execute()} method to invoke the
         * remote operation. <p> {@link ExchangeDeviceCheckToken#initialize(com.google.api.client.googleap
         * is.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest}
         * @since 1.13
         */
        protected ExchangeDeviceCheckToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeDeviceCheckToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeDeviceCheckToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeDeviceCheckToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeDeviceCheckToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeDeviceCheckToken setAlt(java.lang.String alt) {
          return (ExchangeDeviceCheckToken) super.setAlt(alt);
        }

        @Override
        public ExchangeDeviceCheckToken setCallback(java.lang.String callback) {
          return (ExchangeDeviceCheckToken) super.setCallback(callback);
        }

        @Override
        public ExchangeDeviceCheckToken setFields(java.lang.String fields) {
          return (ExchangeDeviceCheckToken) super.setFields(fields);
        }

        @Override
        public ExchangeDeviceCheckToken setKey(java.lang.String key) {
          return (ExchangeDeviceCheckToken) super.setKey(key);
        }

        @Override
        public ExchangeDeviceCheckToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeDeviceCheckToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeDeviceCheckToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeDeviceCheckToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeDeviceCheckToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeDeviceCheckToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeDeviceCheckToken setUploadType(java.lang.String uploadType) {
          return (ExchangeDeviceCheckToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeDeviceCheckToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeDeviceCheckToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the iOS app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeDeviceCheckToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeDeviceCheckToken set(String parameterName, Object value) {
          return (ExchangeDeviceCheckToken) super.set(parameterName, value);
        }
      }
      /**
       * Validates an [integrity verdict response token from Play
       * Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If valid,
       * returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangePlayIntegrityToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangePlayIntegrityToken#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the Android app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest}
       * @return the request
       */
      public ExchangePlayIntegrityToken exchangePlayIntegrityToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest content) throws java.io.IOException {
        ExchangePlayIntegrityToken result = new ExchangePlayIntegrityToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangePlayIntegrityToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangePlayIntegrityToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates an [integrity verdict response token from Play
         * Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If
         * valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangePlayIntegrityToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangePlayIntegrityToken#execute()} method to invoke the
         * remote operation. <p> {@link ExchangePlayIntegrityToken#initialize(com.google.api.client.google
         * apis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the Android app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest}
         * @since 1.13
         */
        protected ExchangePlayIntegrityToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangePlayIntegrityToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangePlayIntegrityToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangePlayIntegrityToken setAccessToken(java.lang.String accessToken) {
          return (ExchangePlayIntegrityToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangePlayIntegrityToken setAlt(java.lang.String alt) {
          return (ExchangePlayIntegrityToken) super.setAlt(alt);
        }

        @Override
        public ExchangePlayIntegrityToken setCallback(java.lang.String callback) {
          return (ExchangePlayIntegrityToken) super.setCallback(callback);
        }

        @Override
        public ExchangePlayIntegrityToken setFields(java.lang.String fields) {
          return (ExchangePlayIntegrityToken) super.setFields(fields);
        }

        @Override
        public ExchangePlayIntegrityToken setKey(java.lang.String key) {
          return (ExchangePlayIntegrityToken) super.setKey(key);
        }

        @Override
        public ExchangePlayIntegrityToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangePlayIntegrityToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangePlayIntegrityToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangePlayIntegrityToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangePlayIntegrityToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangePlayIntegrityToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangePlayIntegrityToken setUploadType(java.lang.String uploadType) {
          return (ExchangePlayIntegrityToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangePlayIntegrityToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangePlayIntegrityToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the Android app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the Android app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the Android app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangePlayIntegrityToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangePlayIntegrityToken set(String parameterName, Object value) {
          return (ExchangePlayIntegrityToken) super.set(parameterName, value);
        }
      }
      /**
       * Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-
       * enterprise/docs/create-assessment#retrieve_token). If valid, returns an App Check token
       * AppCheckToken.
       *
       * Create a request for the method "apps.exchangeRecaptchaEnterpriseToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeRecaptchaEnterpriseToken#execute()} method to invoke
       * the remote operation.
       *
       * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest}
       * @return the request
       */
      public ExchangeRecaptchaEnterpriseToken exchangeRecaptchaEnterpriseToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest content) throws java.io.IOException {
        ExchangeRecaptchaEnterpriseToken result = new ExchangeRecaptchaEnterpriseToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeRecaptchaEnterpriseToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeRecaptchaEnterpriseToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-
         * enterprise/docs/create-assessment#retrieve_token). If valid, returns an App Check token
         * AppCheckToken.
         *
         * Create a request for the method "apps.exchangeRecaptchaEnterpriseToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeRecaptchaEnterpriseToken#execute()} method to
         * invoke the remote operation. <p> {@link ExchangeRecaptchaEnterpriseToken#initialize(com.google.
         * api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
         * instance immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest}
         * @since 1.13
         */
        protected ExchangeRecaptchaEnterpriseToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeRecaptchaEnterpriseToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeRecaptchaEnterpriseToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setAlt(java.lang.String alt) {
          return (ExchangeRecaptchaEnterpriseToken) super.setAlt(alt);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setCallback(java.lang.String callback) {
          return (ExchangeRecaptchaEnterpriseToken) super.setCallback(callback);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setFields(java.lang.String fields) {
          return (ExchangeRecaptchaEnterpriseToken) super.setFields(fields);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setKey(java.lang.String key) {
          return (ExchangeRecaptchaEnterpriseToken) super.setKey(key);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeRecaptchaEnterpriseToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeRecaptchaEnterpriseToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeRecaptchaEnterpriseToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setUploadType(java.lang.String uploadType) {
          return (ExchangeRecaptchaEnterpriseToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeRecaptchaEnterpriseToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the web app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeRecaptchaEnterpriseToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeRecaptchaEnterpriseToken set(String parameterName, Object value) {
          return (ExchangeRecaptchaEnterpriseToken) super.set(parameterName, value);
        }
      }
      /**
       * This method has been renamed to ExchangeRecaptchaV3Token. Validates a [reCAPTCHA v3 response
       * token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeRecaptchaToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeRecaptchaToken#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest}
       * @return the request
       */
      public ExchangeRecaptchaToken exchangeRecaptchaToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest content) throws java.io.IOException {
        ExchangeRecaptchaToken result = new ExchangeRecaptchaToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeRecaptchaToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeRecaptchaToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * This method has been renamed to ExchangeRecaptchaV3Token. Validates a [reCAPTCHA v3 response
         * token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangeRecaptchaToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeRecaptchaToken#execute()} method to invoke the
         * remote operation. <p> {@link ExchangeRecaptchaToken#initialize(com.google.api.client.googleapis
         * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest}
         * @since 1.13
         */
        protected ExchangeRecaptchaToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeRecaptchaToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeRecaptchaToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeRecaptchaToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeRecaptchaToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeRecaptchaToken setAlt(java.lang.String alt) {
          return (ExchangeRecaptchaToken) super.setAlt(alt);
        }

        @Override
        public ExchangeRecaptchaToken setCallback(java.lang.String callback) {
          return (ExchangeRecaptchaToken) super.setCallback(callback);
        }

        @Override
        public ExchangeRecaptchaToken setFields(java.lang.String fields) {
          return (ExchangeRecaptchaToken) super.setFields(fields);
        }

        @Override
        public ExchangeRecaptchaToken setKey(java.lang.String key) {
          return (ExchangeRecaptchaToken) super.setKey(key);
        }

        @Override
        public ExchangeRecaptchaToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeRecaptchaToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeRecaptchaToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeRecaptchaToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeRecaptchaToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeRecaptchaToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeRecaptchaToken setUploadType(java.lang.String uploadType) {
          return (ExchangeRecaptchaToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeRecaptchaToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeRecaptchaToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the web app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeRecaptchaToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeRecaptchaToken set(String parameterName, Object value) {
          return (ExchangeRecaptchaToken) super.set(parameterName, value);
        }
      }
      /**
       * Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If
       * valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeRecaptchaV3Token".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeRecaptchaV3Token#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest}
       * @return the request
       */
      public ExchangeRecaptchaV3Token exchangeRecaptchaV3Token(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest content) throws java.io.IOException {
        ExchangeRecaptchaV3Token result = new ExchangeRecaptchaV3Token(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeRecaptchaV3Token extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeRecaptchaV3Token";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If
         * valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangeRecaptchaV3Token".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeRecaptchaV3Token#execute()} method to invoke the
         * remote operation. <p> {@link ExchangeRecaptchaV3Token#initialize(com.google.api.client.googleap
         * is.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the web app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest}
         * @since 1.13
         */
        protected ExchangeRecaptchaV3Token(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeRecaptchaV3Token set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeRecaptchaV3Token) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeRecaptchaV3Token setAccessToken(java.lang.String accessToken) {
          return (ExchangeRecaptchaV3Token) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeRecaptchaV3Token setAlt(java.lang.String alt) {
          return (ExchangeRecaptchaV3Token) super.setAlt(alt);
        }

        @Override
        public ExchangeRecaptchaV3Token setCallback(java.lang.String callback) {
          return (ExchangeRecaptchaV3Token) super.setCallback(callback);
        }

        @Override
        public ExchangeRecaptchaV3Token setFields(java.lang.String fields) {
          return (ExchangeRecaptchaV3Token) super.setFields(fields);
        }

        @Override
        public ExchangeRecaptchaV3Token setKey(java.lang.String key) {
          return (ExchangeRecaptchaV3Token) super.setKey(key);
        }

        @Override
        public ExchangeRecaptchaV3Token setOauthToken(java.lang.String oauthToken) {
          return (ExchangeRecaptchaV3Token) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeRecaptchaV3Token setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeRecaptchaV3Token) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeRecaptchaV3Token setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeRecaptchaV3Token) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeRecaptchaV3Token setUploadType(java.lang.String uploadType) {
          return (ExchangeRecaptchaV3Token) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeRecaptchaV3Token setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeRecaptchaV3Token) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the web app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the web app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeRecaptchaV3Token setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeRecaptchaV3Token set(String parameterName, Object value) {
          return (ExchangeRecaptchaV3Token) super.set(parameterName, value);
        }
      }
      /**
       * Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation
       * #request-attestation-step). If valid, returns an AppCheckToken.
       *
       * Create a request for the method "apps.exchangeSafetyNetToken".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link ExchangeSafetyNetToken#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the Android app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest}
       * @return the request
       */
      public ExchangeSafetyNetToken exchangeSafetyNetToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest content) throws java.io.IOException {
        ExchangeSafetyNetToken result = new ExchangeSafetyNetToken(app, content);
        initialize(result);
        return result;
      }

      public class ExchangeSafetyNetToken extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken> {

        private static final String REST_PATH = "v1beta/{+app}:exchangeSafetyNetToken";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation
         * #request-attestation-step). If valid, returns an AppCheckToken.
         *
         * Create a request for the method "apps.exchangeSafetyNetToken".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link ExchangeSafetyNetToken#execute()} method to invoke the
         * remote operation. <p> {@link ExchangeSafetyNetToken#initialize(com.google.api.client.googleapis
         * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the Android app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest}
         * @since 1.13
         */
        protected ExchangeSafetyNetToken(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppCheckToken.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public ExchangeSafetyNetToken set$Xgafv(java.lang.String $Xgafv) {
          return (ExchangeSafetyNetToken) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExchangeSafetyNetToken setAccessToken(java.lang.String accessToken) {
          return (ExchangeSafetyNetToken) super.setAccessToken(accessToken);
        }

        @Override
        public ExchangeSafetyNetToken setAlt(java.lang.String alt) {
          return (ExchangeSafetyNetToken) super.setAlt(alt);
        }

        @Override
        public ExchangeSafetyNetToken setCallback(java.lang.String callback) {
          return (ExchangeSafetyNetToken) super.setCallback(callback);
        }

        @Override
        public ExchangeSafetyNetToken setFields(java.lang.String fields) {
          return (ExchangeSafetyNetToken) super.setFields(fields);
        }

        @Override
        public ExchangeSafetyNetToken setKey(java.lang.String key) {
          return (ExchangeSafetyNetToken) super.setKey(key);
        }

        @Override
        public ExchangeSafetyNetToken setOauthToken(java.lang.String oauthToken) {
          return (ExchangeSafetyNetToken) super.setOauthToken(oauthToken);
        }

        @Override
        public ExchangeSafetyNetToken setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExchangeSafetyNetToken) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExchangeSafetyNetToken setQuotaUser(java.lang.String quotaUser) {
          return (ExchangeSafetyNetToken) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExchangeSafetyNetToken setUploadType(java.lang.String uploadType) {
          return (ExchangeSafetyNetToken) super.setUploadType(uploadType);
        }

        @Override
        public ExchangeSafetyNetToken setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExchangeSafetyNetToken) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the Android app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the Android app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the Android app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public ExchangeSafetyNetToken setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public ExchangeSafetyNetToken set(String parameterName, Object value) {
          return (ExchangeSafetyNetToken) super.set(parameterName, value);
        }
      }
      /**
       * Generates a challenge that protects the integrity of an immediately following call to
       * ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for
       * multiple calls.
       *
       * Create a request for the method "apps.generateAppAttestChallenge".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link GenerateAppAttestChallenge#execute()} method to invoke the
       * remote operation.
       *
       * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest}
       * @return the request
       */
      public GenerateAppAttestChallenge generateAppAttestChallenge(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest content) throws java.io.IOException {
        GenerateAppAttestChallenge result = new GenerateAppAttestChallenge(app, content);
        initialize(result);
        return result;
      }

      public class GenerateAppAttestChallenge extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse> {

        private static final String REST_PATH = "v1beta/{+app}:generateAppAttestChallenge";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Generates a challenge that protects the integrity of an immediately following call to
         * ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused
         * for multiple calls.
         *
         * Create a request for the method "apps.generateAppAttestChallenge".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link GenerateAppAttestChallenge#execute()} method to invoke the
         * remote operation. <p> {@link GenerateAppAttestChallenge#initialize(com.google.api.client.google
         * apis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the iOS app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest}
         * @since 1.13
         */
        protected GenerateAppAttestChallenge(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public GenerateAppAttestChallenge set$Xgafv(java.lang.String $Xgafv) {
          return (GenerateAppAttestChallenge) super.set$Xgafv($Xgafv);
        }

        @Override
        public GenerateAppAttestChallenge setAccessToken(java.lang.String accessToken) {
          return (GenerateAppAttestChallenge) super.setAccessToken(accessToken);
        }

        @Override
        public GenerateAppAttestChallenge setAlt(java.lang.String alt) {
          return (GenerateAppAttestChallenge) super.setAlt(alt);
        }

        @Override
        public GenerateAppAttestChallenge setCallback(java.lang.String callback) {
          return (GenerateAppAttestChallenge) super.setCallback(callback);
        }

        @Override
        public GenerateAppAttestChallenge setFields(java.lang.String fields) {
          return (GenerateAppAttestChallenge) super.setFields(fields);
        }

        @Override
        public GenerateAppAttestChallenge setKey(java.lang.String key) {
          return (GenerateAppAttestChallenge) super.setKey(key);
        }

        @Override
        public GenerateAppAttestChallenge setOauthToken(java.lang.String oauthToken) {
          return (GenerateAppAttestChallenge) super.setOauthToken(oauthToken);
        }

        @Override
        public GenerateAppAttestChallenge setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GenerateAppAttestChallenge) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GenerateAppAttestChallenge setQuotaUser(java.lang.String quotaUser) {
          return (GenerateAppAttestChallenge) super.setQuotaUser(quotaUser);
        }

        @Override
        public GenerateAppAttestChallenge setUploadType(java.lang.String uploadType) {
          return (GenerateAppAttestChallenge) super.setUploadType(uploadType);
        }

        @Override
        public GenerateAppAttestChallenge setUploadProtocol(java.lang.String uploadProtocol) {
          return (GenerateAppAttestChallenge) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the iOS app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the iOS app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public GenerateAppAttestChallenge setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public GenerateAppAttestChallenge set(String parameterName, Object value) {
          return (GenerateAppAttestChallenge) super.set(parameterName, value);
        }
      }
      /**
       * Generates a challenge that protects the integrity of an immediately following integrity verdict
       * request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the
       * resulting integrity token will verify the presence and validity of the challenge. A challenge
       * should not be reused for multiple calls.
       *
       * Create a request for the method "apps.generatePlayIntegrityChallenge".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link GeneratePlayIntegrityChallenge#execute()} method to invoke
       * the remote operation.
       *
       * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest}
       * @return the request
       */
      public GeneratePlayIntegrityChallenge generatePlayIntegrityChallenge(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest content) throws java.io.IOException {
        GeneratePlayIntegrityChallenge result = new GeneratePlayIntegrityChallenge(app, content);
        initialize(result);
        return result;
      }

      public class GeneratePlayIntegrityChallenge extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse> {

        private static final String REST_PATH = "v1beta/{+app}:generatePlayIntegrityChallenge";

        private final java.util.regex.Pattern APP_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

        /**
         * Generates a challenge that protects the integrity of an immediately following integrity verdict
         * request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the
         * resulting integrity token will verify the presence and validity of the challenge. A challenge
         * should not be reused for multiple calls.
         *
         * Create a request for the method "apps.generatePlayIntegrityChallenge".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link GeneratePlayIntegrityChallenge#execute()} method to invoke
         * the remote operation. <p> {@link GeneratePlayIntegrityChallenge#initialize(com.google.api.clien
         * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param app Required. The relative resource name of the app, in the format: ```
       *        projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can
       *        be replaced with the project ID of the Firebase project. Learn more about using project
       *        identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest}
         * @since 1.13
         */
        protected GeneratePlayIntegrityChallenge(java.lang.String app, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse.class);
          this.app = com.google.api.client.util.Preconditions.checkNotNull(app, "Required parameter app must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
        }

        @Override
        public GeneratePlayIntegrityChallenge set$Xgafv(java.lang.String $Xgafv) {
          return (GeneratePlayIntegrityChallenge) super.set$Xgafv($Xgafv);
        }

        @Override
        public GeneratePlayIntegrityChallenge setAccessToken(java.lang.String accessToken) {
          return (GeneratePlayIntegrityChallenge) super.setAccessToken(accessToken);
        }

        @Override
        public GeneratePlayIntegrityChallenge setAlt(java.lang.String alt) {
          return (GeneratePlayIntegrityChallenge) super.setAlt(alt);
        }

        @Override
        public GeneratePlayIntegrityChallenge setCallback(java.lang.String callback) {
          return (GeneratePlayIntegrityChallenge) super.setCallback(callback);
        }

        @Override
        public GeneratePlayIntegrityChallenge setFields(java.lang.String fields) {
          return (GeneratePlayIntegrityChallenge) super.setFields(fields);
        }

        @Override
        public GeneratePlayIntegrityChallenge setKey(java.lang.String key) {
          return (GeneratePlayIntegrityChallenge) super.setKey(key);
        }

        @Override
        public GeneratePlayIntegrityChallenge setOauthToken(java.lang.String oauthToken) {
          return (GeneratePlayIntegrityChallenge) super.setOauthToken(oauthToken);
        }

        @Override
        public GeneratePlayIntegrityChallenge setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GeneratePlayIntegrityChallenge) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GeneratePlayIntegrityChallenge setQuotaUser(java.lang.String quotaUser) {
          return (GeneratePlayIntegrityChallenge) super.setQuotaUser(quotaUser);
        }

        @Override
        public GeneratePlayIntegrityChallenge setUploadType(java.lang.String uploadType) {
          return (GeneratePlayIntegrityChallenge) super.setUploadType(uploadType);
        }

        @Override
        public GeneratePlayIntegrityChallenge setUploadProtocol(java.lang.String uploadProtocol) {
          return (GeneratePlayIntegrityChallenge) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        @com.google.api.client.util.Key
        private java.lang.String app;

        /** Required. The relative resource name of the app, in the format: ```
       projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be
       replaced with the project ID of the Firebase project. Learn more about using project identifiers in
       Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public java.lang.String getApp() {
          return app;
        }

        /**
         * Required. The relative resource name of the app, in the format: ```
         * projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element
         * can be replaced with the project ID of the Firebase project. Learn more about using
         * project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
         */
        public GeneratePlayIntegrityChallenge setApp(java.lang.String app) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PATTERN.matcher(app).matches(),
                "Parameter app must conform to the pattern " +
                "^projects/[^/]+/apps/[^/]+$");
          }
          this.app = app;
          return this;
        }

        @Override
        public GeneratePlayIntegrityChallenge set(String parameterName, Object value) {
          return (GeneratePlayIntegrityChallenge) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the AppAttestConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.AppAttestConfig.List request = firebaseappcheck.appAttestConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public AppAttestConfig appAttestConfig() {
        return new AppAttestConfig();
      }

      /**
       * The "appAttestConfig" collection of methods.
       */
      public class AppAttestConfig {

        /**
         * Atomically gets the AppAttestConfigs for the specified list of apps.
         *
         * Create a request for the method "appAttestConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all AppAttestConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/appAttestConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the AppAttestConfigs for the specified list of apps.
           *
           * Create a request for the method "appAttestConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all AppAttestConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all AppAttestConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all AppAttestConfigs being retrieved, in the format ```
         projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all AppAttestConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the AppAttestConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/appAttestConfig ``` A maximum of 100
           * objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the AppAttestConfigs to retrieve, in the format ```
         projects/{project_number}/apps/{app_id}/appAttestConfig ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the AppAttestConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/appAttestConfig ``` A maximum of 100
           * objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the AppAttestConfig for the specified app.
         *
         * Create a request for the method "appAttestConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the AppAttestConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/appAttestConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/appAttestConfig$");

          /**
           * Gets the AppAttestConfig for the specified app.
           *
           * Create a request for the method "appAttestConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the AppAttestConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/appAttestConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/appAttestConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the AppAttestConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the AppAttestConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the AppAttestConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/appAttestConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the AppAttestConfig for the specified app. While this configuration is incomplete or
         * invalid, the app will be unable to exchange AppAttest tokens for App Check tokens.
         *
         * Create a request for the method "appAttestConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the App Attest configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/appAttestConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/appAttestConfig$");

          /**
           * Updates the AppAttestConfig for the specified app. While this configuration is incomplete or
           * invalid, the app will be unable to exchange AppAttest tokens for App Check tokens.
           *
           * Create a request for the method "appAttestConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the App Attest configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/appAttestConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaAppAttestConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/appAttestConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the App Attest configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the App Attest configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the App Attest configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/appAttestConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the AppAttestConfig Gets to
           * update. Example: `token_ttl`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the AppAttestConfig Gets to update. Example:
         `token_ttl`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the AppAttestConfig Gets to
           * update. Example: `token_ttl`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the DebugTokens collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.DebugTokens.List request = firebaseappcheck.debugTokens().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public DebugTokens debugTokens() {
        return new DebugTokens();
      }

      /**
       * The "debugTokens" collection of methods.
       */
      public class DebugTokens {

        /**
         * Creates a new DebugToken for the specified app. For security reasons, after the creation
         * operation completes, the `token` field cannot be updated or retrieved, but you can revoke the
         * debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
         *
         * Create a request for the method "debugTokens.create".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The relative resource name of the parent app in which the specified DebugToken will be
         *        created, in the format: ``` projects/{project_number}/apps/{app_id} ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken> {

          private static final String REST_PATH = "v1beta/{+parent}/debugTokens";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

          /**
           * Creates a new DebugToken for the specified app. For security reasons, after the creation
           * operation completes, the `token` field cannot be updated or retrieved, but you can revoke the
           * debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
           *
           * Create a request for the method "debugTokens.create".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The relative resource name of the parent app in which the specified DebugToken will be
         *        created, in the format: ``` projects/{project_number}/apps/{app_id} ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken content) {
            super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the parent app in which the specified
           * DebugToken will be created, in the format: ``` projects/{project_number}/apps/{app_id}
           * ```
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The relative resource name of the parent app in which the specified DebugToken will be
         created, in the format: ``` projects/{project_number}/apps/{app_id} ```
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The relative resource name of the parent app in which the specified
           * DebugToken will be created, in the format: ``` projects/{project_number}/apps/{app_id}
           * ```
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App
         * Check token. Use this method when you suspect the secret `token` has been compromised or when you
         * no longer need the debug token.
         *
         * Create a request for the method "debugTokens.delete".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the DebugToken to delete, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleProtobufEmpty> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");

          /**
           * Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App
           * Check token. Use this method when you suspect the secret `token` has been compromised or when
           * you no longer need the debug token.
           *
           * Create a request for the method "debugTokens.delete".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the DebugToken to delete, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Firebaseappcheck.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleProtobufEmpty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the DebugToken to delete, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the DebugToken to delete, in the format: ```
         projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the DebugToken to delete, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the specified DebugToken. For security reasons, the `token` field is never populated in the
         * response.
         *
         * Create a request for the method "debugTokens.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the debug token, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");

          /**
           * Gets the specified DebugToken. For security reasons, the `token` field is never populated in
           * the response.
           *
           * Create a request for the method "debugTokens.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the debug token, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the debug token, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the debug token, in the format: ```
         projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the debug token, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists all DebugTokens for the specified app. For security reasons, the `token` field is never
         * populated in the response.
         *
         * Create a request for the method "debugTokens.list".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The relative resource name of the parent app for which to list each associated DebugToken,
         *        in the format: ``` projects/{project_number}/apps/{app_id} ```
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaListDebugTokensResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/debugTokens";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+$");

          /**
           * Lists all DebugTokens for the specified app. For security reasons, the `token` field is never
           * populated in the response.
           *
           * Create a request for the method "debugTokens.list".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The relative resource name of the parent app for which to list each associated DebugToken,
         *        in the format: ``` projects/{project_number}/apps/{app_id} ```
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaListDebugTokensResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the parent app for which to list each
           * associated DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The relative resource name of the parent app for which to list each associated
         DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The relative resource name of the parent app for which to list each
           * associated DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of DebugTokens to return in the response. Note that an app can have
           * at most 20 debug tokens. The server may return fewer than this at its own discretion.
           * If no value is specified (or too large a value is specified), the server will impose
           * its own limit.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of DebugTokens to return in the response. Note that an app can have at most 20
         debug tokens. The server may return fewer than this at its own discretion. If no value is specified
         (or too large a value is specified), the server will impose its own limit.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of DebugTokens to return in the response. Note that an app can have
           * at most 20 debug tokens. The server may return fewer than this at its own discretion.
           * If no value is specified (or too large a value is specified), the server will impose
           * its own limit.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Token returned from a previous call to ListDebugTokens indicating where in the set of
           * DebugTokens to resume listing. Provide this to retrieve the subsequent page. When
           * paginating, all other parameters provided to ListDebugTokens must match the call that
           * provided the page token; if they do not match, the result is undefined.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Token returned from a previous call to ListDebugTokens indicating where in the set of DebugTokens
         to resume listing. Provide this to retrieve the subsequent page. When paginating, all other
         parameters provided to ListDebugTokens must match the call that provided the page token; if they do
         not match, the result is undefined.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Token returned from a previous call to ListDebugTokens indicating where in the set of
           * DebugTokens to resume listing. Provide this to retrieve the subsequent page. When
           * paginating, all other parameters provided to ListDebugTokens must match the call that
           * provided the page token; if they do not match, the result is undefined.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the specified DebugToken. For security reasons, the `token` field cannot be updated, nor
         * will it be populated in the response, but you can revoke the debug token using DeleteDebugToken.
         *
         * Create a request for the method "debugTokens.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the debug token, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");

          /**
           * Updates the specified DebugToken. For security reasons, the `token` field cannot be updated,
           * nor will it be populated in the response, but you can revoke the debug token using
           * DeleteDebugToken.
           *
           * Create a request for the method "debugTokens.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the debug token, in the format: ```
         *        projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDebugToken.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the debug token, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the debug token, in the format: ```
         projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the debug token, in the format: ```
           * projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the DebugToken to update.
           * Example: `display_name`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the DebugToken to update. Example:
         `display_name`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the DebugToken to update.
           * Example: `display_name`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the DeviceCheckConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.DeviceCheckConfig.List request = firebaseappcheck.deviceCheckConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public DeviceCheckConfig deviceCheckConfig() {
        return new DeviceCheckConfig();
      }

      /**
       * The "deviceCheckConfig" collection of methods.
       */
      public class DeviceCheckConfig {

        /**
         * Atomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons, the
         * `private_key` field is never populated in the response.
         *
         * Create a request for the method "deviceCheckConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/deviceCheckConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons,
           * the `private_key` field is never populated in the response.
           *
           * Create a request for the method "deviceCheckConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format
         ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the format ```
         projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field
         * is never populated in the response.
         *
         * Create a request for the method "deviceCheckConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the DeviceCheckConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");

          /**
           * Gets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field
           * is never populated in the response.
           *
           * Create a request for the method "deviceCheckConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the DeviceCheckConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the DeviceCheckConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the DeviceCheckConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the DeviceCheckConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the DeviceCheckConfig for the specified app. While this configuration is incomplete or
         * invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For security
         * reasons, the `private_key` field is never populated in the response.
         *
         * Create a request for the method "deviceCheckConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the DeviceCheck configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");

          /**
           * Updates the DeviceCheckConfig for the specified app. While this configuration is incomplete or
           * invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For
           * security reasons, the `private_key` field is never populated in the response.
           *
           * Create a request for the method "deviceCheckConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the DeviceCheck configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaDeviceCheckConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the DeviceCheck configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the DeviceCheck configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the DeviceCheck configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the DeviceCheckConfig Gets to
           * update. Example: `key_id,private_key`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the DeviceCheckConfig Gets to update.
         Example: `key_id,private_key`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the DeviceCheckConfig Gets to
           * update. Example: `key_id,private_key`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the PlayIntegrityConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.PlayIntegrityConfig.List request = firebaseappcheck.playIntegrityConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public PlayIntegrityConfig playIntegrityConfig() {
        return new PlayIntegrityConfig();
      }

      /**
       * The "playIntegrityConfig" collection of methods.
       */
      public class PlayIntegrityConfig {

        /**
         * Atomically gets the PlayIntegrityConfigs for the specified list of apps.
         *
         * Create a request for the method "playIntegrityConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all PlayIntegrityConfigs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/playIntegrityConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the PlayIntegrityConfigs for the specified list of apps.
           *
           * Create a request for the method "playIntegrityConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all PlayIntegrityConfigs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all PlayIntegrityConfigs being retrieved,
           * in the format ``` projects/{project_number} ``` The parent collection in the `name`
           * field of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all PlayIntegrityConfigs being retrieved, in the format
         ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all PlayIntegrityConfigs being retrieved,
           * in the format ``` projects/{project_number} ``` The parent collection in the `name`
           * field of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the PlayIntegrityConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the PlayIntegrityConfigs to retrieve, in the format ```
         projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the PlayIntegrityConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the PlayIntegrityConfig for the specified app.
         *
         * Create a request for the method "playIntegrityConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the PlayIntegrityConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");

          /**
           * Gets the PlayIntegrityConfig for the specified app.
           *
           * Create a request for the method "playIntegrityConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the PlayIntegrityConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the PlayIntegrityConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the PlayIntegrityConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the PlayIntegrityConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the PlayIntegrityConfig for the specified app. While this configuration is incomplete or
         * invalid, the app will be unable to exchange Play Integrity tokens for App Check tokens.
         *
         * Create a request for the method "playIntegrityConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the Play Integrity configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");

          /**
           * Updates the PlayIntegrityConfig for the specified app. While this configuration is incomplete
           * or invalid, the app will be unable to exchange Play Integrity tokens for App Check tokens.
           *
           * Create a request for the method "playIntegrityConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the Play Integrity configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaPlayIntegrityConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the Play Integrity configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the Play Integrity configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the Play Integrity configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/playIntegrityConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the PlayIntegrityConfig Gets to
           * update. Example: `token_ttl`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the PlayIntegrityConfig Gets to update.
         Example: `token_ttl`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the PlayIntegrityConfig Gets to
           * update. Example: `token_ttl`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the RecaptchaConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.RecaptchaConfig.List request = firebaseappcheck.recaptchaConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public RecaptchaConfig recaptchaConfig() {
        return new RecaptchaConfig();
      }

      /**
       * The "recaptchaConfig" collection of methods.
       */
      public class RecaptchaConfig {

        /**
         * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
         * BatchGetRecaptchaV3Configs instead. Atomically gets the RecaptchaConfigs for the specified list
         * of apps. For security reasons, the `site_secret` field is never populated in the response.
         *
         * Create a request for the method "recaptchaConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all RecaptchaConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/recaptchaConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
           * BatchGetRecaptchaV3Configs instead. Atomically gets the RecaptchaConfigs for the specified list
           * of apps. For security reasons, the `site_secret` field is never populated in the response.
           *
           * Create a request for the method "recaptchaConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all RecaptchaConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all RecaptchaConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all RecaptchaConfigs being retrieved, in the format ```
         projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all RecaptchaConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the RecaptchaConfigs to retrieve, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the RecaptchaConfigs to retrieve, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaConfig ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the RecaptchaConfigs to retrieve, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
         * GetRecaptchaV3Config instead. Gets the RecaptchaConfig for the specified app. For security
         * reasons, the `site_secret` field is never populated in the response.
         *
         * Create a request for the method "recaptchaConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the RecaptchaConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaConfig$");

          /**
           * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
           * GetRecaptchaV3Config instead. Gets the RecaptchaConfig for the specified app. For security
           * reasons, the `site_secret` field is never populated in the response.
           *
           * Create a request for the method "recaptchaConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the RecaptchaConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the RecaptchaConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the RecaptchaConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the RecaptchaConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
         * UpdateRecaptchaV3Config instead. Updates the RecaptchaConfig for the specified app. While this
         * configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA tokens for
         * App Check tokens. For security reasons, the `site_secret` field is never populated in the
         * response.
         *
         * Create a request for the method "recaptchaConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaConfig$");

          /**
           * The RecaptchaConfig REST resource has been renamed to RecaptchaV3Config. Please use
           * UpdateRecaptchaV3Config instead. Updates the RecaptchaConfig for the specified app. While this
           * configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA tokens for
           * App Check tokens. For security reasons, the `site_secret` field is never populated in the
           * response.
           *
           * Create a request for the method "recaptchaConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the reCAPTCHA v3 configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the reCAPTCHA v3 configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaConfig to update.
           * Example: `site_secret`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the RecaptchaConfig to update. Example:
         `site_secret`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaConfig to update.
           * Example: `site_secret`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the RecaptchaEnterpriseConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.RecaptchaEnterpriseConfig.List request = firebaseappcheck.recaptchaEnterpriseConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public RecaptchaEnterpriseConfig recaptchaEnterpriseConfig() {
        return new RecaptchaEnterpriseConfig();
      }

      /**
       * The "recaptchaEnterpriseConfig" collection of methods.
       */
      public class RecaptchaEnterpriseConfig {

        /**
         * Atomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
         *
         * Create a request for the method "recaptchaEnterpriseConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all RecaptchaEnterpriseConfigs being retrieved, in the
         *        format ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/recaptchaEnterpriseConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
           *
           * Create a request for the method "recaptchaEnterpriseConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all RecaptchaEnterpriseConfigs being retrieved, in the
         *        format ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all RecaptchaEnterpriseConfigs being
           * retrieved, in the format ``` projects/{project_number} ``` The parent collection in the
           * `name` field of any resource being retrieved must match this field, or the entire batch
           * fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all RecaptchaEnterpriseConfigs being retrieved, in the
         format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource
         being retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all RecaptchaEnterpriseConfigs being
           * retrieved, in the format ``` projects/{project_number} ``` The parent collection in the
           * `name` field of any resource being retrieved must match this field, or the entire batch
           * fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the RecaptchaEnterpriseConfigs to retrieve, in
           * the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A
           * maximum of 100 objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the RecaptchaEnterpriseConfigs to retrieve, in the format:
         ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A maximum of 100 objects
         can be retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the RecaptchaEnterpriseConfigs to retrieve, in
           * the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A
           * maximum of 100 objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the RecaptchaEnterpriseConfig for the specified app.
         *
         * Create a request for the method "recaptchaEnterpriseConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");

          /**
           * Gets the RecaptchaEnterpriseConfig for the specified app.
           *
           * Create a request for the method "recaptchaEnterpriseConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format:
           * ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format:
           * ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the RecaptchaEnterpriseConfig for the specified app. While this configuration is
         * incomplete or invalid, the app will be unable to exchange reCAPTCHA Enterprise tokens for App
         * Check tokens.
         *
         * Create a request for the method "recaptchaEnterpriseConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the
         *        format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");

          /**
           * Updates the RecaptchaEnterpriseConfig for the specified app. While this configuration is
           * incomplete or invalid, the app will be unable to exchange reCAPTCHA Enterprise tokens for App
           * Check tokens.
           *
           * Create a request for the method "recaptchaEnterpriseConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the
         *        format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the reCAPTCHA Enterprise configuration object,
           * in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig
           * ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the
         format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the reCAPTCHA Enterprise configuration object,
           * in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig
           * ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaEnterpriseConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaEnterpriseConfig to
           * update. Example: `site_key`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the RecaptchaEnterpriseConfig to update.
         Example: `site_key`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaEnterpriseConfig to
           * update. Example: `site_key`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the RecaptchaV3Config collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.RecaptchaV3Config.List request = firebaseappcheck.recaptchaV3Config().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public RecaptchaV3Config recaptchaV3Config() {
        return new RecaptchaV3Config();
      }

      /**
       * The "recaptchaV3Config" collection of methods.
       */
      public class RecaptchaV3Config {

        /**
         * Atomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons, the
         * `site_secret` field is never populated in the response.
         *
         * Create a request for the method "recaptchaV3Config.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/recaptchaV3Config:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons,
           * the `site_secret` field is never populated in the response.
           *
           * Create a request for the method "recaptchaV3Config.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in the format
         *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
         *        resource being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in the format
         ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the RecaptchaV3Configs to retrieve, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the RecaptchaV3Configs to retrieve, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaV3Config ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the RecaptchaV3Configs to retrieve, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ``` A maximum of
           * 100 objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the RecaptchaV3Config for the specified app. For security reasons, the `site_secret` field
         * is never populated in the response.
         *
         * Create a request for the method "recaptchaV3Config.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the RecaptchaV3Config, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");

          /**
           * Gets the RecaptchaV3Config for the specified app. For security reasons, the `site_secret` field
           * is never populated in the response.
           *
           * Create a request for the method "recaptchaV3Config.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the RecaptchaV3Config, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the RecaptchaV3Config, in the format: ```
           * projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the RecaptchaV3Config, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the RecaptchaV3Config, in the format: ```
           * projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the RecaptchaV3Config for the specified app. While this configuration is incomplete or
         * invalid, the app will be unable to exchange reCAPTCHA V3 tokens for App Check tokens. For
         * security reasons, the `site_secret` field is never populated in the response.
         *
         * Create a request for the method "recaptchaV3Config.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");

          /**
           * Updates the RecaptchaV3Config for the specified app. While this configuration is incomplete or
           * invalid, the app will be unable to exchange reCAPTCHA V3 tokens for App Check tokens. For
           * security reasons, the `site_secret` field is never populated in the response.
           *
           * Create a request for the method "recaptchaV3Config.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaRecaptchaV3Config.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the reCAPTCHA v3 configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the reCAPTCHA v3 configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/recaptchaV3Config$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaV3Config to update.
           * Example: `site_secret`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the RecaptchaV3Config to update. Example:
         `site_secret`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the RecaptchaV3Config to update.
           * Example: `site_secret`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the SafetyNetConfig collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
       *   {@code Firebaseappcheck.SafetyNetConfig.List request = firebaseappcheck.safetyNetConfig().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public SafetyNetConfig safetyNetConfig() {
        return new SafetyNetConfig();
      }

      /**
       * The "safetyNetConfig" collection of methods.
       */
      public class SafetyNetConfig {

        /**
         * Atomically gets the SafetyNetConfigs for the specified list of apps.
         *
         * Create a request for the method "safetyNetConfig.batchGet".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent project name shared by all SafetyNetConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
         * @return the request
         */
        public BatchGet batchGet(java.lang.String parent) throws java.io.IOException {
          BatchGet result = new BatchGet(parent);
          initialize(result);
          return result;
        }

        public class BatchGet extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/apps/-/safetyNetConfig:batchGet";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+$");

          /**
           * Atomically gets the SafetyNetConfigs for the specified list of apps.
           *
           * Create a request for the method "safetyNetConfig.batchGet".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link BatchGet#execute()} method to invoke the remote operation.
           * <p> {@link
           * BatchGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent project name shared by all SafetyNetConfigs being retrieved, in the format ```
         *        projects/{project_number} ``` The parent collection in the `name` field of any resource
         *        being retrieved must match this field, or the entire batch fails.
           * @since 1.13
           */
          protected BatchGet(java.lang.String parent) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public BatchGet set$Xgafv(java.lang.String $Xgafv) {
            return (BatchGet) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchGet setAccessToken(java.lang.String accessToken) {
            return (BatchGet) super.setAccessToken(accessToken);
          }

          @Override
          public BatchGet setAlt(java.lang.String alt) {
            return (BatchGet) super.setAlt(alt);
          }

          @Override
          public BatchGet setCallback(java.lang.String callback) {
            return (BatchGet) super.setCallback(callback);
          }

          @Override
          public BatchGet setFields(java.lang.String fields) {
            return (BatchGet) super.setFields(fields);
          }

          @Override
          public BatchGet setKey(java.lang.String key) {
            return (BatchGet) super.setKey(key);
          }

          @Override
          public BatchGet setOauthToken(java.lang.String oauthToken) {
            return (BatchGet) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchGet setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchGet) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchGet setQuotaUser(java.lang.String quotaUser) {
            return (BatchGet) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchGet setUploadType(java.lang.String uploadType) {
            return (BatchGet) super.setUploadType(uploadType);
          }

          @Override
          public BatchGet setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchGet) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent project name shared by all SafetyNetConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent project name shared by all SafetyNetConfigs being retrieved, in the format ```
         projects/{project_number} ``` The parent collection in the `name` field of any resource being
         retrieved must match this field, or the entire batch fails.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent project name shared by all SafetyNetConfigs being retrieved, in
           * the format ``` projects/{project_number} ``` The parent collection in the `name` field
           * of any resource being retrieved must match this field, or the entire batch fails.
           */
          public BatchGet setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. The relative resource names of the SafetyNetConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ``` A maximum of 100
           * objects can be retrieved in a batch.
           */
          @com.google.api.client.util.Key
          private java.util.List<java.lang.String> names;

          /** Required. The relative resource names of the SafetyNetConfigs to retrieve, in the format ```
         projects/{project_number}/apps/{app_id}/safetyNetConfig ``` A maximum of 100 objects can be
         retrieved in a batch.
           */
          public java.util.List<java.lang.String> getNames() {
            return names;
          }

          /**
           * Required. The relative resource names of the SafetyNetConfigs to retrieve, in the
           * format ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ``` A maximum of 100
           * objects can be retrieved in a batch.
           */
          public BatchGet setNames(java.util.List<java.lang.String> names) {
            this.names = names;
            return this;
          }

          @Override
          public BatchGet set(String parameterName, Object value) {
            return (BatchGet) super.set(parameterName, value);
          }
        }
        /**
         * Gets the SafetyNetConfig for the specified app.
         *
         * Create a request for the method "safetyNetConfig.get".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the SafetyNetConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/safetyNetConfig ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/safetyNetConfig$");

          /**
           * Gets the SafetyNetConfig for the specified app.
           *
           * Create a request for the method "safetyNetConfig.get".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the SafetyNetConfig, in the format: ```
         *        projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/safetyNetConfig$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the SafetyNetConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the SafetyNetConfig, in the format: ```
         projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the SafetyNetConfig, in the format: ```
           * projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/safetyNetConfig$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Updates the SafetyNetConfig for the specified app. While this configuration is incomplete or
         * invalid, the app will be unable to exchange SafetyNet tokens for App Check tokens.
         *
         * Create a request for the method "safetyNetConfig.patch".
         *
         * This request holds the parameters needed by the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Required. The relative resource name of the SafetyNet configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/safetyNetConfig ```
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/apps/[^/]+/safetyNetConfig$");

          /**
           * Updates the SafetyNetConfig for the specified app. While this configuration is incomplete or
           * invalid, the app will be unable to exchange SafetyNet tokens for App Check tokens.
           *
           * Create a request for the method "safetyNetConfig.patch".
           *
           * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of the SafetyNet configuration object, in the format: ```
         *        projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig content) {
            super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaSafetyNetConfig.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/safetyNetConfig$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of the SafetyNet configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of the SafetyNet configuration object, in the format: ```
         projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of the SafetyNet configuration object, in the
           * format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/apps/[^/]+/safetyNetConfig$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of names of fields in the SafetyNetConfig Gets to
           * update. Example: `token_ttl`.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of names of fields in the SafetyNetConfig Gets to update. Example:
         `token_ttl`.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of names of fields in the SafetyNetConfig Gets to
           * update. Example: `token_ttl`.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Services collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firebaseappcheck firebaseappcheck = new Firebaseappcheck(...);}
     *   {@code Firebaseappcheck.Services.List request = firebaseappcheck.services().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Services services() {
      return new Services();
    }

    /**
     * The "services" collection of methods.
     */
    public class Services {

      /**
       * Atomically updates the specified Service configurations.
       *
       * Create a request for the method "services.batchUpdate".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link BatchUpdate#execute()} method to invoke the remote
       * operation.
       *
       * @param parent Required. The parent project name shared by all Service configurations being updated, in the format
       *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
       *        resource being updated must match this field, or the entire batch fails.
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest}
       * @return the request
       */
      public BatchUpdate batchUpdate(java.lang.String parent, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest content) throws java.io.IOException {
        BatchUpdate result = new BatchUpdate(parent, content);
        initialize(result);
        return result;
      }

      public class BatchUpdate extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse> {

        private static final String REST_PATH = "v1beta/{+parent}/services:batchUpdate";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Atomically updates the specified Service configurations.
         *
         * Create a request for the method "services.batchUpdate".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link BatchUpdate#execute()} method to invoke the remote
         * operation. <p> {@link
         * BatchUpdate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent project name shared by all Service configurations being updated, in the format
       *        ``` projects/{project_number} ``` The parent collection in the `name` field of any
       *        resource being updated must match this field, or the entire batch fails.
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest}
         * @since 1.13
         */
        protected BatchUpdate(java.lang.String parent, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest content) {
          super(Firebaseappcheck.this, "POST", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public BatchUpdate set$Xgafv(java.lang.String $Xgafv) {
          return (BatchUpdate) super.set$Xgafv($Xgafv);
        }

        @Override
        public BatchUpdate setAccessToken(java.lang.String accessToken) {
          return (BatchUpdate) super.setAccessToken(accessToken);
        }

        @Override
        public BatchUpdate setAlt(java.lang.String alt) {
          return (BatchUpdate) super.setAlt(alt);
        }

        @Override
        public BatchUpdate setCallback(java.lang.String callback) {
          return (BatchUpdate) super.setCallback(callback);
        }

        @Override
        public BatchUpdate setFields(java.lang.String fields) {
          return (BatchUpdate) super.setFields(fields);
        }

        @Override
        public BatchUpdate setKey(java.lang.String key) {
          return (BatchUpdate) super.setKey(key);
        }

        @Override
        public BatchUpdate setOauthToken(java.lang.String oauthToken) {
          return (BatchUpdate) super.setOauthToken(oauthToken);
        }

        @Override
        public BatchUpdate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (BatchUpdate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public BatchUpdate setQuotaUser(java.lang.String quotaUser) {
          return (BatchUpdate) super.setQuotaUser(quotaUser);
        }

        @Override
        public BatchUpdate setUploadType(java.lang.String uploadType) {
          return (BatchUpdate) super.setUploadType(uploadType);
        }

        @Override
        public BatchUpdate setUploadProtocol(java.lang.String uploadProtocol) {
          return (BatchUpdate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent project name shared by all Service configurations being updated, in
         * the format ``` projects/{project_number} ``` The parent collection in the `name` field of
         * any resource being updated must match this field, or the entire batch fails.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent project name shared by all Service configurations being updated, in the format
       ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being
       updated must match this field, or the entire batch fails.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent project name shared by all Service configurations being updated, in
         * the format ``` projects/{project_number} ``` The parent collection in the `name` field of
         * any resource being updated must match this field, or the entire batch fails.
         */
        public BatchUpdate setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public BatchUpdate set(String parameterName, Object value) {
          return (BatchUpdate) super.set(parameterName, value);
        }
      }
      /**
       * Gets the Service configuration for the specified service name.
       *
       * Create a request for the method "services.get".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The relative resource name of the Service to retrieve, in the format: ```
       *        projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
       *        must be a supported service ID. Currently, the following service IDs are supported: *
       *        `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
       *        `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
       *        `firestore.googleapis.com` (Cloud Firestore)
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/services/[^/]+$");

        /**
         * Gets the Service configuration for the specified service name.
         *
         * Create a request for the method "services.get".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The relative resource name of the Service to retrieve, in the format: ```
       *        projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
       *        must be a supported service ID. Currently, the following service IDs are supported: *
       *        `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
       *        `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
       *        `firestore.googleapis.com` (Cloud Firestore)
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/services/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the Service to retrieve, in the format: ```
         * projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
         * must be a supported service ID. Currently, the following service IDs are supported: *
         * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
         * `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
         * `firestore.googleapis.com` (Cloud Firestore)
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The relative resource name of the Service to retrieve, in the format: ```
       projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a
       supported service ID. Currently, the following service IDs are supported: *
       `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com`
       (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore)
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The relative resource name of the Service to retrieve, in the format: ```
         * projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
         * must be a supported service ID. Currently, the following service IDs are supported: *
         * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
         * `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
         * `firestore.googleapis.com` (Cloud Firestore)
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/services/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists all Service configurations for the specified project. Only Services which were explicitly
       * configured using UpdateService or BatchUpdateServices will be returned.
       *
       * Create a request for the method "services.list".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The relative resource name of the parent project for which to list each associated
       *        Service, in the format: ``` projects/{project_number} ```
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaListServicesResponse> {

        private static final String REST_PATH = "v1beta/{+parent}/services";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists all Service configurations for the specified project. Only Services which were explicitly
         * configured using UpdateService or BatchUpdateServices will be returned.
         *
         * Create a request for the method "services.list".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The relative resource name of the parent project for which to list each associated
       *        Service, in the format: ``` projects/{project_number} ```
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Firebaseappcheck.this, "GET", REST_PATH, null, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaListServicesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the parent project for which to list each
         * associated Service, in the format: ``` projects/{project_number} ```
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The relative resource name of the parent project for which to list each associated
       Service, in the format: ``` projects/{project_number} ```
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The relative resource name of the parent project for which to list each
         * associated Service, in the format: ``` projects/{project_number} ```
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of Services to return in the response. Only explicitly configured
         * services are returned. The server may return fewer than this at its own discretion. If no
         * value is specified (or too large a value is specified), the server will impose its own
         * limit.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of Services to return in the response. Only explicitly configured services are
       returned. The server may return fewer than this at its own discretion. If no value is specified (or
       too large a value is specified), the server will impose its own limit.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of Services to return in the response. Only explicitly configured
         * services are returned. The server may return fewer than this at its own discretion. If no
         * value is specified (or too large a value is specified), the server will impose its own
         * limit.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token returned from a previous call to ListServices indicating where in the set of
         * Services to resume listing. Provide this to retrieve the subsequent page. When
         * paginating, all other parameters provided to ListServices must match the call that
         * provided the page token; if they do not match, the result is undefined.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token returned from a previous call to ListServices indicating where in the set of Services to
       resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters
       provided to ListServices must match the call that provided the page token; if they do not match,
       the result is undefined.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token returned from a previous call to ListServices indicating where in the set of
         * Services to resume listing. Provide this to retrieve the subsequent page. When
         * paginating, all other parameters provided to ListServices must match the call that
         * provided the page token; if they do not match, the result is undefined.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the specified Service configuration.
       *
       * Create a request for the method "services.patch".
       *
       * This request holds the parameters needed by the firebaseappcheck server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name Required. The relative resource name of the service configuration object, in the format: ```
       *        projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
       *        must be a supported service ID. Currently, the following service IDs are supported: *
       *        `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
       *        `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
       *        `firestore.googleapis.com` (Cloud Firestore)
       * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseappcheckRequest<com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/services/[^/]+$");

        /**
         * Updates the specified Service configuration.
         *
         * Create a request for the method "services.patch".
         *
         * This request holds the parameters needed by the the firebaseappcheck server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The relative resource name of the service configuration object, in the format: ```
       *        projects/{project_number}/services/{service_id} ``` Note that the `service_id` element
       *        must be a supported service ID. Currently, the following service IDs are supported: *
       *        `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
       *        `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
       *        `firestore.googleapis.com` (Cloud Firestore)
         * @param content the {@link com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService content) {
          super(Firebaseappcheck.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseappcheck.v1beta.model.GoogleFirebaseAppcheckV1betaService.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/services/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The relative resource name of the service configuration object, in the format:
         * ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id`
         * element must be a supported service ID. Currently, the following service IDs are
         * supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
         * `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
         * `firestore.googleapis.com` (Cloud Firestore)
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The relative resource name of the service configuration object, in the format: ```
       projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a
       supported service ID. Currently, the following service IDs are supported: *
       `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com`
       (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore)
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The relative resource name of the service configuration object, in the format:
         * ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id`
         * element must be a supported service ID. Currently, the following service IDs are
         * supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
         * `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
         * `firestore.googleapis.com` (Cloud Firestore)
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/services/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Required. A comma-separated list of names of fields in the Service to update. Example:
         * `enforcement_mode`.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Required. A comma-separated list of names of fields in the Service to update. Example:
       `enforcement_mode`.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Required. A comma-separated list of names of fields in the Service to update. Example:
         * `enforcement_mode`.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Firebaseappcheck}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Firebaseappcheck}. */
    @Override
    public Firebaseappcheck build() {
      return new Firebaseappcheck(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseappcheckRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseappcheckRequestInitializer(
        FirebaseappcheckRequestInitializer firebaseappcheckRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebaseappcheckRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
