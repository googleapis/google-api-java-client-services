/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Audio stream description with no PII.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoMediaOverviewAudioOverview extends com.google.api.client.json.GenericJson {

  /**
   * Number of audio channels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer channels;

  /**
   * Content type of the audio track extracted from VSI. This is only populated with valid "acont"
   * xtag values at the moment, i.e., if VSI reports an invalid string, we ignore it. Supported
   * acont xtag values can be found in google3/video/storage/common/xtag_validation.cc. Examples:
   * "original", "dubbed", "descriptive", "commentary", etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contentType;

  /**
   * Language of the audio track extracted from VSI. Populated if it's deemed a valid code by
   * ISO639-2b, ISO639-2t or III library.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double loudness1770Lkfs;

  /**
   * Approximate audio length, has the same caveats as its video equivalent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer roundedUpOriginalDurationSec;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spatialAudioMode;

  /**
   * Number of audio channels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getChannels() {
    return channels;
  }

  /**
   * Number of audio channels.
   * @param channels channels or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setChannels(java.lang.Integer channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Content type of the audio track extracted from VSI. This is only populated with valid "acont"
   * xtag values at the moment, i.e., if VSI reports an invalid string, we ignore it. Supported
   * acont xtag values can be found in google3/video/storage/common/xtag_validation.cc. Examples:
   * "original", "dubbed", "descriptive", "commentary", etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getContentType() {
    return contentType;
  }

  /**
   * Content type of the audio track extracted from VSI. This is only populated with valid "acont"
   * xtag values at the moment, i.e., if VSI reports an invalid string, we ignore it. Supported
   * acont xtag values can be found in google3/video/storage/common/xtag_validation.cc. Examples:
   * "original", "dubbed", "descriptive", "commentary", etc.
   * @param contentType contentType or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setContentType(java.lang.String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Language of the audio track extracted from VSI. Populated if it's deemed a valid code by
   * ISO639-2b, ISO639-2t or III library.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * Language of the audio track extracted from VSI. Populated if it's deemed a valid code by
   * ISO639-2b, ISO639-2t or III library.
   * @param language language or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getLoudness1770Lkfs() {
    return loudness1770Lkfs;
  }

  /**
   * @param loudness1770Lkfs loudness1770Lkfs or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setLoudness1770Lkfs(java.lang.Double loudness1770Lkfs) {
    this.loudness1770Lkfs = loudness1770Lkfs;
    return this;
  }

  /**
   * Approximate audio length, has the same caveats as its video equivalent.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRoundedUpOriginalDurationSec() {
    return roundedUpOriginalDurationSec;
  }

  /**
   * Approximate audio length, has the same caveats as its video equivalent.
   * @param roundedUpOriginalDurationSec roundedUpOriginalDurationSec or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setRoundedUpOriginalDurationSec(java.lang.Integer roundedUpOriginalDurationSec) {
    this.roundedUpOriginalDurationSec = roundedUpOriginalDurationSec;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSpatialAudioMode() {
    return spatialAudioMode;
  }

  /**
   * @param spatialAudioMode spatialAudioMode or {@code null} for none
   */
  public VideoMediaOverviewAudioOverview setSpatialAudioMode(java.lang.String spatialAudioMode) {
    this.spatialAudioMode = spatialAudioMode;
    return this;
  }

  @Override
  public VideoMediaOverviewAudioOverview set(String fieldName, Object value) {
    return (VideoMediaOverviewAudioOverview) super.set(fieldName, value);
  }

  @Override
  public VideoMediaOverviewAudioOverview clone() {
    return (VideoMediaOverviewAudioOverview) super.clone();
  }

}
