/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.identitytoolkit.v1.model;

/**
 * Request message for SignInWithIdp.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity Toolkit API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudIdentitytoolkitV1SignInWithIdpRequest extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoCreate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long delegatedProjectNumber;

  /**
   * A valid Identity Platform ID token. If passed, the user's account at the IdP will be linked to
   * the account represented by this ID token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String idToken;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pendingIdToken;

  /**
   * An opaque string from a previous SignInWithIdp response. If set, it can be used to repeat the
   * sign-in operation from the previous SignInWithIdp operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pendingToken;

  /**
   * If the user is signing in with an authorization response obtained via a previous CreateAuthUri
   * authorization request, this is the body of the HTTP POST callback from the IdP, if present.
   * Otherwise, if the user is signing in with a manually provided IdP credential, this should be a
   * URL-encoded form that contains the credential (e.g. an ID token or access token for OAuth 2.0
   * IdPs) and the provider ID of the IdP that issued the credential. For example, if the user is
   * signing in to the Google provider using a Google ID token, this should be set to
   * `id_token=[GOOGLE_ID_TOKEN]=google.com`, where `[GOOGLE_ID_TOKEN]` should be replaced with the
   * Google ID token. If the user is signing in to the Facebook provider using a Facebook
   * authentication token, this should be set to
   * `id_token=[FACEBOOK_AUTHENTICATION_TOKEN]=facebook.com= [NONCE]`, where
   * `[FACEBOOK_AUTHENTICATION_TOKEN]` should be replaced with the Facebook authentication token.
   * Nonce is required for validating the token. The request will fail if no nonce is provided. If
   * the user is signing in to the Facebook provider using a Facebook access token, this should be
   * set to `access_token=[FACEBOOK_ACCESS_TOKEN]=facebook.com`, where `[FACEBOOK_ACCESS_TOKEN]`
   * should be replaced with the Facebook access token. If the user is signing in to the Twitter
   * provider using a Twitter OAuth 1.0 credential, this should be set to
   * `access_token=[TWITTER_ACCESS_TOKEN]_token_secret=[TWITTER_TOKEN_SECRET]=twitter.com`, where
   * `[TWITTER_ACCESS_TOKEN]` and `[TWITTER_TOKEN_SECRET]` should be replaced with the Twitter OAuth
   * access token and Twitter OAuth token secret respectively.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postBody;

  /**
   * Required. The URL to which the IdP redirects the user back. This can be set to
   * `http://localhost` if the user is signing in with a manually provided IdP credential.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requestUri;

  /**
   * Whether or not to return OAuth credentials from the IdP on the following errors:
   * `FEDERATED_USER_ID_ALREADY_LINKED` and `EMAIL_EXISTS`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean returnIdpCredential;

  /**
   * Whether or not to return the OAuth refresh token from the IdP, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean returnRefreshToken;

  /**
   * Should always be true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean returnSecureToken;

  /**
   * The session ID returned from a previous CreateAuthUri call. This field is verified against that
   * session ID to prevent session fixation attacks. Required if the user is signing in with an
   * authorization response from a previous CreateAuthUri authorization request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sessionId;

  /**
   * The ID of the Identity Platform tenant the user is signing in to. If not set, the user will
   * sign in to the default Identity Platform project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tenantId;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoCreate() {
    return autoCreate;
  }

  /**
   * @param autoCreate autoCreate or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setAutoCreate(java.lang.Boolean autoCreate) {
    this.autoCreate = autoCreate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  /**
   * @param delegatedProjectNumber delegatedProjectNumber or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setDelegatedProjectNumber(java.lang.Long delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * A valid Identity Platform ID token. If passed, the user's account at the IdP will be linked to
   * the account represented by this ID token.
   * @return value or {@code null} for none
   */
  public java.lang.String getIdToken() {
    return idToken;
  }

  /**
   * A valid Identity Platform ID token. If passed, the user's account at the IdP will be linked to
   * the account represented by this ID token.
   * @param idToken idToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setIdToken(java.lang.String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPendingIdToken() {
    return pendingIdToken;
  }

  /**
   * @param pendingIdToken pendingIdToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setPendingIdToken(java.lang.String pendingIdToken) {
    this.pendingIdToken = pendingIdToken;
    return this;
  }

  /**
   * An opaque string from a previous SignInWithIdp response. If set, it can be used to repeat the
   * sign-in operation from the previous SignInWithIdp operation.
   * @return value or {@code null} for none
   */
  public java.lang.String getPendingToken() {
    return pendingToken;
  }

  /**
   * An opaque string from a previous SignInWithIdp response. If set, it can be used to repeat the
   * sign-in operation from the previous SignInWithIdp operation.
   * @param pendingToken pendingToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setPendingToken(java.lang.String pendingToken) {
    this.pendingToken = pendingToken;
    return this;
  }

  /**
   * If the user is signing in with an authorization response obtained via a previous CreateAuthUri
   * authorization request, this is the body of the HTTP POST callback from the IdP, if present.
   * Otherwise, if the user is signing in with a manually provided IdP credential, this should be a
   * URL-encoded form that contains the credential (e.g. an ID token or access token for OAuth 2.0
   * IdPs) and the provider ID of the IdP that issued the credential. For example, if the user is
   * signing in to the Google provider using a Google ID token, this should be set to
   * `id_token=[GOOGLE_ID_TOKEN]=google.com`, where `[GOOGLE_ID_TOKEN]` should be replaced with the
   * Google ID token. If the user is signing in to the Facebook provider using a Facebook
   * authentication token, this should be set to
   * `id_token=[FACEBOOK_AUTHENTICATION_TOKEN]=facebook.com= [NONCE]`, where
   * `[FACEBOOK_AUTHENTICATION_TOKEN]` should be replaced with the Facebook authentication token.
   * Nonce is required for validating the token. The request will fail if no nonce is provided. If
   * the user is signing in to the Facebook provider using a Facebook access token, this should be
   * set to `access_token=[FACEBOOK_ACCESS_TOKEN]=facebook.com`, where `[FACEBOOK_ACCESS_TOKEN]`
   * should be replaced with the Facebook access token. If the user is signing in to the Twitter
   * provider using a Twitter OAuth 1.0 credential, this should be set to
   * `access_token=[TWITTER_ACCESS_TOKEN]_token_secret=[TWITTER_TOKEN_SECRET]=twitter.com`, where
   * `[TWITTER_ACCESS_TOKEN]` and `[TWITTER_TOKEN_SECRET]` should be replaced with the Twitter OAuth
   * access token and Twitter OAuth token secret respectively.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostBody() {
    return postBody;
  }

  /**
   * If the user is signing in with an authorization response obtained via a previous CreateAuthUri
   * authorization request, this is the body of the HTTP POST callback from the IdP, if present.
   * Otherwise, if the user is signing in with a manually provided IdP credential, this should be a
   * URL-encoded form that contains the credential (e.g. an ID token or access token for OAuth 2.0
   * IdPs) and the provider ID of the IdP that issued the credential. For example, if the user is
   * signing in to the Google provider using a Google ID token, this should be set to
   * `id_token=[GOOGLE_ID_TOKEN]=google.com`, where `[GOOGLE_ID_TOKEN]` should be replaced with the
   * Google ID token. If the user is signing in to the Facebook provider using a Facebook
   * authentication token, this should be set to
   * `id_token=[FACEBOOK_AUTHENTICATION_TOKEN]=facebook.com= [NONCE]`, where
   * `[FACEBOOK_AUTHENTICATION_TOKEN]` should be replaced with the Facebook authentication token.
   * Nonce is required for validating the token. The request will fail if no nonce is provided. If
   * the user is signing in to the Facebook provider using a Facebook access token, this should be
   * set to `access_token=[FACEBOOK_ACCESS_TOKEN]=facebook.com`, where `[FACEBOOK_ACCESS_TOKEN]`
   * should be replaced with the Facebook access token. If the user is signing in to the Twitter
   * provider using a Twitter OAuth 1.0 credential, this should be set to
   * `access_token=[TWITTER_ACCESS_TOKEN]_token_secret=[TWITTER_TOKEN_SECRET]=twitter.com`, where
   * `[TWITTER_ACCESS_TOKEN]` and `[TWITTER_TOKEN_SECRET]` should be replaced with the Twitter OAuth
   * access token and Twitter OAuth token secret respectively.
   * @param postBody postBody or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setPostBody(java.lang.String postBody) {
    this.postBody = postBody;
    return this;
  }

  /**
   * Required. The URL to which the IdP redirects the user back. This can be set to
   * `http://localhost` if the user is signing in with a manually provided IdP credential.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequestUri() {
    return requestUri;
  }

  /**
   * Required. The URL to which the IdP redirects the user back. This can be set to
   * `http://localhost` if the user is signing in with a manually provided IdP credential.
   * @param requestUri requestUri or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setRequestUri(java.lang.String requestUri) {
    this.requestUri = requestUri;
    return this;
  }

  /**
   * Whether or not to return OAuth credentials from the IdP on the following errors:
   * `FEDERATED_USER_ID_ALREADY_LINKED` and `EMAIL_EXISTS`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReturnIdpCredential() {
    return returnIdpCredential;
  }

  /**
   * Whether or not to return OAuth credentials from the IdP on the following errors:
   * `FEDERATED_USER_ID_ALREADY_LINKED` and `EMAIL_EXISTS`.
   * @param returnIdpCredential returnIdpCredential or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setReturnIdpCredential(java.lang.Boolean returnIdpCredential) {
    this.returnIdpCredential = returnIdpCredential;
    return this;
  }

  /**
   * Whether or not to return the OAuth refresh token from the IdP, if available.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReturnRefreshToken() {
    return returnRefreshToken;
  }

  /**
   * Whether or not to return the OAuth refresh token from the IdP, if available.
   * @param returnRefreshToken returnRefreshToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setReturnRefreshToken(java.lang.Boolean returnRefreshToken) {
    this.returnRefreshToken = returnRefreshToken;
    return this;
  }

  /**
   * Should always be true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReturnSecureToken() {
    return returnSecureToken;
  }

  /**
   * Should always be true.
   * @param returnSecureToken returnSecureToken or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setReturnSecureToken(java.lang.Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
    return this;
  }

  /**
   * The session ID returned from a previous CreateAuthUri call. This field is verified against that
   * session ID to prevent session fixation attacks. Required if the user is signing in with an
   * authorization response from a previous CreateAuthUri authorization request.
   * @return value or {@code null} for none
   */
  public java.lang.String getSessionId() {
    return sessionId;
  }

  /**
   * The session ID returned from a previous CreateAuthUri call. This field is verified against that
   * session ID to prevent session fixation attacks. Required if the user is signing in with an
   * authorization response from a previous CreateAuthUri authorization request.
   * @param sessionId sessionId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setSessionId(java.lang.String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The ID of the Identity Platform tenant the user is signing in to. If not set, the user will
   * sign in to the default Identity Platform project.
   * @return value or {@code null} for none
   */
  public java.lang.String getTenantId() {
    return tenantId;
  }

  /**
   * The ID of the Identity Platform tenant the user is signing in to. If not set, the user will
   * sign in to the default Identity Platform project.
   * @param tenantId tenantId or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest setTenantId(java.lang.String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  @Override
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest set(String fieldName, Object value) {
    return (GoogleCloudIdentitytoolkitV1SignInWithIdpRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudIdentitytoolkitV1SignInWithIdpRequest clone() {
    return (GoogleCloudIdentitytoolkitV1SignInWithIdpRequest) super.clone();
  }

}
