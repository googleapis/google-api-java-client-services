/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkservices.v1.model;

/**
 * The specifications for retries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Services API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HttpRouteRetryPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specified, default to
   * 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numRetries;

  /**
   * Specifies a non-zero timeout per retry attempt.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String perTryTimeout;

  /**
   * Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy
   * will attempt a retry if the destination service responds with any 5xx response code, of if the
   * destination service does not respond at all, example: disconnect, reset, read timeout,
   * connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to
   * response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does
   * not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on
   * failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy
   * will retry fro retriable 4xx response codes. Currently the only retriable error supported is
   * 409. refused-stream: Proxy will retry if the destination resets the stream with a
   * REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> retryConditions;

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specified, default to
   * 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumRetries() {
    return numRetries;
  }

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specified, default to
   * 1.
   * @param numRetries numRetries or {@code null} for none
   */
  public HttpRouteRetryPolicy setNumRetries(java.lang.Integer numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * Specifies a non-zero timeout per retry attempt.
   * @return value or {@code null} for none
   */
  public String getPerTryTimeout() {
    return perTryTimeout;
  }

  /**
   * Specifies a non-zero timeout per retry attempt.
   * @param perTryTimeout perTryTimeout or {@code null} for none
   */
  public HttpRouteRetryPolicy setPerTryTimeout(String perTryTimeout) {
    this.perTryTimeout = perTryTimeout;
    return this;
  }

  /**
   * Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy
   * will attempt a retry if the destination service responds with any 5xx response code, of if the
   * destination service does not respond at all, example: disconnect, reset, read timeout,
   * connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to
   * response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does
   * not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on
   * failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy
   * will retry fro retriable 4xx response codes. Currently the only retriable error supported is
   * 409. refused-stream: Proxy will retry if the destination resets the stream with a
   * REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRetryConditions() {
    return retryConditions;
  }

  /**
   * Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy
   * will attempt a retry if the destination service responds with any 5xx response code, of if the
   * destination service does not respond at all, example: disconnect, reset, read timeout,
   * connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to
   * response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does
   * not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on
   * failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy
   * will retry fro retriable 4xx response codes. Currently the only retriable error supported is
   * 409. refused-stream: Proxy will retry if the destination resets the stream with a
   * REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
   * @param retryConditions retryConditions or {@code null} for none
   */
  public HttpRouteRetryPolicy setRetryConditions(java.util.List<java.lang.String> retryConditions) {
    this.retryConditions = retryConditions;
    return this;
  }

  @Override
  public HttpRouteRetryPolicy set(String fieldName, Object value) {
    return (HttpRouteRetryPolicy) super.set(fieldName, value);
  }

  @Override
  public HttpRouteRetryPolicy clone() {
    return (HttpRouteRetryPolicy) super.clone();
  }

}
