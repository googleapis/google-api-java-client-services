/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.metastore.v1beta.model;

/**
 * A managed metastore service that serves metadata queries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dataproc Metastore API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Service extends com.google.api.client.json.GenericJson {

  /**
   * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related
   * to the metastore service are stored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String artifactGcsUri;

  /**
   * Output only. The time when the metastore service was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Immutable. The database type that the Metastore service stores its data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseType;

  /**
   * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer
   * data at rest. Cannot be updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EncryptionConfig encryptionConfig;

  /**
   * Output only. The URI of the endpoint used to access the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String endpointUri;

  /**
   * Configuration information specific to running Hive metastore software as the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HiveMetastoreConfig hiveMetastoreConfig;

  /**
   * User-defined labels for the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The one hour maintenance window of the metastore service. This specifies when the service can
   * be restarted for maintenance purposes in UTC time. Maintenance window is not needed for
   * services with the SPANNER database type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MaintenanceWindow maintenanceWindow;

  /**
   * The setting that defines how metastore metadata should be integrated with external services and
   * systems.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MetadataIntegration metadataIntegration;

  /**
   * Output only. The metadata management activities of the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MetadataManagementActivity metadataManagementActivity;

  /**
   * Immutable. The relative resource name of the metastore service, in the following
   * format:projects/{project_number}/locations/{location_id}/services/{service_id}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Immutable. The relative resource name of the VPC network on which the instance can be accessed.
   * It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * Immutable. The configuration specifying the network settings for the Dataproc Metastore
   * service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NetworkConfig networkConfig;

  /**
   * The TCP port at which the metastore service is reached. Default: 9083.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer port;

  /**
   * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String releaseChannel;

  /**
   * Output only. The current state of the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Additional information about the current state of the metastore service, if
   * available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateMessage;

  /**
   * The tier of the service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tier;

  /**
   * Output only. The globally unique resource identifier of the metastore service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. The time when the metastore service was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related
   * to the metastore service are stored.
   * @return value or {@code null} for none
   */
  public java.lang.String getArtifactGcsUri() {
    return artifactGcsUri;
  }

  /**
   * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related
   * to the metastore service are stored.
   * @param artifactGcsUri artifactGcsUri or {@code null} for none
   */
  public Service setArtifactGcsUri(java.lang.String artifactGcsUri) {
    this.artifactGcsUri = artifactGcsUri;
    return this;
  }

  /**
   * Output only. The time when the metastore service was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the metastore service was created.
   * @param createTime createTime or {@code null} for none
   */
  public Service setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Immutable. The database type that the Metastore service stores its data.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseType() {
    return databaseType;
  }

  /**
   * Immutable. The database type that the Metastore service stores its data.
   * @param databaseType databaseType or {@code null} for none
   */
  public Service setDatabaseType(java.lang.String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer
   * data at rest. Cannot be updated.
   * @return value or {@code null} for none
   */
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  /**
   * Immutable. Information used to configure the Dataproc Metastore service to encrypt customer
   * data at rest. Cannot be updated.
   * @param encryptionConfig encryptionConfig or {@code null} for none
   */
  public Service setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Output only. The URI of the endpoint used to access the metastore service.
   * @return value or {@code null} for none
   */
  public java.lang.String getEndpointUri() {
    return endpointUri;
  }

  /**
   * Output only. The URI of the endpoint used to access the metastore service.
   * @param endpointUri endpointUri or {@code null} for none
   */
  public Service setEndpointUri(java.lang.String endpointUri) {
    this.endpointUri = endpointUri;
    return this;
  }

  /**
   * Configuration information specific to running Hive metastore software as the metastore service.
   * @return value or {@code null} for none
   */
  public HiveMetastoreConfig getHiveMetastoreConfig() {
    return hiveMetastoreConfig;
  }

  /**
   * Configuration information specific to running Hive metastore software as the metastore service.
   * @param hiveMetastoreConfig hiveMetastoreConfig or {@code null} for none
   */
  public Service setHiveMetastoreConfig(HiveMetastoreConfig hiveMetastoreConfig) {
    this.hiveMetastoreConfig = hiveMetastoreConfig;
    return this;
  }

  /**
   * User-defined labels for the metastore service.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * User-defined labels for the metastore service.
   * @param labels labels or {@code null} for none
   */
  public Service setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The one hour maintenance window of the metastore service. This specifies when the service can
   * be restarted for maintenance purposes in UTC time. Maintenance window is not needed for
   * services with the SPANNER database type.
   * @return value or {@code null} for none
   */
  public MaintenanceWindow getMaintenanceWindow() {
    return maintenanceWindow;
  }

  /**
   * The one hour maintenance window of the metastore service. This specifies when the service can
   * be restarted for maintenance purposes in UTC time. Maintenance window is not needed for
   * services with the SPANNER database type.
   * @param maintenanceWindow maintenanceWindow or {@code null} for none
   */
  public Service setMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
    return this;
  }

  /**
   * The setting that defines how metastore metadata should be integrated with external services and
   * systems.
   * @return value or {@code null} for none
   */
  public MetadataIntegration getMetadataIntegration() {
    return metadataIntegration;
  }

  /**
   * The setting that defines how metastore metadata should be integrated with external services and
   * systems.
   * @param metadataIntegration metadataIntegration or {@code null} for none
   */
  public Service setMetadataIntegration(MetadataIntegration metadataIntegration) {
    this.metadataIntegration = metadataIntegration;
    return this;
  }

  /**
   * Output only. The metadata management activities of the metastore service.
   * @return value or {@code null} for none
   */
  public MetadataManagementActivity getMetadataManagementActivity() {
    return metadataManagementActivity;
  }

  /**
   * Output only. The metadata management activities of the metastore service.
   * @param metadataManagementActivity metadataManagementActivity or {@code null} for none
   */
  public Service setMetadataManagementActivity(MetadataManagementActivity metadataManagementActivity) {
    this.metadataManagementActivity = metadataManagementActivity;
    return this;
  }

  /**
   * Immutable. The relative resource name of the metastore service, in the following
   * format:projects/{project_number}/locations/{location_id}/services/{service_id}.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. The relative resource name of the metastore service, in the following
   * format:projects/{project_number}/locations/{location_id}/services/{service_id}.
   * @param name name or {@code null} for none
   */
  public Service setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The relative resource name of the VPC network on which the instance can be accessed.
   * It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * Immutable. The relative resource name of the VPC network on which the instance can be accessed.
   * It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
   * @param network network or {@code null} for none
   */
  public Service setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * Immutable. The configuration specifying the network settings for the Dataproc Metastore
   * service.
   * @return value or {@code null} for none
   */
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  /**
   * Immutable. The configuration specifying the network settings for the Dataproc Metastore
   * service.
   * @param networkConfig networkConfig or {@code null} for none
   */
  public Service setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * The TCP port at which the metastore service is reached. Default: 9083.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * The TCP port at which the metastore service is reached. Default: 9083.
   * @param port port or {@code null} for none
   */
  public Service setPort(java.lang.Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
   * @return value or {@code null} for none
   */
  public java.lang.String getReleaseChannel() {
    return releaseChannel;
  }

  /**
   * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
   * @param releaseChannel releaseChannel or {@code null} for none
   */
  public Service setReleaseChannel(java.lang.String releaseChannel) {
    this.releaseChannel = releaseChannel;
    return this;
  }

  /**
   * Output only. The current state of the metastore service.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The current state of the metastore service.
   * @param state state or {@code null} for none
   */
  public Service setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Additional information about the current state of the metastore service, if
   * available.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateMessage() {
    return stateMessage;
  }

  /**
   * Output only. Additional information about the current state of the metastore service, if
   * available.
   * @param stateMessage stateMessage or {@code null} for none
   */
  public Service setStateMessage(java.lang.String stateMessage) {
    this.stateMessage = stateMessage;
    return this;
  }

  /**
   * The tier of the service.
   * @return value or {@code null} for none
   */
  public java.lang.String getTier() {
    return tier;
  }

  /**
   * The tier of the service.
   * @param tier tier or {@code null} for none
   */
  public Service setTier(java.lang.String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Output only. The globally unique resource identifier of the metastore service.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The globally unique resource identifier of the metastore service.
   * @param uid uid or {@code null} for none
   */
  public Service setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. The time when the metastore service was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time when the metastore service was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Service setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Service set(String fieldName, Object value) {
    return (Service) super.set(fieldName, value);
  }

  @Override
  public Service clone() {
    return (Service) super.clone();
  }

}
