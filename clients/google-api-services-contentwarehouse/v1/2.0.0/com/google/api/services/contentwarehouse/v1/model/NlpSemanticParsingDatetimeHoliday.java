/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * List of holidays that are not fixed absolute or relative dates on the Gregorian calendar.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeHoliday extends com.google.api.client.json.GenericJson {

  /**
   * There are 3 types of holidays supported by the datetime subgrammar: 1) NonFixedHolidayEnum:
   * e.g., "easter", "chinese new year". 2) FetchedRelativeDateTime: e.g., "Thanksgiving" => [4th
   * Thursday of November] 3) HolidayByMonthDay: e.g., "xmas" => [December 25] Each holiday of the
   * first type is resolved by a C++ function; the 2nd and 3rd type of holidays are mapped to
   * AbsoluteDateTime and FetchedRelativeDateTime, respectively, in grammar and are not needed to be
   * represented in proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nonFixed;

  /**
   * There are 3 types of holidays supported by the datetime subgrammar: 1) NonFixedHolidayEnum:
   * e.g., "easter", "chinese new year". 2) FetchedRelativeDateTime: e.g., "Thanksgiving" => [4th
   * Thursday of November] 3) HolidayByMonthDay: e.g., "xmas" => [December 25] Each holiday of the
   * first type is resolved by a C++ function; the 2nd and 3rd type of holidays are mapped to
   * AbsoluteDateTime and FetchedRelativeDateTime, respectively, in grammar and are not needed to be
   * represented in proto.
   * @return value or {@code null} for none
   */
  public java.lang.String getNonFixed() {
    return nonFixed;
  }

  /**
   * There are 3 types of holidays supported by the datetime subgrammar: 1) NonFixedHolidayEnum:
   * e.g., "easter", "chinese new year". 2) FetchedRelativeDateTime: e.g., "Thanksgiving" => [4th
   * Thursday of November] 3) HolidayByMonthDay: e.g., "xmas" => [December 25] Each holiday of the
   * first type is resolved by a C++ function; the 2nd and 3rd type of holidays are mapped to
   * AbsoluteDateTime and FetchedRelativeDateTime, respectively, in grammar and are not needed to be
   * represented in proto.
   * @param nonFixed nonFixed or {@code null} for none
   */
  public NlpSemanticParsingDatetimeHoliday setNonFixed(java.lang.String nonFixed) {
    this.nonFixed = nonFixed;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeHoliday set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeHoliday) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeHoliday clone() {
    return (NlpSemanticParsingDatetimeHoliday) super.clone();
  }

}
