/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta2;

/**
 * Service definition for Firestore (v1beta2).
 *
 * <p>
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/firestore" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirestoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Firestore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Firestore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firestore.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Firestore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Firestore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firestore firestore = new Firestore(...);}
   *   {@code Firestore.Projects.List request = firestore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Databases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firestore firestore = new Firestore(...);}
     *   {@code Firestore.Databases.List request = firestore.databases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Databases databases() {
      return new Databases();
    }

    /**
     * The "databases" collection of methods.
     */
    public class Databases {

      /**
       * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
       * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
       * export. The export occurs in the background and its progress can be monitored and managed via the
       * Operation resource that is created. The output of an export may only be used once the associated
       * operation is done. If an export operation is cancelled before completion it may leave partial
       * data behind in Google Cloud Storage.
       *
       * Create a request for the method "databases.exportDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ExportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Database to export. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ExportDocumentsRequest}
       * @return the request
       */
      public ExportDocuments exportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ExportDocumentsRequest content) throws java.io.IOException {
        ExportDocuments result = new ExportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ExportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1beta2/{+name}:exportDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage
         * system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the
         * export. The export occurs in the background and its progress can be monitored and managed via
         * the Operation resource that is created. The output of an export may only be used once the
         * associated operation is done. If an export operation is cancelled before completion it may
         * leave partial data behind in Google Cloud Storage.
         *
         * Create a request for the method "databases.exportDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ExportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ExportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Database to export. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ExportDocumentsRequest}
         * @since 1.13
         */
        protected ExportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ExportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ExportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ExportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ExportDocuments setAccessToken(java.lang.String accessToken) {
          return (ExportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ExportDocuments setAlt(java.lang.String alt) {
          return (ExportDocuments) super.setAlt(alt);
        }

        @Override
        public ExportDocuments setCallback(java.lang.String callback) {
          return (ExportDocuments) super.setCallback(callback);
        }

        @Override
        public ExportDocuments setFields(java.lang.String fields) {
          return (ExportDocuments) super.setFields(fields);
        }

        @Override
        public ExportDocuments setKey(java.lang.String key) {
          return (ExportDocuments) super.setKey(key);
        }

        @Override
        public ExportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ExportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ExportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ExportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ExportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ExportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ExportDocuments setUploadType(java.lang.String uploadType) {
          return (ExportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ExportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ExportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ExportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ExportDocuments set(String parameterName, Object value) {
          return (ExportDocuments) super.set(parameterName, value);
        }
      }
      /**
       * Imports documents into Google Cloud Firestore. Existing documents with the same name are
       * overwritten. The import occurs in the background and its progress can be monitored and managed
       * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
       * possible that a subset of the data has already been imported to Cloud Firestore.
       *
       * Create a request for the method "databases.importDocuments".
       *
       * This request holds the parameters needed by the firestore server.  After setting any optional
       * parameters, call the {@link ImportDocuments#execute()} method to invoke the remote operation.
       *
       * @param name Database to import into. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
       * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ImportDocumentsRequest}
       * @return the request
       */
      public ImportDocuments importDocuments(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ImportDocumentsRequest content) throws java.io.IOException {
        ImportDocuments result = new ImportDocuments(name, content);
        initialize(result);
        return result;
      }

      public class ImportDocuments extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1beta2/{+name}:importDocuments";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+$");

        /**
         * Imports documents into Google Cloud Firestore. Existing documents with the same name are
         * overwritten. The import occurs in the background and its progress can be monitored and managed
         * via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is
         * possible that a subset of the data has already been imported to Cloud Firestore.
         *
         * Create a request for the method "databases.importDocuments".
         *
         * This request holds the parameters needed by the the firestore server.  After setting any
         * optional parameters, call the {@link ImportDocuments#execute()} method to invoke the remote
         * operation. <p> {@link ImportDocuments#initialize(com.google.api.client.googleapis.services.Abst
         * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param name Database to import into. Should be of the form:
      `projects/{project_id}/databases/{database_id}`.
         * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ImportDocumentsRequest}
         * @since 1.13
         */
        protected ImportDocuments(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ImportDocumentsRequest content) {
          super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
        }

        @Override
        public ImportDocuments set$Xgafv(java.lang.String $Xgafv) {
          return (ImportDocuments) super.set$Xgafv($Xgafv);
        }

        @Override
        public ImportDocuments setAccessToken(java.lang.String accessToken) {
          return (ImportDocuments) super.setAccessToken(accessToken);
        }

        @Override
        public ImportDocuments setAlt(java.lang.String alt) {
          return (ImportDocuments) super.setAlt(alt);
        }

        @Override
        public ImportDocuments setCallback(java.lang.String callback) {
          return (ImportDocuments) super.setCallback(callback);
        }

        @Override
        public ImportDocuments setFields(java.lang.String fields) {
          return (ImportDocuments) super.setFields(fields);
        }

        @Override
        public ImportDocuments setKey(java.lang.String key) {
          return (ImportDocuments) super.setKey(key);
        }

        @Override
        public ImportDocuments setOauthToken(java.lang.String oauthToken) {
          return (ImportDocuments) super.setOauthToken(oauthToken);
        }

        @Override
        public ImportDocuments setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ImportDocuments) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ImportDocuments setQuotaUser(java.lang.String quotaUser) {
          return (ImportDocuments) super.setQuotaUser(quotaUser);
        }

        @Override
        public ImportDocuments setUploadType(java.lang.String uploadType) {
          return (ImportDocuments) super.setUploadType(uploadType);
        }

        @Override
        public ImportDocuments setUploadProtocol(java.lang.String uploadProtocol) {
          return (ImportDocuments) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        public ImportDocuments setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/databases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public ImportDocuments set(String parameterName, Object value) {
          return (ImportDocuments) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the CollectionGroups collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firestore firestore = new Firestore(...);}
       *   {@code Firestore.CollectionGroups.List request = firestore.collectionGroups().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public CollectionGroups collectionGroups() {
        return new CollectionGroups();
      }

      /**
       * The "collectionGroups" collection of methods.
       */
      public class CollectionGroups {

        /**
         * An accessor for creating requests from the Fields collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firestore firestore = new Firestore(...);}
         *   {@code Firestore.Fields.List request = firestore.fields().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Fields fields() {
          return new Fields();
        }

        /**
         * The "fields" collection of methods.
         */
        public class Fields {

          /**
           * Gets the metadata and configuration for a Field.
           *
           * Create a request for the method "fields.get".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_id}`
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field> {

            private static final String REST_PATH = "v1beta2/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");

            /**
             * Gets the metadata and configuration for a Field.
             *
             * Create a request for the method "fields.get".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_id}`
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/fields/{field_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/fields/{field_id}`
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists the field configuration and metadata for this database.
           *
           * Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly
           * overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to
           * `indexConfig.usesAncestorConfig:false`.
           *
           * Create a request for the method "fields.list".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ListFieldsResponse> {

            private static final String REST_PATH = "v1beta2/{+parent}/fields";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Lists the field configuration and metadata for this database.
             *
             * Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly
             * overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to
             * `indexConfig.usesAncestorConfig:false`.
             *
             * Create a request for the method "fields.list".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ListFieldsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The filter to apply to list results. Currently, FirestoreAdmin.ListFields only
             * supports listing fields that have been explicitly overridden. To issue this query,
             * call FirestoreAdmin.ListFields with the filter set to
             * `indexConfig.usesAncestorConfig:false`.
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing
           fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields
           with the filter set to `indexConfig.usesAncestorConfig:false`.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * The filter to apply to list results. Currently, FirestoreAdmin.ListFields only
             * supports listing fields that have been explicitly overridden. To issue this query,
             * call FirestoreAdmin.ListFields with the filter set to
             * `indexConfig.usesAncestorConfig:false`.
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The number of results to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The number of results to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The number of results to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be
             * used to get the next page of results.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get
           the next page of results.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be
             * used to get the next page of results.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a field configuration. Currently, field updates apply only to single field index
           * configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid
           * changing any configuration that the caller isn't aware of. The field mask should be specified as:
           * `{ paths: "index_config" }`.
           *
           * This call returns a google.longrunning.Operation which may be used to track the status of the
           * field update. The metadata for the operation will be the type FieldOperationMetadata.
           *
           * To configure the default field settings for the database, use the special `Field` with resource
           * name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`.
           *
           * Create a request for the method "fields.patch".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name A field name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_path}`
          A field path may be a simple field name, e.g. `address` or a path to fields
           *        within map_value , e.g. `address.city`,
          or a special field path. The only valid special
           *        field is `*`, which
          represents any field.
          Field paths may be quoted using ` (backtick).
           *        The only character that needs
          to be escaped within a quoted field path is the backtick
           *        character itself,
          escaped using a backslash. Special characters in field paths that
          must
           *        be quoted include: `*`, `.`,
          ``` (backtick), `[`, `]`, as well as any ascii symbolic
           *        characters.
          Examples:
          (Note: Comments here are written in markdown syntax, so there is an
           *        additional layer of backticks to represent a code block)
          `\`address.city\`` represents a
           *        field named `address.city`, not the map key
          `city` in the field `address`.
          `\`*\``
           *        represents a field named `*`, not any field.
          A special `Field` contains the default
           *        indexing settings for all fields.
          This field's resource name is:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
           *        Indexes defined on this `Field` will be applied to all fields which do not
          have their own
           *        `Field` index configuration.
           * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1beta2/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");

            /**
             * Updates a field configuration. Currently, field updates apply only to single field index
             * configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to
             * avoid changing any configuration that the caller isn't aware of. The field mask should be
             * specified as: `{ paths: "index_config" }`.
             *
             * This call returns a google.longrunning.Operation which may be used to track the status of the
             * field update. The metadata for the operation will be the type FieldOperationMetadata.
             *
             * To configure the default field settings for the database, use the special `Field` with resource
             * name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`.
             *
             * Create a request for the method "fields.patch".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name A field name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{fi
           *        eld_path}`
          A field path may be a simple field name, e.g. `address` or a path to fields
           *        within map_value , e.g. `address.city`,
          or a special field path. The only valid special
           *        field is `*`, which
          represents any field.
          Field paths may be quoted using ` (backtick).
           *        The only character that needs
          to be escaped within a quoted field path is the backtick
           *        character itself,
          escaped using a backslash. Special characters in field paths that
          must
           *        be quoted include: `*`, `.`,
          ``` (backtick), `[`, `]`, as well as any ascii symbolic
           *        characters.
          Examples:
          (Note: Comments here are written in markdown syntax, so there is an
           *        additional layer of backticks to represent a code block)
          `\`address.city\`` represents a
           *        field named `address.city`, not the map key
          `city` in the field `address`.
          `\`*\``
           *        represents a field named `*`, not any field.
          A special `Field` contains the default
           *        indexing settings for all fields.
          This field's resource name is:
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
           *        Indexes defined on this `Field` will be applied to all fields which do not
          have their own
           *        `Field` index configuration.
             * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Field content) {
              super(Firestore.this, "PATCH", REST_PATH, content, com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A field name of the form `projects/{project_id}/databases/{database_id}/collectionGro
             * ups/{collection_id}/fields/{field_path}`
             *
             * A field path may be a simple field name, e.g. `address` or a path to fields within
             * map_value , e.g. `address.city`, or a special field path. The only valid special
             * field is `*`, which represents any field.
             *
             * Field paths may be quoted using ` (backtick). The only character that needs to be
             * escaped within a quoted field path is the backtick character itself, escaped using a
             * backslash. Special characters in field paths that must be quoted include: `*`, `.`,
             * ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
             *
             * Examples: (Note: Comments here are written in markdown syntax, so there is an
             * additional layer of backticks to represent a code block) `\`address.city\``
             * represents a field named `address.city`, not the map key `city` in the field
             * `address`. `\`*\`` represents a field named `*`, not any field.
             *
             * A special `Field` contains the default indexing settings for all fields. This field's
             * resource name is:
             * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
             * Indexes defined on this `Field` will be applied to all fields which do not have their
             * own `Field` index configuration.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collectio
           n_id}/fields/{field_path}`

           A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g.
           `address.city`, or a special field path. The only valid special field is `*`, which represents any
           field.

           Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a
           quoted field path is the backtick character itself, escaped using a backslash. Special characters
           in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any
           ascii symbolic characters.

           Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of
           backticks to represent a code block) `\`address.city\`` represents a field named `address.city`,
           not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field.

           A special `Field` contains the default indexing settings for all fields. This field's resource name
           is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields` Indexes
           defined on this `Field` will be applied to all fields which do not have their own `Field` index
           configuration.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * A field name of the form `projects/{project_id}/databases/{database_id}/collectionGro
             * ups/{collection_id}/fields/{field_path}`
             *
             * A field path may be a simple field name, e.g. `address` or a path to fields within
             * map_value , e.g. `address.city`, or a special field path. The only valid special
             * field is `*`, which represents any field.
             *
             * Field paths may be quoted using ` (backtick). The only character that needs to be
             * escaped within a quoted field path is the backtick character itself, escaped using a
             * backslash. Special characters in field paths that must be quoted include: `*`, `.`,
             * ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
             *
             * Examples: (Note: Comments here are written in markdown syntax, so there is an
             * additional layer of backticks to represent a code block) `\`address.city\``
             * represents a field named `address.city`, not the map key `city` in the field
             * `address`. `\`*\`` represents a field named `*`, not any field.
             *
             * A special `Field` contains the default indexing settings for all fields. This field's
             * resource name is:
             * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields`
             * Indexes defined on this `Field` will be applied to all fields which do not have their
             * own `Field` index configuration.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * A mask, relative to the field. If specified, only configuration specified by this
             * field_mask will be updated in the field.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** A mask, relative to the field. If specified, only configuration specified by this field_mask will
           be updated in the field.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * A mask, relative to the field. If specified, only configuration specified by this
             * field_mask will be updated in the field.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Indexes collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firestore firestore = new Firestore(...);}
         *   {@code Firestore.Indexes.List request = firestore.indexes().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Indexes indexes() {
          return new Indexes();
        }

        /**
         * The "indexes" collection of methods.
         */
        public class Indexes {

          /**
           * Creates a composite index. This returns a google.longrunning.Operation which may be used to track
           * the status of the creation. The metadata for the operation will be the type
           * IndexOperationMetadata.
           *
           * Create a request for the method "indexes.create".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1beta2/{+parent}/indexes";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Creates a composite index. This returns a google.longrunning.Operation which may be used to
             * track the status of the creation. The metadata for the operation will be the type
             * IndexOperationMetadata.
             *
             * Create a request for the method "indexes.create".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @param content the {@link com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index content) {
              super(Firestore.this, "POST", REST_PATH, content, com.google.api.services.firestore.v1beta2.model.GoogleLongrunningOperation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a composite index.
           *
           * Create a request for the method "indexes.delete".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.Empty> {

            private static final String REST_PATH = "v1beta2/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");

            /**
             * Deletes a composite index.
             *
             * Create a request for the method "indexes.delete".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(Firestore.this, "DELETE", REST_PATH, null, com.google.api.services.firestore.v1beta2.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/indexes/{index_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/indexes/{index_id}`
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets a composite index.
           *
           * Create a request for the method "indexes.get".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index> {

            private static final String REST_PATH = "v1beta2/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");

            /**
             * Gets a composite index.
             *
             * Create a request for the method "indexes.get".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name A name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{i
           *        ndex_id}`
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2Index.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/indexes/{index_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** A name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{c
             * ollection_id}/indexes/{index_id}`
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists composite indexes.
           *
           * Create a request for the method "indexes.list".
           *
           * This request holds the parameters needed by the firestore server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirestoreRequest<com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ListIndexesResponse> {

            private static final String REST_PATH = "v1beta2/{+parent}/indexes";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");

            /**
             * Lists composite indexes.
             *
             * Create a request for the method "indexes.list".
             *
             * This request holds the parameters needed by the the firestore server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent A parent name of the form
           *        `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Firestore.this, "GET", REST_PATH, null, com.google.api.services.firestore.v1beta2.model.GoogleFirestoreAdminV1beta2ListIndexesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** A parent name of the form
           `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * A parent name of the form
             * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** The filter to apply to list results. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The filter to apply to list results.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** The filter to apply to list results. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The number of results to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The number of results to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The number of results to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may
             * be used to get the next page of results.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get
           the next page of results.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may
             * be used to get the next page of results.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link Firestore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Firestore}. */
    @Override
    public Firestore build() {
      return new Firestore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirestoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirestoreRequestInitializer(
        FirestoreRequestInitializer firestoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firestoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
