/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.documentai.v1.model;

/**
 * EntityType is the wrapper of a label of the corresponding model with detailed attributes and
 * limitations for entity-based processors. Multiple types can also compose a dependency tree to
 * represent nested types.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Document AI API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDocumentaiV1DocumentSchemaEntityType extends com.google.api.client.json.GenericJson {

  /**
   * The entity type that this type is derived from. For now, one and only one should be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> baseTypes;

  /**
   * User defined name for the type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * If specified, lists all the possible values for this entity. This should not be more than a
   * handful of values. If the number of values is >10 or could change frequently use the
   * `EntityType.value_ontology` field and specify a list of all possible values in a value ontology
   * file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues enumValues;

  /**
   * Name of the type. It must be unique within the schema file and cannot be a 'Common Type'.
   * Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is
   * case-insensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters:
   * ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can
   * handle any ascii character) - The `/` is sometimes used to denote a property of a type. For
   * example `line_item/amount`. This convention is deprecated, but will still be honored for
   * backward compatibility.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Describing the nested structure, or composition of an entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty> properties;

  /**
   * The entity type that this type is derived from. For now, one and only one should be set.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBaseTypes() {
    return baseTypes;
  }

  /**
   * The entity type that this type is derived from. For now, one and only one should be set.
   * @param baseTypes baseTypes or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType setBaseTypes(java.util.List<java.lang.String> baseTypes) {
    this.baseTypes = baseTypes;
    return this;
  }

  /**
   * User defined name for the type.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * User defined name for the type.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * If specified, lists all the possible values for this entity. This should not be more than a
   * handful of values. If the number of values is >10 or could change frequently use the
   * `EntityType.value_ontology` field and specify a list of all possible values in a value ontology
   * file.
   * @return value or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues getEnumValues() {
    return enumValues;
  }

  /**
   * If specified, lists all the possible values for this entity. This should not be more than a
   * handful of values. If the number of values is >10 or could change frequently use the
   * `EntityType.value_ontology` field and specify a list of all possible values in a value ontology
   * file.
   * @param enumValues enumValues or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType setEnumValues(GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  /**
   * Name of the type. It must be unique within the schema file and cannot be a 'Common Type'.
   * Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is
   * case-insensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters:
   * ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can
   * handle any ascii character) - The `/` is sometimes used to denote a property of a type. For
   * example `line_item/amount`. This convention is deprecated, but will still be honored for
   * backward compatibility.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the type. It must be unique within the schema file and cannot be a 'Common Type'.
   * Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is
   * case-insensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters:
   * ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can
   * handle any ascii character) - The `/` is sometimes used to denote a property of a type. For
   * example `line_item/amount`. This convention is deprecated, but will still be honored for
   * backward compatibility.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Describing the nested structure, or composition of an entity.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty> getProperties() {
    return properties;
  }

  /**
   * Describing the nested structure, or composition of an entity.
   * @param properties properties or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType setProperties(java.util.List<GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty> properties) {
    this.properties = properties;
    return this;
  }

  @Override
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType set(String fieldName, Object value) {
    return (GoogleCloudDocumentaiV1DocumentSchemaEntityType) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDocumentaiV1DocumentSchemaEntityType clone() {
    return (GoogleCloudDocumentaiV1DocumentSchemaEntityType) super.clone();
  }

}
