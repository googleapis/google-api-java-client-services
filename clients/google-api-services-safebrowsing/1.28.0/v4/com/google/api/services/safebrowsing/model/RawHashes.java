/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.safebrowsing.model;

/**
 * The uncompressed threat entries in hash format of a particular prefix length. Hashes can be
 * anywhere from 4 to 32 bytes in size. A large majority are 4 bytes, but some hashes are lengthened
 * if they collide with the hash of a popular URL.
 *
 * Used for sending ThreatEntrySet to clients that do not support compression, or when sending
 * non-4-byte hashes to clients that do support compression.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Safe Browsing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RawHashes extends com.google.api.client.json.GenericJson {

  /**
   * The number of bytes for each prefix encoded below.  This field can be anywhere from 4 (shortest
   * prefix) to 32 (full SHA256 hash).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer prefixSize;

  /**
   * The hashes, in binary format, concatenated into one long string. Hashes are sorted in
   * lexicographic order. For JSON API users, hashes are base64-encoded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawHashes;

  /**
   * The number of bytes for each prefix encoded below.  This field can be anywhere from 4 (shortest
   * prefix) to 32 (full SHA256 hash).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPrefixSize() {
    return prefixSize;
  }

  /**
   * The number of bytes for each prefix encoded below.  This field can be anywhere from 4 (shortest
   * prefix) to 32 (full SHA256 hash).
   * @param prefixSize prefixSize or {@code null} for none
   */
  public RawHashes setPrefixSize(java.lang.Integer prefixSize) {
    this.prefixSize = prefixSize;
    return this;
  }

  /**
   * The hashes, in binary format, concatenated into one long string. Hashes are sorted in
   * lexicographic order. For JSON API users, hashes are base64-encoded.
   * @see #decodeRawHashes()
   * @return value or {@code null} for none
   */
  public java.lang.String getRawHashes() {
    return rawHashes;
  }

  /**
   * The hashes, in binary format, concatenated into one long string. Hashes are sorted in
   * lexicographic order. For JSON API users, hashes are base64-encoded.
   * @see #getRawHashes()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeRawHashes() {
    return com.google.api.client.util.Base64.decodeBase64(rawHashes);
  }

  /**
   * The hashes, in binary format, concatenated into one long string. Hashes are sorted in
   * lexicographic order. For JSON API users, hashes are base64-encoded.
   * @see #encodeRawHashes()
   * @param rawHashes rawHashes or {@code null} for none
   */
  public RawHashes setRawHashes(java.lang.String rawHashes) {
    this.rawHashes = rawHashes;
    return this;
  }

  /**
   * The hashes, in binary format, concatenated into one long string. Hashes are sorted in
   * lexicographic order. For JSON API users, hashes are base64-encoded.
   * @see #setRawHashes()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public RawHashes encodeRawHashes(byte[] rawHashes) {
    this.rawHashes = com.google.api.client.util.Base64.encodeBase64URLSafeString(rawHashes);
    return this;
  }

  @Override
  public RawHashes set(String fieldName, Object value) {
    return (RawHashes) super.set(fieldName, value);
  }

  @Override
  public RawHashes clone() {
    return (RawHashes) super.clone();
  }

}
