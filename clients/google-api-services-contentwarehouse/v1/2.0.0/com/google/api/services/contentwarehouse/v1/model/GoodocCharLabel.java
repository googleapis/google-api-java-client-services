/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Font label
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocCharLabel extends com.google.api.client.json.GenericJson {

  /**
   * The shift of a character from the base line of the string in pixels
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("BaseLine")
  private java.lang.Integer baseLine;

  /**
   * Height of small characters in pixels on the source image
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CharacterHeight")
  private java.lang.Integer characterHeight;

  /**
   * The foreground color of the symbol; the default color is 0 (black)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Color")
  private java.lang.Integer color;

  /**
   * Symbol recognition confidence from OCR. Range depends upon OCR Engine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Confidence")
  private java.lang.Integer confidence;

  /**
   * The font ID refers to the fonts table in the document header
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("FontId")
  private java.lang.Integer fontId;

  /**
   * Size in points (JFYI: point is 1/72"). This is rounded to the nearest whole number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("FontSize")
  private java.lang.Integer fontSize;

  /**
   * Size in points represented as float.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("FontSizeFloat")
  private java.lang.Float fontSizeFloat;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("FontType")
  private java.lang.Integer fontType;

  /**
   * If CharacterHeight is defined uncertainly
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HasUncertainHeight")
  private java.lang.Boolean hasUncertainHeight;

  /**
   * The horizontal scaling for a character, in percents. The default value for this property is
   * 100, which corresponds to no scaling.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HorizontalScale")
  private java.lang.Integer horizontalScale;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsBold")
  private java.lang.Boolean isBold;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsItalic")
  private java.lang.Boolean isItalic;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsSmallCaps")
  private java.lang.Boolean isSmallCaps;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsStrikeout")
  private java.lang.Boolean isStrikeout;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsSubscript")
  private java.lang.Boolean isSubscript;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsSuperscript")
  private java.lang.Boolean isSuperscript;

  /**
   * If OCR Engine marked the character as "suspicious" (this character is likely to be recognized
   * incorrectly).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsSuspicious")
  private java.lang.Boolean isSuspicious;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsUnderlined")
  private java.lang.Boolean isUnderlined;

  /**
   * True if a QA operator has marked this as not OCRable. This is used for complex equations,
   * scripts that the operator can't type, or handwriting.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("NotOcrablePerQA")
  private java.lang.Boolean notOcrablePerQA;

  /**
   * Symbol-level penalty from the garbage text detector. Lower is better; range = [0,100].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Penalty")
  private java.lang.Integer penalty;

  /**
   * The probability that a character is written with a Serif font
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SerifProbability")
  private java.lang.Integer serifProbability;

  /**
   * The shift of a character from the base line of the string in pixels
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBaseLine() {
    return baseLine;
  }

  /**
   * The shift of a character from the base line of the string in pixels
   * @param baseLine baseLine or {@code null} for none
   */
  public GoodocCharLabel setBaseLine(java.lang.Integer baseLine) {
    this.baseLine = baseLine;
    return this;
  }

  /**
   * Height of small characters in pixels on the source image
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCharacterHeight() {
    return characterHeight;
  }

  /**
   * Height of small characters in pixels on the source image
   * @param characterHeight characterHeight or {@code null} for none
   */
  public GoodocCharLabel setCharacterHeight(java.lang.Integer characterHeight) {
    this.characterHeight = characterHeight;
    return this;
  }

  /**
   * The foreground color of the symbol; the default color is 0 (black)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColor() {
    return color;
  }

  /**
   * The foreground color of the symbol; the default color is 0 (black)
   * @param color color or {@code null} for none
   */
  public GoodocCharLabel setColor(java.lang.Integer color) {
    this.color = color;
    return this;
  }

  /**
   * Symbol recognition confidence from OCR. Range depends upon OCR Engine.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConfidence() {
    return confidence;
  }

  /**
   * Symbol recognition confidence from OCR. Range depends upon OCR Engine.
   * @param confidence confidence or {@code null} for none
   */
  public GoodocCharLabel setConfidence(java.lang.Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The font ID refers to the fonts table in the document header
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontId() {
    return fontId;
  }

  /**
   * The font ID refers to the fonts table in the document header
   * @param fontId fontId or {@code null} for none
   */
  public GoodocCharLabel setFontId(java.lang.Integer fontId) {
    this.fontId = fontId;
    return this;
  }

  /**
   * Size in points (JFYI: point is 1/72"). This is rounded to the nearest whole number.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontSize() {
    return fontSize;
  }

  /**
   * Size in points (JFYI: point is 1/72"). This is rounded to the nearest whole number.
   * @param fontSize fontSize or {@code null} for none
   */
  public GoodocCharLabel setFontSize(java.lang.Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Size in points represented as float.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFontSizeFloat() {
    return fontSizeFloat;
  }

  /**
   * Size in points represented as float.
   * @param fontSizeFloat fontSizeFloat or {@code null} for none
   */
  public GoodocCharLabel setFontSizeFloat(java.lang.Float fontSizeFloat) {
    this.fontSizeFloat = fontSizeFloat;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontType() {
    return fontType;
  }

  /**
   * @param fontType fontType or {@code null} for none
   */
  public GoodocCharLabel setFontType(java.lang.Integer fontType) {
    this.fontType = fontType;
    return this;
  }

  /**
   * If CharacterHeight is defined uncertainly
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasUncertainHeight() {
    return hasUncertainHeight;
  }

  /**
   * If CharacterHeight is defined uncertainly
   * @param hasUncertainHeight hasUncertainHeight or {@code null} for none
   */
  public GoodocCharLabel setHasUncertainHeight(java.lang.Boolean hasUncertainHeight) {
    this.hasUncertainHeight = hasUncertainHeight;
    return this;
  }

  /**
   * The horizontal scaling for a character, in percents. The default value for this property is
   * 100, which corresponds to no scaling.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHorizontalScale() {
    return horizontalScale;
  }

  /**
   * The horizontal scaling for a character, in percents. The default value for this property is
   * 100, which corresponds to no scaling.
   * @param horizontalScale horizontalScale or {@code null} for none
   */
  public GoodocCharLabel setHorizontalScale(java.lang.Integer horizontalScale) {
    this.horizontalScale = horizontalScale;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsBold() {
    return isBold;
  }

  /**
   * @param isBold isBold or {@code null} for none
   */
  public GoodocCharLabel setIsBold(java.lang.Boolean isBold) {
    this.isBold = isBold;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsItalic() {
    return isItalic;
  }

  /**
   * @param isItalic isItalic or {@code null} for none
   */
  public GoodocCharLabel setIsItalic(java.lang.Boolean isItalic) {
    this.isItalic = isItalic;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSmallCaps() {
    return isSmallCaps;
  }

  /**
   * @param isSmallCaps isSmallCaps or {@code null} for none
   */
  public GoodocCharLabel setIsSmallCaps(java.lang.Boolean isSmallCaps) {
    this.isSmallCaps = isSmallCaps;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsStrikeout() {
    return isStrikeout;
  }

  /**
   * @param isStrikeout isStrikeout or {@code null} for none
   */
  public GoodocCharLabel setIsStrikeout(java.lang.Boolean isStrikeout) {
    this.isStrikeout = isStrikeout;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSubscript() {
    return isSubscript;
  }

  /**
   * @param isSubscript isSubscript or {@code null} for none
   */
  public GoodocCharLabel setIsSubscript(java.lang.Boolean isSubscript) {
    this.isSubscript = isSubscript;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSuperscript() {
    return isSuperscript;
  }

  /**
   * @param isSuperscript isSuperscript or {@code null} for none
   */
  public GoodocCharLabel setIsSuperscript(java.lang.Boolean isSuperscript) {
    this.isSuperscript = isSuperscript;
    return this;
  }

  /**
   * If OCR Engine marked the character as "suspicious" (this character is likely to be recognized
   * incorrectly).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSuspicious() {
    return isSuspicious;
  }

  /**
   * If OCR Engine marked the character as "suspicious" (this character is likely to be recognized
   * incorrectly).
   * @param isSuspicious isSuspicious or {@code null} for none
   */
  public GoodocCharLabel setIsSuspicious(java.lang.Boolean isSuspicious) {
    this.isSuspicious = isSuspicious;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsUnderlined() {
    return isUnderlined;
  }

  /**
   * @param isUnderlined isUnderlined or {@code null} for none
   */
  public GoodocCharLabel setIsUnderlined(java.lang.Boolean isUnderlined) {
    this.isUnderlined = isUnderlined;
    return this;
  }

  /**
   * True if a QA operator has marked this as not OCRable. This is used for complex equations,
   * scripts that the operator can't type, or handwriting.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNotOcrablePerQA() {
    return notOcrablePerQA;
  }

  /**
   * True if a QA operator has marked this as not OCRable. This is used for complex equations,
   * scripts that the operator can't type, or handwriting.
   * @param notOcrablePerQA notOcrablePerQA or {@code null} for none
   */
  public GoodocCharLabel setNotOcrablePerQA(java.lang.Boolean notOcrablePerQA) {
    this.notOcrablePerQA = notOcrablePerQA;
    return this;
  }

  /**
   * Symbol-level penalty from the garbage text detector. Lower is better; range = [0,100].
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPenalty() {
    return penalty;
  }

  /**
   * Symbol-level penalty from the garbage text detector. Lower is better; range = [0,100].
   * @param penalty penalty or {@code null} for none
   */
  public GoodocCharLabel setPenalty(java.lang.Integer penalty) {
    this.penalty = penalty;
    return this;
  }

  /**
   * The probability that a character is written with a Serif font
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSerifProbability() {
    return serifProbability;
  }

  /**
   * The probability that a character is written with a Serif font
   * @param serifProbability serifProbability or {@code null} for none
   */
  public GoodocCharLabel setSerifProbability(java.lang.Integer serifProbability) {
    this.serifProbability = serifProbability;
    return this;
  }

  @Override
  public GoodocCharLabel set(String fieldName, Object value) {
    return (GoodocCharLabel) super.set(fieldName, value);
  }

  @Override
  public GoodocCharLabel clone() {
    return (GoodocCharLabel) super.clone();
  }

}
