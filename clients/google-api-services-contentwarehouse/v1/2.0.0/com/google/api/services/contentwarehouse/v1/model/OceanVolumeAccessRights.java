/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for OceanVolumeAccessRights.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OceanVolumeAccessRights extends com.google.api.client.json.GenericJson {

  /**
   * If false, then we can only provide text layer generated from publisher provided epub.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAutoGeneratedText;

  /**
   * Whether we can show info cards inside this book.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canShowInfoCards;

  /**
   * Whether we can show photos inside this book.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canShowPhotos;

  /**
   * Maximum number of Adobe Digital Editions device per sale item allowed. 0 means no download
   * allowed. -1 means unlimited download.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numAdeDeviceAllowed;

  /**
   * Maximum number of Adobe id per sale item allowed. 0 means no download allowed. -1 means
   * unlimited download.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numAdobeIdAllowed;

  /**
   * Max. number of Google eBooks downloads allowed. This is related to
   * iPhone/iPad/Androrid/WebReader reading, not to epub/pdf downloads. 0 means no download allowed.
   * This is related to bug #3094719.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numDownloadsAllowed;

  /**
   * Number of readers can read the Google eBooks simultaneously
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numSimultaneousAccess;

  /**
   * Download type for offline reading
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String offlineDownload;

  /**
   * How much of a volume we allow user to extract as text (for copy+paste)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer percentCopyable;

  /**
   * How much of a volume we allow user to print
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer percentPrintable;

  /**
   * True iff restrict view only to epub text. Don't show page images if this is true. Some pubs
   * don't have copyright for page layout and fonts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean restrictOnlyToText;

  /**
   * Whether we sell fixed layout as image only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sellFixedLayoutAsImageOnly;

  /**
   * Whether text to speech is allowed
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean textToSpeech;

  /**
   * Whether we treat this book as public domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean treatAsPublicDomain;

  /**
   * If false, then we can only provide text layer generated from publisher provided epub.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAutoGeneratedText() {
    return allowAutoGeneratedText;
  }

  /**
   * If false, then we can only provide text layer generated from publisher provided epub.
   * @param allowAutoGeneratedText allowAutoGeneratedText or {@code null} for none
   */
  public OceanVolumeAccessRights setAllowAutoGeneratedText(java.lang.Boolean allowAutoGeneratedText) {
    this.allowAutoGeneratedText = allowAutoGeneratedText;
    return this;
  }

  /**
   * Whether we can show info cards inside this book.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanShowInfoCards() {
    return canShowInfoCards;
  }

  /**
   * Whether we can show info cards inside this book.
   * @param canShowInfoCards canShowInfoCards or {@code null} for none
   */
  public OceanVolumeAccessRights setCanShowInfoCards(java.lang.Boolean canShowInfoCards) {
    this.canShowInfoCards = canShowInfoCards;
    return this;
  }

  /**
   * Whether we can show photos inside this book.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanShowPhotos() {
    return canShowPhotos;
  }

  /**
   * Whether we can show photos inside this book.
   * @param canShowPhotos canShowPhotos or {@code null} for none
   */
  public OceanVolumeAccessRights setCanShowPhotos(java.lang.Boolean canShowPhotos) {
    this.canShowPhotos = canShowPhotos;
    return this;
  }

  /**
   * Maximum number of Adobe Digital Editions device per sale item allowed. 0 means no download
   * allowed. -1 means unlimited download.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumAdeDeviceAllowed() {
    return numAdeDeviceAllowed;
  }

  /**
   * Maximum number of Adobe Digital Editions device per sale item allowed. 0 means no download
   * allowed. -1 means unlimited download.
   * @param numAdeDeviceAllowed numAdeDeviceAllowed or {@code null} for none
   */
  public OceanVolumeAccessRights setNumAdeDeviceAllowed(java.lang.Integer numAdeDeviceAllowed) {
    this.numAdeDeviceAllowed = numAdeDeviceAllowed;
    return this;
  }

  /**
   * Maximum number of Adobe id per sale item allowed. 0 means no download allowed. -1 means
   * unlimited download.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumAdobeIdAllowed() {
    return numAdobeIdAllowed;
  }

  /**
   * Maximum number of Adobe id per sale item allowed. 0 means no download allowed. -1 means
   * unlimited download.
   * @param numAdobeIdAllowed numAdobeIdAllowed or {@code null} for none
   */
  public OceanVolumeAccessRights setNumAdobeIdAllowed(java.lang.Integer numAdobeIdAllowed) {
    this.numAdobeIdAllowed = numAdobeIdAllowed;
    return this;
  }

  /**
   * Max. number of Google eBooks downloads allowed. This is related to
   * iPhone/iPad/Androrid/WebReader reading, not to epub/pdf downloads. 0 means no download allowed.
   * This is related to bug #3094719.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumDownloadsAllowed() {
    return numDownloadsAllowed;
  }

  /**
   * Max. number of Google eBooks downloads allowed. This is related to
   * iPhone/iPad/Androrid/WebReader reading, not to epub/pdf downloads. 0 means no download allowed.
   * This is related to bug #3094719.
   * @param numDownloadsAllowed numDownloadsAllowed or {@code null} for none
   */
  public OceanVolumeAccessRights setNumDownloadsAllowed(java.lang.Integer numDownloadsAllowed) {
    this.numDownloadsAllowed = numDownloadsAllowed;
    return this;
  }

  /**
   * Number of readers can read the Google eBooks simultaneously
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumSimultaneousAccess() {
    return numSimultaneousAccess;
  }

  /**
   * Number of readers can read the Google eBooks simultaneously
   * @param numSimultaneousAccess numSimultaneousAccess or {@code null} for none
   */
  public OceanVolumeAccessRights setNumSimultaneousAccess(java.lang.Integer numSimultaneousAccess) {
    this.numSimultaneousAccess = numSimultaneousAccess;
    return this;
  }

  /**
   * Download type for offline reading
   * @return value or {@code null} for none
   */
  public java.lang.String getOfflineDownload() {
    return offlineDownload;
  }

  /**
   * Download type for offline reading
   * @param offlineDownload offlineDownload or {@code null} for none
   */
  public OceanVolumeAccessRights setOfflineDownload(java.lang.String offlineDownload) {
    this.offlineDownload = offlineDownload;
    return this;
  }

  /**
   * How much of a volume we allow user to extract as text (for copy+paste)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPercentCopyable() {
    return percentCopyable;
  }

  /**
   * How much of a volume we allow user to extract as text (for copy+paste)
   * @param percentCopyable percentCopyable or {@code null} for none
   */
  public OceanVolumeAccessRights setPercentCopyable(java.lang.Integer percentCopyable) {
    this.percentCopyable = percentCopyable;
    return this;
  }

  /**
   * How much of a volume we allow user to print
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPercentPrintable() {
    return percentPrintable;
  }

  /**
   * How much of a volume we allow user to print
   * @param percentPrintable percentPrintable or {@code null} for none
   */
  public OceanVolumeAccessRights setPercentPrintable(java.lang.Integer percentPrintable) {
    this.percentPrintable = percentPrintable;
    return this;
  }

  /**
   * True iff restrict view only to epub text. Don't show page images if this is true. Some pubs
   * don't have copyright for page layout and fonts.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRestrictOnlyToText() {
    return restrictOnlyToText;
  }

  /**
   * True iff restrict view only to epub text. Don't show page images if this is true. Some pubs
   * don't have copyright for page layout and fonts.
   * @param restrictOnlyToText restrictOnlyToText or {@code null} for none
   */
  public OceanVolumeAccessRights setRestrictOnlyToText(java.lang.Boolean restrictOnlyToText) {
    this.restrictOnlyToText = restrictOnlyToText;
    return this;
  }

  /**
   * Whether we sell fixed layout as image only.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSellFixedLayoutAsImageOnly() {
    return sellFixedLayoutAsImageOnly;
  }

  /**
   * Whether we sell fixed layout as image only.
   * @param sellFixedLayoutAsImageOnly sellFixedLayoutAsImageOnly or {@code null} for none
   */
  public OceanVolumeAccessRights setSellFixedLayoutAsImageOnly(java.lang.Boolean sellFixedLayoutAsImageOnly) {
    this.sellFixedLayoutAsImageOnly = sellFixedLayoutAsImageOnly;
    return this;
  }

  /**
   * Whether text to speech is allowed
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTextToSpeech() {
    return textToSpeech;
  }

  /**
   * Whether text to speech is allowed
   * @param textToSpeech textToSpeech or {@code null} for none
   */
  public OceanVolumeAccessRights setTextToSpeech(java.lang.Boolean textToSpeech) {
    this.textToSpeech = textToSpeech;
    return this;
  }

  /**
   * Whether we treat this book as public domain.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTreatAsPublicDomain() {
    return treatAsPublicDomain;
  }

  /**
   * Whether we treat this book as public domain.
   * @param treatAsPublicDomain treatAsPublicDomain or {@code null} for none
   */
  public OceanVolumeAccessRights setTreatAsPublicDomain(java.lang.Boolean treatAsPublicDomain) {
    this.treatAsPublicDomain = treatAsPublicDomain;
    return this;
  }

  @Override
  public OceanVolumeAccessRights set(String fieldName, Object value) {
    return (OceanVolumeAccessRights) super.set(fieldName, value);
  }

  @Override
  public OceanVolumeAccessRights clone() {
    return (OceanVolumeAccessRights) super.clone();
  }

}
