/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A single compound mention. Next available tag: 3
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefMentionCompoundMention extends com.google.api.client.json.GenericJson {

  /**
   * References to the component mentions which the MRF needs to be fully expanded. It is guaranteed
   * that for a given set of components there exists only a single CompoundMention, i.e. the
   * CompoundMentions are deduped to be unique so each set of components is present only once. The
   * ArgumentValue of the WebrefEntity.mrf refer to these components via ComponentReference; it is
   * guaranteed there are as many components as the MRF expression refers to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefMentionComponent> component;

  static {
    // hack to force ProGuard to consider RepositoryWebrefMentionComponent used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefMentionComponent.class);
  }

  /**
   * The WebrefEntity.mrf indices which this compound applies to. There can be at most one
   * CompoundMention which claims an MRF index, but it is possible there are MRF expressions which
   * are not claimed by any CompoundMention.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> mrfIndex;

  /**
   * References to the component mentions which the MRF needs to be fully expanded. It is guaranteed
   * that for a given set of components there exists only a single CompoundMention, i.e. the
   * CompoundMentions are deduped to be unique so each set of components is present only once. The
   * ArgumentValue of the WebrefEntity.mrf refer to these components via ComponentReference; it is
   * guaranteed there are as many components as the MRF expression refers to.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefMentionComponent> getComponent() {
    return component;
  }

  /**
   * References to the component mentions which the MRF needs to be fully expanded. It is guaranteed
   * that for a given set of components there exists only a single CompoundMention, i.e. the
   * CompoundMentions are deduped to be unique so each set of components is present only once. The
   * ArgumentValue of the WebrefEntity.mrf refer to these components via ComponentReference; it is
   * guaranteed there are as many components as the MRF expression refers to.
   * @param component component or {@code null} for none
   */
  public RepositoryWebrefMentionCompoundMention setComponent(java.util.List<RepositoryWebrefMentionComponent> component) {
    this.component = component;
    return this;
  }

  /**
   * The WebrefEntity.mrf indices which this compound applies to. There can be at most one
   * CompoundMention which claims an MRF index, but it is possible there are MRF expressions which
   * are not claimed by any CompoundMention.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getMrfIndex() {
    return mrfIndex;
  }

  /**
   * The WebrefEntity.mrf indices which this compound applies to. There can be at most one
   * CompoundMention which claims an MRF index, but it is possible there are MRF expressions which
   * are not claimed by any CompoundMention.
   * @param mrfIndex mrfIndex or {@code null} for none
   */
  public RepositoryWebrefMentionCompoundMention setMrfIndex(java.util.List<java.lang.Integer> mrfIndex) {
    this.mrfIndex = mrfIndex;
    return this;
  }

  @Override
  public RepositoryWebrefMentionCompoundMention set(String fieldName, Object value) {
    return (RepositoryWebrefMentionCompoundMention) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefMentionCompoundMention clone() {
    return (RepositoryWebrefMentionCompoundMention) super.clone();
  }

}
