/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.certificatemanager.v1.model;

/**
 * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews
 * Managed Certificates automatically, for as long as it's authorized to do so.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ManagedCertificate extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Detailed state of the latest authorization attempt for each domain specified for
   * managed certificate resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuthorizationAttemptInfo> authorizationAttemptInfo;

  static {
    // hack to force ProGuard to consider AuthorizationAttemptInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AuthorizationAttemptInfo.class);
  }

  /**
   * Immutable. Authorizations that will be used for performing domain authorization.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> dnsAuthorizations;

  /**
   * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains
   * are only supported with DNS challenge resolution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> domains;

  /**
   * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI
   * certificates in the format `projects/locations/certificateIssuanceConfigs`. If this field is
   * not set, the certificates will instead be publicly signed as documented at
   * https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String issuanceConfig;

  /**
   * Output only. Information about issues with provisioning a Managed Certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ProvisioningIssue provisioningIssue;

  /**
   * Output only. State of the managed certificate resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Detailed state of the latest authorization attempt for each domain specified for
   * managed certificate resource.
   * @return value or {@code null} for none
   */
  public java.util.List<AuthorizationAttemptInfo> getAuthorizationAttemptInfo() {
    return authorizationAttemptInfo;
  }

  /**
   * Output only. Detailed state of the latest authorization attempt for each domain specified for
   * managed certificate resource.
   * @param authorizationAttemptInfo authorizationAttemptInfo or {@code null} for none
   */
  public ManagedCertificate setAuthorizationAttemptInfo(java.util.List<AuthorizationAttemptInfo> authorizationAttemptInfo) {
    this.authorizationAttemptInfo = authorizationAttemptInfo;
    return this;
  }

  /**
   * Immutable. Authorizations that will be used for performing domain authorization.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDnsAuthorizations() {
    return dnsAuthorizations;
  }

  /**
   * Immutable. Authorizations that will be used for performing domain authorization.
   * @param dnsAuthorizations dnsAuthorizations or {@code null} for none
   */
  public ManagedCertificate setDnsAuthorizations(java.util.List<java.lang.String> dnsAuthorizations) {
    this.dnsAuthorizations = dnsAuthorizations;
    return this;
  }

  /**
   * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains
   * are only supported with DNS challenge resolution.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDomains() {
    return domains;
  }

  /**
   * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains
   * are only supported with DNS challenge resolution.
   * @param domains domains or {@code null} for none
   */
  public ManagedCertificate setDomains(java.util.List<java.lang.String> domains) {
    this.domains = domains;
    return this;
  }

  /**
   * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI
   * certificates in the format `projects/locations/certificateIssuanceConfigs`. If this field is
   * not set, the certificates will instead be publicly signed as documented at
   * https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
   * @return value or {@code null} for none
   */
  public java.lang.String getIssuanceConfig() {
    return issuanceConfig;
  }

  /**
   * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI
   * certificates in the format `projects/locations/certificateIssuanceConfigs`. If this field is
   * not set, the certificates will instead be publicly signed as documented at
   * https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
   * @param issuanceConfig issuanceConfig or {@code null} for none
   */
  public ManagedCertificate setIssuanceConfig(java.lang.String issuanceConfig) {
    this.issuanceConfig = issuanceConfig;
    return this;
  }

  /**
   * Output only. Information about issues with provisioning a Managed Certificate.
   * @return value or {@code null} for none
   */
  public ProvisioningIssue getProvisioningIssue() {
    return provisioningIssue;
  }

  /**
   * Output only. Information about issues with provisioning a Managed Certificate.
   * @param provisioningIssue provisioningIssue or {@code null} for none
   */
  public ManagedCertificate setProvisioningIssue(ProvisioningIssue provisioningIssue) {
    this.provisioningIssue = provisioningIssue;
    return this;
  }

  /**
   * Output only. State of the managed certificate resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the managed certificate resource.
   * @param state state or {@code null} for none
   */
  public ManagedCertificate setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public ManagedCertificate set(String fieldName, Object value) {
    return (ManagedCertificate) super.set(fieldName, value);
  }

  @Override
  public ManagedCertificate clone() {
    return (ManagedCertificate) super.clone();
  }

}
