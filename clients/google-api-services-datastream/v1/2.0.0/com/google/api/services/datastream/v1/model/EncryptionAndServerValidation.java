/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * Message to represent the option where Datastream will enforce encryption and authenticate server
 * identity. ca_certificate must be set if user selects this option.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EncryptionAndServerValidation extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String caCertificate;

  /**
   * Optional. The hostname mentioned in the Subject or SAN extension of the server certificate.
   * This field is used for bypassing the hostname validation while verifying server certificate.
   * This is required for scenarios where the host name that datastream connects to is different
   * from the certificate's subject. This specifically happens for private connectivity. It could
   * also happen when the customer provides a public IP in connection profile but the same is not
   * present in the server certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serverCertificateHostname;

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCaCertificate() {
    return caCertificate;
  }

  /**
   * Optional. Input only. PEM-encoded certificate of the CA that signed the source database
   * server's certificate.
   * @param caCertificate caCertificate or {@code null} for none
   */
  public EncryptionAndServerValidation setCaCertificate(java.lang.String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * Optional. The hostname mentioned in the Subject or SAN extension of the server certificate.
   * This field is used for bypassing the hostname validation while verifying server certificate.
   * This is required for scenarios where the host name that datastream connects to is different
   * from the certificate's subject. This specifically happens for private connectivity. It could
   * also happen when the customer provides a public IP in connection profile but the same is not
   * present in the server certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getServerCertificateHostname() {
    return serverCertificateHostname;
  }

  /**
   * Optional. The hostname mentioned in the Subject or SAN extension of the server certificate.
   * This field is used for bypassing the hostname validation while verifying server certificate.
   * This is required for scenarios where the host name that datastream connects to is different
   * from the certificate's subject. This specifically happens for private connectivity. It could
   * also happen when the customer provides a public IP in connection profile but the same is not
   * present in the server certificate.
   * @param serverCertificateHostname serverCertificateHostname or {@code null} for none
   */
  public EncryptionAndServerValidation setServerCertificateHostname(java.lang.String serverCertificateHostname) {
    this.serverCertificateHostname = serverCertificateHostname;
    return this;
  }

  @Override
  public EncryptionAndServerValidation set(String fieldName, Object value) {
    return (EncryptionAndServerValidation) super.set(fieldName, value);
  }

  @Override
  public EncryptionAndServerValidation clone() {
    return (EncryptionAndServerValidation) super.clone();
  }

}
