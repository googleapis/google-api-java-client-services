/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigqueryconnection.v1.model;

/**
 * Connection properties specific to Cloud Spanner.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery Connection API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CloudSpannerProperties extends com.google.api.client.json.GenericJson {

  /**
   * Cloud Spanner database in the form `project/instance/database'
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin
   * should have provisioned the database role with appropriate permissions, such as `SELECT` and
   * `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more
   * details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-
   * about). REQUIRES: The database role name must start with a letter, and can only contain
   * letters, numbers, and underscores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseRole;

  /**
   * Allows setting max parallelism per query when executing on Spanner independent compute
   * resources. If unspecified, default values of parallelism are chosen that are dependent on the
   * Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES:
   * `use_data_boost` must be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxParallelism;

  /**
   * If set, the request will be executed via Spanner independent compute resources. REQUIRES:
   * `use_parallelism` must be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useDataBoost;

  /**
   * If parallelism should be used when reading from Cloud Spanner
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useParallelism;

  /**
   * Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used
   * to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless
   * analytics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useServerlessAnalytics;

  /**
   * Cloud Spanner database in the form `project/instance/database'
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * Cloud Spanner database in the form `project/instance/database'
   * @param database database or {@code null} for none
   */
  public CloudSpannerProperties setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin
   * should have provisioned the database role with appropriate permissions, such as `SELECT` and
   * `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more
   * details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-
   * about). REQUIRES: The database role name must start with a letter, and can only contain
   * letters, numbers, and underscores.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseRole() {
    return databaseRole;
  }

  /**
   * Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin
   * should have provisioned the database role with appropriate permissions, such as `SELECT` and
   * `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more
   * details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-
   * about). REQUIRES: The database role name must start with a letter, and can only contain
   * letters, numbers, and underscores.
   * @param databaseRole databaseRole or {@code null} for none
   */
  public CloudSpannerProperties setDatabaseRole(java.lang.String databaseRole) {
    this.databaseRole = databaseRole;
    return this;
  }

  /**
   * Allows setting max parallelism per query when executing on Spanner independent compute
   * resources. If unspecified, default values of parallelism are chosen that are dependent on the
   * Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES:
   * `use_data_boost` must be set.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxParallelism() {
    return maxParallelism;
  }

  /**
   * Allows setting max parallelism per query when executing on Spanner independent compute
   * resources. If unspecified, default values of parallelism are chosen that are dependent on the
   * Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES:
   * `use_data_boost` must be set.
   * @param maxParallelism maxParallelism or {@code null} for none
   */
  public CloudSpannerProperties setMaxParallelism(java.lang.Integer maxParallelism) {
    this.maxParallelism = maxParallelism;
    return this;
  }

  /**
   * If set, the request will be executed via Spanner independent compute resources. REQUIRES:
   * `use_parallelism` must be set.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseDataBoost() {
    return useDataBoost;
  }

  /**
   * If set, the request will be executed via Spanner independent compute resources. REQUIRES:
   * `use_parallelism` must be set.
   * @param useDataBoost useDataBoost or {@code null} for none
   */
  public CloudSpannerProperties setUseDataBoost(java.lang.Boolean useDataBoost) {
    this.useDataBoost = useDataBoost;
    return this;
  }

  /**
   * If parallelism should be used when reading from Cloud Spanner
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseParallelism() {
    return useParallelism;
  }

  /**
   * If parallelism should be used when reading from Cloud Spanner
   * @param useParallelism useParallelism or {@code null} for none
   */
  public CloudSpannerProperties setUseParallelism(java.lang.Boolean useParallelism) {
    this.useParallelism = useParallelism;
    return this;
  }

  /**
   * Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used
   * to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless
   * analytics.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseServerlessAnalytics() {
    return useServerlessAnalytics;
  }

  /**
   * Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used
   * to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless
   * analytics.
   * @param useServerlessAnalytics useServerlessAnalytics or {@code null} for none
   */
  public CloudSpannerProperties setUseServerlessAnalytics(java.lang.Boolean useServerlessAnalytics) {
    this.useServerlessAnalytics = useServerlessAnalytics;
    return this;
  }

  @Override
  public CloudSpannerProperties set(String fieldName, Object value) {
    return (CloudSpannerProperties) super.set(fieldName, value);
  }

  @Override
  public CloudSpannerProperties clone() {
    return (CloudSpannerProperties) super.clone();
  }

}
