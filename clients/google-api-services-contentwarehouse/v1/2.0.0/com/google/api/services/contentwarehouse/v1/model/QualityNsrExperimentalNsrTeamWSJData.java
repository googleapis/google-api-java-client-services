/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This is a wrapper needed for the WSJ corpus. We want the WSJ RPCs to inject both the
 * experimental_data and the keys, and as of June 2022 these need to be first level members of the
 * proto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualityNsrExperimentalNsrTeamWSJData extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityNsrExperimentalNsrTeamData experimentalNsrTeamData;

  /**
   * The key used to lookup this data in the WSJ corpus. The WSJ data is sitechunk-level, however
   * the documents in the MDU shards are simply urls. WSJ does a mapping from url -> {primary_chunk,
   * secondary, fallbacks, etc.} and retrieves all the keys from the corpus. This lookup key field
   * will keep track of which key was used for this particular lookup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookupKey;

  /**
   * @return value or {@code null} for none
   */
  public QualityNsrExperimentalNsrTeamData getExperimentalNsrTeamData() {
    return experimentalNsrTeamData;
  }

  /**
   * @param experimentalNsrTeamData experimentalNsrTeamData or {@code null} for none
   */
  public QualityNsrExperimentalNsrTeamWSJData setExperimentalNsrTeamData(QualityNsrExperimentalNsrTeamData experimentalNsrTeamData) {
    this.experimentalNsrTeamData = experimentalNsrTeamData;
    return this;
  }

  /**
   * The key used to lookup this data in the WSJ corpus. The WSJ data is sitechunk-level, however
   * the documents in the MDU shards are simply urls. WSJ does a mapping from url -> {primary_chunk,
   * secondary, fallbacks, etc.} and retrieves all the keys from the corpus. This lookup key field
   * will keep track of which key was used for this particular lookup.
   * @return value or {@code null} for none
   */
  public java.lang.String getLookupKey() {
    return lookupKey;
  }

  /**
   * The key used to lookup this data in the WSJ corpus. The WSJ data is sitechunk-level, however
   * the documents in the MDU shards are simply urls. WSJ does a mapping from url -> {primary_chunk,
   * secondary, fallbacks, etc.} and retrieves all the keys from the corpus. This lookup key field
   * will keep track of which key was used for this particular lookup.
   * @param lookupKey lookupKey or {@code null} for none
   */
  public QualityNsrExperimentalNsrTeamWSJData setLookupKey(java.lang.String lookupKey) {
    this.lookupKey = lookupKey;
    return this;
  }

  @Override
  public QualityNsrExperimentalNsrTeamWSJData set(String fieldName, Object value) {
    return (QualityNsrExperimentalNsrTeamWSJData) super.set(fieldName, value);
  }

  @Override
  public QualityNsrExperimentalNsrTeamWSJData clone() {
    return (QualityNsrExperimentalNsrTeamWSJData) super.clone();
  }

}
