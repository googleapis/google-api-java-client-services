/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.pagespeedonline.v5.model;

/**
 * A CrUX metric object for a single metric and form factor.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the PageSpeed Insights API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UserPageLoadMetricV5 extends com.google.api.client.json.GenericJson {

  /**
   * The category of the specific time metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String category;

  /**
   * Metric distributions. Proportions should sum up to 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Bucket> distributions;

  static {
    // hack to force ProGuard to consider Bucket used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Bucket.class);
  }

  /**
   * Identifies the form factor of the metric being collected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String formFactor;

  /**
   * The median number of the metric, in millisecond.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer median;

  /**
   * Identifies the type of the metric.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metricId;

  /**
   * We use this field to store certain percentile value for this metric. For v4, this field
   * contains pc50. For v5, this field contains pc90.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer percentile;

  /**
   * The category of the specific time metric.
   * @return value or {@code null} for none
   */
  public java.lang.String getCategory() {
    return category;
  }

  /**
   * The category of the specific time metric.
   * @param category category or {@code null} for none
   */
  public UserPageLoadMetricV5 setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  /**
   * Metric distributions. Proportions should sum up to 1.
   * @return value or {@code null} for none
   */
  public java.util.List<Bucket> getDistributions() {
    return distributions;
  }

  /**
   * Metric distributions. Proportions should sum up to 1.
   * @param distributions distributions or {@code null} for none
   */
  public UserPageLoadMetricV5 setDistributions(java.util.List<Bucket> distributions) {
    this.distributions = distributions;
    return this;
  }

  /**
   * Identifies the form factor of the metric being collected.
   * @return value or {@code null} for none
   */
  public java.lang.String getFormFactor() {
    return formFactor;
  }

  /**
   * Identifies the form factor of the metric being collected.
   * @param formFactor formFactor or {@code null} for none
   */
  public UserPageLoadMetricV5 setFormFactor(java.lang.String formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * The median number of the metric, in millisecond.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedian() {
    return median;
  }

  /**
   * The median number of the metric, in millisecond.
   * @param median median or {@code null} for none
   */
  public UserPageLoadMetricV5 setMedian(java.lang.Integer median) {
    this.median = median;
    return this;
  }

  /**
   * Identifies the type of the metric.
   * @return value or {@code null} for none
   */
  public java.lang.String getMetricId() {
    return metricId;
  }

  /**
   * Identifies the type of the metric.
   * @param metricId metricId or {@code null} for none
   */
  public UserPageLoadMetricV5 setMetricId(java.lang.String metricId) {
    this.metricId = metricId;
    return this;
  }

  /**
   * We use this field to store certain percentile value for this metric. For v4, this field
   * contains pc50. For v5, this field contains pc90.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPercentile() {
    return percentile;
  }

  /**
   * We use this field to store certain percentile value for this metric. For v4, this field
   * contains pc50. For v5, this field contains pc90.
   * @param percentile percentile or {@code null} for none
   */
  public UserPageLoadMetricV5 setPercentile(java.lang.Integer percentile) {
    this.percentile = percentile;
    return this;
  }

  @Override
  public UserPageLoadMetricV5 set(String fieldName, Object value) {
    return (UserPageLoadMetricV5) super.set(fieldName, value);
  }

  @Override
  public UserPageLoadMetricV5 clone() {
    return (UserPageLoadMetricV5) super.clone();
  }

}
