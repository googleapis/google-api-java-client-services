/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Metadata type for the long-running operation returned by RestoreDatabase.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RestoreDatabaseMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Information about the backup used to restore the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BackupInfo backupInfo;

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String cancelTime;

  /**
   * Name of the database being created and restored to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * If exists, the name of the long-running operation that will be used to track the post-restore
   * optimization process to optimize the performance of the restored database, and remove the
   * dependency on the restore source. The name is of the form
   * `projects//instances//databases//operations/` where the is the name of database being created
   * and restored to. The metadata type of the long-running operation is
   * OptimizeRestoredDatabaseMetadata. This long-running operation will be automatically created by
   * the system after the RestoreDatabase long-running operation completes successfully. This
   * operation will not be created if the restore was not successful.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String optimizeDatabaseOperationName;

  /**
   * The progress of the RestoreDatabase operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OperationProgress progress;

  /**
   * The type of the restore source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceType;

  /**
   * Information about the backup used to restore the database.
   * @return value or {@code null} for none
   */
  public BackupInfo getBackupInfo() {
    return backupInfo;
  }

  /**
   * Information about the backup used to restore the database.
   * @param backupInfo backupInfo or {@code null} for none
   */
  public RestoreDatabaseMetadata setBackupInfo(BackupInfo backupInfo) {
    this.backupInfo = backupInfo;
    return this;
  }

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * @return value or {@code null} for none
   */
  public String getCancelTime() {
    return cancelTime;
  }

  /**
   * The time at which cancellation of this operation was received. Operations.CancelOperation
   * starts asynchronous cancellation on a long-running operation. The server makes a best effort to
   * cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or
   * other methods to check whether the cancellation succeeded or whether the operation completed
   * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
   * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
   * corresponding to `Code.CANCELLED`.
   * @param cancelTime cancelTime or {@code null} for none
   */
  public RestoreDatabaseMetadata setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  /**
   * Name of the database being created and restored to.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the database being created and restored to.
   * @param name name or {@code null} for none
   */
  public RestoreDatabaseMetadata setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * If exists, the name of the long-running operation that will be used to track the post-restore
   * optimization process to optimize the performance of the restored database, and remove the
   * dependency on the restore source. The name is of the form
   * `projects//instances//databases//operations/` where the is the name of database being created
   * and restored to. The metadata type of the long-running operation is
   * OptimizeRestoredDatabaseMetadata. This long-running operation will be automatically created by
   * the system after the RestoreDatabase long-running operation completes successfully. This
   * operation will not be created if the restore was not successful.
   * @return value or {@code null} for none
   */
  public java.lang.String getOptimizeDatabaseOperationName() {
    return optimizeDatabaseOperationName;
  }

  /**
   * If exists, the name of the long-running operation that will be used to track the post-restore
   * optimization process to optimize the performance of the restored database, and remove the
   * dependency on the restore source. The name is of the form
   * `projects//instances//databases//operations/` where the is the name of database being created
   * and restored to. The metadata type of the long-running operation is
   * OptimizeRestoredDatabaseMetadata. This long-running operation will be automatically created by
   * the system after the RestoreDatabase long-running operation completes successfully. This
   * operation will not be created if the restore was not successful.
   * @param optimizeDatabaseOperationName optimizeDatabaseOperationName or {@code null} for none
   */
  public RestoreDatabaseMetadata setOptimizeDatabaseOperationName(java.lang.String optimizeDatabaseOperationName) {
    this.optimizeDatabaseOperationName = optimizeDatabaseOperationName;
    return this;
  }

  /**
   * The progress of the RestoreDatabase operation.
   * @return value or {@code null} for none
   */
  public OperationProgress getProgress() {
    return progress;
  }

  /**
   * The progress of the RestoreDatabase operation.
   * @param progress progress or {@code null} for none
   */
  public RestoreDatabaseMetadata setProgress(OperationProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * The type of the restore source.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceType() {
    return sourceType;
  }

  /**
   * The type of the restore source.
   * @param sourceType sourceType or {@code null} for none
   */
  public RestoreDatabaseMetadata setSourceType(java.lang.String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  @Override
  public RestoreDatabaseMetadata set(String fieldName, Object value) {
    return (RestoreDatabaseMetadata) super.set(fieldName, value);
  }

  @Override
  public RestoreDatabaseMetadata clone() {
    return (RestoreDatabaseMetadata) super.clone();
  }

}
