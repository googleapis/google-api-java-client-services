/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mirror.model;

/**
 * A geographic location that can be associated with a timeline item.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Mirror API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Location extends com.google.api.client.json.GenericJson {

  /**
   * The accuracy of the location fix in meters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double accuracy;

  /**
   * The full address of the location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String address;

  /**
   * The name to be displayed. This may be a business name or a user-defined place, such as "Home".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The ID of the location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * The type of resource. This is always mirror#location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The latitude, in degrees.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latitude;

  /**
   * The longitude, in degrees.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double longitude;

  /**
   * The time at which this location was captured, formatted according to RFC 3339.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private com.google.api.client.util.DateTime timestamp;

  /**
   * The accuracy of the location fix in meters.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAccuracy() {
    return accuracy;
  }

  /**
   * The accuracy of the location fix in meters.
   * @param accuracy accuracy or {@code null} for none
   */
  public Location setAccuracy(java.lang.Double accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  /**
   * The full address of the location.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * The full address of the location.
   * @param address address or {@code null} for none
   */
  public Location setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  /**
   * The name to be displayed. This may be a business name or a user-defined place, such as "Home".
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The name to be displayed. This may be a business name or a user-defined place, such as "Home".
   * @param displayName displayName or {@code null} for none
   */
  public Location setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The ID of the location.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The ID of the location.
   * @param id id or {@code null} for none
   */
  public Location setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * The type of resource. This is always mirror#location.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The type of resource. This is always mirror#location.
   * @param kind kind or {@code null} for none
   */
  public Location setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The latitude, in degrees.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * The latitude, in degrees.
   * @param latitude latitude or {@code null} for none
   */
  public Location setLatitude(java.lang.Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The longitude, in degrees.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * The longitude, in degrees.
   * @param longitude longitude or {@code null} for none
   */
  public Location setLongitude(java.lang.Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The time at which this location was captured, formatted according to RFC 3339.
   * @return value or {@code null} for none
   */
  public com.google.api.client.util.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * The time at which this location was captured, formatted according to RFC 3339.
   * @param timestamp timestamp or {@code null} for none
   */
  public Location setTimestamp(com.google.api.client.util.DateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  @Override
  public Location set(String fieldName, Object value) {
    return (Location) super.set(fieldName, value);
  }

  @Override
  public Location clone() {
    return (Location) super.clone();
  }

}
