/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Information about a feature's operations, e.g. when the feature is temporarily closed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreOperationsProto extends com.google.api.client.json.GenericJson {

  /**
   * Records temporary status change of the feature, such as remodel, vacation, etc.: the feature is
   * temporarily (but not permanently) unavailable. This prevents users from going to the feature.
   * Supports an arbitrary number of past, present, and future temporary closures, with the
   * feature's data owner choosing which range of past and future closures to permit or guarantee to
   * keep. All start and end dates must be unique from each other. If two consecutive dates are a
   * start and an end of a TemporaryClosureProto, then the two dates must be from the same
   * TemporaryClosureProto. Otherwise, exact dates may be missing so long as there exist a possible
   * sequence of temporary closures with both exact start_date and end_date that keeps any known
   * exact start_date and end_date. The earliest temporary closure must begin after whenever initial
   * operations begin. Likewise, the latest temporary closure must end before whenever the permanent
   * closure begins. NOTE: does *not* guarantee chronological order.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreTemporaryClosureProto> temporaryClosure;

  /**
   * Records temporary status change of the feature, such as remodel, vacation, etc.: the feature is
   * temporarily (but not permanently) unavailable. This prevents users from going to the feature.
   * Supports an arbitrary number of past, present, and future temporary closures, with the
   * feature's data owner choosing which range of past and future closures to permit or guarantee to
   * keep. All start and end dates must be unique from each other. If two consecutive dates are a
   * start and an end of a TemporaryClosureProto, then the two dates must be from the same
   * TemporaryClosureProto. Otherwise, exact dates may be missing so long as there exist a possible
   * sequence of temporary closures with both exact start_date and end_date that keeps any known
   * exact start_date and end_date. The earliest temporary closure must begin after whenever initial
   * operations begin. Likewise, the latest temporary closure must end before whenever the permanent
   * closure begins. NOTE: does *not* guarantee chronological order.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreTemporaryClosureProto> getTemporaryClosure() {
    return temporaryClosure;
  }

  /**
   * Records temporary status change of the feature, such as remodel, vacation, etc.: the feature is
   * temporarily (but not permanently) unavailable. This prevents users from going to the feature.
   * Supports an arbitrary number of past, present, and future temporary closures, with the
   * feature's data owner choosing which range of past and future closures to permit or guarantee to
   * keep. All start and end dates must be unique from each other. If two consecutive dates are a
   * start and an end of a TemporaryClosureProto, then the two dates must be from the same
   * TemporaryClosureProto. Otherwise, exact dates may be missing so long as there exist a possible
   * sequence of temporary closures with both exact start_date and end_date that keeps any known
   * exact start_date and end_date. The earliest temporary closure must begin after whenever initial
   * operations begin. Likewise, the latest temporary closure must end before whenever the permanent
   * closure begins. NOTE: does *not* guarantee chronological order.
   * @param temporaryClosure temporaryClosure or {@code null} for none
   */
  public GeostoreOperationsProto setTemporaryClosure(java.util.List<GeostoreTemporaryClosureProto> temporaryClosure) {
    this.temporaryClosure = temporaryClosure;
    return this;
  }

  @Override
  public GeostoreOperationsProto set(String fieldName, Object value) {
    return (GeostoreOperationsProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreOperationsProto clone() {
    return (GeostoreOperationsProto) super.clone();
  }

}
